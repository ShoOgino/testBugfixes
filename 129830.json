{"path":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#createCollection(String,int,int,String,Map[String,String]).mjava","commits":[{"id":"e4b636de9d648a57c06c19d05a2344be9a96ee11","date":1420139952,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#createCollection(String,int,int,String,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  public NamedList<Object> createCollection(String name, int numShards, int replicationFactor, \n      String configName, Map<String, String> collectionProperties) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CollectionAction.CREATE.name());\n    params.set(CoreAdminParams.NAME, name);\n    params.set(\"numShards\", numShards);\n    params.set(\"replicationFactor\", replicationFactor);\n    params.set(\"collection.configName\", configName);\n    if(collectionProperties != null) {\n      for(Map.Entry<String, String> property : collectionProperties.entrySet()){\n        params.set(CoreAdminParams.PROPERTY_PREFIX + property.getKey(), property.getValue());\n      }\n    }\n    \n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n    return solrClient.request(request);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a9be5565efd659f2400b5f4db5144a4ffa1da3d","date":1429792192,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#createCollection(String,int,int,String,Map[String,String]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#createCollection(String,int,int,String,Map[String,String]).mjava","sourceNew":"  public NamedList<Object> createCollection(String name, int numShards, int replicationFactor, \n      String configName, Map<String, String> collectionProperties) throws SolrServerException, IOException {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CollectionAction.CREATE.name());\n    params.set(CoreAdminParams.NAME, name);\n    params.set(\"numShards\", numShards);\n    params.set(\"replicationFactor\", replicationFactor);\n    params.set(\"collection.configName\", configName);\n    if(collectionProperties != null) {\n      for(Map.Entry<String, String> property : collectionProperties.entrySet()){\n        params.set(CoreAdminParams.PROPERTY_PREFIX + property.getKey(), property.getValue());\n      }\n    }\n    \n    return makeCollectionsRequest(params);\n  }\n\n","sourceOld":"  public NamedList<Object> createCollection(String name, int numShards, int replicationFactor, \n      String configName, Map<String, String> collectionProperties) throws SolrServerException, IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CollectionAction.CREATE.name());\n    params.set(CoreAdminParams.NAME, name);\n    params.set(\"numShards\", numShards);\n    params.set(\"replicationFactor\", replicationFactor);\n    params.set(\"collection.configName\", configName);\n    if(collectionProperties != null) {\n      for(Map.Entry<String, String> property : collectionProperties.entrySet()){\n        params.set(CoreAdminParams.PROPERTY_PREFIX + property.getKey(), property.getValue());\n      }\n    }\n    \n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/collections\");\n    \n    return solrClient.request(request);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4039b5ea46ea51770a47714b5f486a607ffc5a66","date":1438356910,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#createCollection(String,int,int,String,Map[String,String]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#createCollection(String,int,int,String,Map[String,String]).mjava","sourceNew":"  public NamedList<Object> createCollection(String name, int numShards, int replicationFactor, \n      String configName, Map<String, String> collectionProperties) throws SolrServerException, IOException {\n    return createCollection(name, numShards, replicationFactor, configName, null, collectionProperties);\n  }\n\n","sourceOld":"  public NamedList<Object> createCollection(String name, int numShards, int replicationFactor, \n      String configName, Map<String, String> collectionProperties) throws SolrServerException, IOException {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CollectionAction.CREATE.name());\n    params.set(CoreAdminParams.NAME, name);\n    params.set(\"numShards\", numShards);\n    params.set(\"replicationFactor\", replicationFactor);\n    params.set(\"collection.configName\", configName);\n    if(collectionProperties != null) {\n      for(Map.Entry<String, String> property : collectionProperties.entrySet()){\n        params.set(CoreAdminParams.PROPERTY_PREFIX + property.getKey(), property.getValue());\n      }\n    }\n    \n    return makeCollectionsRequest(params);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c0d0643efdcc41b0c814bf27a381e4dc2ff472b","date":1438774486,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#createCollection(String,int,int,String,Map[String,String]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#createCollection(String,int,int,String,Map[String,String]).mjava","sourceNew":"  public NamedList<Object> createCollection(String name, int numShards, int replicationFactor, \n      String configName, Map<String, String> collectionProperties) throws SolrServerException, IOException {\n    return createCollection(name, numShards, replicationFactor, configName, null, null, collectionProperties);\n  }\n\n","sourceOld":"  public NamedList<Object> createCollection(String name, int numShards, int replicationFactor, \n      String configName, Map<String, String> collectionProperties) throws SolrServerException, IOException {\n    return createCollection(name, numShards, replicationFactor, configName, null, collectionProperties);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e89a32cc825033ebae8bb9e1c6877c2d9d76749e","date":1476790453,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#createCollection(String,int,int,String,Map[String,String]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#createCollection(String,int,int,String,Map[String,String]).mjava","sourceNew":"  /**\n   * @deprecated Use {@link CollectionAdminRequest#createCollection(String, String, int, int)}\n   */\n  @Deprecated\n  public NamedList<Object> createCollection(String name, int numShards, int replicationFactor,\n      String configName, Map<String, String> collectionProperties) throws SolrServerException, IOException {\n    return createCollection(name, numShards, replicationFactor, configName, null, null, collectionProperties);\n  }\n\n","sourceOld":"  public NamedList<Object> createCollection(String name, int numShards, int replicationFactor, \n      String configName, Map<String, String> collectionProperties) throws SolrServerException, IOException {\n    return createCollection(name, numShards, replicationFactor, configName, null, null, collectionProperties);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b66303389c8fb5f8671f51333b0f2eee428be1b","date":1476790458,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#createCollection(String,int,int,String,Map[String,String]).mjava","sourceNew":null,"sourceOld":"  /**\n   * @deprecated Use {@link CollectionAdminRequest#createCollection(String, String, int, int)}\n   */\n  @Deprecated\n  public NamedList<Object> createCollection(String name, int numShards, int replicationFactor,\n      String configName, Map<String, String> collectionProperties) throws SolrServerException, IOException {\n    return createCollection(name, numShards, replicationFactor, configName, null, null, collectionProperties);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#createCollection(String,int,int,String,Map[String,String]).mjava","sourceNew":null,"sourceOld":"  public NamedList<Object> createCollection(String name, int numShards, int replicationFactor, \n      String configName, Map<String, String> collectionProperties) throws SolrServerException, IOException {\n    return createCollection(name, numShards, replicationFactor, configName, null, null, collectionProperties);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2c0d0643efdcc41b0c814bf27a381e4dc2ff472b":["4039b5ea46ea51770a47714b5f486a607ffc5a66"],"e89a32cc825033ebae8bb9e1c6877c2d9d76749e":["2c0d0643efdcc41b0c814bf27a381e4dc2ff472b"],"e4b636de9d648a57c06c19d05a2344be9a96ee11":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9a9be5565efd659f2400b5f4db5144a4ffa1da3d":["e4b636de9d648a57c06c19d05a2344be9a96ee11"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4039b5ea46ea51770a47714b5f486a607ffc5a66":["9a9be5565efd659f2400b5f4db5144a4ffa1da3d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2c0d0643efdcc41b0c814bf27a381e4dc2ff472b","3b66303389c8fb5f8671f51333b0f2eee428be1b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b66303389c8fb5f8671f51333b0f2eee428be1b"],"3b66303389c8fb5f8671f51333b0f2eee428be1b":["e89a32cc825033ebae8bb9e1c6877c2d9d76749e"]},"commit2Childs":{"2c0d0643efdcc41b0c814bf27a381e4dc2ff472b":["e89a32cc825033ebae8bb9e1c6877c2d9d76749e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e89a32cc825033ebae8bb9e1c6877c2d9d76749e":["3b66303389c8fb5f8671f51333b0f2eee428be1b"],"e4b636de9d648a57c06c19d05a2344be9a96ee11":["9a9be5565efd659f2400b5f4db5144a4ffa1da3d"],"9a9be5565efd659f2400b5f4db5144a4ffa1da3d":["4039b5ea46ea51770a47714b5f486a607ffc5a66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e4b636de9d648a57c06c19d05a2344be9a96ee11"],"4039b5ea46ea51770a47714b5f486a607ffc5a66":["2c0d0643efdcc41b0c814bf27a381e4dc2ff472b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b66303389c8fb5f8671f51333b0f2eee428be1b":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}