{"path":"src/test/org/apache/lucene/search/TestTermScorer#testSkipTo().mjava","commits":[{"id":"69ac39b86e913c67b6297d986e0c22daa0d4d365","date":1155936757,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermScorer#testSkipTo().mjava","pathOld":"/dev/null","sourceNew":"    public void testSkipTo() throws Exception\n    {\n\n        Term allTerm = new Term(FIELD, \"all\");\n        TermQuery termQuery = new TermQuery(allTerm);\n\n        Weight weight = termQuery.weight(indexSearcher);\n\n        TermScorer ts = new TermScorer(weight,\n                                       indexReader.termDocs(allTerm), indexSearcher.getSimilarity(),\n                                       indexReader.norms(FIELD));\n        assertTrue(\"ts is null and it shouldn't be\", ts != null);\n        assertTrue(\"Didn't skip\", ts.skipTo(3) == true);\n        //The next doc should be doc 5\n        assertTrue(\"doc should be number 5\", ts.doc() == 5);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64714133cf5ec732e3bbceee63351bb9af0117dc","date":1239647636,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermScorer#testSkipTo().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermScorer#testSkipTo().mjava","sourceNew":"    public void testSkipTo() throws Exception {\n\n        Term allTerm = new Term(FIELD, \"all\");\n        TermQuery termQuery = new TermQuery(allTerm);\n\n        Weight weight = termQuery.weight(indexSearcher);\n\n        TermScorer ts = new TermScorer(weight,\n                                       indexReader.termDocs(allTerm), indexSearcher.getSimilarity(),\n                                       indexReader.norms(FIELD));\n        assertTrue(\"Didn't skip\", ts.skipTo(3) == true);\n        //The next doc should be doc 5\n        assertTrue(\"doc should be number 5\", ts.doc() == 5);\n    }\n\n","sourceOld":"    public void testSkipTo() throws Exception\n    {\n\n        Term allTerm = new Term(FIELD, \"all\");\n        TermQuery termQuery = new TermQuery(allTerm);\n\n        Weight weight = termQuery.weight(indexSearcher);\n\n        TermScorer ts = new TermScorer(weight,\n                                       indexReader.termDocs(allTerm), indexSearcher.getSimilarity(),\n                                       indexReader.norms(FIELD));\n        assertTrue(\"ts is null and it shouldn't be\", ts != null);\n        assertTrue(\"Didn't skip\", ts.skipTo(3) == true);\n        //The next doc should be doc 5\n        assertTrue(\"doc should be number 5\", ts.doc() == 5);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30a558487f2298c2c19ceca9103c1b6865d64708","date":1244393921,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermScorer#testSkipTo().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermScorer#testSkipTo().mjava","sourceNew":"    public void testSkipTo() throws Exception {\n\n        Term allTerm = new Term(FIELD, \"all\");\n        TermQuery termQuery = new TermQuery(allTerm);\n\n        Weight weight = termQuery.weight(indexSearcher);\n\n        TermScorer ts = new TermScorer(weight,\n                                       indexReader.termDocs(allTerm), indexSearcher.getSimilarity(),\n                                       indexReader.norms(FIELD));\n        assertTrue(\"Didn't skip\", ts.advance(3) != DocIdSetIterator.NO_MORE_DOCS);\n        //The next doc should be doc 5\n        assertTrue(\"doc should be number 5\", ts.doc() == 5);\n    }\n\n","sourceOld":"    public void testSkipTo() throws Exception {\n\n        Term allTerm = new Term(FIELD, \"all\");\n        TermQuery termQuery = new TermQuery(allTerm);\n\n        Weight weight = termQuery.weight(indexSearcher);\n\n        TermScorer ts = new TermScorer(weight,\n                                       indexReader.termDocs(allTerm), indexSearcher.getSimilarity(),\n                                       indexReader.norms(FIELD));\n        assertTrue(\"Didn't skip\", ts.skipTo(3) == true);\n        //The next doc should be doc 5\n        assertTrue(\"doc should be number 5\", ts.doc() == 5);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermScorer#testSkipTo().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermScorer#testSkipTo().mjava","sourceNew":"    public void testSkipTo() throws Exception {\n\n        Term allTerm = new Term(FIELD, \"all\");\n        TermQuery termQuery = new TermQuery(allTerm);\n\n        QueryWeight weight = termQuery.queryWeight(indexSearcher);\n\n        TermScorer ts = new TermScorer(weight,\n                                       indexReader.termDocs(allTerm), indexSearcher.getSimilarity(),\n                                       indexReader.norms(FIELD));\n        assertTrue(\"Didn't skip\", ts.advance(3) != DocIdSetIterator.NO_MORE_DOCS);\n        //The next doc should be doc 5\n        assertTrue(\"doc should be number 5\", ts.docID() == 5);\n    }\n\n","sourceOld":"    public void testSkipTo() throws Exception {\n\n        Term allTerm = new Term(FIELD, \"all\");\n        TermQuery termQuery = new TermQuery(allTerm);\n\n        Weight weight = termQuery.weight(indexSearcher);\n\n        TermScorer ts = new TermScorer(weight,\n                                       indexReader.termDocs(allTerm), indexSearcher.getSimilarity(),\n                                       indexReader.norms(FIELD));\n        assertTrue(\"Didn't skip\", ts.advance(3) != DocIdSetIterator.NO_MORE_DOCS);\n        //The next doc should be doc 5\n        assertTrue(\"doc should be number 5\", ts.doc() == 5);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe941135bdfc28c81e20b4d21422f8726af34925","date":1250040150,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermScorer#testSkipTo().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermScorer#testSkipTo().mjava","sourceNew":"    public void testSkipTo() throws Exception {\n\n        Term allTerm = new Term(FIELD, \"all\");\n        TermQuery termQuery = new TermQuery(allTerm);\n\n        Weight weight = termQuery.weight(indexSearcher);\n\n        TermScorer ts = new TermScorer(weight,\n                                       indexReader.termDocs(allTerm), indexSearcher.getSimilarity(),\n                                       indexReader.norms(FIELD));\n        assertTrue(\"Didn't skip\", ts.advance(3) != DocIdSetIterator.NO_MORE_DOCS);\n        //The next doc should be doc 5\n        assertTrue(\"doc should be number 5\", ts.docID() == 5);\n    }\n\n","sourceOld":"    public void testSkipTo() throws Exception {\n\n        Term allTerm = new Term(FIELD, \"all\");\n        TermQuery termQuery = new TermQuery(allTerm);\n\n        QueryWeight weight = termQuery.queryWeight(indexSearcher);\n\n        TermScorer ts = new TermScorer(weight,\n                                       indexReader.termDocs(allTerm), indexSearcher.getSimilarity(),\n                                       indexReader.norms(FIELD));\n        assertTrue(\"Didn't skip\", ts.advance(3) != DocIdSetIterator.NO_MORE_DOCS);\n        //The next doc should be doc 5\n        assertTrue(\"doc should be number 5\", ts.docID() == 5);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermScorer#testSkipTo().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermScorer#testSkipTo().mjava","sourceNew":"    public void testSkipTo() throws Exception {\n\n        Term allTerm = new Term(FIELD, \"all\");\n        TermQuery termQuery = new TermQuery(allTerm);\n\n        Weight weight = termQuery.weight(indexSearcher);\n\n        TermScorer ts = new TermScorer(weight,\n                                       indexReader.termDocs(allTerm), indexSearcher.getSimilarity(),\n                                       indexReader.norms(FIELD));\n        assertTrue(\"Didn't skip\", ts.advance(3) != DocIdSetIterator.NO_MORE_DOCS);\n        //The next doc should be doc 5\n        assertTrue(\"doc should be number 5\", ts.docID() == 5);\n    }\n\n","sourceOld":"    public void testSkipTo() throws Exception {\n\n        Term allTerm = new Term(FIELD, \"all\");\n        TermQuery termQuery = new TermQuery(allTerm);\n\n        Weight weight = termQuery.weight(indexSearcher);\n\n        TermScorer ts = new TermScorer(weight,\n                                       indexReader.termDocs(allTerm), indexSearcher.getSimilarity(),\n                                       indexReader.norms(FIELD));\n        assertTrue(\"Didn't skip\", ts.advance(3) != DocIdSetIterator.NO_MORE_DOCS);\n        //The next doc should be doc 5\n        assertTrue(\"doc should be number 5\", ts.docID() == 5);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"30a558487f2298c2c19ceca9103c1b6865d64708":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["69ac39b86e913c67b6297d986e0c22daa0d4d365"],"69ac39b86e913c67b6297d986e0c22daa0d4d365":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fe941135bdfc28c81e20b4d21422f8726af34925":["052fac7830290bd38a04cddee1a121ee07656b56"],"052fac7830290bd38a04cddee1a121ee07656b56":["30a558487f2298c2c19ceca9103c1b6865d64708"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["fe941135bdfc28c81e20b4d21422f8726af34925"]},"commit2Childs":{"30a558487f2298c2c19ceca9103c1b6865d64708":["052fac7830290bd38a04cddee1a121ee07656b56"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["30a558487f2298c2c19ceca9103c1b6865d64708"],"69ac39b86e913c67b6297d986e0c22daa0d4d365":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["69ac39b86e913c67b6297d986e0c22daa0d4d365"],"fe941135bdfc28c81e20b4d21422f8726af34925":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"052fac7830290bd38a04cddee1a121ee07656b56":["fe941135bdfc28c81e20b4d21422f8726af34925"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}