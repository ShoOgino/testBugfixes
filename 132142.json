{"path":"solr/core/src/java/org/apache/solr/handler/SQLHandler#doSelect(SQLVisitor,Map[String,TableSpec],int,String,String).mjava","commits":[{"id":"7b2c4e17100e207bc842e56d016b9f91f411304e","date":1434336696,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#doSelect(SQLVisitor,Map[String,TableSpec],int,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private static TupleStream doSelect(SQLVisitor sqlVisitor,\n                                      Map<String, TableSpec> tableMap,\n                                      int numWorkers,\n                                      String workerCollection,\n                                      String workerZkHost) throws IOException {\n    List<String> fields = sqlVisitor.fields;\n    StringBuilder flbuf = new StringBuilder();\n    boolean comma = false;\n    for(String field : fields) {\n\n      if(comma) {\n        flbuf.append(\",\");\n      }\n\n      comma = true;\n      flbuf.append(field);\n    }\n\n    String fl = flbuf.toString();\n\n    List<SortItem> sorts = sqlVisitor.sorts;\n\n    StringBuilder siBuf = new StringBuilder();\n\n    comma = false;\n    for(SortItem sortItem : sorts) {\n      if(comma) {\n        siBuf.append(\",\");\n      }\n      siBuf.append(stripQuotes(sortItem.getSortKey().toString()) + \" \" + ascDesc(sortItem.getOrdering().toString()));\n    }\n\n    TableSpec tableSpec = tableMap.get(sqlVisitor.table);\n    String zkHost = tableSpec.zkHost;\n    String collection = tableSpec.collection;\n    Map<String, String> params = new HashMap();\n\n    params.put(\"fl\", fl.toString());\n    params.put(\"q\", sqlVisitor.query);\n    params.put(\"sort\", siBuf.toString());\n\n    if(sqlVisitor.limit > -1) {\n      params.put(\"rows\", Integer.toString(sqlVisitor.limit));\n      return new LimitStream(new CloudSolrStream(zkHost, collection, params), sqlVisitor.limit);\n    } else {\n      //Only use the export handler when no limit is specified.\n      params.put(CommonParams.QT, \"/export\");\n      return new CloudSolrStream(zkHost, collection, params);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8da9a71da64ce12a97dcfcdd912893aeb1fa2981","date":1437510515,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#doSelect(SQLVisitor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#doSelect(SQLVisitor,Map[String,TableSpec],int,String,String).mjava","sourceNew":"  private static TupleStream doSelect(SQLVisitor sqlVisitor) throws IOException {\n    List<String> fields = sqlVisitor.fields;\n    StringBuilder flbuf = new StringBuilder();\n    boolean comma = false;\n\n    if(fields.size() == 0) {\n      throw new IOException(\"Select columns must be specified.\");\n    }\n\n    boolean score = false;\n\n    for (String field : fields) {\n\n      if(field.contains(\"(\")) {\n        throw new IOException(\"Aggregate functions only supported with group by queries.\");\n      }\n\n      if(field.contains(\"*\")) {\n        throw new IOException(\"* is not supported for column selection.\");\n      }\n\n      if(field.equals(\"score\")) {\n        if(sqlVisitor.limit < 0) {\n          throw new IOException(\"score is not a valid field for unlimited select queries\");\n        } else {\n          score = true;\n        }\n      }\n\n      if (comma) {\n        flbuf.append(\",\");\n      }\n\n      comma = true;\n      flbuf.append(field);\n    }\n\n    String fl = flbuf.toString();\n\n    List<SortItem> sorts = sqlVisitor.sorts;\n\n    StringBuilder siBuf = new StringBuilder();\n\n    comma = false;\n\n    if(sorts != null) {\n      for (SortItem sortItem : sorts) {\n        if (comma) {\n          siBuf.append(\",\");\n        }\n        siBuf.append(stripQuotes(sortItem.getSortKey().toString()) + \" \" + ascDesc(sortItem.getOrdering().toString()));\n      }\n    } else {\n      if(sqlVisitor.limit < 0) {\n       throw new IOException(\"order by is required for unlimited select statements.\");\n      } else {\n        siBuf.append(\"score desc\");\n        if(!score) {\n          fl = fl+(\",score\");\n        }\n      }\n    }\n\n    TableSpec tableSpec = new TableSpec(sqlVisitor.table, defaultZkhost);\n\n    String zkHost = tableSpec.zkHost;\n    String collection = tableSpec.collection;\n    Map<String, String> params = new HashMap();\n\n    params.put(\"fl\", fl.toString());\n    params.put(\"q\", sqlVisitor.query);\n\n    if(siBuf.length() > 0) {\n      params.put(\"sort\", siBuf.toString());\n    }\n\n    if(sqlVisitor.limit > -1) {\n      params.put(\"rows\", Integer.toString(sqlVisitor.limit));\n      return new LimitStream(new CloudSolrStream(zkHost, collection, params), sqlVisitor.limit);\n    } else {\n      //Only use the export handler when no limit is specified.\n      params.put(CommonParams.QT, \"/export\");\n      return new CloudSolrStream(zkHost, collection, params);\n    }\n  }\n\n","sourceOld":"  private static TupleStream doSelect(SQLVisitor sqlVisitor,\n                                      Map<String, TableSpec> tableMap,\n                                      int numWorkers,\n                                      String workerCollection,\n                                      String workerZkHost) throws IOException {\n    List<String> fields = sqlVisitor.fields;\n    StringBuilder flbuf = new StringBuilder();\n    boolean comma = false;\n    for(String field : fields) {\n\n      if(comma) {\n        flbuf.append(\",\");\n      }\n\n      comma = true;\n      flbuf.append(field);\n    }\n\n    String fl = flbuf.toString();\n\n    List<SortItem> sorts = sqlVisitor.sorts;\n\n    StringBuilder siBuf = new StringBuilder();\n\n    comma = false;\n    for(SortItem sortItem : sorts) {\n      if(comma) {\n        siBuf.append(\",\");\n      }\n      siBuf.append(stripQuotes(sortItem.getSortKey().toString()) + \" \" + ascDesc(sortItem.getOrdering().toString()));\n    }\n\n    TableSpec tableSpec = tableMap.get(sqlVisitor.table);\n    String zkHost = tableSpec.zkHost;\n    String collection = tableSpec.collection;\n    Map<String, String> params = new HashMap();\n\n    params.put(\"fl\", fl.toString());\n    params.put(\"q\", sqlVisitor.query);\n    params.put(\"sort\", siBuf.toString());\n\n    if(sqlVisitor.limit > -1) {\n      params.put(\"rows\", Integer.toString(sqlVisitor.limit));\n      return new LimitStream(new CloudSolrStream(zkHost, collection, params), sqlVisitor.limit);\n    } else {\n      //Only use the export handler when no limit is specified.\n      params.put(CommonParams.QT, \"/export\");\n      return new CloudSolrStream(zkHost, collection, params);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b2c4e17100e207bc842e56d016b9f91f411304e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8da9a71da64ce12a97dcfcdd912893aeb1fa2981":["7b2c4e17100e207bc842e56d016b9f91f411304e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8da9a71da64ce12a97dcfcdd912893aeb1fa2981"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b2c4e17100e207bc842e56d016b9f91f411304e"],"7b2c4e17100e207bc842e56d016b9f91f411304e":["8da9a71da64ce12a97dcfcdd912893aeb1fa2981"],"8da9a71da64ce12a97dcfcdd912893aeb1fa2981":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}