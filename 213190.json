{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeFilter#getDocIdSet(LeafReaderContext,Bits).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeFilter#getDocIdSet(LeafReaderContext,Bits).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    return new VisitorTemplate(context, acceptDocs, true) {\n      private FixedBitSet inside;\n      private FixedBitSet outside;\n      private SpatialRelation visitRelation;\n\n      @Override\n      protected void start() {\n        inside = new FixedBitSet(maxDoc);\n        outside = new FixedBitSet(maxDoc);\n      }\n\n      @Override\n      protected DocIdSet finish() {\n        inside.andNot(outside);\n        return inside;\n      }\n\n      @Override\n      protected CellIterator findSubCellsToVisit(Cell cell) {\n        //use buffered query shape instead of orig.  Works with null too.\n        return cell.getNextLevelCells(bufferedQueryShape);\n      }\n\n      @Override\n      protected boolean visit(Cell cell) throws IOException {\n        //cell.relate is based on the bufferedQueryShape; we need to examine what\n        // the relation is against the queryShape\n        visitRelation = cell.getShape().relate(queryShape);\n        if (visitRelation == SpatialRelation.WITHIN) {\n          collectDocs(inside);\n          return false;\n        } else if (visitRelation == SpatialRelation.DISJOINT) {\n          collectDocs(outside);\n          return false;\n        } else if (cell.getLevel() == detailLevel) {\n          collectDocs(inside);\n          return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitLeaf(Cell cell) throws IOException {\n        //visitRelation is declared as a field, populated by visit() so we don't recompute it\n        assert detailLevel != cell.getLevel();\n        assert visitRelation == cell.getShape().relate(queryShape);\n        if (allCellsIntersectQuery(cell, visitRelation))\n          collectDocs(inside);\n        else\n          collectDocs(outside);\n      }\n\n      /** Returns true if the provided cell, and all its sub-cells down to\n       * detailLevel all intersect the queryShape.\n       */\n      private boolean allCellsIntersectQuery(Cell cell, SpatialRelation relate/*cell to query*/) {\n        if (relate == null)\n          relate = cell.getShape().relate(queryShape);\n        if (cell.getLevel() == detailLevel)\n          return relate.intersects();\n        if (relate == SpatialRelation.WITHIN)\n          return true;\n        if (relate == SpatialRelation.DISJOINT)\n          return false;\n        // Note: Generating all these cells just to determine intersection is not ideal.\n        // The real solution is LUCENE-4869.\n        CellIterator subCells = cell.getNextLevelCells(null);\n        while (subCells.hasNext()) {\n          Cell subCell = subCells.next();\n          if (!allCellsIntersectQuery(subCell, null))//recursion\n            return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitScanned(Cell cell) throws IOException {\n        if (allCellsIntersectQuery(cell, null)) {\n          collectDocs(inside);\n        } else {\n          collectDocs(outside);\n        }\n      }\n\n    }.getDocIdSet();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80c55596a764e2d397e982828e75fcac5ce430a0","date":1413987559,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeFilter#getDocIdSet(LeafReaderContext,Bits).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeFilter#getDocIdSet(LeafReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    return new VisitorTemplate(context, acceptDocs, true) {\n      private FixedBitSet inside;\n      private FixedBitSet outside;\n      private SpatialRelation visitRelation;\n\n      @Override\n      protected void start() {\n        inside = new FixedBitSet(maxDoc);\n        outside = new FixedBitSet(maxDoc);\n      }\n\n      @Override\n      protected DocIdSet finish() {\n        inside.andNot(outside);\n        return new FixedBitDocIdSet(inside);\n      }\n\n      @Override\n      protected CellIterator findSubCellsToVisit(Cell cell) {\n        //use buffered query shape instead of orig.  Works with null too.\n        return cell.getNextLevelCells(bufferedQueryShape);\n      }\n\n      @Override\n      protected boolean visit(Cell cell) throws IOException {\n        //cell.relate is based on the bufferedQueryShape; we need to examine what\n        // the relation is against the queryShape\n        visitRelation = cell.getShape().relate(queryShape);\n        if (visitRelation == SpatialRelation.WITHIN) {\n          collectDocs(inside);\n          return false;\n        } else if (visitRelation == SpatialRelation.DISJOINT) {\n          collectDocs(outside);\n          return false;\n        } else if (cell.getLevel() == detailLevel) {\n          collectDocs(inside);\n          return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitLeaf(Cell cell) throws IOException {\n        //visitRelation is declared as a field, populated by visit() so we don't recompute it\n        assert detailLevel != cell.getLevel();\n        assert visitRelation == cell.getShape().relate(queryShape);\n        if (allCellsIntersectQuery(cell, visitRelation))\n          collectDocs(inside);\n        else\n          collectDocs(outside);\n      }\n\n      /** Returns true if the provided cell, and all its sub-cells down to\n       * detailLevel all intersect the queryShape.\n       */\n      private boolean allCellsIntersectQuery(Cell cell, SpatialRelation relate/*cell to query*/) {\n        if (relate == null)\n          relate = cell.getShape().relate(queryShape);\n        if (cell.getLevel() == detailLevel)\n          return relate.intersects();\n        if (relate == SpatialRelation.WITHIN)\n          return true;\n        if (relate == SpatialRelation.DISJOINT)\n          return false;\n        // Note: Generating all these cells just to determine intersection is not ideal.\n        // The real solution is LUCENE-4869.\n        CellIterator subCells = cell.getNextLevelCells(null);\n        while (subCells.hasNext()) {\n          Cell subCell = subCells.next();\n          if (!allCellsIntersectQuery(subCell, null))//recursion\n            return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitScanned(Cell cell) throws IOException {\n        if (allCellsIntersectQuery(cell, null)) {\n          collectDocs(inside);\n        } else {\n          collectDocs(outside);\n        }\n      }\n\n    }.getDocIdSet();\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    return new VisitorTemplate(context, acceptDocs, true) {\n      private FixedBitSet inside;\n      private FixedBitSet outside;\n      private SpatialRelation visitRelation;\n\n      @Override\n      protected void start() {\n        inside = new FixedBitSet(maxDoc);\n        outside = new FixedBitSet(maxDoc);\n      }\n\n      @Override\n      protected DocIdSet finish() {\n        inside.andNot(outside);\n        return inside;\n      }\n\n      @Override\n      protected CellIterator findSubCellsToVisit(Cell cell) {\n        //use buffered query shape instead of orig.  Works with null too.\n        return cell.getNextLevelCells(bufferedQueryShape);\n      }\n\n      @Override\n      protected boolean visit(Cell cell) throws IOException {\n        //cell.relate is based on the bufferedQueryShape; we need to examine what\n        // the relation is against the queryShape\n        visitRelation = cell.getShape().relate(queryShape);\n        if (visitRelation == SpatialRelation.WITHIN) {\n          collectDocs(inside);\n          return false;\n        } else if (visitRelation == SpatialRelation.DISJOINT) {\n          collectDocs(outside);\n          return false;\n        } else if (cell.getLevel() == detailLevel) {\n          collectDocs(inside);\n          return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitLeaf(Cell cell) throws IOException {\n        //visitRelation is declared as a field, populated by visit() so we don't recompute it\n        assert detailLevel != cell.getLevel();\n        assert visitRelation == cell.getShape().relate(queryShape);\n        if (allCellsIntersectQuery(cell, visitRelation))\n          collectDocs(inside);\n        else\n          collectDocs(outside);\n      }\n\n      /** Returns true if the provided cell, and all its sub-cells down to\n       * detailLevel all intersect the queryShape.\n       */\n      private boolean allCellsIntersectQuery(Cell cell, SpatialRelation relate/*cell to query*/) {\n        if (relate == null)\n          relate = cell.getShape().relate(queryShape);\n        if (cell.getLevel() == detailLevel)\n          return relate.intersects();\n        if (relate == SpatialRelation.WITHIN)\n          return true;\n        if (relate == SpatialRelation.DISJOINT)\n          return false;\n        // Note: Generating all these cells just to determine intersection is not ideal.\n        // The real solution is LUCENE-4869.\n        CellIterator subCells = cell.getNextLevelCells(null);\n        while (subCells.hasNext()) {\n          Cell subCell = subCells.next();\n          if (!allCellsIntersectQuery(subCell, null))//recursion\n            return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitScanned(Cell cell) throws IOException {\n        if (allCellsIntersectQuery(cell, null)) {\n          collectDocs(inside);\n        } else {\n          collectDocs(outside);\n        }\n      }\n\n    }.getDocIdSet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e","date":1414135939,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeFilter#getDocIdSet(LeafReaderContext,Bits).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeFilter#getDocIdSet(LeafReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    return new VisitorTemplate(context, acceptDocs, true) {\n      private FixedBitSet inside;\n      private FixedBitSet outside;\n      private SpatialRelation visitRelation;\n\n      @Override\n      protected void start() {\n        inside = new FixedBitSet(maxDoc);\n        outside = new FixedBitSet(maxDoc);\n      }\n\n      @Override\n      protected DocIdSet finish() {\n        inside.andNot(outside);\n        return new BitDocIdSet(inside);\n      }\n\n      @Override\n      protected CellIterator findSubCellsToVisit(Cell cell) {\n        //use buffered query shape instead of orig.  Works with null too.\n        return cell.getNextLevelCells(bufferedQueryShape);\n      }\n\n      @Override\n      protected boolean visit(Cell cell) throws IOException {\n        //cell.relate is based on the bufferedQueryShape; we need to examine what\n        // the relation is against the queryShape\n        visitRelation = cell.getShape().relate(queryShape);\n        if (visitRelation == SpatialRelation.WITHIN) {\n          collectDocs(inside);\n          return false;\n        } else if (visitRelation == SpatialRelation.DISJOINT) {\n          collectDocs(outside);\n          return false;\n        } else if (cell.getLevel() == detailLevel) {\n          collectDocs(inside);\n          return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitLeaf(Cell cell) throws IOException {\n        //visitRelation is declared as a field, populated by visit() so we don't recompute it\n        assert detailLevel != cell.getLevel();\n        assert visitRelation == cell.getShape().relate(queryShape);\n        if (allCellsIntersectQuery(cell, visitRelation))\n          collectDocs(inside);\n        else\n          collectDocs(outside);\n      }\n\n      /** Returns true if the provided cell, and all its sub-cells down to\n       * detailLevel all intersect the queryShape.\n       */\n      private boolean allCellsIntersectQuery(Cell cell, SpatialRelation relate/*cell to query*/) {\n        if (relate == null)\n          relate = cell.getShape().relate(queryShape);\n        if (cell.getLevel() == detailLevel)\n          return relate.intersects();\n        if (relate == SpatialRelation.WITHIN)\n          return true;\n        if (relate == SpatialRelation.DISJOINT)\n          return false;\n        // Note: Generating all these cells just to determine intersection is not ideal.\n        // The real solution is LUCENE-4869.\n        CellIterator subCells = cell.getNextLevelCells(null);\n        while (subCells.hasNext()) {\n          Cell subCell = subCells.next();\n          if (!allCellsIntersectQuery(subCell, null))//recursion\n            return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitScanned(Cell cell) throws IOException {\n        if (allCellsIntersectQuery(cell, null)) {\n          collectDocs(inside);\n        } else {\n          collectDocs(outside);\n        }\n      }\n\n    }.getDocIdSet();\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    return new VisitorTemplate(context, acceptDocs, true) {\n      private FixedBitSet inside;\n      private FixedBitSet outside;\n      private SpatialRelation visitRelation;\n\n      @Override\n      protected void start() {\n        inside = new FixedBitSet(maxDoc);\n        outside = new FixedBitSet(maxDoc);\n      }\n\n      @Override\n      protected DocIdSet finish() {\n        inside.andNot(outside);\n        return new FixedBitDocIdSet(inside);\n      }\n\n      @Override\n      protected CellIterator findSubCellsToVisit(Cell cell) {\n        //use buffered query shape instead of orig.  Works with null too.\n        return cell.getNextLevelCells(bufferedQueryShape);\n      }\n\n      @Override\n      protected boolean visit(Cell cell) throws IOException {\n        //cell.relate is based on the bufferedQueryShape; we need to examine what\n        // the relation is against the queryShape\n        visitRelation = cell.getShape().relate(queryShape);\n        if (visitRelation == SpatialRelation.WITHIN) {\n          collectDocs(inside);\n          return false;\n        } else if (visitRelation == SpatialRelation.DISJOINT) {\n          collectDocs(outside);\n          return false;\n        } else if (cell.getLevel() == detailLevel) {\n          collectDocs(inside);\n          return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitLeaf(Cell cell) throws IOException {\n        //visitRelation is declared as a field, populated by visit() so we don't recompute it\n        assert detailLevel != cell.getLevel();\n        assert visitRelation == cell.getShape().relate(queryShape);\n        if (allCellsIntersectQuery(cell, visitRelation))\n          collectDocs(inside);\n        else\n          collectDocs(outside);\n      }\n\n      /** Returns true if the provided cell, and all its sub-cells down to\n       * detailLevel all intersect the queryShape.\n       */\n      private boolean allCellsIntersectQuery(Cell cell, SpatialRelation relate/*cell to query*/) {\n        if (relate == null)\n          relate = cell.getShape().relate(queryShape);\n        if (cell.getLevel() == detailLevel)\n          return relate.intersects();\n        if (relate == SpatialRelation.WITHIN)\n          return true;\n        if (relate == SpatialRelation.DISJOINT)\n          return false;\n        // Note: Generating all these cells just to determine intersection is not ideal.\n        // The real solution is LUCENE-4869.\n        CellIterator subCells = cell.getNextLevelCells(null);\n        while (subCells.hasNext()) {\n          Cell subCell = subCells.next();\n          if (!allCellsIntersectQuery(subCell, null))//recursion\n            return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitScanned(Cell cell) throws IOException {\n        if (allCellsIntersectQuery(cell, null)) {\n          collectDocs(inside);\n        } else {\n          collectDocs(outside);\n        }\n      }\n\n    }.getDocIdSet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55594c8c43c6898b2092b0f1a1310df52521a44a","date":1421338017,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeFilter#getDocIdSet(LeafReaderContext,Bits).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeFilter#getDocIdSet(LeafReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    return new VisitorTemplate(context, acceptDocs, true) {\n      private FixedBitSet inside;\n      private FixedBitSet outside;\n      private SpatialRelation visitRelation;\n\n      @Override\n      protected void start() {\n        inside = new FixedBitSet(maxDoc);\n        outside = new FixedBitSet(maxDoc);\n      }\n\n      @Override\n      protected DocIdSet finish() {\n        inside.andNot(outside);\n        return new BitDocIdSet(inside);\n      }\n\n      @Override\n      protected CellIterator findSubCellsToVisit(Cell cell) {\n        //use buffered query shape instead of orig.  Works with null too.\n        return cell.getNextLevelCells(bufferedQueryShape);\n      }\n\n      @Override\n      protected boolean visit(Cell cell) throws IOException {\n        //cell.relate is based on the bufferedQueryShape; we need to examine what\n        // the relation is against the queryShape\n        visitRelation = cell.getShape().relate(queryShape);\n        if (visitRelation == SpatialRelation.WITHIN) {\n          collectDocs(inside);\n          return false;\n        } else if (visitRelation == SpatialRelation.DISJOINT) {\n          collectDocs(outside);\n          return false;\n        } else if (cell.getLevel() == detailLevel) {\n          collectDocs(inside);\n          return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitLeaf(Cell cell) throws IOException {\n        //visitRelation is declared as a field, populated by visit() so we don't recompute it.\n        // We have a specialized visitScanned() which doesn't call this. If we didn't, we would\n        // not be able to assume visitRelation is from a prior visit() call since in scanning,\n        // parent cells aren't visited.\n        assert detailLevel != cell.getLevel();\n        assert visitRelation == cell.getShape().relate(queryShape);\n        if (allCellsIntersectQuery(cell, visitRelation))\n          collectDocs(inside);\n        else\n          collectDocs(outside);\n      }\n\n      /** Returns true if the provided cell, and all its sub-cells down to\n       * detailLevel all intersect the queryShape.\n       */\n      private boolean allCellsIntersectQuery(Cell cell, SpatialRelation relate/*cell to query*/) {\n        if (relate == null)\n          relate = cell.getShape().relate(queryShape);\n        if (cell.getLevel() == detailLevel)\n          return relate.intersects();\n        if (relate == SpatialRelation.WITHIN)\n          return true;\n        if (relate == SpatialRelation.DISJOINT)\n          return false;\n        // Note: Generating all these cells just to determine intersection is not ideal.\n        // The real solution is LUCENE-4869.\n        CellIterator subCells = cell.getNextLevelCells(null);\n        while (subCells.hasNext()) {\n          Cell subCell = subCells.next();\n          if (!allCellsIntersectQuery(subCell, null))//recursion\n            return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitScanned(Cell cell) throws IOException {\n        //slightly optimize over default impl; required for our 'visitRelation' field re-use above\n        if (allCellsIntersectQuery(cell, null)) {\n          collectDocs(inside);\n        } else {\n          collectDocs(outside);\n        }\n      }\n\n    }.getDocIdSet();\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    return new VisitorTemplate(context, acceptDocs, true) {\n      private FixedBitSet inside;\n      private FixedBitSet outside;\n      private SpatialRelation visitRelation;\n\n      @Override\n      protected void start() {\n        inside = new FixedBitSet(maxDoc);\n        outside = new FixedBitSet(maxDoc);\n      }\n\n      @Override\n      protected DocIdSet finish() {\n        inside.andNot(outside);\n        return new BitDocIdSet(inside);\n      }\n\n      @Override\n      protected CellIterator findSubCellsToVisit(Cell cell) {\n        //use buffered query shape instead of orig.  Works with null too.\n        return cell.getNextLevelCells(bufferedQueryShape);\n      }\n\n      @Override\n      protected boolean visit(Cell cell) throws IOException {\n        //cell.relate is based on the bufferedQueryShape; we need to examine what\n        // the relation is against the queryShape\n        visitRelation = cell.getShape().relate(queryShape);\n        if (visitRelation == SpatialRelation.WITHIN) {\n          collectDocs(inside);\n          return false;\n        } else if (visitRelation == SpatialRelation.DISJOINT) {\n          collectDocs(outside);\n          return false;\n        } else if (cell.getLevel() == detailLevel) {\n          collectDocs(inside);\n          return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitLeaf(Cell cell) throws IOException {\n        //visitRelation is declared as a field, populated by visit() so we don't recompute it\n        assert detailLevel != cell.getLevel();\n        assert visitRelation == cell.getShape().relate(queryShape);\n        if (allCellsIntersectQuery(cell, visitRelation))\n          collectDocs(inside);\n        else\n          collectDocs(outside);\n      }\n\n      /** Returns true if the provided cell, and all its sub-cells down to\n       * detailLevel all intersect the queryShape.\n       */\n      private boolean allCellsIntersectQuery(Cell cell, SpatialRelation relate/*cell to query*/) {\n        if (relate == null)\n          relate = cell.getShape().relate(queryShape);\n        if (cell.getLevel() == detailLevel)\n          return relate.intersects();\n        if (relate == SpatialRelation.WITHIN)\n          return true;\n        if (relate == SpatialRelation.DISJOINT)\n          return false;\n        // Note: Generating all these cells just to determine intersection is not ideal.\n        // The real solution is LUCENE-4869.\n        CellIterator subCells = cell.getNextLevelCells(null);\n        while (subCells.hasNext()) {\n          Cell subCell = subCells.next();\n          if (!allCellsIntersectQuery(subCell, null))//recursion\n            return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitScanned(Cell cell) throws IOException {\n        if (allCellsIntersectQuery(cell, null)) {\n          collectDocs(inside);\n        } else {\n          collectDocs(outside);\n        }\n      }\n\n    }.getDocIdSet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c77e2fbb736fd950ca537ce7c8e1c895eda4cdc4","date":1422887461,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeFilter#getDocIdSet(LeafReaderContext,Bits).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeFilter#getDocIdSet(LeafReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    return new VisitorTemplate(context, acceptDocs) {\n      private FixedBitSet inside;\n      private FixedBitSet outside;\n      private SpatialRelation visitRelation;\n\n      @Override\n      protected void start() {\n        inside = new FixedBitSet(maxDoc);\n        outside = new FixedBitSet(maxDoc);\n      }\n\n      @Override\n      protected DocIdSet finish() {\n        inside.andNot(outside);\n        return new BitDocIdSet(inside);\n      }\n\n      @Override\n      protected CellIterator findSubCellsToVisit(Cell cell) {\n        //use buffered query shape instead of orig.  Works with null too.\n        return cell.getNextLevelCells(bufferedQueryShape);\n      }\n\n      @Override\n      protected boolean visit(Cell cell) throws IOException {\n        //cell.relate is based on the bufferedQueryShape; we need to examine what\n        // the relation is against the queryShape\n        visitRelation = cell.getShape().relate(queryShape);\n        if (visitRelation == SpatialRelation.WITHIN) {\n          collectDocs(inside);\n          return false;\n        } else if (visitRelation == SpatialRelation.DISJOINT) {\n          collectDocs(outside);\n          return false;\n        } else if (cell.getLevel() == detailLevel) {\n          collectDocs(inside);\n          return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitLeaf(Cell cell) throws IOException {\n        //visitRelation is declared as a field, populated by visit() so we don't recompute it.\n        // We have a specialized visitScanned() which doesn't call this. If we didn't, we would\n        // not be able to assume visitRelation is from a prior visit() call since in scanning,\n        // parent cells aren't visited.\n        assert detailLevel != cell.getLevel();\n        assert visitRelation == cell.getShape().relate(queryShape);\n        if (allCellsIntersectQuery(cell, visitRelation))\n          collectDocs(inside);\n        else\n          collectDocs(outside);\n      }\n\n      /** Returns true if the provided cell, and all its sub-cells down to\n       * detailLevel all intersect the queryShape.\n       */\n      private boolean allCellsIntersectQuery(Cell cell, SpatialRelation relate/*cell to query*/) {\n        if (relate == null)\n          relate = cell.getShape().relate(queryShape);\n        if (cell.getLevel() == detailLevel)\n          return relate.intersects();\n        if (relate == SpatialRelation.WITHIN)\n          return true;\n        if (relate == SpatialRelation.DISJOINT)\n          return false;\n        // Note: Generating all these cells just to determine intersection is not ideal.\n        // The real solution is LUCENE-4869.\n        CellIterator subCells = cell.getNextLevelCells(null);\n        while (subCells.hasNext()) {\n          Cell subCell = subCells.next();\n          if (!allCellsIntersectQuery(subCell, null))//recursion\n            return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitScanned(Cell cell) throws IOException {\n        //slightly optimize over default impl; required for our 'visitRelation' field re-use above\n        if (allCellsIntersectQuery(cell, null)) {\n          collectDocs(inside);\n        } else {\n          collectDocs(outside);\n        }\n      }\n\n    }.getDocIdSet();\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    return new VisitorTemplate(context, acceptDocs, true) {\n      private FixedBitSet inside;\n      private FixedBitSet outside;\n      private SpatialRelation visitRelation;\n\n      @Override\n      protected void start() {\n        inside = new FixedBitSet(maxDoc);\n        outside = new FixedBitSet(maxDoc);\n      }\n\n      @Override\n      protected DocIdSet finish() {\n        inside.andNot(outside);\n        return new BitDocIdSet(inside);\n      }\n\n      @Override\n      protected CellIterator findSubCellsToVisit(Cell cell) {\n        //use buffered query shape instead of orig.  Works with null too.\n        return cell.getNextLevelCells(bufferedQueryShape);\n      }\n\n      @Override\n      protected boolean visit(Cell cell) throws IOException {\n        //cell.relate is based on the bufferedQueryShape; we need to examine what\n        // the relation is against the queryShape\n        visitRelation = cell.getShape().relate(queryShape);\n        if (visitRelation == SpatialRelation.WITHIN) {\n          collectDocs(inside);\n          return false;\n        } else if (visitRelation == SpatialRelation.DISJOINT) {\n          collectDocs(outside);\n          return false;\n        } else if (cell.getLevel() == detailLevel) {\n          collectDocs(inside);\n          return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitLeaf(Cell cell) throws IOException {\n        //visitRelation is declared as a field, populated by visit() so we don't recompute it.\n        // We have a specialized visitScanned() which doesn't call this. If we didn't, we would\n        // not be able to assume visitRelation is from a prior visit() call since in scanning,\n        // parent cells aren't visited.\n        assert detailLevel != cell.getLevel();\n        assert visitRelation == cell.getShape().relate(queryShape);\n        if (allCellsIntersectQuery(cell, visitRelation))\n          collectDocs(inside);\n        else\n          collectDocs(outside);\n      }\n\n      /** Returns true if the provided cell, and all its sub-cells down to\n       * detailLevel all intersect the queryShape.\n       */\n      private boolean allCellsIntersectQuery(Cell cell, SpatialRelation relate/*cell to query*/) {\n        if (relate == null)\n          relate = cell.getShape().relate(queryShape);\n        if (cell.getLevel() == detailLevel)\n          return relate.intersects();\n        if (relate == SpatialRelation.WITHIN)\n          return true;\n        if (relate == SpatialRelation.DISJOINT)\n          return false;\n        // Note: Generating all these cells just to determine intersection is not ideal.\n        // The real solution is LUCENE-4869.\n        CellIterator subCells = cell.getNextLevelCells(null);\n        while (subCells.hasNext()) {\n          Cell subCell = subCells.next();\n          if (!allCellsIntersectQuery(subCell, null))//recursion\n            return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitScanned(Cell cell) throws IOException {\n        //slightly optimize over default impl; required for our 'visitRelation' field re-use above\n        if (allCellsIntersectQuery(cell, null)) {\n          collectDocs(inside);\n        } else {\n          collectDocs(outside);\n        }\n      }\n\n    }.getDocIdSet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0","date":1426015524,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeFilter#getDocIdSet(LeafReaderContext,Bits).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeFilter#getDocIdSet(LeafReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    return new VisitorTemplate(context, acceptDocs) {\n      private FixedBitSet inside;\n      private FixedBitSet outside;\n\n      @Override\n      protected void start() {\n        inside = new FixedBitSet(maxDoc);\n        outside = new FixedBitSet(maxDoc);\n      }\n\n      @Override\n      protected DocIdSet finish() {\n        inside.andNot(outside);\n        return new BitDocIdSet(inside);\n      }\n\n      @Override\n      protected CellIterator findSubCellsToVisit(Cell cell) {\n        //use buffered query shape instead of orig.  Works with null too.\n        return cell.getNextLevelCells(bufferedQueryShape);\n      }\n\n      @Override\n      protected boolean visitPrefix(Cell cell) throws IOException {\n        //cell.relate is based on the bufferedQueryShape; we need to examine what\n        // the relation is against the queryShape\n        SpatialRelation visitRelation = cell.getShape().relate(queryShape);\n        if (cell.getLevel() == detailLevel) {\n          collectDocs(visitRelation.intersects() ? inside : outside);\n          return false;\n        } else if (visitRelation == SpatialRelation.WITHIN) {\n          collectDocs(inside);\n          return false;\n        } else if (visitRelation == SpatialRelation.DISJOINT) {\n          collectDocs(outside);\n          return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitLeaf(Cell cell) throws IOException {\n        if (allCellsIntersectQuery(cell))\n          collectDocs(inside);\n        else\n          collectDocs(outside);\n      }\n\n      /** Returns true if the provided cell, and all its sub-cells down to\n       * detailLevel all intersect the queryShape.\n       */\n      private boolean allCellsIntersectQuery(Cell cell) {\n        SpatialRelation relate = cell.getShape().relate(queryShape);\n        if (cell.getLevel() == detailLevel)\n          return relate.intersects();\n        if (relate == SpatialRelation.WITHIN)\n          return true;\n        if (relate == SpatialRelation.DISJOINT)\n          return false;\n        // Note: Generating all these cells just to determine intersection is not ideal.\n        // The real solution is LUCENE-4869.\n        CellIterator subCells = cell.getNextLevelCells(null);\n        while (subCells.hasNext()) {\n          Cell subCell = subCells.next();\n          if (!allCellsIntersectQuery(subCell))//recursion\n            return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitScanned(Cell cell) throws IOException {\n        visitLeaf(cell);//collects as we want, even if not a leaf\n//        if (cell.isLeaf()) {\n//          visitLeaf(cell);\n//        } else {\n//          visitPrefix(cell);\n//        }\n      }\n\n    }.getDocIdSet();\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    return new VisitorTemplate(context, acceptDocs) {\n      private FixedBitSet inside;\n      private FixedBitSet outside;\n      private SpatialRelation visitRelation;\n\n      @Override\n      protected void start() {\n        inside = new FixedBitSet(maxDoc);\n        outside = new FixedBitSet(maxDoc);\n      }\n\n      @Override\n      protected DocIdSet finish() {\n        inside.andNot(outside);\n        return new BitDocIdSet(inside);\n      }\n\n      @Override\n      protected CellIterator findSubCellsToVisit(Cell cell) {\n        //use buffered query shape instead of orig.  Works with null too.\n        return cell.getNextLevelCells(bufferedQueryShape);\n      }\n\n      @Override\n      protected boolean visit(Cell cell) throws IOException {\n        //cell.relate is based on the bufferedQueryShape; we need to examine what\n        // the relation is against the queryShape\n        visitRelation = cell.getShape().relate(queryShape);\n        if (visitRelation == SpatialRelation.WITHIN) {\n          collectDocs(inside);\n          return false;\n        } else if (visitRelation == SpatialRelation.DISJOINT) {\n          collectDocs(outside);\n          return false;\n        } else if (cell.getLevel() == detailLevel) {\n          collectDocs(inside);\n          return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitLeaf(Cell cell) throws IOException {\n        //visitRelation is declared as a field, populated by visit() so we don't recompute it.\n        // We have a specialized visitScanned() which doesn't call this. If we didn't, we would\n        // not be able to assume visitRelation is from a prior visit() call since in scanning,\n        // parent cells aren't visited.\n        assert detailLevel != cell.getLevel();\n        assert visitRelation == cell.getShape().relate(queryShape);\n        if (allCellsIntersectQuery(cell, visitRelation))\n          collectDocs(inside);\n        else\n          collectDocs(outside);\n      }\n\n      /** Returns true if the provided cell, and all its sub-cells down to\n       * detailLevel all intersect the queryShape.\n       */\n      private boolean allCellsIntersectQuery(Cell cell, SpatialRelation relate/*cell to query*/) {\n        if (relate == null)\n          relate = cell.getShape().relate(queryShape);\n        if (cell.getLevel() == detailLevel)\n          return relate.intersects();\n        if (relate == SpatialRelation.WITHIN)\n          return true;\n        if (relate == SpatialRelation.DISJOINT)\n          return false;\n        // Note: Generating all these cells just to determine intersection is not ideal.\n        // The real solution is LUCENE-4869.\n        CellIterator subCells = cell.getNextLevelCells(null);\n        while (subCells.hasNext()) {\n          Cell subCell = subCells.next();\n          if (!allCellsIntersectQuery(subCell, null))//recursion\n            return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitScanned(Cell cell) throws IOException {\n        //slightly optimize over default impl; required for our 'visitRelation' field re-use above\n        if (allCellsIntersectQuery(cell, null)) {\n          collectDocs(inside);\n        } else {\n          collectDocs(outside);\n        }\n      }\n\n    }.getDocIdSet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeFilter#getDocIdSet(LeafReaderContext,Bits).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeFilter#getDocIdSet(LeafReaderContext,Bits).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    return new VisitorTemplate(context, acceptDocs) {\n      private FixedBitSet inside;\n      private FixedBitSet outside;\n\n      @Override\n      protected void start() {\n        inside = new FixedBitSet(maxDoc);\n        outside = new FixedBitSet(maxDoc);\n      }\n\n      @Override\n      protected DocIdSet finish() {\n        inside.andNot(outside);\n        return new BitDocIdSet(inside);\n      }\n\n      @Override\n      protected CellIterator findSubCellsToVisit(Cell cell) {\n        //use buffered query shape instead of orig.  Works with null too.\n        return cell.getNextLevelCells(bufferedQueryShape);\n      }\n\n      @Override\n      protected boolean visitPrefix(Cell cell) throws IOException {\n        //cell.relate is based on the bufferedQueryShape; we need to examine what\n        // the relation is against the queryShape\n        SpatialRelation visitRelation = cell.getShape().relate(queryShape);\n        if (cell.getLevel() == detailLevel) {\n          collectDocs(visitRelation.intersects() ? inside : outside);\n          return false;\n        } else if (visitRelation == SpatialRelation.WITHIN) {\n          collectDocs(inside);\n          return false;\n        } else if (visitRelation == SpatialRelation.DISJOINT) {\n          collectDocs(outside);\n          return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitLeaf(Cell cell) throws IOException {\n        if (allCellsIntersectQuery(cell))\n          collectDocs(inside);\n        else\n          collectDocs(outside);\n      }\n\n      /** Returns true if the provided cell, and all its sub-cells down to\n       * detailLevel all intersect the queryShape.\n       */\n      private boolean allCellsIntersectQuery(Cell cell) {\n        SpatialRelation relate = cell.getShape().relate(queryShape);\n        if (cell.getLevel() == detailLevel)\n          return relate.intersects();\n        if (relate == SpatialRelation.WITHIN)\n          return true;\n        if (relate == SpatialRelation.DISJOINT)\n          return false;\n        // Note: Generating all these cells just to determine intersection is not ideal.\n        // The real solution is LUCENE-4869.\n        CellIterator subCells = cell.getNextLevelCells(null);\n        while (subCells.hasNext()) {\n          Cell subCell = subCells.next();\n          if (!allCellsIntersectQuery(subCell))//recursion\n            return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitScanned(Cell cell) throws IOException {\n        visitLeaf(cell);//collects as we want, even if not a leaf\n//        if (cell.isLeaf()) {\n//          visitLeaf(cell);\n//        } else {\n//          visitPrefix(cell);\n//        }\n      }\n\n    }.getDocIdSet();\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    return new VisitorTemplate(context, acceptDocs) {\n      private FixedBitSet inside;\n      private FixedBitSet outside;\n      private SpatialRelation visitRelation;\n\n      @Override\n      protected void start() {\n        inside = new FixedBitSet(maxDoc);\n        outside = new FixedBitSet(maxDoc);\n      }\n\n      @Override\n      protected DocIdSet finish() {\n        inside.andNot(outside);\n        return new BitDocIdSet(inside);\n      }\n\n      @Override\n      protected CellIterator findSubCellsToVisit(Cell cell) {\n        //use buffered query shape instead of orig.  Works with null too.\n        return cell.getNextLevelCells(bufferedQueryShape);\n      }\n\n      @Override\n      protected boolean visit(Cell cell) throws IOException {\n        //cell.relate is based on the bufferedQueryShape; we need to examine what\n        // the relation is against the queryShape\n        visitRelation = cell.getShape().relate(queryShape);\n        if (visitRelation == SpatialRelation.WITHIN) {\n          collectDocs(inside);\n          return false;\n        } else if (visitRelation == SpatialRelation.DISJOINT) {\n          collectDocs(outside);\n          return false;\n        } else if (cell.getLevel() == detailLevel) {\n          collectDocs(inside);\n          return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitLeaf(Cell cell) throws IOException {\n        //visitRelation is declared as a field, populated by visit() so we don't recompute it.\n        // We have a specialized visitScanned() which doesn't call this. If we didn't, we would\n        // not be able to assume visitRelation is from a prior visit() call since in scanning,\n        // parent cells aren't visited.\n        assert detailLevel != cell.getLevel();\n        assert visitRelation == cell.getShape().relate(queryShape);\n        if (allCellsIntersectQuery(cell, visitRelation))\n          collectDocs(inside);\n        else\n          collectDocs(outside);\n      }\n\n      /** Returns true if the provided cell, and all its sub-cells down to\n       * detailLevel all intersect the queryShape.\n       */\n      private boolean allCellsIntersectQuery(Cell cell, SpatialRelation relate/*cell to query*/) {\n        if (relate == null)\n          relate = cell.getShape().relate(queryShape);\n        if (cell.getLevel() == detailLevel)\n          return relate.intersects();\n        if (relate == SpatialRelation.WITHIN)\n          return true;\n        if (relate == SpatialRelation.DISJOINT)\n          return false;\n        // Note: Generating all these cells just to determine intersection is not ideal.\n        // The real solution is LUCENE-4869.\n        CellIterator subCells = cell.getNextLevelCells(null);\n        while (subCells.hasNext()) {\n          Cell subCell = subCells.next();\n          if (!allCellsIntersectQuery(subCell, null))//recursion\n            return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitScanned(Cell cell) throws IOException {\n        //slightly optimize over default impl; required for our 'visitRelation' field re-use above\n        if (allCellsIntersectQuery(cell, null)) {\n          collectDocs(inside);\n        } else {\n          collectDocs(outside);\n        }\n      }\n\n    }.getDocIdSet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"672b198fc3dce868916c727917cae58c2906763d","date":1443669960,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeQuery#getDocIdSet(LeafReaderContext).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/WithinPrefixTreeFilter#getDocIdSet(LeafReaderContext,Bits).mjava","sourceNew":"  @Override\n  protected DocIdSet getDocIdSet(LeafReaderContext context) throws IOException {\n    return new VisitorTemplate(context) {\n      private FixedBitSet inside;\n      private FixedBitSet outside;\n\n      @Override\n      protected void start() {\n        inside = new FixedBitSet(maxDoc);\n        outside = new FixedBitSet(maxDoc);\n      }\n\n      @Override\n      protected DocIdSet finish() {\n        inside.andNot(outside);\n        return new BitDocIdSet(inside);\n      }\n\n      @Override\n      protected CellIterator findSubCellsToVisit(Cell cell) {\n        //use buffered query shape instead of orig.  Works with null too.\n        return cell.getNextLevelCells(bufferedQueryShape);\n      }\n\n      @Override\n      protected boolean visitPrefix(Cell cell) throws IOException {\n        //cell.relate is based on the bufferedQueryShape; we need to examine what\n        // the relation is against the queryShape\n        SpatialRelation visitRelation = cell.getShape().relate(queryShape);\n        if (cell.getLevel() == detailLevel) {\n          collectDocs(visitRelation.intersects() ? inside : outside);\n          return false;\n        } else if (visitRelation == SpatialRelation.WITHIN) {\n          collectDocs(inside);\n          return false;\n        } else if (visitRelation == SpatialRelation.DISJOINT) {\n          collectDocs(outside);\n          return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitLeaf(Cell cell) throws IOException {\n        if (allCellsIntersectQuery(cell))\n          collectDocs(inside);\n        else\n          collectDocs(outside);\n      }\n\n      /** Returns true if the provided cell, and all its sub-cells down to\n       * detailLevel all intersect the queryShape.\n       */\n      private boolean allCellsIntersectQuery(Cell cell) {\n        SpatialRelation relate = cell.getShape().relate(queryShape);\n        if (cell.getLevel() == detailLevel)\n          return relate.intersects();\n        if (relate == SpatialRelation.WITHIN)\n          return true;\n        if (relate == SpatialRelation.DISJOINT)\n          return false;\n        // Note: Generating all these cells just to determine intersection is not ideal.\n        // The real solution is LUCENE-4869.\n        CellIterator subCells = cell.getNextLevelCells(null);\n        while (subCells.hasNext()) {\n          Cell subCell = subCells.next();\n          if (!allCellsIntersectQuery(subCell))//recursion\n            return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitScanned(Cell cell) throws IOException {\n        visitLeaf(cell);//collects as we want, even if not a leaf\n//        if (cell.isLeaf()) {\n//          visitLeaf(cell);\n//        } else {\n//          visitPrefix(cell);\n//        }\n      }\n\n    }.getDocIdSet();\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(LeafReaderContext context, Bits acceptDocs) throws IOException {\n    return new VisitorTemplate(context, acceptDocs) {\n      private FixedBitSet inside;\n      private FixedBitSet outside;\n\n      @Override\n      protected void start() {\n        inside = new FixedBitSet(maxDoc);\n        outside = new FixedBitSet(maxDoc);\n      }\n\n      @Override\n      protected DocIdSet finish() {\n        inside.andNot(outside);\n        return new BitDocIdSet(inside);\n      }\n\n      @Override\n      protected CellIterator findSubCellsToVisit(Cell cell) {\n        //use buffered query shape instead of orig.  Works with null too.\n        return cell.getNextLevelCells(bufferedQueryShape);\n      }\n\n      @Override\n      protected boolean visitPrefix(Cell cell) throws IOException {\n        //cell.relate is based on the bufferedQueryShape; we need to examine what\n        // the relation is against the queryShape\n        SpatialRelation visitRelation = cell.getShape().relate(queryShape);\n        if (cell.getLevel() == detailLevel) {\n          collectDocs(visitRelation.intersects() ? inside : outside);\n          return false;\n        } else if (visitRelation == SpatialRelation.WITHIN) {\n          collectDocs(inside);\n          return false;\n        } else if (visitRelation == SpatialRelation.DISJOINT) {\n          collectDocs(outside);\n          return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitLeaf(Cell cell) throws IOException {\n        if (allCellsIntersectQuery(cell))\n          collectDocs(inside);\n        else\n          collectDocs(outside);\n      }\n\n      /** Returns true if the provided cell, and all its sub-cells down to\n       * detailLevel all intersect the queryShape.\n       */\n      private boolean allCellsIntersectQuery(Cell cell) {\n        SpatialRelation relate = cell.getShape().relate(queryShape);\n        if (cell.getLevel() == detailLevel)\n          return relate.intersects();\n        if (relate == SpatialRelation.WITHIN)\n          return true;\n        if (relate == SpatialRelation.DISJOINT)\n          return false;\n        // Note: Generating all these cells just to determine intersection is not ideal.\n        // The real solution is LUCENE-4869.\n        CellIterator subCells = cell.getNextLevelCells(null);\n        while (subCells.hasNext()) {\n          Cell subCell = subCells.next();\n          if (!allCellsIntersectQuery(subCell))//recursion\n            return false;\n        }\n        return true;\n      }\n\n      @Override\n      protected void visitScanned(Cell cell) throws IOException {\n        visitLeaf(cell);//collects as we want, even if not a leaf\n//        if (cell.isLeaf()) {\n//          visitLeaf(cell);\n//        } else {\n//          visitPrefix(cell);\n//        }\n      }\n\n    }.getDocIdSet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["c77e2fbb736fd950ca537ce7c8e1c895eda4cdc4","11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0"],"672b198fc3dce868916c727917cae58c2906763d":["11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80c55596a764e2d397e982828e75fcac5ce430a0":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c77e2fbb736fd950ca537ce7c8e1c895eda4cdc4":["55594c8c43c6898b2092b0f1a1310df52521a44a"],"11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0":["c77e2fbb736fd950ca537ce7c8e1c895eda4cdc4"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["80c55596a764e2d397e982828e75fcac5ce430a0"],"55594c8c43c6898b2092b0f1a1310df52521a44a":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["672b198fc3dce868916c727917cae58c2906763d"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"672b198fc3dce868916c727917cae58c2906763d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"80c55596a764e2d397e982828e75fcac5ce430a0":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"c77e2fbb736fd950ca537ce7c8e1c895eda4cdc4":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0"],"11ac40ec1cc2f6d61b8c8f0cd9b306dfcef5aaf0":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","672b198fc3dce868916c727917cae58c2906763d"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["55594c8c43c6898b2092b0f1a1310df52521a44a"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["80c55596a764e2d397e982828e75fcac5ce430a0"],"55594c8c43c6898b2092b0f1a1310df52521a44a":["c77e2fbb736fd950ca537ce7c8e1c895eda4cdc4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}