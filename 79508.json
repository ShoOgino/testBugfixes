{"path":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#set(int,long[],int,int).mjava","commits":[{"id":"55110eb60c5105294fc2ae7912d82b750865aa58","date":1341389822,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#set(int,long[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int set(int index, long[] arr, int off, int len) {\n    assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n    assert index >= 0 && index < valueCount;\n    len = Math.min(len, valueCount - index);\n    assert off + len <= arr.length;\n\n    final int originalIndex = index;\n    final BulkOperation op = BulkOperation.of(PackedInts.Format.PACKED, bitsPerValue);\n\n    // go to the next block where the value does not span across two blocks\n    final int offsetInBlocks = index % op.values();\n    if (offsetInBlocks != 0) {\n      for (int i = offsetInBlocks; i < op.values() && len > 0; ++i) {\n        set(index++, arr[off++]);\n        --len;\n      }\n      if (len == 0) {\n        return index - originalIndex;\n      }\n    }\n\n    // bulk get\n    assert index % op.values() == 0;\n    int blockIndex = (int) ((long) index * bitsPerValue) >>> BLOCK_BITS;\n    assert (((long)index * bitsPerValue) & MOD_MASK) == 0;\n    final int iterations = len / op.values();\n    op.set(blocks, blockIndex, arr, off, iterations);\n    final int setValues = iterations * op.values();\n    index += setValues;\n    len -= setValues;\n    assert len >= 0;\n\n    if (index > originalIndex) {\n      // stay at the block boundary\n      return index - originalIndex;\n    } else {\n      // no progress so far => already at a block boundary but no full block to get\n      assert index == originalIndex;\n      return super.set(index, arr, off, len);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#set(int,long[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int set(int index, long[] arr, int off, int len) {\n    assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n    assert index >= 0 && index < valueCount;\n    len = Math.min(len, valueCount - index);\n    assert off + len <= arr.length;\n\n    final int originalIndex = index;\n    final BulkOperation op = BulkOperation.of(PackedInts.Format.PACKED, bitsPerValue);\n\n    // go to the next block where the value does not span across two blocks\n    final int offsetInBlocks = index % op.values();\n    if (offsetInBlocks != 0) {\n      for (int i = offsetInBlocks; i < op.values() && len > 0; ++i) {\n        set(index++, arr[off++]);\n        --len;\n      }\n      if (len == 0) {\n        return index - originalIndex;\n      }\n    }\n\n    // bulk get\n    assert index % op.values() == 0;\n    int blockIndex = (int) ((long) index * bitsPerValue) >>> BLOCK_BITS;\n    assert (((long)index * bitsPerValue) & MOD_MASK) == 0;\n    final int iterations = len / op.values();\n    op.set(blocks, blockIndex, arr, off, iterations);\n    final int setValues = iterations * op.values();\n    index += setValues;\n    len -= setValues;\n    assert len >= 0;\n\n    if (index > originalIndex) {\n      // stay at the block boundary\n      return index - originalIndex;\n    } else {\n      // no progress so far => already at a block boundary but no full block to get\n      assert index == originalIndex;\n      return super.set(index, arr, off, len);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"035130b0c342f404c027af8c8870587c3741cb1e","date":1342898805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#set(int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#set(int,long[],int,int).mjava","sourceNew":"  @Override\n  public int set(int index, long[] arr, int off, int len) {\n    assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n    assert index >= 0 && index < valueCount;\n    len = Math.min(len, valueCount - index);\n    assert off + len <= arr.length;\n\n    final int originalIndex = index;\n    final PackedInts.Encoder encoder = BulkOperation.of(PackedInts.Format.PACKED, bitsPerValue);\n\n    // go to the next block where the value does not span across two blocks\n    final int offsetInBlocks = index % encoder.values();\n    if (offsetInBlocks != 0) {\n      for (int i = offsetInBlocks; i < encoder.values() && len > 0; ++i) {\n        set(index++, arr[off++]);\n        --len;\n      }\n      if (len == 0) {\n        return index - originalIndex;\n      }\n    }\n\n    // bulk set\n    assert index % encoder.values() == 0;\n    int blockIndex = (int) ((long) index * bitsPerValue) >>> BLOCK_BITS;\n    assert (((long)index * bitsPerValue) & MOD_MASK) == 0;\n    final int iterations = len / encoder.values();\n    encoder.encode(\n        LongBuffer.wrap(arr, off, arr.length - off),\n        LongBuffer.wrap(blocks, blockIndex, blocks.length - blockIndex),\n        iterations);\n    final int setValues = iterations * encoder.values();\n    index += setValues;\n    len -= setValues;\n    assert len >= 0;\n\n    if (index > originalIndex) {\n      // stay at the block boundary\n      return index - originalIndex;\n    } else {\n      // no progress so far => already at a block boundary but no full block to get\n      assert index == originalIndex;\n      return super.set(index, arr, off, len);\n    }\n  }\n\n","sourceOld":"  @Override\n  public int set(int index, long[] arr, int off, int len) {\n    assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n    assert index >= 0 && index < valueCount;\n    len = Math.min(len, valueCount - index);\n    assert off + len <= arr.length;\n\n    final int originalIndex = index;\n    final BulkOperation op = BulkOperation.of(PackedInts.Format.PACKED, bitsPerValue);\n\n    // go to the next block where the value does not span across two blocks\n    final int offsetInBlocks = index % op.values();\n    if (offsetInBlocks != 0) {\n      for (int i = offsetInBlocks; i < op.values() && len > 0; ++i) {\n        set(index++, arr[off++]);\n        --len;\n      }\n      if (len == 0) {\n        return index - originalIndex;\n      }\n    }\n\n    // bulk get\n    assert index % op.values() == 0;\n    int blockIndex = (int) ((long) index * bitsPerValue) >>> BLOCK_BITS;\n    assert (((long)index * bitsPerValue) & MOD_MASK) == 0;\n    final int iterations = len / op.values();\n    op.set(blocks, blockIndex, arr, off, iterations);\n    final int setValues = iterations * op.values();\n    index += setValues;\n    len -= setValues;\n    assert len >= 0;\n\n    if (index > originalIndex) {\n      // stay at the block boundary\n      return index - originalIndex;\n    } else {\n      // no progress so far => already at a block boundary but no full block to get\n      assert index == originalIndex;\n      return super.set(index, arr, off, len);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e3359210474c12c0b79e6400450313e3d7ef2bb","date":1344347790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#set(int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#set(int,long[],int,int).mjava","sourceNew":"  @Override\n  public int set(int index, long[] arr, int off, int len) {\n    assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n    assert index >= 0 && index < valueCount;\n    len = Math.min(len, valueCount - index);\n    assert off + len <= arr.length;\n\n    final int originalIndex = index;\n    final PackedInts.Encoder encoder = BulkOperation.of(PackedInts.Format.PACKED, bitsPerValue);\n\n    // go to the next block where the value does not span across two blocks\n    final int offsetInBlocks = index % encoder.valueCount();\n    if (offsetInBlocks != 0) {\n      for (int i = offsetInBlocks; i < encoder.valueCount() && len > 0; ++i) {\n        set(index++, arr[off++]);\n        --len;\n      }\n      if (len == 0) {\n        return index - originalIndex;\n      }\n    }\n\n    // bulk set\n    assert index % encoder.valueCount() == 0;\n    int blockIndex = (int) ((long) index * bitsPerValue) >>> BLOCK_BITS;\n    assert (((long)index * bitsPerValue) & MOD_MASK) == 0;\n    final int iterations = len / encoder.valueCount();\n    encoder.encode(arr, off, blocks, blockIndex, iterations);\n    final int setValues = iterations * encoder.valueCount();\n    index += setValues;\n    len -= setValues;\n    assert len >= 0;\n\n    if (index > originalIndex) {\n      // stay at the block boundary\n      return index - originalIndex;\n    } else {\n      // no progress so far => already at a block boundary but no full block to get\n      assert index == originalIndex;\n      return super.set(index, arr, off, len);\n    }\n  }\n\n","sourceOld":"  @Override\n  public int set(int index, long[] arr, int off, int len) {\n    assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n    assert index >= 0 && index < valueCount;\n    len = Math.min(len, valueCount - index);\n    assert off + len <= arr.length;\n\n    final int originalIndex = index;\n    final PackedInts.Encoder encoder = BulkOperation.of(PackedInts.Format.PACKED, bitsPerValue);\n\n    // go to the next block where the value does not span across two blocks\n    final int offsetInBlocks = index % encoder.values();\n    if (offsetInBlocks != 0) {\n      for (int i = offsetInBlocks; i < encoder.values() && len > 0; ++i) {\n        set(index++, arr[off++]);\n        --len;\n      }\n      if (len == 0) {\n        return index - originalIndex;\n      }\n    }\n\n    // bulk set\n    assert index % encoder.values() == 0;\n    int blockIndex = (int) ((long) index * bitsPerValue) >>> BLOCK_BITS;\n    assert (((long)index * bitsPerValue) & MOD_MASK) == 0;\n    final int iterations = len / encoder.values();\n    encoder.encode(\n        LongBuffer.wrap(arr, off, arr.length - off),\n        LongBuffer.wrap(blocks, blockIndex, blocks.length - blockIndex),\n        iterations);\n    final int setValues = iterations * encoder.values();\n    index += setValues;\n    len -= setValues;\n    assert len >= 0;\n\n    if (index > originalIndex) {\n      // stay at the block boundary\n      return index - originalIndex;\n    } else {\n      // no progress so far => already at a block boundary but no full block to get\n      assert index == originalIndex;\n      return super.set(index, arr, off, len);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8615860cb50aefb8eebca1d1b3893dbe21cf126","date":1345550448,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#set(int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#set(int,long[],int,int).mjava","sourceNew":"  @Override\n  public int set(int index, long[] arr, int off, int len) {\n    assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n    assert index >= 0 && index < valueCount;\n    len = Math.min(len, valueCount - index);\n    assert off + len <= arr.length;\n\n    final int originalIndex = index;\n    final PackedInts.Encoder encoder = BulkOperation.of(PackedInts.Format.PACKED, bitsPerValue);\n\n    // go to the next block where the value does not span across two blocks\n    final int offsetInBlocks = index % encoder.valueCount();\n    if (offsetInBlocks != 0) {\n      for (int i = offsetInBlocks; i < encoder.valueCount() && len > 0; ++i) {\n        set(index++, arr[off++]);\n        --len;\n      }\n      if (len == 0) {\n        return index - originalIndex;\n      }\n    }\n\n    // bulk set\n    assert index % encoder.valueCount() == 0;\n    int blockIndex = (int) ((long) index * bitsPerValue) >>> BLOCK_BITS;\n    assert (((long)index * bitsPerValue) & MOD_MASK) == 0;\n    final int iterations = len / encoder.valueCount();\n    encoder.encode(arr, off, blocks, blockIndex, iterations);\n    final int setValues = iterations * encoder.valueCount();\n    index += setValues;\n    len -= setValues;\n    assert len >= 0;\n\n    if (index > originalIndex) {\n      // stay at the block boundary\n      return index - originalIndex;\n    } else {\n      // no progress so far => already at a block boundary but no full block to get\n      assert index == originalIndex;\n      return super.set(index, arr, off, len);\n    }\n  }\n\n","sourceOld":"  @Override\n  public int set(int index, long[] arr, int off, int len) {\n    assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n    assert index >= 0 && index < valueCount;\n    len = Math.min(len, valueCount - index);\n    assert off + len <= arr.length;\n\n    final int originalIndex = index;\n    final BulkOperation op = BulkOperation.of(PackedInts.Format.PACKED, bitsPerValue);\n\n    // go to the next block where the value does not span across two blocks\n    final int offsetInBlocks = index % op.values();\n    if (offsetInBlocks != 0) {\n      for (int i = offsetInBlocks; i < op.values() && len > 0; ++i) {\n        set(index++, arr[off++]);\n        --len;\n      }\n      if (len == 0) {\n        return index - originalIndex;\n      }\n    }\n\n    // bulk get\n    assert index % op.values() == 0;\n    int blockIndex = (int) ((long) index * bitsPerValue) >>> BLOCK_BITS;\n    assert (((long)index * bitsPerValue) & MOD_MASK) == 0;\n    final int iterations = len / op.values();\n    op.set(blocks, blockIndex, arr, off, iterations);\n    final int setValues = iterations * op.values();\n    index += setValues;\n    len -= setValues;\n    assert len >= 0;\n\n    if (index > originalIndex) {\n      // stay at the block boundary\n      return index - originalIndex;\n    } else {\n      // no progress so far => already at a block boundary but no full block to get\n      assert index == originalIndex;\n      return super.set(index, arr, off, len);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#set(int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#set(int,long[],int,int).mjava","sourceNew":"  @Override\n  public int set(int index, long[] arr, int off, int len) {\n    assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n    assert index >= 0 && index < valueCount;\n    len = Math.min(len, valueCount - index);\n    assert off + len <= arr.length;\n\n    final int originalIndex = index;\n    final PackedInts.Encoder encoder = BulkOperation.of(PackedInts.Format.PACKED, bitsPerValue);\n\n    // go to the next block where the value does not span across two blocks\n    final int offsetInBlocks = index % encoder.valueCount();\n    if (offsetInBlocks != 0) {\n      for (int i = offsetInBlocks; i < encoder.valueCount() && len > 0; ++i) {\n        set(index++, arr[off++]);\n        --len;\n      }\n      if (len == 0) {\n        return index - originalIndex;\n      }\n    }\n\n    // bulk set\n    assert index % encoder.valueCount() == 0;\n    int blockIndex = (int) ((long) index * bitsPerValue) >>> BLOCK_BITS;\n    assert (((long)index * bitsPerValue) & MOD_MASK) == 0;\n    final int iterations = len / encoder.valueCount();\n    encoder.encode(arr, off, blocks, blockIndex, iterations);\n    final int setValues = iterations * encoder.valueCount();\n    index += setValues;\n    len -= setValues;\n    assert len >= 0;\n\n    if (index > originalIndex) {\n      // stay at the block boundary\n      return index - originalIndex;\n    } else {\n      // no progress so far => already at a block boundary but no full block to get\n      assert index == originalIndex;\n      return super.set(index, arr, off, len);\n    }\n  }\n\n","sourceOld":"  @Override\n  public int set(int index, long[] arr, int off, int len) {\n    assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n    assert index >= 0 && index < valueCount;\n    len = Math.min(len, valueCount - index);\n    assert off + len <= arr.length;\n\n    final int originalIndex = index;\n    final BulkOperation op = BulkOperation.of(PackedInts.Format.PACKED, bitsPerValue);\n\n    // go to the next block where the value does not span across two blocks\n    final int offsetInBlocks = index % op.values();\n    if (offsetInBlocks != 0) {\n      for (int i = offsetInBlocks; i < op.values() && len > 0; ++i) {\n        set(index++, arr[off++]);\n        --len;\n      }\n      if (len == 0) {\n        return index - originalIndex;\n      }\n    }\n\n    // bulk get\n    assert index % op.values() == 0;\n    int blockIndex = (int) ((long) index * bitsPerValue) >>> BLOCK_BITS;\n    assert (((long)index * bitsPerValue) & MOD_MASK) == 0;\n    final int iterations = len / op.values();\n    op.set(blocks, blockIndex, arr, off, iterations);\n    final int setValues = iterations * op.values();\n    index += setValues;\n    len -= setValues;\n    assert len >= 0;\n\n    if (index > originalIndex) {\n      // stay at the block boundary\n      return index - originalIndex;\n    } else {\n      // no progress so far => already at a block boundary but no full block to get\n      assert index == originalIndex;\n      return super.set(index, arr, off, len);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e29d4d91327929d477b701d3ef2f5b3457d26ec5","date":1359465689,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#set(int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#set(int,long[],int,int).mjava","sourceNew":"  @Override\n  public int set(int index, long[] arr, int off, int len) {\n    assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n    assert index >= 0 && index < valueCount;\n    len = Math.min(len, valueCount - index);\n    assert off + len <= arr.length;\n\n    final int originalIndex = index;\n    final PackedInts.Encoder encoder = BulkOperation.of(PackedInts.Format.PACKED, bitsPerValue);\n\n    // go to the next block where the value does not span across two blocks\n    final int offsetInBlocks = index % encoder.longValueCount();\n    if (offsetInBlocks != 0) {\n      for (int i = offsetInBlocks; i < encoder.longValueCount() && len > 0; ++i) {\n        set(index++, arr[off++]);\n        --len;\n      }\n      if (len == 0) {\n        return index - originalIndex;\n      }\n    }\n\n    // bulk set\n    assert index % encoder.longValueCount() == 0;\n    int blockIndex = (int) ((long) index * bitsPerValue) >>> BLOCK_BITS;\n    assert (((long)index * bitsPerValue) & MOD_MASK) == 0;\n    final int iterations = len / encoder.longValueCount();\n    encoder.encode(arr, off, blocks, blockIndex, iterations);\n    final int setValues = iterations * encoder.longValueCount();\n    index += setValues;\n    len -= setValues;\n    assert len >= 0;\n\n    if (index > originalIndex) {\n      // stay at the block boundary\n      return index - originalIndex;\n    } else {\n      // no progress so far => already at a block boundary but no full block to get\n      assert index == originalIndex;\n      return super.set(index, arr, off, len);\n    }\n  }\n\n","sourceOld":"  @Override\n  public int set(int index, long[] arr, int off, int len) {\n    assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n    assert index >= 0 && index < valueCount;\n    len = Math.min(len, valueCount - index);\n    assert off + len <= arr.length;\n\n    final int originalIndex = index;\n    final PackedInts.Encoder encoder = BulkOperation.of(PackedInts.Format.PACKED, bitsPerValue);\n\n    // go to the next block where the value does not span across two blocks\n    final int offsetInBlocks = index % encoder.valueCount();\n    if (offsetInBlocks != 0) {\n      for (int i = offsetInBlocks; i < encoder.valueCount() && len > 0; ++i) {\n        set(index++, arr[off++]);\n        --len;\n      }\n      if (len == 0) {\n        return index - originalIndex;\n      }\n    }\n\n    // bulk set\n    assert index % encoder.valueCount() == 0;\n    int blockIndex = (int) ((long) index * bitsPerValue) >>> BLOCK_BITS;\n    assert (((long)index * bitsPerValue) & MOD_MASK) == 0;\n    final int iterations = len / encoder.valueCount();\n    encoder.encode(arr, off, blocks, blockIndex, iterations);\n    final int setValues = iterations * encoder.valueCount();\n    index += setValues;\n    len -= setValues;\n    assert len >= 0;\n\n    if (index > originalIndex) {\n      // stay at the block boundary\n      return index - originalIndex;\n    } else {\n      // no progress so far => already at a block boundary but no full block to get\n      assert index == originalIndex;\n      return super.set(index, arr, off, len);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de522d9303bd67c8473a269a1319125d1f3700e0","date":1359477856,"type":3,"author":"Adrien Grand","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#set(int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#set(int,long[],int,int).mjava","sourceNew":"  @Override\n  public int set(int index, long[] arr, int off, int len) {\n    assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n    assert index >= 0 && index < valueCount;\n    len = Math.min(len, valueCount - index);\n    assert off + len <= arr.length;\n\n    final int originalIndex = index;\n    final PackedInts.Encoder encoder = BulkOperation.of(PackedInts.Format.PACKED, bitsPerValue);\n\n    // go to the next block where the value does not span across two blocks\n    final int offsetInBlocks = index % encoder.longValueCount();\n    if (offsetInBlocks != 0) {\n      for (int i = offsetInBlocks; i < encoder.longValueCount() && len > 0; ++i) {\n        set(index++, arr[off++]);\n        --len;\n      }\n      if (len == 0) {\n        return index - originalIndex;\n      }\n    }\n\n    // bulk set\n    assert index % encoder.longValueCount() == 0;\n    int blockIndex = (int) ((long) index * bitsPerValue) >>> BLOCK_BITS;\n    assert (((long)index * bitsPerValue) & MOD_MASK) == 0;\n    final int iterations = len / encoder.longValueCount();\n    encoder.encode(arr, off, blocks, blockIndex, iterations);\n    final int setValues = iterations * encoder.longValueCount();\n    index += setValues;\n    len -= setValues;\n    assert len >= 0;\n\n    if (index > originalIndex) {\n      // stay at the block boundary\n      return index - originalIndex;\n    } else {\n      // no progress so far => already at a block boundary but no full block to get\n      assert index == originalIndex;\n      return super.set(index, arr, off, len);\n    }\n  }\n\n","sourceOld":"  @Override\n  public int set(int index, long[] arr, int off, int len) {\n    assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n    assert index >= 0 && index < valueCount;\n    len = Math.min(len, valueCount - index);\n    assert off + len <= arr.length;\n\n    final int originalIndex = index;\n    final PackedInts.Encoder encoder = BulkOperation.of(PackedInts.Format.PACKED, bitsPerValue);\n\n    // go to the next block where the value does not span across two blocks\n    final int offsetInBlocks = index % encoder.valueCount();\n    if (offsetInBlocks != 0) {\n      for (int i = offsetInBlocks; i < encoder.valueCount() && len > 0; ++i) {\n        set(index++, arr[off++]);\n        --len;\n      }\n      if (len == 0) {\n        return index - originalIndex;\n      }\n    }\n\n    // bulk set\n    assert index % encoder.valueCount() == 0;\n    int blockIndex = (int) ((long) index * bitsPerValue) >>> BLOCK_BITS;\n    assert (((long)index * bitsPerValue) & MOD_MASK) == 0;\n    final int iterations = len / encoder.valueCount();\n    encoder.encode(arr, off, blocks, blockIndex, iterations);\n    final int setValues = iterations * encoder.valueCount();\n    index += setValues;\n    len -= setValues;\n    assert len >= 0;\n\n    if (index > originalIndex) {\n      // stay at the block boundary\n      return index - originalIndex;\n    } else {\n      // no progress so far => already at a block boundary but no full block to get\n      assert index == originalIndex;\n      return super.set(index, arr, off, len);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de4347ab0fe69a9f7b94709da9f24119a07a3ceb","date":1359630917,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#set(int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#set(int,long[],int,int).mjava","sourceNew":"  @Override\n  public int set(int index, long[] arr, int off, int len) {\n    assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n    assert index >= 0 && index < valueCount;\n    len = Math.min(len, valueCount - index);\n    assert off + len <= arr.length;\n\n    final int originalIndex = index;\n    final PackedInts.Encoder encoder = BulkOperation.of(PackedInts.Format.PACKED, bitsPerValue);\n\n    // go to the next block where the value does not span across two blocks\n    final int offsetInBlocks = index % encoder.longValueCount();\n    if (offsetInBlocks != 0) {\n      for (int i = offsetInBlocks; i < encoder.longValueCount() && len > 0; ++i) {\n        set(index++, arr[off++]);\n        --len;\n      }\n      if (len == 0) {\n        return index - originalIndex;\n      }\n    }\n\n    // bulk set\n    assert index % encoder.longValueCount() == 0;\n    int blockIndex = (int) (((long) index * bitsPerValue) >>> BLOCK_BITS);\n    assert (((long)index * bitsPerValue) & MOD_MASK) == 0;\n    final int iterations = len / encoder.longValueCount();\n    encoder.encode(arr, off, blocks, blockIndex, iterations);\n    final int setValues = iterations * encoder.longValueCount();\n    index += setValues;\n    len -= setValues;\n    assert len >= 0;\n\n    if (index > originalIndex) {\n      // stay at the block boundary\n      return index - originalIndex;\n    } else {\n      // no progress so far => already at a block boundary but no full block to get\n      assert index == originalIndex;\n      return super.set(index, arr, off, len);\n    }\n  }\n\n","sourceOld":"  @Override\n  public int set(int index, long[] arr, int off, int len) {\n    assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n    assert index >= 0 && index < valueCount;\n    len = Math.min(len, valueCount - index);\n    assert off + len <= arr.length;\n\n    final int originalIndex = index;\n    final PackedInts.Encoder encoder = BulkOperation.of(PackedInts.Format.PACKED, bitsPerValue);\n\n    // go to the next block where the value does not span across two blocks\n    final int offsetInBlocks = index % encoder.longValueCount();\n    if (offsetInBlocks != 0) {\n      for (int i = offsetInBlocks; i < encoder.longValueCount() && len > 0; ++i) {\n        set(index++, arr[off++]);\n        --len;\n      }\n      if (len == 0) {\n        return index - originalIndex;\n      }\n    }\n\n    // bulk set\n    assert index % encoder.longValueCount() == 0;\n    int blockIndex = (int) ((long) index * bitsPerValue) >>> BLOCK_BITS;\n    assert (((long)index * bitsPerValue) & MOD_MASK) == 0;\n    final int iterations = len / encoder.longValueCount();\n    encoder.encode(arr, off, blocks, blockIndex, iterations);\n    final int setValues = iterations * encoder.longValueCount();\n    index += setValues;\n    len -= setValues;\n    assert len >= 0;\n\n    if (index > originalIndex) {\n      // stay at the block boundary\n      return index - originalIndex;\n    } else {\n      // no progress so far => already at a block boundary but no full block to get\n      assert index == originalIndex;\n      return super.set(index, arr, off, len);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0bf1d4eb51af6e03fffcbf80f0b5d69923c9f86","date":1359670147,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#set(int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/Packed64#set(int,long[],int,int).mjava","sourceNew":"  @Override\n  public int set(int index, long[] arr, int off, int len) {\n    assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n    assert index >= 0 && index < valueCount;\n    len = Math.min(len, valueCount - index);\n    assert off + len <= arr.length;\n\n    final int originalIndex = index;\n    final PackedInts.Encoder encoder = BulkOperation.of(PackedInts.Format.PACKED, bitsPerValue);\n\n    // go to the next block where the value does not span across two blocks\n    final int offsetInBlocks = index % encoder.longValueCount();\n    if (offsetInBlocks != 0) {\n      for (int i = offsetInBlocks; i < encoder.longValueCount() && len > 0; ++i) {\n        set(index++, arr[off++]);\n        --len;\n      }\n      if (len == 0) {\n        return index - originalIndex;\n      }\n    }\n\n    // bulk set\n    assert index % encoder.longValueCount() == 0;\n    int blockIndex = (int) (((long) index * bitsPerValue) >>> BLOCK_BITS);\n    assert (((long)index * bitsPerValue) & MOD_MASK) == 0;\n    final int iterations = len / encoder.longValueCount();\n    encoder.encode(arr, off, blocks, blockIndex, iterations);\n    final int setValues = iterations * encoder.longValueCount();\n    index += setValues;\n    len -= setValues;\n    assert len >= 0;\n\n    if (index > originalIndex) {\n      // stay at the block boundary\n      return index - originalIndex;\n    } else {\n      // no progress so far => already at a block boundary but no full block to get\n      assert index == originalIndex;\n      return super.set(index, arr, off, len);\n    }\n  }\n\n","sourceOld":"  @Override\n  public int set(int index, long[] arr, int off, int len) {\n    assert len > 0 : \"len must be > 0 (got \" + len + \")\";\n    assert index >= 0 && index < valueCount;\n    len = Math.min(len, valueCount - index);\n    assert off + len <= arr.length;\n\n    final int originalIndex = index;\n    final PackedInts.Encoder encoder = BulkOperation.of(PackedInts.Format.PACKED, bitsPerValue);\n\n    // go to the next block where the value does not span across two blocks\n    final int offsetInBlocks = index % encoder.longValueCount();\n    if (offsetInBlocks != 0) {\n      for (int i = offsetInBlocks; i < encoder.longValueCount() && len > 0; ++i) {\n        set(index++, arr[off++]);\n        --len;\n      }\n      if (len == 0) {\n        return index - originalIndex;\n      }\n    }\n\n    // bulk set\n    assert index % encoder.longValueCount() == 0;\n    int blockIndex = (int) ((long) index * bitsPerValue) >>> BLOCK_BITS;\n    assert (((long)index * bitsPerValue) & MOD_MASK) == 0;\n    final int iterations = len / encoder.longValueCount();\n    encoder.encode(arr, off, blocks, blockIndex, iterations);\n    final int setValues = iterations * encoder.longValueCount();\n    index += setValues;\n    len -= setValues;\n    assert len >= 0;\n\n    if (index > originalIndex) {\n      // stay at the block boundary\n      return index - originalIndex;\n    } else {\n      // no progress so far => already at a block boundary but no full block to get\n      assert index == originalIndex;\n      return super.set(index, arr, off, len);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e29d4d91327929d477b701d3ef2f5b3457d26ec5":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"001b25b42373b22a52f399dbf072f1224632e8e6":["55110eb60c5105294fc2ae7912d82b750865aa58","f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"de4347ab0fe69a9f7b94709da9f24119a07a3ceb":["e29d4d91327929d477b701d3ef2f5b3457d26ec5"],"b0bf1d4eb51af6e03fffcbf80f0b5d69923c9f86":["de522d9303bd67c8473a269a1319125d1f3700e0","de4347ab0fe69a9f7b94709da9f24119a07a3ceb"],"55110eb60c5105294fc2ae7912d82b750865aa58":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","55110eb60c5105294fc2ae7912d82b750865aa58"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["035130b0c342f404c027af8c8870587c3741cb1e"],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["55110eb60c5105294fc2ae7912d82b750865aa58","0e3359210474c12c0b79e6400450313e3d7ef2bb"],"035130b0c342f404c027af8c8870587c3741cb1e":["fe33227f6805edab2036cbb80645cc4e2d1fa424"],"de522d9303bd67c8473a269a1319125d1f3700e0":["f8615860cb50aefb8eebca1d1b3893dbe21cf126","e29d4d91327929d477b701d3ef2f5b3457d26ec5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["de4347ab0fe69a9f7b94709da9f24119a07a3ceb"]},"commit2Childs":{"e29d4d91327929d477b701d3ef2f5b3457d26ec5":["de4347ab0fe69a9f7b94709da9f24119a07a3ceb","de522d9303bd67c8473a269a1319125d1f3700e0"],"001b25b42373b22a52f399dbf072f1224632e8e6":[],"de4347ab0fe69a9f7b94709da9f24119a07a3ceb":["b0bf1d4eb51af6e03fffcbf80f0b5d69923c9f86","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b0bf1d4eb51af6e03fffcbf80f0b5d69923c9f86":[],"55110eb60c5105294fc2ae7912d82b750865aa58":["001b25b42373b22a52f399dbf072f1224632e8e6","fe33227f6805edab2036cbb80645cc4e2d1fa424","f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["035130b0c342f404c027af8c8870587c3741cb1e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["55110eb60c5105294fc2ae7912d82b750865aa58","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["e29d4d91327929d477b701d3ef2f5b3457d26ec5","001b25b42373b22a52f399dbf072f1224632e8e6","de522d9303bd67c8473a269a1319125d1f3700e0"],"035130b0c342f404c027af8c8870587c3741cb1e":["0e3359210474c12c0b79e6400450313e3d7ef2bb"],"de522d9303bd67c8473a269a1319125d1f3700e0":["b0bf1d4eb51af6e03fffcbf80f0b5d69923c9f86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","b0bf1d4eb51af6e03fffcbf80f0b5d69923c9f86","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}