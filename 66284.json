{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testMethod().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testMethod().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanScorer#testMethod().mjava","sourceNew":"  public void testMethod() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] values = new String[] { \"1\", \"2\", \"3\", \"4\" };\n\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    for (int i = 0; i < values.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(FIELD, values[i], StringField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    IndexReader ir = writer.getReader();\n    writer.close();\n\n    BooleanQuery booleanQuery1 = new BooleanQuery();\n    booleanQuery1.add(new TermQuery(new Term(FIELD, \"1\")), BooleanClause.Occur.SHOULD);\n    booleanQuery1.add(new TermQuery(new Term(FIELD, \"2\")), BooleanClause.Occur.SHOULD);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(booleanQuery1, BooleanClause.Occur.MUST);\n    query.add(new TermQuery(new Term(FIELD, \"9\")), BooleanClause.Occur.MUST_NOT);\n\n    IndexSearcher indexSearcher = newSearcher(ir);\n    ScoreDoc[] hits = indexSearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"Number of matched documents\", 2, hits.length);\n    ir.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testMethod() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] values = new String[] { \"1\", \"2\", \"3\", \"4\" };\n\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    for (int i = 0; i < values.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(FIELD, values[i], StringField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    IndexReader ir = writer.getReader();\n    writer.close();\n\n    BooleanQuery booleanQuery1 = new BooleanQuery();\n    booleanQuery1.add(new TermQuery(new Term(FIELD, \"1\")), BooleanClause.Occur.SHOULD);\n    booleanQuery1.add(new TermQuery(new Term(FIELD, \"2\")), BooleanClause.Occur.SHOULD);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(booleanQuery1, BooleanClause.Occur.MUST);\n    query.add(new TermQuery(new Term(FIELD, \"9\")), BooleanClause.Occur.MUST_NOT);\n\n    IndexSearcher indexSearcher = newSearcher(ir);\n    ScoreDoc[] hits = indexSearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"Number of matched documents\", 2, hits.length);\n    ir.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testMethod().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testMethod().mjava","sourceNew":"  public void testMethod() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] values = new String[] { \"1\", \"2\", \"3\", \"4\" };\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    for (int i = 0; i < values.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(FIELD, values[i], StringField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    IndexReader ir = writer.getReader();\n    writer.close();\n\n    BooleanQuery booleanQuery1 = new BooleanQuery();\n    booleanQuery1.add(new TermQuery(new Term(FIELD, \"1\")), BooleanClause.Occur.SHOULD);\n    booleanQuery1.add(new TermQuery(new Term(FIELD, \"2\")), BooleanClause.Occur.SHOULD);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(booleanQuery1, BooleanClause.Occur.MUST);\n    query.add(new TermQuery(new Term(FIELD, \"9\")), BooleanClause.Occur.MUST_NOT);\n\n    IndexSearcher indexSearcher = newSearcher(ir);\n    ScoreDoc[] hits = indexSearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"Number of matched documents\", 2, hits.length);\n    ir.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testMethod() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] values = new String[] { \"1\", \"2\", \"3\", \"4\" };\n\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    for (int i = 0; i < values.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(FIELD, values[i], StringField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    IndexReader ir = writer.getReader();\n    writer.close();\n\n    BooleanQuery booleanQuery1 = new BooleanQuery();\n    booleanQuery1.add(new TermQuery(new Term(FIELD, \"1\")), BooleanClause.Occur.SHOULD);\n    booleanQuery1.add(new TermQuery(new Term(FIELD, \"2\")), BooleanClause.Occur.SHOULD);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(booleanQuery1, BooleanClause.Occur.MUST);\n    query.add(new TermQuery(new Term(FIELD, \"9\")), BooleanClause.Occur.MUST_NOT);\n\n    IndexSearcher indexSearcher = newSearcher(ir);\n    ScoreDoc[] hits = indexSearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"Number of matched documents\", 2, hits.length);\n    ir.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testMethod().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testMethod().mjava","sourceNew":"  public void testMethod() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] values = new String[] { \"1\", \"2\", \"3\", \"4\" };\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    for (int i = 0; i < values.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(FIELD, values[i], Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    IndexReader ir = writer.getReader();\n    writer.close();\n\n    BooleanQuery booleanQuery1 = new BooleanQuery();\n    booleanQuery1.add(new TermQuery(new Term(FIELD, \"1\")), BooleanClause.Occur.SHOULD);\n    booleanQuery1.add(new TermQuery(new Term(FIELD, \"2\")), BooleanClause.Occur.SHOULD);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(booleanQuery1, BooleanClause.Occur.MUST);\n    query.add(new TermQuery(new Term(FIELD, \"9\")), BooleanClause.Occur.MUST_NOT);\n\n    IndexSearcher indexSearcher = newSearcher(ir);\n    ScoreDoc[] hits = indexSearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"Number of matched documents\", 2, hits.length);\n    ir.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testMethod() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] values = new String[] { \"1\", \"2\", \"3\", \"4\" };\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    for (int i = 0; i < values.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(FIELD, values[i], StringField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    IndexReader ir = writer.getReader();\n    writer.close();\n\n    BooleanQuery booleanQuery1 = new BooleanQuery();\n    booleanQuery1.add(new TermQuery(new Term(FIELD, \"1\")), BooleanClause.Occur.SHOULD);\n    booleanQuery1.add(new TermQuery(new Term(FIELD, \"2\")), BooleanClause.Occur.SHOULD);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(booleanQuery1, BooleanClause.Occur.MUST);\n    query.add(new TermQuery(new Term(FIELD, \"9\")), BooleanClause.Occur.MUST_NOT);\n\n    IndexSearcher indexSearcher = newSearcher(ir);\n    ScoreDoc[] hits = indexSearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"Number of matched documents\", 2, hits.length);\n    ir.close();\n    directory.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testMethod().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testMethod().mjava","sourceNew":"  public void testMethod() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] values = new String[] { \"1\", \"2\", \"3\", \"4\" };\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    for (int i = 0; i < values.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(FIELD, values[i], Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    IndexReader ir = writer.getReader();\n    writer.shutdown();\n\n    BooleanQuery booleanQuery1 = new BooleanQuery();\n    booleanQuery1.add(new TermQuery(new Term(FIELD, \"1\")), BooleanClause.Occur.SHOULD);\n    booleanQuery1.add(new TermQuery(new Term(FIELD, \"2\")), BooleanClause.Occur.SHOULD);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(booleanQuery1, BooleanClause.Occur.MUST);\n    query.add(new TermQuery(new Term(FIELD, \"9\")), BooleanClause.Occur.MUST_NOT);\n\n    IndexSearcher indexSearcher = newSearcher(ir);\n    ScoreDoc[] hits = indexSearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"Number of matched documents\", 2, hits.length);\n    ir.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testMethod() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] values = new String[] { \"1\", \"2\", \"3\", \"4\" };\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    for (int i = 0; i < values.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(FIELD, values[i], Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    IndexReader ir = writer.getReader();\n    writer.close();\n\n    BooleanQuery booleanQuery1 = new BooleanQuery();\n    booleanQuery1.add(new TermQuery(new Term(FIELD, \"1\")), BooleanClause.Occur.SHOULD);\n    booleanQuery1.add(new TermQuery(new Term(FIELD, \"2\")), BooleanClause.Occur.SHOULD);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(booleanQuery1, BooleanClause.Occur.MUST);\n    query.add(new TermQuery(new Term(FIELD, \"9\")), BooleanClause.Occur.MUST_NOT);\n\n    IndexSearcher indexSearcher = newSearcher(ir);\n    ScoreDoc[] hits = indexSearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"Number of matched documents\", 2, hits.length);\n    ir.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testMethod().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testMethod().mjava","sourceNew":"  public void testMethod() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] values = new String[] { \"1\", \"2\", \"3\", \"4\" };\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    for (int i = 0; i < values.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(FIELD, values[i], Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    IndexReader ir = writer.getReader();\n    writer.close();\n\n    BooleanQuery booleanQuery1 = new BooleanQuery();\n    booleanQuery1.add(new TermQuery(new Term(FIELD, \"1\")), BooleanClause.Occur.SHOULD);\n    booleanQuery1.add(new TermQuery(new Term(FIELD, \"2\")), BooleanClause.Occur.SHOULD);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(booleanQuery1, BooleanClause.Occur.MUST);\n    query.add(new TermQuery(new Term(FIELD, \"9\")), BooleanClause.Occur.MUST_NOT);\n\n    IndexSearcher indexSearcher = newSearcher(ir);\n    ScoreDoc[] hits = indexSearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"Number of matched documents\", 2, hits.length);\n    ir.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testMethod() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] values = new String[] { \"1\", \"2\", \"3\", \"4\" };\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    for (int i = 0; i < values.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(FIELD, values[i], Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    IndexReader ir = writer.getReader();\n    writer.shutdown();\n\n    BooleanQuery booleanQuery1 = new BooleanQuery();\n    booleanQuery1.add(new TermQuery(new Term(FIELD, \"1\")), BooleanClause.Occur.SHOULD);\n    booleanQuery1.add(new TermQuery(new Term(FIELD, \"2\")), BooleanClause.Occur.SHOULD);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(booleanQuery1, BooleanClause.Occur.MUST);\n    query.add(new TermQuery(new Term(FIELD, \"9\")), BooleanClause.Occur.MUST_NOT);\n\n    IndexSearcher indexSearcher = newSearcher(ir);\n    ScoreDoc[] hits = indexSearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"Number of matched documents\", 2, hits.length);\n    ir.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testMethod().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testMethod().mjava","sourceNew":"  public void testMethod() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] values = new String[] { \"1\", \"2\", \"3\", \"4\" };\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    for (int i = 0; i < values.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(FIELD, values[i], Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    IndexReader ir = writer.getReader();\n    writer.close();\n\n    BooleanQuery booleanQuery1 = new BooleanQuery();\n    booleanQuery1.add(new TermQuery(new Term(FIELD, \"1\")), BooleanClause.Occur.SHOULD);\n    booleanQuery1.add(new TermQuery(new Term(FIELD, \"2\")), BooleanClause.Occur.SHOULD);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(booleanQuery1, BooleanClause.Occur.MUST);\n    query.add(new TermQuery(new Term(FIELD, \"9\")), BooleanClause.Occur.MUST_NOT);\n\n    IndexSearcher indexSearcher = newSearcher(ir);\n    ScoreDoc[] hits = indexSearcher.search(query, 1000).scoreDocs;\n    assertEquals(\"Number of matched documents\", 2, hits.length);\n    ir.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testMethod() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] values = new String[] { \"1\", \"2\", \"3\", \"4\" };\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    for (int i = 0; i < values.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(FIELD, values[i], Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    IndexReader ir = writer.getReader();\n    writer.close();\n\n    BooleanQuery booleanQuery1 = new BooleanQuery();\n    booleanQuery1.add(new TermQuery(new Term(FIELD, \"1\")), BooleanClause.Occur.SHOULD);\n    booleanQuery1.add(new TermQuery(new Term(FIELD, \"2\")), BooleanClause.Occur.SHOULD);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(booleanQuery1, BooleanClause.Occur.MUST);\n    query.add(new TermQuery(new Term(FIELD, \"9\")), BooleanClause.Occur.MUST_NOT);\n\n    IndexSearcher indexSearcher = newSearcher(ir);\n    ScoreDoc[] hits = indexSearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"Number of matched documents\", 2, hits.length);\n    ir.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testMethod().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testMethod().mjava","sourceNew":"  public void testMethod() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] values = new String[] { \"1\", \"2\", \"3\", \"4\" };\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    for (int i = 0; i < values.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(FIELD, values[i], Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    IndexReader ir = writer.getReader();\n    writer.close();\n\n    BooleanQuery.Builder booleanQuery1 = new BooleanQuery.Builder();\n    booleanQuery1.add(new TermQuery(new Term(FIELD, \"1\")), BooleanClause.Occur.SHOULD);\n    booleanQuery1.add(new TermQuery(new Term(FIELD, \"2\")), BooleanClause.Occur.SHOULD);\n\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(booleanQuery1.build(), BooleanClause.Occur.MUST);\n    query.add(new TermQuery(new Term(FIELD, \"9\")), BooleanClause.Occur.MUST_NOT);\n\n    IndexSearcher indexSearcher = newSearcher(ir);\n    ScoreDoc[] hits = indexSearcher.search(query.build(), 1000).scoreDocs;\n    assertEquals(\"Number of matched documents\", 2, hits.length);\n    ir.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testMethod() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] values = new String[] { \"1\", \"2\", \"3\", \"4\" };\n\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    for (int i = 0; i < values.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(FIELD, values[i], Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    IndexReader ir = writer.getReader();\n    writer.close();\n\n    BooleanQuery booleanQuery1 = new BooleanQuery();\n    booleanQuery1.add(new TermQuery(new Term(FIELD, \"1\")), BooleanClause.Occur.SHOULD);\n    booleanQuery1.add(new TermQuery(new Term(FIELD, \"2\")), BooleanClause.Occur.SHOULD);\n\n    BooleanQuery query = new BooleanQuery();\n    query.add(booleanQuery1, BooleanClause.Occur.MUST);\n    query.add(new TermQuery(new Term(FIELD, \"9\")), BooleanClause.Occur.MUST_NOT);\n\n    IndexSearcher indexSearcher = newSearcher(ir);\n    ScoreDoc[] hits = indexSearcher.search(query, 1000).scoreDocs;\n    assertEquals(\"Number of matched documents\", 2, hits.length);\n    ir.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}