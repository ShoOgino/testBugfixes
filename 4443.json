{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsStoredFields(int,int,int).mjava","commits":[{"id":"e56be5c9792e4a329cf6468240a4f8ff532f426c","date":1382600931,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsStoredFields(int,int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsStoredFields(int,int).mjava","sourceNew":"  private void doTestSortedSetVsStoredFields(int minLength, int maxLength, int maxValuesPerDoc) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = _TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = _TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n      // create a random set of strings\n      Set<String> values = new TreeSet<String>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(_TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<String>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      BytesRef scratch = new BytesRef();\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          assert docValues != null;\n          long ord = docValues.nextOrd();\n          assert ord != NO_MORE_ORDS;\n          docValues.lookupOrd(ord, scratch);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSortedSetVsStoredFields(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = _TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = random().nextInt(17);\n      // create a random set of strings\n      Set<String> values = new TreeSet<String>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(_TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<String>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      BytesRef scratch = new BytesRef();\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          assert docValues != null;\n          long ord = docValues.nextOrd();\n          assert ord != NO_MORE_ORDS;\n          docValues.lookupOrd(ord, scratch);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsStoredFields(int,int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsStoredFields(int,int,int).mjava","sourceNew":"  private void doTestSortedSetVsStoredFields(int minLength, int maxLength, int maxValuesPerDoc) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n      // create a random set of strings\n      Set<String> values = new TreeSet<String>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<String>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      BytesRef scratch = new BytesRef();\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          assert docValues != null;\n          long ord = docValues.nextOrd();\n          assert ord != NO_MORE_ORDS;\n          docValues.lookupOrd(ord, scratch);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSortedSetVsStoredFields(int minLength, int maxLength, int maxValuesPerDoc) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = _TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = _TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n      // create a random set of strings\n      Set<String> values = new TreeSet<String>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(_TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<String>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      BytesRef scratch = new BytesRef();\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          assert docValues != null;\n          long ord = docValues.nextOrd();\n          assert ord != NO_MORE_ORDS;\n          docValues.lookupOrd(ord, scratch);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsStoredFields(int,int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsStoredFields(int,int,int).mjava","sourceNew":"  private void doTestSortedSetVsStoredFields(int minLength, int maxLength, int maxValuesPerDoc) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n      // create a random set of strings\n      Set<String> values = new TreeSet<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      BytesRef scratch = new BytesRef();\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          assert docValues != null;\n          long ord = docValues.nextOrd();\n          assert ord != NO_MORE_ORDS;\n          docValues.lookupOrd(ord, scratch);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSortedSetVsStoredFields(int minLength, int maxLength, int maxValuesPerDoc) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n      // create a random set of strings\n      Set<String> values = new TreeSet<String>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<String>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      BytesRef scratch = new BytesRef();\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          assert docValues != null;\n          long ord = docValues.nextOrd();\n          assert ord != NO_MORE_ORDS;\n          docValues.lookupOrd(ord, scratch);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsStoredFields(int,int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsStoredFields(int,int,int).mjava","sourceNew":"  private void doTestSortedSetVsStoredFields(int minLength, int maxLength, int maxValuesPerDoc) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n      // create a random set of strings\n      Set<String> values = new TreeSet<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.shutdown();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      BytesRef scratch = new BytesRef();\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          assert docValues != null;\n          long ord = docValues.nextOrd();\n          assert ord != NO_MORE_ORDS;\n          docValues.lookupOrd(ord, scratch);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSortedSetVsStoredFields(int minLength, int maxLength, int maxValuesPerDoc) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n      // create a random set of strings\n      Set<String> values = new TreeSet<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.close();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      BytesRef scratch = new BytesRef();\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          assert docValues != null;\n          long ord = docValues.nextOrd();\n          assert ord != NO_MORE_ORDS;\n          docValues.lookupOrd(ord, scratch);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsStoredFields(int,int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsStoredFields(int,int,int).mjava","sourceNew":"  private void doTestSortedSetVsStoredFields(int minLength, int maxLength, int maxValuesPerDoc) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n      // create a random set of strings\n      Set<String> values = new TreeSet<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.shutdown();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          assert docValues != null;\n          long ord = docValues.nextOrd();\n          assert ord != NO_MORE_ORDS;\n          BytesRef scratch = docValues.lookupOrd(ord);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSortedSetVsStoredFields(int minLength, int maxLength, int maxValuesPerDoc) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n      // create a random set of strings\n      Set<String> values = new TreeSet<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.shutdown();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      BytesRef scratch = new BytesRef();\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          assert docValues != null;\n          long ord = docValues.nextOrd();\n          assert ord != NO_MORE_ORDS;\n          docValues.lookupOrd(ord, scratch);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31baa848edd05a659d7ca807d279817c6315783e","date":1406911965,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsStoredFields(int,int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsStoredFields(int,int,int).mjava","sourceNew":"  private void doTestSortedSetVsStoredFields(int minLength, int maxLength, int maxValuesPerDoc) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n      // create a random set of strings\n      Set<String> values = new TreeSet<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare\n    DirectoryReader ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          assert docValues != null;\n          long ord = docValues.nextOrd();\n          assert ord != NO_MORE_ORDS;\n          BytesRef scratch = docValues.lookupOrd(ord);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    writer.forceMerge(1);\n    \n    // compare again\n    ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          assert docValues != null;\n          long ord = docValues.nextOrd();\n          assert ord != NO_MORE_ORDS;\n          BytesRef scratch = docValues.lookupOrd(ord);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSortedSetVsStoredFields(int minLength, int maxLength, int maxValuesPerDoc) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n      // create a random set of strings\n      Set<String> values = new TreeSet<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    writer.shutdown();\n    \n    // compare\n    DirectoryReader ir = DirectoryReader.open(dir);\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          assert docValues != null;\n          long ord = docValues.nextOrd();\n          assert ord != NO_MORE_ORDS;\n          BytesRef scratch = docValues.lookupOrd(ord);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsStoredFields(int,int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsStoredFields(int,int,int).mjava","sourceNew":"  private void doTestSortedSetVsStoredFields(int minLength, int maxLength, int maxValuesPerDoc) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n      // create a random set of strings\n      Set<String> values = new TreeSet<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare\n    DirectoryReader ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          assert docValues != null;\n          long ord = docValues.nextOrd();\n          assert ord != NO_MORE_ORDS;\n          BytesRef scratch = docValues.lookupOrd(ord);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    writer.forceMerge(1);\n    \n    // compare again\n    ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          assert docValues != null;\n          long ord = docValues.nextOrd();\n          assert ord != NO_MORE_ORDS;\n          BytesRef scratch = docValues.lookupOrd(ord);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSortedSetVsStoredFields(int minLength, int maxLength, int maxValuesPerDoc) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n      // create a random set of strings\n      Set<String> values = new TreeSet<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare\n    DirectoryReader ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          assert docValues != null;\n          long ord = docValues.nextOrd();\n          assert ord != NO_MORE_ORDS;\n          BytesRef scratch = docValues.lookupOrd(ord);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    writer.forceMerge(1);\n    \n    // compare again\n    ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          assert docValues != null;\n          long ord = docValues.nextOrd();\n          assert ord != NO_MORE_ORDS;\n          BytesRef scratch = docValues.lookupOrd(ord);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793","date":1408030244,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsStoredFields(int,int,int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsStoredFields(int,int,int).mjava","sourceNew":"  protected void doTestSortedSetVsStoredFields(int numDocs, int minLength, int maxLength, int maxValuesPerDoc) throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"dvduel\"));\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n      // create a random set of strings\n      Set<String> values = new TreeSet<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare\n    DirectoryReader ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          assert docValues != null;\n          long ord = docValues.nextOrd();\n          assert ord != NO_MORE_ORDS;\n          BytesRef scratch = docValues.lookupOrd(ord);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    writer.forceMerge(1);\n    \n    // compare again\n    ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          assert docValues != null;\n          long ord = docValues.nextOrd();\n          assert ord != NO_MORE_ORDS;\n          BytesRef scratch = docValues.lookupOrd(ord);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSortedSetVsStoredFields(int minLength, int maxLength, int maxValuesPerDoc) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n      // create a random set of strings\n      Set<String> values = new TreeSet<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare\n    DirectoryReader ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          assert docValues != null;\n          long ord = docValues.nextOrd();\n          assert ord != NO_MORE_ORDS;\n          BytesRef scratch = docValues.lookupOrd(ord);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    writer.forceMerge(1);\n    \n    // compare again\n    ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          assert docValues != null;\n          long ord = docValues.nextOrd();\n          assert ord != NO_MORE_ORDS;\n          BytesRef scratch = docValues.lookupOrd(ord);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"31baa848edd05a659d7ca807d279817c6315783e":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6613659748fe4411a7dcf85266e55db1f95f7315":["e56be5c9792e4a329cf6468240a4f8ff532f426c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["31baa848edd05a659d7ca807d279817c6315783e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"e56be5c9792e4a329cf6468240a4f8ff532f426c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"31baa848edd05a659d7ca807d279817c6315783e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["31baa848edd05a659d7ca807d279817c6315783e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e56be5c9792e4a329cf6468240a4f8ff532f426c"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e56be5c9792e4a329cf6468240a4f8ff532f426c":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}