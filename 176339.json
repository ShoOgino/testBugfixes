{"path":"src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testRewrite1().mjava","commits":[{"id":"2f86b525ce098b3c7b0f79b5b8ab050eab273e99","date":1241205271,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testRewrite1().mjava","pathOld":"/dev/null","sourceNew":"  public void testRewrite1() throws Exception {\n    // mask an anon SpanQuery class that rewrites to something else.\n    SpanQuery q = new FieldMaskingSpanQuery\n      (new SpanTermQuery(new Term(\"last\", \"sally\")) {\n          public Query rewrite(IndexReader reader) {\n            return new SpanOrQuery(new SpanQuery[] {\n              new SpanTermQuery(new Term(\"first\", \"sally\")),\n              new SpanTermQuery(new Term(\"first\", \"james\")) });\n          }\n        }, \"first\");\n\n    SpanQuery qr = (SpanQuery) searcher.rewrite(q);\n\n    QueryUtils.checkUnequal(q, qr);\n\n    assertEquals(2, qr.getTerms().size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"926f3bcf4f369c1787b283a3cdb13730cf3e788c","date":1255387230,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testRewrite1().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testRewrite1().mjava","sourceNew":"  public void testRewrite1() throws Exception {\n    // mask an anon SpanQuery class that rewrites to something else.\n    SpanQuery q = new FieldMaskingSpanQuery\n      (new SpanTermQuery(new Term(\"last\", \"sally\")) {\n          public Query rewrite(IndexReader reader) {\n            return new SpanOrQuery(new SpanQuery[] {\n              new SpanTermQuery(new Term(\"first\", \"sally\")),\n              new SpanTermQuery(new Term(\"first\", \"james\")) });\n          }\n        }, \"first\");\n\n    SpanQuery qr = (SpanQuery) searcher.rewrite(q);\n\n    QueryUtils.checkUnequal(q, qr);\n\n    Set<Term> terms = new HashSet<Term>();\n    qr.extractTerms(terms);\n    assertEquals(2, terms.size());\n  }\n\n","sourceOld":"  public void testRewrite1() throws Exception {\n    // mask an anon SpanQuery class that rewrites to something else.\n    SpanQuery q = new FieldMaskingSpanQuery\n      (new SpanTermQuery(new Term(\"last\", \"sally\")) {\n          public Query rewrite(IndexReader reader) {\n            return new SpanOrQuery(new SpanQuery[] {\n              new SpanTermQuery(new Term(\"first\", \"sally\")),\n              new SpanTermQuery(new Term(\"first\", \"james\")) });\n          }\n        }, \"first\");\n\n    SpanQuery qr = (SpanQuery) searcher.rewrite(q);\n\n    QueryUtils.checkUnequal(q, qr);\n\n    assertEquals(2, qr.getTerms().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testRewrite1().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testRewrite1().mjava","sourceNew":"  public void testRewrite1() throws Exception {\n    // mask an anon SpanQuery class that rewrites to something else.\n    SpanQuery q = new FieldMaskingSpanQuery\n      (new SpanTermQuery(new Term(\"last\", \"sally\")) {\n          @Override\n          public Query rewrite(IndexReader reader) {\n            return new SpanOrQuery(new SpanQuery[] {\n              new SpanTermQuery(new Term(\"first\", \"sally\")),\n              new SpanTermQuery(new Term(\"first\", \"james\")) });\n          }\n        }, \"first\");\n\n    SpanQuery qr = (SpanQuery) searcher.rewrite(q);\n\n    QueryUtils.checkUnequal(q, qr);\n\n    Set<Term> terms = new HashSet<Term>();\n    qr.extractTerms(terms);\n    assertEquals(2, terms.size());\n  }\n\n","sourceOld":"  public void testRewrite1() throws Exception {\n    // mask an anon SpanQuery class that rewrites to something else.\n    SpanQuery q = new FieldMaskingSpanQuery\n      (new SpanTermQuery(new Term(\"last\", \"sally\")) {\n          public Query rewrite(IndexReader reader) {\n            return new SpanOrQuery(new SpanQuery[] {\n              new SpanTermQuery(new Term(\"first\", \"sally\")),\n              new SpanTermQuery(new Term(\"first\", \"james\")) });\n          }\n        }, \"first\");\n\n    SpanQuery qr = (SpanQuery) searcher.rewrite(q);\n\n    QueryUtils.checkUnequal(q, qr);\n\n    Set<Term> terms = new HashSet<Term>();\n    qr.extractTerms(terms);\n    assertEquals(2, terms.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testRewrite1().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestFieldMaskingSpanQuery#testRewrite1().mjava","sourceNew":"  public void testRewrite1() throws Exception {\n    // mask an anon SpanQuery class that rewrites to something else.\n    SpanQuery q = new FieldMaskingSpanQuery\n      (new SpanTermQuery(new Term(\"last\", \"sally\")) {\n          @Override\n          public Query rewrite(IndexReader reader) {\n            return new SpanOrQuery(new SpanQuery[] {\n              new SpanTermQuery(new Term(\"first\", \"sally\")),\n              new SpanTermQuery(new Term(\"first\", \"james\")) });\n          }\n        }, \"first\");\n\n    SpanQuery qr = (SpanQuery) searcher.rewrite(q);\n\n    QueryUtils.checkUnequal(q, qr);\n\n    Set<Term> terms = new HashSet<Term>();\n    qr.extractTerms(terms);\n    assertEquals(2, terms.size());\n  }\n\n","sourceOld":"  public void testRewrite1() throws Exception {\n    // mask an anon SpanQuery class that rewrites to something else.\n    SpanQuery q = new FieldMaskingSpanQuery\n      (new SpanTermQuery(new Term(\"last\", \"sally\")) {\n          @Override\n          public Query rewrite(IndexReader reader) {\n            return new SpanOrQuery(new SpanQuery[] {\n              new SpanTermQuery(new Term(\"first\", \"sally\")),\n              new SpanTermQuery(new Term(\"first\", \"james\")) });\n          }\n        }, \"first\");\n\n    SpanQuery qr = (SpanQuery) searcher.rewrite(q);\n\n    QueryUtils.checkUnequal(q, qr);\n\n    Set<Term> terms = new HashSet<Term>();\n    qr.extractTerms(terms);\n    assertEquals(2, terms.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["926f3bcf4f369c1787b283a3cdb13730cf3e788c"],"926f3bcf4f369c1787b283a3cdb13730cf3e788c":["2f86b525ce098b3c7b0f79b5b8ab050eab273e99"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2f86b525ce098b3c7b0f79b5b8ab050eab273e99":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1326054a8d3aa66382d49decc7f330955c9c6f71"]},"commit2Childs":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"926f3bcf4f369c1787b283a3cdb13730cf3e788c":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2f86b525ce098b3c7b0f79b5b8ab050eab273e99"],"2f86b525ce098b3c7b0f79b5b8ab050eab273e99":["926f3bcf4f369c1787b283a3cdb13730cf3e788c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}