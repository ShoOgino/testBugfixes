{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/VarStraightBytesImpl.Writer#merge(DocValues,int,int,Bits).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/VarStraightBytesImpl.Writer#merge(DocValues,int,int,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/values/VarStraightBytesImpl.Writer#merge(DocValues,int,int,Bits).mjava","sourceNew":"    @Override\n    protected void merge(DocValues readerIn, int docBase, int docCount, Bits liveDocs) throws IOException {\n      merge = true;\n      datOut = getOrCreateDataOut();\n      boolean success = false;\n      try {\n        if (liveDocs == null && readerIn instanceof VarStraightReader) {\n          // bulk merge since we don't have any deletes\n          VarStraightReader reader = (VarStraightReader) readerIn;\n          final int maxDocs = reader.maxDoc;\n          if (maxDocs == 0) {\n            return;\n          }\n          if (lastDocID+1 < docBase) {\n            fill(docBase, address);\n            lastDocID = docBase-1;\n          }\n          final long numDataBytes;\n          final IndexInput cloneIdx = reader.cloneIndex();\n          try {\n            numDataBytes = cloneIdx.readVLong();\n            final ReaderIterator iter = PackedInts.getReaderIterator(cloneIdx);\n            for (int i = 0; i < maxDocs; i++) {\n              long offset = iter.next();\n              ++lastDocID;\n              if (lastDocID >= docToAddress.length) {\n                int oldSize = docToAddress.length;\n                docToAddress = ArrayUtil.grow(docToAddress, 1 + lastDocID);\n                bytesUsed.addAndGet((docToAddress.length - oldSize)\n                    * RamUsageEstimator.NUM_BYTES_INT);\n              }\n              docToAddress[lastDocID] = address + offset;\n            }\n            address += numDataBytes; // this is the address after all addr pointers are updated\n            iter.close();\n          } finally {\n            IOUtils.close(cloneIdx);\n          }\n          final IndexInput cloneData = reader.cloneData();\n          try {\n            datOut.copyBytes(cloneData, numDataBytes);\n          } finally {\n            IOUtils.close(cloneData);  \n          }\n        } else {\n          super.merge(readerIn, docBase, docCount, liveDocs);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(datOut);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void merge(DocValues readerIn, int docBase, int docCount, Bits liveDocs) throws IOException {\n      merge = true;\n      datOut = getOrCreateDataOut();\n      boolean success = false;\n      try {\n        if (liveDocs == null && readerIn instanceof VarStraightReader) {\n          // bulk merge since we don't have any deletes\n          VarStraightReader reader = (VarStraightReader) readerIn;\n          final int maxDocs = reader.maxDoc;\n          if (maxDocs == 0) {\n            return;\n          }\n          if (lastDocID+1 < docBase) {\n            fill(docBase, address);\n            lastDocID = docBase-1;\n          }\n          final long numDataBytes;\n          final IndexInput cloneIdx = reader.cloneIndex();\n          try {\n            numDataBytes = cloneIdx.readVLong();\n            final ReaderIterator iter = PackedInts.getReaderIterator(cloneIdx);\n            for (int i = 0; i < maxDocs; i++) {\n              long offset = iter.next();\n              ++lastDocID;\n              if (lastDocID >= docToAddress.length) {\n                int oldSize = docToAddress.length;\n                docToAddress = ArrayUtil.grow(docToAddress, 1 + lastDocID);\n                bytesUsed.addAndGet((docToAddress.length - oldSize)\n                    * RamUsageEstimator.NUM_BYTES_INT);\n              }\n              docToAddress[lastDocID] = address + offset;\n            }\n            address += numDataBytes; // this is the address after all addr pointers are updated\n            iter.close();\n          } finally {\n            IOUtils.close(cloneIdx);\n          }\n          final IndexInput cloneData = reader.cloneData();\n          try {\n            datOut.copyBytes(cloneData, numDataBytes);\n          } finally {\n            IOUtils.close(cloneData);  \n          }\n        } else {\n          super.merge(readerIn, docBase, docCount, liveDocs);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(datOut);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55110eb60c5105294fc2ae7912d82b750865aa58","date":1341389822,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/VarStraightBytesImpl.Writer#merge(DocValues,int,int,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/VarStraightBytesImpl.Writer#merge(DocValues,int,int,Bits).mjava","sourceNew":"    @Override\n    protected void merge(DocValues readerIn, int docBase, int docCount, Bits liveDocs) throws IOException {\n      merge = true;\n      datOut = getOrCreateDataOut();\n      boolean success = false;\n      try {\n        if (liveDocs == null && readerIn instanceof VarStraightReader) {\n          // bulk merge since we don't have any deletes\n          VarStraightReader reader = (VarStraightReader) readerIn;\n          final int maxDocs = reader.maxDoc;\n          if (maxDocs == 0) {\n            return;\n          }\n          if (lastDocID+1 < docBase) {\n            fill(docBase, address);\n            lastDocID = docBase-1;\n          }\n          final long numDataBytes;\n          final IndexInput cloneIdx = reader.cloneIndex();\n          try {\n            numDataBytes = cloneIdx.readVLong();\n            final ReaderIterator iter = PackedInts.getReaderIterator(cloneIdx, PackedInts.DEFAULT_BUFFER_SIZE);\n            for (int i = 0; i < maxDocs; i++) {\n              long offset = iter.next();\n              ++lastDocID;\n              if (lastDocID >= docToAddress.length) {\n                int oldSize = docToAddress.length;\n                docToAddress = ArrayUtil.grow(docToAddress, 1 + lastDocID);\n                bytesUsed.addAndGet((docToAddress.length - oldSize)\n                    * RamUsageEstimator.NUM_BYTES_INT);\n              }\n              docToAddress[lastDocID] = address + offset;\n            }\n            address += numDataBytes; // this is the address after all addr pointers are updated\n            iter.close();\n          } finally {\n            IOUtils.close(cloneIdx);\n          }\n          final IndexInput cloneData = reader.cloneData();\n          try {\n            datOut.copyBytes(cloneData, numDataBytes);\n          } finally {\n            IOUtils.close(cloneData);  \n          }\n        } else {\n          super.merge(readerIn, docBase, docCount, liveDocs);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(datOut);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void merge(DocValues readerIn, int docBase, int docCount, Bits liveDocs) throws IOException {\n      merge = true;\n      datOut = getOrCreateDataOut();\n      boolean success = false;\n      try {\n        if (liveDocs == null && readerIn instanceof VarStraightReader) {\n          // bulk merge since we don't have any deletes\n          VarStraightReader reader = (VarStraightReader) readerIn;\n          final int maxDocs = reader.maxDoc;\n          if (maxDocs == 0) {\n            return;\n          }\n          if (lastDocID+1 < docBase) {\n            fill(docBase, address);\n            lastDocID = docBase-1;\n          }\n          final long numDataBytes;\n          final IndexInput cloneIdx = reader.cloneIndex();\n          try {\n            numDataBytes = cloneIdx.readVLong();\n            final ReaderIterator iter = PackedInts.getReaderIterator(cloneIdx);\n            for (int i = 0; i < maxDocs; i++) {\n              long offset = iter.next();\n              ++lastDocID;\n              if (lastDocID >= docToAddress.length) {\n                int oldSize = docToAddress.length;\n                docToAddress = ArrayUtil.grow(docToAddress, 1 + lastDocID);\n                bytesUsed.addAndGet((docToAddress.length - oldSize)\n                    * RamUsageEstimator.NUM_BYTES_INT);\n              }\n              docToAddress[lastDocID] = address + offset;\n            }\n            address += numDataBytes; // this is the address after all addr pointers are updated\n            iter.close();\n          } finally {\n            IOUtils.close(cloneIdx);\n          }\n          final IndexInput cloneData = reader.cloneData();\n          try {\n            datOut.copyBytes(cloneData, numDataBytes);\n          } finally {\n            IOUtils.close(cloneData);  \n          }\n        } else {\n          super.merge(readerIn, docBase, docCount, liveDocs);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(datOut);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/VarStraightBytesImpl.Writer#merge(DocValues,int,int,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/VarStraightBytesImpl.Writer#merge(DocValues,int,int,Bits).mjava","sourceNew":"    @Override\n    protected void merge(DocValues readerIn, int docBase, int docCount, Bits liveDocs) throws IOException {\n      merge = true;\n      datOut = getOrCreateDataOut();\n      boolean success = false;\n      try {\n        if (liveDocs == null && readerIn instanceof VarStraightReader) {\n          // bulk merge since we don't have any deletes\n          VarStraightReader reader = (VarStraightReader) readerIn;\n          final int maxDocs = reader.maxDoc;\n          if (maxDocs == 0) {\n            return;\n          }\n          if (lastDocID+1 < docBase) {\n            fill(docBase, address);\n            lastDocID = docBase-1;\n          }\n          final long numDataBytes;\n          final IndexInput cloneIdx = reader.cloneIndex();\n          try {\n            numDataBytes = cloneIdx.readVLong();\n            final ReaderIterator iter = PackedInts.getReaderIterator(cloneIdx, PackedInts.DEFAULT_BUFFER_SIZE);\n            for (int i = 0; i < maxDocs; i++) {\n              long offset = iter.next();\n              ++lastDocID;\n              if (lastDocID >= docToAddress.length) {\n                int oldSize = docToAddress.length;\n                docToAddress = ArrayUtil.grow(docToAddress, 1 + lastDocID);\n                bytesUsed.addAndGet((docToAddress.length - oldSize)\n                    * RamUsageEstimator.NUM_BYTES_INT);\n              }\n              docToAddress[lastDocID] = address + offset;\n            }\n            address += numDataBytes; // this is the address after all addr pointers are updated\n            iter.close();\n          } finally {\n            IOUtils.close(cloneIdx);\n          }\n          final IndexInput cloneData = reader.cloneData();\n          try {\n            datOut.copyBytes(cloneData, numDataBytes);\n          } finally {\n            IOUtils.close(cloneData);  \n          }\n        } else {\n          super.merge(readerIn, docBase, docCount, liveDocs);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(datOut);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void merge(DocValues readerIn, int docBase, int docCount, Bits liveDocs) throws IOException {\n      merge = true;\n      datOut = getOrCreateDataOut();\n      boolean success = false;\n      try {\n        if (liveDocs == null && readerIn instanceof VarStraightReader) {\n          // bulk merge since we don't have any deletes\n          VarStraightReader reader = (VarStraightReader) readerIn;\n          final int maxDocs = reader.maxDoc;\n          if (maxDocs == 0) {\n            return;\n          }\n          if (lastDocID+1 < docBase) {\n            fill(docBase, address);\n            lastDocID = docBase-1;\n          }\n          final long numDataBytes;\n          final IndexInput cloneIdx = reader.cloneIndex();\n          try {\n            numDataBytes = cloneIdx.readVLong();\n            final ReaderIterator iter = PackedInts.getReaderIterator(cloneIdx);\n            for (int i = 0; i < maxDocs; i++) {\n              long offset = iter.next();\n              ++lastDocID;\n              if (lastDocID >= docToAddress.length) {\n                int oldSize = docToAddress.length;\n                docToAddress = ArrayUtil.grow(docToAddress, 1 + lastDocID);\n                bytesUsed.addAndGet((docToAddress.length - oldSize)\n                    * RamUsageEstimator.NUM_BYTES_INT);\n              }\n              docToAddress[lastDocID] = address + offset;\n            }\n            address += numDataBytes; // this is the address after all addr pointers are updated\n            iter.close();\n          } finally {\n            IOUtils.close(cloneIdx);\n          }\n          final IndexInput cloneData = reader.cloneData();\n          try {\n            datOut.copyBytes(cloneData, numDataBytes);\n          } finally {\n            IOUtils.close(cloneData);  \n          }\n        } else {\n          super.merge(readerIn, docBase, docCount, liveDocs);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(datOut);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c183f9eca784b0a36f02c97c88eba082898309e0","date":1353589616,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/VarStraightBytesImpl.Writer#merge(DocValues,int,int,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/VarStraightBytesImpl.Writer#merge(DocValues,int,int,Bits).mjava","sourceNew":"    @Override\n    protected void merge(DocValues readerIn, int docBase, int docCount, Bits liveDocs) throws IOException {\n      merge = true;\n      datOut = getOrCreateDataOut();\n      boolean success = false;\n      try {\n        if (liveDocs == null && readerIn instanceof VarStraightReader) {\n          // bulk merge since we don't have any deletes\n          VarStraightReader reader = (VarStraightReader) readerIn;\n          final int maxDocs = reader.maxDoc;\n          if (maxDocs == 0) {\n            return;\n          }\n          if (lastDocID+1 < docBase) {\n            fill(docBase, address);\n            lastDocID = docBase-1;\n          }\n          final long numDataBytes;\n          final IndexInput cloneIdx = reader.cloneIndex();\n          try {\n            numDataBytes = cloneIdx.readVLong();\n            final ReaderIterator iter = PackedInts.getReaderIterator(cloneIdx, PackedInts.DEFAULT_BUFFER_SIZE);\n            for (int i = 0; i < maxDocs; i++) {\n              long offset = iter.next();\n              ++lastDocID;\n              if (lastDocID >= docToAddress.length) {\n                int oldSize = docToAddress.length;\n                docToAddress = ArrayUtil.grow(docToAddress, 1 + lastDocID);\n                bytesUsed.addAndGet((docToAddress.length - oldSize)\n                    * RamUsageEstimator.NUM_BYTES_INT);\n              }\n              docToAddress[lastDocID] = address + offset;\n            }\n            address += numDataBytes; // this is the address after all addr pointers are updated\n          } finally {\n            IOUtils.close(cloneIdx);\n          }\n          final IndexInput cloneData = reader.cloneData();\n          try {\n            datOut.copyBytes(cloneData, numDataBytes);\n          } finally {\n            IOUtils.close(cloneData);  \n          }\n        } else {\n          super.merge(readerIn, docBase, docCount, liveDocs);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(datOut);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void merge(DocValues readerIn, int docBase, int docCount, Bits liveDocs) throws IOException {\n      merge = true;\n      datOut = getOrCreateDataOut();\n      boolean success = false;\n      try {\n        if (liveDocs == null && readerIn instanceof VarStraightReader) {\n          // bulk merge since we don't have any deletes\n          VarStraightReader reader = (VarStraightReader) readerIn;\n          final int maxDocs = reader.maxDoc;\n          if (maxDocs == 0) {\n            return;\n          }\n          if (lastDocID+1 < docBase) {\n            fill(docBase, address);\n            lastDocID = docBase-1;\n          }\n          final long numDataBytes;\n          final IndexInput cloneIdx = reader.cloneIndex();\n          try {\n            numDataBytes = cloneIdx.readVLong();\n            final ReaderIterator iter = PackedInts.getReaderIterator(cloneIdx, PackedInts.DEFAULT_BUFFER_SIZE);\n            for (int i = 0; i < maxDocs; i++) {\n              long offset = iter.next();\n              ++lastDocID;\n              if (lastDocID >= docToAddress.length) {\n                int oldSize = docToAddress.length;\n                docToAddress = ArrayUtil.grow(docToAddress, 1 + lastDocID);\n                bytesUsed.addAndGet((docToAddress.length - oldSize)\n                    * RamUsageEstimator.NUM_BYTES_INT);\n              }\n              docToAddress[lastDocID] = address + offset;\n            }\n            address += numDataBytes; // this is the address after all addr pointers are updated\n            iter.close();\n          } finally {\n            IOUtils.close(cloneIdx);\n          }\n          final IndexInput cloneData = reader.cloneData();\n          try {\n            datOut.copyBytes(cloneData, numDataBytes);\n          } finally {\n            IOUtils.close(cloneData);  \n          }\n        } else {\n          super.merge(readerIn, docBase, docCount, liveDocs);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(datOut);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/VarStraightBytesImpl.Writer#merge(DocValues,int,int,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/VarStraightBytesImpl.Writer#merge(DocValues,int,int,Bits).mjava","sourceNew":"    @Override\n    protected void merge(DocValues readerIn, int docBase, int docCount, Bits liveDocs) throws IOException {\n      merge = true;\n      datOut = getOrCreateDataOut();\n      boolean success = false;\n      try {\n        if (liveDocs == null && readerIn instanceof VarStraightReader) {\n          // bulk merge since we don't have any deletes\n          VarStraightReader reader = (VarStraightReader) readerIn;\n          final int maxDocs = reader.maxDoc;\n          if (maxDocs == 0) {\n            return;\n          }\n          if (lastDocID+1 < docBase) {\n            fill(docBase, address);\n            lastDocID = docBase-1;\n          }\n          final long numDataBytes;\n          final IndexInput cloneIdx = reader.cloneIndex();\n          try {\n            numDataBytes = cloneIdx.readVLong();\n            final ReaderIterator iter = PackedInts.getReaderIterator(cloneIdx, PackedInts.DEFAULT_BUFFER_SIZE);\n            for (int i = 0; i < maxDocs; i++) {\n              long offset = iter.next();\n              ++lastDocID;\n              if (lastDocID >= docToAddress.length) {\n                int oldSize = docToAddress.length;\n                docToAddress = ArrayUtil.grow(docToAddress, 1 + lastDocID);\n                bytesUsed.addAndGet((docToAddress.length - oldSize)\n                    * RamUsageEstimator.NUM_BYTES_INT);\n              }\n              docToAddress[lastDocID] = address + offset;\n            }\n            address += numDataBytes; // this is the address after all addr pointers are updated\n          } finally {\n            IOUtils.close(cloneIdx);\n          }\n          final IndexInput cloneData = reader.cloneData();\n          try {\n            datOut.copyBytes(cloneData, numDataBytes);\n          } finally {\n            IOUtils.close(cloneData);  \n          }\n        } else {\n          super.merge(readerIn, docBase, docCount, liveDocs);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(datOut);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void merge(DocValues readerIn, int docBase, int docCount, Bits liveDocs) throws IOException {\n      merge = true;\n      datOut = getOrCreateDataOut();\n      boolean success = false;\n      try {\n        if (liveDocs == null && readerIn instanceof VarStraightReader) {\n          // bulk merge since we don't have any deletes\n          VarStraightReader reader = (VarStraightReader) readerIn;\n          final int maxDocs = reader.maxDoc;\n          if (maxDocs == 0) {\n            return;\n          }\n          if (lastDocID+1 < docBase) {\n            fill(docBase, address);\n            lastDocID = docBase-1;\n          }\n          final long numDataBytes;\n          final IndexInput cloneIdx = reader.cloneIndex();\n          try {\n            numDataBytes = cloneIdx.readVLong();\n            final ReaderIterator iter = PackedInts.getReaderIterator(cloneIdx, PackedInts.DEFAULT_BUFFER_SIZE);\n            for (int i = 0; i < maxDocs; i++) {\n              long offset = iter.next();\n              ++lastDocID;\n              if (lastDocID >= docToAddress.length) {\n                int oldSize = docToAddress.length;\n                docToAddress = ArrayUtil.grow(docToAddress, 1 + lastDocID);\n                bytesUsed.addAndGet((docToAddress.length - oldSize)\n                    * RamUsageEstimator.NUM_BYTES_INT);\n              }\n              docToAddress[lastDocID] = address + offset;\n            }\n            address += numDataBytes; // this is the address after all addr pointers are updated\n            iter.close();\n          } finally {\n            IOUtils.close(cloneIdx);\n          }\n          final IndexInput cloneData = reader.cloneData();\n          try {\n            datOut.copyBytes(cloneData, numDataBytes);\n          } finally {\n            IOUtils.close(cloneData);  \n          }\n        } else {\n          super.merge(readerIn, docBase, docCount, liveDocs);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(datOut);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/VarStraightBytesImpl.Writer#merge(DocValues,int,int,Bits).mjava","sourceNew":null,"sourceOld":"    @Override\n    protected void merge(DocValues readerIn, int docBase, int docCount, Bits liveDocs) throws IOException {\n      merge = true;\n      datOut = getOrCreateDataOut();\n      boolean success = false;\n      try {\n        if (liveDocs == null && readerIn instanceof VarStraightReader) {\n          // bulk merge since we don't have any deletes\n          VarStraightReader reader = (VarStraightReader) readerIn;\n          final int maxDocs = reader.maxDoc;\n          if (maxDocs == 0) {\n            return;\n          }\n          if (lastDocID+1 < docBase) {\n            fill(docBase, address);\n            lastDocID = docBase-1;\n          }\n          final long numDataBytes;\n          final IndexInput cloneIdx = reader.cloneIndex();\n          try {\n            numDataBytes = cloneIdx.readVLong();\n            final ReaderIterator iter = PackedInts.getReaderIterator(cloneIdx, PackedInts.DEFAULT_BUFFER_SIZE);\n            for (int i = 0; i < maxDocs; i++) {\n              long offset = iter.next();\n              ++lastDocID;\n              if (lastDocID >= docToAddress.length) {\n                int oldSize = docToAddress.length;\n                docToAddress = ArrayUtil.grow(docToAddress, 1 + lastDocID);\n                bytesUsed.addAndGet((docToAddress.length - oldSize)\n                    * RamUsageEstimator.NUM_BYTES_INT);\n              }\n              docToAddress[lastDocID] = address + offset;\n            }\n            address += numDataBytes; // this is the address after all addr pointers are updated\n          } finally {\n            IOUtils.close(cloneIdx);\n          }\n          final IndexInput cloneData = reader.cloneData();\n          try {\n            datOut.copyBytes(cloneData, numDataBytes);\n          } finally {\n            IOUtils.close(cloneData);  \n          }\n        } else {\n          super.merge(readerIn, docBase, docCount, liveDocs);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(datOut);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/VarStraightBytesImpl.Writer#merge(DocValues,int,int,Bits).mjava","sourceNew":null,"sourceOld":"    @Override\n    protected void merge(DocValues readerIn, int docBase, int docCount, Bits liveDocs) throws IOException {\n      merge = true;\n      datOut = getOrCreateDataOut();\n      boolean success = false;\n      try {\n        if (liveDocs == null && readerIn instanceof VarStraightReader) {\n          // bulk merge since we don't have any deletes\n          VarStraightReader reader = (VarStraightReader) readerIn;\n          final int maxDocs = reader.maxDoc;\n          if (maxDocs == 0) {\n            return;\n          }\n          if (lastDocID+1 < docBase) {\n            fill(docBase, address);\n            lastDocID = docBase-1;\n          }\n          final long numDataBytes;\n          final IndexInput cloneIdx = reader.cloneIndex();\n          try {\n            numDataBytes = cloneIdx.readVLong();\n            final ReaderIterator iter = PackedInts.getReaderIterator(cloneIdx, PackedInts.DEFAULT_BUFFER_SIZE);\n            for (int i = 0; i < maxDocs; i++) {\n              long offset = iter.next();\n              ++lastDocID;\n              if (lastDocID >= docToAddress.length) {\n                int oldSize = docToAddress.length;\n                docToAddress = ArrayUtil.grow(docToAddress, 1 + lastDocID);\n                bytesUsed.addAndGet((docToAddress.length - oldSize)\n                    * RamUsageEstimator.NUM_BYTES_INT);\n              }\n              docToAddress[lastDocID] = address + offset;\n            }\n            address += numDataBytes; // this is the address after all addr pointers are updated\n          } finally {\n            IOUtils.close(cloneIdx);\n          }\n          final IndexInput cloneData = reader.cloneData();\n          try {\n            datOut.copyBytes(cloneData, numDataBytes);\n          } finally {\n            IOUtils.close(cloneData);  \n          }\n        } else {\n          super.merge(readerIn, docBase, docCount, liveDocs);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(datOut);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["c183f9eca784b0a36f02c97c88eba082898309e0","0837ab0472feecb3a54260729d845f839e1cbd72"],"55110eb60c5105294fc2ae7912d82b750865aa58":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","55110eb60c5105294fc2ae7912d82b750865aa58"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["55110eb60c5105294fc2ae7912d82b750865aa58","c183f9eca784b0a36f02c97c88eba082898309e0"],"0837ab0472feecb3a54260729d845f839e1cbd72":["407687e67faf6e1f02a211ca078d8e3eed631027"],"c183f9eca784b0a36f02c97c88eba082898309e0":["55110eb60c5105294fc2ae7912d82b750865aa58"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"55110eb60c5105294fc2ae7912d82b750865aa58":["fe33227f6805edab2036cbb80645cc4e2d1fa424","407687e67faf6e1f02a211ca078d8e3eed631027","c183f9eca784b0a36f02c97c88eba082898309e0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["55110eb60c5105294fc2ae7912d82b750865aa58","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"407687e67faf6e1f02a211ca078d8e3eed631027":["0837ab0472feecb3a54260729d845f839e1cbd72"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"c183f9eca784b0a36f02c97c88eba082898309e0":["d4d69c535930b5cce125cff868d40f6373dc27d4","407687e67faf6e1f02a211ca078d8e3eed631027"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}