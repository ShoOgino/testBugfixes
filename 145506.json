{"path":"lucene/contrib/analyzers/stempel/src/java/org/apache/lucene/analysis/pl/PolishAnalyzer#createComponents(String,Reader).mjava","commits":[{"id":"67748b41458c73d49a48168362cc7f4c960a2542","date":1272890662,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/analyzers/stempel/src/java/org/apache/lucene/analysis/pl/PolishAnalyzer#createComponents(String,Reader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a\n   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   * which tokenizes all the text in the provided {@link Reader}.\n   * \n   * @return A\n   *         {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from an {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link LowerCaseFilter}, {@link StopFilter}\n   *         , {@link KeywordMarkerFilter} if a stem exclusion set is\n   *         provided and {@link StempelFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n    TokenStream result = new StandardFilter(source);\n    result = new LowerCaseFilter(matchVersion, result);\n    result = new StopFilter(matchVersion, result, stopwords);\n    if(!stemExclusionSet.isEmpty())\n      result = new KeywordMarkerFilter(result, stemExclusionSet);\n    result = new StempelFilter(result, new StempelStemmer(stemTable));\n    return new TokenStreamComponents(source, result);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/stempel/src/java/org/apache/lucene/analysis/pl/PolishAnalyzer#createComponents(String,Reader).mjava","pathOld":"lucene/contrib/analyzers/stempel/src/java/org/apache/lucene/analysis/pl/PolishAnalyzer#createComponents(String,Reader).mjava","sourceNew":"  /**\n   * Creates a\n   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   * which tokenizes all the text in the provided {@link Reader}.\n   * \n   * @return A\n   *         {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from an {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link LowerCaseFilter}, {@link StopFilter}\n   *         , {@link KeywordMarkerFilter} if a stem exclusion set is\n   *         provided and {@link StempelFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n    TokenStream result = new StandardFilter(source);\n    result = new LowerCaseFilter(matchVersion, result);\n    result = new StopFilter(matchVersion, result, stopwords);\n    if(!stemExclusionSet.isEmpty())\n      result = new KeywordMarkerFilter(result, stemExclusionSet);\n    result = new StempelFilter(result, new StempelStemmer(stemTable));\n    return new TokenStreamComponents(source, result);\n  }\n\n","sourceOld":"  /**\n   * Creates a\n   * {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   * which tokenizes all the text in the provided {@link Reader}.\n   * \n   * @return A\n   *         {@link org.apache.lucene.analysis.ReusableAnalyzerBase.TokenStreamComponents}\n   *         built from an {@link StandardTokenizer} filtered with\n   *         {@link StandardFilter}, {@link LowerCaseFilter}, {@link StopFilter}\n   *         , {@link KeywordMarkerFilter} if a stem exclusion set is\n   *         provided and {@link StempelFilter}.\n   */\n  @Override\n  protected TokenStreamComponents createComponents(String fieldName,\n      Reader reader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n    TokenStream result = new StandardFilter(source);\n    result = new LowerCaseFilter(matchVersion, result);\n    result = new StopFilter(matchVersion, result, stopwords);\n    if(!stemExclusionSet.isEmpty())\n      result = new KeywordMarkerFilter(result, stemExclusionSet);\n    result = new StempelFilter(result, new StempelStemmer(stemTable));\n    return new TokenStreamComponents(source, result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"67748b41458c73d49a48168362cc7f4c960a2542":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["67748b41458c73d49a48168362cc7f4c960a2542"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["67748b41458c73d49a48168362cc7f4c960a2542"],"67748b41458c73d49a48168362cc7f4c960a2542":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}