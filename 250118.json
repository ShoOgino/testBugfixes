{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testCooldown().mjava","commits":[{"id":"67e503ef0f418bc92404ff5d55694087c23d48eb","date":1509025368,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testCooldown().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCooldown() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(1000);\n\n    List<TestEvent> capturedEvents = listenerEvents.get(\"bar\");\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be at least one IGNORED event due to cooldown, and one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 1);\n    for (int i = 0; i < capturedEvents.size() - 1; i++) {\n      TestEvent ev = capturedEvents.get(i);\n      assertEquals(ev.toString(), TriggerEventProcessorStage.IGNORED, ev.stage);\n      assertTrue(ev.toString(), ev.message.contains(\"cooldown\"));\n    }\n    TestEvent ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.MILLISECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_MS));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15ba547dfc0dd0b670e678cb3db8e5d27c694420","date":1511865512,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testCooldown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testCooldown().mjava","sourceNew":"  @Test\n  public void testCooldown() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(1000);\n\n    List<TestEvent> capturedEvents = listenerEvents.get(\"bar\");\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be at least one IGNORED event due to cooldown, and one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 1);\n    for (int i = 0; i < capturedEvents.size() - 1; i++) {\n      TestEvent ev = capturedEvents.get(i);\n      assertEquals(ev.toString(), TriggerEventProcessorStage.IGNORED, ev.stage);\n      assertTrue(ev.toString(), ev.message.contains(\"cooldown\"));\n    }\n    TestEvent ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n    prevTimestamp = ev.timestamp;\n\n    long modifiedCooldownPeriodSeconds = 7;\n    String setPropertiesCommand = \"{\\n\" +\n        \"\\t\\\"set-properties\\\" : {\\n\" +\n        \"\\t\\t\\\"\" + AutoScalingParams.TRIGGER_COOLDOWN_PERIOD_SECONDS + \"\\\" : \" + modifiedCooldownPeriodSeconds + \"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    solrClient.request(createAutoScalingRequest(SolrRequest.METHOD.POST, setPropertiesCommand));\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode3 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be at least one IGNORED event due to cooldown, and one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 1);\n    for (int i = 0; i < capturedEvents.size() - 1; i++) {\n      ev = capturedEvents.get(i);\n      assertEquals(ev.toString(), TriggerEventProcessorStage.IGNORED, ev.stage);\n      assertTrue(ev.toString(), ev.message.contains(\"cooldown\"));\n    }\n    ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than the modified cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(modifiedCooldownPeriodSeconds));\n  }\n\n","sourceOld":"  @Test\n  public void testCooldown() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(1000);\n\n    List<TestEvent> capturedEvents = listenerEvents.get(\"bar\");\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be at least one IGNORED event due to cooldown, and one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 1);\n    for (int i = 0; i < capturedEvents.size() - 1; i++) {\n      TestEvent ev = capturedEvents.get(i);\n      assertEquals(ev.toString(), TriggerEventProcessorStage.IGNORED, ev.stage);\n      assertTrue(ev.toString(), ev.message.contains(\"cooldown\"));\n    }\n    TestEvent ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.MILLISECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_MS));\n  }\n\n","bugFix":null,"bugIntro":["65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testCooldown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testCooldown().mjava","sourceNew":"  @Test\n  public void testCooldown() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(1000);\n\n    List<TestEvent> capturedEvents = listenerEvents.get(\"bar\");\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be at least one IGNORED event due to cooldown, and one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 1);\n    for (int i = 0; i < capturedEvents.size() - 1; i++) {\n      TestEvent ev = capturedEvents.get(i);\n      assertEquals(ev.toString(), TriggerEventProcessorStage.IGNORED, ev.stage);\n      assertTrue(ev.toString(), ev.message.contains(\"cooldown\"));\n    }\n    TestEvent ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n    prevTimestamp = ev.timestamp;\n\n    long modifiedCooldownPeriodSeconds = 7;\n    String setPropertiesCommand = \"{\\n\" +\n        \"\\t\\\"set-properties\\\" : {\\n\" +\n        \"\\t\\t\\\"\" + AutoScalingParams.TRIGGER_COOLDOWN_PERIOD_SECONDS + \"\\\" : \" + modifiedCooldownPeriodSeconds + \"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    solrClient.request(createAutoScalingRequest(SolrRequest.METHOD.POST, setPropertiesCommand));\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode3 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be at least one IGNORED event due to cooldown, and one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 1);\n    for (int i = 0; i < capturedEvents.size() - 1; i++) {\n      ev = capturedEvents.get(i);\n      assertEquals(ev.toString(), TriggerEventProcessorStage.IGNORED, ev.stage);\n      assertTrue(ev.toString(), ev.message.contains(\"cooldown\"));\n    }\n    ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than the modified cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(modifiedCooldownPeriodSeconds));\n  }\n\n","sourceOld":"  @Test\n  public void testCooldown() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(1000);\n\n    List<TestEvent> capturedEvents = listenerEvents.get(\"bar\");\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be at least one IGNORED event due to cooldown, and one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 1);\n    for (int i = 0; i < capturedEvents.size() - 1; i++) {\n      TestEvent ev = capturedEvents.get(i);\n      assertEquals(ev.toString(), TriggerEventProcessorStage.IGNORED, ev.stage);\n      assertTrue(ev.toString(), ev.message.contains(\"cooldown\"));\n    }\n    TestEvent ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.MILLISECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_MS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c","date":1512481565,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testCooldown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testCooldown().mjava","sourceNew":"  @Test\n  public void testCooldown() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(1000);\n\n    List<TestEvent> capturedEvents = listenerEvents.get(\"bar\");\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be at least one IGNORED event due to cooldown, and one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 1);\n    for (int i = 0; i < capturedEvents.size() - 1; i++) {\n      TestEvent ev = capturedEvents.get(i);\n      assertEquals(ev.toString(), TriggerEventProcessorStage.IGNORED, ev.stage);\n      assertTrue(ev.toString(), ev.message.contains(\"cooldown\"));\n    }\n    TestEvent ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n    prevTimestamp = ev.timestamp;\n\n    // this also resets the cooldown period\n    long modifiedCooldownPeriodSeconds = 7;\n    String setPropertiesCommand = \"{\\n\" +\n        \"\\t\\\"set-properties\\\" : {\\n\" +\n        \"\\t\\t\\\"\" + AutoScalingParams.TRIGGER_COOLDOWN_PERIOD_SECONDS + \"\\\" : \" + modifiedCooldownPeriodSeconds + \"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    solrClient.request(createAutoScalingRequest(SolrRequest.METHOD.POST, setPropertiesCommand));\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode3 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n    // add another node\n    JettySolrRunner newNode4 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be at least one SUCCEEDED (due to newNode3) then for newNode4 one IGNORED\n    // event due to cooldown, and one SUCCEEDED\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 2);\n    // first event should be SUCCEEDED\n    ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n\n    for (int i = 1; i < capturedEvents.size() - 1; i++) {\n      ev = capturedEvents.get(i);\n      assertEquals(ev.toString(), TriggerEventProcessorStage.IGNORED, ev.stage);\n      assertTrue(ev.toString(), ev.message.contains(\"cooldown\"));\n    }\n    ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than the modified cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(modifiedCooldownPeriodSeconds));\n  }\n\n","sourceOld":"  @Test\n  public void testCooldown() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(1000);\n\n    List<TestEvent> capturedEvents = listenerEvents.get(\"bar\");\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be at least one IGNORED event due to cooldown, and one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 1);\n    for (int i = 0; i < capturedEvents.size() - 1; i++) {\n      TestEvent ev = capturedEvents.get(i);\n      assertEquals(ev.toString(), TriggerEventProcessorStage.IGNORED, ev.stage);\n      assertTrue(ev.toString(), ev.message.contains(\"cooldown\"));\n    }\n    TestEvent ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n    prevTimestamp = ev.timestamp;\n\n    long modifiedCooldownPeriodSeconds = 7;\n    String setPropertiesCommand = \"{\\n\" +\n        \"\\t\\\"set-properties\\\" : {\\n\" +\n        \"\\t\\t\\\"\" + AutoScalingParams.TRIGGER_COOLDOWN_PERIOD_SECONDS + \"\\\" : \" + modifiedCooldownPeriodSeconds + \"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    solrClient.request(createAutoScalingRequest(SolrRequest.METHOD.POST, setPropertiesCommand));\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode3 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be at least one IGNORED event due to cooldown, and one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 1);\n    for (int i = 0; i < capturedEvents.size() - 1; i++) {\n      ev = capturedEvents.get(i);\n      assertEquals(ev.toString(), TriggerEventProcessorStage.IGNORED, ev.stage);\n      assertTrue(ev.toString(), ev.message.contains(\"cooldown\"));\n    }\n    ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than the modified cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(modifiedCooldownPeriodSeconds));\n  }\n\n","bugFix":["15ba547dfc0dd0b670e678cb3db8e5d27c694420"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testCooldown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testCooldown().mjava","sourceNew":"  @Test\n  public void testCooldown() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(1000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be at least one IGNORED event due to cooldown, and one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 1);\n    for (int i = 0; i < capturedEvents.size() - 1; i++) {\n      CapturedEvent ev = capturedEvents.get(i);\n      assertEquals(ev.toString(), TriggerEventProcessorStage.IGNORED, ev.stage);\n      assertTrue(ev.toString(), ev.message.contains(\"cooldown\"));\n    }\n    CapturedEvent ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n    prevTimestamp = ev.timestamp;\n\n    // this also resets the cooldown period\n    long modifiedCooldownPeriodSeconds = 7;\n    String setPropertiesCommand = \"{\\n\" +\n        \"\\t\\\"set-properties\\\" : {\\n\" +\n        \"\\t\\t\\\"\" + AutoScalingParams.TRIGGER_COOLDOWN_PERIOD_SECONDS + \"\\\" : \" + modifiedCooldownPeriodSeconds + \"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    solrClient.request(createAutoScalingRequest(SolrRequest.METHOD.POST, setPropertiesCommand));\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode3 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n    // add another node\n    JettySolrRunner newNode4 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be at least one SUCCEEDED (due to newNode3) then for newNode4 one IGNORED\n    // event due to cooldown, and one SUCCEEDED\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 2);\n    // first event should be SUCCEEDED\n    ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n\n    for (int i = 1; i < capturedEvents.size() - 1; i++) {\n      ev = capturedEvents.get(i);\n      assertEquals(ev.toString(), TriggerEventProcessorStage.IGNORED, ev.stage);\n      assertTrue(ev.toString(), ev.message.contains(\"cooldown\"));\n    }\n    ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than the modified cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(modifiedCooldownPeriodSeconds));\n  }\n\n","sourceOld":"  @Test\n  public void testCooldown() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(1000);\n\n    List<TestEvent> capturedEvents = listenerEvents.get(\"bar\");\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be at least one IGNORED event due to cooldown, and one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 1);\n    for (int i = 0; i < capturedEvents.size() - 1; i++) {\n      TestEvent ev = capturedEvents.get(i);\n      assertEquals(ev.toString(), TriggerEventProcessorStage.IGNORED, ev.stage);\n      assertTrue(ev.toString(), ev.message.contains(\"cooldown\"));\n    }\n    TestEvent ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n    prevTimestamp = ev.timestamp;\n\n    // this also resets the cooldown period\n    long modifiedCooldownPeriodSeconds = 7;\n    String setPropertiesCommand = \"{\\n\" +\n        \"\\t\\\"set-properties\\\" : {\\n\" +\n        \"\\t\\t\\\"\" + AutoScalingParams.TRIGGER_COOLDOWN_PERIOD_SECONDS + \"\\\" : \" + modifiedCooldownPeriodSeconds + \"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    solrClient.request(createAutoScalingRequest(SolrRequest.METHOD.POST, setPropertiesCommand));\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode3 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n    // add another node\n    JettySolrRunner newNode4 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be at least one SUCCEEDED (due to newNode3) then for newNode4 one IGNORED\n    // event due to cooldown, and one SUCCEEDED\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 2);\n    // first event should be SUCCEEDED\n    ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n\n    for (int i = 1; i < capturedEvents.size() - 1; i++) {\n      ev = capturedEvents.get(i);\n      assertEquals(ev.toString(), TriggerEventProcessorStage.IGNORED, ev.stage);\n      assertTrue(ev.toString(), ev.message.contains(\"cooldown\"));\n    }\n    ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than the modified cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(modifiedCooldownPeriodSeconds));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d5ef2a9b4062088bd74169faad5ae11897a6d77","date":1516279764,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testCooldown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testCooldown().mjava","sourceNew":"  @Test\n  public void testCooldown() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(1000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be at least one IGNORED event due to cooldown, and one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertEquals(capturedEvents.toString(),1,  capturedEvents.size());\n    CapturedEvent ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n    prevTimestamp = ev.timestamp;\n\n    // this also resets the cooldown period\n    long modifiedCooldownPeriodSeconds = 7;\n    String setPropertiesCommand = \"{\\n\" +\n        \"\\t\\\"set-properties\\\" : {\\n\" +\n        \"\\t\\t\\\"\" + AutoScalingParams.TRIGGER_COOLDOWN_PERIOD_SECONDS + \"\\\" : \" + modifiedCooldownPeriodSeconds + \"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    solrClient.request(createAutoScalingRequest(SolrRequest.METHOD.POST, setPropertiesCommand));\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode3 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n    // add another node\n    JettySolrRunner newNode4 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be two SUCCEEDED (due to newNode3 and newNode4) and maybe some ignored events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() >= 2);\n    // first event should be SUCCEEDED\n    ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n\n    ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than the modified cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(modifiedCooldownPeriodSeconds));\n  }\n\n","sourceOld":"  @Test\n  public void testCooldown() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(1000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be at least one IGNORED event due to cooldown, and one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 1);\n    for (int i = 0; i < capturedEvents.size() - 1; i++) {\n      CapturedEvent ev = capturedEvents.get(i);\n      assertEquals(ev.toString(), TriggerEventProcessorStage.IGNORED, ev.stage);\n      assertTrue(ev.toString(), ev.message.contains(\"cooldown\"));\n    }\n    CapturedEvent ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n    prevTimestamp = ev.timestamp;\n\n    // this also resets the cooldown period\n    long modifiedCooldownPeriodSeconds = 7;\n    String setPropertiesCommand = \"{\\n\" +\n        \"\\t\\\"set-properties\\\" : {\\n\" +\n        \"\\t\\t\\\"\" + AutoScalingParams.TRIGGER_COOLDOWN_PERIOD_SECONDS + \"\\\" : \" + modifiedCooldownPeriodSeconds + \"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    solrClient.request(createAutoScalingRequest(SolrRequest.METHOD.POST, setPropertiesCommand));\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode3 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n    // add another node\n    JettySolrRunner newNode4 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be at least one SUCCEEDED (due to newNode3) then for newNode4 one IGNORED\n    // event due to cooldown, and one SUCCEEDED\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 2);\n    // first event should be SUCCEEDED\n    ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n\n    for (int i = 1; i < capturedEvents.size() - 1; i++) {\n      ev = capturedEvents.get(i);\n      assertEquals(ev.toString(), TriggerEventProcessorStage.IGNORED, ev.stage);\n      assertTrue(ev.toString(), ev.message.contains(\"cooldown\"));\n    }\n    ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than the modified cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(modifiedCooldownPeriodSeconds));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testCooldown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testCooldown().mjava","sourceNew":"  @Test\n  public void testCooldown() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(1000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be at least one IGNORED event due to cooldown, and one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertEquals(capturedEvents.toString(),1,  capturedEvents.size());\n    CapturedEvent ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n    prevTimestamp = ev.timestamp;\n\n    // this also resets the cooldown period\n    long modifiedCooldownPeriodSeconds = 7;\n    String setPropertiesCommand = \"{\\n\" +\n        \"\\t\\\"set-properties\\\" : {\\n\" +\n        \"\\t\\t\\\"\" + AutoScalingParams.TRIGGER_COOLDOWN_PERIOD_SECONDS + \"\\\" : \" + modifiedCooldownPeriodSeconds + \"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    solrClient.request(createAutoScalingRequest(SolrRequest.METHOD.POST, setPropertiesCommand));\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode3 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n    // add another node\n    JettySolrRunner newNode4 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be two SUCCEEDED (due to newNode3 and newNode4) and maybe some ignored events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() >= 2);\n    // first event should be SUCCEEDED\n    ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n\n    ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than the modified cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(modifiedCooldownPeriodSeconds));\n  }\n\n","sourceOld":"  @Test\n  public void testCooldown() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(1000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be at least one IGNORED event due to cooldown, and one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 1);\n    for (int i = 0; i < capturedEvents.size() - 1; i++) {\n      CapturedEvent ev = capturedEvents.get(i);\n      assertEquals(ev.toString(), TriggerEventProcessorStage.IGNORED, ev.stage);\n      assertTrue(ev.toString(), ev.message.contains(\"cooldown\"));\n    }\n    CapturedEvent ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n    prevTimestamp = ev.timestamp;\n\n    // this also resets the cooldown period\n    long modifiedCooldownPeriodSeconds = 7;\n    String setPropertiesCommand = \"{\\n\" +\n        \"\\t\\\"set-properties\\\" : {\\n\" +\n        \"\\t\\t\\\"\" + AutoScalingParams.TRIGGER_COOLDOWN_PERIOD_SECONDS + \"\\\" : \" + modifiedCooldownPeriodSeconds + \"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    solrClient.request(createAutoScalingRequest(SolrRequest.METHOD.POST, setPropertiesCommand));\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode3 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n    // add another node\n    JettySolrRunner newNode4 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be at least one SUCCEEDED (due to newNode3) then for newNode4 one IGNORED\n    // event due to cooldown, and one SUCCEEDED\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 2);\n    // first event should be SUCCEEDED\n    ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n\n    for (int i = 1; i < capturedEvents.size() - 1; i++) {\n      ev = capturedEvents.get(i);\n      assertEquals(ev.toString(), TriggerEventProcessorStage.IGNORED, ev.stage);\n      assertTrue(ev.toString(), ev.message.contains(\"cooldown\"));\n    }\n    ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than the modified cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(modifiedCooldownPeriodSeconds));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4","date":1522388336,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerCooldownIntegrationTest#testCooldown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testCooldown().mjava","sourceNew":"  @Test\n  public void testCooldown() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(1000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be at least one IGNORED event due to cooldown, and one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertEquals(capturedEvents.toString(), 1, capturedEvents.size());\n    CapturedEvent ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n    prevTimestamp = ev.timestamp;\n\n    // this also resets the cooldown period\n    long modifiedCooldownPeriodSeconds = 7;\n    String setPropertiesCommand = \"{\\n\" +\n        \"\\t\\\"set-properties\\\" : {\\n\" +\n        \"\\t\\t\\\"\" + AutoScalingParams.TRIGGER_COOLDOWN_PERIOD_SECONDS + \"\\\" : \" + modifiedCooldownPeriodSeconds + \"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    solrClient.request(createAutoScalingRequest(SolrRequest.METHOD.POST, setPropertiesCommand));\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode3 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n    // add another node\n    JettySolrRunner newNode4 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be two SUCCEEDED (due to newNode3 and newNode4) and maybe some ignored events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() >= 2);\n    // first event should be SUCCEEDED\n    ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n\n    ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than the modified cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(modifiedCooldownPeriodSeconds));\n  }\n\n","sourceOld":"  @Test\n  public void testCooldown() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(1000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be at least one IGNORED event due to cooldown, and one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertEquals(capturedEvents.toString(),1,  capturedEvents.size());\n    CapturedEvent ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n    prevTimestamp = ev.timestamp;\n\n    // this also resets the cooldown period\n    long modifiedCooldownPeriodSeconds = 7;\n    String setPropertiesCommand = \"{\\n\" +\n        \"\\t\\\"set-properties\\\" : {\\n\" +\n        \"\\t\\t\\\"\" + AutoScalingParams.TRIGGER_COOLDOWN_PERIOD_SECONDS + \"\\\" : \" + modifiedCooldownPeriodSeconds + \"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    solrClient.request(createAutoScalingRequest(SolrRequest.METHOD.POST, setPropertiesCommand));\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode3 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n    // add another node\n    JettySolrRunner newNode4 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be two SUCCEEDED (due to newNode3 and newNode4) and maybe some ignored events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() >= 2);\n    // first event should be SUCCEEDED\n    ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n\n    ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than the modified cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(modifiedCooldownPeriodSeconds));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acfe8d3b837b6b66eaddf114bb99cf9e2257764d","date":1522406637,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerCooldownIntegrationTest#testCooldown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testCooldown().mjava","sourceNew":"  @Test\n  public void testCooldown() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(1000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be at least one IGNORED event due to cooldown, and one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertEquals(capturedEvents.toString(), 1, capturedEvents.size());\n    CapturedEvent ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n    prevTimestamp = ev.timestamp;\n\n    // this also resets the cooldown period\n    long modifiedCooldownPeriodSeconds = 7;\n    String setPropertiesCommand = \"{\\n\" +\n        \"\\t\\\"set-properties\\\" : {\\n\" +\n        \"\\t\\t\\\"\" + AutoScalingParams.TRIGGER_COOLDOWN_PERIOD_SECONDS + \"\\\" : \" + modifiedCooldownPeriodSeconds + \"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    solrClient.request(createAutoScalingRequest(SolrRequest.METHOD.POST, setPropertiesCommand));\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode3 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n    // add another node\n    JettySolrRunner newNode4 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be two SUCCEEDED (due to newNode3 and newNode4) and maybe some ignored events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() >= 2);\n    // first event should be SUCCEEDED\n    ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n\n    ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than the modified cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(modifiedCooldownPeriodSeconds));\n  }\n\n","sourceOld":"  @Test\n  public void testCooldown() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    failDummyAction = false;\n    waitForSeconds = 1;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_cooldown_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_cooldown_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED', 'IGNORED'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerCreated = new CountDownLatch(1);\n    listenerEvents.clear();\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(1000);\n\n    List<CapturedEvent> capturedEvents = listenerEvents.get(\"bar\");\n    // we may get a few IGNORED events if other tests caused events within cooldown period\n    assertTrue(capturedEvents.toString(), capturedEvents.size() > 0);\n    long prevTimestamp = capturedEvents.get(capturedEvents.size() - 1).timestamp;\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode2 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be at least one IGNORED event due to cooldown, and one SUCCEEDED event\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertEquals(capturedEvents.toString(),1,  capturedEvents.size());\n    CapturedEvent ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_COOLDOWN_PERIOD_SECONDS));\n    prevTimestamp = ev.timestamp;\n\n    // this also resets the cooldown period\n    long modifiedCooldownPeriodSeconds = 7;\n    String setPropertiesCommand = \"{\\n\" +\n        \"\\t\\\"set-properties\\\" : {\\n\" +\n        \"\\t\\t\\\"\" + AutoScalingParams.TRIGGER_COOLDOWN_PERIOD_SECONDS + \"\\\" : \" + modifiedCooldownPeriodSeconds + \"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    solrClient.request(createAutoScalingRequest(SolrRequest.METHOD.POST, setPropertiesCommand));\n    req = createAutoScalingRequest(SolrRequest.METHOD.GET, null);\n    response = solrClient.request(req);\n\n    // reset the trigger and captured events\n    listenerEvents.clear();\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n\n    JettySolrRunner newNode3 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    triggerFiredLatch = new CountDownLatch(1);\n    triggerFired.compareAndSet(true, false);\n    // add another node\n    JettySolrRunner newNode4 = cluster.startJettySolrRunner();\n    await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    // wait for listener to capture the SUCCEEDED stage\n    Thread.sleep(2000);\n\n    // there must be two SUCCEEDED (due to newNode3 and newNode4) and maybe some ignored events\n    capturedEvents = listenerEvents.get(\"bar\");\n    assertTrue(capturedEvents.toString(), capturedEvents.size() >= 2);\n    // first event should be SUCCEEDED\n    ev = capturedEvents.get(0);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n\n    ev = capturedEvents.get(capturedEvents.size() - 1);\n    assertEquals(ev.toString(), TriggerEventProcessorStage.SUCCEEDED, ev.stage);\n    // the difference between timestamps of the first SUCCEEDED and the last SUCCEEDED\n    // must be larger than the modified cooldown period\n    assertTrue(\"timestamp delta is less than default cooldown period\", ev.timestamp - prevTimestamp > TimeUnit.SECONDS.toNanos(modifiedCooldownPeriodSeconds));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1aad05eeff7818b0833c02ac6b743aa72054963b":["67e503ef0f418bc92404ff5d55694087c23d48eb","15ba547dfc0dd0b670e678cb3db8e5d27c694420"],"b94236357aaa22b76c10629851fe4e376e0cea82":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","0d5ef2a9b4062088bd74169faad5ae11897a6d77"],"15ba547dfc0dd0b670e678cb3db8e5d27c694420":["67e503ef0f418bc92404ff5d55694087c23d48eb"],"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4":["b94236357aaa22b76c10629851fe4e376e0cea82"],"67e503ef0f418bc92404ff5d55694087c23d48eb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0d5ef2a9b4062088bd74169faad5ae11897a6d77":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c"],"acfe8d3b837b6b66eaddf114bb99cf9e2257764d":["b94236357aaa22b76c10629851fe4e376e0cea82","deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4"],"65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d"]},"commit2Childs":{"1aad05eeff7818b0833c02ac6b743aa72054963b":["65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c"],"b94236357aaa22b76c10629851fe4e376e0cea82":["deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4","acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"15ba547dfc0dd0b670e678cb3db8e5d27c694420":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"67e503ef0f418bc92404ff5d55694087c23d48eb":["1aad05eeff7818b0833c02ac6b743aa72054963b","15ba547dfc0dd0b670e678cb3db8e5d27c694420"],"0d5ef2a9b4062088bd74169faad5ae11897a6d77":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["67e503ef0f418bc92404ff5d55694087c23d48eb"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["b94236357aaa22b76c10629851fe4e376e0cea82","0d5ef2a9b4062088bd74169faad5ae11897a6d77"],"acfe8d3b837b6b66eaddf114bb99cf9e2257764d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}