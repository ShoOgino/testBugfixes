{"path":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getReaderNoHeader(DataInput,Format,int,int,int).mjava","commits":[{"id":"55110eb60c5105294fc2ae7912d82b750865aa58","date":1341389822,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getReaderNoHeader(DataInput,Format,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: Restore a {@link Reader} from a stream without reading metadata at\n   * the beginning of the stream. This method is useful to restore data from\n   * streams which have been created using\n   * {@link PackedInts#getWriterNoHeader(DataOutput, Format, int, int, int)}.\n   *\n   * @param in           the stream to read data from, positioned at the beginning of the packed values\n   * @param format       the format used to serialize\n   * @param version      the version used to serialize the data\n   * @param valueCount   how many values the stream holds\n   * @param bitsPerValue the number of bits per value\n   * @return             a Reader\n   * @throws IOException\n   * @see PackedInts#getWriterNoHeader(DataOutput, Format, int, int, int)\n   * @lucene.internal\n   */\n  public static Reader getReaderNoHeader(DataInput in, Format format, int version,\n      int valueCount, int bitsPerValue) throws IOException {\n    switch (format) {\n      case PACKED_SINGLE_BLOCK:\n        return Packed64SingleBlock.create(in, valueCount, bitsPerValue);\n      case PACKED:\n        switch (bitsPerValue) {\n          case 8:\n            return new Direct8(in, valueCount);\n          case 16:\n            return new Direct16(in, valueCount);\n          case 32:\n            return new Direct32(in, valueCount);\n          case 64:\n            return new Direct64(in, valueCount);\n          case 24:\n            if (valueCount <= Packed8ThreeBlocks.MAX_SIZE) {\n              return new Packed8ThreeBlocks(in, valueCount);\n            }\n            break;\n          case 48:\n            if (valueCount <= Packed16ThreeBlocks.MAX_SIZE) {\n              return new Packed16ThreeBlocks(in, valueCount);\n            }\n            break;\n        }\n        return new Packed64(in, valueCount, bitsPerValue);\n      default:\n        throw new AssertionError(\"Unknwown Writer format: \" + format);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getReaderNoHeader(DataInput,Format,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: Restore a {@link Reader} from a stream without reading metadata at\n   * the beginning of the stream. This method is useful to restore data from\n   * streams which have been created using\n   * {@link PackedInts#getWriterNoHeader(DataOutput, Format, int, int, int)}.\n   *\n   * @param in           the stream to read data from, positioned at the beginning of the packed values\n   * @param format       the format used to serialize\n   * @param version      the version used to serialize the data\n   * @param valueCount   how many values the stream holds\n   * @param bitsPerValue the number of bits per value\n   * @return             a Reader\n   * @throws IOException\n   * @see PackedInts#getWriterNoHeader(DataOutput, Format, int, int, int)\n   * @lucene.internal\n   */\n  public static Reader getReaderNoHeader(DataInput in, Format format, int version,\n      int valueCount, int bitsPerValue) throws IOException {\n    switch (format) {\n      case PACKED_SINGLE_BLOCK:\n        return Packed64SingleBlock.create(in, valueCount, bitsPerValue);\n      case PACKED:\n        switch (bitsPerValue) {\n          case 8:\n            return new Direct8(in, valueCount);\n          case 16:\n            return new Direct16(in, valueCount);\n          case 32:\n            return new Direct32(in, valueCount);\n          case 64:\n            return new Direct64(in, valueCount);\n          case 24:\n            if (valueCount <= Packed8ThreeBlocks.MAX_SIZE) {\n              return new Packed8ThreeBlocks(in, valueCount);\n            }\n            break;\n          case 48:\n            if (valueCount <= Packed16ThreeBlocks.MAX_SIZE) {\n              return new Packed16ThreeBlocks(in, valueCount);\n            }\n            break;\n        }\n        return new Packed64(in, valueCount, bitsPerValue);\n      default:\n        throw new AssertionError(\"Unknwown Writer format: \" + format);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c975e32532333ce3b5f202388bf142a669bfdbc","date":1345167447,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getReaderNoHeader(DataInput,Format,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getReaderNoHeader(DataInput,Format,int,int,int).mjava","sourceNew":"  /**\n   * Expert: Restore a {@link Reader} from a stream without reading metadata at\n   * the beginning of the stream. This method is useful to restore data from\n   * streams which have been created using\n   * {@link PackedInts#getWriterNoHeader(DataOutput, Format, int, int, int)}.\n   *\n   * @param in           the stream to read data from, positioned at the beginning of the packed values\n   * @param format       the format used to serialize\n   * @param version      the version used to serialize the data\n   * @param valueCount   how many values the stream holds\n   * @param bitsPerValue the number of bits per value\n   * @return             a Reader\n   * @throws IOException\n   * @see PackedInts#getWriterNoHeader(DataOutput, Format, int, int, int)\n   * @lucene.internal\n   */\n  public static Reader getReaderNoHeader(DataInput in, Format format, int version,\n      int valueCount, int bitsPerValue) throws IOException {\n    switch (format) {\n      case PACKED_SINGLE_BLOCK:\n        return Packed64SingleBlock.create(in, valueCount, bitsPerValue);\n      case PACKED:\n        switch (bitsPerValue) {\n          case 8:\n            return new Direct8(in, valueCount);\n          case 16:\n            return new Direct16(in, valueCount);\n          case 32:\n            return new Direct32(in, valueCount);\n          case 64:\n            return new Direct64(in, valueCount);\n          case 24:\n            if (valueCount <= Packed8ThreeBlocks.MAX_SIZE) {\n              return new Packed8ThreeBlocks(in, valueCount);\n            }\n            break;\n          case 48:\n            if (valueCount <= Packed16ThreeBlocks.MAX_SIZE) {\n              return new Packed16ThreeBlocks(in, valueCount);\n            }\n            break;\n        }\n        return new Packed64(in, valueCount, bitsPerValue);\n      default:\n        throw new AssertionError(\"Unknown Writer format: \" + format);\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: Restore a {@link Reader} from a stream without reading metadata at\n   * the beginning of the stream. This method is useful to restore data from\n   * streams which have been created using\n   * {@link PackedInts#getWriterNoHeader(DataOutput, Format, int, int, int)}.\n   *\n   * @param in           the stream to read data from, positioned at the beginning of the packed values\n   * @param format       the format used to serialize\n   * @param version      the version used to serialize the data\n   * @param valueCount   how many values the stream holds\n   * @param bitsPerValue the number of bits per value\n   * @return             a Reader\n   * @throws IOException\n   * @see PackedInts#getWriterNoHeader(DataOutput, Format, int, int, int)\n   * @lucene.internal\n   */\n  public static Reader getReaderNoHeader(DataInput in, Format format, int version,\n      int valueCount, int bitsPerValue) throws IOException {\n    switch (format) {\n      case PACKED_SINGLE_BLOCK:\n        return Packed64SingleBlock.create(in, valueCount, bitsPerValue);\n      case PACKED:\n        switch (bitsPerValue) {\n          case 8:\n            return new Direct8(in, valueCount);\n          case 16:\n            return new Direct16(in, valueCount);\n          case 32:\n            return new Direct32(in, valueCount);\n          case 64:\n            return new Direct64(in, valueCount);\n          case 24:\n            if (valueCount <= Packed8ThreeBlocks.MAX_SIZE) {\n              return new Packed8ThreeBlocks(in, valueCount);\n            }\n            break;\n          case 48:\n            if (valueCount <= Packed16ThreeBlocks.MAX_SIZE) {\n              return new Packed16ThreeBlocks(in, valueCount);\n            }\n            break;\n        }\n        return new Packed64(in, valueCount, bitsPerValue);\n      default:\n        throw new AssertionError(\"Unknwown Writer format: \" + format);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70fa1c0f4d75735ff2e1485e059d9bc5efa50598","date":1345296911,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getReaderNoHeader(DataInput,Format,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getReaderNoHeader(DataInput,Format,int,int,int).mjava","sourceNew":"  /**\n   * Expert: Restore a {@link Reader} from a stream without reading metadata at\n   * the beginning of the stream. This method is useful to restore data from\n   * streams which have been created using\n   * {@link PackedInts#getWriterNoHeader(DataOutput, Format, int, int, int)}.\n   *\n   * @param in           the stream to read data from, positioned at the beginning of the packed values\n   * @param format       the format used to serialize\n   * @param version      the version used to serialize the data\n   * @param valueCount   how many values the stream holds\n   * @param bitsPerValue the number of bits per value\n   * @return             a Reader\n   * @throws IOException\n   * @see PackedInts#getWriterNoHeader(DataOutput, Format, int, int, int)\n   * @lucene.internal\n   */\n  public static Reader getReaderNoHeader(DataInput in, Format format, int version,\n      int valueCount, int bitsPerValue) throws IOException {\n    switch (format) {\n      case PACKED_SINGLE_BLOCK:\n        return Packed64SingleBlock.create(in, valueCount, bitsPerValue);\n      case PACKED:\n        switch (bitsPerValue) {\n          case 8:\n            return new Direct8(in, valueCount);\n          case 16:\n            return new Direct16(in, valueCount);\n          case 32:\n            return new Direct32(in, valueCount);\n          case 64:\n            return new Direct64(in, valueCount);\n          case 24:\n            if (valueCount <= Packed8ThreeBlocks.MAX_SIZE) {\n              return new Packed8ThreeBlocks(in, valueCount);\n            }\n            break;\n          case 48:\n            if (valueCount <= Packed16ThreeBlocks.MAX_SIZE) {\n              return new Packed16ThreeBlocks(in, valueCount);\n            }\n            break;\n        }\n        return new Packed64(in, valueCount, bitsPerValue);\n      default:\n        throw new AssertionError(\"Unknown Writer format: \" + format);\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: Restore a {@link Reader} from a stream without reading metadata at\n   * the beginning of the stream. This method is useful to restore data from\n   * streams which have been created using\n   * {@link PackedInts#getWriterNoHeader(DataOutput, Format, int, int, int)}.\n   *\n   * @param in           the stream to read data from, positioned at the beginning of the packed values\n   * @param format       the format used to serialize\n   * @param version      the version used to serialize the data\n   * @param valueCount   how many values the stream holds\n   * @param bitsPerValue the number of bits per value\n   * @return             a Reader\n   * @throws IOException\n   * @see PackedInts#getWriterNoHeader(DataOutput, Format, int, int, int)\n   * @lucene.internal\n   */\n  public static Reader getReaderNoHeader(DataInput in, Format format, int version,\n      int valueCount, int bitsPerValue) throws IOException {\n    switch (format) {\n      case PACKED_SINGLE_BLOCK:\n        return Packed64SingleBlock.create(in, valueCount, bitsPerValue);\n      case PACKED:\n        switch (bitsPerValue) {\n          case 8:\n            return new Direct8(in, valueCount);\n          case 16:\n            return new Direct16(in, valueCount);\n          case 32:\n            return new Direct32(in, valueCount);\n          case 64:\n            return new Direct64(in, valueCount);\n          case 24:\n            if (valueCount <= Packed8ThreeBlocks.MAX_SIZE) {\n              return new Packed8ThreeBlocks(in, valueCount);\n            }\n            break;\n          case 48:\n            if (valueCount <= Packed16ThreeBlocks.MAX_SIZE) {\n              return new Packed16ThreeBlocks(in, valueCount);\n            }\n            break;\n        }\n        return new Packed64(in, valueCount, bitsPerValue);\n      default:\n        throw new AssertionError(\"Unknwown Writer format: \" + format);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"616c1830142ff5c1ddedec1ed898733b73c8e23b","date":1345368925,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getReaderNoHeader(DataInput,Format,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getReaderNoHeader(DataInput,Format,int,int,int).mjava","sourceNew":"  /**\n   * Expert: Restore a {@link Reader} from a stream without reading metadata at\n   * the beginning of the stream. This method is useful to restore data from\n   * streams which have been created using\n   * {@link PackedInts#getWriterNoHeader(DataOutput, Format, int, int, int)}.\n   *\n   * @param in           the stream to read data from, positioned at the beginning of the packed values\n   * @param format       the format used to serialize\n   * @param version      the version used to serialize the data\n   * @param valueCount   how many values the stream holds\n   * @param bitsPerValue the number of bits per value\n   * @return             a Reader\n   * @throws IOException\n   * @see PackedInts#getWriterNoHeader(DataOutput, Format, int, int, int)\n   * @lucene.internal\n   */\n  public static Reader getReaderNoHeader(DataInput in, Format format, int version,\n      int valueCount, int bitsPerValue) throws IOException {\n    switch (format) {\n      case PACKED_SINGLE_BLOCK:\n        return Packed64SingleBlock.create(in, valueCount, bitsPerValue);\n      case PACKED:\n        switch (bitsPerValue) {\n          case 8:\n            return new Direct8(in, valueCount);\n          case 16:\n            return new Direct16(in, valueCount);\n          case 32:\n            return new Direct32(in, valueCount);\n          case 64:\n            return new Direct64(in, valueCount);\n          case 24:\n            if (valueCount <= Packed8ThreeBlocks.MAX_SIZE) {\n              return new Packed8ThreeBlocks(in, valueCount);\n            }\n            break;\n          case 48:\n            if (valueCount <= Packed16ThreeBlocks.MAX_SIZE) {\n              return new Packed16ThreeBlocks(in, valueCount);\n            }\n            break;\n        }\n        return new Packed64(in, valueCount, bitsPerValue);\n      default:\n        throw new AssertionError(\"Unknown Writer format: \" + format);\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: Restore a {@link Reader} from a stream without reading metadata at\n   * the beginning of the stream. This method is useful to restore data from\n   * streams which have been created using\n   * {@link PackedInts#getWriterNoHeader(DataOutput, Format, int, int, int)}.\n   *\n   * @param in           the stream to read data from, positioned at the beginning of the packed values\n   * @param format       the format used to serialize\n   * @param version      the version used to serialize the data\n   * @param valueCount   how many values the stream holds\n   * @param bitsPerValue the number of bits per value\n   * @return             a Reader\n   * @throws IOException\n   * @see PackedInts#getWriterNoHeader(DataOutput, Format, int, int, int)\n   * @lucene.internal\n   */\n  public static Reader getReaderNoHeader(DataInput in, Format format, int version,\n      int valueCount, int bitsPerValue) throws IOException {\n    switch (format) {\n      case PACKED_SINGLE_BLOCK:\n        return Packed64SingleBlock.create(in, valueCount, bitsPerValue);\n      case PACKED:\n        switch (bitsPerValue) {\n          case 8:\n            return new Direct8(in, valueCount);\n          case 16:\n            return new Direct16(in, valueCount);\n          case 32:\n            return new Direct32(in, valueCount);\n          case 64:\n            return new Direct64(in, valueCount);\n          case 24:\n            if (valueCount <= Packed8ThreeBlocks.MAX_SIZE) {\n              return new Packed8ThreeBlocks(in, valueCount);\n            }\n            break;\n          case 48:\n            if (valueCount <= Packed16ThreeBlocks.MAX_SIZE) {\n              return new Packed16ThreeBlocks(in, valueCount);\n            }\n            break;\n        }\n        return new Packed64(in, valueCount, bitsPerValue);\n      default:\n        throw new AssertionError(\"Unknwown Writer format: \" + format);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e099715aa0cb8da9a56320dd21c24f1ad6728b03","date":1345471998,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getReaderNoHeader(DataInput,Format,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getReaderNoHeader(DataInput,Format,int,int,int).mjava","sourceNew":"  /**\n   * Expert: Restore a {@link Reader} from a stream without reading metadata at\n   * the beginning of the stream. This method is useful to restore data from\n   * streams which have been created using\n   * {@link PackedInts#getWriterNoHeader(DataOutput, Format, int, int, int)}.\n   *\n   * @param in           the stream to read data from, positioned at the beginning of the packed values\n   * @param format       the format used to serialize\n   * @param version      the version used to serialize the data\n   * @param valueCount   how many values the stream holds\n   * @param bitsPerValue the number of bits per value\n   * @return             a Reader\n   * @throws IOException\n   * @see PackedInts#getWriterNoHeader(DataOutput, Format, int, int, int)\n   * @lucene.internal\n   */\n  public static Reader getReaderNoHeader(DataInput in, Format format, int version,\n      int valueCount, int bitsPerValue) throws IOException {\n    checkVersion(version);\n    switch (format) {\n      case PACKED_SINGLE_BLOCK:\n        return Packed64SingleBlock.create(in, valueCount, bitsPerValue);\n      case PACKED:\n        switch (bitsPerValue) {\n          case 8:\n            return new Direct8(in, valueCount);\n          case 16:\n            return new Direct16(in, valueCount);\n          case 32:\n            return new Direct32(in, valueCount);\n          case 64:\n            return new Direct64(in, valueCount);\n          case 24:\n            if (valueCount <= Packed8ThreeBlocks.MAX_SIZE) {\n              return new Packed8ThreeBlocks(in, valueCount);\n            }\n            break;\n          case 48:\n            if (valueCount <= Packed16ThreeBlocks.MAX_SIZE) {\n              return new Packed16ThreeBlocks(in, valueCount);\n            }\n            break;\n        }\n        return new Packed64(in, valueCount, bitsPerValue);\n      default:\n        throw new AssertionError(\"Unknown Writer format: \" + format);\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: Restore a {@link Reader} from a stream without reading metadata at\n   * the beginning of the stream. This method is useful to restore data from\n   * streams which have been created using\n   * {@link PackedInts#getWriterNoHeader(DataOutput, Format, int, int, int)}.\n   *\n   * @param in           the stream to read data from, positioned at the beginning of the packed values\n   * @param format       the format used to serialize\n   * @param version      the version used to serialize the data\n   * @param valueCount   how many values the stream holds\n   * @param bitsPerValue the number of bits per value\n   * @return             a Reader\n   * @throws IOException\n   * @see PackedInts#getWriterNoHeader(DataOutput, Format, int, int, int)\n   * @lucene.internal\n   */\n  public static Reader getReaderNoHeader(DataInput in, Format format, int version,\n      int valueCount, int bitsPerValue) throws IOException {\n    switch (format) {\n      case PACKED_SINGLE_BLOCK:\n        return Packed64SingleBlock.create(in, valueCount, bitsPerValue);\n      case PACKED:\n        switch (bitsPerValue) {\n          case 8:\n            return new Direct8(in, valueCount);\n          case 16:\n            return new Direct16(in, valueCount);\n          case 32:\n            return new Direct32(in, valueCount);\n          case 64:\n            return new Direct64(in, valueCount);\n          case 24:\n            if (valueCount <= Packed8ThreeBlocks.MAX_SIZE) {\n              return new Packed8ThreeBlocks(in, valueCount);\n            }\n            break;\n          case 48:\n            if (valueCount <= Packed16ThreeBlocks.MAX_SIZE) {\n              return new Packed16ThreeBlocks(in, valueCount);\n            }\n            break;\n        }\n        return new Packed64(in, valueCount, bitsPerValue);\n      default:\n        throw new AssertionError(\"Unknown Writer format: \" + format);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8615860cb50aefb8eebca1d1b3893dbe21cf126","date":1345550448,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getReaderNoHeader(DataInput,Format,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getReaderNoHeader(DataInput,Format,int,int,int).mjava","sourceNew":"  /**\n   * Expert: Restore a {@link Reader} from a stream without reading metadata at\n   * the beginning of the stream. This method is useful to restore data from\n   * streams which have been created using\n   * {@link PackedInts#getWriterNoHeader(DataOutput, Format, int, int, int)}.\n   *\n   * @param in           the stream to read data from, positioned at the beginning of the packed values\n   * @param format       the format used to serialize\n   * @param version      the version used to serialize the data\n   * @param valueCount   how many values the stream holds\n   * @param bitsPerValue the number of bits per value\n   * @return             a Reader\n   * @throws IOException\n   * @see PackedInts#getWriterNoHeader(DataOutput, Format, int, int, int)\n   * @lucene.internal\n   */\n  public static Reader getReaderNoHeader(DataInput in, Format format, int version,\n      int valueCount, int bitsPerValue) throws IOException {\n    checkVersion(version);\n    switch (format) {\n      case PACKED_SINGLE_BLOCK:\n        return Packed64SingleBlock.create(in, valueCount, bitsPerValue);\n      case PACKED:\n        switch (bitsPerValue) {\n          case 8:\n            return new Direct8(in, valueCount);\n          case 16:\n            return new Direct16(in, valueCount);\n          case 32:\n            return new Direct32(in, valueCount);\n          case 64:\n            return new Direct64(in, valueCount);\n          case 24:\n            if (valueCount <= Packed8ThreeBlocks.MAX_SIZE) {\n              return new Packed8ThreeBlocks(in, valueCount);\n            }\n            break;\n          case 48:\n            if (valueCount <= Packed16ThreeBlocks.MAX_SIZE) {\n              return new Packed16ThreeBlocks(in, valueCount);\n            }\n            break;\n        }\n        return new Packed64(in, valueCount, bitsPerValue);\n      default:\n        throw new AssertionError(\"Unknown Writer format: \" + format);\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: Restore a {@link Reader} from a stream without reading metadata at\n   * the beginning of the stream. This method is useful to restore data from\n   * streams which have been created using\n   * {@link PackedInts#getWriterNoHeader(DataOutput, Format, int, int, int)}.\n   *\n   * @param in           the stream to read data from, positioned at the beginning of the packed values\n   * @param format       the format used to serialize\n   * @param version      the version used to serialize the data\n   * @param valueCount   how many values the stream holds\n   * @param bitsPerValue the number of bits per value\n   * @return             a Reader\n   * @throws IOException\n   * @see PackedInts#getWriterNoHeader(DataOutput, Format, int, int, int)\n   * @lucene.internal\n   */\n  public static Reader getReaderNoHeader(DataInput in, Format format, int version,\n      int valueCount, int bitsPerValue) throws IOException {\n    switch (format) {\n      case PACKED_SINGLE_BLOCK:\n        return Packed64SingleBlock.create(in, valueCount, bitsPerValue);\n      case PACKED:\n        switch (bitsPerValue) {\n          case 8:\n            return new Direct8(in, valueCount);\n          case 16:\n            return new Direct16(in, valueCount);\n          case 32:\n            return new Direct32(in, valueCount);\n          case 64:\n            return new Direct64(in, valueCount);\n          case 24:\n            if (valueCount <= Packed8ThreeBlocks.MAX_SIZE) {\n              return new Packed8ThreeBlocks(in, valueCount);\n            }\n            break;\n          case 48:\n            if (valueCount <= Packed16ThreeBlocks.MAX_SIZE) {\n              return new Packed16ThreeBlocks(in, valueCount);\n            }\n            break;\n        }\n        return new Packed64(in, valueCount, bitsPerValue);\n      default:\n        throw new AssertionError(\"Unknown Writer format: \" + format);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getReaderNoHeader(DataInput,Format,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getReaderNoHeader(DataInput,Format,int,int,int).mjava","sourceNew":"  /**\n   * Expert: Restore a {@link Reader} from a stream without reading metadata at\n   * the beginning of the stream. This method is useful to restore data from\n   * streams which have been created using\n   * {@link PackedInts#getWriterNoHeader(DataOutput, Format, int, int, int)}.\n   *\n   * @param in           the stream to read data from, positioned at the beginning of the packed values\n   * @param format       the format used to serialize\n   * @param version      the version used to serialize the data\n   * @param valueCount   how many values the stream holds\n   * @param bitsPerValue the number of bits per value\n   * @return             a Reader\n   * @throws IOException\n   * @see PackedInts#getWriterNoHeader(DataOutput, Format, int, int, int)\n   * @lucene.internal\n   */\n  public static Reader getReaderNoHeader(DataInput in, Format format, int version,\n      int valueCount, int bitsPerValue) throws IOException {\n    checkVersion(version);\n    switch (format) {\n      case PACKED_SINGLE_BLOCK:\n        return Packed64SingleBlock.create(in, valueCount, bitsPerValue);\n      case PACKED:\n        switch (bitsPerValue) {\n          case 8:\n            return new Direct8(in, valueCount);\n          case 16:\n            return new Direct16(in, valueCount);\n          case 32:\n            return new Direct32(in, valueCount);\n          case 64:\n            return new Direct64(in, valueCount);\n          case 24:\n            if (valueCount <= Packed8ThreeBlocks.MAX_SIZE) {\n              return new Packed8ThreeBlocks(in, valueCount);\n            }\n            break;\n          case 48:\n            if (valueCount <= Packed16ThreeBlocks.MAX_SIZE) {\n              return new Packed16ThreeBlocks(in, valueCount);\n            }\n            break;\n        }\n        return new Packed64(in, valueCount, bitsPerValue);\n      default:\n        throw new AssertionError(\"Unknown Writer format: \" + format);\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: Restore a {@link Reader} from a stream without reading metadata at\n   * the beginning of the stream. This method is useful to restore data from\n   * streams which have been created using\n   * {@link PackedInts#getWriterNoHeader(DataOutput, Format, int, int, int)}.\n   *\n   * @param in           the stream to read data from, positioned at the beginning of the packed values\n   * @param format       the format used to serialize\n   * @param version      the version used to serialize the data\n   * @param valueCount   how many values the stream holds\n   * @param bitsPerValue the number of bits per value\n   * @return             a Reader\n   * @throws IOException\n   * @see PackedInts#getWriterNoHeader(DataOutput, Format, int, int, int)\n   * @lucene.internal\n   */\n  public static Reader getReaderNoHeader(DataInput in, Format format, int version,\n      int valueCount, int bitsPerValue) throws IOException {\n    switch (format) {\n      case PACKED_SINGLE_BLOCK:\n        return Packed64SingleBlock.create(in, valueCount, bitsPerValue);\n      case PACKED:\n        switch (bitsPerValue) {\n          case 8:\n            return new Direct8(in, valueCount);\n          case 16:\n            return new Direct16(in, valueCount);\n          case 32:\n            return new Direct32(in, valueCount);\n          case 64:\n            return new Direct64(in, valueCount);\n          case 24:\n            if (valueCount <= Packed8ThreeBlocks.MAX_SIZE) {\n              return new Packed8ThreeBlocks(in, valueCount);\n            }\n            break;\n          case 48:\n            if (valueCount <= Packed16ThreeBlocks.MAX_SIZE) {\n              return new Packed16ThreeBlocks(in, valueCount);\n            }\n            break;\n        }\n        return new Packed64(in, valueCount, bitsPerValue);\n      default:\n        throw new AssertionError(\"Unknown Writer format: \" + format);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getReaderNoHeader(DataInput,Format,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getReaderNoHeader(DataInput,Format,int,int,int).mjava","sourceNew":"  /**\n   * Expert: Restore a {@link Reader} from a stream without reading metadata at\n   * the beginning of the stream. This method is useful to restore data from\n   * streams which have been created using\n   * {@link PackedInts#getWriterNoHeader(DataOutput, Format, int, int, int)}.\n   *\n   * @param in           the stream to read data from, positioned at the beginning of the packed values\n   * @param format       the format used to serialize\n   * @param version      the version used to serialize the data\n   * @param valueCount   how many values the stream holds\n   * @param bitsPerValue the number of bits per value\n   * @return             a Reader\n   * @throws IOException If there is a low-level I/O error\n   * @see PackedInts#getWriterNoHeader(DataOutput, Format, int, int, int)\n   * @lucene.internal\n   */\n  public static Reader getReaderNoHeader(DataInput in, Format format, int version,\n      int valueCount, int bitsPerValue) throws IOException {\n    checkVersion(version);\n    switch (format) {\n      case PACKED_SINGLE_BLOCK:\n        return Packed64SingleBlock.create(in, valueCount, bitsPerValue);\n      case PACKED:\n        switch (bitsPerValue) {\n          case 8:\n            return new Direct8(in, valueCount);\n          case 16:\n            return new Direct16(in, valueCount);\n          case 32:\n            return new Direct32(in, valueCount);\n          case 64:\n            return new Direct64(in, valueCount);\n          case 24:\n            if (valueCount <= Packed8ThreeBlocks.MAX_SIZE) {\n              return new Packed8ThreeBlocks(in, valueCount);\n            }\n            break;\n          case 48:\n            if (valueCount <= Packed16ThreeBlocks.MAX_SIZE) {\n              return new Packed16ThreeBlocks(in, valueCount);\n            }\n            break;\n        }\n        return new Packed64(in, valueCount, bitsPerValue);\n      default:\n        throw new AssertionError(\"Unknown Writer format: \" + format);\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: Restore a {@link Reader} from a stream without reading metadata at\n   * the beginning of the stream. This method is useful to restore data from\n   * streams which have been created using\n   * {@link PackedInts#getWriterNoHeader(DataOutput, Format, int, int, int)}.\n   *\n   * @param in           the stream to read data from, positioned at the beginning of the packed values\n   * @param format       the format used to serialize\n   * @param version      the version used to serialize the data\n   * @param valueCount   how many values the stream holds\n   * @param bitsPerValue the number of bits per value\n   * @return             a Reader\n   * @throws IOException\n   * @see PackedInts#getWriterNoHeader(DataOutput, Format, int, int, int)\n   * @lucene.internal\n   */\n  public static Reader getReaderNoHeader(DataInput in, Format format, int version,\n      int valueCount, int bitsPerValue) throws IOException {\n    checkVersion(version);\n    switch (format) {\n      case PACKED_SINGLE_BLOCK:\n        return Packed64SingleBlock.create(in, valueCount, bitsPerValue);\n      case PACKED:\n        switch (bitsPerValue) {\n          case 8:\n            return new Direct8(in, valueCount);\n          case 16:\n            return new Direct16(in, valueCount);\n          case 32:\n            return new Direct32(in, valueCount);\n          case 64:\n            return new Direct64(in, valueCount);\n          case 24:\n            if (valueCount <= Packed8ThreeBlocks.MAX_SIZE) {\n              return new Packed8ThreeBlocks(in, valueCount);\n            }\n            break;\n          case 48:\n            if (valueCount <= Packed16ThreeBlocks.MAX_SIZE) {\n              return new Packed16ThreeBlocks(in, valueCount);\n            }\n            break;\n        }\n        return new Packed64(in, valueCount, bitsPerValue);\n      default:\n        throw new AssertionError(\"Unknown Writer format: \" + format);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c661dcad9680b8a6ce5bf2cc583a69ec965328bc","date":1352297862,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getReaderNoHeader(DataInput,Format,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getReaderNoHeader(DataInput,Format,int,int,int).mjava","sourceNew":"  /**\n   * Expert: Restore a {@link Reader} from a stream without reading metadata at\n   * the beginning of the stream. This method is useful to restore data from\n   * streams which have been created using\n   * {@link PackedInts#getWriterNoHeader(DataOutput, Format, int, int, int)}.\n   *\n   * @param in           the stream to read data from, positioned at the beginning of the packed values\n   * @param format       the format used to serialize\n   * @param version      the version used to serialize the data\n   * @param valueCount   how many values the stream holds\n   * @param bitsPerValue the number of bits per value\n   * @return             a Reader\n   * @throws IOException If there is a low-level I/O error\n   * @see PackedInts#getWriterNoHeader(DataOutput, Format, int, int, int)\n   * @lucene.internal\n   */\n  public static Reader getReaderNoHeader(DataInput in, Format format, int version,\n      int valueCount, int bitsPerValue) throws IOException {\n    checkVersion(version);\n    switch (format) {\n      case PACKED_SINGLE_BLOCK:\n        return Packed64SingleBlock.create(in, valueCount, bitsPerValue);\n      case PACKED:\n        switch (bitsPerValue) {\n          case 8:\n            return new Direct8(version, in, valueCount);\n          case 16:\n            return new Direct16(version, in, valueCount);\n          case 32:\n            return new Direct32(version, in, valueCount);\n          case 64:\n            return new Direct64(version, in, valueCount);\n          case 24:\n            if (valueCount <= Packed8ThreeBlocks.MAX_SIZE) {\n              return new Packed8ThreeBlocks(version, in, valueCount);\n            }\n            break;\n          case 48:\n            if (valueCount <= Packed16ThreeBlocks.MAX_SIZE) {\n              return new Packed16ThreeBlocks(version, in, valueCount);\n            }\n            break;\n        }\n        return new Packed64(version, in, valueCount, bitsPerValue);\n      default:\n        throw new AssertionError(\"Unknown Writer format: \" + format);\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: Restore a {@link Reader} from a stream without reading metadata at\n   * the beginning of the stream. This method is useful to restore data from\n   * streams which have been created using\n   * {@link PackedInts#getWriterNoHeader(DataOutput, Format, int, int, int)}.\n   *\n   * @param in           the stream to read data from, positioned at the beginning of the packed values\n   * @param format       the format used to serialize\n   * @param version      the version used to serialize the data\n   * @param valueCount   how many values the stream holds\n   * @param bitsPerValue the number of bits per value\n   * @return             a Reader\n   * @throws IOException If there is a low-level I/O error\n   * @see PackedInts#getWriterNoHeader(DataOutput, Format, int, int, int)\n   * @lucene.internal\n   */\n  public static Reader getReaderNoHeader(DataInput in, Format format, int version,\n      int valueCount, int bitsPerValue) throws IOException {\n    checkVersion(version);\n    switch (format) {\n      case PACKED_SINGLE_BLOCK:\n        return Packed64SingleBlock.create(in, valueCount, bitsPerValue);\n      case PACKED:\n        switch (bitsPerValue) {\n          case 8:\n            return new Direct8(in, valueCount);\n          case 16:\n            return new Direct16(in, valueCount);\n          case 32:\n            return new Direct32(in, valueCount);\n          case 64:\n            return new Direct64(in, valueCount);\n          case 24:\n            if (valueCount <= Packed8ThreeBlocks.MAX_SIZE) {\n              return new Packed8ThreeBlocks(in, valueCount);\n            }\n            break;\n          case 48:\n            if (valueCount <= Packed16ThreeBlocks.MAX_SIZE) {\n              return new Packed16ThreeBlocks(in, valueCount);\n            }\n            break;\n        }\n        return new Packed64(in, valueCount, bitsPerValue);\n      default:\n        throw new AssertionError(\"Unknown Writer format: \" + format);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f440d3f04c39b9b18e8e48a78ef7b9f840674e22","date":1568209549,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getReaderNoHeader(DataInput,Format,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#getReaderNoHeader(DataInput,Format,int,int,int).mjava","sourceNew":"  /**\n   * Expert: Restore a {@link Reader} from a stream without reading metadata at\n   * the beginning of the stream. This method is useful to restore data from\n   * streams which have been created using\n   * {@link PackedInts#getWriterNoHeader(DataOutput, Format, int, int, int)}.\n   *\n   * @param in           the stream to read data from, positioned at the beginning of the packed values\n   * @param format       the format used to serialize\n   * @param version      the version used to serialize the data\n   * @param valueCount   how many values the stream holds\n   * @param bitsPerValue the number of bits per value\n   * @return             a Reader\n   * @throws IOException If there is a low-level I/O error\n   * @see PackedInts#getWriterNoHeader(DataOutput, Format, int, int, int)\n   * @lucene.internal\n   */\n  public static Reader getReaderNoHeader(DataInput in, Format format, int version,\n      int valueCount, int bitsPerValue) throws IOException {\n    checkVersion(version);\n    switch (format) {\n      case PACKED_SINGLE_BLOCK:\n        return Packed64SingleBlock.create(in, valueCount, bitsPerValue);\n      case PACKED:\n        return new Packed64(version, in, valueCount, bitsPerValue);\n      default:\n        throw new AssertionError(\"Unknown Writer format: \" + format);\n    }\n  }\n\n","sourceOld":"  /**\n   * Expert: Restore a {@link Reader} from a stream without reading metadata at\n   * the beginning of the stream. This method is useful to restore data from\n   * streams which have been created using\n   * {@link PackedInts#getWriterNoHeader(DataOutput, Format, int, int, int)}.\n   *\n   * @param in           the stream to read data from, positioned at the beginning of the packed values\n   * @param format       the format used to serialize\n   * @param version      the version used to serialize the data\n   * @param valueCount   how many values the stream holds\n   * @param bitsPerValue the number of bits per value\n   * @return             a Reader\n   * @throws IOException If there is a low-level I/O error\n   * @see PackedInts#getWriterNoHeader(DataOutput, Format, int, int, int)\n   * @lucene.internal\n   */\n  public static Reader getReaderNoHeader(DataInput in, Format format, int version,\n      int valueCount, int bitsPerValue) throws IOException {\n    checkVersion(version);\n    switch (format) {\n      case PACKED_SINGLE_BLOCK:\n        return Packed64SingleBlock.create(in, valueCount, bitsPerValue);\n      case PACKED:\n        switch (bitsPerValue) {\n          case 8:\n            return new Direct8(version, in, valueCount);\n          case 16:\n            return new Direct16(version, in, valueCount);\n          case 32:\n            return new Direct32(version, in, valueCount);\n          case 64:\n            return new Direct64(version, in, valueCount);\n          case 24:\n            if (valueCount <= Packed8ThreeBlocks.MAX_SIZE) {\n              return new Packed8ThreeBlocks(version, in, valueCount);\n            }\n            break;\n          case 48:\n            if (valueCount <= Packed16ThreeBlocks.MAX_SIZE) {\n              return new Packed16ThreeBlocks(version, in, valueCount);\n            }\n            break;\n        }\n        return new Packed64(version, in, valueCount, bitsPerValue);\n      default:\n        throw new AssertionError(\"Unknown Writer format: \" + format);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"001b25b42373b22a52f399dbf072f1224632e8e6":["616c1830142ff5c1ddedec1ed898733b73c8e23b","f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":["55110eb60c5105294fc2ae7912d82b750865aa58","6c975e32532333ce3b5f202388bf142a669bfdbc"],"f440d3f04c39b9b18e8e48a78ef7b9f840674e22":["c661dcad9680b8a6ce5bf2cc583a69ec965328bc"],"55110eb60c5105294fc2ae7912d82b750865aa58":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c661dcad9680b8a6ce5bf2cc583a69ec965328bc":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["6c975e32532333ce3b5f202388bf142a669bfdbc","e099715aa0cb8da9a56320dd21c24f1ad6728b03"],"6c975e32532333ce3b5f202388bf142a669bfdbc":["55110eb60c5105294fc2ae7912d82b750865aa58"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","55110eb60c5105294fc2ae7912d82b750865aa58"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":["fe33227f6805edab2036cbb80645cc4e2d1fa424","6c975e32532333ce3b5f202388bf142a669bfdbc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e099715aa0cb8da9a56320dd21c24f1ad6728b03":["70fa1c0f4d75735ff2e1485e059d9bc5efa50598"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f440d3f04c39b9b18e8e48a78ef7b9f840674e22"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["c661dcad9680b8a6ce5bf2cc583a69ec965328bc"],"001b25b42373b22a52f399dbf072f1224632e8e6":[],"616c1830142ff5c1ddedec1ed898733b73c8e23b":["001b25b42373b22a52f399dbf072f1224632e8e6"],"55110eb60c5105294fc2ae7912d82b750865aa58":["616c1830142ff5c1ddedec1ed898733b73c8e23b","6c975e32532333ce3b5f202388bf142a669bfdbc","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"f440d3f04c39b9b18e8e48a78ef7b9f840674e22":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c661dcad9680b8a6ce5bf2cc583a69ec965328bc":["f440d3f04c39b9b18e8e48a78ef7b9f840674e22"],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","001b25b42373b22a52f399dbf072f1224632e8e6"],"6c975e32532333ce3b5f202388bf142a669bfdbc":["616c1830142ff5c1ddedec1ed898733b73c8e23b","f8615860cb50aefb8eebca1d1b3893dbe21cf126","70fa1c0f4d75735ff2e1485e059d9bc5efa50598"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["70fa1c0f4d75735ff2e1485e059d9bc5efa50598"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":["e099715aa0cb8da9a56320dd21c24f1ad6728b03"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["55110eb60c5105294fc2ae7912d82b750865aa58","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"e099715aa0cb8da9a56320dd21c24f1ad6728b03":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}