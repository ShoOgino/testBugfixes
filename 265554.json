{"path":"lucene/contrib/demo/src/java/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","commits":[{"id":"790c3f61c9b891d66d919c5d10db9fa5216eb0f1","date":1274818604,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","pathOld":"lucene/src/demo/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","sourceNew":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles <root_directory>\";\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    if (INDEX_DIR.exists()) {\n      System.out.println(\"Cannot save index to '\" +INDEX_DIR+ \"' directory, please delete it first\");\n      System.exit(1);\n    }\n    \n    final File docDir = new File(args[0]);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      IndexWriter writer = new IndexWriter(FSDirectory.open(INDEX_DIR),\n          new IndexWriterConfig(Version.LUCENE_CURRENT, new StandardAnalyzer(\n              Version.LUCENE_CURRENT)).setOpenMode(OpenMode.CREATE));\n      System.out.println(\"Indexing to directory '\" +INDEX_DIR+ \"'...\");\n      indexDocs(writer, docDir);\n      System.out.println(\"Optimizing...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles <root_directory>\";\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    if (INDEX_DIR.exists()) {\n      System.out.println(\"Cannot save index to '\" +INDEX_DIR+ \"' directory, please delete it first\");\n      System.exit(1);\n    }\n    \n    final File docDir = new File(args[0]);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      IndexWriter writer = new IndexWriter(FSDirectory.open(INDEX_DIR),\n          new IndexWriterConfig(Version.LUCENE_CURRENT, new StandardAnalyzer(\n              Version.LUCENE_CURRENT)).setOpenMode(OpenMode.CREATE));\n      System.out.println(\"Indexing to directory '\" +INDEX_DIR+ \"'...\");\n      indexDocs(writer, docDir);\n      System.out.println(\"Optimizing...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81ea17596392ebd5d12741eb9e3b2516258b9413","date":1298090976,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","sourceNew":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles <root_directory>\"\n                 + \" [-index INDEX_PATH] [-docs DOCS_PATH] [-update]\\n\\n\"\n                   // TODO: Change the link with every release (or: fill in some less error-prone alternative here...)\n                 + \"See http://lucene.apache.org/java/4_0/demo.html for details.\";\n    String indexPath = \"index\";\n    String docsPath = null;\n    boolean create = true;\n    for(int i=0;i<args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        indexPath = args[i+1];\n        i++;\n      } else if (\"-docs\".equals(args[i])) {\n        docsPath = args[i+1];\n        i++;\n      } else if (\"-update\".equals(args[i])) {\n        create = false;\n      }\n    }\n\n    if (docsPath == null) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    final File docDir = new File(docsPath);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      System.out.println(\"Indexing to directory '\" + indexPath + \"'...\");\n\n      Directory dir = FSDirectory.open(new File(indexPath));\n      Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_40);\n      IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_40, analyzer);\n\n      if (create) {\n        // Create a new index in the directory, removing any\n        // previously indexed documents:\n        iwc.setOpenMode(OpenMode.CREATE);\n      } else {\n        // Add new documents to an existing index:\n        iwc.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      }\n\n      // Optional: for better indexing performance, if you\n      // are indexing many documents, increase the RAM\n      // buffer.  But if you do this, increase the max heap\n      // size to the JVM (eg add -Xmx512m or -Xmx1g):\n      //\n      // iwc.setRAMBufferSizeMB(256.0);\n\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      indexDocs(writer, docDir);\n\n      // NOTE: if you want to maximize search performance,\n      // you can optionally call optimize here.  This can be\n      // a costly operation, so generally it's only worth\n      // it when your index is relatively static (ie you're\n      // done adding documents to it):\n      //\n      // writer.optimize();\n\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles <root_directory>\";\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    if (INDEX_DIR.exists()) {\n      System.out.println(\"Cannot save index to '\" +INDEX_DIR+ \"' directory, please delete it first\");\n      System.exit(1);\n    }\n    \n    final File docDir = new File(args[0]);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      IndexWriter writer = new IndexWriter(FSDirectory.open(INDEX_DIR),\n          new IndexWriterConfig(Version.LUCENE_CURRENT, new StandardAnalyzer(\n              Version.LUCENE_CURRENT)).setOpenMode(OpenMode.CREATE));\n      System.out.println(\"Indexing to directory '\" +INDEX_DIR+ \"'...\");\n      indexDocs(writer, docDir);\n      System.out.println(\"Optimizing...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":["0bf41419d452997826ec5f17684993377be77f49"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cb9ac8e6701dc46f69f45d4f654adf75d3959977","date":1298228347,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","sourceNew":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles\"\n                 + \" [-index INDEX_PATH] [-docs DOCS_PATH] [-update]\\n\\n\"\n                   // TODO: Change the link with every release (or: fill in some less error-prone alternative here...)\n                 + \"See http://lucene.apache.org/java/4_0/demo.html for details.\";\n    String indexPath = \"index\";\n    String docsPath = null;\n    boolean create = true;\n    for(int i=0;i<args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        indexPath = args[i+1];\n        i++;\n      } else if (\"-docs\".equals(args[i])) {\n        docsPath = args[i+1];\n        i++;\n      } else if (\"-update\".equals(args[i])) {\n        create = false;\n      }\n    }\n\n    if (docsPath == null) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    final File docDir = new File(docsPath);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      System.out.println(\"Indexing to directory '\" + indexPath + \"'...\");\n\n      Directory dir = FSDirectory.open(new File(indexPath));\n      Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_40);\n      IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_40, analyzer);\n\n      if (create) {\n        // Create a new index in the directory, removing any\n        // previously indexed documents:\n        iwc.setOpenMode(OpenMode.CREATE);\n      } else {\n        // Add new documents to an existing index:\n        iwc.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      }\n\n      // Optional: for better indexing performance, if you\n      // are indexing many documents, increase the RAM\n      // buffer.  But if you do this, increase the max heap\n      // size to the JVM (eg add -Xmx512m or -Xmx1g):\n      //\n      // iwc.setRAMBufferSizeMB(256.0);\n\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      indexDocs(writer, docDir);\n\n      // NOTE: if you want to maximize search performance,\n      // you can optionally call optimize here.  This can be\n      // a costly operation, so generally it's only worth\n      // it when your index is relatively static (ie you're\n      // done adding documents to it):\n      //\n      // writer.optimize();\n\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles <root_directory>\"\n                 + \" [-index INDEX_PATH] [-docs DOCS_PATH] [-update]\\n\\n\"\n                   // TODO: Change the link with every release (or: fill in some less error-prone alternative here...)\n                 + \"See http://lucene.apache.org/java/4_0/demo.html for details.\";\n    String indexPath = \"index\";\n    String docsPath = null;\n    boolean create = true;\n    for(int i=0;i<args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        indexPath = args[i+1];\n        i++;\n      } else if (\"-docs\".equals(args[i])) {\n        docsPath = args[i+1];\n        i++;\n      } else if (\"-update\".equals(args[i])) {\n        create = false;\n      }\n    }\n\n    if (docsPath == null) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    final File docDir = new File(docsPath);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      System.out.println(\"Indexing to directory '\" + indexPath + \"'...\");\n\n      Directory dir = FSDirectory.open(new File(indexPath));\n      Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_40);\n      IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_40, analyzer);\n\n      if (create) {\n        // Create a new index in the directory, removing any\n        // previously indexed documents:\n        iwc.setOpenMode(OpenMode.CREATE);\n      } else {\n        // Add new documents to an existing index:\n        iwc.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      }\n\n      // Optional: for better indexing performance, if you\n      // are indexing many documents, increase the RAM\n      // buffer.  But if you do this, increase the max heap\n      // size to the JVM (eg add -Xmx512m or -Xmx1g):\n      //\n      // iwc.setRAMBufferSizeMB(256.0);\n\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      indexDocs(writer, docDir);\n\n      // NOTE: if you want to maximize search performance,\n      // you can optionally call optimize here.  This can be\n      // a costly operation, so generally it's only worth\n      // it when your index is relatively static (ie you're\n      // done adding documents to it):\n      //\n      // writer.optimize();\n\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","sourceNew":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles\"\n                 + \" [-index INDEX_PATH] [-docs DOCS_PATH] [-update]\\n\\n\"\n                   // TODO: Change the link with every release (or: fill in some less error-prone alternative here...)\n                 + \"See http://lucene.apache.org/java/4_0/demo.html for details.\";\n    String indexPath = \"index\";\n    String docsPath = null;\n    boolean create = true;\n    for(int i=0;i<args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        indexPath = args[i+1];\n        i++;\n      } else if (\"-docs\".equals(args[i])) {\n        docsPath = args[i+1];\n        i++;\n      } else if (\"-update\".equals(args[i])) {\n        create = false;\n      }\n    }\n\n    if (docsPath == null) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    final File docDir = new File(docsPath);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      System.out.println(\"Indexing to directory '\" + indexPath + \"'...\");\n\n      Directory dir = FSDirectory.open(new File(indexPath));\n      Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_40);\n      IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_40, analyzer);\n\n      if (create) {\n        // Create a new index in the directory, removing any\n        // previously indexed documents:\n        iwc.setOpenMode(OpenMode.CREATE);\n      } else {\n        // Add new documents to an existing index:\n        iwc.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      }\n\n      // Optional: for better indexing performance, if you\n      // are indexing many documents, increase the RAM\n      // buffer.  But if you do this, increase the max heap\n      // size to the JVM (eg add -Xmx512m or -Xmx1g):\n      //\n      // iwc.setRAMBufferSizeMB(256.0);\n\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      indexDocs(writer, docDir);\n\n      // NOTE: if you want to maximize search performance,\n      // you can optionally call optimize here.  This can be\n      // a costly operation, so generally it's only worth\n      // it when your index is relatively static (ie you're\n      // done adding documents to it):\n      //\n      // writer.optimize();\n\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles <root_directory>\";\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    if (INDEX_DIR.exists()) {\n      System.out.println(\"Cannot save index to '\" +INDEX_DIR+ \"' directory, please delete it first\");\n      System.exit(1);\n    }\n    \n    final File docDir = new File(args[0]);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      IndexWriter writer = new IndexWriter(FSDirectory.open(INDEX_DIR),\n          new IndexWriterConfig(Version.LUCENE_CURRENT, new StandardAnalyzer(\n              Version.LUCENE_CURRENT)).setOpenMode(OpenMode.CREATE));\n      System.out.println(\"Indexing to directory '\" +INDEX_DIR+ \"'...\");\n      indexDocs(writer, docDir);\n      System.out.println(\"Optimizing...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","sourceNew":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles\"\n                 + \" [-index INDEX_PATH] [-docs DOCS_PATH] [-update]\\n\\n\"\n                   // TODO: Change the link with every release (or: fill in some less error-prone alternative here...)\n                 + \"See http://lucene.apache.org/java/4_0/demo.html for details.\";\n    String indexPath = \"index\";\n    String docsPath = null;\n    boolean create = true;\n    for(int i=0;i<args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        indexPath = args[i+1];\n        i++;\n      } else if (\"-docs\".equals(args[i])) {\n        docsPath = args[i+1];\n        i++;\n      } else if (\"-update\".equals(args[i])) {\n        create = false;\n      }\n    }\n\n    if (docsPath == null) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    final File docDir = new File(docsPath);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      System.out.println(\"Indexing to directory '\" + indexPath + \"'...\");\n\n      Directory dir = FSDirectory.open(new File(indexPath));\n      Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_40);\n      IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_40, analyzer);\n\n      if (create) {\n        // Create a new index in the directory, removing any\n        // previously indexed documents:\n        iwc.setOpenMode(OpenMode.CREATE);\n      } else {\n        // Add new documents to an existing index:\n        iwc.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      }\n\n      // Optional: for better indexing performance, if you\n      // are indexing many documents, increase the RAM\n      // buffer.  But if you do this, increase the max heap\n      // size to the JVM (eg add -Xmx512m or -Xmx1g):\n      //\n      // iwc.setRAMBufferSizeMB(256.0);\n\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      indexDocs(writer, docDir);\n\n      // NOTE: if you want to maximize search performance,\n      // you can optionally call optimize here.  This can be\n      // a costly operation, so generally it's only worth\n      // it when your index is relatively static (ie you're\n      // done adding documents to it):\n      //\n      // writer.optimize();\n\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles <root_directory>\";\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    if (INDEX_DIR.exists()) {\n      System.out.println(\"Cannot save index to '\" +INDEX_DIR+ \"' directory, please delete it first\");\n      System.exit(1);\n    }\n    \n    final File docDir = new File(args[0]);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      IndexWriter writer = new IndexWriter(FSDirectory.open(INDEX_DIR),\n          new IndexWriterConfig(Version.LUCENE_CURRENT, new StandardAnalyzer(\n              Version.LUCENE_CURRENT)).setOpenMode(OpenMode.CREATE));\n      System.out.println(\"Indexing to directory '\" +INDEX_DIR+ \"'...\");\n      indexDocs(writer, docDir);\n      System.out.println(\"Optimizing...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab0c28e66467bdd245fde4abe548f20980c06466","date":1308900548,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","sourceNew":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles\"\n                 + \" [-index INDEX_PATH] [-docs DOCS_PATH] [-update]\\n\\n\"\n                 + \"This indexes the documents in DOCS_PATH, creating a Lucene index\"\n                 + \"in INDEX_PATH that can be searched with SearchFiles\";\n    String indexPath = \"index\";\n    String docsPath = null;\n    boolean create = true;\n    for(int i=0;i<args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        indexPath = args[i+1];\n        i++;\n      } else if (\"-docs\".equals(args[i])) {\n        docsPath = args[i+1];\n        i++;\n      } else if (\"-update\".equals(args[i])) {\n        create = false;\n      }\n    }\n\n    if (docsPath == null) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    final File docDir = new File(docsPath);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      System.out.println(\"Indexing to directory '\" + indexPath + \"'...\");\n\n      Directory dir = FSDirectory.open(new File(indexPath));\n      Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_40);\n      IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_40, analyzer);\n\n      if (create) {\n        // Create a new index in the directory, removing any\n        // previously indexed documents:\n        iwc.setOpenMode(OpenMode.CREATE);\n      } else {\n        // Add new documents to an existing index:\n        iwc.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      }\n\n      // Optional: for better indexing performance, if you\n      // are indexing many documents, increase the RAM\n      // buffer.  But if you do this, increase the max heap\n      // size to the JVM (eg add -Xmx512m or -Xmx1g):\n      //\n      // iwc.setRAMBufferSizeMB(256.0);\n\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      indexDocs(writer, docDir);\n\n      // NOTE: if you want to maximize search performance,\n      // you can optionally call optimize here.  This can be\n      // a costly operation, so generally it's only worth\n      // it when your index is relatively static (ie you're\n      // done adding documents to it):\n      //\n      // writer.optimize();\n\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles\"\n                 + \" [-index INDEX_PATH] [-docs DOCS_PATH] [-update]\\n\\n\"\n                   // TODO: Change the link with every release (or: fill in some less error-prone alternative here...)\n                 + \"See http://lucene.apache.org/java/4_0/demo.html for details.\";\n    String indexPath = \"index\";\n    String docsPath = null;\n    boolean create = true;\n    for(int i=0;i<args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        indexPath = args[i+1];\n        i++;\n      } else if (\"-docs\".equals(args[i])) {\n        docsPath = args[i+1];\n        i++;\n      } else if (\"-update\".equals(args[i])) {\n        create = false;\n      }\n    }\n\n    if (docsPath == null) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    final File docDir = new File(docsPath);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      System.out.println(\"Indexing to directory '\" + indexPath + \"'...\");\n\n      Directory dir = FSDirectory.open(new File(indexPath));\n      Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_40);\n      IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_40, analyzer);\n\n      if (create) {\n        // Create a new index in the directory, removing any\n        // previously indexed documents:\n        iwc.setOpenMode(OpenMode.CREATE);\n      } else {\n        // Add new documents to an existing index:\n        iwc.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      }\n\n      // Optional: for better indexing performance, if you\n      // are indexing many documents, increase the RAM\n      // buffer.  But if you do this, increase the max heap\n      // size to the JVM (eg add -Xmx512m or -Xmx1g):\n      //\n      // iwc.setRAMBufferSizeMB(256.0);\n\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      indexDocs(writer, docDir);\n\n      // NOTE: if you want to maximize search performance,\n      // you can optionally call optimize here.  This can be\n      // a costly operation, so generally it's only worth\n      // it when your index is relatively static (ie you're\n      // done adding documents to it):\n      //\n      // writer.optimize();\n\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","sourceNew":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles\"\n                 + \" [-index INDEX_PATH] [-docs DOCS_PATH] [-update]\\n\\n\"\n                 + \"This indexes the documents in DOCS_PATH, creating a Lucene index\"\n                 + \"in INDEX_PATH that can be searched with SearchFiles\";\n    String indexPath = \"index\";\n    String docsPath = null;\n    boolean create = true;\n    for(int i=0;i<args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        indexPath = args[i+1];\n        i++;\n      } else if (\"-docs\".equals(args[i])) {\n        docsPath = args[i+1];\n        i++;\n      } else if (\"-update\".equals(args[i])) {\n        create = false;\n      }\n    }\n\n    if (docsPath == null) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    final File docDir = new File(docsPath);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      System.out.println(\"Indexing to directory '\" + indexPath + \"'...\");\n\n      Directory dir = FSDirectory.open(new File(indexPath));\n      Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_40);\n      IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_40, analyzer);\n\n      if (create) {\n        // Create a new index in the directory, removing any\n        // previously indexed documents:\n        iwc.setOpenMode(OpenMode.CREATE);\n      } else {\n        // Add new documents to an existing index:\n        iwc.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      }\n\n      // Optional: for better indexing performance, if you\n      // are indexing many documents, increase the RAM\n      // buffer.  But if you do this, increase the max heap\n      // size to the JVM (eg add -Xmx512m or -Xmx1g):\n      //\n      // iwc.setRAMBufferSizeMB(256.0);\n\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      indexDocs(writer, docDir);\n\n      // NOTE: if you want to maximize search performance,\n      // you can optionally call optimize here.  This can be\n      // a costly operation, so generally it's only worth\n      // it when your index is relatively static (ie you're\n      // done adding documents to it):\n      //\n      // writer.optimize();\n\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles\"\n                 + \" [-index INDEX_PATH] [-docs DOCS_PATH] [-update]\\n\\n\"\n                   // TODO: Change the link with every release (or: fill in some less error-prone alternative here...)\n                 + \"See http://lucene.apache.org/java/4_0/demo.html for details.\";\n    String indexPath = \"index\";\n    String docsPath = null;\n    boolean create = true;\n    for(int i=0;i<args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        indexPath = args[i+1];\n        i++;\n      } else if (\"-docs\".equals(args[i])) {\n        docsPath = args[i+1];\n        i++;\n      } else if (\"-update\".equals(args[i])) {\n        create = false;\n      }\n    }\n\n    if (docsPath == null) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    final File docDir = new File(docsPath);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      System.out.println(\"Indexing to directory '\" + indexPath + \"'...\");\n\n      Directory dir = FSDirectory.open(new File(indexPath));\n      Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_40);\n      IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_40, analyzer);\n\n      if (create) {\n        // Create a new index in the directory, removing any\n        // previously indexed documents:\n        iwc.setOpenMode(OpenMode.CREATE);\n      } else {\n        // Add new documents to an existing index:\n        iwc.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      }\n\n      // Optional: for better indexing performance, if you\n      // are indexing many documents, increase the RAM\n      // buffer.  But if you do this, increase the max heap\n      // size to the JVM (eg add -Xmx512m or -Xmx1g):\n      //\n      // iwc.setRAMBufferSizeMB(256.0);\n\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      indexDocs(writer, docDir);\n\n      // NOTE: if you want to maximize search performance,\n      // you can optionally call optimize here.  This can be\n      // a costly operation, so generally it's only worth\n      // it when your index is relatively static (ie you're\n      // done adding documents to it):\n      //\n      // writer.optimize();\n\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","sourceNew":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles\"\n                 + \" [-index INDEX_PATH] [-docs DOCS_PATH] [-update]\\n\\n\"\n                 + \"This indexes the documents in DOCS_PATH, creating a Lucene index\"\n                 + \"in INDEX_PATH that can be searched with SearchFiles\";\n    String indexPath = \"index\";\n    String docsPath = null;\n    boolean create = true;\n    for(int i=0;i<args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        indexPath = args[i+1];\n        i++;\n      } else if (\"-docs\".equals(args[i])) {\n        docsPath = args[i+1];\n        i++;\n      } else if (\"-update\".equals(args[i])) {\n        create = false;\n      }\n    }\n\n    if (docsPath == null) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    final File docDir = new File(docsPath);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      System.out.println(\"Indexing to directory '\" + indexPath + \"'...\");\n\n      Directory dir = FSDirectory.open(new File(indexPath));\n      Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_40);\n      IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_40, analyzer);\n\n      if (create) {\n        // Create a new index in the directory, removing any\n        // previously indexed documents:\n        iwc.setOpenMode(OpenMode.CREATE);\n      } else {\n        // Add new documents to an existing index:\n        iwc.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      }\n\n      // Optional: for better indexing performance, if you\n      // are indexing many documents, increase the RAM\n      // buffer.  But if you do this, increase the max heap\n      // size to the JVM (eg add -Xmx512m or -Xmx1g):\n      //\n      // iwc.setRAMBufferSizeMB(256.0);\n\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      indexDocs(writer, docDir);\n\n      // NOTE: if you want to maximize search performance,\n      // you can optionally call optimize here.  This can be\n      // a costly operation, so generally it's only worth\n      // it when your index is relatively static (ie you're\n      // done adding documents to it):\n      //\n      // writer.optimize();\n\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles\"\n                 + \" [-index INDEX_PATH] [-docs DOCS_PATH] [-update]\\n\\n\"\n                   // TODO: Change the link with every release (or: fill in some less error-prone alternative here...)\n                 + \"See http://lucene.apache.org/java/4_0/demo.html for details.\";\n    String indexPath = \"index\";\n    String docsPath = null;\n    boolean create = true;\n    for(int i=0;i<args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        indexPath = args[i+1];\n        i++;\n      } else if (\"-docs\".equals(args[i])) {\n        docsPath = args[i+1];\n        i++;\n      } else if (\"-update\".equals(args[i])) {\n        create = false;\n      }\n    }\n\n    if (docsPath == null) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    final File docDir = new File(docsPath);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      System.out.println(\"Indexing to directory '\" + indexPath + \"'...\");\n\n      Directory dir = FSDirectory.open(new File(indexPath));\n      Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_40);\n      IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_40, analyzer);\n\n      if (create) {\n        // Create a new index in the directory, removing any\n        // previously indexed documents:\n        iwc.setOpenMode(OpenMode.CREATE);\n      } else {\n        // Add new documents to an existing index:\n        iwc.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      }\n\n      // Optional: for better indexing performance, if you\n      // are indexing many documents, increase the RAM\n      // buffer.  But if you do this, increase the max heap\n      // size to the JVM (eg add -Xmx512m or -Xmx1g):\n      //\n      // iwc.setRAMBufferSizeMB(256.0);\n\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      indexDocs(writer, docDir);\n\n      // NOTE: if you want to maximize search performance,\n      // you can optionally call optimize here.  This can be\n      // a costly operation, so generally it's only worth\n      // it when your index is relatively static (ie you're\n      // done adding documents to it):\n      //\n      // writer.optimize();\n\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","sourceNew":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles\"\n                 + \" [-index INDEX_PATH] [-docs DOCS_PATH] [-update]\\n\\n\"\n                 + \"This indexes the documents in DOCS_PATH, creating a Lucene index\"\n                 + \"in INDEX_PATH that can be searched with SearchFiles\";\n    String indexPath = \"index\";\n    String docsPath = null;\n    boolean create = true;\n    for(int i=0;i<args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        indexPath = args[i+1];\n        i++;\n      } else if (\"-docs\".equals(args[i])) {\n        docsPath = args[i+1];\n        i++;\n      } else if (\"-update\".equals(args[i])) {\n        create = false;\n      }\n    }\n\n    if (docsPath == null) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    final File docDir = new File(docsPath);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      System.out.println(\"Indexing to directory '\" + indexPath + \"'...\");\n\n      Directory dir = FSDirectory.open(new File(indexPath));\n      Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_40);\n      IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_40, analyzer);\n\n      if (create) {\n        // Create a new index in the directory, removing any\n        // previously indexed documents:\n        iwc.setOpenMode(OpenMode.CREATE);\n      } else {\n        // Add new documents to an existing index:\n        iwc.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      }\n\n      // Optional: for better indexing performance, if you\n      // are indexing many documents, increase the RAM\n      // buffer.  But if you do this, increase the max heap\n      // size to the JVM (eg add -Xmx512m or -Xmx1g):\n      //\n      // iwc.setRAMBufferSizeMB(256.0);\n\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      indexDocs(writer, docDir);\n\n      // NOTE: if you want to maximize search performance,\n      // you can optionally call forceMerge here.  This can be\n      // a terribly costly operation, so generally it's only\n      // worth it when your index is relatively static (ie\n      // you're done adding documents to it):\n      //\n      // writer.forceMerge(1);\n\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles\"\n                 + \" [-index INDEX_PATH] [-docs DOCS_PATH] [-update]\\n\\n\"\n                 + \"This indexes the documents in DOCS_PATH, creating a Lucene index\"\n                 + \"in INDEX_PATH that can be searched with SearchFiles\";\n    String indexPath = \"index\";\n    String docsPath = null;\n    boolean create = true;\n    for(int i=0;i<args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        indexPath = args[i+1];\n        i++;\n      } else if (\"-docs\".equals(args[i])) {\n        docsPath = args[i+1];\n        i++;\n      } else if (\"-update\".equals(args[i])) {\n        create = false;\n      }\n    }\n\n    if (docsPath == null) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    final File docDir = new File(docsPath);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      System.out.println(\"Indexing to directory '\" + indexPath + \"'...\");\n\n      Directory dir = FSDirectory.open(new File(indexPath));\n      Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_40);\n      IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_40, analyzer);\n\n      if (create) {\n        // Create a new index in the directory, removing any\n        // previously indexed documents:\n        iwc.setOpenMode(OpenMode.CREATE);\n      } else {\n        // Add new documents to an existing index:\n        iwc.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      }\n\n      // Optional: for better indexing performance, if you\n      // are indexing many documents, increase the RAM\n      // buffer.  But if you do this, increase the max heap\n      // size to the JVM (eg add -Xmx512m or -Xmx1g):\n      //\n      // iwc.setRAMBufferSizeMB(256.0);\n\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      indexDocs(writer, docDir);\n\n      // NOTE: if you want to maximize search performance,\n      // you can optionally call optimize here.  This can be\n      // a costly operation, so generally it's only worth\n      // it when your index is relatively static (ie you're\n      // done adding documents to it):\n      //\n      // writer.optimize();\n\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/IndexFiles#main(String[]).mjava","sourceNew":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles\"\n                 + \" [-index INDEX_PATH] [-docs DOCS_PATH] [-update]\\n\\n\"\n                 + \"This indexes the documents in DOCS_PATH, creating a Lucene index\"\n                 + \"in INDEX_PATH that can be searched with SearchFiles\";\n    String indexPath = \"index\";\n    String docsPath = null;\n    boolean create = true;\n    for(int i=0;i<args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        indexPath = args[i+1];\n        i++;\n      } else if (\"-docs\".equals(args[i])) {\n        docsPath = args[i+1];\n        i++;\n      } else if (\"-update\".equals(args[i])) {\n        create = false;\n      }\n    }\n\n    if (docsPath == null) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    final File docDir = new File(docsPath);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      System.out.println(\"Indexing to directory '\" + indexPath + \"'...\");\n\n      Directory dir = FSDirectory.open(new File(indexPath));\n      Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_40);\n      IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_40, analyzer);\n\n      if (create) {\n        // Create a new index in the directory, removing any\n        // previously indexed documents:\n        iwc.setOpenMode(OpenMode.CREATE);\n      } else {\n        // Add new documents to an existing index:\n        iwc.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      }\n\n      // Optional: for better indexing performance, if you\n      // are indexing many documents, increase the RAM\n      // buffer.  But if you do this, increase the max heap\n      // size to the JVM (eg add -Xmx512m or -Xmx1g):\n      //\n      // iwc.setRAMBufferSizeMB(256.0);\n\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      indexDocs(writer, docDir);\n\n      // NOTE: if you want to maximize search performance,\n      // you can optionally call forceMerge here.  This can be\n      // a terribly costly operation, so generally it's only\n      // worth it when your index is relatively static (ie\n      // you're done adding documents to it):\n      //\n      // writer.forceMerge(1);\n\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  /** Index all text files under a directory. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.IndexFiles\"\n                 + \" [-index INDEX_PATH] [-docs DOCS_PATH] [-update]\\n\\n\"\n                 + \"This indexes the documents in DOCS_PATH, creating a Lucene index\"\n                 + \"in INDEX_PATH that can be searched with SearchFiles\";\n    String indexPath = \"index\";\n    String docsPath = null;\n    boolean create = true;\n    for(int i=0;i<args.length;i++) {\n      if (\"-index\".equals(args[i])) {\n        indexPath = args[i+1];\n        i++;\n      } else if (\"-docs\".equals(args[i])) {\n        docsPath = args[i+1];\n        i++;\n      } else if (\"-update\".equals(args[i])) {\n        create = false;\n      }\n    }\n\n    if (docsPath == null) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n\n    final File docDir = new File(docsPath);\n    if (!docDir.exists() || !docDir.canRead()) {\n      System.out.println(\"Document directory '\" +docDir.getAbsolutePath()+ \"' does not exist or is not readable, please check the path\");\n      System.exit(1);\n    }\n    \n    Date start = new Date();\n    try {\n      System.out.println(\"Indexing to directory '\" + indexPath + \"'...\");\n\n      Directory dir = FSDirectory.open(new File(indexPath));\n      Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_40);\n      IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_40, analyzer);\n\n      if (create) {\n        // Create a new index in the directory, removing any\n        // previously indexed documents:\n        iwc.setOpenMode(OpenMode.CREATE);\n      } else {\n        // Add new documents to an existing index:\n        iwc.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      }\n\n      // Optional: for better indexing performance, if you\n      // are indexing many documents, increase the RAM\n      // buffer.  But if you do this, increase the max heap\n      // size to the JVM (eg add -Xmx512m or -Xmx1g):\n      //\n      // iwc.setRAMBufferSizeMB(256.0);\n\n      IndexWriter writer = new IndexWriter(dir, iwc);\n      indexDocs(writer, docDir);\n\n      // NOTE: if you want to maximize search performance,\n      // you can optionally call forceMerge here.  This can be\n      // a terribly costly operation, so generally it's only\n      // worth it when your index is relatively static (ie\n      // you're done adding documents to it):\n      //\n      // writer.forceMerge(1);\n\n      writer.close();\n\n      Date end = new Date();\n      System.out.println(end.getTime() - start.getTime() + \" total milliseconds\");\n\n    } catch (IOException e) {\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"ab0c28e66467bdd245fde4abe548f20980c06466":["cb9ac8e6701dc46f69f45d4f654adf75d3959977"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1","cb9ac8e6701dc46f69f45d4f654adf75d3959977"],"81ea17596392ebd5d12741eb9e3b2516258b9413":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["ab0c28e66467bdd245fde4abe548f20980c06466"],"2553b00f699380c64959ccb27991289aae87be2e":["cb9ac8e6701dc46f69f45d4f654adf75d3959977","ab0c28e66467bdd245fde4abe548f20980c06466"],"cb9ac8e6701dc46f69f45d4f654adf75d3959977":["81ea17596392ebd5d12741eb9e3b2516258b9413"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["cb9ac8e6701dc46f69f45d4f654adf75d3959977","ab0c28e66467bdd245fde4abe548f20980c06466"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1","cb9ac8e6701dc46f69f45d4f654adf75d3959977"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab0c28e66467bdd245fde4abe548f20980c06466":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"81ea17596392ebd5d12741eb9e3b2516258b9413":["cb9ac8e6701dc46f69f45d4f654adf75d3959977"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2553b00f699380c64959ccb27991289aae87be2e":[],"cb9ac8e6701dc46f69f45d4f654adf75d3959977":["ab0c28e66467bdd245fde4abe548f20980c06466","f1bdbf92da222965b46c0a942c3857ba56e5c638","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["f1bdbf92da222965b46c0a942c3857ba56e5c638","81ea17596392ebd5d12741eb9e3b2516258b9413","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}