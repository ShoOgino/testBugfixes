{"path":"contrib/queries/src/test/org/apache/lucene/search/FuzzyLikeThisQueryTest#testNoMatchFirstWordBug().mjava","commits":[{"id":"f3055a6d1420d229175009d777f2b781b4e3e97f","date":1222465495,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/FuzzyLikeThisQueryTest#testNoMatchFirstWordBug().mjava","pathOld":"/dev/null","sourceNew":"\t//Test bug found when first query word does not match anything\r\n\tpublic void testNoMatchFirstWordBug() throws Throwable\r\n\t{\r\n\t\tFuzzyLikeThisQuery flt=new FuzzyLikeThisQuery(10,analyzer);\r\n\t\tflt.addTerms(\"fernando smith\", \"name\", 0.3f, 1);\r\n\t\tQuery q=flt.rewrite(searcher.getIndexReader());\r\n\t\tHashSet queryTerms=new HashSet();\r\n\t\tq.extractTerms(queryTerms);\r\n\t\tassertTrue(\"Should have variant smith\",queryTerms.contains(new Term(\"name\",\"smith\")));\r\n\t\tTopDocs topDocs = searcher.search(flt, 1);\r\n\t\tScoreDoc[] sd = topDocs.scoreDocs;\r\n\t\tassertTrue(\"score docs must match 1 doc\", (sd!=null)&&(sd.length>0));\r\n\t\tDocument doc=searcher.doc(sd[0].doc);\r\n\t\tassertEquals(\"Should match most similar when using 2 words\", \"2\",doc.get(\"id\"));\r\n\t}\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a361a621b184d9b73c9c9a37323a9845b8f8260","date":1226370946,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/FuzzyLikeThisQueryTest#testNoMatchFirstWordBug().mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/FuzzyLikeThisQueryTest#testNoMatchFirstWordBug().mjava","sourceNew":"\t//Test bug found when first query word does not match anything\n\tpublic void testNoMatchFirstWordBug() throws Throwable\n\t{\n\t\tFuzzyLikeThisQuery flt=new FuzzyLikeThisQuery(10,analyzer);\n\t\tflt.addTerms(\"fernando smith\", \"name\", 0.3f, 1);\n\t\tQuery q=flt.rewrite(searcher.getIndexReader());\n\t\tHashSet queryTerms=new HashSet();\n\t\tq.extractTerms(queryTerms);\n\t\tassertTrue(\"Should have variant smith\",queryTerms.contains(new Term(\"name\",\"smith\")));\n\t\tTopDocs topDocs = searcher.search(flt, 1);\n\t\tScoreDoc[] sd = topDocs.scoreDocs;\n\t\tassertTrue(\"score docs must match 1 doc\", (sd!=null)&&(sd.length>0));\n\t\tDocument doc=searcher.doc(sd[0].doc);\n\t\tassertEquals(\"Should match most similar when using 2 words\", \"2\",doc.get(\"id\"));\n\t}\n\n","sourceOld":"\t//Test bug found when first query word does not match anything\r\n\tpublic void testNoMatchFirstWordBug() throws Throwable\r\n\t{\r\n\t\tFuzzyLikeThisQuery flt=new FuzzyLikeThisQuery(10,analyzer);\r\n\t\tflt.addTerms(\"fernando smith\", \"name\", 0.3f, 1);\r\n\t\tQuery q=flt.rewrite(searcher.getIndexReader());\r\n\t\tHashSet queryTerms=new HashSet();\r\n\t\tq.extractTerms(queryTerms);\r\n\t\tassertTrue(\"Should have variant smith\",queryTerms.contains(new Term(\"name\",\"smith\")));\r\n\t\tTopDocs topDocs = searcher.search(flt, 1);\r\n\t\tScoreDoc[] sd = topDocs.scoreDocs;\r\n\t\tassertTrue(\"score docs must match 1 doc\", (sd!=null)&&(sd.length>0));\r\n\t\tDocument doc=searcher.doc(sd[0].doc);\r\n\t\tassertEquals(\"Should match most similar when using 2 words\", \"2\",doc.get(\"id\"));\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7848880b3c06f09f0f3ac50d0854b16efb0b815e","date":1260006234,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/FuzzyLikeThisQueryTest#testNoMatchFirstWordBug().mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/FuzzyLikeThisQueryTest#testNoMatchFirstWordBug().mjava","sourceNew":"\t//Test bug found when first query word does not match anything\n\tpublic void testNoMatchFirstWordBug() throws Throwable\n\t{\n\t\tFuzzyLikeThisQuery flt=new FuzzyLikeThisQuery(10,analyzer);\n\t\tflt.addTerms(\"fernando smith\", \"name\", 0.3f, 1);\n\t\tQuery q=flt.rewrite(searcher.getIndexReader());\n\t\tHashSet<Term> queryTerms=new HashSet<Term>();\n\t\tq.extractTerms(queryTerms);\n\t\tassertTrue(\"Should have variant smith\",queryTerms.contains(new Term(\"name\",\"smith\")));\n\t\tTopDocs topDocs = searcher.search(flt, 1);\n\t\tScoreDoc[] sd = topDocs.scoreDocs;\n\t\tassertTrue(\"score docs must match 1 doc\", (sd!=null)&&(sd.length>0));\n\t\tDocument doc=searcher.doc(sd[0].doc);\n\t\tassertEquals(\"Should match most similar when using 2 words\", \"2\",doc.get(\"id\"));\n\t}\n\n","sourceOld":"\t//Test bug found when first query word does not match anything\n\tpublic void testNoMatchFirstWordBug() throws Throwable\n\t{\n\t\tFuzzyLikeThisQuery flt=new FuzzyLikeThisQuery(10,analyzer);\n\t\tflt.addTerms(\"fernando smith\", \"name\", 0.3f, 1);\n\t\tQuery q=flt.rewrite(searcher.getIndexReader());\n\t\tHashSet queryTerms=new HashSet();\n\t\tq.extractTerms(queryTerms);\n\t\tassertTrue(\"Should have variant smith\",queryTerms.contains(new Term(\"name\",\"smith\")));\n\t\tTopDocs topDocs = searcher.search(flt, 1);\n\t\tScoreDoc[] sd = topDocs.scoreDocs;\n\t\tassertTrue(\"score docs must match 1 doc\", (sd!=null)&&(sd.length>0));\n\t\tDocument doc=searcher.doc(sd[0].doc);\n\t\tassertEquals(\"Should match most similar when using 2 words\", \"2\",doc.get(\"id\"));\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/FuzzyLikeThisQueryTest#testNoMatchFirstWordBug().mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/FuzzyLikeThisQueryTest#testNoMatchFirstWordBug().mjava","sourceNew":"\t//Test bug found when first query word does not match anything\n\tpublic void testNoMatchFirstWordBug() throws Throwable\n\t{\n\t\tFuzzyLikeThisQuery flt=new FuzzyLikeThisQuery(10,analyzer);\n\t\tflt.addTerms(\"fernando smith\", \"name\", 0.3f, 1);\n\t\tQuery q=flt.rewrite(searcher.getIndexReader());\n\t\tHashSet<Term> queryTerms=new HashSet<Term>();\n\t\tq.extractTerms(queryTerms);\n\t\tassertTrue(\"Should have variant smith\",queryTerms.contains(new Term(\"name\",\"smith\")));\n\t\tTopDocs topDocs = searcher.search(flt, 1);\n\t\tScoreDoc[] sd = topDocs.scoreDocs;\n\t\tassertTrue(\"score docs must match 1 doc\", (sd!=null)&&(sd.length>0));\n\t\tDocument doc=searcher.doc(sd[0].doc);\n\t\tassertEquals(\"Should match most similar when using 2 words\", \"2\",doc.get(\"id\"));\n\t}\n\n","sourceOld":"\t//Test bug found when first query word does not match anything\n\tpublic void testNoMatchFirstWordBug() throws Throwable\n\t{\n\t\tFuzzyLikeThisQuery flt=new FuzzyLikeThisQuery(10,analyzer);\n\t\tflt.addTerms(\"fernando smith\", \"name\", 0.3f, 1);\n\t\tQuery q=flt.rewrite(searcher.getIndexReader());\n\t\tHashSet<Term> queryTerms=new HashSet<Term>();\n\t\tq.extractTerms(queryTerms);\n\t\tassertTrue(\"Should have variant smith\",queryTerms.contains(new Term(\"name\",\"smith\")));\n\t\tTopDocs topDocs = searcher.search(flt, 1);\n\t\tScoreDoc[] sd = topDocs.scoreDocs;\n\t\tassertTrue(\"score docs must match 1 doc\", (sd!=null)&&(sd.length>0));\n\t\tDocument doc=searcher.doc(sd[0].doc);\n\t\tassertEquals(\"Should match most similar when using 2 words\", \"2\",doc.get(\"id\"));\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f3055a6d1420d229175009d777f2b781b4e3e97f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["f3055a6d1420d229175009d777f2b781b4e3e97f"],"7848880b3c06f09f0f3ac50d0854b16efb0b815e":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7848880b3c06f09f0f3ac50d0854b16efb0b815e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f3055a6d1420d229175009d777f2b781b4e3e97f"],"f3055a6d1420d229175009d777f2b781b4e3e97f":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["7848880b3c06f09f0f3ac50d0854b16efb0b815e"],"7848880b3c06f09f0f3ac50d0854b16efb0b815e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}