{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","commits":[{"id":"222164711a842fa41879d91a9ad84966883280c5","date":1280421524,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandomStoredFields() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    Random rand = newRandom();\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(rand, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    final int docCount = 200*RANDOM_MULTIPLIER;\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n    String[][] fields = new String[fieldCount][];\n    for(int i=0;i<fieldCount;i++) {\n      fields[i] = new String[docCount];\n    }\n\n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n    \n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(new Field(\"f\"+field, s, Field.Store.YES, Field.Index.NO));\n        } else {\n          s = null;\n        }\n        fields[field][i] = s;\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n    }\n\n    for(int x=0;x<2;x++) {\n      IndexReader r = w.getReader();\n\n      for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n        int docID = rand.nextInt(docCount);\n        Document doc = r.document(docID);\n        for(int i=0;i<fieldCount;i++) {\n          assertEquals(fields[i][docID], doc.get(\"f\"+i));\n        }\n      }\n      r.close();\n      w.optimize();\n    }\n    w.close();\n\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc59f76ab05132dcb816d613956c236017659fbe","date":1280776850,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","sourceNew":"  public void testRandomStoredFields() throws IOException {\n    File index = _TestUtil.getTempDir(\"lucenerandfields\");\n    Directory dir = FSDirectory.open(index);\n    try {\n      Random rand = newRandom();\n      RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(rand, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n      final int docCount = 200*RANDOM_MULTIPLIER;\n      final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n      String[][] fields = new String[fieldCount][];\n      for(int i=0;i<fieldCount;i++) {\n        fields[i] = new String[docCount];\n      }\n\n      final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n      for(int i=0;i<fieldCount;i++) {\n        fieldIDs.add(i);\n      }\n    \n      for(int i=0;i<docCount;i++) {\n        Document doc = new Document();\n        for(int field: fieldIDs) {\n          final String s;\n          if (rand.nextInt(4) != 3) {\n            s = _TestUtil.randomUnicodeString(rand, 1000);\n            doc.add(new Field(\"f\"+field, s, Field.Store.YES, Field.Index.NO));\n          } else {\n            s = null;\n          }\n          fields[field][i] = s;\n        }\n        w.addDocument(doc);\n        if (rand.nextInt(50) == 17) {\n          // mixup binding of field name -> Number every so often\n          Collections.shuffle(fieldIDs);\n        }\n      }\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n\n        for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n          int docID = rand.nextInt(docCount);\n          Document doc = r.document(docID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(fields[i][docID], doc.get(\"f\"+i));\n          }\n        }\n        r.close();\n        w.optimize();\n      }\n      w.close();\n\n    } finally {\n      dir.close();\n      _TestUtil.rmDir(index);\n    }\n  }\n\n","sourceOld":"  public void testRandomStoredFields() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    Random rand = newRandom();\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(rand, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    final int docCount = 200*RANDOM_MULTIPLIER;\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n    String[][] fields = new String[fieldCount][];\n    for(int i=0;i<fieldCount;i++) {\n      fields[i] = new String[docCount];\n    }\n\n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n    \n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(new Field(\"f\"+field, s, Field.Store.YES, Field.Index.NO));\n        } else {\n          s = null;\n        }\n        fields[field][i] = s;\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n    }\n\n    for(int x=0;x<2;x++) {\n      IndexReader r = w.getReader();\n\n      for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n        int docID = rand.nextInt(docCount);\n        Document doc = r.document(docID);\n        for(int i=0;i<fieldCount;i++) {\n          assertEquals(fields[i][docID], doc.get(\"f\"+i));\n        }\n      }\n      r.close();\n      w.optimize();\n    }\n    w.close();\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["1ff72a5dbafa0f42676070a2f46223b2d0e122c8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"57d5dad190acf63cb17e05df3882de97b1105c1c","date":1280877729,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","sourceNew":"  public void testRandomStoredFields() throws IOException {\n    File index = _TestUtil.getTempDir(\"lucenerandfields\");\n    Directory dir = FSDirectory.open(index);\n    // nocommit seed\n    //Random rand = newRandom(1864464794067677128L);\n    Random rand = newRandom();\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(rand, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setInfoStream(System.out);\n    //w.w.setUseCompoundFile(false);\n    final int docCount = 200*RANDOM_MULTIPLIER;\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n      \n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n    \n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(new Field(\"f\"+field, s, Field.Store.YES, Field.Index.NO));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = new IndexSearcher(r);\n\n        for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        r.close();\n        w.optimize();\n      }\n    }\n    w.close();\n    dir.close();\n    _TestUtil.rmDir(index);\n  }\n\n","sourceOld":"  public void testRandomStoredFields() throws IOException {\n    File index = _TestUtil.getTempDir(\"lucenerandfields\");\n    Directory dir = FSDirectory.open(index);\n    try {\n      Random rand = newRandom();\n      RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(rand, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n      final int docCount = 200*RANDOM_MULTIPLIER;\n      final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n      String[][] fields = new String[fieldCount][];\n      for(int i=0;i<fieldCount;i++) {\n        fields[i] = new String[docCount];\n      }\n\n      final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n      for(int i=0;i<fieldCount;i++) {\n        fieldIDs.add(i);\n      }\n    \n      for(int i=0;i<docCount;i++) {\n        Document doc = new Document();\n        for(int field: fieldIDs) {\n          final String s;\n          if (rand.nextInt(4) != 3) {\n            s = _TestUtil.randomUnicodeString(rand, 1000);\n            doc.add(new Field(\"f\"+field, s, Field.Store.YES, Field.Index.NO));\n          } else {\n            s = null;\n          }\n          fields[field][i] = s;\n        }\n        w.addDocument(doc);\n        if (rand.nextInt(50) == 17) {\n          // mixup binding of field name -> Number every so often\n          Collections.shuffle(fieldIDs);\n        }\n      }\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n\n        for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n          int docID = rand.nextInt(docCount);\n          Document doc = r.document(docID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(fields[i][docID], doc.get(\"f\"+i));\n          }\n        }\n        r.close();\n        w.optimize();\n      }\n      w.close();\n\n    } finally {\n      dir.close();\n      _TestUtil.rmDir(index);\n    }\n  }\n\n","bugFix":null,"bugIntro":["1ff72a5dbafa0f42676070a2f46223b2d0e122c8","a78a90fc9701e511308346ea29f4f5e548bb39fe","103857ec20f79f31c7a00310a91ed001b9a6ef17"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"32dc7337f7ea413653ffe4f522bf8cc7ef86ab82","date":1280878018,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","sourceNew":"  public void testRandomStoredFields() throws IOException {\n    File index = _TestUtil.getTempDir(\"lucenerandfields\");\n    Directory dir = FSDirectory.open(index);\n    Random rand = newRandom();\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(rand, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setInfoStream(System.out);\n    //w.w.setUseCompoundFile(false);\n    final int docCount = 200*RANDOM_MULTIPLIER;\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n      \n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n    \n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(new Field(\"f\"+field, s, Field.Store.YES, Field.Index.NO));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = new IndexSearcher(r);\n\n        for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        r.close();\n        w.optimize();\n      }\n    }\n    w.close();\n    dir.close();\n    _TestUtil.rmDir(index);\n  }\n\n","sourceOld":"  public void testRandomStoredFields() throws IOException {\n    File index = _TestUtil.getTempDir(\"lucenerandfields\");\n    Directory dir = FSDirectory.open(index);\n    // nocommit seed\n    //Random rand = newRandom(1864464794067677128L);\n    Random rand = newRandom();\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(rand, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setInfoStream(System.out);\n    //w.w.setUseCompoundFile(false);\n    final int docCount = 200*RANDOM_MULTIPLIER;\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n      \n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n    \n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(new Field(\"f\"+field, s, Field.Store.YES, Field.Index.NO));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = new IndexSearcher(r);\n\n        for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        r.close();\n        w.optimize();\n      }\n    }\n    w.close();\n    dir.close();\n    _TestUtil.rmDir(index);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","sourceNew":"  public void testRandomStoredFields() throws IOException {\n    File index = _TestUtil.getTempDir(\"lucenerandfields\");\n    Directory dir = FSDirectory.open(index);\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(rand, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setInfoStream(System.out);\n    //w.w.setUseCompoundFile(false);\n    final int docCount = 200*RANDOM_MULTIPLIER;\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n      \n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n    \n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(new Field(\"f\"+field, s, Field.Store.YES, Field.Index.NO));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = new IndexSearcher(r);\n\n        for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        r.close();\n        w.optimize();\n      }\n    }\n    w.close();\n    dir.close();\n    _TestUtil.rmDir(index);\n  }\n\n","sourceOld":"  public void testRandomStoredFields() throws IOException {\n    File index = _TestUtil.getTempDir(\"lucenerandfields\");\n    Directory dir = FSDirectory.open(index);\n    Random rand = newRandom();\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(rand, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setInfoStream(System.out);\n    //w.w.setUseCompoundFile(false);\n    final int docCount = 200*RANDOM_MULTIPLIER;\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n      \n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n    \n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(new Field(\"f\"+field, s, Field.Store.YES, Field.Index.NO));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = new IndexSearcher(r);\n\n        for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        r.close();\n        w.optimize();\n      }\n    }\n    w.close();\n    dir.close();\n    _TestUtil.rmDir(index);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7d1d97c3f42de4c0f8fbcd661a7527ecfab69351","date":1283938380,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","sourceNew":"  public void testRandomStoredFields() throws IOException {\n    File index = _TestUtil.getTempDir(\"lucenerandfields\");\n    Directory dir = FSDirectory.open(index);\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(rand, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setInfoStream(System.out);\n    //w.w.setUseCompoundFile(false);\n    if (VERBOSE) {\n      w.w.setInfoStream(System.out);\n    }\n    final int docCount = 200*RANDOM_MULTIPLIER;\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n      \n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n    \n    if (VERBOSE) {\n      System.out.println(\"TEST: build index docCount=\" + docCount);\n    }\n\n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(new Field(\"f\"+field, s, Field.Store.YES, Field.Index.NO));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete doc \" + delID);\n        }\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + docs.size() + \" docs in index; now load fields\");\n    }\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = new IndexSearcher(r);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle x=\" + x + \" r=\" + r);\n        }\n\n        for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        r.close();\n        w.optimize();\n      }\n    }\n    w.close();\n    dir.close();\n    _TestUtil.rmDir(index);\n  }\n\n","sourceOld":"  public void testRandomStoredFields() throws IOException {\n    File index = _TestUtil.getTempDir(\"lucenerandfields\");\n    Directory dir = FSDirectory.open(index);\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(rand, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setInfoStream(System.out);\n    //w.w.setUseCompoundFile(false);\n    final int docCount = 200*RANDOM_MULTIPLIER;\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n      \n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n    \n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(new Field(\"f\"+field, s, Field.Store.YES, Field.Index.NO));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = new IndexSearcher(r);\n\n        for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        r.close();\n        w.optimize();\n      }\n    }\n    w.close();\n    dir.close();\n    _TestUtil.rmDir(index);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1ff72a5dbafa0f42676070a2f46223b2d0e122c8","date":1284029415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","sourceNew":"  public void testRandomStoredFields() throws IOException {\n    Directory dir = newDirectory(random);\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(rand, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setInfoStream(System.out);\n    //w.w.setUseCompoundFile(false);\n    if (VERBOSE) {\n      w.w.setInfoStream(System.out);\n    }\n    final int docCount = 200*RANDOM_MULTIPLIER;\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n      \n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n    \n    if (VERBOSE) {\n      System.out.println(\"TEST: build index docCount=\" + docCount);\n    }\n\n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(new Field(\"f\"+field, s, Field.Store.YES, Field.Index.NO));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete doc \" + delID);\n        }\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + docs.size() + \" docs in index; now load fields\");\n    }\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = new IndexSearcher(r);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle x=\" + x + \" r=\" + r);\n        }\n\n        for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        r.close();\n        w.optimize();\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomStoredFields() throws IOException {\n    File index = _TestUtil.getTempDir(\"lucenerandfields\");\n    Directory dir = FSDirectory.open(index);\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(rand, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setInfoStream(System.out);\n    //w.w.setUseCompoundFile(false);\n    if (VERBOSE) {\n      w.w.setInfoStream(System.out);\n    }\n    final int docCount = 200*RANDOM_MULTIPLIER;\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n      \n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n    \n    if (VERBOSE) {\n      System.out.println(\"TEST: build index docCount=\" + docCount);\n    }\n\n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(new Field(\"f\"+field, s, Field.Store.YES, Field.Index.NO));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete doc \" + delID);\n        }\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + docs.size() + \" docs in index; now load fields\");\n    }\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = new IndexSearcher(r);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle x=\" + x + \" r=\" + r);\n        }\n\n        for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        r.close();\n        w.optimize();\n      }\n    }\n    w.close();\n    dir.close();\n    _TestUtil.rmDir(index);\n  }\n\n","bugFix":["57d5dad190acf63cb17e05df3882de97b1105c1c","fc59f76ab05132dcb816d613956c236017659fbe"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","sourceNew":"  public void testRandomStoredFields() throws IOException {\n    Directory dir = newDirectory();\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setInfoStream(System.out);\n    //w.w.setUseCompoundFile(false);\n    if (VERBOSE) {\n      w.w.setInfoStream(System.out);\n    }\n    final int docCount = 200*RANDOM_MULTIPLIER;\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n      \n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n    \n    if (VERBOSE) {\n      System.out.println(\"TEST: build index docCount=\" + docCount);\n    }\n\n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(new Field(\"f\"+field, s, Field.Store.YES, Field.Index.NO));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete doc \" + delID);\n        }\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + docs.size() + \" docs in index; now load fields\");\n    }\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = new IndexSearcher(r);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle x=\" + x + \" r=\" + r);\n        }\n\n        for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        r.close();\n        w.optimize();\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomStoredFields() throws IOException {\n    Directory dir = newDirectory(random);\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(rand, TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setInfoStream(System.out);\n    //w.w.setUseCompoundFile(false);\n    if (VERBOSE) {\n      w.w.setInfoStream(System.out);\n    }\n    final int docCount = 200*RANDOM_MULTIPLIER;\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n      \n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n    \n    if (VERBOSE) {\n      System.out.println(\"TEST: build index docCount=\" + docCount);\n    }\n\n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(new Field(\"f\"+field, s, Field.Store.YES, Field.Index.NO));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete doc \" + delID);\n        }\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + docs.size() + \" docs in index; now load fields\");\n    }\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = new IndexSearcher(r);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle x=\" + x + \" r=\" + r);\n        }\n\n        for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        r.close();\n        w.optimize();\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","sourceNew":"  public void testRandomStoredFields() throws IOException {\n    Directory dir = newDirectory();\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setInfoStream(System.out);\n    //w.w.setUseCompoundFile(false);\n    if (VERBOSE) {\n      w.w.setInfoStream(System.out);\n    }\n    final int docCount = 200*RANDOM_MULTIPLIER;\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n      \n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n    \n    if (VERBOSE) {\n      System.out.println(\"TEST: build index docCount=\" + docCount);\n    }\n\n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(newField(\"f\"+field, s, Field.Store.YES, Field.Index.NO));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete doc \" + delID);\n        }\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + docs.size() + \" docs in index; now load fields\");\n    }\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = new IndexSearcher(r);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle x=\" + x + \" r=\" + r);\n        }\n\n        for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        r.close();\n        w.optimize();\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomStoredFields() throws IOException {\n    Directory dir = newDirectory();\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setInfoStream(System.out);\n    //w.w.setUseCompoundFile(false);\n    if (VERBOSE) {\n      w.w.setInfoStream(System.out);\n    }\n    final int docCount = 200*RANDOM_MULTIPLIER;\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n      \n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n    \n    if (VERBOSE) {\n      System.out.println(\"TEST: build index docCount=\" + docCount);\n    }\n\n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(new Field(\"f\"+field, s, Field.Store.YES, Field.Index.NO));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete doc \" + delID);\n        }\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + docs.size() + \" docs in index; now load fields\");\n    }\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = new IndexSearcher(r);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle x=\" + x + \" r=\" + r);\n        }\n\n        for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        r.close();\n        w.optimize();\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandomStoredFields() throws IOException {\n    Directory dir = newDirectory();\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setInfoStream(System.out);\n    //w.w.setUseCompoundFile(false);\n    if (VERBOSE) {\n      w.w.setInfoStream(System.out);\n    }\n    final int docCount = 200*RANDOM_MULTIPLIER;\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n\n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: build index docCount=\" + docCount);\n    }\n\n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(newField(\"f\"+field, s, Field.Store.YES, Field.Index.NO));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete doc \" + delID);\n        }\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + docs.size() + \" docs in index; now load fields\");\n    }\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = new IndexSearcher(r);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle x=\" + x + \" r=\" + r);\n        }\n\n        for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        r.close();\n        w.optimize();\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","sourceNew":"  public void testRandomStoredFields() throws IOException {\n    Directory dir = newDirectory();\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setInfoStream(System.out);\n    //w.w.setUseCompoundFile(false);\n    if (VERBOSE) {\n      w.w.setInfoStream(System.out);\n    }\n    final int docCount = 200*RANDOM_MULTIPLIER;\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n      \n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n    \n    if (VERBOSE) {\n      System.out.println(\"TEST: build index docCount=\" + docCount);\n    }\n\n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(newField(\"f\"+field, s, Field.Store.YES, Field.Index.NO));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete doc \" + delID);\n        }\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + docs.size() + \" docs in index; now load fields\");\n    }\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = newSearcher(r);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle x=\" + x + \" r=\" + r);\n        }\n\n        for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        s.close();\n        r.close();\n        w.optimize();\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomStoredFields() throws IOException {\n    Directory dir = newDirectory();\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setInfoStream(System.out);\n    //w.w.setUseCompoundFile(false);\n    if (VERBOSE) {\n      w.w.setInfoStream(System.out);\n    }\n    final int docCount = 200*RANDOM_MULTIPLIER;\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n      \n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n    \n    if (VERBOSE) {\n      System.out.println(\"TEST: build index docCount=\" + docCount);\n    }\n\n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(newField(\"f\"+field, s, Field.Store.YES, Field.Index.NO));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete doc \" + delID);\n        }\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + docs.size() + \" docs in index; now load fields\");\n    }\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = new IndexSearcher(r);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle x=\" + x + \" r=\" + r);\n        }\n\n        for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        r.close();\n        w.optimize();\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","sourceNew":"  public void testRandomStoredFields() throws IOException {\n    Directory dir = newDirectory();\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setInfoStream(System.out);\n    //w.w.setUseCompoundFile(false);\n    if (VERBOSE) {\n      w.w.setInfoStream(System.out);\n    }\n    final int docCount = 200*RANDOM_MULTIPLIER;\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n      \n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n    \n    if (VERBOSE) {\n      System.out.println(\"TEST: build index docCount=\" + docCount);\n    }\n\n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(newField(\"f\"+field, s, Field.Store.YES, Field.Index.NO));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete doc \" + delID);\n        }\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + docs.size() + \" docs in index; now load fields\");\n    }\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = newSearcher(r);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle x=\" + x + \" r=\" + r);\n        }\n\n        for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        s.close();\n        r.close();\n        w.optimize();\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomStoredFields() throws IOException {\n    Directory dir = newDirectory();\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setInfoStream(System.out);\n    //w.w.setUseCompoundFile(false);\n    if (VERBOSE) {\n      w.w.setInfoStream(System.out);\n    }\n    final int docCount = 200*RANDOM_MULTIPLIER;\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n      \n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n    \n    if (VERBOSE) {\n      System.out.println(\"TEST: build index docCount=\" + docCount);\n    }\n\n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(newField(\"f\"+field, s, Field.Store.YES, Field.Index.NO));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete doc \" + delID);\n        }\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + docs.size() + \" docs in index; now load fields\");\n    }\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = new IndexSearcher(r);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle x=\" + x + \" r=\" + r);\n        }\n\n        for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        r.close();\n        w.optimize();\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762","date":1297938719,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","sourceNew":"  public void testRandomStoredFields() throws IOException {\n    Directory dir = newDirectory();\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setInfoStream(System.out);\n    //w.w.setUseCompoundFile(false);\n    if (VERBOSE) {\n      w.w.setInfoStream(System.out);\n    }\n    final int docCount = 200*RANDOM_MULTIPLIER;\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n      \n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n    \n    if (VERBOSE) {\n      System.out.println(\"TEST: build index docCount=\" + docCount);\n    }\n\n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n      if (VERBOSE) {\n        System.out.println(\"TEST: add doc id=\" + id);\n      }\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(newField(\"f\"+field, s, Field.Store.YES, Field.Index.NO));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete doc id=\" + delID);\n        }\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + docs.size() + \" docs in index; now load fields\");\n    }\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = newSearcher(r);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle x=\" + x + \" r=\" + r);\n        }\n\n        for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          if (VERBOSE) {\n            System.out.println(\"TEST: test id=\" + testID);\n          }\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        s.close();\n        r.close();\n        w.optimize();\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomStoredFields() throws IOException {\n    Directory dir = newDirectory();\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setInfoStream(System.out);\n    //w.w.setUseCompoundFile(false);\n    if (VERBOSE) {\n      w.w.setInfoStream(System.out);\n    }\n    final int docCount = 200*RANDOM_MULTIPLIER;\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n      \n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n    \n    if (VERBOSE) {\n      System.out.println(\"TEST: build index docCount=\" + docCount);\n    }\n\n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(newField(\"f\"+field, s, Field.Store.YES, Field.Index.NO));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete doc \" + delID);\n        }\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + docs.size() + \" docs in index; now load fields\");\n    }\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = newSearcher(r);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle x=\" + x + \" r=\" + r);\n        }\n\n        for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        s.close();\n        r.close();\n        w.optimize();\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","sourceNew":"  public void testRandomStoredFields() throws IOException {\n    Directory dir = newDirectory();\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setInfoStream(System.out);\n    //w.w.setUseCompoundFile(false);\n    if (VERBOSE) {\n      w.w.setInfoStream(System.out);\n    }\n    final int docCount = 200*RANDOM_MULTIPLIER;\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n      \n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n    \n    if (VERBOSE) {\n      System.out.println(\"TEST: build index docCount=\" + docCount);\n    }\n\n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n      if (VERBOSE) {\n        System.out.println(\"TEST: add doc id=\" + id);\n      }\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(newField(\"f\"+field, s, Field.Store.YES, Field.Index.NO));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete doc id=\" + delID);\n        }\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + docs.size() + \" docs in index; now load fields\");\n    }\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = newSearcher(r);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle x=\" + x + \" r=\" + r);\n        }\n\n        for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          if (VERBOSE) {\n            System.out.println(\"TEST: test id=\" + testID);\n          }\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        s.close();\n        r.close();\n        w.optimize();\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomStoredFields() throws IOException {\n    Directory dir = newDirectory();\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setInfoStream(System.out);\n    //w.w.setUseCompoundFile(false);\n    if (VERBOSE) {\n      w.w.setInfoStream(System.out);\n    }\n    final int docCount = 200*RANDOM_MULTIPLIER;\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n      \n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n    \n    if (VERBOSE) {\n      System.out.println(\"TEST: build index docCount=\" + docCount);\n    }\n\n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(newField(\"f\"+field, s, Field.Store.YES, Field.Index.NO));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete doc \" + delID);\n        }\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + docs.size() + \" docs in index; now load fields\");\n    }\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = newSearcher(r);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle x=\" + x + \" r=\" + r);\n        }\n\n        for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        s.close();\n        r.close();\n        w.optimize();\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","sourceNew":"  public void testRandomStoredFields() throws IOException {\n    Directory dir = newDirectory();\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setInfoStream(System.out);\n    //w.w.setUseCompoundFile(false);\n    if (VERBOSE) {\n      w.w.setInfoStream(System.out);\n    }\n    final int docCount = 200*RANDOM_MULTIPLIER;\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n\n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: build index docCount=\" + docCount);\n    }\n\n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n      if (VERBOSE) {\n        System.out.println(\"TEST: add doc id=\" + id);\n      }\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(newField(\"f\"+field, s, Field.Store.YES, Field.Index.NO));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete doc id=\" + delID);\n        }\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + docs.size() + \" docs in index; now load fields\");\n    }\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = newSearcher(r);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle x=\" + x + \" r=\" + r);\n        }\n\n        for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          if (VERBOSE) {\n            System.out.println(\"TEST: test id=\" + testID);\n          }\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        s.close();\n        r.close();\n        w.optimize();\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomStoredFields() throws IOException {\n    Directory dir = newDirectory();\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setInfoStream(System.out);\n    //w.w.setUseCompoundFile(false);\n    if (VERBOSE) {\n      w.w.setInfoStream(System.out);\n    }\n    final int docCount = 200*RANDOM_MULTIPLIER;\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n\n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: build index docCount=\" + docCount);\n    }\n\n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(newField(\"f\"+field, s, Field.Store.YES, Field.Index.NO));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete doc \" + delID);\n        }\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + docs.size() + \" docs in index; now load fields\");\n    }\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = new IndexSearcher(r);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle x=\" + x + \" r=\" + r);\n        }\n\n        for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        r.close();\n        w.optimize();\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","sourceNew":"  public void testRandomStoredFields() throws IOException {\n    Directory dir = newDirectory();\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setInfoStream(System.out);\n    //w.w.setUseCompoundFile(false);\n    if (VERBOSE) {\n      w.w.setInfoStream(System.out);\n    }\n    final int docCount = 200*RANDOM_MULTIPLIER;\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n      \n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n    \n    if (VERBOSE) {\n      System.out.println(\"TEST: build index docCount=\" + docCount);\n    }\n\n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n      if (VERBOSE) {\n        System.out.println(\"TEST: add doc id=\" + id);\n      }\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(newField(\"f\"+field, s, Field.Store.YES, Field.Index.NO));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete doc id=\" + delID);\n        }\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + docs.size() + \" docs in index; now load fields\");\n    }\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = newSearcher(r);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle x=\" + x + \" r=\" + r);\n        }\n\n        for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          if (VERBOSE) {\n            System.out.println(\"TEST: test id=\" + testID);\n          }\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        s.close();\n        r.close();\n        w.optimize();\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomStoredFields() throws IOException {\n    Directory dir = newDirectory();\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setInfoStream(System.out);\n    //w.w.setUseCompoundFile(false);\n    if (VERBOSE) {\n      w.w.setInfoStream(System.out);\n    }\n    final int docCount = 200*RANDOM_MULTIPLIER;\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n      \n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n    \n    if (VERBOSE) {\n      System.out.println(\"TEST: build index docCount=\" + docCount);\n    }\n\n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n      if (VERBOSE) {\n        System.out.println(\"TEST: add doc id=\" + id);\n      }\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(newField(\"f\"+field, s, Field.Store.YES, Field.Index.NO));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete doc id=\" + delID);\n        }\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + docs.size() + \" docs in index; now load fields\");\n    }\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = newSearcher(r);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle x=\" + x + \" r=\" + r);\n        }\n\n        for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          if (VERBOSE) {\n            System.out.println(\"TEST: test id=\" + testID);\n          }\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        s.close();\n        r.close();\n        w.optimize();\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","sourceNew":"  public void testRandomStoredFields() throws IOException {\n    Directory dir = newDirectory();\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setInfoStream(System.out);\n    //w.w.setUseCompoundFile(false);\n    if (VERBOSE) {\n      w.w.setInfoStream(System.out);\n    }\n    final int docCount = 200*RANDOM_MULTIPLIER;\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n\n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: build index docCount=\" + docCount);\n    }\n\n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n      if (VERBOSE) {\n        System.out.println(\"TEST: add doc id=\" + id);\n      }\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(newField(\"f\"+field, s, Field.Store.YES, Field.Index.NO));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete doc id=\" + delID);\n        }\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + docs.size() + \" docs in index; now load fields\");\n    }\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = newSearcher(r);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle x=\" + x + \" r=\" + r);\n        }\n\n        for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          if (VERBOSE) {\n            System.out.println(\"TEST: test id=\" + testID);\n          }\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        s.close();\n        r.close();\n        w.optimize();\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomStoredFields() throws IOException {\n    Directory dir = newDirectory();\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setInfoStream(System.out);\n    //w.w.setUseCompoundFile(false);\n    if (VERBOSE) {\n      w.w.setInfoStream(System.out);\n    }\n    final int docCount = 200*RANDOM_MULTIPLIER;\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n\n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: build index docCount=\" + docCount);\n    }\n\n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n      if (VERBOSE) {\n        System.out.println(\"TEST: add doc id=\" + id);\n      }\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(newField(\"f\"+field, s, Field.Store.YES, Field.Index.NO));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete doc id=\" + delID);\n        }\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + docs.size() + \" docs in index; now load fields\");\n    }\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = newSearcher(r);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle x=\" + x + \" r=\" + r);\n        }\n\n        for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          if (VERBOSE) {\n            System.out.println(\"TEST: test id=\" + testID);\n          }\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        s.close();\n        r.close();\n        w.optimize();\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","sourceNew":"  public void testRandomStoredFields() throws IOException {\n    Directory dir = newDirectory();\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setInfoStream(System.out);\n    //w.w.setUseCompoundFile(false);\n    if (VERBOSE) {\n      w.w.setInfoStream(System.out);\n    }\n    final int docCount = 200*RANDOM_MULTIPLIER;\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n\n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: build index docCount=\" + docCount);\n    }\n\n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n      if (VERBOSE) {\n        System.out.println(\"TEST: add doc id=\" + id);\n      }\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(newField(\"f\"+field, s, Field.Store.YES, Field.Index.NO));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete doc id=\" + delID);\n        }\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + docs.size() + \" docs in index; now load fields\");\n    }\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = newSearcher(r);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle x=\" + x + \" r=\" + r);\n        }\n\n        for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          if (VERBOSE) {\n            System.out.println(\"TEST: test id=\" + testID);\n          }\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        s.close();\n        r.close();\n        w.optimize();\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomStoredFields() throws IOException {\n    Directory dir = newDirectory();\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setInfoStream(System.out);\n    //w.w.setUseCompoundFile(false);\n    if (VERBOSE) {\n      w.w.setInfoStream(System.out);\n    }\n    final int docCount = 200*RANDOM_MULTIPLIER;\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n      \n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n    \n    if (VERBOSE) {\n      System.out.println(\"TEST: build index docCount=\" + docCount);\n    }\n\n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n      if (VERBOSE) {\n        System.out.println(\"TEST: add doc id=\" + id);\n      }\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(newField(\"f\"+field, s, Field.Store.YES, Field.Index.NO));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete doc id=\" + delID);\n        }\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + docs.size() + \" docs in index; now load fields\");\n    }\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = newSearcher(r);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle x=\" + x + \" r=\" + r);\n        }\n\n        for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          if (VERBOSE) {\n            System.out.println(\"TEST: test id=\" + testID);\n          }\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        s.close();\n        r.close();\n        w.optimize();\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","sourceNew":"  public void testRandomStoredFields() throws IOException {\n    Directory dir = newDirectory();\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setInfoStream(System.out);\n    //w.w.setUseCompoundFile(false);\n    if (VERBOSE) {\n      w.w.setInfoStream(System.out);\n    }\n    final int docCount = 200*RANDOM_MULTIPLIER;\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n\n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: build index docCount=\" + docCount);\n    }\n\n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n      if (VERBOSE) {\n        System.out.println(\"TEST: add doc id=\" + id);\n      }\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(newField(\"f\"+field, s, Field.Store.YES, Field.Index.NO));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete doc id=\" + delID);\n        }\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + docs.size() + \" docs in index; now load fields\");\n    }\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = newSearcher(r);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle x=\" + x + \" r=\" + r);\n        }\n\n        for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          if (VERBOSE) {\n            System.out.println(\"TEST: test id=\" + testID);\n          }\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        s.close();\n        r.close();\n        w.optimize();\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomStoredFields() throws IOException {\n    Directory dir = newDirectory();\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setInfoStream(System.out);\n    //w.w.setUseCompoundFile(false);\n    if (VERBOSE) {\n      w.w.setInfoStream(System.out);\n    }\n    final int docCount = 200*RANDOM_MULTIPLIER;\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n      \n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n    \n    if (VERBOSE) {\n      System.out.println(\"TEST: build index docCount=\" + docCount);\n    }\n\n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n      if (VERBOSE) {\n        System.out.println(\"TEST: add doc id=\" + id);\n      }\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(newField(\"f\"+field, s, Field.Store.YES, Field.Index.NO));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete doc id=\" + delID);\n        }\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + docs.size() + \" docs in index; now load fields\");\n    }\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = newSearcher(r);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle x=\" + x + \" r=\" + r);\n        }\n\n        for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          if (VERBOSE) {\n            System.out.println(\"TEST: test id=\" + testID);\n          }\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        s.close();\n        r.close();\n        w.optimize();\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","sourceNew":"  public void testRandomStoredFields() throws IOException {\n    Directory dir = newDirectory();\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setInfoStream(System.out);\n    //w.w.setUseCompoundFile(false);\n    if (VERBOSE) {\n      w.w.setInfoStream(System.out);\n    }\n    final int docCount = 200*RANDOM_MULTIPLIER;\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n\n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: build index docCount=\" + docCount);\n    }\n\n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n      if (VERBOSE) {\n        System.out.println(\"TEST: add doc id=\" + id);\n      }\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(newField(\"f\"+field, s, Field.Store.YES, Field.Index.NO));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete doc id=\" + delID);\n        }\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + docs.size() + \" docs in index; now load fields\");\n    }\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = newSearcher(r);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle x=\" + x + \" r=\" + r);\n        }\n\n        for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          if (VERBOSE) {\n            System.out.println(\"TEST: test id=\" + testID);\n          }\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        s.close();\n        r.close();\n        w.optimize();\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomStoredFields() throws IOException {\n    Directory dir = newDirectory();\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setInfoStream(System.out);\n    //w.w.setUseCompoundFile(false);\n    if (VERBOSE) {\n      w.w.setInfoStream(System.out);\n    }\n    final int docCount = 200*RANDOM_MULTIPLIER;\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n      \n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n    \n    if (VERBOSE) {\n      System.out.println(\"TEST: build index docCount=\" + docCount);\n    }\n\n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n      if (VERBOSE) {\n        System.out.println(\"TEST: add doc id=\" + id);\n      }\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(newField(\"f\"+field, s, Field.Store.YES, Field.Index.NO));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete doc id=\" + delID);\n        }\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + docs.size() + \" docs in index; now load fields\");\n    }\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = newSearcher(r);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle x=\" + x + \" r=\" + r);\n        }\n\n        for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          if (VERBOSE) {\n            System.out.println(\"TEST: test id=\" + testID);\n          }\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        s.close();\n        r.close();\n        w.optimize();\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f83af14a2a8131b14d7aee6274c740334e0363d3","date":1307579822,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","sourceNew":"  public void testRandomStoredFields() throws IOException {\n    Directory dir = newDirectory();\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setInfoStream(System.out);\n    //w.w.setUseCompoundFile(false);\n    if (VERBOSE) {\n      w.w.setInfoStream(System.out);\n    }\n    final int docCount = atLeast(200);\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n\n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: build index docCount=\" + docCount);\n    }\n\n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n      if (VERBOSE) {\n        System.out.println(\"TEST: add doc id=\" + id);\n      }\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(newField(\"f\"+field, s, Field.Store.YES, Field.Index.NO));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete doc id=\" + delID);\n        }\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + docs.size() + \" docs in index; now load fields\");\n    }\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = newSearcher(r);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle x=\" + x + \" r=\" + r);\n        }\n\n        int num = atLeast(1000);\n        for(int iter=0;iter<num;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          if (VERBOSE) {\n            System.out.println(\"TEST: test id=\" + testID);\n          }\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        s.close();\n        r.close();\n        w.optimize();\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomStoredFields() throws IOException {\n    Directory dir = newDirectory();\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setInfoStream(System.out);\n    //w.w.setUseCompoundFile(false);\n    if (VERBOSE) {\n      w.w.setInfoStream(System.out);\n    }\n    final int docCount = 200*RANDOM_MULTIPLIER;\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n\n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: build index docCount=\" + docCount);\n    }\n\n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n      if (VERBOSE) {\n        System.out.println(\"TEST: add doc id=\" + id);\n      }\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(newField(\"f\"+field, s, Field.Store.YES, Field.Index.NO));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete doc id=\" + delID);\n        }\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + docs.size() + \" docs in index; now load fields\");\n    }\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = newSearcher(r);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle x=\" + x + \" r=\" + r);\n        }\n\n        for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          if (VERBOSE) {\n            System.out.println(\"TEST: test id=\" + testID);\n          }\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        s.close();\n        r.close();\n        w.optimize();\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["71da933d30aea361ccc224d6544c451cbf49916d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","sourceNew":"  public void testRandomStoredFields() throws IOException {\n    Directory dir = newDirectory();\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setInfoStream(System.out);\n    //w.w.setUseCompoundFile(false);\n    if (VERBOSE) {\n      w.w.setInfoStream(System.out);\n    }\n    final int docCount = atLeast(200);\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n\n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: build index docCount=\" + docCount);\n    }\n\n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n      if (VERBOSE) {\n        System.out.println(\"TEST: add doc id=\" + id);\n      }\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(newField(\"f\"+field, s, Field.Store.YES, Field.Index.NO));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete doc id=\" + delID);\n        }\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + docs.size() + \" docs in index; now load fields\");\n    }\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = newSearcher(r);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle x=\" + x + \" r=\" + r);\n        }\n\n        int num = atLeast(1000);\n        for(int iter=0;iter<num;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          if (VERBOSE) {\n            System.out.println(\"TEST: test id=\" + testID);\n          }\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        s.close();\n        r.close();\n        w.optimize();\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomStoredFields() throws IOException {\n    Directory dir = newDirectory();\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setInfoStream(System.out);\n    //w.w.setUseCompoundFile(false);\n    if (VERBOSE) {\n      w.w.setInfoStream(System.out);\n    }\n    final int docCount = 200*RANDOM_MULTIPLIER;\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n\n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: build index docCount=\" + docCount);\n    }\n\n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n      if (VERBOSE) {\n        System.out.println(\"TEST: add doc id=\" + id);\n      }\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(newField(\"f\"+field, s, Field.Store.YES, Field.Index.NO));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete doc id=\" + delID);\n        }\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + docs.size() + \" docs in index; now load fields\");\n    }\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = newSearcher(r);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle x=\" + x + \" r=\" + r);\n        }\n\n        for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          if (VERBOSE) {\n            System.out.println(\"TEST: test id=\" + testID);\n          }\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        s.close();\n        r.close();\n        w.optimize();\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","sourceNew":"  public void testRandomStoredFields() throws IOException {\n    Directory dir = newDirectory();\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setInfoStream(System.out);\n    //w.w.setUseCompoundFile(false);\n    if (VERBOSE) {\n      w.w.setInfoStream(System.out);\n    }\n    final int docCount = atLeast(200);\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n\n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: build index docCount=\" + docCount);\n    }\n\n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n      if (VERBOSE) {\n        System.out.println(\"TEST: add doc id=\" + id);\n      }\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(newField(\"f\"+field, s, Field.Store.YES, Field.Index.NO));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete doc id=\" + delID);\n        }\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + docs.size() + \" docs in index; now load fields\");\n    }\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = newSearcher(r);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle x=\" + x + \" r=\" + r);\n        }\n\n        int num = atLeast(1000);\n        for(int iter=0;iter<num;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          if (VERBOSE) {\n            System.out.println(\"TEST: test id=\" + testID);\n          }\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        s.close();\n        r.close();\n        w.optimize();\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomStoredFields() throws IOException {\n    Directory dir = newDirectory();\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setInfoStream(System.out);\n    //w.w.setUseCompoundFile(false);\n    if (VERBOSE) {\n      w.w.setInfoStream(System.out);\n    }\n    final int docCount = 200*RANDOM_MULTIPLIER;\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n\n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: build index docCount=\" + docCount);\n    }\n\n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n      if (VERBOSE) {\n        System.out.println(\"TEST: add doc id=\" + id);\n      }\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(newField(\"f\"+field, s, Field.Store.YES, Field.Index.NO));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete doc id=\" + delID);\n        }\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + docs.size() + \" docs in index; now load fields\");\n    }\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = newSearcher(r);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle x=\" + x + \" r=\" + r);\n        }\n\n        for(int iter=0;iter<1000*RANDOM_MULTIPLIER;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          if (VERBOSE) {\n            System.out.println(\"TEST: test id=\" + testID);\n          }\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        s.close();\n        r.close();\n        w.optimize();\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","sourceNew":"  public void testRandomStoredFields() throws IOException {\n    Directory dir = newDirectory();\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setInfoStream(System.out);\n    //w.w.setUseCompoundFile(false);\n    if (VERBOSE) {\n      w.w.setInfoStream(System.out);\n    }\n    final int docCount = atLeast(200);\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n\n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n    Field idField = newField(\"id\", \"\", customType);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: build index docCount=\" + docCount);\n    }\n\n    FieldType customType2 = new FieldType();\n    customType2.setStored(true);\n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n      if (VERBOSE) {\n        System.out.println(\"TEST: add doc id=\" + id);\n      }\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(newField(\"f\"+field, s, customType2));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete doc id=\" + delID);\n        }\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + docs.size() + \" docs in index; now load fields\");\n    }\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = newSearcher(r);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle x=\" + x + \" r=\" + r);\n        }\n\n        int num = atLeast(1000);\n        for(int iter=0;iter<num;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          if (VERBOSE) {\n            System.out.println(\"TEST: test id=\" + testID);\n          }\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        s.close();\n        r.close();\n        w.optimize();\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomStoredFields() throws IOException {\n    Directory dir = newDirectory();\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setInfoStream(System.out);\n    //w.w.setUseCompoundFile(false);\n    if (VERBOSE) {\n      w.w.setInfoStream(System.out);\n    }\n    final int docCount = atLeast(200);\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n\n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    Field idField = newField(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: build index docCount=\" + docCount);\n    }\n\n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n      if (VERBOSE) {\n        System.out.println(\"TEST: add doc id=\" + id);\n      }\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(newField(\"f\"+field, s, Field.Store.YES, Field.Index.NO));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete doc id=\" + delID);\n        }\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + docs.size() + \" docs in index; now load fields\");\n    }\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = newSearcher(r);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle x=\" + x + \" r=\" + r);\n        }\n\n        int num = atLeast(1000);\n        for(int iter=0;iter<num;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          if (VERBOSE) {\n            System.out.println(\"TEST: test id=\" + testID);\n          }\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        s.close();\n        r.close();\n        w.optimize();\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","sourceNew":"  public void testRandomStoredFields() throws IOException {\n    Directory dir = newDirectory();\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setUseCompoundFile(false);\n    final int docCount = atLeast(200);\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n\n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n    Field idField = newField(\"id\", \"\", customType);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: build index docCount=\" + docCount);\n    }\n\n    FieldType customType2 = new FieldType();\n    customType2.setStored(true);\n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n      if (VERBOSE) {\n        System.out.println(\"TEST: add doc id=\" + id);\n      }\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(newField(\"f\"+field, s, customType2));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete doc id=\" + delID);\n        }\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + docs.size() + \" docs in index; now load fields\");\n    }\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = newSearcher(r);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle x=\" + x + \" r=\" + r);\n        }\n\n        int num = atLeast(1000);\n        for(int iter=0;iter<num;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          if (VERBOSE) {\n            System.out.println(\"TEST: test id=\" + testID);\n          }\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        s.close();\n        r.close();\n        w.optimize();\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomStoredFields() throws IOException {\n    Directory dir = newDirectory();\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setInfoStream(System.out);\n    //w.w.setUseCompoundFile(false);\n    if (VERBOSE) {\n      w.w.setInfoStream(System.out);\n    }\n    final int docCount = atLeast(200);\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n\n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n    Field idField = newField(\"id\", \"\", customType);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: build index docCount=\" + docCount);\n    }\n\n    FieldType customType2 = new FieldType();\n    customType2.setStored(true);\n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n      if (VERBOSE) {\n        System.out.println(\"TEST: add doc id=\" + id);\n      }\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(newField(\"f\"+field, s, customType2));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete doc id=\" + delID);\n        }\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + docs.size() + \" docs in index; now load fields\");\n    }\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = newSearcher(r);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle x=\" + x + \" r=\" + r);\n        }\n\n        int num = atLeast(1000);\n        for(int iter=0;iter<num;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          if (VERBOSE) {\n            System.out.println(\"TEST: test id=\" + testID);\n          }\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        s.close();\n        r.close();\n        w.optimize();\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","sourceNew":"  public void testRandomStoredFields() throws IOException {\n    Directory dir = newDirectory();\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setUseCompoundFile(false);\n    final int docCount = atLeast(200);\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n\n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n    Field idField = newField(\"id\", \"\", customType);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: build index docCount=\" + docCount);\n    }\n\n    FieldType customType2 = new FieldType();\n    customType2.setStored(true);\n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n      if (VERBOSE) {\n        System.out.println(\"TEST: add doc id=\" + id);\n      }\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(newField(\"f\"+field, s, customType2));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete doc id=\" + delID);\n        }\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + docs.size() + \" docs in index; now load fields\");\n    }\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = newSearcher(r);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle x=\" + x + \" r=\" + r);\n        }\n\n        int num = atLeast(1000);\n        for(int iter=0;iter<num;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          if (VERBOSE) {\n            System.out.println(\"TEST: test id=\" + testID);\n          }\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        s.close();\n        r.close();\n        w.forceMerge(1);\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomStoredFields() throws IOException {\n    Directory dir = newDirectory();\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setUseCompoundFile(false);\n    final int docCount = atLeast(200);\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n\n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n    Field idField = newField(\"id\", \"\", customType);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: build index docCount=\" + docCount);\n    }\n\n    FieldType customType2 = new FieldType();\n    customType2.setStored(true);\n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n      if (VERBOSE) {\n        System.out.println(\"TEST: add doc id=\" + id);\n      }\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(newField(\"f\"+field, s, customType2));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete doc id=\" + delID);\n        }\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + docs.size() + \" docs in index; now load fields\");\n    }\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = newSearcher(r);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle x=\" + x + \" r=\" + r);\n        }\n\n        int num = atLeast(1000);\n        for(int iter=0;iter<num;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          if (VERBOSE) {\n            System.out.println(\"TEST: test id=\" + testID);\n          }\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        s.close();\n        r.close();\n        w.optimize();\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","sourceNew":"  public void testRandomStoredFields() throws IOException {\n    Directory dir = newDirectory();\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setUseCompoundFile(false);\n    final int docCount = atLeast(200);\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n\n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n    Field idField = newField(\"id\", \"\", customType);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: build index docCount=\" + docCount);\n    }\n\n    FieldType customType2 = new FieldType();\n    customType2.setStored(true);\n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n      if (VERBOSE) {\n        System.out.println(\"TEST: add doc id=\" + id);\n      }\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(newField(\"f\"+field, s, customType2));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete doc id=\" + delID);\n        }\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + docs.size() + \" docs in index; now load fields\");\n    }\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = newSearcher(r);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle x=\" + x + \" r=\" + r);\n        }\n\n        int num = atLeast(1000);\n        for(int iter=0;iter<num;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          if (VERBOSE) {\n            System.out.println(\"TEST: test id=\" + testID);\n          }\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        r.close();\n        w.forceMerge(1);\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomStoredFields() throws IOException {\n    Directory dir = newDirectory();\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setUseCompoundFile(false);\n    final int docCount = atLeast(200);\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n\n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n    Field idField = newField(\"id\", \"\", customType);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: build index docCount=\" + docCount);\n    }\n\n    FieldType customType2 = new FieldType();\n    customType2.setStored(true);\n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n      if (VERBOSE) {\n        System.out.println(\"TEST: add doc id=\" + id);\n      }\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(newField(\"f\"+field, s, customType2));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete doc id=\" + delID);\n        }\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + docs.size() + \" docs in index; now load fields\");\n    }\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = newSearcher(r);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle x=\" + x + \" r=\" + r);\n        }\n\n        int num = atLeast(1000);\n        for(int iter=0;iter<num;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          if (VERBOSE) {\n            System.out.println(\"TEST: test id=\" + testID);\n          }\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        s.close();\n        r.close();\n        w.forceMerge(1);\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","sourceNew":"  public void testRandomStoredFields() throws IOException {\n    Directory dir = newDirectory();\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setUseCompoundFile(false);\n    final int docCount = atLeast(200);\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n\n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n    Field idField = newField(\"id\", \"\", customType);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: build index docCount=\" + docCount);\n    }\n\n    FieldType customType2 = new FieldType();\n    customType2.setStored(true);\n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n      if (VERBOSE) {\n        System.out.println(\"TEST: add doc id=\" + id);\n      }\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(newField(\"f\"+field, s, customType2));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete doc id=\" + delID);\n        }\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + docs.size() + \" docs in index; now load fields\");\n    }\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = newSearcher(r);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle x=\" + x + \" r=\" + r);\n        }\n\n        int num = atLeast(1000);\n        for(int iter=0;iter<num;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          if (VERBOSE) {\n            System.out.println(\"TEST: test id=\" + testID);\n          }\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        r.close();\n        w.forceMerge(1);\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomStoredFields() throws IOException {\n    Directory dir = newDirectory();\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setUseCompoundFile(false);\n    final int docCount = atLeast(200);\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n\n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n    Field idField = newField(\"id\", \"\", customType);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: build index docCount=\" + docCount);\n    }\n\n    FieldType customType2 = new FieldType();\n    customType2.setStored(true);\n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n      if (VERBOSE) {\n        System.out.println(\"TEST: add doc id=\" + id);\n      }\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(newField(\"f\"+field, s, customType2));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete doc id=\" + delID);\n        }\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + docs.size() + \" docs in index; now load fields\");\n    }\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = newSearcher(r);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle x=\" + x + \" r=\" + r);\n        }\n\n        int num = atLeast(1000);\n        for(int iter=0;iter<num;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          if (VERBOSE) {\n            System.out.println(\"TEST: test id=\" + testID);\n          }\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        s.close();\n        r.close();\n        w.forceMerge(1);\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8be580b58bcc650d428f3f22de81cadcf51d650a","date":1325279655,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRandomStoredFields#testRandomStoredFields().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomStoredFields().mjava","sourceNew":"  public void testRandomStoredFields() throws IOException {\n    Directory dir = newDirectory();\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setUseCompoundFile(false);\n    final int docCount = atLeast(200);\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n\n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n    Field idField = newField(\"id\", \"\", customType);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: build index docCount=\" + docCount);\n    }\n\n    FieldType customType2 = new FieldType();\n    customType2.setStored(true);\n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n      if (VERBOSE) {\n        System.out.println(\"TEST: add doc id=\" + id);\n      }\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(newField(\"f\"+field, s, customType2));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete doc id=\" + delID);\n        }\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + docs.size() + \" docs in index; now load fields\");\n    }\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = newSearcher(r);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle x=\" + x + \" r=\" + r);\n        }\n\n        int num = atLeast(1000);\n        for(int iter=0;iter<num;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          if (VERBOSE) {\n            System.out.println(\"TEST: test id=\" + testID);\n          }\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        r.close();\n        w.forceMerge(1);\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomStoredFields() throws IOException {\n    Directory dir = newDirectory();\n    Random rand = random;\n    RandomIndexWriter w = new RandomIndexWriter(rand, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(_TestUtil.nextInt(rand, 5, 20)));\n    //w.w.setUseCompoundFile(false);\n    final int docCount = atLeast(200);\n    final int fieldCount = _TestUtil.nextInt(rand, 1, 5);\n\n    final List<Integer> fieldIDs = new ArrayList<Integer>();\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n    Field idField = newField(\"id\", \"\", customType);\n\n    for(int i=0;i<fieldCount;i++) {\n      fieldIDs.add(i);\n    }\n\n    final Map<String,Document> docs = new HashMap<String,Document>();\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: build index docCount=\" + docCount);\n    }\n\n    FieldType customType2 = new FieldType();\n    customType2.setStored(true);\n    for(int i=0;i<docCount;i++) {\n      Document doc = new Document();\n      doc.add(idField);\n      final String id = \"\"+i;\n      idField.setValue(id);\n      docs.put(id, doc);\n      if (VERBOSE) {\n        System.out.println(\"TEST: add doc id=\" + id);\n      }\n\n      for(int field: fieldIDs) {\n        final String s;\n        if (rand.nextInt(4) != 3) {\n          s = _TestUtil.randomUnicodeString(rand, 1000);\n          doc.add(newField(\"f\"+field, s, customType2));\n        } else {\n          s = null;\n        }\n      }\n      w.addDocument(doc);\n      if (rand.nextInt(50) == 17) {\n        // mixup binding of field name -> Number every so often\n        Collections.shuffle(fieldIDs);\n      }\n      if (rand.nextInt(5) == 3 && i > 0) {\n        final String delID = \"\"+rand.nextInt(i);\n        if (VERBOSE) {\n          System.out.println(\"TEST: delete doc id=\" + delID);\n        }\n        w.deleteDocuments(new Term(\"id\", delID));\n        docs.remove(delID);\n      }\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: \" + docs.size() + \" docs in index; now load fields\");\n    }\n    if (docs.size() > 0) {\n      String[] idsList = docs.keySet().toArray(new String[docs.size()]);\n\n      for(int x=0;x<2;x++) {\n        IndexReader r = w.getReader();\n        IndexSearcher s = newSearcher(r);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: cycle x=\" + x + \" r=\" + r);\n        }\n\n        int num = atLeast(1000);\n        for(int iter=0;iter<num;iter++) {\n          String testID = idsList[rand.nextInt(idsList.length)];\n          if (VERBOSE) {\n            System.out.println(\"TEST: test id=\" + testID);\n          }\n          TopDocs hits = s.search(new TermQuery(new Term(\"id\", testID)), 1);\n          assertEquals(1, hits.totalHits);\n          Document doc = r.document(hits.scoreDocs[0].doc);\n          Document docExp = docs.get(testID);\n          for(int i=0;i<fieldCount;i++) {\n            assertEquals(\"doc \" + testID + \", field f\" + fieldCount + \" is wrong\", docExp.get(\"f\"+i),  doc.get(\"f\"+i));\n          }\n        }\n        r.close();\n        w.forceMerge(1);\n      }\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f83af14a2a8131b14d7aee6274c740334e0363d3":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["29ef99d61cda9641b6250bf9567329a6e65f901d","4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["06584e6e98d592b34e1329b384182f368d2025e8"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"1ff72a5dbafa0f42676070a2f46223b2d0e122c8":["7d1d97c3f42de4c0f8fbcd661a7527ecfab69351"],"32dc7337f7ea413653ffe4f522bf8cc7ef86ab82":["57d5dad190acf63cb17e05df3882de97b1105c1c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","132903c28af3aa6f67284b78de91c0f0a99488c2"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["1ff72a5dbafa0f42676070a2f46223b2d0e122c8"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["132903c28af3aa6f67284b78de91c0f0a99488c2","790e1fde4caa765b3faaad3fbcd25c6973450336"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fc59f76ab05132dcb816d613956c236017659fbe":["222164711a842fa41879d91a9ad84966883280c5"],"222164711a842fa41879d91a9ad84966883280c5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f83af14a2a8131b14d7aee6274c740334e0363d3"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["32dc7337f7ea413653ffe4f522bf8cc7ef86ab82"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a3776dccca01c11e7046323cfad46a3b4a471233","f83af14a2a8131b14d7aee6274c740334e0363d3"],"06584e6e98d592b34e1329b384182f368d2025e8":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["f1bdbf92da222965b46c0a942c3857ba56e5c638","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"57d5dad190acf63cb17e05df3882de97b1105c1c":["fc59f76ab05132dcb816d613956c236017659fbe"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["f2c5f0cb44df114db4228c8f77861714b5cabaea","962d04139994fce5193143ef35615499a9a96d78"],"8be580b58bcc650d428f3f22de81cadcf51d650a":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"7d1d97c3f42de4c0f8fbcd661a7527ecfab69351":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","f83af14a2a8131b14d7aee6274c740334e0363d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8be580b58bcc650d428f3f22de81cadcf51d650a"]},"commit2Childs":{"f83af14a2a8131b14d7aee6274c740334e0363d3":["1509f151d7692d84fae414b2b799ac06ba60fcb4","a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","29ef99d61cda9641b6250bf9567329a6e65f901d","790e1fde4caa765b3faaad3fbcd25c6973450336"],"1ff72a5dbafa0f42676070a2f46223b2d0e122c8":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"32dc7337f7ea413653ffe4f522bf8cc7ef86ab82":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","962d04139994fce5193143ef35615499a9a96d78"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","8be580b58bcc650d428f3f22de81cadcf51d650a"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","222164711a842fa41879d91a9ad84966883280c5"],"fc59f76ab05132dcb816d613956c236017659fbe":["57d5dad190acf63cb17e05df3882de97b1105c1c"],"222164711a842fa41879d91a9ad84966883280c5":["fc59f76ab05132dcb816d613956c236017659fbe"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["06584e6e98d592b34e1329b384182f368d2025e8"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["7d1d97c3f42de4c0f8fbcd661a7527ecfab69351"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762":["f1bdbf92da222965b46c0a942c3857ba56e5c638","f2c5f0cb44df114db4228c8f77861714b5cabaea","bde51b089eb7f86171eb3406e38a274743f9b7ac","a3776dccca01c11e7046323cfad46a3b4a471233"],"06584e6e98d592b34e1329b384182f368d2025e8":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["f83af14a2a8131b14d7aee6274c740334e0363d3","135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233"],"57d5dad190acf63cb17e05df3882de97b1105c1c":["32dc7337f7ea413653ffe4f522bf8cc7ef86ab82"],"962d04139994fce5193143ef35615499a9a96d78":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"8be580b58bcc650d428f3f22de81cadcf51d650a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["29ef99d61cda9641b6250bf9567329a6e65f901d","4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"7d1d97c3f42de4c0f8fbcd661a7527ecfab69351":["1ff72a5dbafa0f42676070a2f46223b2d0e122c8"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}