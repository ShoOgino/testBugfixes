{"path":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#checkClusterWithCollectionCreations(MiniSolrCloudCluster,SSLTestConfig).mjava","commits":[{"id":"e58bb31b4af6b8eeb1539849575c59df745bc6e6","date":1461874681,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#checkClusterWithCollectionCreations(MiniSolrCloudCluster,SSLTestConfig).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * General purpose cluster sanity check...\n   * <ol>\n   * <li>Upload a config set</li>\n   * <li>verifies a collection can be created</li>\n   * <li>verifies many things that should succeed/fail when communicating with the cluster according to the specified sslConfig</li>\n   * <li>shutdown a server &amp; startup a new one in it's place</li>\n   * <li>repeat the verifications of ssl / no-ssl communication</li>\n   * <li>create a second collection</li>\n   * </ol>\n   * @see #CONF_NAME\n   * @see #NUM_SERVERS\n   */\n  public static void checkClusterWithCollectionCreations(final MiniSolrCloudCluster cluster,\n                                                         final SSLTestConfig sslConfig) throws Exception {\n\n    cluster.uploadConfigDir(new File(SolrTestCaseJ4.TEST_HOME() + File.separator +\n                                     \"collection1\" + File.separator + \"conf\"),\n                            CONF_NAME);\n    \n    checkCreateCollection(cluster, \"first_collection\");\n    \n    checkClusterJettys(cluster, sslConfig);\n    \n    // shut down a server\n    JettySolrRunner stoppedServer = cluster.stopJettySolrRunner(0);\n    assertTrue(stoppedServer.isStopped());\n    assertEquals(NUM_SERVERS - 1, cluster.getJettySolrRunners().size());\n    \n    // create a new server\n    JettySolrRunner startedServer = cluster.startJettySolrRunner();\n    assertTrue(startedServer.isRunning());\n    assertEquals(NUM_SERVERS, cluster.getJettySolrRunners().size());\n    \n    checkClusterJettys(cluster, sslConfig);\n    \n    checkCreateCollection(cluster, \"second_collection\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#checkClusterWithCollectionCreations(MiniSolrCloudCluster,SSLTestConfig).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * General purpose cluster sanity check...\n   * <ol>\n   * <li>Upload a config set</li>\n   * <li>verifies a collection can be created</li>\n   * <li>verifies many things that should succeed/fail when communicating with the cluster according to the specified sslConfig</li>\n   * <li>shutdown a server &amp; startup a new one in it's place</li>\n   * <li>repeat the verifications of ssl / no-ssl communication</li>\n   * <li>create a second collection</li>\n   * </ol>\n   * @see #CONF_NAME\n   * @see #NUM_SERVERS\n   */\n  public static void checkClusterWithCollectionCreations(final MiniSolrCloudCluster cluster,\n                                                         final SSLTestConfig sslConfig) throws Exception {\n\n    cluster.uploadConfigDir(new File(SolrTestCaseJ4.TEST_HOME() + File.separator +\n                                     \"collection1\" + File.separator + \"conf\"),\n                            CONF_NAME);\n    \n    checkCreateCollection(cluster, \"first_collection\");\n    \n    checkClusterJettys(cluster, sslConfig);\n    \n    // shut down a server\n    JettySolrRunner stoppedServer = cluster.stopJettySolrRunner(0);\n    assertTrue(stoppedServer.isStopped());\n    assertEquals(NUM_SERVERS - 1, cluster.getJettySolrRunners().size());\n    \n    // create a new server\n    JettySolrRunner startedServer = cluster.startJettySolrRunner();\n    assertTrue(startedServer.isRunning());\n    assertEquals(NUM_SERVERS, cluster.getJettySolrRunners().size());\n    \n    checkClusterJettys(cluster, sslConfig);\n    \n    checkCreateCollection(cluster, \"second_collection\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e89a32cc825033ebae8bb9e1c6877c2d9d76749e","date":1476790453,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#checkClusterWithCollectionCreations(MiniSolrCloudCluster,SSLTestConfig).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#checkClusterWithCollectionCreations(MiniSolrCloudCluster,SSLTestConfig).mjava","sourceNew":"  /**\n   * General purpose cluster sanity check...\n   * <ol>\n   * <li>Upload a config set</li>\n   * <li>verifies a collection can be created</li>\n   * <li>verifies many things that should succeed/fail when communicating with the cluster according to the specified sslConfig</li>\n   * <li>shutdown a server &amp; startup a new one in it's place</li>\n   * <li>repeat the verifications of ssl / no-ssl communication</li>\n   * <li>create a second collection</li>\n   * </ol>\n   * @see #CONF_NAME\n   * @see #NUM_SERVERS\n   */\n  public static void checkClusterWithCollectionCreations(final MiniSolrCloudCluster cluster,\n                                                         final SSLTestConfig sslConfig) throws Exception {\n\n    cluster.uploadConfigSet(SolrTestCaseJ4.TEST_PATH().resolve(\"collection1\").resolve(\"conf\"), CONF_NAME);\n    \n    checkCreateCollection(cluster, \"first_collection\");\n    \n    checkClusterJettys(cluster, sslConfig);\n    \n    // shut down a server\n    JettySolrRunner stoppedServer = cluster.stopJettySolrRunner(0);\n    assertTrue(stoppedServer.isStopped());\n    assertEquals(NUM_SERVERS - 1, cluster.getJettySolrRunners().size());\n    \n    // create a new server\n    JettySolrRunner startedServer = cluster.startJettySolrRunner();\n    assertTrue(startedServer.isRunning());\n    assertEquals(NUM_SERVERS, cluster.getJettySolrRunners().size());\n    \n    checkClusterJettys(cluster, sslConfig);\n    \n    checkCreateCollection(cluster, \"second_collection\");\n  }\n\n","sourceOld":"  /**\n   * General purpose cluster sanity check...\n   * <ol>\n   * <li>Upload a config set</li>\n   * <li>verifies a collection can be created</li>\n   * <li>verifies many things that should succeed/fail when communicating with the cluster according to the specified sslConfig</li>\n   * <li>shutdown a server &amp; startup a new one in it's place</li>\n   * <li>repeat the verifications of ssl / no-ssl communication</li>\n   * <li>create a second collection</li>\n   * </ol>\n   * @see #CONF_NAME\n   * @see #NUM_SERVERS\n   */\n  public static void checkClusterWithCollectionCreations(final MiniSolrCloudCluster cluster,\n                                                         final SSLTestConfig sslConfig) throws Exception {\n\n    cluster.uploadConfigDir(new File(SolrTestCaseJ4.TEST_HOME() + File.separator +\n                                     \"collection1\" + File.separator + \"conf\"),\n                            CONF_NAME);\n    \n    checkCreateCollection(cluster, \"first_collection\");\n    \n    checkClusterJettys(cluster, sslConfig);\n    \n    // shut down a server\n    JettySolrRunner stoppedServer = cluster.stopJettySolrRunner(0);\n    assertTrue(stoppedServer.isStopped());\n    assertEquals(NUM_SERVERS - 1, cluster.getJettySolrRunners().size());\n    \n    // create a new server\n    JettySolrRunner startedServer = cluster.startJettySolrRunner();\n    assertTrue(startedServer.isRunning());\n    assertEquals(NUM_SERVERS, cluster.getJettySolrRunners().size());\n    \n    checkClusterJettys(cluster, sslConfig);\n    \n    checkCreateCollection(cluster, \"second_collection\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#checkClusterWithCollectionCreations(MiniSolrCloudCluster,SSLTestConfig).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#checkClusterWithCollectionCreations(MiniSolrCloudCluster,SSLTestConfig).mjava","sourceNew":"  /**\n   * General purpose cluster sanity check...\n   * <ol>\n   * <li>Upload a config set</li>\n   * <li>verifies a collection can be created</li>\n   * <li>verifies many things that should succeed/fail when communicating with the cluster according to the specified sslConfig</li>\n   * <li>shutdown a server &amp; startup a new one in it's place</li>\n   * <li>repeat the verifications of ssl / no-ssl communication</li>\n   * <li>create a second collection</li>\n   * </ol>\n   * @see #CONF_NAME\n   * @see #NUM_SERVERS\n   */\n  public static void checkClusterWithCollectionCreations(final MiniSolrCloudCluster cluster,\n                                                         final SSLTestConfig sslConfig) throws Exception {\n\n    cluster.uploadConfigSet(SolrTestCaseJ4.TEST_PATH().resolve(\"collection1\").resolve(\"conf\"), CONF_NAME);\n    \n    checkCreateCollection(cluster, \"first_collection\");\n    \n    checkClusterJettys(cluster, sslConfig);\n    \n    // shut down a server\n    JettySolrRunner stoppedServer = cluster.stopJettySolrRunner(0);\n    assertTrue(stoppedServer.isStopped());\n    assertEquals(NUM_SERVERS - 1, cluster.getJettySolrRunners().size());\n    \n    // create a new server\n    JettySolrRunner startedServer = cluster.startJettySolrRunner();\n    assertTrue(startedServer.isRunning());\n    assertEquals(NUM_SERVERS, cluster.getJettySolrRunners().size());\n    \n    checkClusterJettys(cluster, sslConfig);\n    \n    checkCreateCollection(cluster, \"second_collection\");\n  }\n\n","sourceOld":"  /**\n   * General purpose cluster sanity check...\n   * <ol>\n   * <li>Upload a config set</li>\n   * <li>verifies a collection can be created</li>\n   * <li>verifies many things that should succeed/fail when communicating with the cluster according to the specified sslConfig</li>\n   * <li>shutdown a server &amp; startup a new one in it's place</li>\n   * <li>repeat the verifications of ssl / no-ssl communication</li>\n   * <li>create a second collection</li>\n   * </ol>\n   * @see #CONF_NAME\n   * @see #NUM_SERVERS\n   */\n  public static void checkClusterWithCollectionCreations(final MiniSolrCloudCluster cluster,\n                                                         final SSLTestConfig sslConfig) throws Exception {\n\n    cluster.uploadConfigDir(new File(SolrTestCaseJ4.TEST_HOME() + File.separator +\n                                     \"collection1\" + File.separator + \"conf\"),\n                            CONF_NAME);\n    \n    checkCreateCollection(cluster, \"first_collection\");\n    \n    checkClusterJettys(cluster, sslConfig);\n    \n    // shut down a server\n    JettySolrRunner stoppedServer = cluster.stopJettySolrRunner(0);\n    assertTrue(stoppedServer.isStopped());\n    assertEquals(NUM_SERVERS - 1, cluster.getJettySolrRunners().size());\n    \n    // create a new server\n    JettySolrRunner startedServer = cluster.startJettySolrRunner();\n    assertTrue(startedServer.isRunning());\n    assertEquals(NUM_SERVERS, cluster.getJettySolrRunners().size());\n    \n    checkClusterJettys(cluster, sslConfig);\n    \n    checkCreateCollection(cluster, \"second_collection\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#checkClusterWithCollectionCreations(MiniSolrCloudCluster,SSLTestConfig).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#checkClusterWithCollectionCreations(MiniSolrCloudCluster,SSLTestConfig).mjava","sourceNew":"  /**\n   * General purpose cluster sanity check...\n   * <ol>\n   * <li>Upload a config set</li>\n   * <li>verifies a collection can be created</li>\n   * <li>verifies many things that should succeed/fail when communicating with the cluster according to the specified sslConfig</li>\n   * <li>shutdown a server &amp; startup a new one in it's place</li>\n   * <li>repeat the verifications of ssl / no-ssl communication</li>\n   * <li>create a second collection</li>\n   * </ol>\n   * @see #CONF_NAME\n   * @see #NUM_SERVERS\n   */\n  public static void checkClusterWithCollectionCreations(final MiniSolrCloudCluster cluster,\n                                                         final SSLTestConfig sslConfig) throws Exception {\n\n    cluster.uploadConfigSet(SolrTestCaseJ4.TEST_PATH().resolve(\"collection1\").resolve(\"conf\"), CONF_NAME);\n    \n    checkCreateCollection(cluster, \"first_collection\");\n    \n    checkClusterJettys(cluster, sslConfig);\n    \n    // shut down a server\n    JettySolrRunner stoppedServer = cluster.stopJettySolrRunner(0);\n    cluster.waitForJettyToStop(stoppedServer);\n    assertTrue(stoppedServer.isStopped());\n    assertEquals(NUM_SERVERS - 1, cluster.getJettySolrRunners().size());\n    \n    // create a new server\n    JettySolrRunner startedServer = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(startedServer.isRunning());\n    assertEquals(NUM_SERVERS, cluster.getJettySolrRunners().size());\n    \n    checkClusterJettys(cluster, sslConfig);\n    \n    checkCreateCollection(cluster, \"second_collection\");\n  }\n\n","sourceOld":"  /**\n   * General purpose cluster sanity check...\n   * <ol>\n   * <li>Upload a config set</li>\n   * <li>verifies a collection can be created</li>\n   * <li>verifies many things that should succeed/fail when communicating with the cluster according to the specified sslConfig</li>\n   * <li>shutdown a server &amp; startup a new one in it's place</li>\n   * <li>repeat the verifications of ssl / no-ssl communication</li>\n   * <li>create a second collection</li>\n   * </ol>\n   * @see #CONF_NAME\n   * @see #NUM_SERVERS\n   */\n  public static void checkClusterWithCollectionCreations(final MiniSolrCloudCluster cluster,\n                                                         final SSLTestConfig sslConfig) throws Exception {\n\n    cluster.uploadConfigSet(SolrTestCaseJ4.TEST_PATH().resolve(\"collection1\").resolve(\"conf\"), CONF_NAME);\n    \n    checkCreateCollection(cluster, \"first_collection\");\n    \n    checkClusterJettys(cluster, sslConfig);\n    \n    // shut down a server\n    JettySolrRunner stoppedServer = cluster.stopJettySolrRunner(0);\n    assertTrue(stoppedServer.isStopped());\n    assertEquals(NUM_SERVERS - 1, cluster.getJettySolrRunners().size());\n    \n    // create a new server\n    JettySolrRunner startedServer = cluster.startJettySolrRunner();\n    assertTrue(startedServer.isRunning());\n    assertEquals(NUM_SERVERS, cluster.getJettySolrRunners().size());\n    \n    checkClusterJettys(cluster, sslConfig);\n    \n    checkCreateCollection(cluster, \"second_collection\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e89a32cc825033ebae8bb9e1c6877c2d9d76749e":["e58bb31b4af6b8eeb1539849575c59df745bc6e6"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["e89a32cc825033ebae8bb9e1c6877c2d9d76749e"],"e58bb31b4af6b8eeb1539849575c59df745bc6e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["55b50463286869f584cf849d1587a0fcd54d1dfa","e89a32cc825033ebae8bb9e1c6877c2d9d76749e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e58bb31b4af6b8eeb1539849575c59df745bc6e6"]},"commit2Childs":{"e89a32cc825033ebae8bb9e1c6877c2d9d76749e":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e58bb31b4af6b8eeb1539849575c59df745bc6e6":["e89a32cc825033ebae8bb9e1c6877c2d9d76749e","55b50463286869f584cf849d1587a0fcd54d1dfa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e58bb31b4af6b8eeb1539849575c59df745bc6e6","55b50463286869f584cf849d1587a0fcd54d1dfa"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"55b50463286869f584cf849d1587a0fcd54d1dfa":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}