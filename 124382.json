{"path":"src/java/org/apache/lucene/search/Similarity#tf(int).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Similarity#tf(int).mjava","pathOld":"/dev/null","sourceNew":"  static final float tf(int freq) {\n    return (float)Math.sqrt(freq);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f5efa46fb27648cd98137d9898d819e115911bc","date":1036690287,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Similarity#tf(int).mjava","pathOld":"src/java/org/apache/lucene/search/Similarity#tf(int).mjava","sourceNew":"  /** Computes a score factor based on a term or phrase's frequency in a\n   * document.  This value is multiplied by the {@link #idf(Term, Searcher)}\n   * factor for each term in the query and these products are then summed to\n   * form the initial score for a document.\n   *\n   * <p>Terms and phrases repeated in a document indicate the topic of the\n   * document, so implemenations of this method usually return larger values\n   * when <code>freq</code> is large, and smaller values when <code>freq</code>\n   * is small.\n   *\n   * <p>The default implementation calls {@link #tf(float)}.\n   *\n   * @param tf the frequency of a term within a document\n   * @return a score factor based on a term's within-document frequency\n   */\n  public float tf(int freq) {\n    return tf((float)freq);\n  }\n\n","sourceOld":"  static final float tf(int freq) {\n    return (float)Math.sqrt(freq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd2105e02e4fee2a20aac57c03fa7cb80dff27d7","date":1063496688,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Similarity#tf(int).mjava","pathOld":"src/java/org/apache/lucene/search/Similarity#tf(int).mjava","sourceNew":"  /** Computes a score factor based on a term or phrase's frequency in a\n   * document.  This value is multiplied by the {@link #idf(Term, Searcher)}\n   * factor for each term in the query and these products are then summed to\n   * form the initial score for a document.\n   *\n   * <p>Terms and phrases repeated in a document indicate the topic of the\n   * document, so implementations of this method usually return larger values\n   * when <code>freq</code> is large, and smaller values when <code>freq</code>\n   * is small.\n   *\n   * <p>The default implementation calls {@link #tf(float)}.\n   *\n   * @param freq the frequency of a term within a document\n   * @return a score factor based on a term's within-document frequency\n   */\n  public float tf(int freq) {\n    return tf((float)freq);\n  }\n\n","sourceOld":"  /** Computes a score factor based on a term or phrase's frequency in a\n   * document.  This value is multiplied by the {@link #idf(Term, Searcher)}\n   * factor for each term in the query and these products are then summed to\n   * form the initial score for a document.\n   *\n   * <p>Terms and phrases repeated in a document indicate the topic of the\n   * document, so implemenations of this method usually return larger values\n   * when <code>freq</code> is large, and smaller values when <code>freq</code>\n   * is small.\n   *\n   * <p>The default implementation calls {@link #tf(float)}.\n   *\n   * @param tf the frequency of a term within a document\n   * @return a score factor based on a term's within-document frequency\n   */\n  public float tf(int freq) {\n    return tf((float)freq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ae3763b337aadea2838f75b69d6b00c4e6949c7","date":1257894961,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Similarity#tf(int).mjava","pathOld":"src/java/org/apache/lucene/search/Similarity#tf(int).mjava","sourceNew":"  /** Computes a score factor based on a term or phrase's frequency in a\n   * document.  This value is multiplied by the {@link #idf(int, int)}\n   * factor for each term in the query and these products are then summed to\n   * form the initial score for a document.\n   *\n   * <p>Terms and phrases repeated in a document indicate the topic of the\n   * document, so implementations of this method usually return larger values\n   * when <code>freq</code> is large, and smaller values when <code>freq</code>\n   * is small.\n   *\n   * <p>The default implementation calls {@link #tf(float)}.\n   *\n   * @param freq the frequency of a term within a document\n   * @return a score factor based on a term's within-document frequency\n   */\n  public float tf(int freq) {\n    return tf((float)freq);\n  }\n\n","sourceOld":"  /** Computes a score factor based on a term or phrase's frequency in a\n   * document.  This value is multiplied by the {@link #idf(Term, Searcher)}\n   * factor for each term in the query and these products are then summed to\n   * form the initial score for a document.\n   *\n   * <p>Terms and phrases repeated in a document indicate the topic of the\n   * document, so implementations of this method usually return larger values\n   * when <code>freq</code> is large, and smaller values when <code>freq</code>\n   * is small.\n   *\n   * <p>The default implementation calls {@link #tf(float)}.\n   *\n   * @param freq the frequency of a term within a document\n   * @return a score factor based on a term's within-document frequency\n   */\n  public float tf(int freq) {\n    return tf((float)freq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/Similarity#tf(int).mjava","pathOld":"src/java/org/apache/lucene/search/Similarity#tf(int).mjava","sourceNew":"  /** Computes a score factor based on a term or phrase's frequency in a\n   * document.  This value is multiplied by the {@link #idf(int, int)}\n   * factor for each term in the query and these products are then summed to\n   * form the initial score for a document.\n   *\n   * <p>Terms and phrases repeated in a document indicate the topic of the\n   * document, so implementations of this method usually return larger values\n   * when <code>freq</code> is large, and smaller values when <code>freq</code>\n   * is small.\n   *\n   * <p>The default implementation calls {@link #tf(float)}.\n   *\n   * @param freq the frequency of a term within a document\n   * @return a score factor based on a term's within-document frequency\n   */\n  public float tf(int freq) {\n    return tf((float)freq);\n  }\n\n","sourceOld":"  /** Computes a score factor based on a term or phrase's frequency in a\n   * document.  This value is multiplied by the {@link #idf(int, int)}\n   * factor for each term in the query and these products are then summed to\n   * form the initial score for a document.\n   *\n   * <p>Terms and phrases repeated in a document indicate the topic of the\n   * document, so implementations of this method usually return larger values\n   * when <code>freq</code> is large, and smaller values when <code>freq</code>\n   * is small.\n   *\n   * <p>The default implementation calls {@link #tf(float)}.\n   *\n   * @param freq the frequency of a term within a document\n   * @return a score factor based on a term's within-document frequency\n   */\n  public float tf(int freq) {\n    return tf((float)freq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6ae3763b337aadea2838f75b69d6b00c4e6949c7":["dd2105e02e4fee2a20aac57c03fa7cb80dff27d7"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dd2105e02e4fee2a20aac57c03fa7cb80dff27d7":["6f5efa46fb27648cd98137d9898d819e115911bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6f5efa46fb27648cd98137d9898d819e115911bc":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["6ae3763b337aadea2838f75b69d6b00c4e6949c7"]},"commit2Childs":{"6ae3763b337aadea2838f75b69d6b00c4e6949c7":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["6f5efa46fb27648cd98137d9898d819e115911bc"],"dd2105e02e4fee2a20aac57c03fa7cb80dff27d7":["6ae3763b337aadea2838f75b69d6b00c4e6949c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"6f5efa46fb27648cd98137d9898d819e115911bc":["dd2105e02e4fee2a20aac57c03fa7cb80dff27d7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}