{"path":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkHitCollector(Random,Query,String,IndexSearcher,int[]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkHitCollector(Random,Query,String,IndexSearcher,int[]).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/CheckHits#checkHitCollector(Random,Query,String,IndexSearcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,Collector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Random random, Query query, String defaultFieldName,\n                                       IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(random,query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      IndexSearcher s = QueryUtils.wrapUnderlyingReader\n        (random, searcher, i);\n      s.search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n      QueryUtils.purgeFieldCache(s.getIndexReader()); // our wrapping can create insanity otherwise\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,Collector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Random random, Query query, String defaultFieldName,\n                                       IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(random,query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      IndexSearcher s = QueryUtils.wrapUnderlyingReader\n        (random, searcher, i);\n      s.search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n      QueryUtils.purgeFieldCache(s.getIndexReader()); // our wrapping can create insanity otherwise\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1dfbab3b123144c2bf2fe399c49001108d9c721c","date":1330368339,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkHitCollector(Random,Query,String,IndexSearcher,int[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkHitCollector(Random,Query,String,IndexSearcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,Collector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Random random, Query query, String defaultFieldName,\n                                       IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(random,query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      IndexSearcher s = QueryUtils.wrapUnderlyingReader\n        (random, searcher, i);\n      s.search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,Collector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Random random, Query query, String defaultFieldName,\n                                       IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(random,query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      IndexSearcher s = QueryUtils.wrapUnderlyingReader\n        (random, searcher, i);\n      s.search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n      QueryUtils.purgeFieldCache(s.getIndexReader()); // our wrapping can create insanity otherwise\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d26d48266a017b8190206ada9ce79d8c5188aeb7","date":1330494204,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkHitCollector(Random,Query,String,IndexSearcher,int[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkHitCollector(Random,Query,String,IndexSearcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * see Searcher#search(Query,Collector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Random random, Query query, String defaultFieldName,\n                                       IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(random,query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      IndexSearcher s = QueryUtils.wrapUnderlyingReader\n        (random, searcher, i);\n      s.search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n      QueryUtils.purgeFieldCache(s.getIndexReader()); // our wrapping can create insanity otherwise\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,Collector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Random random, Query query, String defaultFieldName,\n                                       IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(random,query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      IndexSearcher s = QueryUtils.wrapUnderlyingReader\n        (random, searcher, i);\n      s.search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n      QueryUtils.purgeFieldCache(s.getIndexReader()); // our wrapping can create insanity otherwise\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f9d66495573b5a13a6d8b98af14a8e6c4bf75a3","date":1330973542,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkHitCollector(Random,Query,String,IndexSearcher,int[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkHitCollector(Random,Query,String,IndexSearcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Random random, Query query, String defaultFieldName,\n                                       IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(random,query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      IndexSearcher s = QueryUtils.wrapUnderlyingReader\n        (random, searcher, i);\n      s.search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query,Collector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Random random, Query query, String defaultFieldName,\n                                       IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(random,query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      IndexSearcher s = QueryUtils.wrapUnderlyingReader\n        (random, searcher, i);\n      s.search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkHitCollector(Random,Query,String,IndexSearcher,int[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkHitCollector(Random,Query,String,IndexSearcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Random random, Query query, String defaultFieldName,\n                                       IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(random,query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      IndexSearcher s = QueryUtils.wrapUnderlyingReader\n        (random, searcher, i);\n      s.search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * see Searcher#search(Query,Collector)\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Random random, Query query, String defaultFieldName,\n                                       IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(random,query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      IndexSearcher s = QueryUtils.wrapUnderlyingReader\n        (random, searcher, i);\n      s.search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n      QueryUtils.purgeFieldCache(s.getIndexReader()); // our wrapping can create insanity otherwise\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkHitCollector(Random,Query,String,IndexSearcher,int[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkHitCollector(Random,Query,String,IndexSearcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Random random, Query query, String defaultFieldName,\n                                       IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(random,query,searcher);\n    \n    Set<Integer> correct = new TreeSet<>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      IndexSearcher s = QueryUtils.wrapUnderlyingReader\n        (random, searcher, i);\n      s.search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Random random, Query query, String defaultFieldName,\n                                       IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(random,query,searcher);\n    \n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<Integer>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      IndexSearcher s = QueryUtils.wrapUnderlyingReader\n        (random, searcher, i);\n      s.search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkHitCollector(Random,Query,String,IndexSearcher,int[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkHitCollector(Random,Query,String,IndexSearcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Random random, Query query, String defaultFieldName,\n                                       IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(random,query,searcher);\n    \n    Set<Integer> correct = new TreeSet<>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    assertEquals(\"Simple: \" + query.toString(defaultFieldName),\n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      IndexSearcher s = QueryUtils.wrapUnderlyingReader\n        (random, searcher, i);\n      s.search(query, c);\n      assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using a\n   * HitCollector.\n   *\n   * <p>\n   * Note that when using the HitCollector API, documents will be collected\n   * if they \"match\" regardless of what their score is.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaying the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see #checkHits\n   */\n  public static void checkHitCollector(Random random, Query query, String defaultFieldName,\n                                       IndexSearcher searcher, int[] results)\n    throws IOException {\n\n    QueryUtils.check(random,query,searcher);\n    \n    Set<Integer> correct = new TreeSet<>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n    final Set<Integer> actual = new TreeSet<>();\n    final Collector c = new SetCollector(actual);\n\n    searcher.search(query, c);\n    Assert.assertEquals(\"Simple: \" + query.toString(defaultFieldName), \n                        correct, actual);\n\n    for (int i = -1; i < 2; i++) {\n      actual.clear();\n      IndexSearcher s = QueryUtils.wrapUnderlyingReader\n        (random, searcher, i);\n      s.search(query, c);\n      Assert.assertEquals(\"Wrap Reader \" + i + \": \" +\n                          query.toString(defaultFieldName),\n                          correct, actual);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7f9d66495573b5a13a6d8b98af14a8e6c4bf75a3"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["d26d48266a017b8190206ada9ce79d8c5188aeb7","7f9d66495573b5a13a6d8b98af14a8e6c4bf75a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d26d48266a017b8190206ada9ce79d8c5188aeb7":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"1dfbab3b123144c2bf2fe399c49001108d9c721c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"7f9d66495573b5a13a6d8b98af14a8e6c4bf75a3":["1dfbab3b123144c2bf2fe399c49001108d9c721c"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d26d48266a017b8190206ada9ce79d8c5188aeb7","1dfbab3b123144c2bf2fe399c49001108d9c721c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d26d48266a017b8190206ada9ce79d8c5188aeb7":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1dfbab3b123144c2bf2fe399c49001108d9c721c":["7f9d66495573b5a13a6d8b98af14a8e6c4bf75a3"],"7f9d66495573b5a13a6d8b98af14a8e6c4bf75a3":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}