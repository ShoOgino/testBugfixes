{"path":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWTermVectorsWriter#finish(int).mjava","commits":[{"id":"5013b6ff92e8f7f62cd228936ce019f8819b092b","date":1326844034,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWTermVectorsWriter#finish(int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void finish(int numDocs) throws IOException {\n    if (4+((long) numDocs)*16 != tvx.getFilePointer())\n      // This is most likely a bug in Sun JRE 1.6.0_04/_05;\n      // we detect that the bug has struck, here, and\n      // throw an exception to prevent the corruption from\n      // entering the index.  See LUCENE-1282 for\n      // details.\n      throw new RuntimeException(\"mergeVectors produced an invalid result: mergedDocs is \" + numDocs + \" but tvx size is \" + tvx.getFilePointer() + \" file=\" + tvx.toString() + \"; now aborting this merge to prevent index corruption\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bceba72135af5802008cacb23494fc4fec2f5ee1","date":1327934198,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWTermVectorsWriter#finish(int).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWTermVectorsWriter#finish(int).mjava","sourceNew":"  @Override\n  public void finish(int numDocs) throws IOException {\n    if (4+((long) numDocs)*16 != tvx.getFilePointer())\n      // This is most likely a bug in Sun JRE 1.6.0_04/_05;\n      // we detect that the bug has struck, here, and\n      // throw an exception to prevent the corruption from\n      // entering the index.  See LUCENE-1282 for\n      // details.\n      throw new RuntimeException(\"tvx size mismatch: mergedDocs is \" + numDocs + \" but tvx size is \" + tvx.getFilePointer() + \" file=\" + tvx.toString() + \"; now aborting this merge to prevent index corruption\");\n  }\n\n","sourceOld":"  @Override\n  public void finish(int numDocs) throws IOException {\n    if (4+((long) numDocs)*16 != tvx.getFilePointer())\n      // This is most likely a bug in Sun JRE 1.6.0_04/_05;\n      // we detect that the bug has struck, here, and\n      // throw an exception to prevent the corruption from\n      // entering the index.  See LUCENE-1282 for\n      // details.\n      throw new RuntimeException(\"mergeVectors produced an invalid result: mergedDocs is \" + numDocs + \" but tvx size is \" + tvx.getFilePointer() + \" file=\" + tvx.toString() + \"; now aborting this merge to prevent index corruption\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"296df632fd63421ea20756fa11ad36fbc6f4c8a9","date":1327957998,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWTermVectorsWriter#finish(int).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWTermVectorsWriter#finish(int).mjava","sourceNew":"  @Override\n  public void finish(int numDocs) throws IOException {\n    if (4+((long) numDocs)*16 != tvx.getFilePointer())\n      // This is most likely a bug in Sun JRE 1.6.0_04/_05;\n      // we detect that the bug has struck, here, and\n      // throw an exception to prevent the corruption from\n      // entering the index.  See LUCENE-1282 for\n      // details.\n      throw new RuntimeException(\"tvx size mismatch: mergedDocs is \" + numDocs + \" but tvx size is \" + tvx.getFilePointer() + \" file=\" + tvx.toString() + \"; now aborting this merge to prevent index corruption\");\n  }\n\n","sourceOld":"  @Override\n  public void finish(int numDocs) throws IOException {\n    if (4+((long) numDocs)*16 != tvx.getFilePointer())\n      // This is most likely a bug in Sun JRE 1.6.0_04/_05;\n      // we detect that the bug has struck, here, and\n      // throw an exception to prevent the corruption from\n      // entering the index.  See LUCENE-1282 for\n      // details.\n      throw new RuntimeException(\"mergeVectors produced an invalid result: mergedDocs is \" + numDocs + \" but tvx size is \" + tvx.getFilePointer() + \" file=\" + tvx.toString() + \"; now aborting this merge to prevent index corruption\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"410e066f093e407222d9681429d209084e783149","date":1327958394,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWTermVectorsWriter#finish(int).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWTermVectorsWriter#finish(int).mjava","sourceNew":"  @Override\n  public void finish(int numDocs) throws IOException {\n    if (4+((long) numDocs)*16 != tvx.getFilePointer())\n      // This is most likely a bug in Sun JRE 1.6.0_04/_05;\n      // we detect that the bug has struck, here, and\n      // throw an exception to prevent the corruption from\n      // entering the index.  See LUCENE-1282 for\n      // details.\n      throw new RuntimeException(\"tvx size mismatch: mergedDocs is \" + numDocs + \" but tvx size is \" + tvx.getFilePointer() + \" file=\" + tvx.toString() + \"; now aborting this merge to prevent index corruption\");\n  }\n\n","sourceOld":"  @Override\n  public void finish(int numDocs) throws IOException {\n    if (4+((long) numDocs)*16 != tvx.getFilePointer())\n      // This is most likely a bug in Sun JRE 1.6.0_04/_05;\n      // we detect that the bug has struck, here, and\n      // throw an exception to prevent the corruption from\n      // entering the index.  See LUCENE-1282 for\n      // details.\n      throw new RuntimeException(\"mergeVectors produced an invalid result: mergedDocs is \" + numDocs + \" but tvx size is \" + tvx.getFilePointer() + \" file=\" + tvx.toString() + \"; now aborting this merge to prevent index corruption\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e92a321a2612261e1010a4038c8586e30b081552","date":1328456689,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/codecs/lucene3x/PreFlexRWTermVectorsWriter#finish(int).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWTermVectorsWriter#finish(int).mjava","sourceNew":"  @Override\n  public void finish(int numDocs) throws IOException {\n    if (4+((long) numDocs)*16 != tvx.getFilePointer())\n      // This is most likely a bug in Sun JRE 1.6.0_04/_05;\n      // we detect that the bug has struck, here, and\n      // throw an exception to prevent the corruption from\n      // entering the index.  See LUCENE-1282 for\n      // details.\n      throw new RuntimeException(\"tvx size mismatch: mergedDocs is \" + numDocs + \" but tvx size is \" + tvx.getFilePointer() + \" file=\" + tvx.toString() + \"; now aborting this merge to prevent index corruption\");\n  }\n\n","sourceOld":"  @Override\n  public void finish(int numDocs) throws IOException {\n    if (4+((long) numDocs)*16 != tvx.getFilePointer())\n      // This is most likely a bug in Sun JRE 1.6.0_04/_05;\n      // we detect that the bug has struck, here, and\n      // throw an exception to prevent the corruption from\n      // entering the index.  See LUCENE-1282 for\n      // details.\n      throw new RuntimeException(\"tvx size mismatch: mergedDocs is \" + numDocs + \" but tvx size is \" + tvx.getFilePointer() + \" file=\" + tvx.toString() + \"; now aborting this merge to prevent index corruption\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5013b6ff92e8f7f62cd228936ce019f8819b092b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"410e066f093e407222d9681429d209084e783149":["5013b6ff92e8f7f62cd228936ce019f8819b092b","296df632fd63421ea20756fa11ad36fbc6f4c8a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bceba72135af5802008cacb23494fc4fec2f5ee1":["5013b6ff92e8f7f62cd228936ce019f8819b092b"],"296df632fd63421ea20756fa11ad36fbc6f4c8a9":["5013b6ff92e8f7f62cd228936ce019f8819b092b","bceba72135af5802008cacb23494fc4fec2f5ee1"],"e92a321a2612261e1010a4038c8586e30b081552":["296df632fd63421ea20756fa11ad36fbc6f4c8a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e92a321a2612261e1010a4038c8586e30b081552"]},"commit2Childs":{"5013b6ff92e8f7f62cd228936ce019f8819b092b":["410e066f093e407222d9681429d209084e783149","bceba72135af5802008cacb23494fc4fec2f5ee1","296df632fd63421ea20756fa11ad36fbc6f4c8a9"],"410e066f093e407222d9681429d209084e783149":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5013b6ff92e8f7f62cd228936ce019f8819b092b"],"bceba72135af5802008cacb23494fc4fec2f5ee1":["296df632fd63421ea20756fa11ad36fbc6f4c8a9"],"296df632fd63421ea20756fa11ad36fbc6f4c8a9":["410e066f093e407222d9681429d209084e783149","e92a321a2612261e1010a4038c8586e30b081552"],"e92a321a2612261e1010a4038c8586e30b081552":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["410e066f093e407222d9681429d209084e783149","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}