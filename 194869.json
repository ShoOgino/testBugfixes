{"path":"solr/core/src/java/org/apache/solr/handler/SQLHandler#doGroupByWithAggregatesFacets(SQLVisitor).mjava","commits":[{"id":"79509167584beb75c0b777d2b701adeb1f06d885","date":1441841855,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#doGroupByWithAggregatesFacets(SQLVisitor).mjava","pathOld":"/dev/null","sourceNew":"  private static TupleStream doGroupByWithAggregatesFacets(SQLVisitor sqlVisitor) throws IOException {\n\n    Set<String> fieldSet = new HashSet();\n    Bucket[] buckets = getBuckets(sqlVisitor.groupBy, fieldSet);\n    Metric[] metrics = getMetrics(sqlVisitor.fields, fieldSet);\n    if(metrics.length == 0) {\n      throw new IOException(\"Group by queries must include atleast one aggregate function.\");\n    }\n\n    TableSpec tableSpec = new TableSpec(sqlVisitor.table, defaultZkhost);\n\n    String zkHost = tableSpec.zkHost;\n    String collection = tableSpec.collection;\n    Map<String, String> params = new HashMap();\n\n    params.put(CommonParams.Q, sqlVisitor.query);\n\n    int limit = sqlVisitor.limit > 0 ? sqlVisitor.limit : 100;\n\n    FieldComparator[] sorts = null;\n\n    if(sqlVisitor.sorts == null) {\n      sorts = new FieldComparator[buckets.length];\n      for(int i=0; i<sorts.length; i++) {\n        sorts[i] = new FieldComparator(\"index\", ComparatorOrder.ASCENDING);\n      }\n    } else {\n      sorts = getComps(sqlVisitor.sorts);\n    }\n\n    TupleStream tupleStream = new FacetStream(zkHost,\n                                              collection,\n                                              params,\n                                              buckets,\n                                              metrics,\n                                              sorts,\n                                              limit);\n\n    if(sqlVisitor.havingExpression != null) {\n      tupleStream = new HavingStream(tupleStream, sqlVisitor.havingExpression);\n    }\n\n    if(sqlVisitor.limit > 0)\n    {\n      tupleStream = new LimitStream(tupleStream, sqlVisitor.limit);\n    }\n\n    return tupleStream;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7","date":1452631653,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#doGroupByWithAggregatesFacets(SQLVisitor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#doGroupByWithAggregatesFacets(SQLVisitor).mjava","sourceNew":"  private static TupleStream doGroupByWithAggregatesFacets(SQLVisitor sqlVisitor) throws IOException {\n\n    Set<String> fieldSet = new HashSet();\n    Bucket[] buckets = getBuckets(sqlVisitor.groupBy, fieldSet);\n    Metric[] metrics = getMetrics(sqlVisitor.fields, fieldSet);\n    if(metrics.length == 0) {\n      throw new IOException(\"Group by queries must include atleast one aggregate function.\");\n    }\n\n    TableSpec tableSpec = new TableSpec(sqlVisitor.table, defaultZkhost);\n\n    String zkHost = tableSpec.zkHost;\n    String collection = tableSpec.collection;\n    Map<String, String> params = new HashMap();\n\n    params.put(CommonParams.Q, sqlVisitor.query);\n\n    int limit = sqlVisitor.limit > 0 ? sqlVisitor.limit : 100;\n\n    FieldComparator[] sorts = null;\n\n    if(sqlVisitor.sorts == null) {\n      sorts = new FieldComparator[buckets.length];\n      for(int i=0; i<sorts.length; i++) {\n        sorts[i] = new FieldComparator(\"index\", ComparatorOrder.ASCENDING);\n      }\n    } else {\n      sorts = getComps(sqlVisitor.sorts, sqlVisitor.reverseColumnAliases);\n    }\n\n    TupleStream tupleStream = new FacetStream(zkHost,\n                                              collection,\n                                              params,\n                                              buckets,\n                                              metrics,\n                                              sorts,\n                                              limit);\n\n    if(sqlVisitor.havingExpression != null) {\n      tupleStream = new HavingStream(tupleStream, sqlVisitor.havingExpression, sqlVisitor.reverseColumnAliases);\n    }\n\n    if(sqlVisitor.limit > 0)\n    {\n      tupleStream = new LimitStream(tupleStream, sqlVisitor.limit);\n    }\n\n    if(sqlVisitor.hasColumnAliases) {\n      tupleStream = new SelectStream(tupleStream, sqlVisitor.columnAliases);\n    }\n\n    return tupleStream;\n  }\n\n","sourceOld":"  private static TupleStream doGroupByWithAggregatesFacets(SQLVisitor sqlVisitor) throws IOException {\n\n    Set<String> fieldSet = new HashSet();\n    Bucket[] buckets = getBuckets(sqlVisitor.groupBy, fieldSet);\n    Metric[] metrics = getMetrics(sqlVisitor.fields, fieldSet);\n    if(metrics.length == 0) {\n      throw new IOException(\"Group by queries must include atleast one aggregate function.\");\n    }\n\n    TableSpec tableSpec = new TableSpec(sqlVisitor.table, defaultZkhost);\n\n    String zkHost = tableSpec.zkHost;\n    String collection = tableSpec.collection;\n    Map<String, String> params = new HashMap();\n\n    params.put(CommonParams.Q, sqlVisitor.query);\n\n    int limit = sqlVisitor.limit > 0 ? sqlVisitor.limit : 100;\n\n    FieldComparator[] sorts = null;\n\n    if(sqlVisitor.sorts == null) {\n      sorts = new FieldComparator[buckets.length];\n      for(int i=0; i<sorts.length; i++) {\n        sorts[i] = new FieldComparator(\"index\", ComparatorOrder.ASCENDING);\n      }\n    } else {\n      sorts = getComps(sqlVisitor.sorts);\n    }\n\n    TupleStream tupleStream = new FacetStream(zkHost,\n                                              collection,\n                                              params,\n                                              buckets,\n                                              metrics,\n                                              sorts,\n                                              limit);\n\n    if(sqlVisitor.havingExpression != null) {\n      tupleStream = new HavingStream(tupleStream, sqlVisitor.havingExpression);\n    }\n\n    if(sqlVisitor.limit > 0)\n    {\n      tupleStream = new LimitStream(tupleStream, sqlVisitor.limit);\n    }\n\n    return tupleStream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d984627825732e682759c22df7a3b171a80f3812","date":1461857653,"type":4,"author":"Kevin Risden","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#doGroupByWithAggregatesFacets(SQLVisitor).mjava","sourceNew":null,"sourceOld":"  private static TupleStream doGroupByWithAggregatesFacets(SQLVisitor sqlVisitor) throws IOException {\n\n    Set<String> fieldSet = new HashSet();\n    Bucket[] buckets = getBuckets(sqlVisitor.groupBy, fieldSet);\n    Metric[] metrics = getMetrics(sqlVisitor.fields, fieldSet);\n    if(metrics.length == 0) {\n      throw new IOException(\"Group by queries must include atleast one aggregate function.\");\n    }\n\n    TableSpec tableSpec = new TableSpec(sqlVisitor.table, defaultZkhost);\n\n    String zkHost = tableSpec.zkHost;\n    String collection = tableSpec.collection;\n    Map<String, String> params = new HashMap();\n\n    params.put(CommonParams.Q, sqlVisitor.query);\n\n    int limit = sqlVisitor.limit > 0 ? sqlVisitor.limit : 100;\n\n    FieldComparator[] sorts = null;\n\n    if(sqlVisitor.sorts == null) {\n      sorts = new FieldComparator[buckets.length];\n      for(int i=0; i<sorts.length; i++) {\n        sorts[i] = new FieldComparator(\"index\", ComparatorOrder.ASCENDING);\n      }\n    } else {\n      sorts = getComps(sqlVisitor.sorts, sqlVisitor.reverseColumnAliases);\n    }\n\n    TupleStream tupleStream = new FacetStream(zkHost,\n                                              collection,\n                                              params,\n                                              buckets,\n                                              metrics,\n                                              sorts,\n                                              limit);\n\n    if(sqlVisitor.havingExpression != null) {\n      tupleStream = new HavingStream(tupleStream, sqlVisitor.havingExpression, sqlVisitor.reverseColumnAliases);\n    }\n\n    if(sqlVisitor.limit > 0)\n    {\n      tupleStream = new LimitStream(tupleStream, sqlVisitor.limit);\n    }\n\n    if(sqlVisitor.hasColumnAliases) {\n      tupleStream = new SelectStream(tupleStream, sqlVisitor.columnAliases);\n    }\n\n    return tupleStream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"826d15444ddf61716dc768c229cd54b2c2ccce1c","date":1462822652,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#doGroupByWithAggregatesFacets(SQLVisitor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#doGroupByWithAggregatesFacets(SQLVisitor).mjava","sourceNew":"  private static TupleStream doGroupByWithAggregatesFacets(SQLVisitor sqlVisitor) throws IOException {\n\n    Set<String> fieldSet = new HashSet();\n    Bucket[] buckets = getBuckets(sqlVisitor.groupBy, fieldSet);\n    Metric[] metrics = getMetrics(sqlVisitor.fields, fieldSet);\n    if(metrics.length == 0) {\n      throw new IOException(\"Group by queries must include atleast one aggregate function.\");\n    }\n\n    TableSpec tableSpec = new TableSpec(sqlVisitor.table, defaultZkhost);\n\n    String zkHost = tableSpec.zkHost;\n    String collection = tableSpec.collection;\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CommonParams.Q, sqlVisitor.query);\n\n    int limit = sqlVisitor.limit > 0 ? sqlVisitor.limit : 100;\n\n    FieldComparator[] sorts = null;\n\n    if(sqlVisitor.sorts == null) {\n      sorts = new FieldComparator[buckets.length];\n      for(int i=0; i<sorts.length; i++) {\n        sorts[i] = new FieldComparator(\"index\", ComparatorOrder.ASCENDING);\n      }\n    } else {\n      sorts = getComps(sqlVisitor.sorts, sqlVisitor.reverseColumnAliases);\n    }\n\n    TupleStream tupleStream = new FacetStream(zkHost,\n                                              collection,\n                                              params,\n                                              buckets,\n                                              metrics,\n                                              sorts,\n                                              limit);\n\n    if(sqlVisitor.havingExpression != null) {\n      tupleStream = new HavingStream(tupleStream, sqlVisitor.havingExpression, sqlVisitor.reverseColumnAliases);\n    }\n\n    if(sqlVisitor.limit > 0)\n    {\n      tupleStream = new LimitStream(tupleStream, sqlVisitor.limit);\n    }\n\n    if(sqlVisitor.hasColumnAliases) {\n      tupleStream = new SelectStream(tupleStream, sqlVisitor.columnAliases);\n    }\n\n    return tupleStream;\n  }\n\n","sourceOld":"  private static TupleStream doGroupByWithAggregatesFacets(SQLVisitor sqlVisitor) throws IOException {\n\n    Set<String> fieldSet = new HashSet();\n    Bucket[] buckets = getBuckets(sqlVisitor.groupBy, fieldSet);\n    Metric[] metrics = getMetrics(sqlVisitor.fields, fieldSet);\n    if(metrics.length == 0) {\n      throw new IOException(\"Group by queries must include atleast one aggregate function.\");\n    }\n\n    TableSpec tableSpec = new TableSpec(sqlVisitor.table, defaultZkhost);\n\n    String zkHost = tableSpec.zkHost;\n    String collection = tableSpec.collection;\n    Map<String, String> params = new HashMap();\n\n    params.put(CommonParams.Q, sqlVisitor.query);\n\n    int limit = sqlVisitor.limit > 0 ? sqlVisitor.limit : 100;\n\n    FieldComparator[] sorts = null;\n\n    if(sqlVisitor.sorts == null) {\n      sorts = new FieldComparator[buckets.length];\n      for(int i=0; i<sorts.length; i++) {\n        sorts[i] = new FieldComparator(\"index\", ComparatorOrder.ASCENDING);\n      }\n    } else {\n      sorts = getComps(sqlVisitor.sorts, sqlVisitor.reverseColumnAliases);\n    }\n\n    TupleStream tupleStream = new FacetStream(zkHost,\n                                              collection,\n                                              params,\n                                              buckets,\n                                              metrics,\n                                              sorts,\n                                              limit);\n\n    if(sqlVisitor.havingExpression != null) {\n      tupleStream = new HavingStream(tupleStream, sqlVisitor.havingExpression, sqlVisitor.reverseColumnAliases);\n    }\n\n    if(sqlVisitor.limit > 0)\n    {\n      tupleStream = new LimitStream(tupleStream, sqlVisitor.limit);\n    }\n\n    if(sqlVisitor.hasColumnAliases) {\n      tupleStream = new SelectStream(tupleStream, sqlVisitor.columnAliases);\n    }\n\n    return tupleStream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#doGroupByWithAggregatesFacets(SQLVisitor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#doGroupByWithAggregatesFacets(SQLVisitor).mjava","sourceNew":"  private static TupleStream doGroupByWithAggregatesFacets(SQLVisitor sqlVisitor) throws IOException {\n\n    Set<String> fieldSet = new HashSet();\n    Bucket[] buckets = getBuckets(sqlVisitor.groupBy, fieldSet);\n    Metric[] metrics = getMetrics(sqlVisitor.fields, fieldSet);\n    if(metrics.length == 0) {\n      throw new IOException(\"Group by queries must include atleast one aggregate function.\");\n    }\n\n    TableSpec tableSpec = new TableSpec(sqlVisitor.table, defaultZkhost);\n\n    String zkHost = tableSpec.zkHost;\n    String collection = tableSpec.collection;\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CommonParams.Q, sqlVisitor.query);\n\n    int limit = sqlVisitor.limit > 0 ? sqlVisitor.limit : 100;\n\n    FieldComparator[] sorts = null;\n\n    if(sqlVisitor.sorts == null) {\n      sorts = new FieldComparator[buckets.length];\n      for(int i=0; i<sorts.length; i++) {\n        sorts[i] = new FieldComparator(\"index\", ComparatorOrder.ASCENDING);\n      }\n    } else {\n      sorts = getComps(sqlVisitor.sorts, sqlVisitor.reverseColumnAliases);\n    }\n\n    TupleStream tupleStream = new FacetStream(zkHost,\n                                              collection,\n                                              params,\n                                              buckets,\n                                              metrics,\n                                              sorts,\n                                              limit);\n\n    if(sqlVisitor.havingExpression != null) {\n      tupleStream = new HavingStream(tupleStream, sqlVisitor.havingExpression, sqlVisitor.reverseColumnAliases);\n    }\n\n    if(sqlVisitor.limit > 0)\n    {\n      tupleStream = new LimitStream(tupleStream, sqlVisitor.limit);\n    }\n\n    if(sqlVisitor.hasColumnAliases) {\n      tupleStream = new SelectStream(tupleStream, sqlVisitor.columnAliases);\n    }\n\n    return tupleStream;\n  }\n\n","sourceOld":"  private static TupleStream doGroupByWithAggregatesFacets(SQLVisitor sqlVisitor) throws IOException {\n\n    Set<String> fieldSet = new HashSet();\n    Bucket[] buckets = getBuckets(sqlVisitor.groupBy, fieldSet);\n    Metric[] metrics = getMetrics(sqlVisitor.fields, fieldSet);\n    if(metrics.length == 0) {\n      throw new IOException(\"Group by queries must include atleast one aggregate function.\");\n    }\n\n    TableSpec tableSpec = new TableSpec(sqlVisitor.table, defaultZkhost);\n\n    String zkHost = tableSpec.zkHost;\n    String collection = tableSpec.collection;\n    Map<String, String> params = new HashMap();\n\n    params.put(CommonParams.Q, sqlVisitor.query);\n\n    int limit = sqlVisitor.limit > 0 ? sqlVisitor.limit : 100;\n\n    FieldComparator[] sorts = null;\n\n    if(sqlVisitor.sorts == null) {\n      sorts = new FieldComparator[buckets.length];\n      for(int i=0; i<sorts.length; i++) {\n        sorts[i] = new FieldComparator(\"index\", ComparatorOrder.ASCENDING);\n      }\n    } else {\n      sorts = getComps(sqlVisitor.sorts, sqlVisitor.reverseColumnAliases);\n    }\n\n    TupleStream tupleStream = new FacetStream(zkHost,\n                                              collection,\n                                              params,\n                                              buckets,\n                                              metrics,\n                                              sorts,\n                                              limit);\n\n    if(sqlVisitor.havingExpression != null) {\n      tupleStream = new HavingStream(tupleStream, sqlVisitor.havingExpression, sqlVisitor.reverseColumnAliases);\n    }\n\n    if(sqlVisitor.limit > 0)\n    {\n      tupleStream = new LimitStream(tupleStream, sqlVisitor.limit);\n    }\n\n    if(sqlVisitor.hasColumnAliases) {\n      tupleStream = new SelectStream(tupleStream, sqlVisitor.columnAliases);\n    }\n\n    return tupleStream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0158ced21948b6626f733c1c42c1e18d94449789","date":1462994341,"type":3,"author":"Bartosz Krasiński","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#doGroupByWithAggregatesFacets(SQLVisitor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#doGroupByWithAggregatesFacets(SQLVisitor).mjava","sourceNew":"  private static TupleStream doGroupByWithAggregatesFacets(SQLVisitor sqlVisitor) throws IOException {\n\n    Set<String> fieldSet = new HashSet();\n    Bucket[] buckets = getBuckets(sqlVisitor.groupBy, fieldSet);\n    Metric[] metrics = getMetrics(sqlVisitor.fields, fieldSet);\n    if(metrics.length == 0) {\n      throw new IOException(\"Group by queries must include at least one aggregate function.\");\n    }\n\n    TableSpec tableSpec = new TableSpec(sqlVisitor.table, defaultZkhost);\n\n    String zkHost = tableSpec.zkHost;\n    String collection = tableSpec.collection;\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CommonParams.Q, sqlVisitor.query);\n\n    int limit = sqlVisitor.limit > 0 ? sqlVisitor.limit : 100;\n\n    FieldComparator[] sorts = null;\n\n    if(sqlVisitor.sorts == null) {\n      sorts = new FieldComparator[buckets.length];\n      for(int i=0; i<sorts.length; i++) {\n        sorts[i] = new FieldComparator(\"index\", ComparatorOrder.ASCENDING);\n      }\n    } else {\n      sorts = getComps(sqlVisitor.sorts, sqlVisitor.reverseColumnAliases);\n    }\n\n    TupleStream tupleStream = new FacetStream(zkHost,\n                                              collection,\n                                              params,\n                                              buckets,\n                                              metrics,\n                                              sorts,\n                                              limit);\n\n    if(sqlVisitor.havingExpression != null) {\n      tupleStream = new HavingStream(tupleStream, sqlVisitor.havingExpression, sqlVisitor.reverseColumnAliases);\n    }\n\n    if(sqlVisitor.limit > 0)\n    {\n      tupleStream = new LimitStream(tupleStream, sqlVisitor.limit);\n    }\n\n    if(sqlVisitor.hasColumnAliases) {\n      tupleStream = new SelectStream(tupleStream, sqlVisitor.columnAliases);\n    }\n\n    return tupleStream;\n  }\n\n","sourceOld":"  private static TupleStream doGroupByWithAggregatesFacets(SQLVisitor sqlVisitor) throws IOException {\n\n    Set<String> fieldSet = new HashSet();\n    Bucket[] buckets = getBuckets(sqlVisitor.groupBy, fieldSet);\n    Metric[] metrics = getMetrics(sqlVisitor.fields, fieldSet);\n    if(metrics.length == 0) {\n      throw new IOException(\"Group by queries must include atleast one aggregate function.\");\n    }\n\n    TableSpec tableSpec = new TableSpec(sqlVisitor.table, defaultZkhost);\n\n    String zkHost = tableSpec.zkHost;\n    String collection = tableSpec.collection;\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CommonParams.Q, sqlVisitor.query);\n\n    int limit = sqlVisitor.limit > 0 ? sqlVisitor.limit : 100;\n\n    FieldComparator[] sorts = null;\n\n    if(sqlVisitor.sorts == null) {\n      sorts = new FieldComparator[buckets.length];\n      for(int i=0; i<sorts.length; i++) {\n        sorts[i] = new FieldComparator(\"index\", ComparatorOrder.ASCENDING);\n      }\n    } else {\n      sorts = getComps(sqlVisitor.sorts, sqlVisitor.reverseColumnAliases);\n    }\n\n    TupleStream tupleStream = new FacetStream(zkHost,\n                                              collection,\n                                              params,\n                                              buckets,\n                                              metrics,\n                                              sorts,\n                                              limit);\n\n    if(sqlVisitor.havingExpression != null) {\n      tupleStream = new HavingStream(tupleStream, sqlVisitor.havingExpression, sqlVisitor.reverseColumnAliases);\n    }\n\n    if(sqlVisitor.limit > 0)\n    {\n      tupleStream = new LimitStream(tupleStream, sqlVisitor.limit);\n    }\n\n    if(sqlVisitor.hasColumnAliases) {\n      tupleStream = new SelectStream(tupleStream, sqlVisitor.columnAliases);\n    }\n\n    return tupleStream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#doGroupByWithAggregatesFacets(SQLVisitor).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#doGroupByWithAggregatesFacets(SQLVisitor).mjava","sourceNew":"  private static TupleStream doGroupByWithAggregatesFacets(SQLVisitor sqlVisitor) throws IOException {\n\n    Set<String> fieldSet = new HashSet();\n    Bucket[] buckets = getBuckets(sqlVisitor.groupBy, fieldSet);\n    Metric[] metrics = getMetrics(sqlVisitor.fields, fieldSet);\n    if(metrics.length == 0) {\n      throw new IOException(\"Group by queries must include at least one aggregate function.\");\n    }\n\n    TableSpec tableSpec = new TableSpec(sqlVisitor.table, defaultZkhost);\n\n    String zkHost = tableSpec.zkHost;\n    String collection = tableSpec.collection;\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CommonParams.Q, sqlVisitor.query);\n\n    int limit = sqlVisitor.limit > 0 ? sqlVisitor.limit : 100;\n\n    FieldComparator[] sorts = null;\n\n    if(sqlVisitor.sorts == null) {\n      sorts = new FieldComparator[buckets.length];\n      for(int i=0; i<sorts.length; i++) {\n        sorts[i] = new FieldComparator(\"index\", ComparatorOrder.ASCENDING);\n      }\n    } else {\n      sorts = getComps(sqlVisitor.sorts, sqlVisitor.reverseColumnAliases);\n    }\n\n    TupleStream tupleStream = new FacetStream(zkHost,\n                                              collection,\n                                              params,\n                                              buckets,\n                                              metrics,\n                                              sorts,\n                                              limit);\n\n    if(sqlVisitor.havingExpression != null) {\n      tupleStream = new HavingStream(tupleStream, sqlVisitor.havingExpression, sqlVisitor.reverseColumnAliases);\n    }\n\n    if(sqlVisitor.limit > 0)\n    {\n      tupleStream = new LimitStream(tupleStream, sqlVisitor.limit);\n    }\n\n    if(sqlVisitor.hasColumnAliases) {\n      tupleStream = new SelectStream(tupleStream, sqlVisitor.columnAliases);\n    }\n\n    return tupleStream;\n  }\n\n","sourceOld":"  private static TupleStream doGroupByWithAggregatesFacets(SQLVisitor sqlVisitor) throws IOException {\n\n    Set<String> fieldSet = new HashSet();\n    Bucket[] buckets = getBuckets(sqlVisitor.groupBy, fieldSet);\n    Metric[] metrics = getMetrics(sqlVisitor.fields, fieldSet);\n    if(metrics.length == 0) {\n      throw new IOException(\"Group by queries must include atleast one aggregate function.\");\n    }\n\n    TableSpec tableSpec = new TableSpec(sqlVisitor.table, defaultZkhost);\n\n    String zkHost = tableSpec.zkHost;\n    String collection = tableSpec.collection;\n    Map<String, String> params = new HashMap();\n\n    params.put(CommonParams.Q, sqlVisitor.query);\n\n    int limit = sqlVisitor.limit > 0 ? sqlVisitor.limit : 100;\n\n    FieldComparator[] sorts = null;\n\n    if(sqlVisitor.sorts == null) {\n      sorts = new FieldComparator[buckets.length];\n      for(int i=0; i<sorts.length; i++) {\n        sorts[i] = new FieldComparator(\"index\", ComparatorOrder.ASCENDING);\n      }\n    } else {\n      sorts = getComps(sqlVisitor.sorts, sqlVisitor.reverseColumnAliases);\n    }\n\n    TupleStream tupleStream = new FacetStream(zkHost,\n                                              collection,\n                                              params,\n                                              buckets,\n                                              metrics,\n                                              sorts,\n                                              limit);\n\n    if(sqlVisitor.havingExpression != null) {\n      tupleStream = new HavingStream(tupleStream, sqlVisitor.havingExpression, sqlVisitor.reverseColumnAliases);\n    }\n\n    if(sqlVisitor.limit > 0)\n    {\n      tupleStream = new LimitStream(tupleStream, sqlVisitor.limit);\n    }\n\n    if(sqlVisitor.hasColumnAliases) {\n      tupleStream = new SelectStream(tupleStream, sqlVisitor.columnAliases);\n    }\n\n    return tupleStream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"116fdd6b9e04e18a6547a5650bc0afd3fda020aa","date":1487184909,"type":4,"author":"Joel Bernstein","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#doGroupByWithAggregatesFacets(SQLVisitor).mjava","sourceNew":null,"sourceOld":"  private static TupleStream doGroupByWithAggregatesFacets(SQLVisitor sqlVisitor) throws IOException {\n\n    Set<String> fieldSet = new HashSet();\n    Bucket[] buckets = getBuckets(sqlVisitor.groupBy, fieldSet);\n    Metric[] metrics = getMetrics(sqlVisitor.fields, fieldSet);\n    if(metrics.length == 0) {\n      throw new IOException(\"Group by queries must include at least one aggregate function.\");\n    }\n\n    TableSpec tableSpec = new TableSpec(sqlVisitor.table, defaultZkhost);\n\n    String zkHost = tableSpec.zkHost;\n    String collection = tableSpec.collection;\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.set(CommonParams.Q, sqlVisitor.query);\n\n    int limit = sqlVisitor.limit > 0 ? sqlVisitor.limit : 100;\n\n    FieldComparator[] sorts = null;\n\n    if(sqlVisitor.sorts == null) {\n      sorts = new FieldComparator[buckets.length];\n      for(int i=0; i<sorts.length; i++) {\n        sorts[i] = new FieldComparator(\"index\", ComparatorOrder.ASCENDING);\n      }\n    } else {\n      sorts = getComps(sqlVisitor.sorts, sqlVisitor.reverseColumnAliases);\n    }\n\n    TupleStream tupleStream = new FacetStream(zkHost,\n                                              collection,\n                                              params,\n                                              buckets,\n                                              metrics,\n                                              sorts,\n                                              limit);\n\n    if(sqlVisitor.havingExpression != null) {\n      tupleStream = new HavingStream(tupleStream, sqlVisitor.havingExpression, sqlVisitor.reverseColumnAliases);\n    }\n\n    if(sqlVisitor.limit > 0)\n    {\n      tupleStream = new LimitStream(tupleStream, sqlVisitor.limit);\n    }\n\n    if(sqlVisitor.hasColumnAliases) {\n      tupleStream = new SelectStream(tupleStream, sqlVisitor.columnAliases);\n    }\n\n    return tupleStream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["d470c8182e92b264680e34081b75e70a9f2b3c89","d984627825732e682759c22df7a3b171a80f3812"],"d984627825732e682759c22df7a3b171a80f3812":["5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7"],"79509167584beb75c0b777d2b701adeb1f06d885":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7":["79509167584beb75c0b777d2b701adeb1f06d885"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e66a459d38c1c4a2f97128433dab546f683a9fed":["5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7","0158ced21948b6626f733c1c42c1e18d94449789"],"0158ced21948b6626f733c1c42c1e18d94449789":["826d15444ddf61716dc768c229cd54b2c2ccce1c"]},"commit2Childs":{"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d984627825732e682759c22df7a3b171a80f3812":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"79509167584beb75c0b777d2b701adeb1f06d885":["5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7"],"5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7":["d984627825732e682759c22df7a3b171a80f3812","e66a459d38c1c4a2f97128433dab546f683a9fed","826d15444ddf61716dc768c229cd54b2c2ccce1c","d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["79509167584beb75c0b777d2b701adeb1f06d885"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["e66a459d38c1c4a2f97128433dab546f683a9fed","0158ced21948b6626f733c1c42c1e18d94449789"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0158ced21948b6626f733c1c42c1e18d94449789":["d470c8182e92b264680e34081b75e70a9f2b3c89"]},"heads":["e66a459d38c1c4a2f97128433dab546f683a9fed","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}