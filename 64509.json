{"path":"solr/core/src/java/org/apache/solr/update/processor/RegexpBoostProcessor#initBoostEntries(InputStream).mjava","commits":[{"id":"acb8905efb68758118cfb4ff3c75d2169aa0182b","date":1359637120,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/RegexpBoostProcessor#initBoostEntries(InputStream).mjava","pathOld":"/dev/null","sourceNew":"  private List<BoostEntry> initBoostEntries(InputStream is) throws IOException {\n    List<BoostEntry> newBoostEntries = new ArrayList<BoostEntry>();\n    \n    BufferedReader reader = new BufferedReader(new InputStreamReader(is, Charset.forName(\"UTF-8\")));\n    try {\n      String line = null;\n      while ((line = reader.readLine()) != null) {\n        // Remove comments\n        line = line.replaceAll(\"\\\\s+#.*$\", \"\");\n        line = line.replaceAll(\"^#.*$\", \"\");\n\n        // Skip empty lines or comment lines\n        if (line.trim().length() == 0) {\n          continue;\n        }\n\n        String[] fields = line.split(\"\\\\s+\");\n\n        if (fields.length == 2) {\n          String regexp = fields[0];\n          String boost = fields[1];\n          newBoostEntries.add(new BoostEntry(Pattern.compile(regexp), Double.parseDouble(boost)));\n          log.debug(\"Read regexp \" + regexp + \" with boost \" + boost);\n        } else {\n          log.warn(\"Malformed config input line: \" + line + \" (expected 2 fields, got \" + fields.length + \" fields).  Skipping entry.\");\n          continue;\n        }\n      }\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n\n    return newBoostEntries;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0bf1d4eb51af6e03fffcbf80f0b5d69923c9f86","date":1359670147,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/RegexpBoostProcessor#initBoostEntries(InputStream).mjava","pathOld":"/dev/null","sourceNew":"  private List<BoostEntry> initBoostEntries(InputStream is) throws IOException {\n    List<BoostEntry> newBoostEntries = new ArrayList<BoostEntry>();\n    \n    BufferedReader reader = new BufferedReader(new InputStreamReader(is, Charset.forName(\"UTF-8\")));\n    try {\n      String line = null;\n      while ((line = reader.readLine()) != null) {\n        // Remove comments\n        line = line.replaceAll(\"\\\\s+#.*$\", \"\");\n        line = line.replaceAll(\"^#.*$\", \"\");\n\n        // Skip empty lines or comment lines\n        if (line.trim().length() == 0) {\n          continue;\n        }\n\n        String[] fields = line.split(\"\\\\s+\");\n\n        if (fields.length == 2) {\n          String regexp = fields[0];\n          String boost = fields[1];\n          newBoostEntries.add(new BoostEntry(Pattern.compile(regexp), Double.parseDouble(boost)));\n          log.debug(\"Read regexp \" + regexp + \" with boost \" + boost);\n        } else {\n          log.warn(\"Malformed config input line: \" + line + \" (expected 2 fields, got \" + fields.length + \" fields).  Skipping entry.\");\n          continue;\n        }\n      }\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n\n    return newBoostEntries;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/RegexpBoostProcessor#initBoostEntries(InputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/RegexpBoostProcessor#initBoostEntries(InputStream).mjava","sourceNew":"  private List<BoostEntry> initBoostEntries(InputStream is) throws IOException {\n    List<BoostEntry> newBoostEntries = new ArrayList<>();\n    \n    BufferedReader reader = new BufferedReader(new InputStreamReader(is, Charset.forName(\"UTF-8\")));\n    try {\n      String line = null;\n      while ((line = reader.readLine()) != null) {\n        // Remove comments\n        line = line.replaceAll(\"\\\\s+#.*$\", \"\");\n        line = line.replaceAll(\"^#.*$\", \"\");\n\n        // Skip empty lines or comment lines\n        if (line.trim().length() == 0) {\n          continue;\n        }\n\n        String[] fields = line.split(\"\\\\s+\");\n\n        if (fields.length == 2) {\n          String regexp = fields[0];\n          String boost = fields[1];\n          newBoostEntries.add(new BoostEntry(Pattern.compile(regexp), Double.parseDouble(boost)));\n          log.debug(\"Read regexp \" + regexp + \" with boost \" + boost);\n        } else {\n          log.warn(\"Malformed config input line: \" + line + \" (expected 2 fields, got \" + fields.length + \" fields).  Skipping entry.\");\n          continue;\n        }\n      }\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n\n    return newBoostEntries;\n  }\n\n","sourceOld":"  private List<BoostEntry> initBoostEntries(InputStream is) throws IOException {\n    List<BoostEntry> newBoostEntries = new ArrayList<BoostEntry>();\n    \n    BufferedReader reader = new BufferedReader(new InputStreamReader(is, Charset.forName(\"UTF-8\")));\n    try {\n      String line = null;\n      while ((line = reader.readLine()) != null) {\n        // Remove comments\n        line = line.replaceAll(\"\\\\s+#.*$\", \"\");\n        line = line.replaceAll(\"^#.*$\", \"\");\n\n        // Skip empty lines or comment lines\n        if (line.trim().length() == 0) {\n          continue;\n        }\n\n        String[] fields = line.split(\"\\\\s+\");\n\n        if (fields.length == 2) {\n          String regexp = fields[0];\n          String boost = fields[1];\n          newBoostEntries.add(new BoostEntry(Pattern.compile(regexp), Double.parseDouble(boost)));\n          log.debug(\"Read regexp \" + regexp + \" with boost \" + boost);\n        } else {\n          log.warn(\"Malformed config input line: \" + line + \" (expected 2 fields, got \" + fields.length + \" fields).  Skipping entry.\");\n          continue;\n        }\n      }\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n\n    return newBoostEntries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d3d365762604952e436b51980101dfc84cc1b3e","date":1396298116,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/RegexpBoostProcessor#initBoostEntries(InputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/RegexpBoostProcessor#initBoostEntries(InputStream).mjava","sourceNew":"  private List<BoostEntry> initBoostEntries(InputStream is) throws IOException {\n    List<BoostEntry> newBoostEntries = new ArrayList<>();\n    \n    BufferedReader reader = new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8));\n    try {\n      String line = null;\n      while ((line = reader.readLine()) != null) {\n        // Remove comments\n        line = line.replaceAll(\"\\\\s+#.*$\", \"\");\n        line = line.replaceAll(\"^#.*$\", \"\");\n\n        // Skip empty lines or comment lines\n        if (line.trim().length() == 0) {\n          continue;\n        }\n\n        String[] fields = line.split(\"\\\\s+\");\n\n        if (fields.length == 2) {\n          String regexp = fields[0];\n          String boost = fields[1];\n          newBoostEntries.add(new BoostEntry(Pattern.compile(regexp), Double.parseDouble(boost)));\n          log.debug(\"Read regexp \" + regexp + \" with boost \" + boost);\n        } else {\n          log.warn(\"Malformed config input line: \" + line + \" (expected 2 fields, got \" + fields.length + \" fields).  Skipping entry.\");\n          continue;\n        }\n      }\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n\n    return newBoostEntries;\n  }\n\n","sourceOld":"  private List<BoostEntry> initBoostEntries(InputStream is) throws IOException {\n    List<BoostEntry> newBoostEntries = new ArrayList<>();\n    \n    BufferedReader reader = new BufferedReader(new InputStreamReader(is, Charset.forName(\"UTF-8\")));\n    try {\n      String line = null;\n      while ((line = reader.readLine()) != null) {\n        // Remove comments\n        line = line.replaceAll(\"\\\\s+#.*$\", \"\");\n        line = line.replaceAll(\"^#.*$\", \"\");\n\n        // Skip empty lines or comment lines\n        if (line.trim().length() == 0) {\n          continue;\n        }\n\n        String[] fields = line.split(\"\\\\s+\");\n\n        if (fields.length == 2) {\n          String regexp = fields[0];\n          String boost = fields[1];\n          newBoostEntries.add(new BoostEntry(Pattern.compile(regexp), Double.parseDouble(boost)));\n          log.debug(\"Read regexp \" + regexp + \" with boost \" + boost);\n        } else {\n          log.warn(\"Malformed config input line: \" + line + \" (expected 2 fields, got \" + fields.length + \" fields).  Skipping entry.\");\n          continue;\n        }\n      }\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n\n    return newBoostEntries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/RegexpBoostProcessor#initBoostEntries(InputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/RegexpBoostProcessor#initBoostEntries(InputStream).mjava","sourceNew":"  private List<BoostEntry> initBoostEntries(InputStream is) throws IOException {\n    List<BoostEntry> newBoostEntries = new ArrayList<>();\n    \n    BufferedReader reader = new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8));\n    try {\n      String line = null;\n      while ((line = reader.readLine()) != null) {\n        // Remove comments\n        line = line.replaceAll(\"\\\\s+#.*$\", \"\");\n        line = line.replaceAll(\"^#.*$\", \"\");\n\n        // Skip empty lines or comment lines\n        if (line.trim().length() == 0) {\n          continue;\n        }\n\n        String[] fields = line.split(\"\\\\s+\");\n\n        if (fields.length == 2) {\n          String regexp = fields[0];\n          String boost = fields[1];\n          newBoostEntries.add(new BoostEntry(Pattern.compile(regexp), Double.parseDouble(boost)));\n          log.debug(\"Read regexp \" + regexp + \" with boost \" + boost);\n        } else {\n          log.warn(\"Malformed config input line: \" + line + \" (expected 2 fields, got \" + fields.length + \" fields).  Skipping entry.\");\n          continue;\n        }\n      }\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n\n    return newBoostEntries;\n  }\n\n","sourceOld":"  private List<BoostEntry> initBoostEntries(InputStream is) throws IOException {\n    List<BoostEntry> newBoostEntries = new ArrayList<>();\n    \n    BufferedReader reader = new BufferedReader(new InputStreamReader(is, Charset.forName(\"UTF-8\")));\n    try {\n      String line = null;\n      while ((line = reader.readLine()) != null) {\n        // Remove comments\n        line = line.replaceAll(\"\\\\s+#.*$\", \"\");\n        line = line.replaceAll(\"^#.*$\", \"\");\n\n        // Skip empty lines or comment lines\n        if (line.trim().length() == 0) {\n          continue;\n        }\n\n        String[] fields = line.split(\"\\\\s+\");\n\n        if (fields.length == 2) {\n          String regexp = fields[0];\n          String boost = fields[1];\n          newBoostEntries.add(new BoostEntry(Pattern.compile(regexp), Double.parseDouble(boost)));\n          log.debug(\"Read regexp \" + regexp + \" with boost \" + boost);\n        } else {\n          log.warn(\"Malformed config input line: \" + line + \" (expected 2 fields, got \" + fields.length + \" fields).  Skipping entry.\");\n          continue;\n        }\n      }\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n\n    return newBoostEntries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"740d649f013f07efbeb73ca854f106c60166e7c0","date":1587431295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/RegexpBoostProcessor#initBoostEntries(InputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/RegexpBoostProcessor#initBoostEntries(InputStream).mjava","sourceNew":"  private List<BoostEntry> initBoostEntries(InputStream is) throws IOException {\n    List<BoostEntry> newBoostEntries = new ArrayList<>();\n    \n    BufferedReader reader = new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8));\n    try {\n      String line = null;\n      while ((line = reader.readLine()) != null) {\n        // Remove comments\n        line = line.replaceAll(\"\\\\s+#.*$\", \"\");\n        line = line.replaceAll(\"^#.*$\", \"\");\n\n        // Skip empty lines or comment lines\n        if (line.trim().length() == 0) {\n          continue;\n        }\n\n        String[] fields = line.split(\"\\\\s+\");\n\n        if (fields.length == 2) {\n          String regexp = fields[0];\n          String boost = fields[1];\n          newBoostEntries.add(new BoostEntry(Pattern.compile(regexp), Double.parseDouble(boost)));\n          log.debug(\"Read regexp {} with boost {}\", regexp, boost);\n        } else {\n          log.warn(\"Malformed config input line: {} (expected 2 fields, got {} fields).  Skipping entry.\", line, fields.length);\n          continue;\n        }\n      }\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n\n    return newBoostEntries;\n  }\n\n","sourceOld":"  private List<BoostEntry> initBoostEntries(InputStream is) throws IOException {\n    List<BoostEntry> newBoostEntries = new ArrayList<>();\n    \n    BufferedReader reader = new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8));\n    try {\n      String line = null;\n      while ((line = reader.readLine()) != null) {\n        // Remove comments\n        line = line.replaceAll(\"\\\\s+#.*$\", \"\");\n        line = line.replaceAll(\"^#.*$\", \"\");\n\n        // Skip empty lines or comment lines\n        if (line.trim().length() == 0) {\n          continue;\n        }\n\n        String[] fields = line.split(\"\\\\s+\");\n\n        if (fields.length == 2) {\n          String regexp = fields[0];\n          String boost = fields[1];\n          newBoostEntries.add(new BoostEntry(Pattern.compile(regexp), Double.parseDouble(boost)));\n          log.debug(\"Read regexp \" + regexp + \" with boost \" + boost);\n        } else {\n          log.warn(\"Malformed config input line: \" + line + \" (expected 2 fields, got \" + fields.length + \" fields).  Skipping entry.\");\n          continue;\n        }\n      }\n    } finally {\n      IOUtils.closeQuietly(reader);\n    }\n\n    return newBoostEntries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","9d3d365762604952e436b51980101dfc84cc1b3e"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["acb8905efb68758118cfb4ff3c75d2169aa0182b"],"b0bf1d4eb51af6e03fffcbf80f0b5d69923c9f86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","acb8905efb68758118cfb4ff3c75d2169aa0182b"],"740d649f013f07efbeb73ca854f106c60166e7c0":["9d3d365762604952e436b51980101dfc84cc1b3e"],"9d3d365762604952e436b51980101dfc84cc1b3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"acb8905efb68758118cfb4ff3c75d2169aa0182b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["740d649f013f07efbeb73ca854f106c60166e7c0"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5eb2511ababf862ea11e10761c70ee560cd84510","9d3d365762604952e436b51980101dfc84cc1b3e"],"b0bf1d4eb51af6e03fffcbf80f0b5d69923c9f86":[],"740d649f013f07efbeb73ca854f106c60166e7c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9d3d365762604952e436b51980101dfc84cc1b3e":["5eb2511ababf862ea11e10761c70ee560cd84510","740d649f013f07efbeb73ca854f106c60166e7c0"],"acb8905efb68758118cfb4ff3c75d2169aa0182b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","b0bf1d4eb51af6e03fffcbf80f0b5d69923c9f86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b0bf1d4eb51af6e03fffcbf80f0b5d69923c9f86","acb8905efb68758118cfb4ff3c75d2169aa0182b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","b0bf1d4eb51af6e03fffcbf80f0b5d69923c9f86","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}