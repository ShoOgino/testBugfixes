{"path":"src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(boolean).mjava","commits":[{"id":"b1405362241b561f5590ff4a87d5d6e173bcd9cf","date":1190107634,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(boolean).mjava","pathOld":"/dev/null","sourceNew":"  private synchronized void updatePendingMerges(boolean optimize)\n    throws CorruptIndexException, IOException {\n\n    final MergePolicy.MergeSpecification spec;\n    if (optimize) {\n      // Currently hardwired to 1, but once we add method to\n      // IndexWriter to allow \"optimizing to <= N segments\"\n      // then we will change this.\n      final int maxSegmentCount = 1;\n      spec = mergePolicy.findMergesForOptimize(segmentInfos, this, maxSegmentCount, segmentsToOptimize);\n\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++)\n          ((MergePolicy.OneMerge) spec.merges.get(i)).optimize = true;\n      }\n\n    } else\n      spec = mergePolicy.findMerges(segmentInfos, this);\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++)\n        registerMerge((MergePolicy.OneMerge) spec.merges.get(i));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52e9359ec09a0ce311e6ce95805998bebc7f7fd0","date":1196417385,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(int,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#updatePendingMerges(boolean).mjava","sourceNew":"  private synchronized void updatePendingMerges(int maxNumSegmentsOptimize, boolean optimize)\n    throws CorruptIndexException, IOException {\n    assert !optimize || maxNumSegmentsOptimize > 0;\n\n    final MergePolicy.MergeSpecification spec;\n    if (optimize) {\n      spec = mergePolicy.findMergesForOptimize(segmentInfos, this, maxNumSegmentsOptimize, segmentsToOptimize);\n\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++) {\n          final MergePolicy.OneMerge merge = ((MergePolicy.OneMerge) spec.merges.get(i));\n          merge.optimize = true;\n          merge.maxNumSegmentsOptimize = maxNumSegmentsOptimize;\n        }\n      }\n\n    } else\n      spec = mergePolicy.findMerges(segmentInfos, this);\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++)\n        registerMerge((MergePolicy.OneMerge) spec.merges.get(i));\n    }\n  }\n\n","sourceOld":"  private synchronized void updatePendingMerges(boolean optimize)\n    throws CorruptIndexException, IOException {\n\n    final MergePolicy.MergeSpecification spec;\n    if (optimize) {\n      // Currently hardwired to 1, but once we add method to\n      // IndexWriter to allow \"optimizing to <= N segments\"\n      // then we will change this.\n      final int maxSegmentCount = 1;\n      spec = mergePolicy.findMergesForOptimize(segmentInfos, this, maxSegmentCount, segmentsToOptimize);\n\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++)\n          ((MergePolicy.OneMerge) spec.merges.get(i)).optimize = true;\n      }\n\n    } else\n      spec = mergePolicy.findMerges(segmentInfos, this);\n\n    if (spec != null) {\n      final int numMerges = spec.merges.size();\n      for(int i=0;i<numMerges;i++)\n        registerMerge((MergePolicy.OneMerge) spec.merges.get(i));\n    }\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"52e9359ec09a0ce311e6ce95805998bebc7f7fd0":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["52e9359ec09a0ce311e6ce95805998bebc7f7fd0"]},"commit2Childs":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["52e9359ec09a0ce311e6ce95805998bebc7f7fd0"],"52e9359ec09a0ce311e6ce95805998bebc7f7fd0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}