{"path":"solr/core/src/java/org/apache/solr/core/Config#getNode(String,boolean).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/Config#getNode(String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/core/Config#getNode(String,boolean).mjava","sourceNew":"  public Node getNode(String path, boolean errIfMissing) {\n   XPath xpath = xpathFactory.newXPath();\n   Node nd = null;\n   String xstr = normalize(path);\n\n    try {\n      nd = (Node)xpath.evaluate(xstr, doc, XPathConstants.NODE);\n\n      if (nd==null) {\n        if (errIfMissing) {\n          throw new RuntimeException(name + \" missing \"+path);\n        } else {\n          log.debug(name + \" missing optional \" + path);\n          return null;\n        }\n      }\n\n      log.trace(name + \":\" + path + \"=\" + nd);\n      return nd;\n\n    } catch (XPathExpressionException e) {\n      SolrException.log(log,\"Error in xpath\",e);\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error in xpath:\" + xstr + \" for \" + name,e,false);\n    } catch (SolrException e) {\n      throw(e);\n    } catch (Throwable e) {\n      SolrException.log(log,\"Error in xpath\",e);\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error in xpath:\" + xstr+ \" for \" + name,e,false);\n    }\n  }\n\n","sourceOld":"  public Node getNode(String path, boolean errIfMissing) {\n   XPath xpath = xpathFactory.newXPath();\n   Node nd = null;\n   String xstr = normalize(path);\n\n    try {\n      nd = (Node)xpath.evaluate(xstr, doc, XPathConstants.NODE);\n\n      if (nd==null) {\n        if (errIfMissing) {\n          throw new RuntimeException(name + \" missing \"+path);\n        } else {\n          log.debug(name + \" missing optional \" + path);\n          return null;\n        }\n      }\n\n      log.trace(name + \":\" + path + \"=\" + nd);\n      return nd;\n\n    } catch (XPathExpressionException e) {\n      SolrException.log(log,\"Error in xpath\",e);\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error in xpath:\" + xstr + \" for \" + name,e,false);\n    } catch (SolrException e) {\n      throw(e);\n    } catch (Throwable e) {\n      SolrException.log(log,\"Error in xpath\",e);\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error in xpath:\" + xstr+ \" for \" + name,e,false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/Config#getNode(String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/core/Config#getNode(String,boolean).mjava","sourceNew":"  public Node getNode(String path, boolean errIfMissing) {\n   XPath xpath = xpathFactory.newXPath();\n   Node nd = null;\n   String xstr = normalize(path);\n\n    try {\n      nd = (Node)xpath.evaluate(xstr, doc, XPathConstants.NODE);\n\n      if (nd==null) {\n        if (errIfMissing) {\n          throw new RuntimeException(name + \" missing \"+path);\n        } else {\n          log.debug(name + \" missing optional \" + path);\n          return null;\n        }\n      }\n\n      log.trace(name + \":\" + path + \"=\" + nd);\n      return nd;\n\n    } catch (XPathExpressionException e) {\n      SolrException.log(log,\"Error in xpath\",e);\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error in xpath:\" + xstr + \" for \" + name,e,false);\n    } catch (SolrException e) {\n      throw(e);\n    } catch (Throwable e) {\n      SolrException.log(log,\"Error in xpath\",e);\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error in xpath:\" + xstr+ \" for \" + name,e,false);\n    }\n  }\n\n","sourceOld":"  public Node getNode(String path, boolean errIfMissing) {\n   XPath xpath = xpathFactory.newXPath();\n   Node nd = null;\n   String xstr = normalize(path);\n\n    try {\n      nd = (Node)xpath.evaluate(xstr, doc, XPathConstants.NODE);\n\n      if (nd==null) {\n        if (errIfMissing) {\n          throw new RuntimeException(name + \" missing \"+path);\n        } else {\n          log.debug(name + \" missing optional \" + path);\n          return null;\n        }\n      }\n\n      log.trace(name + \":\" + path + \"=\" + nd);\n      return nd;\n\n    } catch (XPathExpressionException e) {\n      SolrException.log(log,\"Error in xpath\",e);\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error in xpath:\" + xstr + \" for \" + name,e,false);\n    } catch (SolrException e) {\n      throw(e);\n    } catch (Throwable e) {\n      SolrException.log(log,\"Error in xpath\",e);\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error in xpath:\" + xstr+ \" for \" + name,e,false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/Config#getNode(String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/core/Config#getNode(String,boolean).mjava","sourceNew":"  public Node getNode(String path, boolean errIfMissing) {\n   XPath xpath = xpathFactory.newXPath();\n   Node nd = null;\n   String xstr = normalize(path);\n\n    try {\n      nd = (Node)xpath.evaluate(xstr, doc, XPathConstants.NODE);\n\n      if (nd==null) {\n        if (errIfMissing) {\n          throw new RuntimeException(name + \" missing \"+path);\n        } else {\n          log.debug(name + \" missing optional \" + path);\n          return null;\n        }\n      }\n\n      log.trace(name + \":\" + path + \"=\" + nd);\n      return nd;\n\n    } catch (XPathExpressionException e) {\n      SolrException.log(log,\"Error in xpath\",e);\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error in xpath:\" + xstr + \" for \" + name,e,false);\n    } catch (SolrException e) {\n      throw(e);\n    } catch (Throwable e) {\n      SolrException.log(log,\"Error in xpath\",e);\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error in xpath:\" + xstr+ \" for \" + name,e,false);\n    }\n  }\n\n","sourceOld":"  public Node getNode(String path, boolean errIfMissing) {\n   XPath xpath = xpathFactory.newXPath();\n   Node nd = null;\n   String xstr = normalize(path);\n\n    try {\n      nd = (Node)xpath.evaluate(xstr, doc, XPathConstants.NODE);\n\n      if (nd==null) {\n        if (errIfMissing) {\n          throw new RuntimeException(name + \" missing \"+path);\n        } else {\n          log.debug(name + \" missing optional \" + path);\n          return null;\n        }\n      }\n\n      log.trace(name + \":\" + path + \"=\" + nd);\n      return nd;\n\n    } catch (XPathExpressionException e) {\n      SolrException.log(log,\"Error in xpath\",e);\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error in xpath:\" + xstr + \" for \" + name,e,false);\n    } catch (SolrException e) {\n      throw(e);\n    } catch (Throwable e) {\n      SolrException.log(log,\"Error in xpath\",e);\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error in xpath:\" + xstr+ \" for \" + name,e,false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b1605dda5afabdc06fd136fa0dd14ad326e3001","date":1326751633,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/Config#getNode(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/Config#getNode(String,boolean).mjava","sourceNew":"  public Node getNode(String path, boolean errIfMissing) {\n   XPath xpath = xpathFactory.newXPath();\n   Node nd = null;\n   String xstr = normalize(path);\n\n    try {\n      nd = (Node)xpath.evaluate(xstr, doc, XPathConstants.NODE);\n\n      if (nd==null) {\n        if (errIfMissing) {\n          throw new RuntimeException(name + \" missing \"+path);\n        } else {\n          log.debug(name + \" missing optional \" + path);\n          return null;\n        }\n      }\n\n      log.trace(name + \":\" + path + \"=\" + nd);\n      return nd;\n\n    } catch (XPathExpressionException e) {\n      SolrException.log(log,\"Error in xpath\",e);\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error in xpath:\" + xstr + \" for \" + name,e);\n    } catch (SolrException e) {\n      throw(e);\n    } catch (Throwable e) {\n      SolrException.log(log,\"Error in xpath\",e);\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error in xpath:\" + xstr+ \" for \" + name,e);\n    }\n  }\n\n","sourceOld":"  public Node getNode(String path, boolean errIfMissing) {\n   XPath xpath = xpathFactory.newXPath();\n   Node nd = null;\n   String xstr = normalize(path);\n\n    try {\n      nd = (Node)xpath.evaluate(xstr, doc, XPathConstants.NODE);\n\n      if (nd==null) {\n        if (errIfMissing) {\n          throw new RuntimeException(name + \" missing \"+path);\n        } else {\n          log.debug(name + \" missing optional \" + path);\n          return null;\n        }\n      }\n\n      log.trace(name + \":\" + path + \"=\" + nd);\n      return nd;\n\n    } catch (XPathExpressionException e) {\n      SolrException.log(log,\"Error in xpath\",e);\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error in xpath:\" + xstr + \" for \" + name,e,false);\n    } catch (SolrException e) {\n      throw(e);\n    } catch (Throwable e) {\n      SolrException.log(log,\"Error in xpath\",e);\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error in xpath:\" + xstr+ \" for \" + name,e,false);\n    }\n  }\n\n","bugFix":null,"bugIntro":["f225b9b576dc345ee8c27f91147b4afc0350511c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f225b9b576dc345ee8c27f91147b4afc0350511c","date":1373552135,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/Config#getNode(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/Config#getNode(String,boolean).mjava","sourceNew":"  public Node getNode(String path, boolean errifMissing) {\n    return getNode(path, doc, errifMissing);\n  }\n\n","sourceOld":"  public Node getNode(String path, boolean errIfMissing) {\n   XPath xpath = xpathFactory.newXPath();\n   Node nd = null;\n   String xstr = normalize(path);\n\n    try {\n      nd = (Node)xpath.evaluate(xstr, doc, XPathConstants.NODE);\n\n      if (nd==null) {\n        if (errIfMissing) {\n          throw new RuntimeException(name + \" missing \"+path);\n        } else {\n          log.debug(name + \" missing optional \" + path);\n          return null;\n        }\n      }\n\n      log.trace(name + \":\" + path + \"=\" + nd);\n      return nd;\n\n    } catch (XPathExpressionException e) {\n      SolrException.log(log,\"Error in xpath\",e);\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error in xpath:\" + xstr + \" for \" + name,e);\n    } catch (SolrException e) {\n      throw(e);\n    } catch (Throwable e) {\n      SolrException.log(log,\"Error in xpath\",e);\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error in xpath:\" + xstr+ \" for \" + name,e);\n    }\n  }\n\n","bugFix":["00da8b51bdeae168a5b26ec506db372b219ca7a2","7b1605dda5afabdc06fd136fa0dd14ad326e3001","0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/Config#getNode(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/Config#getNode(String,boolean).mjava","sourceNew":"  public Node getNode(String path, boolean errifMissing) {\n    return getNode(path, doc, errifMissing);\n  }\n\n","sourceOld":"  public Node getNode(String path, boolean errIfMissing) {\n   XPath xpath = xpathFactory.newXPath();\n   Node nd = null;\n   String xstr = normalize(path);\n\n    try {\n      nd = (Node)xpath.evaluate(xstr, doc, XPathConstants.NODE);\n\n      if (nd==null) {\n        if (errIfMissing) {\n          throw new RuntimeException(name + \" missing \"+path);\n        } else {\n          log.debug(name + \" missing optional \" + path);\n          return null;\n        }\n      }\n\n      log.trace(name + \":\" + path + \"=\" + nd);\n      return nd;\n\n    } catch (XPathExpressionException e) {\n      SolrException.log(log,\"Error in xpath\",e);\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error in xpath:\" + xstr + \" for \" + name,e);\n    } catch (SolrException e) {\n      throw(e);\n    } catch (Throwable e) {\n      SolrException.log(log,\"Error in xpath\",e);\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\"Error in xpath:\" + xstr+ \" for \" + name,e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee622110ba6021d0390037e77574743c1e55348c","date":1546700916,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/XmlConfigFile#getNode(String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/Config#getNode(String,boolean).mjava","sourceNew":"  public Node getNode(String path, boolean errifMissing) {\n    return getNode(path, doc, errifMissing);\n  }\n\n","sourceOld":"  public Node getNode(String path, boolean errifMissing) {\n    return getNode(path, doc, errifMissing);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ee622110ba6021d0390037e77574743c1e55348c":["f225b9b576dc345ee8c27f91147b4afc0350511c"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["7b1605dda5afabdc06fd136fa0dd14ad326e3001","f225b9b576dc345ee8c27f91147b4afc0350511c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f225b9b576dc345ee8c27f91147b4afc0350511c":["7b1605dda5afabdc06fd136fa0dd14ad326e3001"],"7b1605dda5afabdc06fd136fa0dd14ad326e3001":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ee622110ba6021d0390037e77574743c1e55348c"]},"commit2Childs":{"ee622110ba6021d0390037e77574743c1e55348c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["7b1605dda5afabdc06fd136fa0dd14ad326e3001"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"f225b9b576dc345ee8c27f91147b4afc0350511c":["ee622110ba6021d0390037e77574743c1e55348c","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"7b1605dda5afabdc06fd136fa0dd14ad326e3001":["37a0f60745e53927c4c876cfe5b5a58170f0646c","f225b9b576dc345ee8c27f91147b4afc0350511c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}