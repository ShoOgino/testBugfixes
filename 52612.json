{"path":"lucene/src/java/org/apache/lucene/search/BooleanScorer2#BooleanScorer2(BooleanWeight,boolean,int,List[Scorer],List[Scorer],List[Scorer],int).mjava","commits":[{"id":"03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4","date":1295478199,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanScorer2#BooleanScorer2(BooleanWeight,boolean,int,List[Scorer],List[Scorer],List[Scorer],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer2#BooleanScorer2(Weight,boolean,Similarity,int,List[Scorer],List[Scorer],List[Scorer],int).mjava","sourceNew":"  /**\n   * Creates a {@link Scorer} with the given similarity and lists of required,\n   * prohibited and optional scorers. In no required scorers are added, at least\n   * one of the optional scorers will have to match during the search.\n   * \n   * @param similarity\n   *          The similarity to be used.\n   * @param minNrShouldMatch\n   *          The minimum number of optional added scorers that should match\n   *          during the search. In case no required scorers are added, at least\n   *          one of the optional scorers will have to match during the search.\n   * @param required\n   *          the list of required scorers.\n   * @param prohibited\n   *          the list of prohibited scorers.\n   * @param optional\n   *          the list of optional scorers.\n   */\n  public BooleanScorer2(BooleanWeight weight, boolean disableCoord, int minNrShouldMatch,\n      List<Scorer> required, List<Scorer> prohibited, List<Scorer> optional, int maxCoord) throws IOException {\n    super(null, weight);   // Similarity not used\n    if (minNrShouldMatch < 0) {\n      throw new IllegalArgumentException(\"Minimum number of optional scorers should not be negative\");\n    }\n    coordinator = new Coordinator();\n    this.minNrShouldMatch = minNrShouldMatch;\n    coordinator.maxCoord = maxCoord;\n\n    optionalScorers = optional;\n    requiredScorers = required;    \n    prohibitedScorers = prohibited;\n    \n    coordinator.init(disableCoord);\n    countingSumScorer = makeCountingSumScorer(disableCoord);\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link Scorer} with the given similarity and lists of required,\n   * prohibited and optional scorers. In no required scorers are added, at least\n   * one of the optional scorers will have to match during the search.\n   * \n   * @param similarity\n   *          The similarity to be used.\n   * @param minNrShouldMatch\n   *          The minimum number of optional added scorers that should match\n   *          during the search. In case no required scorers are added, at least\n   *          one of the optional scorers will have to match during the search.\n   * @param required\n   *          the list of required scorers.\n   * @param prohibited\n   *          the list of prohibited scorers.\n   * @param optional\n   *          the list of optional scorers.\n   */\n  public BooleanScorer2(Weight weight, boolean disableCoord, Similarity similarity, int minNrShouldMatch,\n      List<Scorer> required, List<Scorer> prohibited, List<Scorer> optional, int maxCoord) throws IOException {\n    super(null, weight);   // Similarity not used\n    if (minNrShouldMatch < 0) {\n      throw new IllegalArgumentException(\"Minimum number of optional scorers should not be negative\");\n    }\n    coordinator = new Coordinator();\n    this.minNrShouldMatch = minNrShouldMatch;\n    coordinator.maxCoord = maxCoord;\n\n    optionalScorers = optional;\n    requiredScorers = required;    \n    prohibitedScorers = prohibited;\n    \n    coordinator.init(similarity, disableCoord);\n    countingSumScorer = makeCountingSumScorer(disableCoord, similarity);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5e679b9c5f68f1f331de920ae8366af75b44060","date":1295555804,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanScorer2#BooleanScorer2(BooleanWeight,boolean,int,List[Scorer],List[Scorer],List[Scorer],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer2#BooleanScorer2(BooleanWeight,boolean,int,List[Scorer],List[Scorer],List[Scorer],int).mjava","sourceNew":"  /**\n   * Creates a {@link Scorer} with the given similarity and lists of required,\n   * prohibited and optional scorers. In no required scorers are added, at least\n   * one of the optional scorers will have to match during the search.\n   * \n   * @param weight\n   *          The BooleanWeight to be used.\n   * @param disableCoord\n   *          If this parameter is true, coordination level matching \n   *          ({@link Similarity#coord(int, int)}) is not used.\n   * @param minNrShouldMatch\n   *          The minimum number of optional added scorers that should match\n   *          during the search. In case no required scorers are added, at least\n   *          one of the optional scorers will have to match during the search.\n   * @param required\n   *          the list of required scorers.\n   * @param prohibited\n   *          the list of prohibited scorers.\n   * @param optional\n   *          the list of optional scorers.\n   */\n  public BooleanScorer2(BooleanWeight weight, boolean disableCoord, int minNrShouldMatch,\n      List<Scorer> required, List<Scorer> prohibited, List<Scorer> optional, int maxCoord) throws IOException {\n    super(weight);\n    if (minNrShouldMatch < 0) {\n      throw new IllegalArgumentException(\"Minimum number of optional scorers should not be negative\");\n    }\n    coordinator = new Coordinator();\n    this.minNrShouldMatch = minNrShouldMatch;\n    coordinator.maxCoord = maxCoord;\n\n    optionalScorers = optional;\n    requiredScorers = required;    \n    prohibitedScorers = prohibited;\n    \n    coordinator.init(disableCoord);\n    countingSumScorer = makeCountingSumScorer(disableCoord);\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link Scorer} with the given similarity and lists of required,\n   * prohibited and optional scorers. In no required scorers are added, at least\n   * one of the optional scorers will have to match during the search.\n   * \n   * @param similarity\n   *          The similarity to be used.\n   * @param minNrShouldMatch\n   *          The minimum number of optional added scorers that should match\n   *          during the search. In case no required scorers are added, at least\n   *          one of the optional scorers will have to match during the search.\n   * @param required\n   *          the list of required scorers.\n   * @param prohibited\n   *          the list of prohibited scorers.\n   * @param optional\n   *          the list of optional scorers.\n   */\n  public BooleanScorer2(BooleanWeight weight, boolean disableCoord, int minNrShouldMatch,\n      List<Scorer> required, List<Scorer> prohibited, List<Scorer> optional, int maxCoord) throws IOException {\n    super(null, weight);   // Similarity not used\n    if (minNrShouldMatch < 0) {\n      throw new IllegalArgumentException(\"Minimum number of optional scorers should not be negative\");\n    }\n    coordinator = new Coordinator();\n    this.minNrShouldMatch = minNrShouldMatch;\n    coordinator.maxCoord = maxCoord;\n\n    optionalScorers = optional;\n    requiredScorers = required;    \n    prohibitedScorers = prohibited;\n    \n    coordinator.init(disableCoord);\n    countingSumScorer = makeCountingSumScorer(disableCoord);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanScorer2#BooleanScorer2(BooleanWeight,boolean,int,List[Scorer],List[Scorer],List[Scorer],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer2#BooleanScorer2(Weight,boolean,Similarity,int,List[Scorer],List[Scorer],List[Scorer],int).mjava","sourceNew":"  /**\n   * Creates a {@link Scorer} with the given similarity and lists of required,\n   * prohibited and optional scorers. In no required scorers are added, at least\n   * one of the optional scorers will have to match during the search.\n   * \n   * @param weight\n   *          The BooleanWeight to be used.\n   * @param disableCoord\n   *          If this parameter is true, coordination level matching \n   *          ({@link Similarity#coord(int, int)}) is not used.\n   * @param minNrShouldMatch\n   *          The minimum number of optional added scorers that should match\n   *          during the search. In case no required scorers are added, at least\n   *          one of the optional scorers will have to match during the search.\n   * @param required\n   *          the list of required scorers.\n   * @param prohibited\n   *          the list of prohibited scorers.\n   * @param optional\n   *          the list of optional scorers.\n   */\n  public BooleanScorer2(BooleanWeight weight, boolean disableCoord, int minNrShouldMatch,\n      List<Scorer> required, List<Scorer> prohibited, List<Scorer> optional, int maxCoord) throws IOException {\n    super(weight);\n    if (minNrShouldMatch < 0) {\n      throw new IllegalArgumentException(\"Minimum number of optional scorers should not be negative\");\n    }\n    coordinator = new Coordinator();\n    this.minNrShouldMatch = minNrShouldMatch;\n    coordinator.maxCoord = maxCoord;\n\n    optionalScorers = optional;\n    requiredScorers = required;    \n    prohibitedScorers = prohibited;\n    \n    coordinator.init(disableCoord);\n    countingSumScorer = makeCountingSumScorer(disableCoord);\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link Scorer} with the given similarity and lists of required,\n   * prohibited and optional scorers. In no required scorers are added, at least\n   * one of the optional scorers will have to match during the search.\n   * \n   * @param similarity\n   *          The similarity to be used.\n   * @param minNrShouldMatch\n   *          The minimum number of optional added scorers that should match\n   *          during the search. In case no required scorers are added, at least\n   *          one of the optional scorers will have to match during the search.\n   * @param required\n   *          the list of required scorers.\n   * @param prohibited\n   *          the list of prohibited scorers.\n   * @param optional\n   *          the list of optional scorers.\n   */\n  public BooleanScorer2(Weight weight, boolean disableCoord, Similarity similarity, int minNrShouldMatch,\n      List<Scorer> required, List<Scorer> prohibited, List<Scorer> optional, int maxCoord) throws IOException {\n    super(null, weight);   // Similarity not used\n    if (minNrShouldMatch < 0) {\n      throw new IllegalArgumentException(\"Minimum number of optional scorers should not be negative\");\n    }\n    coordinator = new Coordinator();\n    this.minNrShouldMatch = minNrShouldMatch;\n    coordinator.maxCoord = maxCoord;\n\n    optionalScorers = optional;\n    requiredScorers = required;    \n    prohibitedScorers = prohibited;\n    \n    coordinator.init(similarity, disableCoord);\n    countingSumScorer = makeCountingSumScorer(disableCoord, similarity);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanScorer2#BooleanScorer2(BooleanWeight,boolean,int,List[Scorer],List[Scorer],List[Scorer],int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a {@link Scorer} with the given similarity and lists of required,\n   * prohibited and optional scorers. In no required scorers are added, at least\n   * one of the optional scorers will have to match during the search.\n   * \n   * @param weight\n   *          The BooleanWeight to be used.\n   * @param disableCoord\n   *          If this parameter is true, coordination level matching \n   *          ({@link Similarity#coord(int, int)}) is not used.\n   * @param minNrShouldMatch\n   *          The minimum number of optional added scorers that should match\n   *          during the search. In case no required scorers are added, at least\n   *          one of the optional scorers will have to match during the search.\n   * @param required\n   *          the list of required scorers.\n   * @param prohibited\n   *          the list of prohibited scorers.\n   * @param optional\n   *          the list of optional scorers.\n   */\n  public BooleanScorer2(BooleanWeight weight, boolean disableCoord, int minNrShouldMatch,\n      List<Scorer> required, List<Scorer> prohibited, List<Scorer> optional, int maxCoord) throws IOException {\n    super(weight);\n    if (minNrShouldMatch < 0) {\n      throw new IllegalArgumentException(\"Minimum number of optional scorers should not be negative\");\n    }\n    coordinator = new Coordinator();\n    this.minNrShouldMatch = minNrShouldMatch;\n    coordinator.maxCoord = maxCoord;\n\n    optionalScorers = optional;\n    requiredScorers = required;    \n    prohibitedScorers = prohibited;\n    \n    coordinator.init(disableCoord);\n    countingSumScorer = makeCountingSumScorer(disableCoord);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer2#BooleanScorer2(BooleanWeight,boolean,int,List[Scorer],List[Scorer],List[Scorer],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer2#BooleanScorer2(BooleanWeight,boolean,int,List[Scorer],List[Scorer],List[Scorer],int).mjava","sourceNew":"  /**\n   * Creates a {@link Scorer} with the given similarity and lists of required,\n   * prohibited and optional scorers. In no required scorers are added, at least\n   * one of the optional scorers will have to match during the search.\n   * \n   * @param weight\n   *          The BooleanWeight to be used.\n   * @param disableCoord\n   *          If this parameter is true, coordination level matching \n   *          ({@link Similarity#coord(int, int)}) is not used.\n   * @param minNrShouldMatch\n   *          The minimum number of optional added scorers that should match\n   *          during the search. In case no required scorers are added, at least\n   *          one of the optional scorers will have to match during the search.\n   * @param required\n   *          the list of required scorers.\n   * @param prohibited\n   *          the list of prohibited scorers.\n   * @param optional\n   *          the list of optional scorers.\n   */\n  public BooleanScorer2(BooleanWeight weight, boolean disableCoord, int minNrShouldMatch,\n      List<Scorer> required, List<Scorer> prohibited, List<Scorer> optional, int maxCoord) throws IOException {\n    super(weight);\n    if (minNrShouldMatch < 0) {\n      throw new IllegalArgumentException(\"Minimum number of optional scorers should not be negative\");\n    }\n    coordinator = new Coordinator();\n    this.minNrShouldMatch = minNrShouldMatch;\n    coordinator.maxCoord = maxCoord;\n\n    optionalScorers = optional;\n    requiredScorers = required;    \n    prohibitedScorers = prohibited;\n    \n    coordinator.init(disableCoord);\n    countingSumScorer = makeCountingSumScorer(disableCoord);\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link Scorer} with the given similarity and lists of required,\n   * prohibited and optional scorers. In no required scorers are added, at least\n   * one of the optional scorers will have to match during the search.\n   * \n   * @param weight\n   *          The BooleanWeight to be used.\n   * @param disableCoord\n   *          If this parameter is true, coordination level matching \n   *          ({@link Similarity#coord(int, int)}) is not used.\n   * @param minNrShouldMatch\n   *          The minimum number of optional added scorers that should match\n   *          during the search. In case no required scorers are added, at least\n   *          one of the optional scorers will have to match during the search.\n   * @param required\n   *          the list of required scorers.\n   * @param prohibited\n   *          the list of prohibited scorers.\n   * @param optional\n   *          the list of optional scorers.\n   */\n  public BooleanScorer2(BooleanWeight weight, boolean disableCoord, int minNrShouldMatch,\n      List<Scorer> required, List<Scorer> prohibited, List<Scorer> optional, int maxCoord) throws IOException {\n    super(weight);\n    if (minNrShouldMatch < 0) {\n      throw new IllegalArgumentException(\"Minimum number of optional scorers should not be negative\");\n    }\n    coordinator = new Coordinator();\n    this.minNrShouldMatch = minNrShouldMatch;\n    coordinator.maxCoord = maxCoord;\n\n    optionalScorers = optional;\n    requiredScorers = required;    \n    prohibitedScorers = prohibited;\n    \n    coordinator.init(disableCoord);\n    countingSumScorer = makeCountingSumScorer(disableCoord);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e5e679b9c5f68f1f331de920ae8366af75b44060"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e5e679b9c5f68f1f331de920ae8366af75b44060"],"03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e5e679b9c5f68f1f331de920ae8366af75b44060":["03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e5e679b9c5f68f1f331de920ae8366af75b44060"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4":["e5e679b9c5f68f1f331de920ae8366af75b44060"],"e5e679b9c5f68f1f331de920ae8366af75b44060":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}