{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeMerger#getMergedResult().mjava","commits":[{"id":"1931d98b40b01d5075753b197c2461a5c2652689","date":1471971289,"type":1,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeMerger#getMergedResult().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeMerger[FacetModule]#getMergedResult().mjava","sourceNew":"  @Override\n  public Object getMergedResult() {\n    // TODO: use sortedBuckets\n    SimpleOrderedMap result = new SimpleOrderedMap(4);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(buckets.size());\n\n    for (FacetBucket bucket : buckets.values()) {\n       if (bucket.getCount() < freq.mincount) {\n         continue;\n       }\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n    result.add(\"buckets\", resultBuckets);\n\n    if (beforeBucket != null) {\n      result.add(\"before\", beforeBucket.getMergedBucket());\n    }\n    if (afterBucket != null) {\n      result.add(\"after\", afterBucket.getMergedBucket());\n    }\n    if (betweenBucket != null) {\n      result.add(\"between\", betweenBucket.getMergedBucket());\n    }\n    return result;\n\n  }\n\n","sourceOld":"  @Override\n  public Object getMergedResult() {\n    SimpleOrderedMap result = new SimpleOrderedMap(4);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(buckets.size());\n\n    for (FacetBucket bucket : buckets.values()) {\n       if (bucket.getCount() < freq.mincount) {\n         continue;\n       }\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n    result.add(\"buckets\", resultBuckets);\n\n    if (beforeBucket != null) {\n      result.add(\"before\", beforeBucket.getMergedBucket());\n    }\n    if (afterBucket != null) {\n      result.add(\"after\", afterBucket.getMergedBucket());\n    }\n    if (betweenBucket != null) {\n      result.add(\"between\", betweenBucket.getMergedBucket());\n    }\n    return result;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeMerger#getMergedResult().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeMerger[FacetModule]#getMergedResult().mjava","sourceNew":"  @Override\n  public Object getMergedResult() {\n    // TODO: use sortedBuckets\n    SimpleOrderedMap result = new SimpleOrderedMap(4);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(buckets.size());\n\n    for (FacetBucket bucket : buckets.values()) {\n       if (bucket.getCount() < freq.mincount) {\n         continue;\n       }\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n    result.add(\"buckets\", resultBuckets);\n\n    if (beforeBucket != null) {\n      result.add(\"before\", beforeBucket.getMergedBucket());\n    }\n    if (afterBucket != null) {\n      result.add(\"after\", afterBucket.getMergedBucket());\n    }\n    if (betweenBucket != null) {\n      result.add(\"between\", betweenBucket.getMergedBucket());\n    }\n    return result;\n\n  }\n\n","sourceOld":"  @Override\n  public Object getMergedResult() {\n    SimpleOrderedMap result = new SimpleOrderedMap(4);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(buckets.size());\n\n    for (FacetBucket bucket : buckets.values()) {\n       if (bucket.getCount() < freq.mincount) {\n         continue;\n       }\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n    result.add(\"buckets\", resultBuckets);\n\n    if (beforeBucket != null) {\n      result.add(\"before\", beforeBucket.getMergedBucket());\n    }\n    if (afterBucket != null) {\n      result.add(\"after\", afterBucket.getMergedBucket());\n    }\n    if (betweenBucket != null) {\n      result.add(\"between\", betweenBucket.getMergedBucket());\n    }\n    return result;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeMerger#getMergedResult().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object getMergedResult() {\n    // TODO: use sortedBuckets\n    SimpleOrderedMap result = new SimpleOrderedMap(4);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(buckets.size());\n\n    for (FacetBucket bucket : buckets.values()) {\n       if (bucket.getCount() < freq.mincount) {\n         continue;\n       }\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n    result.add(\"buckets\", resultBuckets);\n\n    if (beforeBucket != null) {\n      result.add(\"before\", beforeBucket.getMergedBucket());\n    }\n    if (afterBucket != null) {\n      result.add(\"after\", afterBucket.getMergedBucket());\n    }\n    if (betweenBucket != null) {\n      result.add(\"between\", betweenBucket.getMergedBucket());\n    }\n    return result;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c05b634713ca09b2267477408773904d4c69dd9d","date":1530894845,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeMerger#getMergedResult().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeMerger#getMergedResult().mjava","sourceNew":"  @Override\n  public Object getMergedResult() {\n    // TODO: use sortedBuckets\n    SimpleOrderedMap result = new SimpleOrderedMap(4);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(buckets.size());\n\n    for (FacetBucket bucket : buckets.values()) {\n       if (bucket.getCount() < freq.mincount) {\n         continue;\n       }\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n    result.add(\"buckets\", resultBuckets);\n\n    if (beforeBucket != null) {\n      result.add(FacetParams.FacetRangeOther.BEFORE.toString(), beforeBucket.getMergedBucket());\n    }\n    if (afterBucket != null) {\n      result.add(FacetParams.FacetRangeOther.AFTER.toString(), afterBucket.getMergedBucket());\n    }\n    if (betweenBucket != null) {\n      result.add(FacetParams.FacetRangeOther.BETWEEN.toString(), betweenBucket.getMergedBucket());\n    }\n    return result;\n\n  }\n\n","sourceOld":"  @Override\n  public Object getMergedResult() {\n    // TODO: use sortedBuckets\n    SimpleOrderedMap result = new SimpleOrderedMap(4);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(buckets.size());\n\n    for (FacetBucket bucket : buckets.values()) {\n       if (bucket.getCount() < freq.mincount) {\n         continue;\n       }\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n    result.add(\"buckets\", resultBuckets);\n\n    if (beforeBucket != null) {\n      result.add(\"before\", beforeBucket.getMergedBucket());\n    }\n    if (afterBucket != null) {\n      result.add(\"after\", afterBucket.getMergedBucket());\n    }\n    if (betweenBucket != null) {\n      result.add(\"between\", betweenBucket.getMergedBucket());\n    }\n    return result;\n\n  }\n\n","bugFix":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeMerger#getMergedResult().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeMerger#getMergedResult().mjava","sourceNew":"  @Override\n  public Object getMergedResult() {\n    // TODO: use sortedBuckets\n    SimpleOrderedMap result = new SimpleOrderedMap(4);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(buckets.size());\n\n    for (FacetBucket bucket : buckets.values()) {\n       if (bucket.getCount() < freq.mincount) {\n         continue;\n       }\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n    result.add(\"buckets\", resultBuckets);\n\n    if (beforeBucket != null) {\n      result.add(FacetParams.FacetRangeOther.BEFORE.toString(), beforeBucket.getMergedBucket());\n    }\n    if (afterBucket != null) {\n      result.add(FacetParams.FacetRangeOther.AFTER.toString(), afterBucket.getMergedBucket());\n    }\n    if (betweenBucket != null) {\n      result.add(FacetParams.FacetRangeOther.BETWEEN.toString(), betweenBucket.getMergedBucket());\n    }\n    return result;\n\n  }\n\n","sourceOld":"  @Override\n  public Object getMergedResult() {\n    // TODO: use sortedBuckets\n    SimpleOrderedMap result = new SimpleOrderedMap(4);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(buckets.size());\n\n    for (FacetBucket bucket : buckets.values()) {\n       if (bucket.getCount() < freq.mincount) {\n         continue;\n       }\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n    result.add(\"buckets\", resultBuckets);\n\n    if (beforeBucket != null) {\n      result.add(\"before\", beforeBucket.getMergedBucket());\n    }\n    if (afterBucket != null) {\n      result.add(\"after\", afterBucket.getMergedBucket());\n    }\n    if (betweenBucket != null) {\n      result.add(\"between\", betweenBucket.getMergedBucket());\n    }\n    return result;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeMerger#getMergedResult().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeMerger#getMergedResult().mjava","sourceNew":"  @Override\n  public Object getMergedResult() {\n    // TODO: use sortedBuckets\n    SimpleOrderedMap result = new SimpleOrderedMap(4);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(buckets.size());\n\n    for (FacetBucket bucket : buckets.values()) {\n       if (bucket.getCount() < freq.mincount) {\n         continue;\n       }\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n    result.add(\"buckets\", resultBuckets);\n\n    if (beforeBucket != null) {\n      result.add(FacetParams.FacetRangeOther.BEFORE.toString(), beforeBucket.getMergedBucket());\n    }\n    if (afterBucket != null) {\n      result.add(FacetParams.FacetRangeOther.AFTER.toString(), afterBucket.getMergedBucket());\n    }\n    if (betweenBucket != null) {\n      result.add(FacetParams.FacetRangeOther.BETWEEN.toString(), betweenBucket.getMergedBucket());\n    }\n    return result;\n\n  }\n\n","sourceOld":"  @Override\n  public Object getMergedResult() {\n    // TODO: use sortedBuckets\n    SimpleOrderedMap result = new SimpleOrderedMap(4);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(buckets.size());\n\n    for (FacetBucket bucket : buckets.values()) {\n       if (bucket.getCount() < freq.mincount) {\n         continue;\n       }\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n    result.add(\"buckets\", resultBuckets);\n\n    if (beforeBucket != null) {\n      result.add(\"before\", beforeBucket.getMergedBucket());\n    }\n    if (afterBucket != null) {\n      result.add(\"after\", afterBucket.getMergedBucket());\n    }\n    if (betweenBucket != null) {\n      result.add(\"between\", betweenBucket.getMergedBucket());\n    }\n    return result;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56a9893014b284af4d1af451e6c02e7ffdf5b6e","date":1590065972,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeMerger#getMergedResult().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeMerger#getMergedResult().mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public Object getMergedResult() {\n    // TODO: use sortedBuckets\n    SimpleOrderedMap result = new SimpleOrderedMap(4);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(buckets.size());\n\n    for (FacetBucket bucket : buckets.values()) {\n       if (bucket.getCount() < freq.mincount) {\n         continue;\n       }\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n    result.add(\"buckets\", resultBuckets);\n\n    if (beforeBucket != null) {\n      result.add(FacetParams.FacetRangeOther.BEFORE.toString(), beforeBucket.getMergedBucket());\n    }\n    if (afterBucket != null) {\n      result.add(FacetParams.FacetRangeOther.AFTER.toString(), afterBucket.getMergedBucket());\n    }\n    if (betweenBucket != null) {\n      result.add(FacetParams.FacetRangeOther.BETWEEN.toString(), betweenBucket.getMergedBucket());\n    }\n    return result;\n\n  }\n\n","sourceOld":"  @Override\n  public Object getMergedResult() {\n    // TODO: use sortedBuckets\n    SimpleOrderedMap result = new SimpleOrderedMap(4);\n\n    List<SimpleOrderedMap> resultBuckets = new ArrayList<>(buckets.size());\n\n    for (FacetBucket bucket : buckets.values()) {\n       if (bucket.getCount() < freq.mincount) {\n         continue;\n       }\n      resultBuckets.add( bucket.getMergedBucket() );\n    }\n\n    result.add(\"buckets\", resultBuckets);\n\n    if (beforeBucket != null) {\n      result.add(FacetParams.FacetRangeOther.BEFORE.toString(), beforeBucket.getMergedBucket());\n    }\n    if (afterBucket != null) {\n      result.add(FacetParams.FacetRangeOther.AFTER.toString(), afterBucket.getMergedBucket());\n    }\n    if (betweenBucket != null) {\n      result.add(FacetParams.FacetRangeOther.BETWEEN.toString(), betweenBucket.getMergedBucket());\n    }\n    return result;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["c05b634713ca09b2267477408773904d4c69dd9d"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","c05b634713ca09b2267477408773904d4c69dd9d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1931d98b40b01d5075753b197c2461a5c2652689":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c05b634713ca09b2267477408773904d4c69dd9d":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1931d98b40b01d5075753b197c2461a5c2652689"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","c05b634713ca09b2267477408773904d4c69dd9d"]},"commit2Childs":{"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1931d98b40b01d5075753b197c2461a5c2652689","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1931d98b40b01d5075753b197c2461a5c2652689":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"c05b634713ca09b2267477408773904d4c69dd9d":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","c05b634713ca09b2267477408773904d4c69dd9d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}