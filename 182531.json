{"path":"solr/src/java/org/apache/solr/schema/PointType#createSpatialQuery(QParser,SpatialOptions).mjava","commits":[{"id":"5f900d5ce814fc22ea498d3303d1f833f5bf320c","date":1278720761,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/PointType#createSpatialQuery(QParser,SpatialOptions).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Calculates the range and creates a RangeQuery (bounding box) wrapped in a BooleanQuery (unless the dimension is 1, one range for every dimension, AND'd together by a Boolean\n   * @param parser The parser\n   * @param options The {@link org.apache.solr.search.SpatialOptions} for this filter.\n   * @return The Query representing the bounding box around the point.\n   */\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    Query result = null;\n    double [] point = new double[0];\n    try {\n      point = DistanceUtils.parsePointDouble(null, options.pointStr, dimension);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    if (dimension == 1){\n      //TODO: Handle distance measures\n      String lower = String.valueOf(point[0] - options.distance);\n      String upper = String.valueOf(point[0] + options.distance);\n      SchemaField subSF = subField(options.field, 0);\n      // points must currently be ordered... should we support specifying any two opposite corner points?\n      result = subSF.getType().getRangeQuery(parser, subSF, lower, upper, true, true);\n    } else {\n      BooleanQuery tmp = new BooleanQuery();\n      //TODO: Handle distance measures, as this assumes Euclidean\n      double [] ur = org.apache.lucene.spatial.tier.DistanceUtils.vectorBoxCorner(point, null, options.distance, true);\n      double [] ll = org.apache.lucene.spatial.tier.DistanceUtils.vectorBoxCorner(point, null, options.distance, false);\n      for (int i = 0; i < ur.length; i++) {\n        SchemaField subSF = subField(options.field, i);\n        Query range = subSF.getType().getRangeQuery(parser, subSF, String.valueOf(ll[i]), String.valueOf(ur[i]), true, true);\n        tmp.add(range, BooleanClause.Occur.MUST);\n\n      }\n      result = tmp;\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"459be89020f9023e3b60066066a892c7edb5de58","date":1279657074,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/PointType#createSpatialQuery(QParser,SpatialOptions).mjava","pathOld":"solr/src/java/org/apache/solr/schema/PointType#createSpatialQuery(QParser,SpatialOptions).mjava","sourceNew":"  /**\n   * Calculates the range and creates a RangeQuery (bounding box) wrapped in a BooleanQuery (unless the dimension is 1, one range for every dimension, AND'd together by a Boolean\n   * @param parser The parser\n   * @param options The {@link org.apache.solr.search.SpatialOptions} for this filter.\n   * @return The Query representing the bounding box around the point.\n   */\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    Query result = null;\n    double [] point = new double[0];\n    try {\n      point = DistanceUtils.parsePointDouble(null, options.pointStr, dimension);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    if (dimension == 1){\n      //TODO: Handle distance measures\n      String lower = String.valueOf(point[0] - options.distance);\n      String upper = String.valueOf(point[0] + options.distance);\n      SchemaField subSF = subField(options.field, 0);\n      // points must currently be ordered... should we support specifying any two opposite corner points?\n      result = subSF.getType().getRangeQuery(parser, subSF, lower, upper, true, true);\n    } else {\n      BooleanQuery tmp = new BooleanQuery();\n      //TODO: Handle distance measures, as this assumes Euclidean\n      double [] ur = DistanceUtils.vectorBoxCorner(point, null, options.distance, true);\n      double [] ll = DistanceUtils.vectorBoxCorner(point, null, options.distance, false);\n      for (int i = 0; i < ur.length; i++) {\n        SchemaField subSF = subField(options.field, i);\n        Query range = subSF.getType().getRangeQuery(parser, subSF, String.valueOf(ll[i]), String.valueOf(ur[i]), true, true);\n        tmp.add(range, BooleanClause.Occur.MUST);\n\n      }\n      result = tmp;\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Calculates the range and creates a RangeQuery (bounding box) wrapped in a BooleanQuery (unless the dimension is 1, one range for every dimension, AND'd together by a Boolean\n   * @param parser The parser\n   * @param options The {@link org.apache.solr.search.SpatialOptions} for this filter.\n   * @return The Query representing the bounding box around the point.\n   */\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    Query result = null;\n    double [] point = new double[0];\n    try {\n      point = DistanceUtils.parsePointDouble(null, options.pointStr, dimension);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    if (dimension == 1){\n      //TODO: Handle distance measures\n      String lower = String.valueOf(point[0] - options.distance);\n      String upper = String.valueOf(point[0] + options.distance);\n      SchemaField subSF = subField(options.field, 0);\n      // points must currently be ordered... should we support specifying any two opposite corner points?\n      result = subSF.getType().getRangeQuery(parser, subSF, lower, upper, true, true);\n    } else {\n      BooleanQuery tmp = new BooleanQuery();\n      //TODO: Handle distance measures, as this assumes Euclidean\n      double [] ur = org.apache.lucene.spatial.tier.DistanceUtils.vectorBoxCorner(point, null, options.distance, true);\n      double [] ll = org.apache.lucene.spatial.tier.DistanceUtils.vectorBoxCorner(point, null, options.distance, false);\n      for (int i = 0; i < ur.length; i++) {\n        SchemaField subSF = subField(options.field, i);\n        Query range = subSF.getType().getRangeQuery(parser, subSF, String.valueOf(ll[i]), String.valueOf(ur[i]), true, true);\n        tmp.add(range, BooleanClause.Occur.MUST);\n\n      }\n      result = tmp;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/PointType#createSpatialQuery(QParser,SpatialOptions).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Calculates the range and creates a RangeQuery (bounding box) wrapped in a BooleanQuery (unless the dimension is 1, one range for every dimension, AND'd together by a Boolean\n   * @param parser The parser\n   * @param options The {@link org.apache.solr.search.SpatialOptions} for this filter.\n   * @return The Query representing the bounding box around the point.\n   */\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    Query result = null;\n    double [] point = new double[0];\n    try {\n      point = DistanceUtils.parsePointDouble(null, options.pointStr, dimension);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    if (dimension == 1){\n      //TODO: Handle distance measures\n      String lower = String.valueOf(point[0] - options.distance);\n      String upper = String.valueOf(point[0] + options.distance);\n      SchemaField subSF = subField(options.field, 0);\n      // points must currently be ordered... should we support specifying any two opposite corner points?\n      result = subSF.getType().getRangeQuery(parser, subSF, lower, upper, true, true);\n    } else {\n      BooleanQuery tmp = new BooleanQuery();\n      //TODO: Handle distance measures, as this assumes Euclidean\n      double [] ur = DistanceUtils.vectorBoxCorner(point, null, options.distance, true);\n      double [] ll = DistanceUtils.vectorBoxCorner(point, null, options.distance, false);\n      for (int i = 0; i < ur.length; i++) {\n        SchemaField subSF = subField(options.field, i);\n        Query range = subSF.getType().getRangeQuery(parser, subSF, String.valueOf(ll[i]), String.valueOf(ur[i]), true, true);\n        tmp.add(range, BooleanClause.Occur.MUST);\n\n      }\n      result = tmp;\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointType#createSpatialQuery(QParser,SpatialOptions).mjava","pathOld":"solr/src/java/org/apache/solr/schema/PointType#createSpatialQuery(QParser,SpatialOptions).mjava","sourceNew":"  /**\n   * Calculates the range and creates a RangeQuery (bounding box) wrapped in a BooleanQuery (unless the dimension is 1, one range for every dimension, AND'd together by a Boolean\n   * @param parser The parser\n   * @param options The {@link org.apache.solr.search.SpatialOptions} for this filter.\n   * @return The Query representing the bounding box around the point.\n   */\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    Query result = null;\n    double [] point = new double[0];\n    try {\n      point = DistanceUtils.parsePointDouble(null, options.pointStr, dimension);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    if (dimension == 1){\n      //TODO: Handle distance measures\n      String lower = String.valueOf(point[0] - options.distance);\n      String upper = String.valueOf(point[0] + options.distance);\n      SchemaField subSF = subField(options.field, 0);\n      // points must currently be ordered... should we support specifying any two opposite corner points?\n      result = subSF.getType().getRangeQuery(parser, subSF, lower, upper, true, true);\n    } else {\n      BooleanQuery tmp = new BooleanQuery();\n      //TODO: Handle distance measures, as this assumes Euclidean\n      double [] ur = DistanceUtils.vectorBoxCorner(point, null, options.distance, true);\n      double [] ll = DistanceUtils.vectorBoxCorner(point, null, options.distance, false);\n      for (int i = 0; i < ur.length; i++) {\n        SchemaField subSF = subField(options.field, i);\n        Query range = subSF.getType().getRangeQuery(parser, subSF, String.valueOf(ll[i]), String.valueOf(ur[i]), true, true);\n        tmp.add(range, BooleanClause.Occur.MUST);\n\n      }\n      result = tmp;\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Calculates the range and creates a RangeQuery (bounding box) wrapped in a BooleanQuery (unless the dimension is 1, one range for every dimension, AND'd together by a Boolean\n   * @param parser The parser\n   * @param options The {@link org.apache.solr.search.SpatialOptions} for this filter.\n   * @return The Query representing the bounding box around the point.\n   */\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    Query result = null;\n    double [] point = new double[0];\n    try {\n      point = DistanceUtils.parsePointDouble(null, options.pointStr, dimension);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    if (dimension == 1){\n      //TODO: Handle distance measures\n      String lower = String.valueOf(point[0] - options.distance);\n      String upper = String.valueOf(point[0] + options.distance);\n      SchemaField subSF = subField(options.field, 0);\n      // points must currently be ordered... should we support specifying any two opposite corner points?\n      result = subSF.getType().getRangeQuery(parser, subSF, lower, upper, true, true);\n    } else {\n      BooleanQuery tmp = new BooleanQuery();\n      //TODO: Handle distance measures, as this assumes Euclidean\n      double [] ur = DistanceUtils.vectorBoxCorner(point, null, options.distance, true);\n      double [] ll = DistanceUtils.vectorBoxCorner(point, null, options.distance, false);\n      for (int i = 0; i < ur.length; i++) {\n        SchemaField subSF = subField(options.field, i);\n        Query range = subSF.getType().getRangeQuery(parser, subSF, String.valueOf(ll[i]), String.valueOf(ur[i]), true, true);\n        tmp.add(range, BooleanClause.Occur.MUST);\n\n      }\n      result = tmp;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointType#createSpatialQuery(QParser,SpatialOptions).mjava","pathOld":"solr/src/java/org/apache/solr/schema/PointType#createSpatialQuery(QParser,SpatialOptions).mjava","sourceNew":"  /**\n   * Calculates the range and creates a RangeQuery (bounding box) wrapped in a BooleanQuery (unless the dimension is 1, one range for every dimension, AND'd together by a Boolean\n   * @param parser The parser\n   * @param options The {@link org.apache.solr.search.SpatialOptions} for this filter.\n   * @return The Query representing the bounding box around the point.\n   */\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    Query result = null;\n    double [] point = new double[0];\n    try {\n      point = DistanceUtils.parsePointDouble(null, options.pointStr, dimension);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    if (dimension == 1){\n      //TODO: Handle distance measures\n      String lower = String.valueOf(point[0] - options.distance);\n      String upper = String.valueOf(point[0] + options.distance);\n      SchemaField subSF = subField(options.field, 0);\n      // points must currently be ordered... should we support specifying any two opposite corner points?\n      result = subSF.getType().getRangeQuery(parser, subSF, lower, upper, true, true);\n    } else {\n      BooleanQuery tmp = new BooleanQuery();\n      //TODO: Handle distance measures, as this assumes Euclidean\n      double [] ur = DistanceUtils.vectorBoxCorner(point, null, options.distance, true);\n      double [] ll = DistanceUtils.vectorBoxCorner(point, null, options.distance, false);\n      for (int i = 0; i < ur.length; i++) {\n        SchemaField subSF = subField(options.field, i);\n        Query range = subSF.getType().getRangeQuery(parser, subSF, String.valueOf(ll[i]), String.valueOf(ur[i]), true, true);\n        tmp.add(range, BooleanClause.Occur.MUST);\n\n      }\n      result = tmp;\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Calculates the range and creates a RangeQuery (bounding box) wrapped in a BooleanQuery (unless the dimension is 1, one range for every dimension, AND'd together by a Boolean\n   * @param parser The parser\n   * @param options The {@link org.apache.solr.search.SpatialOptions} for this filter.\n   * @return The Query representing the bounding box around the point.\n   */\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    Query result = null;\n    double [] point = new double[0];\n    try {\n      point = DistanceUtils.parsePointDouble(null, options.pointStr, dimension);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    if (dimension == 1){\n      //TODO: Handle distance measures\n      String lower = String.valueOf(point[0] - options.distance);\n      String upper = String.valueOf(point[0] + options.distance);\n      SchemaField subSF = subField(options.field, 0);\n      // points must currently be ordered... should we support specifying any two opposite corner points?\n      result = subSF.getType().getRangeQuery(parser, subSF, lower, upper, true, true);\n    } else {\n      BooleanQuery tmp = new BooleanQuery();\n      //TODO: Handle distance measures, as this assumes Euclidean\n      double [] ur = DistanceUtils.vectorBoxCorner(point, null, options.distance, true);\n      double [] ll = DistanceUtils.vectorBoxCorner(point, null, options.distance, false);\n      for (int i = 0; i < ur.length; i++) {\n        SchemaField subSF = subField(options.field, i);\n        Query range = subSF.getType().getRangeQuery(parser, subSF, String.valueOf(ll[i]), String.valueOf(ur[i]), true, true);\n        tmp.add(range, BooleanClause.Occur.MUST);\n\n      }\n      result = tmp;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/PointType#createSpatialQuery(QParser,SpatialOptions).mjava","pathOld":"solr/src/java/org/apache/solr/schema/PointType#createSpatialQuery(QParser,SpatialOptions).mjava","sourceNew":"  /**\n   * Calculates the range and creates a RangeQuery (bounding box) wrapped in a BooleanQuery (unless the dimension is 1, one range for every dimension, AND'd together by a Boolean\n   * @param parser The parser\n   * @param options The {@link org.apache.solr.search.SpatialOptions} for this filter.\n   * @return The Query representing the bounding box around the point.\n   */\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    Query result = null;\n    double [] point = new double[0];\n    try {\n      point = DistanceUtils.parsePointDouble(null, options.pointStr, dimension);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    if (dimension == 1){\n      //TODO: Handle distance measures\n      String lower = String.valueOf(point[0] - options.distance);\n      String upper = String.valueOf(point[0] + options.distance);\n      SchemaField subSF = subField(options.field, 0);\n      // points must currently be ordered... should we support specifying any two opposite corner points?\n      result = subSF.getType().getRangeQuery(parser, subSF, lower, upper, true, true);\n    } else {\n      BooleanQuery tmp = new BooleanQuery();\n      //TODO: Handle distance measures, as this assumes Euclidean\n      double [] ur = DistanceUtils.vectorBoxCorner(point, null, options.distance, true);\n      double [] ll = DistanceUtils.vectorBoxCorner(point, null, options.distance, false);\n      for (int i = 0; i < ur.length; i++) {\n        SchemaField subSF = subField(options.field, i);\n        Query range = subSF.getType().getRangeQuery(parser, subSF, String.valueOf(ll[i]), String.valueOf(ur[i]), true, true);\n        tmp.add(range, BooleanClause.Occur.MUST);\n\n      }\n      result = tmp;\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Calculates the range and creates a RangeQuery (bounding box) wrapped in a BooleanQuery (unless the dimension is 1, one range for every dimension, AND'd together by a Boolean\n   * @param parser The parser\n   * @param options The {@link org.apache.solr.search.SpatialOptions} for this filter.\n   * @return The Query representing the bounding box around the point.\n   */\n  public Query createSpatialQuery(QParser parser, SpatialOptions options) {\n    Query result = null;\n    double [] point = new double[0];\n    try {\n      point = DistanceUtils.parsePointDouble(null, options.pointStr, dimension);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n    if (dimension == 1){\n      //TODO: Handle distance measures\n      String lower = String.valueOf(point[0] - options.distance);\n      String upper = String.valueOf(point[0] + options.distance);\n      SchemaField subSF = subField(options.field, 0);\n      // points must currently be ordered... should we support specifying any two opposite corner points?\n      result = subSF.getType().getRangeQuery(parser, subSF, lower, upper, true, true);\n    } else {\n      BooleanQuery tmp = new BooleanQuery();\n      //TODO: Handle distance measures, as this assumes Euclidean\n      double [] ur = DistanceUtils.vectorBoxCorner(point, null, options.distance, true);\n      double [] ll = DistanceUtils.vectorBoxCorner(point, null, options.distance, false);\n      for (int i = 0; i < ur.length; i++) {\n        SchemaField subSF = subField(options.field, i);\n        Query range = subSF.getType().getRangeQuery(parser, subSF, String.valueOf(ll[i]), String.valueOf(ur[i]), true, true);\n        tmp.add(range, BooleanClause.Occur.MUST);\n\n      }\n      result = tmp;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5f900d5ce814fc22ea498d3303d1f833f5bf320c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["459be89020f9023e3b60066066a892c7edb5de58"],"c26f00b574427b55127e869b935845554afde1fa":["459be89020f9023e3b60066066a892c7edb5de58","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"459be89020f9023e3b60066066a892c7edb5de58":["5f900d5ce814fc22ea498d3303d1f833f5bf320c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["459be89020f9023e3b60066066a892c7edb5de58"],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","459be89020f9023e3b60066066a892c7edb5de58"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"5f900d5ce814fc22ea498d3303d1f833f5bf320c":["459be89020f9023e3b60066066a892c7edb5de58"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f900d5ce814fc22ea498d3303d1f833f5bf320c","5f4e87790277826a2aea119328600dfb07761f32"],"459be89020f9023e3b60066066a892c7edb5de58":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","5f4e87790277826a2aea119328600dfb07761f32"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"5f4e87790277826a2aea119328600dfb07761f32":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}