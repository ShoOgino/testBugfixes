{"path":"src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","commits":[{"id":"902ba79f4590a41c663c447756d2e5041cbbdda9","date":1217956662,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","pathOld":"/dev/null","sourceNew":"  // Tests whether merging of docs that have different\n  // omitTf for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new StandardAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(3);\n    writer.setMergeFactor(2);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.TOKENIZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = new Field(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.TOKENIZED);\n    f2.setOmitTf(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTf(true);\n    d.add(f1);\n        \n    f2.setOmitTf(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    // only one segment in the index, so we can cast to SegmentReader\n    SegmentReader reader = (SegmentReader) IndexReader.open(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTf field bit should be set.\", fi.fieldInfo(\"f1\").omitTf);\n    assertTrue(\"OmitTf field bit should be set.\", fi.fieldInfo(\"f2\").omitTf);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","sourceNew":"  // Tests whether merging of docs that have different\n  // omitTf for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new StandardAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(3);\n    writer.setMergeFactor(2);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = new Field(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTf(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTf(true);\n    d.add(f1);\n        \n    f2.setOmitTf(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    // only one segment in the index, so we can cast to SegmentReader\n    SegmentReader reader = (SegmentReader) IndexReader.open(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTf field bit should be set.\", fi.fieldInfo(\"f1\").omitTf);\n    assertTrue(\"OmitTf field bit should be set.\", fi.fieldInfo(\"f2\").omitTf);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether merging of docs that have different\n  // omitTf for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new StandardAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(3);\n    writer.setMergeFactor(2);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.TOKENIZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = new Field(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.TOKENIZED);\n    f2.setOmitTf(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTf(true);\n    d.add(f1);\n        \n    f2.setOmitTf(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    // only one segment in the index, so we can cast to SegmentReader\n    SegmentReader reader = (SegmentReader) IndexReader.open(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTf field bit should be set.\", fi.fieldInfo(\"f1\").omitTf);\n    assertTrue(\"OmitTf field bit should be set.\", fi.fieldInfo(\"f2\").omitTf);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"066b6ff5a08e35c3b6880e7c3ddda79526acdab1","date":1237569961,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","sourceNew":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new StandardAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(3);\n    writer.setMergeFactor(2);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = new Field(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    // only one segment in the index, so we can cast to SegmentReader\n    SegmentReader reader = (SegmentReader) IndexReader.open(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether merging of docs that have different\n  // omitTf for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new StandardAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(3);\n    writer.setMergeFactor(2);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = new Field(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTf(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTf(true);\n    d.add(f1);\n        \n    f2.setOmitTf(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    // only one segment in the index, so we can cast to SegmentReader\n    SegmentReader reader = (SegmentReader) IndexReader.open(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTf field bit should be set.\", fi.fieldInfo(\"f1\").omitTf);\n    assertTrue(\"OmitTf field bit should be set.\", fi.fieldInfo(\"f2\").omitTf);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","date":1244392278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","sourceNew":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new StandardAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(3);\n    writer.setMergeFactor(2);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = new Field(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new StandardAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(3);\n    writer.setMergeFactor(2);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = new Field(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    // only one segment in the index, so we can cast to SegmentReader\n    SegmentReader reader = (SegmentReader) IndexReader.open(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","sourceNew":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT);\n    IndexWriter writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(3);\n    writer.setMergeFactor(2);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = new Field(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new StandardAnalyzer();\n    IndexWriter writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(3);\n    writer.setMergeFactor(2);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = new Field(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","sourceNew":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(3);\n    writer.setMergeFactor(2);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = new Field(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT);\n    IndexWriter writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(3);\n    writer.setMergeFactor(2);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = new Field(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","sourceNew":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter writer = new IndexWriter(ram, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(analyzer).setMaxBufferedDocs(3));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = new Field(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(3);\n    writer.setMergeFactor(2);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = new Field(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","sourceNew":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(3);\n    writer.setMergeFactor(2);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = new Field(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter writer = new IndexWriter(ram, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(analyzer).setMaxBufferedDocs(3));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = new Field(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","sourceNew":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter writer = new IndexWriter(ram, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = new Field(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter writer = new IndexWriter(ram, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(3);\n    writer.setMergeFactor(2);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = new Field(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","pathOld":"src/test/org/apache/lucene/index/TestOmitTf#testMixedMerge().mjava","sourceNew":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter writer = new IndexWriter(ram, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = new Field(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Tests whether merging of docs that have different\n  // omitTermFreqAndPositions for the same field works\n  public void testMixedMerge() throws Exception {\n    Directory ram = new MockRAMDirectory();\n    Analyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter writer = new IndexWriter(ram, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer).setMaxBufferedDocs(3));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(2);\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = new Field(\"f1\", \"This field has term freqs\", Field.Store.NO, Field.Index.ANALYZED);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = new Field(\"f2\", \"This field has NO Tf in all docs\", Field.Store.NO, Field.Index.ANALYZED);\n    f2.setOmitTermFreqAndPositions(true);\n    d.add(f2);\n\n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // now we add another document which has term freq for field f2 and not for f1 and verify if the SegmentMerger\n    // keep things constant\n    d = new Document();\n        \n    // Reverese\n    f1.setOmitTermFreqAndPositions(true);\n    d.add(f1);\n        \n    f2.setOmitTermFreqAndPositions(false);        \n    d.add(f2);\n        \n    for(int i=0;i<30;i++)\n      writer.addDocument(d);\n        \n    // force merge\n    writer.optimize();\n    // flush\n    writer.close();\n\n    _TestUtil.checkIndex(ram);\n\n    SegmentReader reader = SegmentReader.getOnlySegmentReader(ram);\n    FieldInfos fi = reader.fieldInfos();\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f1\").omitTermFreqAndPositions);\n    assertTrue(\"OmitTermFreqAndPositions field bit should be set.\", fi.fieldInfo(\"f2\").omitTermFreqAndPositions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["066b6ff5a08e35c3b6880e7c3ddda79526acdab1"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"066b6ff5a08e35c3b6880e7c3ddda79526acdab1":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["902ba79f4590a41c663c447756d2e5041cbbdda9"],"902ba79f4590a41c663c447756d2e5041cbbdda9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["902ba79f4590a41c663c447756d2e5041cbbdda9"],"066b6ff5a08e35c3b6880e7c3ddda79526acdab1":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["066b6ff5a08e35c3b6880e7c3ddda79526acdab1"],"902ba79f4590a41c663c447756d2e5041cbbdda9":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}