{"path":"lucene/src/java/org/apache/lucene/index/SegmentNorms#clone().mjava","commits":[{"id":"8b5e0eebe355b14693e24007d721da78a79d8170","date":1305898401,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentNorms#clone().mjava","pathOld":"/dev/null","sourceNew":"  // Returns a copy of this Norm instance that shares\n  // IndexInput & bytes with the original one\n  @Override\n  public synchronized Object clone() {\n    assert refCount > 0 && (origNorm == null || origNorm.refCount > 0);\n      \n    SegmentNorms clone;\n    try {\n      clone = (SegmentNorms) super.clone();\n    } catch (CloneNotSupportedException cnse) {\n      // Cannot happen\n      throw new RuntimeException(\"unexpected CloneNotSupportedException\", cnse);\n    }\n    clone.refCount = 1;\n\n    if (bytes != null) {\n      assert bytesRef != null;\n      assert origNorm == null;\n\n      // Clone holds a reference to my bytes:\n      clone.bytesRef.incrementAndGet();\n    } else {\n      assert bytesRef == null;\n      if (origNorm == null) {\n        // I become the origNorm for the clone:\n        clone.origNorm = this;\n      }\n      clone.origNorm.incRef();\n    }\n\n    // Only the origNorm will actually readBytes from in:\n    clone.in = null;\n\n    return clone;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentNorms#clone().mjava","pathOld":"/dev/null","sourceNew":"  // Returns a copy of this Norm instance that shares\n  // IndexInput & bytes with the original one\n  @Override\n  public synchronized Object clone() {\n    assert refCount > 0 && (origNorm == null || origNorm.refCount > 0);\n      \n    SegmentNorms clone;\n    try {\n      clone = (SegmentNorms) super.clone();\n    } catch (CloneNotSupportedException cnse) {\n      // Cannot happen\n      throw new RuntimeException(\"unexpected CloneNotSupportedException\", cnse);\n    }\n    clone.refCount = 1;\n\n    if (bytes != null) {\n      assert bytesRef != null;\n      assert origNorm == null;\n\n      // Clone holds a reference to my bytes:\n      clone.bytesRef.incrementAndGet();\n    } else {\n      assert bytesRef == null;\n      if (origNorm == null) {\n        // I become the origNorm for the clone:\n        clone.origNorm = this;\n      }\n      clone.origNorm.incRef();\n    }\n\n    // Only the origNorm will actually readBytes from in:\n    clone.in = null;\n\n    return clone;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","date":1306150983,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentNorms#clone().mjava","pathOld":"/dev/null","sourceNew":"  // Returns a copy of this Norm instance that shares\n  // IndexInput & bytes with the original one\n  @Override\n  public synchronized Object clone() {\n    assert refCount > 0 && (origNorm == null || origNorm.refCount > 0);\n      \n    SegmentNorms clone;\n    try {\n      clone = (SegmentNorms) super.clone();\n    } catch (CloneNotSupportedException cnse) {\n      // Cannot happen\n      throw new RuntimeException(\"unexpected CloneNotSupportedException\", cnse);\n    }\n    clone.refCount = 1;\n\n    if (bytes != null) {\n      assert bytesRef != null;\n      assert origNorm == null;\n\n      // Clone holds a reference to my bytes:\n      clone.bytesRef.incrementAndGet();\n    } else {\n      assert bytesRef == null;\n      if (origNorm == null) {\n        // I become the origNorm for the clone:\n        clone.origNorm = this;\n      }\n      clone.origNorm.incRef();\n    }\n\n    // Only the origNorm will actually readBytes from in:\n    clone.in = null;\n\n    return clone;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11f75174865a8734695cd60a4093339a4e63fcbb","date":1323039567,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentNorms#clone().mjava","sourceNew":null,"sourceOld":"  // Returns a copy of this Norm instance that shares\n  // IndexInput & bytes with the original one\n  @Override\n  public synchronized Object clone() {\n    assert refCount > 0 && (origNorm == null || origNorm.refCount > 0);\n      \n    SegmentNorms clone;\n    try {\n      clone = (SegmentNorms) super.clone();\n    } catch (CloneNotSupportedException cnse) {\n      // Cannot happen\n      throw new RuntimeException(\"unexpected CloneNotSupportedException\", cnse);\n    }\n    clone.refCount = 1;\n\n    if (bytes != null) {\n      assert bytesRef != null;\n      assert origNorm == null;\n\n      // Clone holds a reference to my bytes:\n      clone.bytesRef.incrementAndGet();\n    } else {\n      assert bytesRef == null;\n      if (origNorm == null) {\n        // I become the origNorm for the clone:\n        clone.origNorm = this;\n      }\n      clone.origNorm.incRef();\n    }\n\n    // Only the origNorm will actually readBytes from in:\n    clone.in = null;\n\n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentNorms#clone().mjava","sourceNew":null,"sourceOld":"  // Returns a copy of this Norm instance that shares\n  // IndexInput & bytes with the original one\n  @Override\n  public synchronized Object clone() {\n    assert refCount > 0 && (origNorm == null || origNorm.refCount > 0);\n      \n    SegmentNorms clone;\n    try {\n      clone = (SegmentNorms) super.clone();\n    } catch (CloneNotSupportedException cnse) {\n      // Cannot happen\n      throw new RuntimeException(\"unexpected CloneNotSupportedException\", cnse);\n    }\n    clone.refCount = 1;\n\n    if (bytes != null) {\n      assert bytesRef != null;\n      assert origNorm == null;\n\n      // Clone holds a reference to my bytes:\n      clone.bytesRef.incrementAndGet();\n    } else {\n      assert bytesRef == null;\n      if (origNorm == null) {\n        // I become the origNorm for the clone:\n        clone.origNorm = this;\n      }\n      clone.origNorm.incRef();\n    }\n\n    // Only the origNorm will actually readBytes from in:\n    clone.in = null;\n\n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentNorms#clone().mjava","sourceNew":null,"sourceOld":"  // Returns a copy of this Norm instance that shares\n  // IndexInput & bytes with the original one\n  @Override\n  public synchronized Object clone() {\n    assert refCount > 0 && (origNorm == null || origNorm.refCount > 0);\n      \n    SegmentNorms clone;\n    try {\n      clone = (SegmentNorms) super.clone();\n    } catch (CloneNotSupportedException cnse) {\n      // Cannot happen\n      throw new RuntimeException(\"unexpected CloneNotSupportedException\", cnse);\n    }\n    clone.refCount = 1;\n\n    if (bytes != null) {\n      assert bytesRef != null;\n      assert origNorm == null;\n\n      // Clone holds a reference to my bytes:\n      clone.bytesRef.incrementAndGet();\n    } else {\n      assert bytesRef == null;\n      if (origNorm == null) {\n        // I become the origNorm for the clone:\n        clone.origNorm = this;\n      }\n      clone.origNorm.incRef();\n    }\n\n    // Only the origNorm will actually readBytes from in:\n    clone.in = null;\n\n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8b5e0eebe355b14693e24007d721da78a79d8170":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b5e0eebe355b14693e24007d721da78a79d8170"],"11f75174865a8734695cd60a4093339a4e63fcbb":["8b5e0eebe355b14693e24007d721da78a79d8170"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["8b5e0eebe355b14693e24007d721da78a79d8170","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b5e0eebe355b14693e24007d721da78a79d8170"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["8b5e0eebe355b14693e24007d721da78a79d8170","11f75174865a8734695cd60a4093339a4e63fcbb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3615ce4a1f785ae1b779244de52c6a7d99227e60"]},"commit2Childs":{"8b5e0eebe355b14693e24007d721da78a79d8170":["5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","11f75174865a8734695cd60a4093339a4e63fcbb","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","a3776dccca01c11e7046323cfad46a3b4a471233","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a":[],"11f75174865a8734695cd60a4093339a4e63fcbb":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b5e0eebe355b14693e24007d721da78a79d8170","5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","a3776dccca01c11e7046323cfad46a3b4a471233"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}