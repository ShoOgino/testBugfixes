{"path":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanCollection#setUp().mjava","commits":[{"id":"29aea3139c4326c0501d75d51059855463220279","date":1433952060,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanCollection#setUp().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.INSTANCE));\n    for (int i = 0; i < docFields.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(FIELD, docFields[i], OFFSETS));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanCollection#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanCollection#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.INSTANCE));\n    for (int i = 0; i < docFields.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(FIELD, docFields[i], OFFSETS));\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(getOnlyLeafReader(reader));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.INSTANCE));\n    for (int i = 0; i < docFields.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(FIELD, docFields[i], OFFSETS));\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n  }\n\n","bugFix":["29aea3139c4326c0501d75d51059855463220279"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8141989679fca394a0f826f6107d0564613c574b","date":1457965317,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanCollection#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanCollection#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random())));\n    for (int i = 0; i < docFields.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(FIELD, docFields[i], OFFSETS));\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(getOnlyLeafReader(reader));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(NoMergePolicy.INSTANCE));\n    for (int i = 0; i < docFields.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(FIELD, docFields[i], OFFSETS));\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(getOnlyLeafReader(reader));\n  }\n\n","bugFix":null,"bugIntro":["2cff0a6b3f12446c180aab89a83a32fb5da87851"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2cff0a6b3f12446c180aab89a83a32fb5da87851","date":1464808502,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanCollection#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanCollection#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docFields.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(FIELD, docFields[i], OFFSETS));\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(getOnlyLeafReader(reader));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random())));\n    for (int i = 0; i < docFields.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(FIELD, docFields[i], OFFSETS));\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(getOnlyLeafReader(reader));\n  }\n\n","bugFix":["8141989679fca394a0f826f6107d0564613c574b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8ee93140fd0efef7e101786e3ed5160a700b5f","date":1464820111,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanCollection#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanCollection#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docFields.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(FIELD, docFields[i], OFFSETS));\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(getOnlyLeafReader(reader));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random())));\n    for (int i = 0; i < docFields.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(FIELD, docFields[i], OFFSETS));\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(getOnlyLeafReader(reader));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","date":1464821470,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanCollection#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanCollection#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docFields.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(FIELD, docFields[i], OFFSETS));\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(getOnlyLeafReader(reader));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random())));\n    for (int i = 0; i < docFields.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(FIELD, docFields[i], OFFSETS));\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(getOnlyLeafReader(reader));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f69e96b07e265f3e18957be540909b01fae36f8","date":1464859090,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanCollection#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanCollection#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docFields.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(FIELD, docFields[i], OFFSETS));\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(getOnlyLeafReader(reader));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random())));\n    for (int i = 0; i < docFields.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(FIELD, docFields[i], OFFSETS));\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(getOnlyLeafReader(reader));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanCollection#setUp().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanCollection#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < docFields.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(FIELD, docFields[i], OFFSETS));\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(getOnlyLeafReader(reader));\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n        newIndexWriterConfig(new MockAnalyzer(random())));\n    for (int i = 0; i < docFields.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(FIELD, docFields[i], OFFSETS));\n      writer.addDocument(doc);\n    }\n    writer.forceMerge(1);\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(getOnlyLeafReader(reader));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["29aea3139c4326c0501d75d51059855463220279"],"8141989679fca394a0f826f6107d0564613c574b":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"29aea3139c4326c0501d75d51059855463220279":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1f69e96b07e265f3e18957be540909b01fae36f8":["8141989679fca394a0f826f6107d0564613c574b","2cff0a6b3f12446c180aab89a83a32fb5da87851"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["8141989679fca394a0f826f6107d0564613c574b","2cff0a6b3f12446c180aab89a83a32fb5da87851"],"2cff0a6b3f12446c180aab89a83a32fb5da87851":["8141989679fca394a0f826f6107d0564613c574b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["8141989679fca394a0f826f6107d0564613c574b","1f69e96b07e265f3e18957be540909b01fae36f8"],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":["8141989679fca394a0f826f6107d0564613c574b","5b8ee93140fd0efef7e101786e3ed5160a700b5f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1f69e96b07e265f3e18957be540909b01fae36f8"]},"commit2Childs":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["8141989679fca394a0f826f6107d0564613c574b"],"29aea3139c4326c0501d75d51059855463220279":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"8141989679fca394a0f826f6107d0564613c574b":["1f69e96b07e265f3e18957be540909b01fae36f8","5b8ee93140fd0efef7e101786e3ed5160a700b5f","2cff0a6b3f12446c180aab89a83a32fb5da87851","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29aea3139c4326c0501d75d51059855463220279"],"1f69e96b07e265f3e18957be540909b01fae36f8":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"2cff0a6b3f12446c180aab89a83a32fb5da87851":["1f69e96b07e265f3e18957be540909b01fae36f8","5b8ee93140fd0efef7e101786e3ed5160a700b5f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}