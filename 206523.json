{"path":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#fileLength(String).mjava","commits":[{"id":"0aab6e810b4b0d3743d6a048be0602801f4b3920","date":1308671625,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#fileLength(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#fileLength(String).mjava","sourceNew":"  /** Returns the length of a file in the directory.\n   * @throws IOException if the file does not exist */\n  @Override\n  public long fileLength(String name) throws IOException {\n    ensureOpen();\n    if (this.writer != null) {\n      return writer.fileLenght(name);\n    }\n    FileEntry e = entries.get(IndexFileNames.stripSegmentName(name));\n    if (e == null)\n      throw new FileNotFoundException(name);\n    return e.length;\n  }\n\n","sourceOld":"  /** Returns the length of a file in the directory.\n   * @throws IOException if the file does not exist */\n  @Override\n  public long fileLength(String name) throws IOException {\n    FileEntry e = entries.get(IndexFileNames.stripSegmentName(name));\n    if (e == null)\n      throw new FileNotFoundException(name);\n    return e.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#fileLength(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#fileLength(String).mjava","sourceNew":"  /** Returns the length of a file in the directory.\n   * @throws IOException if the file does not exist */\n  @Override\n  public long fileLength(String name) throws IOException {\n    ensureOpen();\n    if (this.writer != null) {\n      return writer.fileLenght(name);\n    }\n    FileEntry e = entries.get(IndexFileNames.stripSegmentName(name));\n    if (e == null)\n      throw new FileNotFoundException(name);\n    return e.length;\n  }\n\n","sourceOld":"  /** Returns the length of a file in the directory.\n   * @throws IOException if the file does not exist */\n  @Override\n  public long fileLength(String name) throws IOException {\n    FileEntry e = entries.get(IndexFileNames.stripSegmentName(name));\n    if (e == null)\n      throw new FileNotFoundException(name);\n    return e.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#fileLength(String).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the length of a file in the directory.\n   * @throws IOException if the file does not exist */\n  @Override\n  public long fileLength(String name) throws IOException {\n    ensureOpen();\n    if (this.writer != null) {\n      return writer.fileLenght(name);\n    }\n    FileEntry e = entries.get(IndexFileNames.stripSegmentName(name));\n    if (e == null)\n      throw new FileNotFoundException(name);\n    return e.length;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#fileLength(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#fileLength(String).mjava","sourceNew":"  /** Returns the length of a file in the directory.\n   * @throws IOException if the file does not exist */\n  @Override\n  public long fileLength(String name) throws IOException {\n    ensureOpen();\n    if (this.writer != null) {\n      return writer.fileLength(name);\n    }\n    FileEntry e = entries.get(IndexFileNames.stripSegmentName(name));\n    if (e == null)\n      throw new FileNotFoundException(name);\n    return e.length;\n  }\n\n","sourceOld":"  /** Returns the length of a file in the directory.\n   * @throws IOException if the file does not exist */\n  @Override\n  public long fileLength(String name) throws IOException {\n    ensureOpen();\n    if (this.writer != null) {\n      return writer.fileLenght(name);\n    }\n    FileEntry e = entries.get(IndexFileNames.stripSegmentName(name));\n    if (e == null)\n      throw new FileNotFoundException(name);\n    return e.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/CompoundFileDirectory#fileLength(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/CompoundFileDirectory#fileLength(String).mjava","sourceNew":"  /** Returns the length of a file in the directory.\n   * @throws IOException if the file does not exist */\n  @Override\n  public long fileLength(String name) throws IOException {\n    ensureOpen();\n    if (this.writer != null) {\n      return writer.fileLength(name);\n    }\n    FileEntry e = entries.get(IndexFileNames.stripSegmentName(name));\n    if (e == null)\n      throw new FileNotFoundException(name);\n    return e.length;\n  }\n\n","sourceOld":"  /** Returns the length of a file in the directory.\n   * @throws IOException if the file does not exist */\n  @Override\n  public long fileLength(String name) throws IOException {\n    ensureOpen();\n    if (this.writer != null) {\n      return writer.fileLength(name);\n    }\n    FileEntry e = entries.get(IndexFileNames.stripSegmentName(name));\n    if (e == null)\n      throw new FileNotFoundException(name);\n    return e.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["0aab6e810b4b0d3743d6a048be0602801f4b3920"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7b91922b55d15444d554721b352861d028eb8278"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0aab6e810b4b0d3743d6a048be0602801f4b3920":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2553b00f699380c64959ccb27991289aae87be2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0aab6e810b4b0d3743d6a048be0602801f4b3920"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0aab6e810b4b0d3743d6a048be0602801f4b3920"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0aab6e810b4b0d3743d6a048be0602801f4b3920","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"0aab6e810b4b0d3743d6a048be0602801f4b3920":["7b91922b55d15444d554721b352861d028eb8278","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"2553b00f699380c64959ccb27991289aae87be2e":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}