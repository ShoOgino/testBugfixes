{"path":"src/java/org/apache/lucene/util/BitVector#count().mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/BitVector#count().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the total number of one bits in this vector.  This is efficiently\n    computed and cached, so that, if the vector is not changed, no\n    recomputation is done for repeated calls. */\n  public final int count() {\n    if (count == -1) {\n      int c = 0;\n      int end = bits.length;\n      for (int i = 0; i < end; i++)\n\tc += BYTE_COUNTS[bits[i] & 0xFF];\t  // sum bits per byte\n      count = c;\n    }\n    return count;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1acbe60842541f8c38e2d60b03591478c9f91546","date":1066055498,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/BitVector#count().mjava","pathOld":"src/java/org/apache/lucene/util/BitVector#count().mjava","sourceNew":"  /** Returns the total number of one bits in this vector.  This is efficiently\n    computed and cached, so that, if the vector is not changed, no\n    recomputation is done for repeated calls. */\n  public final int count() {\n    // if the vector has been modified\n    if (count == -1) {\n      int c = 0;\n      int end = bits.length;\n      for (int i = 0; i < end; i++)\n        c += BYTE_COUNTS[bits[i] & 0xFF];\t  // sum bits per byte\n      count = c;\n    }\n    return count;\n  }\n\n","sourceOld":"  /** Returns the total number of one bits in this vector.  This is efficiently\n    computed and cached, so that, if the vector is not changed, no\n    recomputation is done for repeated calls. */\n  public final int count() {\n    if (count == -1) {\n      int c = 0;\n      int end = bits.length;\n      for (int i = 0; i < end; i++)\n\tc += BYTE_COUNTS[bits[i] & 0xFF];\t  // sum bits per byte\n      count = c;\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BitVector#count().mjava","pathOld":"src/java/org/apache/lucene/util/BitVector#count().mjava","sourceNew":"  /** Returns the total number of one bits in this vector.  This is efficiently\n    computed and cached, so that, if the vector is not changed, no\n    recomputation is done for repeated calls. */\n  public final int count() {\n    // if the vector has been modified\n    if (count == -1) {\n      int c = 0;\n      int end = bits.length;\n      for (int i = 0; i < end; i++)\n        c += BYTE_COUNTS[bits[i] & 0xFF];\t  // sum bits per byte\n      count = c;\n    }\n    return count;\n  }\n\n","sourceOld":"  /** Returns the total number of one bits in this vector.  This is efficiently\n    computed and cached, so that, if the vector is not changed, no\n    recomputation is done for repeated calls. */\n  public final int count() {\n    // if the vector has been modified\n    if (count == -1) {\n      int c = 0;\n      int end = bits.length;\n      for (int i = 0; i < end; i++)\n        c += BYTE_COUNTS[bits[i] & 0xFF];\t  // sum bits per byte\n      count = c;\n    }\n    return count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1acbe60842541f8c38e2d60b03591478c9f91546":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1acbe60842541f8c38e2d60b03591478c9f91546"]},"commit2Childs":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["1acbe60842541f8c38e2d60b03591478c9f91546"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"1acbe60842541f8c38e2d60b03591478c9f91546":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}