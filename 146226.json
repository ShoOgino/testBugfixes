{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getCollectionNames(ClusterState,String).mjava","commits":[{"id":"4c2f5223cebd58879933670af3e599b10d7e8f1a","date":1422450178,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getCollectionNames(ClusterState,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getCollectionList(ClusterState,String).mjava","sourceNew":"  private Set<String> getCollectionNames(ClusterState clusterState,\n                                         String collection) {\n    // Extract each comma separated collection name and store in a List.\n    List<String> rawCollectionsList = StrUtils.splitSmart(collection, \",\", true);\n    Set<String> collectionNames = new HashSet<>();\n    // validate collections\n    for (String collectionName : rawCollectionsList) {\n      if (!clusterState.getCollections().contains(collectionName)) {\n        Aliases aliases = zkStateReader.getAliases();\n        String alias = aliases.getCollectionAlias(collectionName);\n        if (alias != null) {\n          List<String> aliasList = StrUtils.splitSmart(alias, \",\", true);\n          collectionNames.addAll(aliasList);\n          continue;\n        }\n\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + collectionName);\n        }\n\n      collectionNames.add(collectionName);\n    }\n    return collectionNames;\n  }\n\n","sourceOld":"  private Set<String> getCollectionList(ClusterState clusterState,\n      String collection) {\n    // Extract each comma separated collection name and store in a List.\n    List<String> rawCollectionsList = StrUtils.splitSmart(collection, \",\", true);\n    Set<String> collectionsList = new HashSet<>();\n    // validate collections\n    for (String collectionName : rawCollectionsList) {\n      if (!clusterState.getCollections().contains(collectionName)) {\n        Aliases aliases = zkStateReader.getAliases();\n        String alias = aliases.getCollectionAlias(collectionName);\n        if (alias != null) {\n          List<String> aliasList = StrUtils.splitSmart(alias, \",\", true);\n          collectionsList.addAll(aliasList);\n          continue;\n        }\n\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + collectionName);\n        }\n\n      collectionsList.add(collectionName);\n    }\n    return collectionsList;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bf04c3f77a2936f29948b9c0dd215d82d43f5cf","date":1440482195,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getCollectionNames(ClusterState,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getCollectionNames(ClusterState,String).mjava","sourceNew":"  private Set<String> getCollectionNames(ClusterState clusterState,\n                                         String collection) {\n    // Extract each comma separated collection name and store in a List.\n    List<String> rawCollectionsList = StrUtils.splitSmart(collection, \",\", true);\n    Set<String> collectionNames = new HashSet<>();\n    // validate collections\n    for (String collectionName : rawCollectionsList) {\n      if (!clusterState.hasCollection(collectionName)) {\n        Aliases aliases = zkStateReader.getAliases();\n        String alias = aliases.getCollectionAlias(collectionName);\n        if (alias != null) {\n          List<String> aliasList = StrUtils.splitSmart(alias, \",\", true);\n          collectionNames.addAll(aliasList);\n          continue;\n        }\n\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + collectionName);\n        }\n\n      collectionNames.add(collectionName);\n    }\n    return collectionNames;\n  }\n\n","sourceOld":"  private Set<String> getCollectionNames(ClusterState clusterState,\n                                         String collection) {\n    // Extract each comma separated collection name and store in a List.\n    List<String> rawCollectionsList = StrUtils.splitSmart(collection, \",\", true);\n    Set<String> collectionNames = new HashSet<>();\n    // validate collections\n    for (String collectionName : rawCollectionsList) {\n      if (!clusterState.getCollections().contains(collectionName)) {\n        Aliases aliases = zkStateReader.getAliases();\n        String alias = aliases.getCollectionAlias(collectionName);\n        if (alias != null) {\n          List<String> aliasList = StrUtils.splitSmart(alias, \",\", true);\n          collectionNames.addAll(aliasList);\n          continue;\n        }\n\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + collectionName);\n        }\n\n      collectionNames.add(collectionName);\n    }\n    return collectionNames;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3eaeb36333664e8cb92108ef03f68a7b90beb759","date":1480015298,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getCollectionNames(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getCollectionNames(ClusterState,String).mjava","sourceNew":"  Set<String> getCollectionNames(String collection) {\n    // Extract each comma separated collection name and store in a List.\n    List<String> rawCollectionsList = StrUtils.splitSmart(collection, \",\", true);\n    Set<String> collectionNames = new HashSet<>();\n    // validate collections\n    for (String collectionName : rawCollectionsList) {\n      if (stateProvider.getState(collectionName) == null) {\n        String alias = stateProvider.getAlias(collection);\n        if (alias != null) {\n          List<String> aliasList = StrUtils.splitSmart(alias, \",\", true);\n          collectionNames.addAll(aliasList);\n          continue;\n        }\n\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + collectionName);\n        }\n\n      collectionNames.add(collectionName);\n    }\n    return collectionNames;\n  }\n\n","sourceOld":"  private Set<String> getCollectionNames(ClusterState clusterState,\n                                         String collection) {\n    // Extract each comma separated collection name and store in a List.\n    List<String> rawCollectionsList = StrUtils.splitSmart(collection, \",\", true);\n    Set<String> collectionNames = new HashSet<>();\n    // validate collections\n    for (String collectionName : rawCollectionsList) {\n      if (!clusterState.hasCollection(collectionName)) {\n        Aliases aliases = zkStateReader.getAliases();\n        String alias = aliases.getCollectionAlias(collectionName);\n        if (alias != null) {\n          List<String> aliasList = StrUtils.splitSmart(alias, \",\", true);\n          collectionNames.addAll(aliasList);\n          continue;\n        }\n\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + collectionName);\n        }\n\n      collectionNames.add(collectionName);\n    }\n    return collectionNames;\n  }\n\n","bugFix":null,"bugIntro":["a258b47d5de034cf50e5f1bb82437bd735138fe8","a258b47d5de034cf50e5f1bb82437bd735138fe8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getCollectionNames(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#getCollectionNames(ClusterState,String).mjava","sourceNew":"  Set<String> getCollectionNames(String collection) {\n    // Extract each comma separated collection name and store in a List.\n    List<String> rawCollectionsList = StrUtils.splitSmart(collection, \",\", true);\n    Set<String> collectionNames = new HashSet<>();\n    // validate collections\n    for (String collectionName : rawCollectionsList) {\n      if (stateProvider.getState(collectionName) == null) {\n        String alias = stateProvider.getAlias(collection);\n        if (alias != null) {\n          List<String> aliasList = StrUtils.splitSmart(alias, \",\", true);\n          collectionNames.addAll(aliasList);\n          continue;\n        }\n\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + collectionName);\n        }\n\n      collectionNames.add(collectionName);\n    }\n    return collectionNames;\n  }\n\n","sourceOld":"  private Set<String> getCollectionNames(ClusterState clusterState,\n                                         String collection) {\n    // Extract each comma separated collection name and store in a List.\n    List<String> rawCollectionsList = StrUtils.splitSmart(collection, \",\", true);\n    Set<String> collectionNames = new HashSet<>();\n    // validate collections\n    for (String collectionName : rawCollectionsList) {\n      if (!clusterState.hasCollection(collectionName)) {\n        Aliases aliases = zkStateReader.getAliases();\n        String alias = aliases.getCollectionAlias(collectionName);\n        if (alias != null) {\n          List<String> aliasList = StrUtils.splitSmart(alias, \",\", true);\n          collectionNames.addAll(aliasList);\n          continue;\n        }\n\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + collectionName);\n        }\n\n      collectionNames.add(collectionName);\n    }\n    return collectionNames;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c2f5223cebd58879933670af3e599b10d7e8f1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"727bb765ff2542275f6d31f67be18d7104bae148":["8bf04c3f77a2936f29948b9c0dd215d82d43f5cf","3eaeb36333664e8cb92108ef03f68a7b90beb759"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8bf04c3f77a2936f29948b9c0dd215d82d43f5cf":["4c2f5223cebd58879933670af3e599b10d7e8f1a"],"3eaeb36333664e8cb92108ef03f68a7b90beb759":["8bf04c3f77a2936f29948b9c0dd215d82d43f5cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3eaeb36333664e8cb92108ef03f68a7b90beb759"]},"commit2Childs":{"4c2f5223cebd58879933670af3e599b10d7e8f1a":["8bf04c3f77a2936f29948b9c0dd215d82d43f5cf"],"727bb765ff2542275f6d31f67be18d7104bae148":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4c2f5223cebd58879933670af3e599b10d7e8f1a"],"8bf04c3f77a2936f29948b9c0dd215d82d43f5cf":["727bb765ff2542275f6d31f67be18d7104bae148","3eaeb36333664e8cb92108ef03f68a7b90beb759"],"3eaeb36333664e8cb92108ef03f68a7b90beb759":["727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}