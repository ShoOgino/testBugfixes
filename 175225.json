{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterGraphFilter#slowWDF(String,int).mjava","commits":[{"id":"098528909bb70948871fd7ed865fafb87ed73964","date":1484667487,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterGraphFilter#slowWDF(String,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Does (hopefully) the same thing as WordDelimiterGraphFilter, according to the flags, but more slowly, returning all string paths combinations. */\n  private Set<String> slowWDF(String text, int flags) {\n\n    // first make word parts:\n    List<WordPart> wordParts = new ArrayList<>();\n    int lastCH = -1;\n    int wordPartStart = 0;\n    boolean inToken = false;\n\n    for(int i=0;i<text.length();i++) {\n      char ch = text.charAt(i);\n      if (toType(ch) == DELIM) {\n        // delimiter\n        if (inToken) {\n          // end current token\n          wordParts.add(new WordPart(text, wordPartStart, i));\n          inToken = false;\n        }\n\n        // strip english possessive at the end of this token?:\n        if (has(flags, STEM_ENGLISH_POSSESSIVE) &&\n            ch == '\\'' && i > 0 &&\n            i < text.length()-1 &&\n            (text.charAt(i+1) == 's' || text.charAt(i+1) == 'S') &&\n            toType(text.charAt(i-1)) == LETTER &&\n            (i+2 == text.length() || toType(text.charAt(i+2)) == DELIM)) {\n          i += 2;\n        }\n    \n      } else if (inToken == false) {\n        // start new token\n        inToken = true;\n        wordPartStart = i;\n      } else {\n        boolean newToken = false;\n        if (Character.isLetter(lastCH)) {\n          if (Character.isLetter(ch)) {\n            if (has(flags, SPLIT_ON_CASE_CHANGE) && Character.isLowerCase(lastCH) && Character.isLowerCase(ch) == false) {\n              // start new token on lower -> UPPER case change (but not vice versa!)\n              newToken = true;\n            }\n          } else if (has(flags, SPLIT_ON_NUMERICS) && Character.isDigit(ch)) {\n            // start new token on letter -> number change\n            newToken = true;\n          }\n        } else {\n          assert Character.isDigit(lastCH);\n          if (Character.isLetter(ch) && has(flags, SPLIT_ON_NUMERICS) ) {\n            // start new token on number -> letter change\n            newToken = true;\n          }\n        }\n        if (newToken) {\n          wordParts.add(new WordPart(text, wordPartStart, i));\n          wordPartStart = i;\n        }\n      }\n      lastCH = ch;\n    }\n\n    if (inToken) {\n      // add last token\n      wordParts.add(new WordPart(text, wordPartStart, text.length()));\n    }\n    \n    Set<String> paths = new HashSet<>();\n    if (wordParts.isEmpty() == false) {\n      enumerate(flags, 0, text, wordParts, paths, new StringBuilder());\n    }\n\n    if (has(flags, PRESERVE_ORIGINAL)) {\n      paths.add(text);\n    }\n\n    if (has(flags, CATENATE_ALL) && wordParts.isEmpty() == false) {\n      StringBuilder b = new StringBuilder();\n      for(WordPart wordPart : wordParts) {\n        b.append(wordPart.part);\n      }\n      paths.add(b.toString());\n    }\n    \n    return paths;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestWordDelimiterGraphFilter#slowWDF(String,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Does (hopefully) the same thing as WordDelimiterGraphFilter, according to the flags, but more slowly, returning all string paths combinations. */\n  private Set<String> slowWDF(String text, int flags) {\n\n    // first make word parts:\n    List<WordPart> wordParts = new ArrayList<>();\n    int lastCH = -1;\n    int wordPartStart = 0;\n    boolean inToken = false;\n\n    for(int i=0;i<text.length();i++) {\n      char ch = text.charAt(i);\n      if (toType(ch) == DELIM) {\n        // delimiter\n        if (inToken) {\n          // end current token\n          wordParts.add(new WordPart(text, wordPartStart, i));\n          inToken = false;\n        }\n\n        // strip english possessive at the end of this token?:\n        if (has(flags, STEM_ENGLISH_POSSESSIVE) &&\n            ch == '\\'' && i > 0 &&\n            i < text.length()-1 &&\n            (text.charAt(i+1) == 's' || text.charAt(i+1) == 'S') &&\n            toType(text.charAt(i-1)) == LETTER &&\n            (i+2 == text.length() || toType(text.charAt(i+2)) == DELIM)) {\n          i += 2;\n        }\n    \n      } else if (inToken == false) {\n        // start new token\n        inToken = true;\n        wordPartStart = i;\n      } else {\n        boolean newToken = false;\n        if (Character.isLetter(lastCH)) {\n          if (Character.isLetter(ch)) {\n            if (has(flags, SPLIT_ON_CASE_CHANGE) && Character.isLowerCase(lastCH) && Character.isLowerCase(ch) == false) {\n              // start new token on lower -> UPPER case change (but not vice versa!)\n              newToken = true;\n            }\n          } else if (has(flags, SPLIT_ON_NUMERICS) && Character.isDigit(ch)) {\n            // start new token on letter -> number change\n            newToken = true;\n          }\n        } else {\n          assert Character.isDigit(lastCH);\n          if (Character.isLetter(ch) && has(flags, SPLIT_ON_NUMERICS) ) {\n            // start new token on number -> letter change\n            newToken = true;\n          }\n        }\n        if (newToken) {\n          wordParts.add(new WordPart(text, wordPartStart, i));\n          wordPartStart = i;\n        }\n      }\n      lastCH = ch;\n    }\n\n    if (inToken) {\n      // add last token\n      wordParts.add(new WordPart(text, wordPartStart, text.length()));\n    }\n    \n    Set<String> paths = new HashSet<>();\n    if (wordParts.isEmpty() == false) {\n      enumerate(flags, 0, text, wordParts, paths, new StringBuilder());\n    }\n\n    if (has(flags, PRESERVE_ORIGINAL)) {\n      paths.add(text);\n    }\n\n    if (has(flags, CATENATE_ALL) && wordParts.isEmpty() == false) {\n      StringBuilder b = new StringBuilder();\n      for(WordPart wordPart : wordParts) {\n        b.append(wordPart.part);\n      }\n      paths.add(b.toString());\n    }\n    \n    return paths;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"098528909bb70948871fd7ed865fafb87ed73964":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["098528909bb70948871fd7ed865fafb87ed73964"],"302d34f2c66e8d489ee13078305c330cbf67b226":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","098528909bb70948871fd7ed865fafb87ed73964"]},"commit2Childs":{"098528909bb70948871fd7ed865fafb87ed73964":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["098528909bb70948871fd7ed865fafb87ed73964","302d34f2c66e8d489ee13078305c330cbf67b226"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"302d34f2c66e8d489ee13078305c330cbf67b226":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}