{"path":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParams().get(CommonParams.SORT);\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    Sort ss = null;\n    try {\n      ss = QueryParsing.parseSort(sort, req);\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      SolrCore.log.warn(\"Invalid sort \\\"\"+sort+\"\\\" was specified, ignoring\", sortE);\n      return null;\n    }\n\n    return ss;\n  }\n\n","sourceOld":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParams().get(CommonParams.SORT);\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    Sort ss = null;\n    try {\n      ss = QueryParsing.parseSort(sort, req);\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      SolrCore.log.warn(\"Invalid sort \\\"\"+sort+\"\\\" was specified, ignoring\", sortE);\n      return null;\n    }\n\n    return ss;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParams().get(CommonParams.SORT);\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    Sort ss = null;\n    try {\n      ss = QueryParsing.parseSort(sort, req);\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      SolrCore.log.warn(\"Invalid sort \\\"\"+sort+\"\\\" was specified, ignoring\", sortE);\n      return null;\n    }\n\n    return ss;\n  }\n\n","sourceOld":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParams().get(CommonParams.SORT);\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    Sort ss = null;\n    try {\n      ss = QueryParsing.parseSort(sort, req);\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      SolrCore.log.warn(\"Invalid sort \\\"\"+sort+\"\\\" was specified, ignoring\", sortE);\n      return null;\n    }\n\n    return ss;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParams().get(CommonParams.SORT);\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    Sort ss = null;\n    try {\n      ss = QueryParsing.parseSort(sort, req);\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      SolrCore.log.warn(\"Invalid sort \\\"\"+sort+\"\\\" was specified, ignoring\", sortE);\n      return null;\n    }\n\n    return ss;\n  }\n\n","sourceOld":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParams().get(CommonParams.SORT);\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    Sort ss = null;\n    try {\n      ss = QueryParsing.parseSort(sort, req);\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      SolrCore.log.warn(\"Invalid sort \\\"\"+sort+\"\\\" was specified, ignoring\", sortE);\n      return null;\n    }\n\n    return ss;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02453e8d9fe1bde22dc7676145ad809cb1dbfcad","date":1386084179,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParams().get(CommonParams.SORT);\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    Sort ss = null;\n    try {\n      ss = QueryParsing.parseSortSpec(sort, req).getSort();\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      SolrCore.log.warn(\"Invalid sort \\\"\"+sort+\"\\\" was specified, ignoring\", sortE);\n      return null;\n    }\n\n    return ss;\n  }\n\n","sourceOld":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParams().get(CommonParams.SORT);\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    Sort ss = null;\n    try {\n      ss = QueryParsing.parseSort(sort, req);\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      SolrCore.log.warn(\"Invalid sort \\\"\"+sort+\"\\\" was specified, ignoring\", sortE);\n      return null;\n    }\n\n    return ss;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParams().get(CommonParams.SORT);\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    Sort ss = null;\n    try {\n      ss = QueryParsing.parseSortSpec(sort, req).getSort();\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      SolrCore.log.warn(\"Invalid sort \\\"\"+sort+\"\\\" was specified, ignoring\", sortE);\n      return null;\n    }\n\n    return ss;\n  }\n\n","sourceOld":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParams().get(CommonParams.SORT);\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    Sort ss = null;\n    try {\n      ss = QueryParsing.parseSort(sort, req);\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      SolrCore.log.warn(\"Invalid sort \\\"\"+sort+\"\\\" was specified, ignoring\", sortE);\n      return null;\n    }\n\n    return ss;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c8dc56dbae186505066de8a78986cba31525ef0","date":1447876120,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParams().get(CommonParams.SORT);\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    Sort ss = null;\n    try {\n      ss = SortSpecParsing.parseSortSpec(sort, req).getSort();\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      SolrCore.log.warn(\"Invalid sort \\\"\"+sort+\"\\\" was specified, ignoring\", sortE);\n      return null;\n    }\n\n    return ss;\n  }\n\n","sourceOld":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParams().get(CommonParams.SORT);\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    Sort ss = null;\n    try {\n      ss = QueryParsing.parseSortSpec(sort, req).getSort();\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      SolrCore.log.warn(\"Invalid sort \\\"\"+sort+\"\\\" was specified, ignoring\", sortE);\n      return null;\n    }\n\n    return ss;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9367dbf5b00d7764583d991c1888f4acc9c9991a","date":1449048142,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParams().get(CommonParams.SORT);\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    Sort ss = null;\n    try {\n      ss = SortSpecParsing.parseSortSpec(sort, req).getSort();\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      log.warn(\"Invalid sort \\\"\"+sort+\"\\\" was specified, ignoring\", sortE);\n      return null;\n    }\n\n    return ss;\n  }\n\n","sourceOld":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParams().get(CommonParams.SORT);\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    Sort ss = null;\n    try {\n      ss = SortSpecParsing.parseSortSpec(sort, req).getSort();\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      SolrCore.log.warn(\"Invalid sort \\\"\"+sort+\"\\\" was specified, ignoring\", sortE);\n      return null;\n    }\n\n    return ss;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b3f58cbc7d70156d61fad1f2c0ef2dd2d97854","date":1588352817,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#getSort(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParams().get(CommonParams.SORT);\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    Sort ss = null;\n    try {\n      ss = SortSpecParsing.parseSortSpec(sort, req).getSort();\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      log.warn(\"Invalid sort '{}' was specified, ignoring\", sort, sortE);\n      return null;\n    }\n\n    return ss;\n  }\n\n","sourceOld":"  /**\n   * Determines the correct Sort based on the request parameter \"sort\"\n   *\n   * @return null if no sort is specified.\n   */\n  public static Sort getSort(SolrQueryRequest req) {\n\n    String sort = req.getParams().get(CommonParams.SORT);\n    if (null == sort || sort.equals(\"\")) {\n      return null;\n    }\n\n    SolrException sortE = null;\n    Sort ss = null;\n    try {\n      ss = SortSpecParsing.parseSortSpec(sort, req).getSort();\n    } catch (SolrException e) {\n      sortE = e;\n    }\n\n    if ((null == ss) || (null != sortE)) {\n      /* we definitely had some sort of sort string from the user,\n       * but no SortSpec came out of it\n       */\n      log.warn(\"Invalid sort \\\"\"+sort+\"\\\" was specified, ignoring\", sortE);\n      return null;\n    }\n\n    return ss;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6c8dc56dbae186505066de8a78986cba31525ef0":["02453e8d9fe1bde22dc7676145ad809cb1dbfcad"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"02453e8d9fe1bde22dc7676145ad809cb1dbfcad":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["c26f00b574427b55127e869b935845554afde1fa","02453e8d9fe1bde22dc7676145ad809cb1dbfcad"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["6c8dc56dbae186505066de8a78986cba31525ef0"],"55b3f58cbc7d70156d61fad1f2c0ef2dd2d97854":["9367dbf5b00d7764583d991c1888f4acc9c9991a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["55b3f58cbc7d70156d61fad1f2c0ef2dd2d97854"]},"commit2Childs":{"6c8dc56dbae186505066de8a78986cba31525ef0":["9367dbf5b00d7764583d991c1888f4acc9c9991a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"02453e8d9fe1bde22dc7676145ad809cb1dbfcad":["6c8dc56dbae186505066de8a78986cba31525ef0","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"c26f00b574427b55127e869b935845554afde1fa":["02453e8d9fe1bde22dc7676145ad809cb1dbfcad","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["55b3f58cbc7d70156d61fad1f2c0ef2dd2d97854"],"55b3f58cbc7d70156d61fad1f2c0ef2dd2d97854":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}