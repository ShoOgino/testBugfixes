{"path":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesConsumer#add(int,IndexableField).mjava","commits":[{"id":"de5bbadeb3abac0f650298bff584bd4317bd75aa","date":1331116004,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesConsumer#add(int,IndexableField).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void add(int docID, IndexableField value) throws IOException {\n    assert docID >= 0;\n    int ord = -1;\n    int vSize = -1;\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n      vSize = value.binaryValue().length;\n      ord = hash.add(value.binaryValue());\n      break;\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      vSize = -1;\n      try {\n      ord = hash.add(value.binaryValue());\n      } catch (NullPointerException e) {\n        System.err.println();\n      }\n      break;\n    case FIXED_INTS_16:\n      vSize = 2;\n      scratch.grow(2);\n      DocValuesArraySource.copyShort(scratch, value.numericValue().shortValue());\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_32:\n      vSize = 4;\n      scratch.grow(4);\n      DocValuesArraySource.copyInt(scratch, value.numericValue().intValue());\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_8:\n      vSize = 1;\n      scratch.grow(1); \n      scratch.bytes[scratch.offset] = value.numericValue().byteValue();\n      scratch.length = 1;\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_64:\n      vSize = 8;\n    case VAR_INTS:\n      scratch.grow(8);\n      DocValuesArraySource.copyLong(scratch, value.numericValue().longValue());\n      ord = hash.add(scratch);\n      break;\n    case FLOAT_32:\n      vSize = 4;\n      scratch.grow(4);\n      DocValuesArraySource.copyInt(scratch,\n          Float.floatToRawIntBits(value.numericValue().floatValue()));\n      ord = hash.add(scratch);\n      break;\n    case FLOAT_64:\n      vSize = 8;\n      scratch.grow(8);\n      DocValuesArraySource.copyLong(scratch,\n          Double.doubleToRawLongBits(value.numericValue().doubleValue()));\n      ord = hash.add(scratch);\n      break;\n\n    }\n    \n    if (fixedSize == Integer.MIN_VALUE) {\n      assert maxDocId == -1;\n      fixedSize = vSize;\n    } else {\n      if (fixedSize != vSize) {\n        throw new IllegalArgumentException(\"value size must be \" + fixedSize + \" but was: \" + vSize);\n      }\n    }\n    maxDocId = Math.max(docID, maxDocId);\n    ords = grow(ords, docID);\n    \n    ords[docID] = (ord < 0 ? (-ord)-1 : ord) + 1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesConsumer#add(int,IndexableField).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void add(int docID, IndexableField value) throws IOException {\n    assert docID >= 0;\n    int ord = -1;\n    int vSize = -1;\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n      vSize = value.binaryValue().length;\n      ord = hash.add(value.binaryValue());\n      break;\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      vSize = -1;\n      try {\n      ord = hash.add(value.binaryValue());\n      } catch (NullPointerException e) {\n        System.err.println();\n      }\n      break;\n    case FIXED_INTS_16:\n      vSize = 2;\n      scratch.grow(2);\n      DocValuesArraySource.copyShort(scratch, value.numericValue().shortValue());\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_32:\n      vSize = 4;\n      scratch.grow(4);\n      DocValuesArraySource.copyInt(scratch, value.numericValue().intValue());\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_8:\n      vSize = 1;\n      scratch.grow(1); \n      scratch.bytes[scratch.offset] = value.numericValue().byteValue();\n      scratch.length = 1;\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_64:\n      vSize = 8;\n    case VAR_INTS:\n      scratch.grow(8);\n      DocValuesArraySource.copyLong(scratch, value.numericValue().longValue());\n      ord = hash.add(scratch);\n      break;\n    case FLOAT_32:\n      vSize = 4;\n      scratch.grow(4);\n      DocValuesArraySource.copyInt(scratch,\n          Float.floatToRawIntBits(value.numericValue().floatValue()));\n      ord = hash.add(scratch);\n      break;\n    case FLOAT_64:\n      vSize = 8;\n      scratch.grow(8);\n      DocValuesArraySource.copyLong(scratch,\n          Double.doubleToRawLongBits(value.numericValue().doubleValue()));\n      ord = hash.add(scratch);\n      break;\n\n    }\n    \n    if (fixedSize == Integer.MIN_VALUE) {\n      assert maxDocId == -1;\n      fixedSize = vSize;\n    } else {\n      if (fixedSize != vSize) {\n        throw new IllegalArgumentException(\"value size must be \" + fixedSize + \" but was: \" + vSize);\n      }\n    }\n    maxDocId = Math.max(docID, maxDocId);\n    ords = grow(ords, docID);\n    \n    ords[docID] = (ord < 0 ? (-ord)-1 : ord) + 1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e80a4851212f9d622db935c1915734fedaa4f1dd","date":1331902480,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesConsumer#add(int,IndexableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesConsumer#add(int,IndexableField).mjava","sourceNew":"  @Override\n  public void add(int docID, IndexableField value) throws IOException {\n    assert docID >= 0;\n    int ord = -1;\n    int vSize = -1;\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n      vSize = value.binaryValue().length;\n      ord = hash.add(value.binaryValue());\n      break;\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      vSize = -1;\n      ord = hash.add(value.binaryValue());\n      break;\n    case FIXED_INTS_16:\n      vSize = 2;\n      scratch.grow(2);\n      DocValuesArraySource.copyShort(scratch, value.numericValue().shortValue());\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_32:\n      vSize = 4;\n      scratch.grow(4);\n      DocValuesArraySource.copyInt(scratch, value.numericValue().intValue());\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_8:\n      vSize = 1;\n      scratch.grow(1); \n      scratch.bytes[scratch.offset] = value.numericValue().byteValue();\n      scratch.length = 1;\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_64:\n      vSize = 8;\n    case VAR_INTS:\n      scratch.grow(8);\n      DocValuesArraySource.copyLong(scratch, value.numericValue().longValue());\n      ord = hash.add(scratch);\n      break;\n    case FLOAT_32:\n      vSize = 4;\n      scratch.grow(4);\n      DocValuesArraySource.copyInt(scratch,\n          Float.floatToRawIntBits(value.numericValue().floatValue()));\n      ord = hash.add(scratch);\n      break;\n    case FLOAT_64:\n      vSize = 8;\n      scratch.grow(8);\n      DocValuesArraySource.copyLong(scratch,\n          Double.doubleToRawLongBits(value.numericValue().doubleValue()));\n      ord = hash.add(scratch);\n      break;\n\n    }\n    \n    if (fixedSize == Integer.MIN_VALUE) {\n      assert maxDocId == -1;\n      fixedSize = vSize;\n    } else {\n      if (fixedSize != vSize) {\n        throw new IllegalArgumentException(\"value size must be \" + fixedSize + \" but was: \" + vSize);\n      }\n    }\n    maxDocId = Math.max(docID, maxDocId);\n    ords = grow(ords, docID);\n    \n    ords[docID] = (ord < 0 ? (-ord)-1 : ord) + 1;\n  }\n\n","sourceOld":"  @Override\n  public void add(int docID, IndexableField value) throws IOException {\n    assert docID >= 0;\n    int ord = -1;\n    int vSize = -1;\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n      vSize = value.binaryValue().length;\n      ord = hash.add(value.binaryValue());\n      break;\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      vSize = -1;\n      try {\n      ord = hash.add(value.binaryValue());\n      } catch (NullPointerException e) {\n        System.err.println();\n      }\n      break;\n    case FIXED_INTS_16:\n      vSize = 2;\n      scratch.grow(2);\n      DocValuesArraySource.copyShort(scratch, value.numericValue().shortValue());\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_32:\n      vSize = 4;\n      scratch.grow(4);\n      DocValuesArraySource.copyInt(scratch, value.numericValue().intValue());\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_8:\n      vSize = 1;\n      scratch.grow(1); \n      scratch.bytes[scratch.offset] = value.numericValue().byteValue();\n      scratch.length = 1;\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_64:\n      vSize = 8;\n    case VAR_INTS:\n      scratch.grow(8);\n      DocValuesArraySource.copyLong(scratch, value.numericValue().longValue());\n      ord = hash.add(scratch);\n      break;\n    case FLOAT_32:\n      vSize = 4;\n      scratch.grow(4);\n      DocValuesArraySource.copyInt(scratch,\n          Float.floatToRawIntBits(value.numericValue().floatValue()));\n      ord = hash.add(scratch);\n      break;\n    case FLOAT_64:\n      vSize = 8;\n      scratch.grow(8);\n      DocValuesArraySource.copyLong(scratch,\n          Double.doubleToRawLongBits(value.numericValue().doubleValue()));\n      ord = hash.add(scratch);\n      break;\n\n    }\n    \n    if (fixedSize == Integer.MIN_VALUE) {\n      assert maxDocId == -1;\n      fixedSize = vSize;\n    } else {\n      if (fixedSize != vSize) {\n        throw new IllegalArgumentException(\"value size must be \" + fixedSize + \" but was: \" + vSize);\n      }\n    }\n    maxDocId = Math.max(docID, maxDocId);\n    ords = grow(ords, docID);\n    \n    ords[docID] = (ord < 0 ? (-ord)-1 : ord) + 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e890e2f1e85b150a785eeee4287b283b5d06297","date":1332344725,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesConsumer#add(int,IndexableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesConsumer#add(int,IndexableField).mjava","sourceNew":"  @Override\n  public void add(int docID, IndexableField value) throws IOException {\n    assert docID >= 0;\n    final int ord, vSize;\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n      vSize = value.binaryValue().length;\n      ord = hash.add(value.binaryValue());\n      break;\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      vSize = -1;\n      ord = hash.add(value.binaryValue());\n      break;\n    case FIXED_INTS_16:\n      vSize = 2;\n      scratch.grow(2);\n      DocValuesArraySource.copyShort(scratch, value.numericValue().shortValue());\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_32:\n      vSize = 4;\n      scratch.grow(4);\n      DocValuesArraySource.copyInt(scratch, value.numericValue().intValue());\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_8:\n      vSize = 1;\n      scratch.grow(1); \n      scratch.bytes[scratch.offset] = value.numericValue().byteValue();\n      scratch.length = 1;\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_64:\n      vSize = 8;\n      scratch.grow(8);\n      DocValuesArraySource.copyLong(scratch, value.numericValue().longValue());\n      ord = hash.add(scratch);\n      break;\n    case VAR_INTS:\n      vSize = -1;\n      scratch.grow(8);\n      DocValuesArraySource.copyLong(scratch, value.numericValue().longValue());\n      ord = hash.add(scratch);\n      break;\n    case FLOAT_32:\n      vSize = 4;\n      scratch.grow(4);\n      DocValuesArraySource.copyInt(scratch,\n          Float.floatToRawIntBits(value.numericValue().floatValue()));\n      ord = hash.add(scratch);\n      break;\n    case FLOAT_64:\n      vSize = 8;\n      scratch.grow(8);\n      DocValuesArraySource.copyLong(scratch,\n          Double.doubleToRawLongBits(value.numericValue().doubleValue()));\n      ord = hash.add(scratch);\n      break;\n    default:\n      throw new RuntimeException(\"should not reach this line\");\n    }\n    \n    if (fixedSize == Integer.MIN_VALUE) {\n      assert maxDocId == -1;\n      fixedSize = vSize;\n    } else {\n      if (fixedSize != vSize) {\n        throw new IllegalArgumentException(\"value size must be \" + fixedSize + \" but was: \" + vSize);\n      }\n    }\n    maxDocId = Math.max(docID, maxDocId);\n    ords = grow(ords, docID);\n    \n    ords[docID] = (ord < 0 ? (-ord)-1 : ord) + 1;\n  }\n\n","sourceOld":"  @Override\n  public void add(int docID, IndexableField value) throws IOException {\n    assert docID >= 0;\n    int ord = -1;\n    int vSize = -1;\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n      vSize = value.binaryValue().length;\n      ord = hash.add(value.binaryValue());\n      break;\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      vSize = -1;\n      ord = hash.add(value.binaryValue());\n      break;\n    case FIXED_INTS_16:\n      vSize = 2;\n      scratch.grow(2);\n      DocValuesArraySource.copyShort(scratch, value.numericValue().shortValue());\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_32:\n      vSize = 4;\n      scratch.grow(4);\n      DocValuesArraySource.copyInt(scratch, value.numericValue().intValue());\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_8:\n      vSize = 1;\n      scratch.grow(1); \n      scratch.bytes[scratch.offset] = value.numericValue().byteValue();\n      scratch.length = 1;\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_64:\n      vSize = 8;\n    case VAR_INTS:\n      scratch.grow(8);\n      DocValuesArraySource.copyLong(scratch, value.numericValue().longValue());\n      ord = hash.add(scratch);\n      break;\n    case FLOAT_32:\n      vSize = 4;\n      scratch.grow(4);\n      DocValuesArraySource.copyInt(scratch,\n          Float.floatToRawIntBits(value.numericValue().floatValue()));\n      ord = hash.add(scratch);\n      break;\n    case FLOAT_64:\n      vSize = 8;\n      scratch.grow(8);\n      DocValuesArraySource.copyLong(scratch,\n          Double.doubleToRawLongBits(value.numericValue().doubleValue()));\n      ord = hash.add(scratch);\n      break;\n\n    }\n    \n    if (fixedSize == Integer.MIN_VALUE) {\n      assert maxDocId == -1;\n      fixedSize = vSize;\n    } else {\n      if (fixedSize != vSize) {\n        throw new IllegalArgumentException(\"value size must be \" + fixedSize + \" but was: \" + vSize);\n      }\n    }\n    maxDocId = Math.max(docID, maxDocId);\n    ords = grow(ords, docID);\n    \n    ords[docID] = (ord < 0 ? (-ord)-1 : ord) + 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18","date":1339188570,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesConsumer#add(int,IndexableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesConsumer#add(int,IndexableField).mjava","sourceNew":"  @Override\n  public void add(int docID, IndexableField value) throws IOException {\n    assert docID >= 0;\n    final int ord, vSize;\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n      vSize = value.binaryValue().length;\n      ord = hash.add(value.binaryValue());\n      break;\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      vSize = -1;\n      ord = hash.add(value.binaryValue());\n      break;\n    case FIXED_INTS_16:\n      vSize = 2;\n      scratch.grow(2);\n      DocValuesArraySource.copyShort(scratch, value.numericValue().shortValue());\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_32:\n      vSize = 4;\n      scratch.grow(4);\n      DocValuesArraySource.copyInt(scratch, value.numericValue().intValue());\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_8:\n      vSize = 1;\n      scratch.grow(1); \n      scratch.bytes[scratch.offset] = value.numericValue().byteValue();\n      scratch.length = 1;\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_64:\n      vSize = 8;\n      scratch.grow(8);\n      DocValuesArraySource.copyLong(scratch, value.numericValue().longValue());\n      ord = hash.add(scratch);\n      break;\n    case VAR_INTS:\n      vSize = -1;\n      scratch.grow(8);\n      DocValuesArraySource.copyLong(scratch, value.numericValue().longValue());\n      ord = hash.add(scratch);\n      break;\n    case FLOAT_32:\n      vSize = 4;\n      scratch.grow(4);\n      DocValuesArraySource.copyInt(scratch,\n          Float.floatToRawIntBits(value.numericValue().floatValue()));\n      ord = hash.add(scratch);\n      break;\n    case FLOAT_64:\n      vSize = 8;\n      scratch.grow(8);\n      DocValuesArraySource.copyLong(scratch,\n          Double.doubleToRawLongBits(value.numericValue().doubleValue()));\n      ord = hash.add(scratch);\n      break;\n    default:\n      throw new RuntimeException(\"should not reach this line\");\n    }\n    \n    if (valueSize == Integer.MIN_VALUE) {\n      assert maxDocId == -1;\n      valueSize = vSize;\n    } else {\n      if (valueSize != vSize) {\n        throw new IllegalArgumentException(\"value size must be \" + valueSize + \" but was: \" + vSize);\n      }\n    }\n    maxDocId = Math.max(docID, maxDocId);\n    ords = grow(ords, docID);\n    \n    ords[docID] = (ord < 0 ? (-ord)-1 : ord) + 1;\n  }\n\n","sourceOld":"  @Override\n  public void add(int docID, IndexableField value) throws IOException {\n    assert docID >= 0;\n    final int ord, vSize;\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n      vSize = value.binaryValue().length;\n      ord = hash.add(value.binaryValue());\n      break;\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      vSize = -1;\n      ord = hash.add(value.binaryValue());\n      break;\n    case FIXED_INTS_16:\n      vSize = 2;\n      scratch.grow(2);\n      DocValuesArraySource.copyShort(scratch, value.numericValue().shortValue());\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_32:\n      vSize = 4;\n      scratch.grow(4);\n      DocValuesArraySource.copyInt(scratch, value.numericValue().intValue());\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_8:\n      vSize = 1;\n      scratch.grow(1); \n      scratch.bytes[scratch.offset] = value.numericValue().byteValue();\n      scratch.length = 1;\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_64:\n      vSize = 8;\n      scratch.grow(8);\n      DocValuesArraySource.copyLong(scratch, value.numericValue().longValue());\n      ord = hash.add(scratch);\n      break;\n    case VAR_INTS:\n      vSize = -1;\n      scratch.grow(8);\n      DocValuesArraySource.copyLong(scratch, value.numericValue().longValue());\n      ord = hash.add(scratch);\n      break;\n    case FLOAT_32:\n      vSize = 4;\n      scratch.grow(4);\n      DocValuesArraySource.copyInt(scratch,\n          Float.floatToRawIntBits(value.numericValue().floatValue()));\n      ord = hash.add(scratch);\n      break;\n    case FLOAT_64:\n      vSize = 8;\n      scratch.grow(8);\n      DocValuesArraySource.copyLong(scratch,\n          Double.doubleToRawLongBits(value.numericValue().doubleValue()));\n      ord = hash.add(scratch);\n      break;\n    default:\n      throw new RuntimeException(\"should not reach this line\");\n    }\n    \n    if (fixedSize == Integer.MIN_VALUE) {\n      assert maxDocId == -1;\n      fixedSize = vSize;\n    } else {\n      if (fixedSize != vSize) {\n        throw new IllegalArgumentException(\"value size must be \" + fixedSize + \" but was: \" + vSize);\n      }\n    }\n    maxDocId = Math.max(docID, maxDocId);\n    ords = grow(ords, docID);\n    \n    ords[docID] = (ord < 0 ? (-ord)-1 : ord) + 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a","date":1341524239,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesConsumer#add(int,StorableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesConsumer#add(int,IndexableField).mjava","sourceNew":"  @Override\n  public void add(int docID, StorableField value) throws IOException {\n    assert docID >= 0;\n    final int ord, vSize;\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n      vSize = value.binaryValue().length;\n      ord = hash.add(value.binaryValue());\n      break;\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      vSize = -1;\n      ord = hash.add(value.binaryValue());\n      break;\n    case FIXED_INTS_16:\n      vSize = 2;\n      scratch.grow(2);\n      DocValuesArraySource.copyShort(scratch, value.numericValue().shortValue());\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_32:\n      vSize = 4;\n      scratch.grow(4);\n      DocValuesArraySource.copyInt(scratch, value.numericValue().intValue());\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_8:\n      vSize = 1;\n      scratch.grow(1); \n      scratch.bytes[scratch.offset] = value.numericValue().byteValue();\n      scratch.length = 1;\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_64:\n      vSize = 8;\n      scratch.grow(8);\n      DocValuesArraySource.copyLong(scratch, value.numericValue().longValue());\n      ord = hash.add(scratch);\n      break;\n    case VAR_INTS:\n      vSize = -1;\n      scratch.grow(8);\n      DocValuesArraySource.copyLong(scratch, value.numericValue().longValue());\n      ord = hash.add(scratch);\n      break;\n    case FLOAT_32:\n      vSize = 4;\n      scratch.grow(4);\n      DocValuesArraySource.copyInt(scratch,\n          Float.floatToRawIntBits(value.numericValue().floatValue()));\n      ord = hash.add(scratch);\n      break;\n    case FLOAT_64:\n      vSize = 8;\n      scratch.grow(8);\n      DocValuesArraySource.copyLong(scratch,\n          Double.doubleToRawLongBits(value.numericValue().doubleValue()));\n      ord = hash.add(scratch);\n      break;\n    default:\n      throw new RuntimeException(\"should not reach this line\");\n    }\n    \n    if (valueSize == Integer.MIN_VALUE) {\n      assert maxDocId == -1;\n      valueSize = vSize;\n    } else {\n      if (valueSize != vSize) {\n        throw new IllegalArgumentException(\"value size must be \" + valueSize + \" but was: \" + vSize);\n      }\n    }\n    maxDocId = Math.max(docID, maxDocId);\n    ords = grow(ords, docID);\n    \n    ords[docID] = (ord < 0 ? (-ord)-1 : ord) + 1;\n  }\n\n","sourceOld":"  @Override\n  public void add(int docID, IndexableField value) throws IOException {\n    assert docID >= 0;\n    final int ord, vSize;\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n      vSize = value.binaryValue().length;\n      ord = hash.add(value.binaryValue());\n      break;\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      vSize = -1;\n      ord = hash.add(value.binaryValue());\n      break;\n    case FIXED_INTS_16:\n      vSize = 2;\n      scratch.grow(2);\n      DocValuesArraySource.copyShort(scratch, value.numericValue().shortValue());\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_32:\n      vSize = 4;\n      scratch.grow(4);\n      DocValuesArraySource.copyInt(scratch, value.numericValue().intValue());\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_8:\n      vSize = 1;\n      scratch.grow(1); \n      scratch.bytes[scratch.offset] = value.numericValue().byteValue();\n      scratch.length = 1;\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_64:\n      vSize = 8;\n      scratch.grow(8);\n      DocValuesArraySource.copyLong(scratch, value.numericValue().longValue());\n      ord = hash.add(scratch);\n      break;\n    case VAR_INTS:\n      vSize = -1;\n      scratch.grow(8);\n      DocValuesArraySource.copyLong(scratch, value.numericValue().longValue());\n      ord = hash.add(scratch);\n      break;\n    case FLOAT_32:\n      vSize = 4;\n      scratch.grow(4);\n      DocValuesArraySource.copyInt(scratch,\n          Float.floatToRawIntBits(value.numericValue().floatValue()));\n      ord = hash.add(scratch);\n      break;\n    case FLOAT_64:\n      vSize = 8;\n      scratch.grow(8);\n      DocValuesArraySource.copyLong(scratch,\n          Double.doubleToRawLongBits(value.numericValue().doubleValue()));\n      ord = hash.add(scratch);\n      break;\n    default:\n      throw new RuntimeException(\"should not reach this line\");\n    }\n    \n    if (valueSize == Integer.MIN_VALUE) {\n      assert maxDocId == -1;\n      valueSize = vSize;\n    } else {\n      if (valueSize != vSize) {\n        throw new IllegalArgumentException(\"value size must be \" + valueSize + \" but was: \" + vSize);\n      }\n    }\n    maxDocId = Math.max(docID, maxDocId);\n    ords = grow(ords, docID);\n    \n    ords[docID] = (ord < 0 ? (-ord)-1 : ord) + 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesConsumer#add(int,StorableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesConsumer#add(int,IndexableField).mjava","sourceNew":"  @Override\n  public void add(int docID, StorableField value) throws IOException {\n    assert docID >= 0;\n    final int ord, vSize;\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n      vSize = value.binaryValue().length;\n      ord = hash.add(value.binaryValue());\n      break;\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      vSize = -1;\n      ord = hash.add(value.binaryValue());\n      break;\n    case FIXED_INTS_16:\n      vSize = 2;\n      scratch.grow(2);\n      DocValuesArraySource.copyShort(scratch, value.numericValue().shortValue());\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_32:\n      vSize = 4;\n      scratch.grow(4);\n      DocValuesArraySource.copyInt(scratch, value.numericValue().intValue());\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_8:\n      vSize = 1;\n      scratch.grow(1); \n      scratch.bytes[scratch.offset] = value.numericValue().byteValue();\n      scratch.length = 1;\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_64:\n      vSize = 8;\n      scratch.grow(8);\n      DocValuesArraySource.copyLong(scratch, value.numericValue().longValue());\n      ord = hash.add(scratch);\n      break;\n    case VAR_INTS:\n      vSize = -1;\n      scratch.grow(8);\n      DocValuesArraySource.copyLong(scratch, value.numericValue().longValue());\n      ord = hash.add(scratch);\n      break;\n    case FLOAT_32:\n      vSize = 4;\n      scratch.grow(4);\n      DocValuesArraySource.copyInt(scratch,\n          Float.floatToRawIntBits(value.numericValue().floatValue()));\n      ord = hash.add(scratch);\n      break;\n    case FLOAT_64:\n      vSize = 8;\n      scratch.grow(8);\n      DocValuesArraySource.copyLong(scratch,\n          Double.doubleToRawLongBits(value.numericValue().doubleValue()));\n      ord = hash.add(scratch);\n      break;\n    default:\n      throw new RuntimeException(\"should not reach this line\");\n    }\n    \n    if (valueSize == Integer.MIN_VALUE) {\n      assert maxDocId == -1;\n      valueSize = vSize;\n    } else {\n      if (valueSize != vSize) {\n        throw new IllegalArgumentException(\"value size must be \" + valueSize + \" but was: \" + vSize);\n      }\n    }\n    maxDocId = Math.max(docID, maxDocId);\n    ords = grow(ords, docID);\n    \n    ords[docID] = (ord < 0 ? (-ord)-1 : ord) + 1;\n  }\n\n","sourceOld":"  @Override\n  public void add(int docID, IndexableField value) throws IOException {\n    assert docID >= 0;\n    final int ord, vSize;\n    switch (type) {\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n      vSize = value.binaryValue().length;\n      ord = hash.add(value.binaryValue());\n      break;\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      vSize = -1;\n      ord = hash.add(value.binaryValue());\n      break;\n    case FIXED_INTS_16:\n      vSize = 2;\n      scratch.grow(2);\n      DocValuesArraySource.copyShort(scratch, value.numericValue().shortValue());\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_32:\n      vSize = 4;\n      scratch.grow(4);\n      DocValuesArraySource.copyInt(scratch, value.numericValue().intValue());\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_8:\n      vSize = 1;\n      scratch.grow(1); \n      scratch.bytes[scratch.offset] = value.numericValue().byteValue();\n      scratch.length = 1;\n      ord = hash.add(scratch);\n      break;\n    case FIXED_INTS_64:\n      vSize = 8;\n      scratch.grow(8);\n      DocValuesArraySource.copyLong(scratch, value.numericValue().longValue());\n      ord = hash.add(scratch);\n      break;\n    case VAR_INTS:\n      vSize = -1;\n      scratch.grow(8);\n      DocValuesArraySource.copyLong(scratch, value.numericValue().longValue());\n      ord = hash.add(scratch);\n      break;\n    case FLOAT_32:\n      vSize = 4;\n      scratch.grow(4);\n      DocValuesArraySource.copyInt(scratch,\n          Float.floatToRawIntBits(value.numericValue().floatValue()));\n      ord = hash.add(scratch);\n      break;\n    case FLOAT_64:\n      vSize = 8;\n      scratch.grow(8);\n      DocValuesArraySource.copyLong(scratch,\n          Double.doubleToRawLongBits(value.numericValue().doubleValue()));\n      ord = hash.add(scratch);\n      break;\n    default:\n      throw new RuntimeException(\"should not reach this line\");\n    }\n    \n    if (valueSize == Integer.MIN_VALUE) {\n      assert maxDocId == -1;\n      valueSize = vSize;\n    } else {\n      if (valueSize != vSize) {\n        throw new IllegalArgumentException(\"value size must be \" + valueSize + \" but was: \" + vSize);\n      }\n    }\n    maxDocId = Math.max(docID, maxDocId);\n    ords = grow(ords, docID);\n    \n    ords[docID] = (ord < 0 ? (-ord)-1 : ord) + 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","de5bbadeb3abac0f650298bff584bd4317bd75aa"],"cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18":["7e890e2f1e85b150a785eeee4287b283b5d06297"],"7e890e2f1e85b150a785eeee4287b283b5d06297":["e80a4851212f9d622db935c1915734fedaa4f1dd"],"1d028314cced5858683a1bb4741423d0f934257b":["cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18","33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a"],"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a":["cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18"],"e80a4851212f9d622db935c1915734fedaa4f1dd":["de5bbadeb3abac0f650298bff584bd4317bd75aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"de5bbadeb3abac0f650298bff584bd4317bd75aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d028314cced5858683a1bb4741423d0f934257b"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18":["1d028314cced5858683a1bb4741423d0f934257b","33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a"],"7e890e2f1e85b150a785eeee4287b283b5d06297":["cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18"],"1d028314cced5858683a1bb4741423d0f934257b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a":["1d028314cced5858683a1bb4741423d0f934257b"],"e80a4851212f9d622db935c1915734fedaa4f1dd":["7e890e2f1e85b150a785eeee4287b283b5d06297"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","de5bbadeb3abac0f650298bff584bd4317bd75aa"],"de5bbadeb3abac0f650298bff584bd4317bd75aa":["38e3b736c7ca086d61b7dbb841c905ee115490da","e80a4851212f9d622db935c1915734fedaa4f1dd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}