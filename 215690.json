{"path":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler2[TestSQLHandler]#testAggregatesWithoutGrouping().mjava","commits":[{"id":"22191e72f6c40dec88c9b94f9bb55c7527772a47","date":1553715407,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler2[TestSQLHandler]#testAggregatesWithoutGrouping().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testAggregatesWithoutGrouping().mjava","sourceNew":"  @Test\n  public void testAggregatesWithoutGrouping() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\",\n        \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n            \"min(a_f), max(a_f), avg(a_f) from collection1\");\n\n\n    List<Tuple> tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    // Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double count = tuple.getDouble(\"EXPR$0\"); // count(*)\n    Double sumi = tuple.getDouble(\"EXPR$1\"); // sum(a_i)\n    Double mini = tuple.getDouble(\"EXPR$2\"); // min(a_i)\n    Double maxi = tuple.getDouble(\"EXPR$3\"); // max(a_i)\n    Double avgi = tuple.getDouble(\"EXPR$4\"); // avg(a_i)\n    Double sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    Double minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    Double maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    Double avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(sumi == 70);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*) as myCount, sum(a_i) as mySum, min(a_i) as myMin, max(a_i) as myMax, \" +\n            \"cast(avg(1.0 * a_i) as float) as myAvg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    // Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"myCount\");\n    sumi = tuple.getDouble(\"mySum\");\n    mini = tuple.getDouble(\"myMin\");\n    maxi = tuple.getDouble(\"myMax\");\n    avgi = tuple.getDouble(\"myAvg\");\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(sumi == 70);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    // Test without cast on average int field\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*) as myCount, sum(a_i) as mySum, min(a_i) as myMin, max(a_i) as myMax, \" +\n            \"avg(a_i) as myAvg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    // Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"myCount\");\n    sumi = tuple.getDouble(\"mySum\");\n    mini = tuple.getDouble(\"myMin\");\n    maxi = tuple.getDouble(\"myMax\");\n    avgi = tuple.getDouble(\"myAvg\");\n    assertTrue(tuple.get(\"myAvg\") instanceof Long);\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(sumi == 70);\n    assertTrue(avgi == 7);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    // Test where clause hits\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n            \"min(a_f), max(a_f), avg(a_f) from collection1 where id = 2\");\n\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); // count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); // sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); // min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); // max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); // avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 1);\n    assertTrue(sumi == 2);\n    assertTrue(mini == 2);\n    assertTrue(maxi == 2);\n    assertTrue(avgi == 2.0D);\n    assertTrue(sumf == 2.0D);\n    assertTrue(minf == 2);\n    assertTrue(maxf == 2);\n    assertTrue(avgf == 2.0);\n\n    // Test zero hits\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n            \"min(a_f), max(a_f), avg(a_f) from collection1 where a_s = 'blah'\");\n\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); // count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); // sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); // min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); // max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); // avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 0);\n    assertTrue(sumi == null);\n    assertTrue(mini == null);\n    assertTrue(maxi == null);\n    assertTrue(avgi == null);\n    assertTrue(sumf == null);\n    assertTrue(minf == null);\n    assertTrue(maxf == null);\n    assertTrue(avgf == null);\n\n  }\n\n","sourceOld":"  private void testAggregatesWithoutGrouping() throws Exception {\n    del(\"*:*\");\n\n    commit();\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\",\n        \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n            \"min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    \n    List<Tuple> tuples = getTuples(sParams);\n\n    assert (tuples.size() == 1);\n\n    // Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double count = tuple.getDouble(\"EXPR$0\"); // count(*)\n    Double sumi = tuple.getDouble(\"EXPR$1\"); // sum(a_i)\n    Double mini = tuple.getDouble(\"EXPR$2\"); // min(a_i)\n    Double maxi = tuple.getDouble(\"EXPR$3\"); // max(a_i)\n    Double avgi = tuple.getDouble(\"EXPR$4\"); // avg(a_i)\n    Double sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    Double minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    Double maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    Double avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(sumi == 70);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*) as myCount, sum(a_i) as mySum, min(a_i) as myMin, max(a_i) as myMax, \" +\n            \"cast(avg(1.0 * a_i) as float) as myAvg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    \n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 1);\n\n    // Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"myCount\");\n    sumi = tuple.getDouble(\"mySum\");\n    mini = tuple.getDouble(\"myMin\");\n    maxi = tuple.getDouble(\"myMax\");\n    avgi = tuple.getDouble(\"myAvg\");\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(sumi == 70);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    // Test without cast on average int field\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*) as myCount, sum(a_i) as mySum, min(a_i) as myMin, max(a_i) as myMax, \" +\n            \"avg(a_i) as myAvg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n    \n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 1);\n\n    // Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"myCount\");\n    sumi = tuple.getDouble(\"mySum\");\n    mini = tuple.getDouble(\"myMin\");\n    maxi = tuple.getDouble(\"myMax\");\n    avgi = tuple.getDouble(\"myAvg\");\n    assertTrue(tuple.get(\"myAvg\") instanceof Long);\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(sumi == 70);\n    assertTrue(avgi == 7);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    // Test where clause hits\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n            \"min(a_f), max(a_f), avg(a_f) from collection1 where id = 2\");\n\n    \n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); // count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); // sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); // min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); // max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); // avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 1);\n    assertTrue(sumi == 2);\n    assertTrue(mini == 2);\n    assertTrue(maxi == 2);\n    assertTrue(avgi == 2.0D);\n    assertTrue(sumf == 2.0D);\n    assertTrue(minf == 2);\n    assertTrue(maxf == 2);\n    assertTrue(avgf == 2.0);\n\n    // Test zero hits\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n            \"min(a_f), max(a_f), avg(a_f) from collection1 where a_s = 'blah'\");\n\n    \n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); // count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); // sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); // min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); // max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); // avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 0);\n    assertTrue(sumi == null);\n    assertTrue(mini == null);\n    assertTrue(maxi == null);\n    assertTrue(avgi == null);\n    assertTrue(sumf == null);\n    assertTrue(minf == null);\n    assertTrue(maxf == null);\n    assertTrue(avgf == null);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94e31112925a65b1d36f9064772080e25b5ef373","date":1553715407,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testAggregatesWithoutGrouping().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler2[TestSQLHandler]#testAggregatesWithoutGrouping().mjava","sourceNew":"  @Test\n  public void testAggregatesWithoutGrouping() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\",\n        \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n            \"min(a_f), max(a_f), avg(a_f) from collection1\");\n\n\n    List<Tuple> tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    // Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double count = tuple.getDouble(\"EXPR$0\"); // count(*)\n    Double sumi = tuple.getDouble(\"EXPR$1\"); // sum(a_i)\n    Double mini = tuple.getDouble(\"EXPR$2\"); // min(a_i)\n    Double maxi = tuple.getDouble(\"EXPR$3\"); // max(a_i)\n    Double avgi = tuple.getDouble(\"EXPR$4\"); // avg(a_i)\n    Double sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    Double minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    Double maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    Double avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(sumi == 70);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*) as myCount, sum(a_i) as mySum, min(a_i) as myMin, max(a_i) as myMax, \" +\n            \"cast(avg(1.0 * a_i) as float) as myAvg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    // Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"myCount\");\n    sumi = tuple.getDouble(\"mySum\");\n    mini = tuple.getDouble(\"myMin\");\n    maxi = tuple.getDouble(\"myMax\");\n    avgi = tuple.getDouble(\"myAvg\");\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(sumi == 70);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    // Test without cast on average int field\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*) as myCount, sum(a_i) as mySum, min(a_i) as myMin, max(a_i) as myMax, \" +\n            \"avg(a_i) as myAvg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    // Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"myCount\");\n    sumi = tuple.getDouble(\"mySum\");\n    mini = tuple.getDouble(\"myMin\");\n    maxi = tuple.getDouble(\"myMax\");\n    avgi = tuple.getDouble(\"myAvg\");\n    assertTrue(tuple.get(\"myAvg\") instanceof Long);\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(sumi == 70);\n    assertTrue(avgi == 7);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    // Test where clause hits\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n            \"min(a_f), max(a_f), avg(a_f) from collection1 where id = 2\");\n\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); // count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); // sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); // min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); // max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); // avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 1);\n    assertTrue(sumi == 2);\n    assertTrue(mini == 2);\n    assertTrue(maxi == 2);\n    assertTrue(avgi == 2.0D);\n    assertTrue(sumf == 2.0D);\n    assertTrue(minf == 2);\n    assertTrue(maxf == 2);\n    assertTrue(avgf == 2.0);\n\n    // Test zero hits\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n            \"min(a_f), max(a_f), avg(a_f) from collection1 where a_s = 'blah'\");\n\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); // count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); // sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); // min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); // max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); // avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 0);\n    assertTrue(sumi == null);\n    assertTrue(mini == null);\n    assertTrue(maxi == null);\n    assertTrue(avgi == null);\n    assertTrue(sumf == null);\n    assertTrue(minf == null);\n    assertTrue(maxf == null);\n    assertTrue(avgf == null);\n\n  }\n\n","sourceOld":"  @Test\n  public void testAggregatesWithoutGrouping() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"stmt\",\n        \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n            \"min(a_f), max(a_f), avg(a_f) from collection1\");\n\n\n    List<Tuple> tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    // Test Long and Double Sums\n\n    Tuple tuple = tuples.get(0);\n\n    Double count = tuple.getDouble(\"EXPR$0\"); // count(*)\n    Double sumi = tuple.getDouble(\"EXPR$1\"); // sum(a_i)\n    Double mini = tuple.getDouble(\"EXPR$2\"); // min(a_i)\n    Double maxi = tuple.getDouble(\"EXPR$3\"); // max(a_i)\n    Double avgi = tuple.getDouble(\"EXPR$4\"); // avg(a_i)\n    Double sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    Double minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    Double maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    Double avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(sumi == 70);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*) as myCount, sum(a_i) as mySum, min(a_i) as myMin, max(a_i) as myMax, \" +\n            \"cast(avg(1.0 * a_i) as float) as myAvg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    // Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"myCount\");\n    sumi = tuple.getDouble(\"mySum\");\n    mini = tuple.getDouble(\"myMin\");\n    maxi = tuple.getDouble(\"myMax\");\n    avgi = tuple.getDouble(\"myAvg\");\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(sumi == 70);\n    assertTrue(avgi == 7.0D);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    // Test without cast on average int field\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*) as myCount, sum(a_i) as mySum, min(a_i) as myMin, max(a_i) as myMax, \" +\n            \"avg(a_i) as myAvg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1\");\n\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    // Test Long and Double Sums\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"myCount\");\n    sumi = tuple.getDouble(\"mySum\");\n    mini = tuple.getDouble(\"myMin\");\n    maxi = tuple.getDouble(\"myMax\");\n    avgi = tuple.getDouble(\"myAvg\");\n    assertTrue(tuple.get(\"myAvg\") instanceof Long);\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 10);\n    assertTrue(mini == 0.0D);\n    assertTrue(maxi == 14.0D);\n    assertTrue(sumi == 70);\n    assertTrue(avgi == 7);\n    assertTrue(sumf == 55.0D);\n    assertTrue(minf == 1.0D);\n    assertTrue(maxf == 10.0D);\n    assertTrue(avgf == 5.5D);\n\n    // Test where clause hits\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n            \"min(a_f), max(a_f), avg(a_f) from collection1 where id = 2\");\n\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); // count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); // sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); // min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); // max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); // avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 1);\n    assertTrue(sumi == 2);\n    assertTrue(mini == 2);\n    assertTrue(maxi == 2);\n    assertTrue(avgi == 2.0D);\n    assertTrue(sumf == 2.0D);\n    assertTrue(minf == 2);\n    assertTrue(maxf == 2);\n    assertTrue(avgf == 2.0);\n\n    // Test zero hits\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), \" +\n            \"min(a_f), max(a_f), avg(a_f) from collection1 where a_s = 'blah'\");\n\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 1);\n\n    tuple = tuples.get(0);\n\n    count = tuple.getDouble(\"EXPR$0\"); // count(*)\n    sumi = tuple.getDouble(\"EXPR$1\"); // sum(a_i)\n    mini = tuple.getDouble(\"EXPR$2\"); // min(a_i)\n    maxi = tuple.getDouble(\"EXPR$3\"); // max(a_i)\n    avgi = tuple.getDouble(\"EXPR$4\"); // avg(a_i)\n    sumf = tuple.getDouble(\"EXPR$5\"); // sum(a_f)\n    minf = tuple.getDouble(\"EXPR$6\"); // min(a_f)\n    maxf = tuple.getDouble(\"EXPR$7\"); // max(a_f)\n    avgf = tuple.getDouble(\"EXPR$8\"); // avg(a_f)\n\n    assertTrue(count == 0);\n    assertTrue(sumi == null);\n    assertTrue(mini == null);\n    assertTrue(maxi == null);\n    assertTrue(avgi == null);\n    assertTrue(sumf == null);\n    assertTrue(minf == null);\n    assertTrue(maxf == null);\n    assertTrue(avgf == null);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"22191e72f6c40dec88c9b94f9bb55c7527772a47":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["94e31112925a65b1d36f9064772080e25b5ef373"],"94e31112925a65b1d36f9064772080e25b5ef373":["22191e72f6c40dec88c9b94f9bb55c7527772a47"]},"commit2Childs":{"22191e72f6c40dec88c9b94f9bb55c7527772a47":["94e31112925a65b1d36f9064772080e25b5ef373"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["22191e72f6c40dec88c9b94f9bb55c7527772a47"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"94e31112925a65b1d36f9064772080e25b5ef373":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}