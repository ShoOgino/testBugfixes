{"path":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackend#write(long,byte[]).mjava","commits":[{"id":"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","date":1527582939,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackend#write(long,byte[]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void write(long offset, byte[] bytes) throws IOException {\n    if (readOnly || closed) {\n      return;\n    }\n    lock.lock();\n    try {\n      super.write(offset, bytes);\n      dirty = true;\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8f0f2472d437d44ec2144932e1d13fb494e82a3","date":1528403207,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackend#write(long,byte[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackend#write(long,byte[]).mjava","sourceNew":"  @Override\n  protected void write(long offset, byte[] bytes) throws IOException {\n    if (readOnly || closed) {\n      return;\n    }\n    lock.lock();\n    try {\n      super.write(offset, bytes);\n      lastModifiedTime = TimeUnit.MILLISECONDS.convert(factory.getTimeSource().getEpochTimeNs(), TimeUnit.NANOSECONDS);\n      dirty = true;\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void write(long offset, byte[] bytes) throws IOException {\n    if (readOnly || closed) {\n      return;\n    }\n    lock.lock();\n    try {\n      super.write(offset, bytes);\n      dirty = true;\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackend#write(long,byte[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackend#write(long,byte[]).mjava","sourceNew":"  @Override\n  protected void write(long offset, byte[] bytes) throws IOException {\n    if (readOnly || closed) {\n      return;\n    }\n    lock.lock();\n    try {\n      super.write(offset, bytes);\n      lastModifiedTime = TimeUnit.MILLISECONDS.convert(factory.getTimeSource().getEpochTimeNs(), TimeUnit.NANOSECONDS);\n      dirty = true;\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void write(long offset, byte[] bytes) throws IOException {\n    if (readOnly || closed) {\n      return;\n    }\n    lock.lock();\n    try {\n      super.write(offset, bytes);\n      dirty = true;\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackend#write(long,byte[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackend#write(long,byte[]).mjava","sourceNew":"  @Override\n  protected void write(long offset, byte[] bytes) throws IOException {\n    if (readOnly || closed) {\n      return;\n    }\n    lock.lock();\n    try {\n      super.write(offset, bytes);\n      lastModifiedTime = TimeUnit.MILLISECONDS.convert(factory.getTimeSource().getEpochTimeNs(), TimeUnit.NANOSECONDS);\n      dirty = true;\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void write(long offset, byte[] bytes) throws IOException {\n    if (readOnly || closed) {\n      return;\n    }\n    lock.lock();\n    try {\n      super.write(offset, bytes);\n      dirty = true;\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58d29562959e4f9c21557f699a0d964bb0c98f8e","date":1556102028,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackend#write(long,byte[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/rrd/SolrRrdBackend#write(long,byte[]).mjava","sourceNew":"  @Override\n  protected void write(long offset, byte[] bytes) throws IOException {\n    if (readOnly || closed) {\n      return;\n    }\n    lock.lock();\n    try {\n      super.write(offset, bytes);\n      markDirty();\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void write(long offset, byte[] bytes) throws IOException {\n    if (readOnly || closed) {\n      return;\n    }\n    lock.lock();\n    try {\n      super.write(offset, bytes);\n      lastModifiedTime = TimeUnit.MILLISECONDS.convert(factory.getTimeSource().getEpochTimeNs(), TimeUnit.NANOSECONDS);\n      dirty = true;\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f8f0f2472d437d44ec2144932e1d13fb494e82a3":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","f8f0f2472d437d44ec2144932e1d13fb494e82a3"],"58d29562959e4f9c21557f699a0d964bb0c98f8e":["f8f0f2472d437d44ec2144932e1d13fb494e82a3"],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["58d29562959e4f9c21557f699a0d964bb0c98f8e"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","f8f0f2472d437d44ec2144932e1d13fb494e82a3"]},"commit2Childs":{"f8f0f2472d437d44ec2144932e1d13fb494e82a3":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","58d29562959e4f9c21557f699a0d964bb0c98f8e","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["f8f0f2472d437d44ec2144932e1d13fb494e82a3","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"58d29562959e4f9c21557f699a0d964bb0c98f8e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}