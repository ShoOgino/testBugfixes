{"path":"solr/core/src/test/org/apache/solr/handler/component/PhrasesIdentificationComponentTest#testWhiteBoxPhraseParsingLongInput().mjava","commits":[{"id":"0d1411e62d30c460b09c6f3643df82daa10a27cc","date":1536256256,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/PhrasesIdentificationComponentTest#testWhiteBoxPhraseParsingLongInput().mjava","pathOld":"/dev/null","sourceNew":"  public void testWhiteBoxPhraseParsingLongInput() throws Exception {\n    final SchemaField field = h.getCore().getLatestSchema().getField(\"multigrams_body\");\n    assertNotNull(field);\n    final List<Phrase> phrases = Phrase.extractPhrases\n      (\" did  a Quick    brown FOX perniciously jump over the lAZy dog\", field, 3, 7);\n\n    assertEquals(IntStream.rangeClosed((11-7+1), 11).sum(), // 11 words, max query phrase size is 7\n                 phrases.size());\n    \n    // spot check a few explicitly choosen phrases of various lengths...\n    \n    { // single term, close to edge so not as many super phrases as other terms might have\n      final Phrase lazy = phrases.get(phrases.size() - 1 - 2);\n      final String debug = lazy.toString();\n\n      assertEquals(debug, \"lAZy\", lazy.getSubSequence());\n      assertEquals(debug, 10, lazy.getPositionStart());\n      assertEquals(debug, 11, lazy.getPositionEnd());\n      assertEquals(debug, 1, lazy.getPositionLength());\n      \n      assertEquals(debug, 54, lazy.getOffsetStart());\n      assertEquals(debug, 58, lazy.getOffsetEnd());\n\n      assertEquals(debug, 1, lazy.getIndividualIndexedTerms().size());\n      assertEquals(debug, 1, lazy.getLargestIndexedSubPhrases().size());\n      assertEquals(debug, lazy, lazy.getIndividualIndexedTerms().get(0));\n      assertEquals(debug, lazy, lazy.getLargestIndexedSubPhrases().get(0));\n      assertEquals(debug, 4, lazy.getIndexedSuperPhrases().size()); // (2 each: len=2, len=3)\n    }\n    { // length 2, middle of the pack\n      final Phrase brown_fox = phrases.get((7 * 3) + 1);\n      final String debug = brown_fox.toString();\n\n      assertEquals(debug, \"brown FOX\", brown_fox.getSubSequence());\n      assertEquals(debug, 4, brown_fox.getPositionStart());\n      assertEquals(debug, 6, brown_fox.getPositionEnd());\n      assertEquals(debug, 2, brown_fox.getPositionLength());\n      \n      assertEquals(debug, 17, brown_fox.getOffsetStart());\n      assertEquals(debug, 26, brown_fox.getOffsetEnd());\n\n      assertEquals(debug, 2, brown_fox.getIndividualIndexedTerms().size());\n      assertEquals(debug, 1, brown_fox.getLargestIndexedSubPhrases().size());\n      assertEquals(debug, brown_fox, brown_fox.getLargestIndexedSubPhrases().get(0));\n      assertEquals(debug, 2, brown_fox.getIndexedSuperPhrases().size()); // (2 @ len=3)\n      \n    }\n    { // length 3 (which is the max indexed size) @ start of the string\n      final Phrase daq = phrases.get(2);\n      final String debug = daq.toString();\n\n      assertEquals(debug, \"did  a Quick\", daq.getSubSequence());\n      assertEquals(debug, 1, daq.getPositionStart());\n      assertEquals(debug, 4, daq.getPositionEnd());\n      assertEquals(debug, 3, daq.getPositionLength());\n      \n      assertEquals(debug, 1, daq.getOffsetStart());\n      assertEquals(debug, 13, daq.getOffsetEnd());\n\n      assertEquals(debug, 3, daq.getIndividualIndexedTerms().size());\n      assertEquals(debug, 1, daq.getLargestIndexedSubPhrases().size());\n      assertEquals(debug, daq, daq.getLargestIndexedSubPhrases().get(0));\n      assertEquals(debug, 0, daq.getIndexedSuperPhrases().size());\n    }\n    { // length 4 phrase (larger then the max indexed size)\n      final Phrase qbfp = phrases.get((7 * 2) + 3);\n      final String debug = qbfp.toString();\n\n      assertEquals(debug, \"Quick    brown FOX perniciously\", qbfp.getSubSequence());\n      assertEquals(debug, 3, qbfp.getPositionStart());\n      assertEquals(debug, 7, qbfp.getPositionEnd());\n      assertEquals(debug, 4, qbfp.getPositionLength());\n      \n      assertEquals(debug, 8, qbfp.getOffsetStart());\n      assertEquals(debug, 39, qbfp.getOffsetEnd());\n\n      assertEquals(debug, 4, qbfp.getIndividualIndexedTerms().size());\n      assertEquals(debug, 2, qbfp.getLargestIndexedSubPhrases().size());\n      assertEquals(debug, 0, qbfp.getIndexedSuperPhrases().size());\n    }\n    \n    // some blanket assumptions about the results...\n    assertBasicSanityChecks(phrases, 11, 3, 7);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0d1411e62d30c460b09c6f3643df82daa10a27cc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0d1411e62d30c460b09c6f3643df82daa10a27cc"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d1411e62d30c460b09c6f3643df82daa10a27cc"],"0d1411e62d30c460b09c6f3643df82daa10a27cc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}