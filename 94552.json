{"path":"lucene/core/src/java/org/apache/lucene/util/packed/AbstractAppendingLongBuffer.Iterator#next().mjava","commits":[{"id":"ae3be3418aea9954be27a83315087f67c0c2201e","date":1361023362,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/AbstractAppendingLongBuffer.Iterator#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/AppendingLongBuffer.Iterator#next().mjava","sourceNew":"    /** Return the next long in the buffer. */\n    public final long next() {\n      assert hasNext();\n      long result = currentValues[pOff++];\n      if (pOff == MAX_PENDING_COUNT) {\n        vOff += 1;\n        pOff = 0;\n        if (vOff <= valuesOff) {\n          fillValues();\n        }\n      }\n      return result;\n    }\n\n","sourceOld":"    /** Return the next long in the buffer. */\n    public long next() {\n      assert hasNext();\n      long result = currentValues[pOff++];\n      if (pOff == MAX_PENDING_COUNT) {\n        vOff += 1;\n        pOff = 0;\n        if (vOff <= valuesOff) {\n          fillValues();\n        }\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/AbstractAppendingLongBuffer.Iterator#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/AppendingLongBuffer.Iterator#next().mjava","sourceNew":"    /** Return the next long in the buffer. */\n    public final long next() {\n      assert hasNext();\n      long result = currentValues[pOff++];\n      if (pOff == MAX_PENDING_COUNT) {\n        vOff += 1;\n        pOff = 0;\n        if (vOff <= valuesOff) {\n          fillValues();\n        }\n      }\n      return result;\n    }\n\n","sourceOld":"    /** Return the next long in the buffer. */\n    public long next() {\n      assert hasNext();\n      long result = currentValues[pOff++];\n      if (pOff == MAX_PENDING_COUNT) {\n        vOff += 1;\n        pOff = 0;\n        if (vOff <= valuesOff) {\n          fillValues();\n        }\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22344cc5c695683a5a6cecff291f840d71c20d25","date":1370561415,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/AbstractAppendingLongBuffer.Iterator#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/AbstractAppendingLongBuffer.Iterator#next().mjava","sourceNew":"    /** Return the next long in the buffer. */\n    public final long next() {\n      assert hasNext();\n      long result = currentValues[pOff++];\n      if (pOff == pending.length) {\n        vOff += 1;\n        pOff = 0;\n        if (vOff <= valuesOff) {\n          fillValues();\n        }\n      }\n      return result;\n    }\n\n","sourceOld":"    /** Return the next long in the buffer. */\n    public final long next() {\n      assert hasNext();\n      long result = currentValues[pOff++];\n      if (pOff == MAX_PENDING_COUNT) {\n        vOff += 1;\n        pOff = 0;\n        if (vOff <= valuesOff) {\n          fillValues();\n        }\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa","date":1373959221,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/AbstractAppendingLongBuffer.Iterator#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/AbstractAppendingLongBuffer.Iterator#next().mjava","sourceNew":"    /** Return the next long in the buffer. */\n    public final long next() {\n      assert hasNext();\n      long result = currentValues[pOff++];\n      if (pOff == currentCount) {\n        vOff += 1;\n        pOff = 0;\n        if (vOff <= valuesOff) {\n          fillValues();\n        } else {\n          currentCount = 0;\n        }\n      }\n      return result;\n    }\n\n","sourceOld":"    /** Return the next long in the buffer. */\n    public final long next() {\n      assert hasNext();\n      long result = currentValues[pOff++];\n      if (pOff == pending.length) {\n        vOff += 1;\n        pOff = 0;\n        if (vOff <= valuesOff) {\n          fillValues();\n        }\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/AbstractAppendingLongBuffer.Iterator#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/AbstractAppendingLongBuffer.Iterator#next().mjava","sourceNew":"    /** Return the next long in the buffer. */\n    public final long next() {\n      assert hasNext();\n      long result = currentValues[pOff++];\n      if (pOff == currentCount) {\n        vOff += 1;\n        pOff = 0;\n        if (vOff <= valuesOff) {\n          fillValues();\n        } else {\n          currentCount = 0;\n        }\n      }\n      return result;\n    }\n\n","sourceOld":"    /** Return the next long in the buffer. */\n    public final long next() {\n      assert hasNext();\n      long result = currentValues[pOff++];\n      if (pOff == pending.length) {\n        vOff += 1;\n        pOff = 0;\n        if (vOff <= valuesOff) {\n          fillValues();\n        }\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd","date":1404226546,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedLongValues.Iterator#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/AbstractAppendingLongBuffer.Iterator#next().mjava","sourceNew":"    /** Return the next long in the buffer. */\n    public final long next() {\n      assert hasNext();\n      long result = currentValues[pOff++];\n      if (pOff == currentCount) {\n        vOff += 1;\n        pOff = 0;\n        fillBlock();\n      }\n      return result;\n    }\n\n","sourceOld":"    /** Return the next long in the buffer. */\n    public final long next() {\n      assert hasNext();\n      long result = currentValues[pOff++];\n      if (pOff == currentCount) {\n        vOff += 1;\n        pOff = 0;\n        if (vOff <= valuesOff) {\n          fillValues();\n        } else {\n          currentCount = 0;\n        }\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa":["22344cc5c695683a5a6cecff291f840d71c20d25"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["22344cc5c695683a5a6cecff291f840d71c20d25","3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22344cc5c695683a5a6cecff291f840d71c20d25":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae3be3418aea9954be27a83315087f67c0c2201e"],"ae3be3418aea9954be27a83315087f67c0c2201e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aae6236deecc1bf344f9c22d8d9dd09ef6701dbd"],"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd":["3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa"]},"commit2Childs":{"3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa":["37a0f60745e53927c4c876cfe5b5a58170f0646c","aae6236deecc1bf344f9c22d8d9dd09ef6701dbd"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ddbb72a33557d2b5bc22ee95daf3281c43560502","ae3be3418aea9954be27a83315087f67c0c2201e"],"22344cc5c695683a5a6cecff291f840d71c20d25":["3618e9b99a76b26b0dbb5e7ea75cbb6065433eaa","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["22344cc5c695683a5a6cecff291f840d71c20d25"],"ae3be3418aea9954be27a83315087f67c0c2201e":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}