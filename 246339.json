{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/WordlistLoader#getWordSet(Reader,String).mjava","commits":[{"id":"790c3f61c9b891d66d919c5d10db9fa5216eb0f1","date":1274818604,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/WordlistLoader#getWordSet(Reader,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/WordlistLoader#getWordSet(Reader,String).mjava","sourceNew":"  /**\n   * Reads lines from a Reader and adds every non-comment line as an entry to a HashSet (omitting\n   * leading and trailing whitespace). Every line of the Reader should contain only\n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).\n   *\n   * @param reader Reader containing the wordlist\n   * @param comment The string representing a comment.\n   * @return A HashSet with the reader's words\n   */\n  public static HashSet<String> getWordSet(Reader reader, String comment) throws IOException {\n    final HashSet<String> result = new HashSet<String>();\n    BufferedReader br = null;\n    try {\n      if (reader instanceof BufferedReader) {\n        br = (BufferedReader) reader;\n      } else {\n        br = new BufferedReader(reader);\n      }\n      String word = null;\n      while ((word = br.readLine()) != null) {\n        if (word.startsWith(comment) == false){\n          result.add(word.trim());\n        }\n      }\n    }\n    finally {\n      if (br != null)\n        br.close();\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Reads lines from a Reader and adds every non-comment line as an entry to a HashSet (omitting\n   * leading and trailing whitespace). Every line of the Reader should contain only\n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).\n   *\n   * @param reader Reader containing the wordlist\n   * @param comment The string representing a comment.\n   * @return A HashSet with the reader's words\n   */\n  public static HashSet<String> getWordSet(Reader reader, String comment) throws IOException {\n    final HashSet<String> result = new HashSet<String>();\n    BufferedReader br = null;\n    try {\n      if (reader instanceof BufferedReader) {\n        br = (BufferedReader) reader;\n      } else {\n        br = new BufferedReader(reader);\n      }\n      String word = null;\n      while ((word = br.readLine()) != null) {\n        if (word.startsWith(comment) == false){\n          result.add(word.trim());\n        }\n      }\n    }\n    finally {\n      if (br != null)\n        br.close();\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a24f16e684000b5854634d7139339a792cc97927","date":1320888085,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/WordlistLoader#getWordSet(Reader,String,CharArraySet).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/WordlistLoader#getWordSet(Reader,String).mjava","sourceNew":"  /**\n   * Reads lines from a Reader and adds every non-comment line as an entry to a CharArraySet (omitting\n   * leading and trailing whitespace). Every line of the Reader should contain only\n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).\n   *\n   * @param reader Reader containing the wordlist\n   * @param comment The string representing a comment.\n   * @param result the {@link CharArraySet} to fill with the readers words\n   * @return the given {@link CharArraySet} with the reader's words\n   */\n  public static CharArraySet getWordSet(Reader reader, String comment, CharArraySet result) throws IOException {\n    BufferedReader br = null;\n    try {\n      br = getBufferedReader(reader);\n      String word = null;\n      while ((word = br.readLine()) != null) {\n        if (word.startsWith(comment) == false){\n          result.add(word.trim());\n        }\n      }\n    }\n    finally {\n      IOUtils.close(br);\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Reads lines from a Reader and adds every non-comment line as an entry to a HashSet (omitting\n   * leading and trailing whitespace). Every line of the Reader should contain only\n   * one word. The words need to be in lowercase if you make use of an\n   * Analyzer which uses LowerCaseFilter (like StandardAnalyzer).\n   *\n   * @param reader Reader containing the wordlist\n   * @param comment The string representing a comment.\n   * @return A HashSet with the reader's words\n   */\n  public static HashSet<String> getWordSet(Reader reader, String comment) throws IOException {\n    final HashSet<String> result = new HashSet<String>();\n    BufferedReader br = null;\n    try {\n      if (reader instanceof BufferedReader) {\n        br = (BufferedReader) reader;\n      } else {\n        br = new BufferedReader(reader);\n      }\n      String word = null;\n      while ((word = br.readLine()) != null) {\n        if (word.startsWith(comment) == false){\n          result.add(word.trim());\n        }\n      }\n    }\n    finally {\n      if (br != null)\n        br.close();\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a24f16e684000b5854634d7139339a792cc97927":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a24f16e684000b5854634d7139339a792cc97927"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a24f16e684000b5854634d7139339a792cc97927":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["a24f16e684000b5854634d7139339a792cc97927"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}