{"path":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#invokeBulkCall(int,ArrayList[String]).mjava","commits":[{"id":"4a54d9ede1b7f2f026639186eb07f3f314d87d9a","date":1412176848,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#invokeBulkCall(int,ArrayList[String]).mjava","pathOld":"/dev/null","sourceNew":"  private void invokeBulkCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                        'type':'string',\\n\" +\n        \"                        'stored':true,\\n\" +\n        \"                        'indexed':true\\n\" +\n        \"                        },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'replaceFieldA',\\n\" +\n        \"                        'dest':['replaceDynamicCopyFieldDest']\\n\" +\n        \"                        },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                        'sortMissingLast':'true'\\n\" +\n        \"                        }\\n\" +\n        \"\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n\n    RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    payload = payload.replace(\"replaceFieldA1\", aField);\n\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"dynamicFieldLol\",\"lol\"+seed);\n\n    payload = payload.replace(\"replaceDynamicCopyFieldDest\",dynamicCopyFldDest);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n    String response = publisher.post(\"/schema?wt=json\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if(errors!= null){\n      errs.add(new String(ZkStateReader.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    //get another node\n    RestTestHarness harness = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    long startTime = System.nanoTime();\n    boolean success = false;\n    long maxTimeoutMillis = 100000;\n    Set<String> errmessages = new HashSet<>();\n    while ( ! success\n        && TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n      errmessages.clear();\n      Map m = getObj(harness, aField, \"fields\");\n      if(m== null) errmessages.add(format(\"field {0} not created\", aField));\n\n      m = getObj(harness, dynamicFldName, \"dynamicFields\");\n      if(m== null) errmessages.add(format(\"dynamic field {0} not created\", dynamicFldName));\n\n      List l = getCopyFields(harness, \"a1\");\n      if(!checkCopyField(l,aField,dynamicCopyFldDest))\n        errmessages.add(format(\"CopyField source={0},dest={1} not created\" , aField,dynamicCopyFldDest));\n\n      m = getObj(harness, \"mystr\", \"fieldTypes\");\n      if(m == null) errmessages.add(format(\"new type {}  not created\" , newFieldTypeName));\n      Thread.sleep(10);\n    }\n    if(!errmessages.isEmpty()){\n      errs.addAll(errmessages);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#invokeBulkCall(int,ArrayList[String]).mjava","pathOld":"/dev/null","sourceNew":"  private void invokeBulkCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                        'type':'string',\\n\" +\n        \"                        'stored':true,\\n\" +\n        \"                        'indexed':true\\n\" +\n        \"                        },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'replaceFieldA',\\n\" +\n        \"                        'dest':['replaceDynamicCopyFieldDest']\\n\" +\n        \"                        },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                        'sortMissingLast':'true'\\n\" +\n        \"                        }\\n\" +\n        \"\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n\n    RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    payload = payload.replace(\"replaceFieldA1\", aField);\n\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"dynamicFieldLol\",\"lol\"+seed);\n\n    payload = payload.replace(\"replaceDynamicCopyFieldDest\",dynamicCopyFldDest);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n    String response = publisher.post(\"/schema?wt=json\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if(errors!= null){\n      errs.add(new String(ZkStateReader.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    //get another node\n    RestTestHarness harness = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    long startTime = System.nanoTime();\n    boolean success = false;\n    long maxTimeoutMillis = 100000;\n    Set<String> errmessages = new HashSet<>();\n    while ( ! success\n        && TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n      errmessages.clear();\n      Map m = getObj(harness, aField, \"fields\");\n      if(m== null) errmessages.add(format(\"field {0} not created\", aField));\n\n      m = getObj(harness, dynamicFldName, \"dynamicFields\");\n      if(m== null) errmessages.add(format(\"dynamic field {0} not created\", dynamicFldName));\n\n      List l = getCopyFields(harness, \"a1\");\n      if(!checkCopyField(l,aField,dynamicCopyFldDest))\n        errmessages.add(format(\"CopyField source={0},dest={1} not created\" , aField,dynamicCopyFldDest));\n\n      m = getObj(harness, \"mystr\", \"fieldTypes\");\n      if(m == null) errmessages.add(format(\"new type {}  not created\" , newFieldTypeName));\n      Thread.sleep(10);\n    }\n    if(!errmessages.isEmpty()){\n      errs.addAll(errmessages);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d72e80cee24be385c713864a9f1f90be3744482","date":1417420925,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#invokeBulkCall(int,ArrayList[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#invokeBulkCall(int,ArrayList[String]).mjava","sourceNew":"  private void invokeBulkCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                        'type':'string',\\n\" +\n        \"                        'stored':true,\\n\" +\n        \"                        'indexed':true\\n\" +\n        \"                        },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'replaceFieldA',\\n\" +\n        \"                        'dest':['replaceDynamicCopyFieldDest']\\n\" +\n        \"                        },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                        'sortMissingLast':'true'\\n\" +\n        \"                        }\\n\" +\n        \"\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n\n    RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    payload = payload.replace(\"replaceFieldA\", aField);\n\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"dynamicFieldLol\",\"lol\"+seed);\n\n    payload = payload.replace(\"replaceDynamicCopyFieldDest\",dynamicCopyFldDest);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n    String response = publisher.post(\"/schema?wt=json\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if(errors!= null){\n      errs.add(new String(ZkStateReader.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    //get another node\n    RestTestHarness harness = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    long startTime = System.nanoTime();\n    boolean success = false;\n    long maxTimeoutMillis = 100000;\n    Set<String> errmessages = new HashSet<>();\n    while ( ! success\n        && TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n      errmessages.clear();\n      Map m = getObj(harness, aField, \"fields\");\n      if(m== null) errmessages.add(format(\"field {0} not created\", aField));\n\n      m = getObj(harness, dynamicFldName, \"dynamicFields\");\n      if(m== null) errmessages.add(format(\"dynamic field {0} not created\", dynamicFldName));\n\n      List l = getCopyFields(harness, \"a1\");\n      if(!checkCopyField(l,aField,dynamicCopyFldDest))\n        errmessages.add(format(\"CopyField source={0},dest={1} not created\" , aField,dynamicCopyFldDest));\n\n      m = getObj(harness, \"mystr\", \"fieldTypes\");\n      if(m == null) errmessages.add(format(\"new type {}  not created\" , newFieldTypeName));\n      Thread.sleep(10);\n    }\n    if(!errmessages.isEmpty()){\n      errs.addAll(errmessages);\n    }\n  }\n\n","sourceOld":"  private void invokeBulkCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                        'type':'string',\\n\" +\n        \"                        'stored':true,\\n\" +\n        \"                        'indexed':true\\n\" +\n        \"                        },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'replaceFieldA',\\n\" +\n        \"                        'dest':['replaceDynamicCopyFieldDest']\\n\" +\n        \"                        },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                        'sortMissingLast':'true'\\n\" +\n        \"                        }\\n\" +\n        \"\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n\n    RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    payload = payload.replace(\"replaceFieldA1\", aField);\n\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"dynamicFieldLol\",\"lol\"+seed);\n\n    payload = payload.replace(\"replaceDynamicCopyFieldDest\",dynamicCopyFldDest);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n    String response = publisher.post(\"/schema?wt=json\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if(errors!= null){\n      errs.add(new String(ZkStateReader.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    //get another node\n    RestTestHarness harness = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    long startTime = System.nanoTime();\n    boolean success = false;\n    long maxTimeoutMillis = 100000;\n    Set<String> errmessages = new HashSet<>();\n    while ( ! success\n        && TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n      errmessages.clear();\n      Map m = getObj(harness, aField, \"fields\");\n      if(m== null) errmessages.add(format(\"field {0} not created\", aField));\n\n      m = getObj(harness, dynamicFldName, \"dynamicFields\");\n      if(m== null) errmessages.add(format(\"dynamic field {0} not created\", dynamicFldName));\n\n      List l = getCopyFields(harness, \"a1\");\n      if(!checkCopyField(l,aField,dynamicCopyFldDest))\n        errmessages.add(format(\"CopyField source={0},dest={1} not created\" , aField,dynamicCopyFldDest));\n\n      m = getObj(harness, \"mystr\", \"fieldTypes\");\n      if(m == null) errmessages.add(format(\"new type {}  not created\" , newFieldTypeName));\n      Thread.sleep(10);\n    }\n    if(!errmessages.isEmpty()){\n      errs.addAll(errmessages);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6784d0cc613dc1ee97030eaaa5e0754edc22d164","date":1420824784,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#invokeBulkCall(int,ArrayList[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#invokeBulkCall(int,ArrayList[String]).mjava","sourceNew":"  private void invokeBulkCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                        'type':'string',\\n\" +\n        \"                        'stored':true,\\n\" +\n        \"                        'indexed':true\\n\" +\n        \"                        },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'replaceFieldA',\\n\" +\n        \"                        'dest':['replaceDynamicCopyFieldDest']\\n\" +\n        \"                        },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                        'sortMissingLast':'true'\\n\" +\n        \"                        }\\n\" +\n        \"\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n\n    RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    payload = payload.replace(\"replaceFieldA\", aField);\n\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"dynamicFieldLol\",\"lol\"+seed);\n\n    payload = payload.replace(\"replaceDynamicCopyFieldDest\",dynamicCopyFldDest);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n    String response = publisher.post(\"/schema?wt=json\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if(errors!= null){\n      errs.add(new String(ZkStateReader.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    //get another node\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    try {\n      long startTime = System.nanoTime();\n      boolean success = false;\n      long maxTimeoutMillis = 100000;\n      while (!success\n          && TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(format(\"field {0} not created\", aField));\n        \n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(format(\"dynamic field {0} not created\", dynamicFldName));\n        \n        List l = getCopyFields(harness, \"a1\");\n        if (!checkCopyField(l, aField, dynamicCopyFldDest)) errmessages\n            .add(format(\"CopyField source={0},dest={1} not created\", aField, dynamicCopyFldDest));\n        \n        m = getObj(harness, \"mystr\", \"fieldTypes\");\n        if (m == null) errmessages.add(format(\"new type {}  not created\", newFieldTypeName));\n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if(!errmessages.isEmpty()){\n      errs.addAll(errmessages);\n    }\n  }\n\n","sourceOld":"  private void invokeBulkCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                        'type':'string',\\n\" +\n        \"                        'stored':true,\\n\" +\n        \"                        'indexed':true\\n\" +\n        \"                        },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'replaceFieldA',\\n\" +\n        \"                        'dest':['replaceDynamicCopyFieldDest']\\n\" +\n        \"                        },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                        'sortMissingLast':'true'\\n\" +\n        \"                        }\\n\" +\n        \"\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n\n    RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    payload = payload.replace(\"replaceFieldA\", aField);\n\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"dynamicFieldLol\",\"lol\"+seed);\n\n    payload = payload.replace(\"replaceDynamicCopyFieldDest\",dynamicCopyFldDest);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n    String response = publisher.post(\"/schema?wt=json\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if(errors!= null){\n      errs.add(new String(ZkStateReader.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    //get another node\n    RestTestHarness harness = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    long startTime = System.nanoTime();\n    boolean success = false;\n    long maxTimeoutMillis = 100000;\n    Set<String> errmessages = new HashSet<>();\n    while ( ! success\n        && TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n      errmessages.clear();\n      Map m = getObj(harness, aField, \"fields\");\n      if(m== null) errmessages.add(format(\"field {0} not created\", aField));\n\n      m = getObj(harness, dynamicFldName, \"dynamicFields\");\n      if(m== null) errmessages.add(format(\"dynamic field {0} not created\", dynamicFldName));\n\n      List l = getCopyFields(harness, \"a1\");\n      if(!checkCopyField(l,aField,dynamicCopyFldDest))\n        errmessages.add(format(\"CopyField source={0},dest={1} not created\" , aField,dynamicCopyFldDest));\n\n      m = getObj(harness, \"mystr\", \"fieldTypes\");\n      if(m == null) errmessages.add(format(\"new type {}  not created\" , newFieldTypeName));\n      Thread.sleep(10);\n    }\n    if(!errmessages.isEmpty()){\n      errs.addAll(errmessages);\n    }\n  }\n\n","bugFix":["4a54d9ede1b7f2f026639186eb07f3f314d87d9a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeeea2295d6355a29e259130a5c48ace73022d7c","date":1426569216,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#invokeBulkAddCall(int,ArrayList[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#invokeBulkCall(int,ArrayList[String]).mjava","sourceNew":"  private void invokeBulkAddCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                       'type':'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':true\\n\" +\n        \"                       },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'replaceFieldA',\\n\" +\n        \"                       'dest':['replaceDynamicCopyFieldDest']\\n\" +\n        \"                       },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                       'sortMissingLast':'true'\\n\" +\n        \"                       }\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n    payload = payload.replace(\"replaceFieldA\", aField);\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"replaceDynamicCopyFieldDest\",dynamicCopyFldDest);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n\n    RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    String response = publisher.post(\"/schema?wt=json\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if (errors != null) {\n      errs.add(new String(ZkStateReader.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    //get another node\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    try {\n      long startTime = System.nanoTime();\n      long maxTimeoutMillis = 100000;\n      while (TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(format(\"field {0} not created\", aField));\n        \n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(format(\"dynamic field {0} not created\", dynamicFldName));\n        \n        List l = getSourceCopyFields(harness, aField);\n        if (!checkCopyField(l, aField, dynamicCopyFldDest))\n          errmessages.add(format(\"CopyField source={0},dest={1} not created\", aField, dynamicCopyFldDest));\n        \n        m = getObj(harness, newFieldTypeName, \"fieldTypes\");\n        if (m == null) errmessages.add(format(\"new type {0}  not created\", newFieldTypeName));\n        \n        if (errmessages.isEmpty()) break;\n        \n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if (!errmessages.isEmpty()) {\n      errs.addAll(errmessages);\n    }\n  }\n\n","sourceOld":"  private void invokeBulkCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                        'type':'string',\\n\" +\n        \"                        'stored':true,\\n\" +\n        \"                        'indexed':true\\n\" +\n        \"                        },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'replaceFieldA',\\n\" +\n        \"                        'dest':['replaceDynamicCopyFieldDest']\\n\" +\n        \"                        },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                        'sortMissingLast':'true'\\n\" +\n        \"                        }\\n\" +\n        \"\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n\n    RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    payload = payload.replace(\"replaceFieldA\", aField);\n\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"dynamicFieldLol\",\"lol\"+seed);\n\n    payload = payload.replace(\"replaceDynamicCopyFieldDest\",dynamicCopyFldDest);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n    String response = publisher.post(\"/schema?wt=json\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if(errors!= null){\n      errs.add(new String(ZkStateReader.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    //get another node\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    try {\n      long startTime = System.nanoTime();\n      boolean success = false;\n      long maxTimeoutMillis = 100000;\n      while (!success\n          && TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(format(\"field {0} not created\", aField));\n        \n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(format(\"dynamic field {0} not created\", dynamicFldName));\n        \n        List l = getCopyFields(harness, \"a1\");\n        if (!checkCopyField(l, aField, dynamicCopyFldDest)) errmessages\n            .add(format(\"CopyField source={0},dest={1} not created\", aField, dynamicCopyFldDest));\n        \n        m = getObj(harness, \"mystr\", \"fieldTypes\");\n        if (m == null) errmessages.add(format(\"new type {}  not created\", newFieldTypeName));\n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if(!errmessages.isEmpty()){\n      errs.addAll(errmessages);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#invokeBulkCall(int,ArrayList[String]).mjava","sourceNew":null,"sourceOld":"  private void invokeBulkCall(int seed, ArrayList<String> errs) throws Exception {\n    String payload = \"{\\n\" +\n        \"          'add-field' : {\\n\" +\n        \"                       'name':'replaceFieldA',\\n\" +\n        \"                       'type': 'string',\\n\" +\n        \"                       'stored':true,\\n\" +\n        \"                       'indexed':false\\n\" +\n        \"                       },\\n\" +\n        \"          'add-dynamic-field' : {\\n\" +\n        \"                       'name' :'replaceDynamicField',\\n\" +\n        \"                        'type':'string',\\n\" +\n        \"                        'stored':true,\\n\" +\n        \"                        'indexed':true\\n\" +\n        \"                        },\\n\" +\n        \"          'add-copy-field' : {\\n\" +\n        \"                       'source' :'replaceFieldA',\\n\" +\n        \"                        'dest':['replaceDynamicCopyFieldDest']\\n\" +\n        \"                        },\\n\" +\n        \"          'add-field-type' : {\\n\" +\n        \"                       'name' :'myNewFieldTypeName',\\n\" +\n        \"                       'class' : 'solr.StrField',\\n\" +\n        \"                        'sortMissingLast':'true'\\n\" +\n        \"                        }\\n\" +\n        \"\\n\" +\n        \" }\";\n    String aField = \"a\" + seed;\n    String dynamicFldName = \"*_lol\" + seed;\n    String dynamicCopyFldDest = \"hello_lol\"+seed;\n    String newFieldTypeName = \"mystr\" + seed;\n\n\n    RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    payload = payload.replace(\"replaceFieldA\", aField);\n\n    payload = payload.replace(\"replaceDynamicField\", dynamicFldName);\n    payload = payload.replace(\"dynamicFieldLol\",\"lol\"+seed);\n\n    payload = payload.replace(\"replaceDynamicCopyFieldDest\",dynamicCopyFldDest);\n    payload = payload.replace(\"myNewFieldTypeName\", newFieldTypeName);\n    String response = publisher.post(\"/schema?wt=json\", SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    Object errors = map.get(\"errors\");\n    if(errors!= null){\n      errs.add(new String(ZkStateReader.toJSON(errors), StandardCharsets.UTF_8));\n      return;\n    }\n\n    //get another node\n    Set<String> errmessages = new HashSet<>();\n    RestTestHarness harness = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));\n    try {\n      long startTime = System.nanoTime();\n      boolean success = false;\n      long maxTimeoutMillis = 100000;\n      while (!success\n          && TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {\n        errmessages.clear();\n        Map m = getObj(harness, aField, \"fields\");\n        if (m == null) errmessages.add(format(\"field {0} not created\", aField));\n        \n        m = getObj(harness, dynamicFldName, \"dynamicFields\");\n        if (m == null) errmessages.add(format(\"dynamic field {0} not created\", dynamicFldName));\n        \n        List l = getCopyFields(harness, \"a1\");\n        if (!checkCopyField(l, aField, dynamicCopyFldDest)) errmessages\n            .add(format(\"CopyField source={0},dest={1} not created\", aField, dynamicCopyFldDest));\n        \n        m = getObj(harness, \"mystr\", \"fieldTypes\");\n        if (m == null) errmessages.add(format(\"new type {}  not created\", newFieldTypeName));\n        Thread.sleep(10);\n      }\n    } finally {\n      harness.close();\n    }\n    if(!errmessages.isEmpty()){\n      errs.addAll(errmessages);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["6784d0cc613dc1ee97030eaaa5e0754edc22d164","eeeea2295d6355a29e259130a5c48ace73022d7c"],"7d72e80cee24be385c713864a9f1f90be3744482":["4a54d9ede1b7f2f026639186eb07f3f314d87d9a"],"eeeea2295d6355a29e259130a5c48ace73022d7c":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4a54d9ede1b7f2f026639186eb07f3f314d87d9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4a54d9ede1b7f2f026639186eb07f3f314d87d9a"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["7d72e80cee24be385c713864a9f1f90be3744482"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eeeea2295d6355a29e259130a5c48ace73022d7c"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"7d72e80cee24be385c713864a9f1f90be3744482":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"eeeea2295d6355a29e259130a5c48ace73022d7c":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4a54d9ede1b7f2f026639186eb07f3f314d87d9a","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"4a54d9ede1b7f2f026639186eb07f3f314d87d9a":["7d72e80cee24be385c713864a9f1f90be3744482","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","eeeea2295d6355a29e259130a5c48ace73022d7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}