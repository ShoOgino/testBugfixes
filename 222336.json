{"path":"solr/solrj/src/test/org/apache/solr/common/util/NamedListTest#testRecursive().mjava","commits":[{"id":"62126a2398119ce2a86e01db19c6d1c84e2b9d03","date":1368893778,"type":0,"author":"Shawn Heisey","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/NamedListTest#testRecursive().mjava","pathOld":"/dev/null","sourceNew":"  public void testRecursive() {\n    // key1\n    // key2\n    // - key2a\n    // - key2b\n    // --- key2b1\n    // --- key2b2\n    // - key2c\n    // key3\n    // - key3a\n    // --- key3a1\n    // --- key3a2\n    // --- key3a3\n    // - key3b\n    // - key3c\n    NamedList<Object> nl2b = new NamedList<Object>();\n    nl2b.add(\"key2b1\", \"value2b1\");\n    nl2b.add(\"key2b2\", \"value2b2\");\n    NamedList<Object> nl3a = new NamedList<Object>();\n    nl3a.add(\"key3a1\", \"value3a1\");\n    nl3a.add(\"key3a2\", \"value3a2\");\n    nl3a.add(\"key3a3\", \"value3a3\");\n    NamedList<Object> nl2 = new NamedList<Object>();\n    nl2.add(\"key2a\", \"value2a\");\n    nl2.add(\"key2b\", nl2b);\n    int int1 = 5;\n    Integer int2 = 7;\n    int int3 = 48;\n    nl2.add(\"k2int1\", int1);\n    nl2.add(\"k2int2\", int2);\n    nl2.add(\"k2int3\", int3);\n    NamedList<Object> nl3 = new NamedList<Object>();\n    nl3.add(\"key3a\", nl3a);\n    nl3.add(\"key3b\", \"value3b\");\n    nl3.add(\"key3c\", \"value3c\");\n    NamedList<Object> nl = new NamedList<Object>();\n    nl.add(\"key1\", \"value1\");\n    nl.add(\"key2\", nl2);\n    nl.add(\"key3\", nl3);\n\n    String test1 = (String) nl.findRecursive(\"key2\", \"key2b\", \"key2b2\");\n    assertEquals(test1, \"value2b2\");\n    String test2 = (String) nl.findRecursive(\"key3\", \"key3a\", \"key3a3\");\n    assertEquals(test2, \"value3a3\");\n    String test3 = (String) nl.findRecursive(\"key3\", \"key3c\");\n    assertEquals(test3, \"value3c\");\n    String test4 = (String) nl.findRecursive(\"key3\", \"key3c\", \"invalid\");\n    assertEquals(test4, null);\n    String test5 = (String) nl.findRecursive(\"key3\", \"invalid\", \"invalid\");\n    assertEquals(test5, null);\n    String test6 = (String) nl.findRecursive(\"invalid\", \"key3c\");\n    assertEquals(test6, null);\n    Object nltest = nl.findRecursive(\"key2\", \"key2b\");\n    assertTrue(nltest instanceof NamedList);\n    Integer int1test = (Integer) nl.findRecursive(\"key2\", \"k2int1\");\n    assertEquals(int1test, (Integer) 5);\n    int int2test = (int) nl.findRecursive(\"key2\", \"k2int2\");\n    assertEquals(int2test, 7);\n    int int3test = (int) nl.findRecursive(\"key2\", \"k2int3\");\n    assertEquals(int3test, 48);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09cb84e8f7cc3f05b42efa917e6377e8909c74b5","date":1369035595,"type":3,"author":"Shawn Heisey","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/NamedListTest#testRecursive().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/NamedListTest#testRecursive().mjava","sourceNew":"  public void testRecursive() {\n    // key1\n    // key2\n    // - key2a\n    // - key2b\n    // --- key2b1\n    // --- key2b2\n    // - key2c\n    // - k2int1\n    // key3\n    // - key3a\n    // --- key3a1\n    // --- key3a2\n    // --- key3a3\n    // - key3b\n    // - key3c\n    \n    // this is a varied NL structure.\n    NamedList<String> nl2b = new NamedList<String>();\n    nl2b.add(\"key2b1\", \"value2b1\");\n    nl2b.add(\"key2b2\", \"value2b2\");\n    NamedList<String> nl3a = new NamedList<String>();\n    nl3a.add(\"key3a1\", \"value3a1\");\n    nl3a.add(\"key3a2\", \"value3a2\");\n    nl3a.add(\"key3a3\", \"value3a3\");\n    NamedList<Object> nl2 = new NamedList<Object>();\n    nl2.add(\"key2a\", \"value2a\");\n    nl2.add(\"key2b\", nl2b);\n    nl2.add(\"k2int1\", (int) 5);\n    NamedList<Object> nl3 = new NamedList<Object>();\n    nl3.add(\"key3a\", nl3a);\n    nl3.add(\"key3b\", \"value3b\");\n    nl3.add(\"key3c\", \"value3c\");\n    nl3.add(\"key3c\", \"value3c2\");\n    NamedList<Object> nl = new NamedList<Object>();\n    nl.add(\"key1\", \"value1\");\n    nl.add(\"key2\", nl2);\n    nl.add(\"key3\", nl3);\n    \n    // Simple three-level checks.\n    String test1 = (String) nl.findRecursive(\"key2\", \"key2b\", \"key2b2\");\n    assertEquals(\"value2b2\", test1);\n    String test2 = (String) nl.findRecursive(\"key3\", \"key3a\", \"key3a3\");\n    assertEquals(\"value3a3\", test2);\n    // Two-level check.\n    String test3 = (String) nl.findRecursive(\"key3\", \"key3c\");\n    assertEquals(\"value3c\", test3);\n    // Checking that invalid values return null.\n    String test4 = (String) nl.findRecursive(\"key3\", \"key3c\", \"invalid\");\n    assertEquals(null, test4);\n    String test5 = (String) nl.findRecursive(\"key3\", \"invalid\", \"invalid\");\n    assertEquals(null, test5);\n    String test6 = (String) nl.findRecursive(\"invalid\", \"key3c\");\n    assertEquals(null, test6);\n    // Verify that retrieved NamedList objects have the right type.\n    Object test7 = nl.findRecursive(\"key2\", \"key2b\");\n    assertTrue(test7 instanceof NamedList);\n    // Integer check.\n    int test8 = (Integer) nl.findRecursive(\"key2\", \"k2int1\");\n    assertEquals(5, test8);\n    // Check that a single argument works the same as get(String).\n    String test9 = (String) nl.findRecursive(\"key1\");\n    assertEquals(\"value1\", test9);\n    // enl == explicit nested list\n    //\n    // key1\n    // - key1a\n    // - key1b\n    // key2 (null list)\n    NamedList<NamedList<String>> enl = new NamedList<NamedList<String>>();\n    NamedList<String> enlkey1 = new NamedList<String>();\n    NamedList<String> enlkey2 = null;\n    enlkey1.add(\"key1a\", \"value1a\");\n    enlkey1.add(\"key1b\", \"value1b\");\n    enl.add(\"key1\", enlkey1);\n    enl.add(\"key2\", enlkey2);\n    \n    // Tests that are very similar to the test above, just repeated\n    // on the explicitly nested object type.\n    String enltest1 = (String) enl.findRecursive(\"key1\", \"key1a\");\n    assertEquals(\"value1a\", enltest1);\n    String enltest2 = (String) enl.findRecursive(\"key1\", \"key1b\");\n    assertEquals(\"value1b\", enltest2);\n    // Verify that when a null value is stored, the standard get method\n    // says it is null, then check the recursive method.\n    Object enltest3 = enl.get(\"key2\");\n    assertNull(enltest3);\n    Object enltest4 = enl.findRecursive(\"key2\");\n    assertNull(enltest4);\n  }\n\n","sourceOld":"  public void testRecursive() {\n    // key1\n    // key2\n    // - key2a\n    // - key2b\n    // --- key2b1\n    // --- key2b2\n    // - key2c\n    // key3\n    // - key3a\n    // --- key3a1\n    // --- key3a2\n    // --- key3a3\n    // - key3b\n    // - key3c\n    NamedList<Object> nl2b = new NamedList<Object>();\n    nl2b.add(\"key2b1\", \"value2b1\");\n    nl2b.add(\"key2b2\", \"value2b2\");\n    NamedList<Object> nl3a = new NamedList<Object>();\n    nl3a.add(\"key3a1\", \"value3a1\");\n    nl3a.add(\"key3a2\", \"value3a2\");\n    nl3a.add(\"key3a3\", \"value3a3\");\n    NamedList<Object> nl2 = new NamedList<Object>();\n    nl2.add(\"key2a\", \"value2a\");\n    nl2.add(\"key2b\", nl2b);\n    int int1 = 5;\n    Integer int2 = 7;\n    int int3 = 48;\n    nl2.add(\"k2int1\", int1);\n    nl2.add(\"k2int2\", int2);\n    nl2.add(\"k2int3\", int3);\n    NamedList<Object> nl3 = new NamedList<Object>();\n    nl3.add(\"key3a\", nl3a);\n    nl3.add(\"key3b\", \"value3b\");\n    nl3.add(\"key3c\", \"value3c\");\n    NamedList<Object> nl = new NamedList<Object>();\n    nl.add(\"key1\", \"value1\");\n    nl.add(\"key2\", nl2);\n    nl.add(\"key3\", nl3);\n\n    String test1 = (String) nl.findRecursive(\"key2\", \"key2b\", \"key2b2\");\n    assertEquals(test1, \"value2b2\");\n    String test2 = (String) nl.findRecursive(\"key3\", \"key3a\", \"key3a3\");\n    assertEquals(test2, \"value3a3\");\n    String test3 = (String) nl.findRecursive(\"key3\", \"key3c\");\n    assertEquals(test3, \"value3c\");\n    String test4 = (String) nl.findRecursive(\"key3\", \"key3c\", \"invalid\");\n    assertEquals(test4, null);\n    String test5 = (String) nl.findRecursive(\"key3\", \"invalid\", \"invalid\");\n    assertEquals(test5, null);\n    String test6 = (String) nl.findRecursive(\"invalid\", \"key3c\");\n    assertEquals(test6, null);\n    Object nltest = nl.findRecursive(\"key2\", \"key2b\");\n    assertTrue(nltest instanceof NamedList);\n    Integer int1test = (Integer) nl.findRecursive(\"key2\", \"k2int1\");\n    assertEquals(int1test, (Integer) 5);\n    int int2test = (int) nl.findRecursive(\"key2\", \"k2int2\");\n    assertEquals(int2test, 7);\n    int int3test = (int) nl.findRecursive(\"key2\", \"k2int3\");\n    assertEquals(int3test, 48);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/NamedListTest#testRecursive().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/NamedListTest#testRecursive().mjava","sourceNew":"  public void testRecursive() {\n    // key1\n    // key2\n    // - key2a\n    // - key2b\n    // --- key2b1\n    // --- key2b2\n    // - key2c\n    // - k2int1\n    // key3\n    // - key3a\n    // --- key3a1\n    // --- key3a2\n    // --- key3a3\n    // - key3b\n    // - key3c\n    \n    // this is a varied NL structure.\n    NamedList<String> nl2b = new NamedList<>();\n    nl2b.add(\"key2b1\", \"value2b1\");\n    nl2b.add(\"key2b2\", \"value2b2\");\n    NamedList<String> nl3a = new NamedList<>();\n    nl3a.add(\"key3a1\", \"value3a1\");\n    nl3a.add(\"key3a2\", \"value3a2\");\n    nl3a.add(\"key3a3\", \"value3a3\");\n    NamedList<Object> nl2 = new NamedList<>();\n    nl2.add(\"key2a\", \"value2a\");\n    nl2.add(\"key2b\", nl2b);\n    nl2.add(\"k2int1\", (int) 5);\n    NamedList<Object> nl3 = new NamedList<>();\n    nl3.add(\"key3a\", nl3a);\n    nl3.add(\"key3b\", \"value3b\");\n    nl3.add(\"key3c\", \"value3c\");\n    nl3.add(\"key3c\", \"value3c2\");\n    NamedList<Object> nl = new NamedList<>();\n    nl.add(\"key1\", \"value1\");\n    nl.add(\"key2\", nl2);\n    nl.add(\"key3\", nl3);\n    \n    // Simple three-level checks.\n    String test1 = (String) nl.findRecursive(\"key2\", \"key2b\", \"key2b2\");\n    assertEquals(\"value2b2\", test1);\n    String test2 = (String) nl.findRecursive(\"key3\", \"key3a\", \"key3a3\");\n    assertEquals(\"value3a3\", test2);\n    // Two-level check.\n    String test3 = (String) nl.findRecursive(\"key3\", \"key3c\");\n    assertEquals(\"value3c\", test3);\n    // Checking that invalid values return null.\n    String test4 = (String) nl.findRecursive(\"key3\", \"key3c\", \"invalid\");\n    assertEquals(null, test4);\n    String test5 = (String) nl.findRecursive(\"key3\", \"invalid\", \"invalid\");\n    assertEquals(null, test5);\n    String test6 = (String) nl.findRecursive(\"invalid\", \"key3c\");\n    assertEquals(null, test6);\n    // Verify that retrieved NamedList objects have the right type.\n    Object test7 = nl.findRecursive(\"key2\", \"key2b\");\n    assertTrue(test7 instanceof NamedList);\n    // Integer check.\n    int test8 = (Integer) nl.findRecursive(\"key2\", \"k2int1\");\n    assertEquals(5, test8);\n    // Check that a single argument works the same as get(String).\n    String test9 = (String) nl.findRecursive(\"key1\");\n    assertEquals(\"value1\", test9);\n    // enl == explicit nested list\n    //\n    // key1\n    // - key1a\n    // - key1b\n    // key2 (null list)\n    NamedList<NamedList<String>> enl = new NamedList<>();\n    NamedList<String> enlkey1 = new NamedList<>();\n    NamedList<String> enlkey2 = null;\n    enlkey1.add(\"key1a\", \"value1a\");\n    enlkey1.add(\"key1b\", \"value1b\");\n    enl.add(\"key1\", enlkey1);\n    enl.add(\"key2\", enlkey2);\n    \n    // Tests that are very similar to the test above, just repeated\n    // on the explicitly nested object type.\n    String enltest1 = (String) enl.findRecursive(\"key1\", \"key1a\");\n    assertEquals(\"value1a\", enltest1);\n    String enltest2 = (String) enl.findRecursive(\"key1\", \"key1b\");\n    assertEquals(\"value1b\", enltest2);\n    // Verify that when a null value is stored, the standard get method\n    // says it is null, then check the recursive method.\n    Object enltest3 = enl.get(\"key2\");\n    assertNull(enltest3);\n    Object enltest4 = enl.findRecursive(\"key2\");\n    assertNull(enltest4);\n  }\n\n","sourceOld":"  public void testRecursive() {\n    // key1\n    // key2\n    // - key2a\n    // - key2b\n    // --- key2b1\n    // --- key2b2\n    // - key2c\n    // - k2int1\n    // key3\n    // - key3a\n    // --- key3a1\n    // --- key3a2\n    // --- key3a3\n    // - key3b\n    // - key3c\n    \n    // this is a varied NL structure.\n    NamedList<String> nl2b = new NamedList<String>();\n    nl2b.add(\"key2b1\", \"value2b1\");\n    nl2b.add(\"key2b2\", \"value2b2\");\n    NamedList<String> nl3a = new NamedList<String>();\n    nl3a.add(\"key3a1\", \"value3a1\");\n    nl3a.add(\"key3a2\", \"value3a2\");\n    nl3a.add(\"key3a3\", \"value3a3\");\n    NamedList<Object> nl2 = new NamedList<Object>();\n    nl2.add(\"key2a\", \"value2a\");\n    nl2.add(\"key2b\", nl2b);\n    nl2.add(\"k2int1\", (int) 5);\n    NamedList<Object> nl3 = new NamedList<Object>();\n    nl3.add(\"key3a\", nl3a);\n    nl3.add(\"key3b\", \"value3b\");\n    nl3.add(\"key3c\", \"value3c\");\n    nl3.add(\"key3c\", \"value3c2\");\n    NamedList<Object> nl = new NamedList<Object>();\n    nl.add(\"key1\", \"value1\");\n    nl.add(\"key2\", nl2);\n    nl.add(\"key3\", nl3);\n    \n    // Simple three-level checks.\n    String test1 = (String) nl.findRecursive(\"key2\", \"key2b\", \"key2b2\");\n    assertEquals(\"value2b2\", test1);\n    String test2 = (String) nl.findRecursive(\"key3\", \"key3a\", \"key3a3\");\n    assertEquals(\"value3a3\", test2);\n    // Two-level check.\n    String test3 = (String) nl.findRecursive(\"key3\", \"key3c\");\n    assertEquals(\"value3c\", test3);\n    // Checking that invalid values return null.\n    String test4 = (String) nl.findRecursive(\"key3\", \"key3c\", \"invalid\");\n    assertEquals(null, test4);\n    String test5 = (String) nl.findRecursive(\"key3\", \"invalid\", \"invalid\");\n    assertEquals(null, test5);\n    String test6 = (String) nl.findRecursive(\"invalid\", \"key3c\");\n    assertEquals(null, test6);\n    // Verify that retrieved NamedList objects have the right type.\n    Object test7 = nl.findRecursive(\"key2\", \"key2b\");\n    assertTrue(test7 instanceof NamedList);\n    // Integer check.\n    int test8 = (Integer) nl.findRecursive(\"key2\", \"k2int1\");\n    assertEquals(5, test8);\n    // Check that a single argument works the same as get(String).\n    String test9 = (String) nl.findRecursive(\"key1\");\n    assertEquals(\"value1\", test9);\n    // enl == explicit nested list\n    //\n    // key1\n    // - key1a\n    // - key1b\n    // key2 (null list)\n    NamedList<NamedList<String>> enl = new NamedList<NamedList<String>>();\n    NamedList<String> enlkey1 = new NamedList<String>();\n    NamedList<String> enlkey2 = null;\n    enlkey1.add(\"key1a\", \"value1a\");\n    enlkey1.add(\"key1b\", \"value1b\");\n    enl.add(\"key1\", enlkey1);\n    enl.add(\"key2\", enlkey2);\n    \n    // Tests that are very similar to the test above, just repeated\n    // on the explicitly nested object type.\n    String enltest1 = (String) enl.findRecursive(\"key1\", \"key1a\");\n    assertEquals(\"value1a\", enltest1);\n    String enltest2 = (String) enl.findRecursive(\"key1\", \"key1b\");\n    assertEquals(\"value1b\", enltest2);\n    // Verify that when a null value is stored, the standard get method\n    // says it is null, then check the recursive method.\n    Object enltest3 = enl.get(\"key2\");\n    assertNull(enltest3);\n    Object enltest4 = enl.findRecursive(\"key2\");\n    assertNull(enltest4);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/NamedListTest#testRecursive().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/NamedListTest#testRecursive().mjava","sourceNew":"  public void testRecursive() {\n    // key1\n    // key2\n    // - key2a\n    // - key2b\n    // --- key2b1\n    // --- key2b2\n    // - key2c\n    // - k2int1\n    // key3\n    // - key3a\n    // --- key3a1\n    // --- key3a2\n    // --- key3a3\n    // - key3b\n    // - key3c\n    \n    // this is a varied NL structure.\n    NamedList<String> nl2b = new NamedList<>();\n    nl2b.add(\"key2b1\", \"value2b1\");\n    nl2b.add(\"key2b2\", \"value2b2\");\n    NamedList<String> nl3a = new NamedList<>();\n    nl3a.add(\"key3a1\", \"value3a1\");\n    nl3a.add(\"key3a2\", \"value3a2\");\n    nl3a.add(\"key3a3\", \"value3a3\");\n    NamedList<Object> nl2 = new NamedList<>();\n    nl2.add(\"key2a\", \"value2a\");\n    nl2.add(\"key2b\", nl2b);\n    nl2.add(\"k2int1\", 5);\n    NamedList<Object> nl3 = new NamedList<>();\n    nl3.add(\"key3a\", nl3a);\n    nl3.add(\"key3b\", \"value3b\");\n    nl3.add(\"key3c\", \"value3c\");\n    nl3.add(\"key3c\", \"value3c2\");\n    NamedList<Object> nl = new NamedList<>();\n    nl.add(\"key1\", \"value1\");\n    nl.add(\"key2\", nl2);\n    nl.add(\"key3\", nl3);\n    \n    // Simple three-level checks.\n    String test1 = (String) nl.findRecursive(\"key2\", \"key2b\", \"key2b2\");\n    assertEquals(\"value2b2\", test1);\n    String test2 = (String) nl.findRecursive(\"key3\", \"key3a\", \"key3a3\");\n    assertEquals(\"value3a3\", test2);\n    // Two-level check.\n    String test3 = (String) nl.findRecursive(\"key3\", \"key3c\");\n    assertEquals(\"value3c\", test3);\n    // Checking that invalid values return null.\n    String test4 = (String) nl.findRecursive(\"key3\", \"key3c\", \"invalid\");\n    assertEquals(null, test4);\n    String test5 = (String) nl.findRecursive(\"key3\", \"invalid\", \"invalid\");\n    assertEquals(null, test5);\n    String test6 = (String) nl.findRecursive(\"invalid\", \"key3c\");\n    assertEquals(null, test6);\n    // Verify that retrieved NamedList objects have the right type.\n    Object test7 = nl.findRecursive(\"key2\", \"key2b\");\n    assertTrue(test7 instanceof NamedList);\n    // Integer check.\n    int test8 = (Integer) nl.findRecursive(\"key2\", \"k2int1\");\n    assertEquals(5, test8);\n    // Check that a single argument works the same as get(String).\n    String test9 = (String) nl.findRecursive(\"key1\");\n    assertEquals(\"value1\", test9);\n    // enl == explicit nested list\n    //\n    // key1\n    // - key1a\n    // - key1b\n    // key2 (null list)\n    NamedList<NamedList<String>> enl = new NamedList<>();\n    NamedList<String> enlkey1 = new NamedList<>();\n    NamedList<String> enlkey2 = null;\n    enlkey1.add(\"key1a\", \"value1a\");\n    enlkey1.add(\"key1b\", \"value1b\");\n    enl.add(\"key1\", enlkey1);\n    enl.add(\"key2\", enlkey2);\n    \n    // Tests that are very similar to the test above, just repeated\n    // on the explicitly nested object type.\n    String enltest1 = (String) enl.findRecursive(\"key1\", \"key1a\");\n    assertEquals(\"value1a\", enltest1);\n    String enltest2 = (String) enl.findRecursive(\"key1\", \"key1b\");\n    assertEquals(\"value1b\", enltest2);\n    // Verify that when a null value is stored, the standard get method\n    // says it is null, then check the recursive method.\n    Object enltest3 = enl.get(\"key2\");\n    assertNull(enltest3);\n    Object enltest4 = enl.findRecursive(\"key2\");\n    assertNull(enltest4);\n  }\n\n","sourceOld":"  public void testRecursive() {\n    // key1\n    // key2\n    // - key2a\n    // - key2b\n    // --- key2b1\n    // --- key2b2\n    // - key2c\n    // - k2int1\n    // key3\n    // - key3a\n    // --- key3a1\n    // --- key3a2\n    // --- key3a3\n    // - key3b\n    // - key3c\n    \n    // this is a varied NL structure.\n    NamedList<String> nl2b = new NamedList<>();\n    nl2b.add(\"key2b1\", \"value2b1\");\n    nl2b.add(\"key2b2\", \"value2b2\");\n    NamedList<String> nl3a = new NamedList<>();\n    nl3a.add(\"key3a1\", \"value3a1\");\n    nl3a.add(\"key3a2\", \"value3a2\");\n    nl3a.add(\"key3a3\", \"value3a3\");\n    NamedList<Object> nl2 = new NamedList<>();\n    nl2.add(\"key2a\", \"value2a\");\n    nl2.add(\"key2b\", nl2b);\n    nl2.add(\"k2int1\", (int) 5);\n    NamedList<Object> nl3 = new NamedList<>();\n    nl3.add(\"key3a\", nl3a);\n    nl3.add(\"key3b\", \"value3b\");\n    nl3.add(\"key3c\", \"value3c\");\n    nl3.add(\"key3c\", \"value3c2\");\n    NamedList<Object> nl = new NamedList<>();\n    nl.add(\"key1\", \"value1\");\n    nl.add(\"key2\", nl2);\n    nl.add(\"key3\", nl3);\n    \n    // Simple three-level checks.\n    String test1 = (String) nl.findRecursive(\"key2\", \"key2b\", \"key2b2\");\n    assertEquals(\"value2b2\", test1);\n    String test2 = (String) nl.findRecursive(\"key3\", \"key3a\", \"key3a3\");\n    assertEquals(\"value3a3\", test2);\n    // Two-level check.\n    String test3 = (String) nl.findRecursive(\"key3\", \"key3c\");\n    assertEquals(\"value3c\", test3);\n    // Checking that invalid values return null.\n    String test4 = (String) nl.findRecursive(\"key3\", \"key3c\", \"invalid\");\n    assertEquals(null, test4);\n    String test5 = (String) nl.findRecursive(\"key3\", \"invalid\", \"invalid\");\n    assertEquals(null, test5);\n    String test6 = (String) nl.findRecursive(\"invalid\", \"key3c\");\n    assertEquals(null, test6);\n    // Verify that retrieved NamedList objects have the right type.\n    Object test7 = nl.findRecursive(\"key2\", \"key2b\");\n    assertTrue(test7 instanceof NamedList);\n    // Integer check.\n    int test8 = (Integer) nl.findRecursive(\"key2\", \"k2int1\");\n    assertEquals(5, test8);\n    // Check that a single argument works the same as get(String).\n    String test9 = (String) nl.findRecursive(\"key1\");\n    assertEquals(\"value1\", test9);\n    // enl == explicit nested list\n    //\n    // key1\n    // - key1a\n    // - key1b\n    // key2 (null list)\n    NamedList<NamedList<String>> enl = new NamedList<>();\n    NamedList<String> enlkey1 = new NamedList<>();\n    NamedList<String> enlkey2 = null;\n    enlkey1.add(\"key1a\", \"value1a\");\n    enlkey1.add(\"key1b\", \"value1b\");\n    enl.add(\"key1\", enlkey1);\n    enl.add(\"key2\", enlkey2);\n    \n    // Tests that are very similar to the test above, just repeated\n    // on the explicitly nested object type.\n    String enltest1 = (String) enl.findRecursive(\"key1\", \"key1a\");\n    assertEquals(\"value1a\", enltest1);\n    String enltest2 = (String) enl.findRecursive(\"key1\", \"key1b\");\n    assertEquals(\"value1b\", enltest2);\n    // Verify that when a null value is stored, the standard get method\n    // says it is null, then check the recursive method.\n    Object enltest3 = enl.get(\"key2\");\n    assertNull(enltest3);\n    Object enltest4 = enl.findRecursive(\"key2\");\n    assertNull(enltest4);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["09cb84e8f7cc3f05b42efa917e6377e8909c74b5"],"62126a2398119ce2a86e01db19c6d1c84e2b9d03":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"],"09cb84e8f7cc3f05b42efa917e6377e8909c74b5":["62126a2398119ce2a86e01db19c6d1c84e2b9d03"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["9ba1b632c041956c93c41aa1143d16a567014891"],"62126a2398119ce2a86e01db19c6d1c84e2b9d03":["09cb84e8f7cc3f05b42efa917e6377e8909c74b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["62126a2398119ce2a86e01db19c6d1c84e2b9d03"],"09cb84e8f7cc3f05b42efa917e6377e8909c74b5":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}