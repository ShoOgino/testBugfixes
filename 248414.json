{"path":"lucene/classification/src/java/org/apache/lucene/classification/document/SimpleNaiveBayesDocumentClassifier#getTextTermFreqForClass(Term,String).mjava","commits":[{"id":"38b5bd3ae837751f57f363e9a41b833794222814","date":1445342257,"type":1,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/document/SimpleNaiveBayesDocumentClassifier#getTextTermFreqForClass(Term,String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/document/SimpleNaiveBayesDocumentClassifier#getTextTermFreqForClass(BytesRef,String).mjava","sourceNew":"  /**\n   * Returns the average number of unique terms times the number of docs belonging to the input class\n   *\n   * @param  term the class term\n   * @return the average number of unique terms\n   * @throws java.io.IOException If there is a low-level I/O error\n   */\n  private double getTextTermFreqForClass(Term term, String fieldName) throws IOException {\n    double avgNumberOfUniqueTerms;\n    Terms terms = MultiFields.getTerms(leafReader, fieldName);\n    long numPostings = terms.getSumDocFreq(); // number of term/doc pairs\n    avgNumberOfUniqueTerms = numPostings / (double) terms.getDocCount(); // avg # of unique terms per doc\n    int docsWithC = leafReader.docFreq(term);\n    return avgNumberOfUniqueTerms * docsWithC; // avg # of unique terms in text fields per doc * # docs with c\n  }\n\n","sourceOld":"  /**\n   * Returns the average number of unique terms times the number of docs belonging to the input class\n   *\n   * @param c the class\n   * @return the average number of unique terms\n   * @throws java.io.IOException If there is a low-level I/O error\n   */\n  private double getTextTermFreqForClass(BytesRef c, String fieldName) throws IOException {\n    double avgNumberOfUniqueTerms;\n    Terms terms = MultiFields.getTerms(leafReader, fieldName);\n    long numPostings = terms.getSumDocFreq(); // number of term/doc pairs\n    avgNumberOfUniqueTerms = numPostings / (double) terms.getDocCount(); // avg # of unique terms per doc\n    int docsWithC = leafReader.docFreq(new Term(classFieldName, c));\n    return avgNumberOfUniqueTerms * docsWithC; // avg # of unique terms in text fields per doc * # docs with c\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"444d4b906d0e3398f87d6a5c4967c508f11a7f0b","date":1466507434,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/document/SimpleNaiveBayesDocumentClassifier#getTextTermFreqForClass(Term,String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/document/SimpleNaiveBayesDocumentClassifier#getTextTermFreqForClass(Term,String).mjava","sourceNew":"  /**\n   * Returns the average number of unique terms times the number of docs belonging to the input class\n   *\n   * @param  term the class term\n   * @return the average number of unique terms\n   * @throws java.io.IOException If there is a low-level I/O error\n   */\n  private double getTextTermFreqForClass(Term term, String fieldName) throws IOException {\n    double avgNumberOfUniqueTerms;\n    Terms terms = MultiFields.getTerms(indexReader, fieldName);\n    long numPostings = terms.getSumDocFreq(); // number of term/doc pairs\n    avgNumberOfUniqueTerms = numPostings / (double) terms.getDocCount(); // avg # of unique terms per doc\n    int docsWithC = indexReader.docFreq(term);\n    return avgNumberOfUniqueTerms * docsWithC; // avg # of unique terms in text fields per doc * # docs with c\n  }\n\n","sourceOld":"  /**\n   * Returns the average number of unique terms times the number of docs belonging to the input class\n   *\n   * @param  term the class term\n   * @return the average number of unique terms\n   * @throws java.io.IOException If there is a low-level I/O error\n   */\n  private double getTextTermFreqForClass(Term term, String fieldName) throws IOException {\n    double avgNumberOfUniqueTerms;\n    Terms terms = MultiFields.getTerms(leafReader, fieldName);\n    long numPostings = terms.getSumDocFreq(); // number of term/doc pairs\n    avgNumberOfUniqueTerms = numPostings / (double) terms.getDocCount(); // avg # of unique terms per doc\n    int docsWithC = leafReader.docFreq(term);\n    return avgNumberOfUniqueTerms * docsWithC; // avg # of unique terms in text fields per doc * # docs with c\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/document/SimpleNaiveBayesDocumentClassifier#getTextTermFreqForClass(Term,String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/document/SimpleNaiveBayesDocumentClassifier#getTextTermFreqForClass(Term,String).mjava","sourceNew":"  /**\n   * Returns the average number of unique terms times the number of docs belonging to the input class\n   *\n   * @param  term the class term\n   * @return the average number of unique terms\n   * @throws java.io.IOException If there is a low-level I/O error\n   */\n  private double getTextTermFreqForClass(Term term, String fieldName) throws IOException {\n    double avgNumberOfUniqueTerms;\n    Terms terms = MultiFields.getTerms(indexReader, fieldName);\n    long numPostings = terms.getSumDocFreq(); // number of term/doc pairs\n    avgNumberOfUniqueTerms = numPostings / (double) terms.getDocCount(); // avg # of unique terms per doc\n    int docsWithC = indexReader.docFreq(term);\n    return avgNumberOfUniqueTerms * docsWithC; // avg # of unique terms in text fields per doc * # docs with c\n  }\n\n","sourceOld":"  /**\n   * Returns the average number of unique terms times the number of docs belonging to the input class\n   *\n   * @param  term the class term\n   * @return the average number of unique terms\n   * @throws java.io.IOException If there is a low-level I/O error\n   */\n  private double getTextTermFreqForClass(Term term, String fieldName) throws IOException {\n    double avgNumberOfUniqueTerms;\n    Terms terms = MultiFields.getTerms(leafReader, fieldName);\n    long numPostings = terms.getSumDocFreq(); // number of term/doc pairs\n    avgNumberOfUniqueTerms = numPostings / (double) terms.getDocCount(); // avg # of unique terms per doc\n    int docsWithC = leafReader.docFreq(term);\n    return avgNumberOfUniqueTerms * docsWithC; // avg # of unique terms in text fields per doc * # docs with c\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/document/SimpleNaiveBayesDocumentClassifier#getTextTermFreqForClass(Term,String).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/document/SimpleNaiveBayesDocumentClassifier#getTextTermFreqForClass(Term,String).mjava","sourceNew":"  /**\n   * Returns the average number of unique terms times the number of docs belonging to the input class\n   *\n   * @param  term the class term\n   * @return the average number of unique terms\n   * @throws java.io.IOException If there is a low-level I/O error\n   */\n  private double getTextTermFreqForClass(Term term, String fieldName) throws IOException {\n    double avgNumberOfUniqueTerms;\n    Terms terms = MultiTerms.getTerms(indexReader, fieldName);\n    long numPostings = terms.getSumDocFreq(); // number of term/doc pairs\n    avgNumberOfUniqueTerms = numPostings / (double) terms.getDocCount(); // avg # of unique terms per doc\n    int docsWithC = indexReader.docFreq(term);\n    return avgNumberOfUniqueTerms * docsWithC; // avg # of unique terms in text fields per doc * # docs with c\n  }\n\n","sourceOld":"  /**\n   * Returns the average number of unique terms times the number of docs belonging to the input class\n   *\n   * @param  term the class term\n   * @return the average number of unique terms\n   * @throws java.io.IOException If there is a low-level I/O error\n   */\n  private double getTextTermFreqForClass(Term term, String fieldName) throws IOException {\n    double avgNumberOfUniqueTerms;\n    Terms terms = MultiFields.getTerms(indexReader, fieldName);\n    long numPostings = terms.getSumDocFreq(); // number of term/doc pairs\n    avgNumberOfUniqueTerms = numPostings / (double) terms.getDocCount(); // avg # of unique terms per doc\n    int docsWithC = indexReader.docFreq(term);\n    return avgNumberOfUniqueTerms * docsWithC; // avg # of unique terms in text fields per doc * # docs with c\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"444d4b906d0e3398f87d6a5c4967c508f11a7f0b":["38b5bd3ae837751f57f363e9a41b833794222814"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"38b5bd3ae837751f57f363e9a41b833794222814":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["444d4b906d0e3398f87d6a5c4967c508f11a7f0b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["38b5bd3ae837751f57f363e9a41b833794222814","444d4b906d0e3398f87d6a5c4967c508f11a7f0b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"]},"commit2Childs":{"444d4b906d0e3398f87d6a5c4967c508f11a7f0b":["04e775de416dd2d8067b10db1c8af975a1d5017e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38b5bd3ae837751f57f363e9a41b833794222814"],"38b5bd3ae837751f57f363e9a41b833794222814":["444d4b906d0e3398f87d6a5c4967c508f11a7f0b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}