{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene41/TestLucene41PostingsFormat3#test().mjava","commits":[{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":2,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene41/TestLucene41PostingsFormat3#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#test().mjava","sourceNew":"  // creates 8 fields with different options and does \"duels\" of fields against each other\n  public void test() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new Analyzer(Analyzer.PER_FIELD_REUSE_STRATEGY) {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer();\n        if (fieldName.contains(\"payloadsFixed\")) {\n          TokenFilter filter = new MockFixedLengthPayloadFilter(new Random(0), tokenizer, 1);\n          return new TokenStreamComponents(tokenizer, filter);\n        } else if (fieldName.contains(\"payloadsVariable\")) {\n          TokenFilter filter = new MockVariableLengthPayloadFilter(new Random(0), tokenizer);\n          return new TokenStreamComponents(tokenizer, filter);\n        } else {\n          return new TokenStreamComponents(tokenizer);\n        }\n      }\n    };\n    IndexWriterConfig iwc = newIndexWriterConfig(analyzer);\n    iwc.setCodec(new Lucene41RWCodec());\n    // TODO we could actually add more fields implemented with different PFs\n    // or, just put this test into the usual rotation?\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    FieldType docsOnlyType = new FieldType(TextField.TYPE_NOT_STORED);\n    // turn this on for a cross-check\n    docsOnlyType.setStoreTermVectors(true);\n    docsOnlyType.setIndexOptions(IndexOptions.DOCS_ONLY);\n    \n    FieldType docsAndFreqsType = new FieldType(TextField.TYPE_NOT_STORED);\n    // turn this on for a cross-check\n    docsAndFreqsType.setStoreTermVectors(true);\n    docsAndFreqsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    FieldType positionsType = new FieldType(TextField.TYPE_NOT_STORED);\n    // turn these on for a cross-check\n    positionsType.setStoreTermVectors(true);\n    positionsType.setStoreTermVectorPositions(true);\n    positionsType.setStoreTermVectorOffsets(true);\n    positionsType.setStoreTermVectorPayloads(true);\n    FieldType offsetsType = new FieldType(positionsType);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Field field1 = new Field(\"field1docs\", \"\", docsOnlyType);\n    Field field2 = new Field(\"field2freqs\", \"\", docsAndFreqsType);\n    Field field3 = new Field(\"field3positions\", \"\", positionsType);\n    Field field4 = new Field(\"field4offsets\", \"\", offsetsType);\n    Field field5 = new Field(\"field5payloadsFixed\", \"\", positionsType);\n    Field field6 = new Field(\"field6payloadsVariable\", \"\", positionsType);\n    Field field7 = new Field(\"field7payloadsFixedOffsets\", \"\", offsetsType);\n    Field field8 = new Field(\"field8payloadsVariableOffsets\", \"\", offsetsType);\n    doc.add(field1);\n    doc.add(field2);\n    doc.add(field3);\n    doc.add(field4);\n    doc.add(field5);\n    doc.add(field6);\n    doc.add(field7);\n    doc.add(field8);\n    for (int i = 0; i < MAXDOC; i++) {\n      String stringValue = Integer.toString(i) + \" verycommon \" + English.intToEnglish(i).replace('-', ' ') + \" \" + TestUtil.randomSimpleString(random());\n      field1.setStringValue(stringValue);\n      field2.setStringValue(stringValue);\n      field3.setStringValue(stringValue);\n      field4.setStringValue(stringValue);\n      field5.setStringValue(stringValue);\n      field6.setStringValue(stringValue);\n      field7.setStringValue(stringValue);\n      field8.setStringValue(stringValue);\n      iw.addDocument(doc);\n    }\n    iw.close();\n    verify(dir);\n    TestUtil.checkIndex(dir); // for some extra coverage, checkIndex before we forceMerge\n    iwc = newIndexWriterConfig(analyzer);\n    iwc.setCodec(new Lucene41RWCodec());\n    iwc.setOpenMode(OpenMode.APPEND);\n    IndexWriter iw2 = new IndexWriter(dir, iwc);\n    iw2.forceMerge(1);\n    iw2.close();\n    verify(dir);\n    dir.close();\n  }\n\n","sourceOld":"  // creates 8 fields with different options and does \"duels\" of fields against each other\n  public void test() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new Analyzer(Analyzer.PER_FIELD_REUSE_STRATEGY) {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer();\n        if (fieldName.contains(\"payloadsFixed\")) {\n          TokenFilter filter = new MockFixedLengthPayloadFilter(new Random(0), tokenizer, 1);\n          return new TokenStreamComponents(tokenizer, filter);\n        } else if (fieldName.contains(\"payloadsVariable\")) {\n          TokenFilter filter = new MockVariableLengthPayloadFilter(new Random(0), tokenizer);\n          return new TokenStreamComponents(tokenizer, filter);\n        } else {\n          return new TokenStreamComponents(tokenizer);\n        }\n      }\n    };\n    IndexWriterConfig iwc = newIndexWriterConfig(analyzer);\n    iwc.setCodec(TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat()));\n    // TODO we could actually add more fields implemented with different PFs\n    // or, just put this test into the usual rotation?\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    FieldType docsOnlyType = new FieldType(TextField.TYPE_NOT_STORED);\n    // turn this on for a cross-check\n    docsOnlyType.setStoreTermVectors(true);\n    docsOnlyType.setIndexOptions(IndexOptions.DOCS_ONLY);\n    \n    FieldType docsAndFreqsType = new FieldType(TextField.TYPE_NOT_STORED);\n    // turn this on for a cross-check\n    docsAndFreqsType.setStoreTermVectors(true);\n    docsAndFreqsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    FieldType positionsType = new FieldType(TextField.TYPE_NOT_STORED);\n    // turn these on for a cross-check\n    positionsType.setStoreTermVectors(true);\n    positionsType.setStoreTermVectorPositions(true);\n    positionsType.setStoreTermVectorOffsets(true);\n    positionsType.setStoreTermVectorPayloads(true);\n    FieldType offsetsType = new FieldType(positionsType);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Field field1 = new Field(\"field1docs\", \"\", docsOnlyType);\n    Field field2 = new Field(\"field2freqs\", \"\", docsAndFreqsType);\n    Field field3 = new Field(\"field3positions\", \"\", positionsType);\n    Field field4 = new Field(\"field4offsets\", \"\", offsetsType);\n    Field field5 = new Field(\"field5payloadsFixed\", \"\", positionsType);\n    Field field6 = new Field(\"field6payloadsVariable\", \"\", positionsType);\n    Field field7 = new Field(\"field7payloadsFixedOffsets\", \"\", offsetsType);\n    Field field8 = new Field(\"field8payloadsVariableOffsets\", \"\", offsetsType);\n    doc.add(field1);\n    doc.add(field2);\n    doc.add(field3);\n    doc.add(field4);\n    doc.add(field5);\n    doc.add(field6);\n    doc.add(field7);\n    doc.add(field8);\n    for (int i = 0; i < MAXDOC; i++) {\n      String stringValue = Integer.toString(i) + \" verycommon \" + English.intToEnglish(i).replace('-', ' ') + \" \" + TestUtil.randomSimpleString(random());\n      field1.setStringValue(stringValue);\n      field2.setStringValue(stringValue);\n      field3.setStringValue(stringValue);\n      field4.setStringValue(stringValue);\n      field5.setStringValue(stringValue);\n      field6.setStringValue(stringValue);\n      field7.setStringValue(stringValue);\n      field8.setStringValue(stringValue);\n      iw.addDocument(doc);\n    }\n    iw.close();\n    verify(dir);\n    TestUtil.checkIndex(dir); // for some extra coverage, checkIndex before we forceMerge\n    iwc = newIndexWriterConfig(analyzer);\n    iwc.setCodec(TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat()));\n    iwc.setOpenMode(OpenMode.APPEND);\n    IndexWriter iw2 = new IndexWriter(dir, iwc);\n    iw2.forceMerge(1);\n    iw2.close();\n    verify(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":2,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene41/TestLucene41PostingsFormat3#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#test().mjava","sourceNew":"  // creates 8 fields with different options and does \"duels\" of fields against each other\n  public void test() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new Analyzer(Analyzer.PER_FIELD_REUSE_STRATEGY) {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer();\n        if (fieldName.contains(\"payloadsFixed\")) {\n          TokenFilter filter = new MockFixedLengthPayloadFilter(new Random(0), tokenizer, 1);\n          return new TokenStreamComponents(tokenizer, filter);\n        } else if (fieldName.contains(\"payloadsVariable\")) {\n          TokenFilter filter = new MockVariableLengthPayloadFilter(new Random(0), tokenizer);\n          return new TokenStreamComponents(tokenizer, filter);\n        } else {\n          return new TokenStreamComponents(tokenizer);\n        }\n      }\n    };\n    IndexWriterConfig iwc = newIndexWriterConfig(analyzer);\n    iwc.setCodec(new Lucene41RWCodec());\n    // TODO we could actually add more fields implemented with different PFs\n    // or, just put this test into the usual rotation?\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    FieldType docsOnlyType = new FieldType(TextField.TYPE_NOT_STORED);\n    // turn this on for a cross-check\n    docsOnlyType.setStoreTermVectors(true);\n    docsOnlyType.setIndexOptions(IndexOptions.DOCS_ONLY);\n    \n    FieldType docsAndFreqsType = new FieldType(TextField.TYPE_NOT_STORED);\n    // turn this on for a cross-check\n    docsAndFreqsType.setStoreTermVectors(true);\n    docsAndFreqsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    FieldType positionsType = new FieldType(TextField.TYPE_NOT_STORED);\n    // turn these on for a cross-check\n    positionsType.setStoreTermVectors(true);\n    positionsType.setStoreTermVectorPositions(true);\n    positionsType.setStoreTermVectorOffsets(true);\n    positionsType.setStoreTermVectorPayloads(true);\n    FieldType offsetsType = new FieldType(positionsType);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Field field1 = new Field(\"field1docs\", \"\", docsOnlyType);\n    Field field2 = new Field(\"field2freqs\", \"\", docsAndFreqsType);\n    Field field3 = new Field(\"field3positions\", \"\", positionsType);\n    Field field4 = new Field(\"field4offsets\", \"\", offsetsType);\n    Field field5 = new Field(\"field5payloadsFixed\", \"\", positionsType);\n    Field field6 = new Field(\"field6payloadsVariable\", \"\", positionsType);\n    Field field7 = new Field(\"field7payloadsFixedOffsets\", \"\", offsetsType);\n    Field field8 = new Field(\"field8payloadsVariableOffsets\", \"\", offsetsType);\n    doc.add(field1);\n    doc.add(field2);\n    doc.add(field3);\n    doc.add(field4);\n    doc.add(field5);\n    doc.add(field6);\n    doc.add(field7);\n    doc.add(field8);\n    for (int i = 0; i < MAXDOC; i++) {\n      String stringValue = Integer.toString(i) + \" verycommon \" + English.intToEnglish(i).replace('-', ' ') + \" \" + TestUtil.randomSimpleString(random());\n      field1.setStringValue(stringValue);\n      field2.setStringValue(stringValue);\n      field3.setStringValue(stringValue);\n      field4.setStringValue(stringValue);\n      field5.setStringValue(stringValue);\n      field6.setStringValue(stringValue);\n      field7.setStringValue(stringValue);\n      field8.setStringValue(stringValue);\n      iw.addDocument(doc);\n    }\n    iw.close();\n    verify(dir);\n    TestUtil.checkIndex(dir); // for some extra coverage, checkIndex before we forceMerge\n    iwc = newIndexWriterConfig(analyzer);\n    iwc.setCodec(new Lucene41RWCodec());\n    iwc.setOpenMode(OpenMode.APPEND);\n    IndexWriter iw2 = new IndexWriter(dir, iwc);\n    iw2.forceMerge(1);\n    iw2.close();\n    verify(dir);\n    dir.close();\n  }\n\n","sourceOld":"  // creates 8 fields with different options and does \"duels\" of fields against each other\n  public void test() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new Analyzer(Analyzer.PER_FIELD_REUSE_STRATEGY) {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer();\n        if (fieldName.contains(\"payloadsFixed\")) {\n          TokenFilter filter = new MockFixedLengthPayloadFilter(new Random(0), tokenizer, 1);\n          return new TokenStreamComponents(tokenizer, filter);\n        } else if (fieldName.contains(\"payloadsVariable\")) {\n          TokenFilter filter = new MockVariableLengthPayloadFilter(new Random(0), tokenizer);\n          return new TokenStreamComponents(tokenizer, filter);\n        } else {\n          return new TokenStreamComponents(tokenizer);\n        }\n      }\n    };\n    IndexWriterConfig iwc = newIndexWriterConfig(analyzer);\n    iwc.setCodec(TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat()));\n    // TODO we could actually add more fields implemented with different PFs\n    // or, just put this test into the usual rotation?\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    FieldType docsOnlyType = new FieldType(TextField.TYPE_NOT_STORED);\n    // turn this on for a cross-check\n    docsOnlyType.setStoreTermVectors(true);\n    docsOnlyType.setIndexOptions(IndexOptions.DOCS_ONLY);\n    \n    FieldType docsAndFreqsType = new FieldType(TextField.TYPE_NOT_STORED);\n    // turn this on for a cross-check\n    docsAndFreqsType.setStoreTermVectors(true);\n    docsAndFreqsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    FieldType positionsType = new FieldType(TextField.TYPE_NOT_STORED);\n    // turn these on for a cross-check\n    positionsType.setStoreTermVectors(true);\n    positionsType.setStoreTermVectorPositions(true);\n    positionsType.setStoreTermVectorOffsets(true);\n    positionsType.setStoreTermVectorPayloads(true);\n    FieldType offsetsType = new FieldType(positionsType);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Field field1 = new Field(\"field1docs\", \"\", docsOnlyType);\n    Field field2 = new Field(\"field2freqs\", \"\", docsAndFreqsType);\n    Field field3 = new Field(\"field3positions\", \"\", positionsType);\n    Field field4 = new Field(\"field4offsets\", \"\", offsetsType);\n    Field field5 = new Field(\"field5payloadsFixed\", \"\", positionsType);\n    Field field6 = new Field(\"field6payloadsVariable\", \"\", positionsType);\n    Field field7 = new Field(\"field7payloadsFixedOffsets\", \"\", offsetsType);\n    Field field8 = new Field(\"field8payloadsVariableOffsets\", \"\", offsetsType);\n    doc.add(field1);\n    doc.add(field2);\n    doc.add(field3);\n    doc.add(field4);\n    doc.add(field5);\n    doc.add(field6);\n    doc.add(field7);\n    doc.add(field8);\n    for (int i = 0; i < MAXDOC; i++) {\n      String stringValue = Integer.toString(i) + \" verycommon \" + English.intToEnglish(i).replace('-', ' ') + \" \" + TestUtil.randomSimpleString(random());\n      field1.setStringValue(stringValue);\n      field2.setStringValue(stringValue);\n      field3.setStringValue(stringValue);\n      field4.setStringValue(stringValue);\n      field5.setStringValue(stringValue);\n      field6.setStringValue(stringValue);\n      field7.setStringValue(stringValue);\n      field8.setStringValue(stringValue);\n      iw.addDocument(doc);\n    }\n    iw.close();\n    verify(dir);\n    TestUtil.checkIndex(dir); // for some extra coverage, checkIndex before we forceMerge\n    iwc = newIndexWriterConfig(analyzer);\n    iwc.setCodec(TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat()));\n    iwc.setOpenMode(OpenMode.APPEND);\n    IndexWriter iw2 = new IndexWriter(dir, iwc);\n    iw2.forceMerge(1);\n    iw2.close();\n    verify(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene41/TestLucene41PostingsFormat3#test().mjava","sourceNew":null,"sourceOld":"  // creates 8 fields with different options and does \"duels\" of fields against each other\n  public void test() throws Exception {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new Analyzer(Analyzer.PER_FIELD_REUSE_STRATEGY) {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer();\n        if (fieldName.contains(\"payloadsFixed\")) {\n          TokenFilter filter = new MockFixedLengthPayloadFilter(new Random(0), tokenizer, 1);\n          return new TokenStreamComponents(tokenizer, filter);\n        } else if (fieldName.contains(\"payloadsVariable\")) {\n          TokenFilter filter = new MockVariableLengthPayloadFilter(new Random(0), tokenizer);\n          return new TokenStreamComponents(tokenizer, filter);\n        } else {\n          return new TokenStreamComponents(tokenizer);\n        }\n      }\n    };\n    IndexWriterConfig iwc = newIndexWriterConfig(analyzer);\n    iwc.setCodec(new Lucene41RWCodec());\n    // TODO we could actually add more fields implemented with different PFs\n    // or, just put this test into the usual rotation?\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    FieldType docsOnlyType = new FieldType(TextField.TYPE_NOT_STORED);\n    // turn this on for a cross-check\n    docsOnlyType.setStoreTermVectors(true);\n    docsOnlyType.setIndexOptions(IndexOptions.DOCS_ONLY);\n    \n    FieldType docsAndFreqsType = new FieldType(TextField.TYPE_NOT_STORED);\n    // turn this on for a cross-check\n    docsAndFreqsType.setStoreTermVectors(true);\n    docsAndFreqsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    FieldType positionsType = new FieldType(TextField.TYPE_NOT_STORED);\n    // turn these on for a cross-check\n    positionsType.setStoreTermVectors(true);\n    positionsType.setStoreTermVectorPositions(true);\n    positionsType.setStoreTermVectorOffsets(true);\n    positionsType.setStoreTermVectorPayloads(true);\n    FieldType offsetsType = new FieldType(positionsType);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Field field1 = new Field(\"field1docs\", \"\", docsOnlyType);\n    Field field2 = new Field(\"field2freqs\", \"\", docsAndFreqsType);\n    Field field3 = new Field(\"field3positions\", \"\", positionsType);\n    Field field4 = new Field(\"field4offsets\", \"\", offsetsType);\n    Field field5 = new Field(\"field5payloadsFixed\", \"\", positionsType);\n    Field field6 = new Field(\"field6payloadsVariable\", \"\", positionsType);\n    Field field7 = new Field(\"field7payloadsFixedOffsets\", \"\", offsetsType);\n    Field field8 = new Field(\"field8payloadsVariableOffsets\", \"\", offsetsType);\n    doc.add(field1);\n    doc.add(field2);\n    doc.add(field3);\n    doc.add(field4);\n    doc.add(field5);\n    doc.add(field6);\n    doc.add(field7);\n    doc.add(field8);\n    for (int i = 0; i < MAXDOC; i++) {\n      String stringValue = Integer.toString(i) + \" verycommon \" + English.intToEnglish(i).replace('-', ' ') + \" \" + TestUtil.randomSimpleString(random());\n      field1.setStringValue(stringValue);\n      field2.setStringValue(stringValue);\n      field3.setStringValue(stringValue);\n      field4.setStringValue(stringValue);\n      field5.setStringValue(stringValue);\n      field6.setStringValue(stringValue);\n      field7.setStringValue(stringValue);\n      field8.setStringValue(stringValue);\n      iw.addDocument(doc);\n    }\n    iw.close();\n    verify(dir);\n    TestUtil.checkIndex(dir); // for some extra coverage, checkIndex before we forceMerge\n    iwc = newIndexWriterConfig(analyzer);\n    iwc.setCodec(new Lucene41RWCodec());\n    iwc.setOpenMode(OpenMode.APPEND);\n    IndexWriter iw2 = new IndexWriter(dir, iwc);\n    iw2.forceMerge(1);\n    iw2.close();\n    verify(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99eb4a732d1a908f4636ace52928876136bf1896":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","99eb4a732d1a908f4636ace52928876136bf1896"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}