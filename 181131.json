{"path":"src/java/org/apache/lucene/search/PhraseScorer#score().mjava","commits":[{"id":"15c469602973ef1a33c9a07367a380d278ffab20","date":1074206555,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseScorer#score().mjava","pathOld":"/dev/null","sourceNew":"  public float score() throws IOException {\n    //System.out.println(\"scoring \" + first.doc);\n    float raw = getSimilarity().tf(freq) * value; // raw score\n    return raw * Similarity.decodeNorm(norms[first.doc]); // normalize\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a","date":1240951127,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseScorer#score().mjava","pathOld":"src/java/org/apache/lucene/search/PhraseScorer#score().mjava","sourceNew":"  public float score() throws IOException {\n    //System.out.println(\"scoring \" + first.doc);\n    float raw = getSimilarity().tf(freq) * value; // raw score\n    return norms == null ? raw : raw * Similarity.decodeNorm(norms[first.doc]); // normalize\n  }\n\n","sourceOld":"  public float score() throws IOException {\n    //System.out.println(\"scoring \" + first.doc);\n    float raw = getSimilarity().tf(freq) * value; // raw score\n    return raw * Similarity.decodeNorm(norms[first.doc]); // normalize\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"486cfd5a3f7481938475c113415d896f7a74a4a9","date":1256682581,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseScorer#score().mjava","pathOld":"src/java/org/apache/lucene/search/PhraseScorer#score().mjava","sourceNew":"  @Override\n  public float score() throws IOException {\n    //System.out.println(\"scoring \" + first.doc);\n    float raw = getSimilarity().tf(freq) * value; // raw score\n    return norms == null ? raw : raw * Similarity.decodeNorm(norms[first.doc]); // normalize\n  }\n\n","sourceOld":"  public float score() throws IOException {\n    //System.out.println(\"scoring \" + first.doc);\n    float raw = getSimilarity().tf(freq) * value; // raw score\n    return norms == null ? raw : raw * Similarity.decodeNorm(norms[first.doc]); // normalize\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0eb5b0b5b98c777dad412afbfb347d2c0889327","date":1259094367,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseScorer#score().mjava","pathOld":"src/java/org/apache/lucene/search/PhraseScorer#score().mjava","sourceNew":"  @Override\n  public float score() throws IOException {\n    //System.out.println(\"scoring \" + first.doc);\n    float raw = getSimilarity().tf(freq) * value; // raw score\n    return norms == null ? raw : raw * getSimilarity().decodeNormValue(norms[first.doc]); // normalize\n  }\n\n","sourceOld":"  @Override\n  public float score() throws IOException {\n    //System.out.println(\"scoring \" + first.doc);\n    float raw = getSimilarity().tf(freq) * value; // raw score\n    return norms == null ? raw : raw * Similarity.decodeNorm(norms[first.doc]); // normalize\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseScorer#score().mjava","pathOld":"src/java/org/apache/lucene/search/PhraseScorer#score().mjava","sourceNew":"  @Override\n  public float score() throws IOException {\n    //System.out.println(\"scoring \" + first.doc);\n    float raw = getSimilarity().tf(freq) * value; // raw score\n    return norms == null ? raw : raw * getSimilarity().decodeNormValue(norms[first.doc]); // normalize\n  }\n\n","sourceOld":"  @Override\n  public float score() throws IOException {\n    //System.out.println(\"scoring \" + first.doc);\n    float raw = getSimilarity().tf(freq) * value; // raw score\n    return norms == null ? raw : raw * getSimilarity().decodeNormValue(norms[first.doc]); // normalize\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"486cfd5a3f7481938475c113415d896f7a74a4a9":["20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a"],"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a":["15c469602973ef1a33c9a07367a380d278ffab20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b0eb5b0b5b98c777dad412afbfb347d2c0889327":["486cfd5a3f7481938475c113415d896f7a74a4a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b0eb5b0b5b98c777dad412afbfb347d2c0889327"],"15c469602973ef1a33c9a07367a380d278ffab20":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"486cfd5a3f7481938475c113415d896f7a74a4a9":["b0eb5b0b5b98c777dad412afbfb347d2c0889327"],"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a":["486cfd5a3f7481938475c113415d896f7a74a4a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["15c469602973ef1a33c9a07367a380d278ffab20"],"b0eb5b0b5b98c777dad412afbfb347d2c0889327":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"15c469602973ef1a33c9a07367a380d278ffab20":["20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}