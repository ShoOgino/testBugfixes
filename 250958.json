{"path":"lucene/queries/src/test/org/apache/lucene/queries/TermsQueryTest#testIsConsideredCostlyByQueryCache().mjava","commits":[{"id":"e851eb05e8d5b14195ca22a2542534c4720d8622","date":1456740177,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsQueryTest#testIsConsideredCostlyByQueryCache().mjava","pathOld":"/dev/null","sourceNew":"  public void testIsConsideredCostlyByQueryCache() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    for (int i = 0; i < 10000; ++i) {\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    DirectoryReader reader = DirectoryReader.open(w);\n    w.close();\n    TermsQuery query = new TermsQuery(new Term(\"foo\", \"bar\"), new Term(\"foo\", \"baz\"));\n    UsageTrackingQueryCachingPolicy policy = new UsageTrackingQueryCachingPolicy();\n    assertFalse(policy.shouldCache(query, getOnlySegmentReader(reader).getContext()));\n    policy.onUse(query);\n    policy.onUse(query);\n    // cached after two uses\n    assertTrue(policy.shouldCache(query, getOnlySegmentReader(reader).getContext()));\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsQueryTest#testIsConsideredCostlyByQueryCache().mjava","pathOld":"/dev/null","sourceNew":"  public void testIsConsideredCostlyByQueryCache() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    for (int i = 0; i < 10000; ++i) {\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    DirectoryReader reader = DirectoryReader.open(w);\n    w.close();\n    TermsQuery query = new TermsQuery(new Term(\"foo\", \"bar\"), new Term(\"foo\", \"baz\"));\n    UsageTrackingQueryCachingPolicy policy = new UsageTrackingQueryCachingPolicy();\n    assertFalse(policy.shouldCache(query, getOnlySegmentReader(reader).getContext()));\n    policy.onUse(query);\n    policy.onUse(query);\n    // cached after two uses\n    assertTrue(policy.shouldCache(query, getOnlySegmentReader(reader).getContext()));\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsQueryTest#testIsConsideredCostlyByQueryCache().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsQueryTest#testIsConsideredCostlyByQueryCache().mjava","sourceNew":"  public void testIsConsideredCostlyByQueryCache() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    for (int i = 0; i < 10000; ++i) {\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    DirectoryReader reader = DirectoryReader.open(w);\n    w.close();\n    TermsQuery query = new TermsQuery(new Term(\"foo\", \"bar\"), new Term(\"foo\", \"baz\"));\n    UsageTrackingQueryCachingPolicy policy = new UsageTrackingQueryCachingPolicy();\n    assertFalse(policy.shouldCache(query, getOnlyLeafReader(reader).getContext()));\n    policy.onUse(query);\n    policy.onUse(query);\n    // cached after two uses\n    assertTrue(policy.shouldCache(query, getOnlyLeafReader(reader).getContext()));\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsConsideredCostlyByQueryCache() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    for (int i = 0; i < 10000; ++i) {\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    DirectoryReader reader = DirectoryReader.open(w);\n    w.close();\n    TermsQuery query = new TermsQuery(new Term(\"foo\", \"bar\"), new Term(\"foo\", \"baz\"));\n    UsageTrackingQueryCachingPolicy policy = new UsageTrackingQueryCachingPolicy();\n    assertFalse(policy.shouldCache(query, getOnlySegmentReader(reader).getContext()));\n    policy.onUse(query);\n    policy.onUse(query);\n    // cached after two uses\n    assertTrue(policy.shouldCache(query, getOnlySegmentReader(reader).getContext()));\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":["e851eb05e8d5b14195ca22a2542534c4720d8622"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25f40dbcd244dc82447a23719db34376cdcc9cfe","date":1461323366,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsQueryTest#testIsConsideredCostlyByQueryCache().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsQueryTest#testIsConsideredCostlyByQueryCache().mjava","sourceNew":"  public void testIsConsideredCostlyByQueryCache() throws IOException {\n    TermsQuery query = new TermsQuery(new Term(\"foo\", \"bar\"), new Term(\"foo\", \"baz\"));\n    UsageTrackingQueryCachingPolicy policy = new UsageTrackingQueryCachingPolicy();\n    assertFalse(policy.shouldCache(query));\n    policy.onUse(query);\n    policy.onUse(query);\n    // cached after two uses\n    assertTrue(policy.shouldCache(query));\n  }\n\n","sourceOld":"  public void testIsConsideredCostlyByQueryCache() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    for (int i = 0; i < 10000; ++i) {\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    DirectoryReader reader = DirectoryReader.open(w);\n    w.close();\n    TermsQuery query = new TermsQuery(new Term(\"foo\", \"bar\"), new Term(\"foo\", \"baz\"));\n    UsageTrackingQueryCachingPolicy policy = new UsageTrackingQueryCachingPolicy();\n    assertFalse(policy.shouldCache(query, getOnlyLeafReader(reader).getContext()));\n    policy.onUse(query);\n    policy.onUse(query);\n    // cached after two uses\n    assertTrue(policy.shouldCache(query, getOnlyLeafReader(reader).getContext()));\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsQueryTest#testIsConsideredCostlyByQueryCache().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsQueryTest#testIsConsideredCostlyByQueryCache().mjava","sourceNew":"  public void testIsConsideredCostlyByQueryCache() throws IOException {\n    TermsQuery query = new TermsQuery(new Term(\"foo\", \"bar\"), new Term(\"foo\", \"baz\"));\n    UsageTrackingQueryCachingPolicy policy = new UsageTrackingQueryCachingPolicy();\n    assertFalse(policy.shouldCache(query));\n    policy.onUse(query);\n    policy.onUse(query);\n    // cached after two uses\n    assertTrue(policy.shouldCache(query));\n  }\n\n","sourceOld":"  public void testIsConsideredCostlyByQueryCache() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Document doc = new Document();\n    for (int i = 0; i < 10000; ++i) {\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    DirectoryReader reader = DirectoryReader.open(w);\n    w.close();\n    TermsQuery query = new TermsQuery(new Term(\"foo\", \"bar\"), new Term(\"foo\", \"baz\"));\n    UsageTrackingQueryCachingPolicy policy = new UsageTrackingQueryCachingPolicy();\n    assertFalse(policy.shouldCache(query, getOnlyLeafReader(reader).getContext()));\n    policy.onUse(query);\n    policy.onUse(query);\n    // cached after two uses\n    assertTrue(policy.shouldCache(query, getOnlyLeafReader(reader).getContext()));\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d73510b39df24d6b65de48e56f8dccb136b9d01","date":1483971905,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#testIsConsideredCostlyByQueryCache().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsQueryTest#testIsConsideredCostlyByQueryCache().mjava","sourceNew":"  public void testIsConsideredCostlyByQueryCache() throws IOException {\n    TermInSetQuery query = new TermInSetQuery(new Term(\"foo\", \"bar\"), new Term(\"foo\", \"baz\"));\n    UsageTrackingQueryCachingPolicy policy = new UsageTrackingQueryCachingPolicy();\n    assertFalse(policy.shouldCache(query));\n    policy.onUse(query);\n    policy.onUse(query);\n    // cached after two uses\n    assertTrue(policy.shouldCache(query));\n  }\n\n","sourceOld":"  public void testIsConsideredCostlyByQueryCache() throws IOException {\n    TermsQuery query = new TermsQuery(new Term(\"foo\", \"bar\"), new Term(\"foo\", \"baz\"));\n    UsageTrackingQueryCachingPolicy policy = new UsageTrackingQueryCachingPolicy();\n    assertFalse(policy.shouldCache(query));\n    policy.onUse(query);\n    policy.onUse(query);\n    // cached after two uses\n    assertTrue(policy.shouldCache(query));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#testIsConsideredCostlyByQueryCache().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsQueryTest#testIsConsideredCostlyByQueryCache().mjava","sourceNew":"  public void testIsConsideredCostlyByQueryCache() throws IOException {\n    TermInSetQuery query = new TermInSetQuery(new Term(\"foo\", \"bar\"), new Term(\"foo\", \"baz\"));\n    UsageTrackingQueryCachingPolicy policy = new UsageTrackingQueryCachingPolicy();\n    assertFalse(policy.shouldCache(query));\n    policy.onUse(query);\n    policy.onUse(query);\n    // cached after two uses\n    assertTrue(policy.shouldCache(query));\n  }\n\n","sourceOld":"  public void testIsConsideredCostlyByQueryCache() throws IOException {\n    TermsQuery query = new TermsQuery(new Term(\"foo\", \"bar\"), new Term(\"foo\", \"baz\"));\n    UsageTrackingQueryCachingPolicy policy = new UsageTrackingQueryCachingPolicy();\n    assertFalse(policy.shouldCache(query));\n    policy.onUse(query);\n    policy.onUse(query);\n    // cached after two uses\n    assertTrue(policy.shouldCache(query));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["af2638813028b254a88b418ebeafb541afb49653"],"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e851eb05e8d5b14195ca22a2542534c4720d8622"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","25f40dbcd244dc82447a23719db34376cdcc9cfe"],"8d73510b39df24d6b65de48e56f8dccb136b9d01":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"25f40dbcd244dc82447a23719db34376cdcc9cfe":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","8d73510b39df24d6b65de48e56f8dccb136b9d01"],"e851eb05e8d5b14195ca22a2542534c4720d8622":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8d73510b39df24d6b65de48e56f8dccb136b9d01"]},"commit2Childs":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","25f40dbcd244dc82447a23719db34376cdcc9cfe"],"af2638813028b254a88b418ebeafb541afb49653":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","e851eb05e8d5b14195ca22a2542534c4720d8622"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["8d73510b39df24d6b65de48e56f8dccb136b9d01","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"8d73510b39df24d6b65de48e56f8dccb136b9d01":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"25f40dbcd244dc82447a23719db34376cdcc9cfe":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"e851eb05e8d5b14195ca22a2542534c4720d8622":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}