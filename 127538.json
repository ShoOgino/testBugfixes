{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/DimensionalRoutedAlias.DraContextualized#dimensionCollectionListView(int,Aliases,Deffered[DimensionalRoutedAlias],String[],boolean).mjava","commits":[{"id":"1eebf1b080530bdd7572c4927fb2bb52334b7a86","date":1563199033,"type":0,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/DimensionalRoutedAlias.DraContextualized#dimensionCollectionListView(int,Aliases,Deffered[DimensionalRoutedAlias],String[],boolean).mjava","pathOld":"/dev/null","sourceNew":"    static List<String> dimensionCollectionListView(int index, Aliases aliases, Deffered<DimensionalRoutedAlias> dra, String[] context, boolean ordered) {\n      List<String> cols = aliases.getCollectionAliasListMap().get(dra.get().name);\n      LinkedHashSet<String> view = new LinkedHashSet<>(cols.size());\n      List<RoutedAlias> dimensions = dra.get().dimensions;\n      for (String col : cols) {\n        Matcher m = SEP_MATCHER.matcher(col);\n        if (!m.find()) {\n          throw new IllegalStateException(\"Invalid Dimensional Routed Alias name:\" + col);\n        }\n        String[] split = SEP_MATCHER.split(col);\n        if (split.length != dimensions.size() + 1) {\n          throw new IllegalStateException(\"Dimension Routed Alias collection with wrong number of dimensions. (\" +\n              col + \") expecting \" + dimensions.stream().map(d ->\n              d.getRoutedAliasType().toString()).collect(Collectors.toList()));\n        }\n        boolean matchesAllHigherDims = index == 0;\n        boolean matchesAllLowerDims =  context == null || index == context.length - 1;\n        if (context != null) {\n          for (int i = 0; i < context.length; i++) {\n            if (i == index) {\n              continue;\n            }\n            String s = split[i+1];\n            String ctx = context[i];\n            if (i <= index) {\n              matchesAllHigherDims |= s.equals(ctx);\n            } else {\n              matchesAllLowerDims |= s.equals(ctx);\n            }\n          }\n        } else {\n          matchesAllHigherDims = true;\n          matchesAllLowerDims = true;\n        }\n        // dimensions with an implicit order need to start from their initial configuration\n        // and count up to maintain order in the alias collection list with respect to that dimension\n        if (matchesAllHigherDims && !ordered || matchesAllHigherDims && matchesAllLowerDims) {\n          view.add(\"\" + getSeparatorPrefix(dimensions.get(index)) + split[index + 1]);\n        }\n      }\n      return new ArrayList<>(view);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1eebf1b080530bdd7572c4927fb2bb52334b7a86"],"1eebf1b080530bdd7572c4927fb2bb52334b7a86":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}