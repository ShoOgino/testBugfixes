{"path":"solr/src/test/org/apache/solr/util/TestUtils#testSplitEscaping().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/util/TestUtils#testSplitEscaping().mjava","pathOld":"/dev/null","sourceNew":"  public static void testSplitEscaping() {\n    List<String> arr = StrUtils.splitSmart(\"\\\\r\\\\n:\\\\t\\\\f\\\\b\", \":\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\r\\n\",arr.get(0));\n    assertEquals(\"\\t\\f\\b\",arr.get(1));\n\n    arr = StrUtils.splitSmart(\"\\\\r\\\\n:\\\\t\\\\f\\\\b\", \":\", false);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\\\r\\\\n\",arr.get(0));\n    assertEquals(\"\\\\t\\\\f\\\\b\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\r\\\\n \\\\t\\\\f\\\\b\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\r\\n\",arr.get(0));\n    assertEquals(\"\\t\\f\\b\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\r\\\\n \\\\t\\\\f\\\\b\", false);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\\\r\\\\n\",arr.get(0));\n    assertEquals(\"\\\\t\\\\f\\\\b\",arr.get(1));\n\n    arr = StrUtils.splitSmart(\"\\\\:foo\\\\::\\\\:bar\\\\:\", \":\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\":foo:\",arr.get(0));\n    assertEquals(\":bar:\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\ foo\\\\  \\\\ bar\\\\ \", true);\n    assertEquals(2,arr.size());\n    assertEquals(\" foo \",arr.get(0));\n    assertEquals(\" bar \",arr.get(1));\n    \n    arr = StrUtils.splitFileNames(\"/h/s,/h/\\\\,s,\");\n    assertEquals(2,arr.size());\n    assertEquals(\"/h/s\",arr.get(0));\n    assertEquals(\"/h/,s\",arr.get(1));\n\n    arr = StrUtils.splitFileNames(\"/h/s\");\n    assertEquals(1,arr.size());\n    assertEquals(\"/h/s\",arr.get(0));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/util/TestUtils#testSplitEscaping().mjava","sourceNew":null,"sourceOld":"  public static void testSplitEscaping() {\n    List<String> arr = StrUtils.splitSmart(\"\\\\r\\\\n:\\\\t\\\\f\\\\b\", \":\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\r\\n\",arr.get(0));\n    assertEquals(\"\\t\\f\\b\",arr.get(1));\n\n    arr = StrUtils.splitSmart(\"\\\\r\\\\n:\\\\t\\\\f\\\\b\", \":\", false);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\\\r\\\\n\",arr.get(0));\n    assertEquals(\"\\\\t\\\\f\\\\b\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\r\\\\n \\\\t\\\\f\\\\b\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\r\\n\",arr.get(0));\n    assertEquals(\"\\t\\f\\b\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\r\\\\n \\\\t\\\\f\\\\b\", false);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\\\r\\\\n\",arr.get(0));\n    assertEquals(\"\\\\t\\\\f\\\\b\",arr.get(1));\n\n    arr = StrUtils.splitSmart(\"\\\\:foo\\\\::\\\\:bar\\\\:\", \":\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\":foo:\",arr.get(0));\n    assertEquals(\":bar:\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\ foo\\\\  \\\\ bar\\\\ \", true);\n    assertEquals(2,arr.size());\n    assertEquals(\" foo \",arr.get(0));\n    assertEquals(\" bar \",arr.get(1));\n    \n    arr = StrUtils.splitFileNames(\"/h/s,/h/\\\\,s,\");\n    assertEquals(2,arr.size());\n    assertEquals(\"/h/s\",arr.get(0));\n    assertEquals(\"/h/,s\",arr.get(1));\n\n    arr = StrUtils.splitFileNames(\"/h/s\");\n    assertEquals(1,arr.size());\n    assertEquals(\"/h/s\",arr.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/util/TestUtils#testSplitEscaping().mjava","pathOld":"src/test/org/apache/solr/util/TestUtils#testSplitEscaping().mjava","sourceNew":"  public static void testSplitEscaping() {\n    List<String> arr = StrUtils.splitSmart(\"\\\\r\\\\n:\\\\t\\\\f\\\\b\", \":\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\r\\n\",arr.get(0));\n    assertEquals(\"\\t\\f\\b\",arr.get(1));\n\n    arr = StrUtils.splitSmart(\"\\\\r\\\\n:\\\\t\\\\f\\\\b\", \":\", false);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\\\r\\\\n\",arr.get(0));\n    assertEquals(\"\\\\t\\\\f\\\\b\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\r\\\\n \\\\t\\\\f\\\\b\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\r\\n\",arr.get(0));\n    assertEquals(\"\\t\\f\\b\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\r\\\\n \\\\t\\\\f\\\\b\", false);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\\\r\\\\n\",arr.get(0));\n    assertEquals(\"\\\\t\\\\f\\\\b\",arr.get(1));\n\n    arr = StrUtils.splitSmart(\"\\\\:foo\\\\::\\\\:bar\\\\:\", \":\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\":foo:\",arr.get(0));\n    assertEquals(\":bar:\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\ foo\\\\  \\\\ bar\\\\ \", true);\n    assertEquals(2,arr.size());\n    assertEquals(\" foo \",arr.get(0));\n    assertEquals(\" bar \",arr.get(1));\n    \n    arr = StrUtils.splitFileNames(\"/h/s,/h/\\\\,s,\");\n    assertEquals(2,arr.size());\n    assertEquals(\"/h/s\",arr.get(0));\n    assertEquals(\"/h/,s\",arr.get(1));\n\n    arr = StrUtils.splitFileNames(\"/h/s\");\n    assertEquals(1,arr.size());\n    assertEquals(\"/h/s\",arr.get(0));\n  }\n\n","sourceOld":"  public static void testSplitEscaping() {\n    List<String> arr = StrUtils.splitSmart(\"\\\\r\\\\n:\\\\t\\\\f\\\\b\", \":\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\r\\n\",arr.get(0));\n    assertEquals(\"\\t\\f\\b\",arr.get(1));\n\n    arr = StrUtils.splitSmart(\"\\\\r\\\\n:\\\\t\\\\f\\\\b\", \":\", false);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\\\r\\\\n\",arr.get(0));\n    assertEquals(\"\\\\t\\\\f\\\\b\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\r\\\\n \\\\t\\\\f\\\\b\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\r\\n\",arr.get(0));\n    assertEquals(\"\\t\\f\\b\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\r\\\\n \\\\t\\\\f\\\\b\", false);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\\\r\\\\n\",arr.get(0));\n    assertEquals(\"\\\\t\\\\f\\\\b\",arr.get(1));\n\n    arr = StrUtils.splitSmart(\"\\\\:foo\\\\::\\\\:bar\\\\:\", \":\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\":foo:\",arr.get(0));\n    assertEquals(\":bar:\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\ foo\\\\  \\\\ bar\\\\ \", true);\n    assertEquals(2,arr.size());\n    assertEquals(\" foo \",arr.get(0));\n    assertEquals(\" bar \",arr.get(1));\n    \n    arr = StrUtils.splitFileNames(\"/h/s,/h/\\\\,s,\");\n    assertEquals(2,arr.size());\n    assertEquals(\"/h/s\",arr.get(0));\n    assertEquals(\"/h/,s\",arr.get(1));\n\n    arr = StrUtils.splitFileNames(\"/h/s\");\n    assertEquals(1,arr.size());\n    assertEquals(\"/h/s\",arr.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/util/TestUtils#testSplitEscaping().mjava","pathOld":"/dev/null","sourceNew":"  public static void testSplitEscaping() {\n    List<String> arr = StrUtils.splitSmart(\"\\\\r\\\\n:\\\\t\\\\f\\\\b\", \":\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\r\\n\",arr.get(0));\n    assertEquals(\"\\t\\f\\b\",arr.get(1));\n\n    arr = StrUtils.splitSmart(\"\\\\r\\\\n:\\\\t\\\\f\\\\b\", \":\", false);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\\\r\\\\n\",arr.get(0));\n    assertEquals(\"\\\\t\\\\f\\\\b\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\r\\\\n \\\\t\\\\f\\\\b\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\r\\n\",arr.get(0));\n    assertEquals(\"\\t\\f\\b\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\r\\\\n \\\\t\\\\f\\\\b\", false);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\\\r\\\\n\",arr.get(0));\n    assertEquals(\"\\\\t\\\\f\\\\b\",arr.get(1));\n\n    arr = StrUtils.splitSmart(\"\\\\:foo\\\\::\\\\:bar\\\\:\", \":\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\":foo:\",arr.get(0));\n    assertEquals(\":bar:\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\ foo\\\\  \\\\ bar\\\\ \", true);\n    assertEquals(2,arr.size());\n    assertEquals(\" foo \",arr.get(0));\n    assertEquals(\" bar \",arr.get(1));\n    \n    arr = StrUtils.splitFileNames(\"/h/s,/h/\\\\,s,\");\n    assertEquals(2,arr.size());\n    assertEquals(\"/h/s\",arr.get(0));\n    assertEquals(\"/h/,s\",arr.get(1));\n\n    arr = StrUtils.splitFileNames(\"/h/s\");\n    assertEquals(1,arr.size());\n    assertEquals(\"/h/s\",arr.get(0));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc67fa3e9a06f885eafab9e853592824796a6b1c","date":1284405862,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/util/TestUtils#testSplitEscaping().mjava","pathOld":"solr/src/test/org/apache/solr/util/TestUtils#testSplitEscaping().mjava","sourceNew":"  public void testSplitEscaping() {\n    List<String> arr = StrUtils.splitSmart(\"\\\\r\\\\n:\\\\t\\\\f\\\\b\", \":\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\r\\n\",arr.get(0));\n    assertEquals(\"\\t\\f\\b\",arr.get(1));\n\n    arr = StrUtils.splitSmart(\"\\\\r\\\\n:\\\\t\\\\f\\\\b\", \":\", false);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\\\r\\\\n\",arr.get(0));\n    assertEquals(\"\\\\t\\\\f\\\\b\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\r\\\\n \\\\t\\\\f\\\\b\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\r\\n\",arr.get(0));\n    assertEquals(\"\\t\\f\\b\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\r\\\\n \\\\t\\\\f\\\\b\", false);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\\\r\\\\n\",arr.get(0));\n    assertEquals(\"\\\\t\\\\f\\\\b\",arr.get(1));\n\n    arr = StrUtils.splitSmart(\"\\\\:foo\\\\::\\\\:bar\\\\:\", \":\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\":foo:\",arr.get(0));\n    assertEquals(\":bar:\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\ foo\\\\  \\\\ bar\\\\ \", true);\n    assertEquals(2,arr.size());\n    assertEquals(\" foo \",arr.get(0));\n    assertEquals(\" bar \",arr.get(1));\n    \n    arr = StrUtils.splitFileNames(\"/h/s,/h/\\\\,s,\");\n    assertEquals(2,arr.size());\n    assertEquals(\"/h/s\",arr.get(0));\n    assertEquals(\"/h/,s\",arr.get(1));\n\n    arr = StrUtils.splitFileNames(\"/h/s\");\n    assertEquals(1,arr.size());\n    assertEquals(\"/h/s\",arr.get(0));\n  }\n\n","sourceOld":"  public static void testSplitEscaping() {\n    List<String> arr = StrUtils.splitSmart(\"\\\\r\\\\n:\\\\t\\\\f\\\\b\", \":\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\r\\n\",arr.get(0));\n    assertEquals(\"\\t\\f\\b\",arr.get(1));\n\n    arr = StrUtils.splitSmart(\"\\\\r\\\\n:\\\\t\\\\f\\\\b\", \":\", false);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\\\r\\\\n\",arr.get(0));\n    assertEquals(\"\\\\t\\\\f\\\\b\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\r\\\\n \\\\t\\\\f\\\\b\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\r\\n\",arr.get(0));\n    assertEquals(\"\\t\\f\\b\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\r\\\\n \\\\t\\\\f\\\\b\", false);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\\\r\\\\n\",arr.get(0));\n    assertEquals(\"\\\\t\\\\f\\\\b\",arr.get(1));\n\n    arr = StrUtils.splitSmart(\"\\\\:foo\\\\::\\\\:bar\\\\:\", \":\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\":foo:\",arr.get(0));\n    assertEquals(\":bar:\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\ foo\\\\  \\\\ bar\\\\ \", true);\n    assertEquals(2,arr.size());\n    assertEquals(\" foo \",arr.get(0));\n    assertEquals(\" bar \",arr.get(1));\n    \n    arr = StrUtils.splitFileNames(\"/h/s,/h/\\\\,s,\");\n    assertEquals(2,arr.size());\n    assertEquals(\"/h/s\",arr.get(0));\n    assertEquals(\"/h/,s\",arr.get(1));\n\n    arr = StrUtils.splitFileNames(\"/h/s\");\n    assertEquals(1,arr.size());\n    assertEquals(\"/h/s\",arr.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/util/TestUtils#testSplitEscaping().mjava","pathOld":"solr/src/test/org/apache/solr/util/TestUtils#testSplitEscaping().mjava","sourceNew":"  public void testSplitEscaping() {\n    List<String> arr = StrUtils.splitSmart(\"\\\\r\\\\n:\\\\t\\\\f\\\\b\", \":\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\r\\n\",arr.get(0));\n    assertEquals(\"\\t\\f\\b\",arr.get(1));\n\n    arr = StrUtils.splitSmart(\"\\\\r\\\\n:\\\\t\\\\f\\\\b\", \":\", false);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\\\r\\\\n\",arr.get(0));\n    assertEquals(\"\\\\t\\\\f\\\\b\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\r\\\\n \\\\t\\\\f\\\\b\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\r\\n\",arr.get(0));\n    assertEquals(\"\\t\\f\\b\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\r\\\\n \\\\t\\\\f\\\\b\", false);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\\\r\\\\n\",arr.get(0));\n    assertEquals(\"\\\\t\\\\f\\\\b\",arr.get(1));\n\n    arr = StrUtils.splitSmart(\"\\\\:foo\\\\::\\\\:bar\\\\:\", \":\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\":foo:\",arr.get(0));\n    assertEquals(\":bar:\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\ foo\\\\  \\\\ bar\\\\ \", true);\n    assertEquals(2,arr.size());\n    assertEquals(\" foo \",arr.get(0));\n    assertEquals(\" bar \",arr.get(1));\n    \n    arr = StrUtils.splitFileNames(\"/h/s,/h/\\\\,s,\");\n    assertEquals(2,arr.size());\n    assertEquals(\"/h/s\",arr.get(0));\n    assertEquals(\"/h/,s\",arr.get(1));\n\n    arr = StrUtils.splitFileNames(\"/h/s\");\n    assertEquals(1,arr.size());\n    assertEquals(\"/h/s\",arr.get(0));\n  }\n\n","sourceOld":"  public static void testSplitEscaping() {\n    List<String> arr = StrUtils.splitSmart(\"\\\\r\\\\n:\\\\t\\\\f\\\\b\", \":\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\r\\n\",arr.get(0));\n    assertEquals(\"\\t\\f\\b\",arr.get(1));\n\n    arr = StrUtils.splitSmart(\"\\\\r\\\\n:\\\\t\\\\f\\\\b\", \":\", false);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\\\r\\\\n\",arr.get(0));\n    assertEquals(\"\\\\t\\\\f\\\\b\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\r\\\\n \\\\t\\\\f\\\\b\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\r\\n\",arr.get(0));\n    assertEquals(\"\\t\\f\\b\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\r\\\\n \\\\t\\\\f\\\\b\", false);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\\\r\\\\n\",arr.get(0));\n    assertEquals(\"\\\\t\\\\f\\\\b\",arr.get(1));\n\n    arr = StrUtils.splitSmart(\"\\\\:foo\\\\::\\\\:bar\\\\:\", \":\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\":foo:\",arr.get(0));\n    assertEquals(\":bar:\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\ foo\\\\  \\\\ bar\\\\ \", true);\n    assertEquals(2,arr.size());\n    assertEquals(\" foo \",arr.get(0));\n    assertEquals(\" bar \",arr.get(1));\n    \n    arr = StrUtils.splitFileNames(\"/h/s,/h/\\\\,s,\");\n    assertEquals(2,arr.size());\n    assertEquals(\"/h/s\",arr.get(0));\n    assertEquals(\"/h/,s\",arr.get(1));\n\n    arr = StrUtils.splitFileNames(\"/h/s\");\n    assertEquals(1,arr.size());\n    assertEquals(\"/h/s\",arr.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestUtils#testSplitEscaping().mjava","pathOld":"solr/src/test/org/apache/solr/util/TestUtils#testSplitEscaping().mjava","sourceNew":"  public void testSplitEscaping() {\n    List<String> arr = StrUtils.splitSmart(\"\\\\r\\\\n:\\\\t\\\\f\\\\b\", \":\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\r\\n\",arr.get(0));\n    assertEquals(\"\\t\\f\\b\",arr.get(1));\n\n    arr = StrUtils.splitSmart(\"\\\\r\\\\n:\\\\t\\\\f\\\\b\", \":\", false);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\\\r\\\\n\",arr.get(0));\n    assertEquals(\"\\\\t\\\\f\\\\b\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\r\\\\n \\\\t\\\\f\\\\b\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\r\\n\",arr.get(0));\n    assertEquals(\"\\t\\f\\b\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\r\\\\n \\\\t\\\\f\\\\b\", false);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\\\r\\\\n\",arr.get(0));\n    assertEquals(\"\\\\t\\\\f\\\\b\",arr.get(1));\n\n    arr = StrUtils.splitSmart(\"\\\\:foo\\\\::\\\\:bar\\\\:\", \":\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\":foo:\",arr.get(0));\n    assertEquals(\":bar:\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\ foo\\\\  \\\\ bar\\\\ \", true);\n    assertEquals(2,arr.size());\n    assertEquals(\" foo \",arr.get(0));\n    assertEquals(\" bar \",arr.get(1));\n    \n    arr = StrUtils.splitFileNames(\"/h/s,/h/\\\\,s,\");\n    assertEquals(2,arr.size());\n    assertEquals(\"/h/s\",arr.get(0));\n    assertEquals(\"/h/,s\",arr.get(1));\n\n    arr = StrUtils.splitFileNames(\"/h/s\");\n    assertEquals(1,arr.size());\n    assertEquals(\"/h/s\",arr.get(0));\n  }\n\n","sourceOld":"  public void testSplitEscaping() {\n    List<String> arr = StrUtils.splitSmart(\"\\\\r\\\\n:\\\\t\\\\f\\\\b\", \":\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\r\\n\",arr.get(0));\n    assertEquals(\"\\t\\f\\b\",arr.get(1));\n\n    arr = StrUtils.splitSmart(\"\\\\r\\\\n:\\\\t\\\\f\\\\b\", \":\", false);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\\\r\\\\n\",arr.get(0));\n    assertEquals(\"\\\\t\\\\f\\\\b\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\r\\\\n \\\\t\\\\f\\\\b\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\r\\n\",arr.get(0));\n    assertEquals(\"\\t\\f\\b\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\r\\\\n \\\\t\\\\f\\\\b\", false);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\\\r\\\\n\",arr.get(0));\n    assertEquals(\"\\\\t\\\\f\\\\b\",arr.get(1));\n\n    arr = StrUtils.splitSmart(\"\\\\:foo\\\\::\\\\:bar\\\\:\", \":\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\":foo:\",arr.get(0));\n    assertEquals(\":bar:\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\ foo\\\\  \\\\ bar\\\\ \", true);\n    assertEquals(2,arr.size());\n    assertEquals(\" foo \",arr.get(0));\n    assertEquals(\" bar \",arr.get(1));\n    \n    arr = StrUtils.splitFileNames(\"/h/s,/h/\\\\,s,\");\n    assertEquals(2,arr.size());\n    assertEquals(\"/h/s\",arr.get(0));\n    assertEquals(\"/h/,s\",arr.get(1));\n\n    arr = StrUtils.splitFileNames(\"/h/s\");\n    assertEquals(1,arr.size());\n    assertEquals(\"/h/s\",arr.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestUtils#testSplitEscaping().mjava","pathOld":"solr/src/test/org/apache/solr/util/TestUtils#testSplitEscaping().mjava","sourceNew":"  public void testSplitEscaping() {\n    List<String> arr = StrUtils.splitSmart(\"\\\\r\\\\n:\\\\t\\\\f\\\\b\", \":\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\r\\n\",arr.get(0));\n    assertEquals(\"\\t\\f\\b\",arr.get(1));\n\n    arr = StrUtils.splitSmart(\"\\\\r\\\\n:\\\\t\\\\f\\\\b\", \":\", false);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\\\r\\\\n\",arr.get(0));\n    assertEquals(\"\\\\t\\\\f\\\\b\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\r\\\\n \\\\t\\\\f\\\\b\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\r\\n\",arr.get(0));\n    assertEquals(\"\\t\\f\\b\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\r\\\\n \\\\t\\\\f\\\\b\", false);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\\\r\\\\n\",arr.get(0));\n    assertEquals(\"\\\\t\\\\f\\\\b\",arr.get(1));\n\n    arr = StrUtils.splitSmart(\"\\\\:foo\\\\::\\\\:bar\\\\:\", \":\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\":foo:\",arr.get(0));\n    assertEquals(\":bar:\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\ foo\\\\  \\\\ bar\\\\ \", true);\n    assertEquals(2,arr.size());\n    assertEquals(\" foo \",arr.get(0));\n    assertEquals(\" bar \",arr.get(1));\n    \n    arr = StrUtils.splitFileNames(\"/h/s,/h/\\\\,s,\");\n    assertEquals(2,arr.size());\n    assertEquals(\"/h/s\",arr.get(0));\n    assertEquals(\"/h/,s\",arr.get(1));\n\n    arr = StrUtils.splitFileNames(\"/h/s\");\n    assertEquals(1,arr.size());\n    assertEquals(\"/h/s\",arr.get(0));\n  }\n\n","sourceOld":"  public void testSplitEscaping() {\n    List<String> arr = StrUtils.splitSmart(\"\\\\r\\\\n:\\\\t\\\\f\\\\b\", \":\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\r\\n\",arr.get(0));\n    assertEquals(\"\\t\\f\\b\",arr.get(1));\n\n    arr = StrUtils.splitSmart(\"\\\\r\\\\n:\\\\t\\\\f\\\\b\", \":\", false);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\\\r\\\\n\",arr.get(0));\n    assertEquals(\"\\\\t\\\\f\\\\b\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\r\\\\n \\\\t\\\\f\\\\b\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\r\\n\",arr.get(0));\n    assertEquals(\"\\t\\f\\b\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\r\\\\n \\\\t\\\\f\\\\b\", false);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\\\r\\\\n\",arr.get(0));\n    assertEquals(\"\\\\t\\\\f\\\\b\",arr.get(1));\n\n    arr = StrUtils.splitSmart(\"\\\\:foo\\\\::\\\\:bar\\\\:\", \":\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\":foo:\",arr.get(0));\n    assertEquals(\":bar:\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\ foo\\\\  \\\\ bar\\\\ \", true);\n    assertEquals(2,arr.size());\n    assertEquals(\" foo \",arr.get(0));\n    assertEquals(\" bar \",arr.get(1));\n    \n    arr = StrUtils.splitFileNames(\"/h/s,/h/\\\\,s,\");\n    assertEquals(2,arr.size());\n    assertEquals(\"/h/s\",arr.get(0));\n    assertEquals(\"/h/,s\",arr.get(1));\n\n    arr = StrUtils.splitFileNames(\"/h/s\");\n    assertEquals(1,arr.size());\n    assertEquals(\"/h/s\",arr.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/TestUtils#testSplitEscaping().mjava","pathOld":"solr/src/test/org/apache/solr/util/TestUtils#testSplitEscaping().mjava","sourceNew":"  public void testSplitEscaping() {\n    List<String> arr = StrUtils.splitSmart(\"\\\\r\\\\n:\\\\t\\\\f\\\\b\", \":\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\r\\n\",arr.get(0));\n    assertEquals(\"\\t\\f\\b\",arr.get(1));\n\n    arr = StrUtils.splitSmart(\"\\\\r\\\\n:\\\\t\\\\f\\\\b\", \":\", false);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\\\r\\\\n\",arr.get(0));\n    assertEquals(\"\\\\t\\\\f\\\\b\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\r\\\\n \\\\t\\\\f\\\\b\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\r\\n\",arr.get(0));\n    assertEquals(\"\\t\\f\\b\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\r\\\\n \\\\t\\\\f\\\\b\", false);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\\\r\\\\n\",arr.get(0));\n    assertEquals(\"\\\\t\\\\f\\\\b\",arr.get(1));\n\n    arr = StrUtils.splitSmart(\"\\\\:foo\\\\::\\\\:bar\\\\:\", \":\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\":foo:\",arr.get(0));\n    assertEquals(\":bar:\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\ foo\\\\  \\\\ bar\\\\ \", true);\n    assertEquals(2,arr.size());\n    assertEquals(\" foo \",arr.get(0));\n    assertEquals(\" bar \",arr.get(1));\n    \n    arr = StrUtils.splitFileNames(\"/h/s,/h/\\\\,s,\");\n    assertEquals(2,arr.size());\n    assertEquals(\"/h/s\",arr.get(0));\n    assertEquals(\"/h/,s\",arr.get(1));\n\n    arr = StrUtils.splitFileNames(\"/h/s\");\n    assertEquals(1,arr.size());\n    assertEquals(\"/h/s\",arr.get(0));\n  }\n\n","sourceOld":"  public void testSplitEscaping() {\n    List<String> arr = StrUtils.splitSmart(\"\\\\r\\\\n:\\\\t\\\\f\\\\b\", \":\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\r\\n\",arr.get(0));\n    assertEquals(\"\\t\\f\\b\",arr.get(1));\n\n    arr = StrUtils.splitSmart(\"\\\\r\\\\n:\\\\t\\\\f\\\\b\", \":\", false);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\\\r\\\\n\",arr.get(0));\n    assertEquals(\"\\\\t\\\\f\\\\b\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\r\\\\n \\\\t\\\\f\\\\b\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\r\\n\",arr.get(0));\n    assertEquals(\"\\t\\f\\b\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\r\\\\n \\\\t\\\\f\\\\b\", false);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\\\r\\\\n\",arr.get(0));\n    assertEquals(\"\\\\t\\\\f\\\\b\",arr.get(1));\n\n    arr = StrUtils.splitSmart(\"\\\\:foo\\\\::\\\\:bar\\\\:\", \":\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\":foo:\",arr.get(0));\n    assertEquals(\":bar:\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\ foo\\\\  \\\\ bar\\\\ \", true);\n    assertEquals(2,arr.size());\n    assertEquals(\" foo \",arr.get(0));\n    assertEquals(\" bar \",arr.get(1));\n    \n    arr = StrUtils.splitFileNames(\"/h/s,/h/\\\\,s,\");\n    assertEquals(2,arr.size());\n    assertEquals(\"/h/s\",arr.get(0));\n    assertEquals(\"/h/,s\",arr.get(1));\n\n    arr = StrUtils.splitFileNames(\"/h/s\");\n    assertEquals(1,arr.size());\n    assertEquals(\"/h/s\",arr.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bc67fa3e9a06f885eafab9e853592824796a6b1c":["1da8d55113b689b06716246649de6f62430f15c0"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["bc67fa3e9a06f885eafab9e853592824796a6b1c"],"c26f00b574427b55127e869b935845554afde1fa":["bc67fa3e9a06f885eafab9e853592824796a6b1c","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["bc67fa3e9a06f885eafab9e853592824796a6b1c"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","bc67fa3e9a06f885eafab9e853592824796a6b1c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"bc67fa3e9a06f885eafab9e853592824796a6b1c":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"1da8d55113b689b06716246649de6f62430f15c0":["bc67fa3e9a06f885eafab9e853592824796a6b1c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}