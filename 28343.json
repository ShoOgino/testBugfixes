{"path":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#prepareCloudPlugins(PluginInfo[],String,Map[String,String],Map[String,Object]).mjava","commits":[{"id":"889865904ccb84e97569ba35ada9860df9ae6f0d","date":1502460448,"type":1,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#prepareCloudPlugins(PluginInfo[],String,Map[String,String],Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#prepareCloudPlugins(PluginInfo[],String,String,Map[String,String],Map[String,Object]).mjava","sourceNew":"  private List<PluginInfo> prepareCloudPlugins(PluginInfo[] pluginInfos, String group,\n                                                      Map<String, String> defaultAttributes,\n                                                      Map<String, Object> defaultInitArgs) {\n    List<PluginInfo> result = new ArrayList<>();\n    if (pluginInfos == null) {\n      pluginInfos = new PluginInfo[0];\n    }\n    for (PluginInfo info : pluginInfos) {\n      String groupAttr = info.attributes.get(\"group\");\n      if (!group.equals(groupAttr)) {\n        continue;\n      }\n      info = preparePlugin(info, defaultAttributes, defaultInitArgs);\n      if (info != null) {\n        result.add(info);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  private List<PluginInfo> prepareCloudPlugins(PluginInfo[] pluginInfos, String group, String className,\n                                                      Map<String, String> defaultAttributes,\n                                                      Map<String, Object> defaultInitArgs) {\n    List<PluginInfo> result = new ArrayList<>();\n    if (pluginInfos == null) {\n      pluginInfos = new PluginInfo[0];\n    }\n    for (PluginInfo info : pluginInfos) {\n      String groupAttr = info.attributes.get(\"group\");\n      if (!group.equals(groupAttr)) {\n        continue;\n      }\n      info = preparePlugin(info, className, defaultAttributes, defaultInitArgs);\n      if (info != null) {\n        result.add(info);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19e8eb794082b9cc37b6562c76814ec4a26b9b8b","date":1502501868,"type":1,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#prepareCloudPlugins(PluginInfo[],String,Map[String,String],Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#prepareCloudPlugins(PluginInfo[],String,String,Map[String,String],Map[String,Object]).mjava","sourceNew":"  private List<PluginInfo> prepareCloudPlugins(PluginInfo[] pluginInfos, String group,\n                                                      Map<String, String> defaultAttributes,\n                                                      Map<String, Object> defaultInitArgs) {\n    List<PluginInfo> result = new ArrayList<>();\n    if (pluginInfos == null) {\n      pluginInfos = new PluginInfo[0];\n    }\n    for (PluginInfo info : pluginInfos) {\n      String groupAttr = info.attributes.get(\"group\");\n      if (!group.equals(groupAttr)) {\n        continue;\n      }\n      info = preparePlugin(info, defaultAttributes, defaultInitArgs);\n      if (info != null) {\n        result.add(info);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  private List<PluginInfo> prepareCloudPlugins(PluginInfo[] pluginInfos, String group, String className,\n                                                      Map<String, String> defaultAttributes,\n                                                      Map<String, Object> defaultInitArgs) {\n    List<PluginInfo> result = new ArrayList<>();\n    if (pluginInfos == null) {\n      pluginInfos = new PluginInfo[0];\n    }\n    for (PluginInfo info : pluginInfos) {\n      String groupAttr = info.attributes.get(\"group\");\n      if (!group.equals(groupAttr)) {\n        continue;\n      }\n      info = preparePlugin(info, className, defaultAttributes, defaultInitArgs);\n      if (info != null) {\n        result.add(info);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#prepareCloudPlugins(PluginInfo[],String,Map[String,String],Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#prepareCloudPlugins(PluginInfo[],String,String,Map[String,String],Map[String,Object]).mjava","sourceNew":"  private List<PluginInfo> prepareCloudPlugins(PluginInfo[] pluginInfos, String group,\n                                                      Map<String, String> defaultAttributes,\n                                                      Map<String, Object> defaultInitArgs) {\n    List<PluginInfo> result = new ArrayList<>();\n    if (pluginInfos == null) {\n      pluginInfos = new PluginInfo[0];\n    }\n    for (PluginInfo info : pluginInfos) {\n      String groupAttr = info.attributes.get(\"group\");\n      if (!group.equals(groupAttr)) {\n        continue;\n      }\n      info = preparePlugin(info, defaultAttributes, defaultInitArgs);\n      if (info != null) {\n        result.add(info);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  private List<PluginInfo> prepareCloudPlugins(PluginInfo[] pluginInfos, String group, String className,\n                                                      Map<String, String> defaultAttributes,\n                                                      Map<String, Object> defaultInitArgs) {\n    List<PluginInfo> result = new ArrayList<>();\n    if (pluginInfos == null) {\n      pluginInfos = new PluginInfo[0];\n    }\n    for (PluginInfo info : pluginInfos) {\n      String groupAttr = info.attributes.get(\"group\");\n      if (!group.equals(groupAttr)) {\n        continue;\n      }\n      info = preparePlugin(info, className, defaultAttributes, defaultInitArgs);\n      if (info != null) {\n        result.add(info);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6224f40fcf60b05c62a88f50925c1bbae324bdfd","date":1565402430,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#prepareCloudPlugins(PluginInfo[],String,Map[String,String],Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#prepareCloudPlugins(PluginInfo[],String,Map[String,String],Map[String,Object]).mjava","sourceNew":"  private List<PluginInfo> prepareCloudPlugins(PluginInfo[] pluginInfos, String group,\n                                               Map<String, String> defaultAttributes,\n                                               Map<String, Object> defaultInitArgs) {\n    List<PluginInfo> result = new ArrayList<>();\n    if (pluginInfos == null) {\n      pluginInfos = new PluginInfo[0];\n    }\n    for (PluginInfo info : pluginInfos) {\n      String groupAttr = info.attributes.get(\"group\");\n      if (!group.equals(groupAttr)) {\n        continue;\n      }\n      info = preparePlugin(info, defaultAttributes, defaultInitArgs);\n      if (info != null) {\n        result.add(info);\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  private List<PluginInfo> prepareCloudPlugins(PluginInfo[] pluginInfos, String group,\n                                                      Map<String, String> defaultAttributes,\n                                                      Map<String, Object> defaultInitArgs) {\n    List<PluginInfo> result = new ArrayList<>();\n    if (pluginInfos == null) {\n      pluginInfos = new PluginInfo[0];\n    }\n    for (PluginInfo info : pluginInfos) {\n      String groupAttr = info.attributes.get(\"group\");\n      if (!group.equals(groupAttr)) {\n        continue;\n      }\n      info = preparePlugin(info, defaultAttributes, defaultInitArgs);\n      if (info != null) {\n        result.add(info);\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"889865904ccb84e97569ba35ada9860df9ae6f0d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","19e8eb794082b9cc37b6562c76814ec4a26b9b8b"],"19e8eb794082b9cc37b6562c76814ec4a26b9b8b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","889865904ccb84e97569ba35ada9860df9ae6f0d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6224f40fcf60b05c62a88f50925c1bbae324bdfd"],"6224f40fcf60b05c62a88f50925c1bbae324bdfd":["19e8eb794082b9cc37b6562c76814ec4a26b9b8b"]},"commit2Childs":{"889865904ccb84e97569ba35ada9860df9ae6f0d":["19e8eb794082b9cc37b6562c76814ec4a26b9b8b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["889865904ccb84e97569ba35ada9860df9ae6f0d","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","19e8eb794082b9cc37b6562c76814ec4a26b9b8b"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":[],"19e8eb794082b9cc37b6562c76814ec4a26b9b8b":["93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","6224f40fcf60b05c62a88f50925c1bbae324bdfd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6224f40fcf60b05c62a88f50925c1bbae324bdfd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}