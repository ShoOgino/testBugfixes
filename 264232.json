{"path":"lucene/core/src/java/org/apache/lucene/index/Terms#getMin().mjava","commits":[{"id":"0974f33be0e2189e71f36b67f1017f4072b1a126","date":1398347867,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/Terms#getMin().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the smallest term (in lexicographic order) in the field. \n   *  Note that, just like other term measures, this measure does not \n   *  take deleted documents into account. */\n  public BytesRef getMin() throws IOException {\n    return iterator(null).next();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f890447ef156e598bffbdc5aab15a68b458c3612","date":1398350662,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/Terms#getMin().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/Terms#getMin().mjava","sourceNew":"  /** Returns the smallest term (in lexicographic order) in the field. \n   *  Note that, just like other term measures, this measure does not \n   *  take deleted documents into account.  This returns\n   *  null when there are no terms. */\n  public BytesRef getMin() throws IOException {\n    return iterator(null).next();\n  }\n\n","sourceOld":"  /** Returns the smallest term (in lexicographic order) in the field. \n   *  Note that, just like other term measures, this measure does not \n   *  take deleted documents into account. */\n  public BytesRef getMin() throws IOException {\n    return iterator(null).next();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/Terms#getMin().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the smallest term (in lexicographic order) in the field. \n   *  Note that, just like other term measures, this measure does not \n   *  take deleted documents into account.  This returns\n   *  null when there are no terms. */\n  public BytesRef getMin() throws IOException {\n    return iterator(null).next();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/Terms#getMin().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/Terms#getMin().mjava","sourceNew":"  /** Returns the smallest term (in lexicographic order) in the field. \n   *  Note that, just like other term measures, this measure does not \n   *  take deleted documents into account.  This returns\n   *  null when there are no terms. */\n  public BytesRef getMin() throws IOException {\n    return iterator().next();\n  }\n\n","sourceOld":"  /** Returns the smallest term (in lexicographic order) in the field. \n   *  Note that, just like other term measures, this measure does not \n   *  take deleted documents into account.  This returns\n   *  null when there are no terms. */\n  public BytesRef getMin() throws IOException {\n    return iterator(null).next();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["f890447ef156e598bffbdc5aab15a68b458c3612"],"0974f33be0e2189e71f36b67f1017f4072b1a126":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f890447ef156e598bffbdc5aab15a68b458c3612"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"f890447ef156e598bffbdc5aab15a68b458c3612":["0974f33be0e2189e71f36b67f1017f4072b1a126"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0974f33be0e2189e71f36b67f1017f4072b1a126":["f890447ef156e598bffbdc5aab15a68b458c3612"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0974f33be0e2189e71f36b67f1017f4072b1a126","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe"],"f890447ef156e598bffbdc5aab15a68b458c3612":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}