{"path":"contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.QueryPhraseMap#isValidTermOrPhrase(List[TermInfo]).mjava","commits":[{"id":"d64148a458eb3ddf4d1bb1f1753cb9af194e1707","date":1247144811,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.QueryPhraseMap#isValidTermOrPhrase(List[TermInfo]).mjava","pathOld":"/dev/null","sourceNew":"    public boolean isValidTermOrPhrase( final List<TermInfo> phraseCandidate ){\n      // check terminal\n      if( !terminal ) return false;\n\n      // if the candidate is a term, it is valid\n      if( phraseCandidate.size() == 1 ) return true;\n\n      // else check whether the candidate is valid phrase\n      // compare position-gaps between terms to slop\n      int pos = phraseCandidate.get( 0 ).getPosition();\n      for( int i = 1; i < phraseCandidate.size(); i++ ){\n        int nextPos = phraseCandidate.get( i ).getPosition();\n        if( Math.abs( nextPos - pos - 1 ) > slop ) return false;\n        pos = nextPos;\n      }\n      return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.QueryPhraseMap#isValidTermOrPhrase(List[TermInfo]).mjava","pathOld":"contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.QueryPhraseMap#isValidTermOrPhrase(List[TermInfo]).mjava","sourceNew":"    public boolean isValidTermOrPhrase( final List<TermInfo> phraseCandidate ){\n      // check terminal\n      if( !terminal ) return false;\n\n      // if the candidate is a term, it is valid\n      if( phraseCandidate.size() == 1 ) return true;\n\n      // else check whether the candidate is valid phrase\n      // compare position-gaps between terms to slop\n      int pos = phraseCandidate.get( 0 ).getPosition();\n      for( int i = 1; i < phraseCandidate.size(); i++ ){\n        int nextPos = phraseCandidate.get( i ).getPosition();\n        if( Math.abs( nextPos - pos - 1 ) > slop ) return false;\n        pos = nextPos;\n      }\n      return true;\n    }\n\n","sourceOld":"    public boolean isValidTermOrPhrase( final List<TermInfo> phraseCandidate ){\n      // check terminal\n      if( !terminal ) return false;\n\n      // if the candidate is a term, it is valid\n      if( phraseCandidate.size() == 1 ) return true;\n\n      // else check whether the candidate is valid phrase\n      // compare position-gaps between terms to slop\n      int pos = phraseCandidate.get( 0 ).getPosition();\n      for( int i = 1; i < phraseCandidate.size(); i++ ){\n        int nextPos = phraseCandidate.get( i ).getPosition();\n        if( Math.abs( nextPos - pos - 1 ) > slop ) return false;\n        pos = nextPos;\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d64148a458eb3ddf4d1bb1f1753cb9af194e1707":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d64148a458eb3ddf4d1bb1f1753cb9af194e1707"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d64148a458eb3ddf4d1bb1f1753cb9af194e1707"],"d64148a458eb3ddf4d1bb1f1753cb9af194e1707":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}