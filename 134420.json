{"path":"solr/core/src/java/org/apache/solr/parser/QueryParser#Query(String).mjava","commits":[{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/QueryParser#Query(String).mjava","pathOld":"/dev/null","sourceNew":"  final public Query Query(String field) throws ParseException, SyntaxError {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  int conj, mods;\n    mods = Modifiers();\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, mods, q);\n    if (mods == MOD_NONE)\n        firstQuery=q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case BAREOPER:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case LPARAMS:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      conj = Conjunction();\n      mods = Modifiers();\n      q = Clause(field);\n      addClause(clauses, conj, mods, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n  {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/parser/QueryParser#Query(String).mjava","pathOld":"/dev/null","sourceNew":"  final public Query Query(String field) throws ParseException, SyntaxError {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  int conj, mods;\n    mods = Modifiers();\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, mods, q);\n    if (mods == MOD_NONE)\n        firstQuery=q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case BAREOPER:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case LPARAMS:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      conj = Conjunction();\n      mods = Modifiers();\n      q = Clause(field);\n      addClause(clauses, conj, mods, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n  {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/QueryParser#Query(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/QueryParser#Query(String).mjava","sourceNew":"  final public Query Query(String field) throws ParseException, SyntaxError {\n  List<BooleanClause> clauses = new ArrayList<>();\n  Query q, firstQuery=null;\n  int conj, mods;\n    mods = Modifiers();\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, mods, q);\n    if (mods == MOD_NONE)\n        firstQuery=q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case BAREOPER:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case LPARAMS:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      conj = Conjunction();\n      mods = Modifiers();\n      q = Clause(field);\n      addClause(clauses, conj, mods, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n  {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public Query Query(String field) throws ParseException, SyntaxError {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  int conj, mods;\n    mods = Modifiers();\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, mods, q);\n    if (mods == MOD_NONE)\n        firstQuery=q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case BAREOPER:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case LPARAMS:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      conj = Conjunction();\n      mods = Modifiers();\n      q = Clause(field);\n      addClause(clauses, conj, mods, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n  {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ef9afbd23e483ed1a80ed787f1640b353275980","date":1426166980,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/QueryParser#Query(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/QueryParser#Query(String).mjava","sourceNew":"  final public Query Query(String field) throws ParseException, SyntaxError {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  int conj, mods;\n    mods = Modifiers();\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, mods, q);\n    if (mods == MOD_NONE)\n        firstQuery=q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case BAREOPER:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case LPARAMS:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      conj = Conjunction();\n      mods = Modifiers();\n      q = Clause(field);\n      addClause(clauses, conj, mods, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n  {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public Query Query(String field) throws ParseException, SyntaxError {\n  List<BooleanClause> clauses = new ArrayList<>();\n  Query q, firstQuery=null;\n  int conj, mods;\n    mods = Modifiers();\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, mods, q);\n    if (mods == MOD_NONE)\n        firstQuery=q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case BAREOPER:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case LPARAMS:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      conj = Conjunction();\n      mods = Modifiers();\n      q = Clause(field);\n      addClause(clauses, conj, mods, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n  {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/parser/QueryParser#Query(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/QueryParser#Query(String).mjava","sourceNew":"  final public Query Query(String field) throws ParseException, SyntaxError {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  int conj, mods;\n    mods = Modifiers();\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, mods, q);\n    if (mods == MOD_NONE)\n        firstQuery=q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case BAREOPER:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case LPARAMS:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      conj = Conjunction();\n      mods = Modifiers();\n      q = Clause(field);\n      addClause(clauses, conj, mods, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n  {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public Query Query(String field) throws ParseException, SyntaxError {\n  List<BooleanClause> clauses = new ArrayList<>();\n  Query q, firstQuery=null;\n  int conj, mods;\n    mods = Modifiers();\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, mods, q);\n    if (mods == MOD_NONE)\n        firstQuery=q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case BAREOPER:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case LPARAMS:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      conj = Conjunction();\n      mods = Modifiers();\n      q = Clause(field);\n      addClause(clauses, conj, mods, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n  {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8a9551fb5fcfdd678f5a7c22b9b1814529b1a8c","date":1438964081,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/QueryParser#Query(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/QueryParser#Query(String).mjava","sourceNew":"  final public Query Query(String field) throws ParseException, SyntaxError {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  int conj, mods;\n    mods = Modifiers();\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, mods, q);\n    if (mods == MOD_NONE)\n        firstQuery=q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case BAREOPER:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case LPARAMS:\n      case FILTER:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      conj = Conjunction();\n      mods = Modifiers();\n      q = Clause(field);\n      addClause(clauses, conj, mods, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n  {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public Query Query(String field) throws ParseException, SyntaxError {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  int conj, mods;\n    mods = Modifiers();\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, mods, q);\n    if (mods == MOD_NONE)\n        firstQuery=q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case BAREOPER:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case LPARAMS:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      conj = Conjunction();\n      mods = Modifiers();\n      q = Clause(field);\n      addClause(clauses, conj, mods, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n  {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68c354ba50abc8ed5c5fe98901e61d68f93952bb","date":1479836000,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/QueryParser#Query(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/QueryParser#Query(String).mjava","sourceNew":"  final public Query Query(String field) throws ParseException, SyntaxError {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  int conj, mods;\n    mods = Modifiers();\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, mods, q);\n    if (mods == MOD_NONE)\n        firstQuery=q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case BAREOPER:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case LPARAMS:\n      case FILTER:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      conj = Conjunction();\n      mods = Modifiers();\n      q = Clause(field);\n      addClause(clauses, conj, mods, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return rawToNormal(firstQuery);}\n      else {\n        {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public Query Query(String field) throws ParseException, SyntaxError {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  int conj, mods;\n    mods = Modifiers();\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, mods, q);\n    if (mods == MOD_NONE)\n        firstQuery=q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case BAREOPER:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case LPARAMS:\n      case FILTER:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      conj = Conjunction();\n      mods = Modifiers();\n      q = Clause(field);\n      addClause(clauses, conj, mods, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n  {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/parser/QueryParser#Query(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/QueryParser#Query(String).mjava","sourceNew":"  final public Query Query(String field) throws ParseException, SyntaxError {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  int conj, mods;\n    mods = Modifiers();\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, mods, q);\n    if (mods == MOD_NONE)\n        firstQuery=q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case BAREOPER:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case LPARAMS:\n      case FILTER:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      conj = Conjunction();\n      mods = Modifiers();\n      q = Clause(field);\n      addClause(clauses, conj, mods, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return rawToNormal(firstQuery);}\n      else {\n        {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public Query Query(String field) throws ParseException, SyntaxError {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  int conj, mods;\n    mods = Modifiers();\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, mods, q);\n    if (mods == MOD_NONE)\n        firstQuery=q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case BAREOPER:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case LPARAMS:\n      case FILTER:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      conj = Conjunction();\n      mods = Modifiers();\n      q = Clause(field);\n      addClause(clauses, conj, mods, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n  {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e55782fb51a6e9789542818eb2161a3247f39ace","date":1489707707,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/QueryParser#Query(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/QueryParser#Query(String).mjava","sourceNew":"  final public Query Query(String field) throws ParseException, SyntaxError {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q;\n  int conj, mods;\n    if (jj_2_1(2)) {\n      MultiTerm(field, clauses);\n    } else {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case BAREOPER:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case LPARAMS:\n      case FILTER:\n      case NUMBER:\n        mods = Modifiers();\n        q = Clause(field);\n        addClause(clauses, CONJ_NONE, mods, q);\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n    }\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case BAREOPER:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case LPARAMS:\n      case FILTER:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[5] = jj_gen;\n        break label_1;\n      }\n      if (jj_2_2(2)) {\n        MultiTerm(field, clauses);\n      } else {\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case AND:\n        case OR:\n        case NOT:\n        case PLUS:\n        case MINUS:\n        case BAREOPER:\n        case LPAREN:\n        case STAR:\n        case QUOTED:\n        case TERM:\n        case PREFIXTERM:\n        case WILDTERM:\n        case REGEXPTERM:\n        case RANGEIN_START:\n        case RANGEEX_START:\n        case LPARAMS:\n        case FILTER:\n        case NUMBER:\n          conj = Conjunction();\n          mods = Modifiers();\n          q = Clause(field);\n        addClause(clauses, conj, mods, q);\n          break;\n        default:\n          jj_la1[6] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n      }\n    }\n    if (clauses.size() == 1 && clauses.get(0).getOccur() == BooleanClause.Occur.SHOULD) {\n      Query firstQuery = clauses.get(0).getQuery();\n      if ( ! (firstQuery instanceof RawQuery) || ((RawQuery)firstQuery).getTermCount() == 1) {\n        {if (true) return rawToNormal(firstQuery);}\n      }\n    }\n    {if (true) return getBooleanQuery(clauses);}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public Query Query(String field) throws ParseException, SyntaxError {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  int conj, mods;\n    mods = Modifiers();\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, mods, q);\n    if (mods == MOD_NONE)\n        firstQuery=q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case BAREOPER:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case LPARAMS:\n      case FILTER:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      conj = Conjunction();\n      mods = Modifiers();\n      q = Clause(field);\n      addClause(clauses, conj, mods, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return rawToNormal(firstQuery);}\n      else {\n        {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c03778630c4604270d88c148afb8c7de35b51d3c","date":1490280010,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/QueryParser#Query(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/QueryParser#Query(String).mjava","sourceNew":"  final public Query Query(String field) throws ParseException, SyntaxError {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q;\n  int conj, mods;\n    if (jj_2_1(2)) {\n      MultiTerm(field, clauses);\n    } else {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case BAREOPER:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case LPARAMS:\n      case FILTER:\n      case NUMBER:\n        mods = Modifiers();\n        q = Clause(field);\n        addClause(clauses, CONJ_NONE, mods, q);\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n    }\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case BAREOPER:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case LPARAMS:\n      case FILTER:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[5] = jj_gen;\n        break label_1;\n      }\n      if (jj_2_2(2)) {\n        MultiTerm(field, clauses);\n      } else {\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case AND:\n        case OR:\n        case NOT:\n        case PLUS:\n        case MINUS:\n        case BAREOPER:\n        case LPAREN:\n        case STAR:\n        case QUOTED:\n        case TERM:\n        case PREFIXTERM:\n        case WILDTERM:\n        case REGEXPTERM:\n        case RANGEIN_START:\n        case RANGEEX_START:\n        case LPARAMS:\n        case FILTER:\n        case NUMBER:\n          conj = Conjunction();\n          mods = Modifiers();\n          q = Clause(field);\n        addClause(clauses, conj, mods, q);\n          break;\n        default:\n          jj_la1[6] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n      }\n    }\n    if (clauses.size() == 1 && clauses.get(0).getOccur() == BooleanClause.Occur.SHOULD) {\n      Query firstQuery = clauses.get(0).getQuery();\n      if ( ! (firstQuery instanceof RawQuery) || ((RawQuery)firstQuery).getTermCount() == 1) {\n        {if (true) return rawToNormal(firstQuery);}\n      }\n    }\n    {if (true) return getBooleanQuery(clauses);}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public Query Query(String field) throws ParseException, SyntaxError {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  int conj, mods;\n    mods = Modifiers();\n    q = Clause(field);\n    addClause(clauses, CONJ_NONE, mods, q);\n    if (mods == MOD_NONE)\n        firstQuery=q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case BAREOPER:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case LPARAMS:\n      case FILTER:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      conj = Conjunction();\n      mods = Modifiers();\n      q = Clause(field);\n      addClause(clauses, conj, mods, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return rawToNormal(firstQuery);}\n      else {\n        {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4bf8c857cdf9b9be903cae84ef15985ad090a05","date":1600342158,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/QueryParser#Query(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/QueryParser#Query(String).mjava","sourceNew":"  final public Query Query(String field) throws ParseException, SyntaxError {List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q;\n  int conj, mods;\n    if (jj_2_1(2)) {\n      MultiTerm(field, clauses);\n    } else {\n      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case BAREOPER:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case LPARAMS:\n      case FILTER:\n      case NUMBER:{\n        mods = Modifiers();\n        q = Clause(field);\naddClause(clauses, CONJ_NONE, mods, q);\n        break;\n        }\n      default:\n        jj_la1[4] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n    }\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case BAREOPER:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case LPARAMS:\n      case FILTER:\n      case NUMBER:{\n        ;\n        break;\n        }\n      default:\n        jj_la1[5] = jj_gen;\n        break label_1;\n      }\n      if (jj_2_2(2)) {\n        MultiTerm(field, clauses);\n      } else {\n        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n        case AND:\n        case OR:\n        case NOT:\n        case PLUS:\n        case MINUS:\n        case BAREOPER:\n        case LPAREN:\n        case STAR:\n        case QUOTED:\n        case TERM:\n        case PREFIXTERM:\n        case WILDTERM:\n        case REGEXPTERM:\n        case RANGEIN_START:\n        case RANGEEX_START:\n        case LPARAMS:\n        case FILTER:\n        case NUMBER:{\n          conj = Conjunction();\n          mods = Modifiers();\n          q = Clause(field);\naddClause(clauses, conj, mods, q);\n          break;\n          }\n        default:\n          jj_la1[6] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n      }\n    }\nif (clauses.size() == 1 && clauses.get(0).getOccur() == BooleanClause.Occur.SHOULD) {\n      Query firstQuery = clauses.get(0).getQuery();\n      if ( ! (firstQuery instanceof RawQuery) || ((RawQuery)firstQuery).getTermCount() == 1) {\n        {if (\"\" != null) return rawToNormal(firstQuery);}\n      }\n    }\n    {if (\"\" != null) return getBooleanQuery(clauses);}\n    throw new Error(\"Missing return statement in function\");\n}\n\n","sourceOld":"  final public Query Query(String field) throws ParseException, SyntaxError {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q;\n  int conj, mods;\n    if (jj_2_1(2)) {\n      MultiTerm(field, clauses);\n    } else {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case BAREOPER:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case LPARAMS:\n      case FILTER:\n      case NUMBER:\n        mods = Modifiers();\n        q = Clause(field);\n        addClause(clauses, CONJ_NONE, mods, q);\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n    }\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case AND:\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case BAREOPER:\n      case LPAREN:\n      case STAR:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case LPARAMS:\n      case FILTER:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[5] = jj_gen;\n        break label_1;\n      }\n      if (jj_2_2(2)) {\n        MultiTerm(field, clauses);\n      } else {\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case AND:\n        case OR:\n        case NOT:\n        case PLUS:\n        case MINUS:\n        case BAREOPER:\n        case LPAREN:\n        case STAR:\n        case QUOTED:\n        case TERM:\n        case PREFIXTERM:\n        case WILDTERM:\n        case REGEXPTERM:\n        case RANGEIN_START:\n        case RANGEEX_START:\n        case LPARAMS:\n        case FILTER:\n        case NUMBER:\n          conj = Conjunction();\n          mods = Modifiers();\n          q = Clause(field);\n        addClause(clauses, conj, mods, q);\n          break;\n        default:\n          jj_la1[6] = jj_gen;\n          jj_consume_token(-1);\n          throw new ParseException();\n        }\n      }\n    }\n    if (clauses.size() == 1 && clauses.get(0).getOccur() == BooleanClause.Occur.SHOULD) {\n      Query firstQuery = clauses.get(0).getQuery();\n      if ( ! (firstQuery instanceof RawQuery) || ((RawQuery)firstQuery).getTermCount() == 1) {\n        {if (true) return rawToNormal(firstQuery);}\n      }\n    }\n    {if (true) return getBooleanQuery(clauses);}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b8a9551fb5fcfdd678f5a7c22b9b1814529b1a8c":["7ef9afbd23e483ed1a80ed787f1640b353275980"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3cdb67100dc016748799a77218aa409478372d79"],"3cdb67100dc016748799a77218aa409478372d79":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb67100dc016748799a77218aa409478372d79"],"c4bf8c857cdf9b9be903cae84ef15985ad090a05":["e55782fb51a6e9789542818eb2161a3247f39ace"],"c03778630c4604270d88c148afb8c7de35b51d3c":["68c354ba50abc8ed5c5fe98901e61d68f93952bb"],"e55782fb51a6e9789542818eb2161a3247f39ace":["68c354ba50abc8ed5c5fe98901e61d68f93952bb"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","7ef9afbd23e483ed1a80ed787f1640b353275980"],"727bb765ff2542275f6d31f67be18d7104bae148":["b8a9551fb5fcfdd678f5a7c22b9b1814529b1a8c","68c354ba50abc8ed5c5fe98901e61d68f93952bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7ef9afbd23e483ed1a80ed787f1640b353275980":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"68c354ba50abc8ed5c5fe98901e61d68f93952bb":["b8a9551fb5fcfdd678f5a7c22b9b1814529b1a8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c4bf8c857cdf9b9be903cae84ef15985ad090a05"]},"commit2Childs":{"b8a9551fb5fcfdd678f5a7c22b9b1814529b1a8c":["727bb765ff2542275f6d31f67be18d7104bae148","68c354ba50abc8ed5c5fe98901e61d68f93952bb"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7ef9afbd23e483ed1a80ed787f1640b353275980"],"3cdb67100dc016748799a77218aa409478372d79":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"c4bf8c857cdf9b9be903cae84ef15985ad090a05":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c03778630c4604270d88c148afb8c7de35b51d3c":[],"e55782fb51a6e9789542818eb2161a3247f39ace":["c4bf8c857cdf9b9be903cae84ef15985ad090a05"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"727bb765ff2542275f6d31f67be18d7104bae148":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"7ef9afbd23e483ed1a80ed787f1640b353275980":["b8a9551fb5fcfdd678f5a7c22b9b1814529b1a8c","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"68c354ba50abc8ed5c5fe98901e61d68f93952bb":["c03778630c4604270d88c148afb8c7de35b51d3c","e55782fb51a6e9789542818eb2161a3247f39ace","727bb765ff2542275f6d31f67be18d7104bae148"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","c03778630c4604270d88c148afb8c7de35b51d3c","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}