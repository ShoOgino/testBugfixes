{"path":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexDimensionalValue(PerField,IndexableField).mjava","commits":[{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexDimensionalValue(PerField,IndexableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexDimensionalValue(PerField,StorableField).mjava","sourceNew":"  /** Called from processDocument to index one field's dimensional value */\n  private void indexDimensionalValue(PerField fp, IndexableField field) throws IOException {\n    int dimensionCount = field.fieldType().dimensionCount();\n\n    int dimensionNumBytes = field.fieldType().dimensionNumBytes();\n\n    // Record dimensions for this field; this setter will throw IllegalArgExc if\n    // the dimensions were already set to something different:\n    if (fp.fieldInfo.getDimensionCount() == 0) {\n      fieldInfos.globalFieldNumbers.setDimensions(fp.fieldInfo.number, fp.fieldInfo.name, dimensionCount, dimensionNumBytes);\n    }\n\n    fp.fieldInfo.setDimensions(dimensionCount, dimensionNumBytes);\n\n    if (fp.dimensionalValuesWriter == null) {\n      fp.dimensionalValuesWriter = new DimensionalValuesWriter(docWriter, fp.fieldInfo);\n    }\n    fp.dimensionalValuesWriter.addPackedValue(docState.docID, field.binaryValue());\n  }\n\n","sourceOld":"  /** Called from processDocument to index one field's dimensional value */\n  private void indexDimensionalValue(PerField fp, StorableField field) throws IOException {\n    int dimensionCount = field.fieldType().dimensionCount();\n\n    int dimensionNumBytes = field.fieldType().dimensionNumBytes();\n\n    // Record dimensions for this field; this setter will throw IllegalArgExc if\n    // the dimensions were already set to something different:\n    if (fp.fieldInfo.getDimensionCount() == 0) {\n      fieldInfos.globalFieldNumbers.setDimensions(fp.fieldInfo.number, fp.fieldInfo.name, dimensionCount, dimensionNumBytes);\n    }\n\n    fp.fieldInfo.setDimensions(dimensionCount, dimensionNumBytes);\n\n    if (fp.dimensionalValuesWriter == null) {\n      fp.dimensionalValuesWriter = new DimensionalValuesWriter(docWriter, fp.fieldInfo);\n    }\n    fp.dimensionalValuesWriter.addPackedValue(docState.docID, field.binaryValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexDimensionalValue(PerField,IndexableField).mjava","sourceNew":null,"sourceOld":"  /** Called from processDocument to index one field's dimensional value */\n  private void indexDimensionalValue(PerField fp, IndexableField field) throws IOException {\n    int dimensionCount = field.fieldType().dimensionCount();\n\n    int dimensionNumBytes = field.fieldType().dimensionNumBytes();\n\n    // Record dimensions for this field; this setter will throw IllegalArgExc if\n    // the dimensions were already set to something different:\n    if (fp.fieldInfo.getDimensionCount() == 0) {\n      fieldInfos.globalFieldNumbers.setDimensions(fp.fieldInfo.number, fp.fieldInfo.name, dimensionCount, dimensionNumBytes);\n    }\n\n    fp.fieldInfo.setDimensions(dimensionCount, dimensionNumBytes);\n\n    if (fp.dimensionalValuesWriter == null) {\n      fp.dimensionalValuesWriter = new DimensionalValuesWriter(docWriter, fp.fieldInfo);\n    }\n    fp.dimensionalValuesWriter.addPackedValue(docState.docID, field.binaryValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}