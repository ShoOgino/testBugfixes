{"path":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSorts#testQueries().mjava","commits":[{"id":"ee59cbb90ed1ef1b1c538ff2cc438b3e0956c3d6","date":1379216208,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSorts#testQueries().mjava","pathOld":"/dev/null","sourceNew":"  public void testQueries() throws Exception {\n    int n = atLeast(4);\n    for (int i = 0; i < n; i++) {\n      Filter odd = new QueryWrapperFilter(new TermQuery(new Term(\"oddeven\", \"odd\")));\n      assertQuery(new MatchAllDocsQuery(), null);\n      assertQuery(new TermQuery(new Term(\"english\", \"one\")), null);\n      assertQuery(new MatchAllDocsQuery(), odd);\n      assertQuery(new TermQuery(new Term(\"english\", \"four\")), odd);\n      BooleanQuery bq = new BooleanQuery();\n      bq.add(new TermQuery(new Term(\"english\", \"one\")), BooleanClause.Occur.SHOULD);\n      bq.add(new TermQuery(new Term(\"oddeven\", \"even\")), BooleanClause.Occur.SHOULD);\n      assertQuery(bq, null);\n      // force out of order\n      bq.add(new TermQuery(new Term(\"english\", \"two\")), BooleanClause.Occur.SHOULD);\n      bq.setMinimumNumberShouldMatch(2);\n      assertQuery(bq, null);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c7b8ea8201d2646377f6895771dc7dc83ef57f4","date":1379216535,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSorts#testQueries().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSorts#testQueries().mjava","sourceNew":"  public void testQueries() throws Exception {\n    int n = atLeast(4);\n    for (int i = 0; i < n; i++) {\n      Filter odd = new QueryWrapperFilter(new TermQuery(new Term(\"oddeven\", \"odd\")));\n      assertQuery(new MatchAllDocsQuery(), null);\n      assertQuery(new TermQuery(new Term(\"english\", \"one\")), null);\n      assertQuery(new MatchAllDocsQuery(), odd);\n      assertQuery(new TermQuery(new Term(\"english\", \"four\")), odd);\n      BooleanQuery bq = new BooleanQuery();\n      bq.add(new TermQuery(new Term(\"english\", \"one\")), BooleanClause.Occur.SHOULD);\n      bq.add(new TermQuery(new Term(\"oddeven\", \"even\")), BooleanClause.Occur.SHOULD);\n      assertQuery(bq, null);\n      // force in order\n      bq.add(new TermQuery(new Term(\"english\", \"two\")), BooleanClause.Occur.SHOULD);\n      bq.setMinimumNumberShouldMatch(2);\n      assertQuery(bq, null);\n    }\n  }\n\n","sourceOld":"  public void testQueries() throws Exception {\n    int n = atLeast(4);\n    for (int i = 0; i < n; i++) {\n      Filter odd = new QueryWrapperFilter(new TermQuery(new Term(\"oddeven\", \"odd\")));\n      assertQuery(new MatchAllDocsQuery(), null);\n      assertQuery(new TermQuery(new Term(\"english\", \"one\")), null);\n      assertQuery(new MatchAllDocsQuery(), odd);\n      assertQuery(new TermQuery(new Term(\"english\", \"four\")), odd);\n      BooleanQuery bq = new BooleanQuery();\n      bq.add(new TermQuery(new Term(\"english\", \"one\")), BooleanClause.Occur.SHOULD);\n      bq.add(new TermQuery(new Term(\"oddeven\", \"even\")), BooleanClause.Occur.SHOULD);\n      assertQuery(bq, null);\n      // force out of order\n      bq.add(new TermQuery(new Term(\"english\", \"two\")), BooleanClause.Occur.SHOULD);\n      bq.setMinimumNumberShouldMatch(2);\n      assertQuery(bq, null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f0e44787cffbb978aa2182761e3f9b184545a1e","date":1379265303,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSorts#testQueries().mjava","pathOld":"/dev/null","sourceNew":"  public void testQueries() throws Exception {\n    int n = atLeast(4);\n    for (int i = 0; i < n; i++) {\n      Filter odd = new QueryWrapperFilter(new TermQuery(new Term(\"oddeven\", \"odd\")));\n      assertQuery(new MatchAllDocsQuery(), null);\n      assertQuery(new TermQuery(new Term(\"english\", \"one\")), null);\n      assertQuery(new MatchAllDocsQuery(), odd);\n      assertQuery(new TermQuery(new Term(\"english\", \"four\")), odd);\n      BooleanQuery bq = new BooleanQuery();\n      bq.add(new TermQuery(new Term(\"english\", \"one\")), BooleanClause.Occur.SHOULD);\n      bq.add(new TermQuery(new Term(\"oddeven\", \"even\")), BooleanClause.Occur.SHOULD);\n      assertQuery(bq, null);\n      // force in order\n      bq.add(new TermQuery(new Term(\"english\", \"two\")), BooleanClause.Occur.SHOULD);\n      bq.setMinimumNumberShouldMatch(2);\n      assertQuery(bq, null);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSorts#testQueries().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSorts#testQueries().mjava","sourceNew":"  public void testQueries() throws Exception {\n    int n = atLeast(4);\n    for (int i = 0; i < n; i++) {\n      assertQuery(new MatchAllDocsQuery());\n      assertQuery(new TermQuery(new Term(\"english\", \"one\")));\n      BooleanQuery bq = new BooleanQuery();\n      bq.add(new TermQuery(new Term(\"english\", \"one\")), BooleanClause.Occur.SHOULD);\n      bq.add(new TermQuery(new Term(\"oddeven\", \"even\")), BooleanClause.Occur.SHOULD);\n      assertQuery(bq);\n      // force in order\n      bq.add(new TermQuery(new Term(\"english\", \"two\")), BooleanClause.Occur.SHOULD);\n      bq.setMinimumNumberShouldMatch(2);\n      assertQuery(bq);\n    }\n  }\n\n","sourceOld":"  public void testQueries() throws Exception {\n    int n = atLeast(4);\n    for (int i = 0; i < n; i++) {\n      Filter odd = new QueryWrapperFilter(new TermQuery(new Term(\"oddeven\", \"odd\")));\n      assertQuery(new MatchAllDocsQuery(), null);\n      assertQuery(new TermQuery(new Term(\"english\", \"one\")), null);\n      assertQuery(new MatchAllDocsQuery(), odd);\n      assertQuery(new TermQuery(new Term(\"english\", \"four\")), odd);\n      BooleanQuery bq = new BooleanQuery();\n      bq.add(new TermQuery(new Term(\"english\", \"one\")), BooleanClause.Occur.SHOULD);\n      bq.add(new TermQuery(new Term(\"oddeven\", \"even\")), BooleanClause.Occur.SHOULD);\n      assertQuery(bq, null);\n      // force in order\n      bq.add(new TermQuery(new Term(\"english\", \"two\")), BooleanClause.Occur.SHOULD);\n      bq.setMinimumNumberShouldMatch(2);\n      assertQuery(bq, null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSorts#testQueries().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSorts#testQueries().mjava","sourceNew":"  public void testQueries() throws Exception {\n    int n = atLeast(4);\n    for (int i = 0; i < n; i++) {\n      assertQuery(new MatchAllDocsQuery());\n      assertQuery(new TermQuery(new Term(\"english\", \"one\")));\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      bq.add(new TermQuery(new Term(\"english\", \"one\")), BooleanClause.Occur.SHOULD);\n      bq.add(new TermQuery(new Term(\"oddeven\", \"even\")), BooleanClause.Occur.SHOULD);\n      assertQuery(bq.build());\n      // force in order\n      bq.add(new TermQuery(new Term(\"english\", \"two\")), BooleanClause.Occur.SHOULD);\n      bq.setMinimumNumberShouldMatch(2);\n      assertQuery(bq.build());\n    }\n  }\n\n","sourceOld":"  public void testQueries() throws Exception {\n    int n = atLeast(4);\n    for (int i = 0; i < n; i++) {\n      assertQuery(new MatchAllDocsQuery());\n      assertQuery(new TermQuery(new Term(\"english\", \"one\")));\n      BooleanQuery bq = new BooleanQuery();\n      bq.add(new TermQuery(new Term(\"english\", \"one\")), BooleanClause.Occur.SHOULD);\n      bq.add(new TermQuery(new Term(\"oddeven\", \"even\")), BooleanClause.Occur.SHOULD);\n      assertQuery(bq);\n      // force in order\n      bq.add(new TermQuery(new Term(\"english\", \"two\")), BooleanClause.Occur.SHOULD);\n      bq.setMinimumNumberShouldMatch(2);\n      assertQuery(bq);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57c6c784f777a2cc8fa014507ea129526822714d","date":1579733373,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSorts#testQueries().mjava","pathOld":"lucene/expressions/src/test/org/apache/lucene/expressions/TestExpressionSorts#testQueries().mjava","sourceNew":"  public void testQueries() throws Exception {\n    int n = atLeast(1);\n    for (int i = 0; i < n; i++) {\n      assertQuery(new MatchAllDocsQuery());\n      assertQuery(new TermQuery(new Term(\"english\", \"one\")));\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      bq.add(new TermQuery(new Term(\"english\", \"one\")), BooleanClause.Occur.SHOULD);\n      bq.add(new TermQuery(new Term(\"oddeven\", \"even\")), BooleanClause.Occur.SHOULD);\n      assertQuery(bq.build());\n      // force in order\n      bq.add(new TermQuery(new Term(\"english\", \"two\")), BooleanClause.Occur.SHOULD);\n      bq.setMinimumNumberShouldMatch(2);\n      assertQuery(bq.build());\n    }\n  }\n\n","sourceOld":"  public void testQueries() throws Exception {\n    int n = atLeast(4);\n    for (int i = 0; i < n; i++) {\n      assertQuery(new MatchAllDocsQuery());\n      assertQuery(new TermQuery(new Term(\"english\", \"one\")));\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      bq.add(new TermQuery(new Term(\"english\", \"one\")), BooleanClause.Occur.SHOULD);\n      bq.add(new TermQuery(new Term(\"oddeven\", \"even\")), BooleanClause.Occur.SHOULD);\n      assertQuery(bq.build());\n      // force in order\n      bq.add(new TermQuery(new Term(\"english\", \"two\")), BooleanClause.Occur.SHOULD);\n      bq.setMinimumNumberShouldMatch(2);\n      assertQuery(bq.build());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57c6c784f777a2cc8fa014507ea129526822714d":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"6c7b8ea8201d2646377f6895771dc7dc83ef57f4":["ee59cbb90ed1ef1b1c538ff2cc438b3e0956c3d6"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ee59cbb90ed1ef1b1c538ff2cc438b3e0956c3d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57c6c784f777a2cc8fa014507ea129526822714d"],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6c7b8ea8201d2646377f6895771dc7dc83ef57f4"]},"commit2Childs":{"57c6c784f777a2cc8fa014507ea129526822714d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["57c6c784f777a2cc8fa014507ea129526822714d"],"6c7b8ea8201d2646377f6895771dc7dc83ef57f4":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ee59cbb90ed1ef1b1c538ff2cc438b3e0956c3d6","5f0e44787cffbb978aa2182761e3f9b184545a1e"],"ee59cbb90ed1ef1b1c538ff2cc438b3e0956c3d6":["6c7b8ea8201d2646377f6895771dc7dc83ef57f4"],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}