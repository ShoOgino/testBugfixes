{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#publishAndWaitForDownStates(int).mjava","commits":[{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publishAndWaitForDownStates(int).mjava","pathOld":"/dev/null","sourceNew":"  public void publishAndWaitForDownStates(int timeoutSeconds) throws KeeperException,\n      InterruptedException {\n\n    publishNodeAsDown(getNodeName());\n\n    Set<String> collectionsWithLocalReplica = ConcurrentHashMap.newKeySet();\n    for (CoreDescriptor descriptor : cc.getCoreDescriptors()) {\n      collectionsWithLocalReplica.add(descriptor.getCloudDescriptor().getCollectionName());\n    }\n\n    CountDownLatch latch = new CountDownLatch(collectionsWithLocalReplica.size());\n    for (String collectionWithLocalReplica : collectionsWithLocalReplica) {\n      zkStateReader.registerCollectionStateWatcher(collectionWithLocalReplica, (liveNodes, collectionState) -> {\n        if (collectionState == null)  return false;\n        boolean foundStates = true;\n        for (CoreDescriptor coreDescriptor : cc.getCoreDescriptors()) {\n          if (coreDescriptor.getCloudDescriptor().getCollectionName().equals(collectionWithLocalReplica))  {\n            Replica replica = collectionState.getReplica(coreDescriptor.getCloudDescriptor().getCoreNodeName());\n            if (replica == null || replica.getState() != Replica.State.DOWN) {\n              foundStates = false;\n            }\n          }\n        }\n\n        if (foundStates && collectionsWithLocalReplica.remove(collectionWithLocalReplica))  {\n          latch.countDown();\n        }\n        return foundStates;\n      });\n    }\n\n    boolean allPublishedDown = latch.await(timeoutSeconds, TimeUnit.SECONDS);\n    if (!allPublishedDown) {\n      log.warn(\"Timed out waiting to see all nodes published as DOWN in our cluster state.\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b366e7dd3172289251a86be96031af4002cd19c","date":1560790783,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publishAndWaitForDownStates(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#publishAndWaitForDownStates(int).mjava","sourceNew":"  public void publishAndWaitForDownStates(int timeoutSeconds) throws KeeperException,\n      InterruptedException {\n\n    publishNodeAsDown(getNodeName());\n\n    Set<String> collectionsWithLocalReplica = ConcurrentHashMap.newKeySet();\n    for (CoreDescriptor descriptor : cc.getCoreDescriptors()) {\n      collectionsWithLocalReplica.add(descriptor.getCloudDescriptor().getCollectionName());\n    }\n\n    CountDownLatch latch = new CountDownLatch(collectionsWithLocalReplica.size());\n    for (String collectionWithLocalReplica : collectionsWithLocalReplica) {\n      zkStateReader.registerDocCollectionWatcher(collectionWithLocalReplica, (collectionState) -> {\n        if (collectionState == null)  return false;\n        boolean foundStates = true;\n        for (CoreDescriptor coreDescriptor : cc.getCoreDescriptors()) {\n          if (coreDescriptor.getCloudDescriptor().getCollectionName().equals(collectionWithLocalReplica))  {\n            Replica replica = collectionState.getReplica(coreDescriptor.getCloudDescriptor().getCoreNodeName());\n            if (replica == null || replica.getState() != Replica.State.DOWN) {\n              foundStates = false;\n            }\n          }\n        }\n\n        if (foundStates && collectionsWithLocalReplica.remove(collectionWithLocalReplica))  {\n          latch.countDown();\n        }\n        return foundStates;\n      });\n    }\n\n    boolean allPublishedDown = latch.await(timeoutSeconds, TimeUnit.SECONDS);\n    if (!allPublishedDown) {\n      log.warn(\"Timed out waiting to see all nodes published as DOWN in our cluster state.\");\n    }\n  }\n\n","sourceOld":"  public void publishAndWaitForDownStates(int timeoutSeconds) throws KeeperException,\n      InterruptedException {\n\n    publishNodeAsDown(getNodeName());\n\n    Set<String> collectionsWithLocalReplica = ConcurrentHashMap.newKeySet();\n    for (CoreDescriptor descriptor : cc.getCoreDescriptors()) {\n      collectionsWithLocalReplica.add(descriptor.getCloudDescriptor().getCollectionName());\n    }\n\n    CountDownLatch latch = new CountDownLatch(collectionsWithLocalReplica.size());\n    for (String collectionWithLocalReplica : collectionsWithLocalReplica) {\n      zkStateReader.registerCollectionStateWatcher(collectionWithLocalReplica, (liveNodes, collectionState) -> {\n        if (collectionState == null)  return false;\n        boolean foundStates = true;\n        for (CoreDescriptor coreDescriptor : cc.getCoreDescriptors()) {\n          if (coreDescriptor.getCloudDescriptor().getCollectionName().equals(collectionWithLocalReplica))  {\n            Replica replica = collectionState.getReplica(coreDescriptor.getCloudDescriptor().getCoreNodeName());\n            if (replica == null || replica.getState() != Replica.State.DOWN) {\n              foundStates = false;\n            }\n          }\n        }\n\n        if (foundStates && collectionsWithLocalReplica.remove(collectionWithLocalReplica))  {\n          latch.countDown();\n        }\n        return foundStates;\n      });\n    }\n\n    boolean allPublishedDown = latch.await(timeoutSeconds, TimeUnit.SECONDS);\n    if (!allPublishedDown) {\n      log.warn(\"Timed out waiting to see all nodes published as DOWN in our cluster state.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b366e7dd3172289251a86be96031af4002cd19c":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b366e7dd3172289251a86be96031af4002cd19c"]},"commit2Childs":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["7b366e7dd3172289251a86be96031af4002cd19c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"7b366e7dd3172289251a86be96031af4002cd19c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}