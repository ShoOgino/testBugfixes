{"path":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getAutomata(String,Query,Set[HighlightFlag]).mjava","commits":[{"id":"f2e9861e4a2b724d9fc51b618714c579491b78d7","date":1479244606,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getAutomata(String,Query,Set[HighlightFlag]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getAutomata(String,Query,EnumSet[HighlightFlag]).mjava","sourceNew":"  protected CharacterRunAutomaton[] getAutomata(String field, Query query, Set<HighlightFlag> highlightFlags) {\n    return highlightFlags.contains(HighlightFlag.MULTI_TERM_QUERY)\n        ? MultiTermHighlighting.extractAutomata(query, field, !highlightFlags.contains(HighlightFlag.PHRASES),\n          this::preMultiTermQueryRewrite)\n        : ZERO_LEN_AUTOMATA_ARRAY;\n  }\n\n","sourceOld":"  protected CharacterRunAutomaton[] getAutomata(String field, Query query, EnumSet<HighlightFlag> highlightFlags) {\n    return highlightFlags.contains(HighlightFlag.MULTI_TERM_QUERY)\n        ? MultiTermHighlighting.extractAutomata(query, field, !highlightFlags.contains(HighlightFlag.PHRASES),\n          this::preMultiTermQueryRewrite)\n        : ZERO_LEN_AUTOMATA_ARRAY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getAutomata(String,Query,Set[HighlightFlag]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getAutomata(String,Query,EnumSet[HighlightFlag]).mjava","sourceNew":"  protected CharacterRunAutomaton[] getAutomata(String field, Query query, Set<HighlightFlag> highlightFlags) {\n    return highlightFlags.contains(HighlightFlag.MULTI_TERM_QUERY)\n        ? MultiTermHighlighting.extractAutomata(query, field, !highlightFlags.contains(HighlightFlag.PHRASES),\n          this::preMultiTermQueryRewrite)\n        : ZERO_LEN_AUTOMATA_ARRAY;\n  }\n\n","sourceOld":"  protected CharacterRunAutomaton[] getAutomata(String field, Query query, EnumSet<HighlightFlag> highlightFlags) {\n    return highlightFlags.contains(HighlightFlag.MULTI_TERM_QUERY)\n        ? MultiTermHighlighting.extractAutomata(query, field, !highlightFlags.contains(HighlightFlag.PHRASES),\n          this::preMultiTermQueryRewrite)\n        : ZERO_LEN_AUTOMATA_ARRAY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5675b3bced0b155f0ff8001ce2e1e502be7c92f6","date":1480972317,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getAutomata(String,Query,Set[HighlightFlag]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getAutomata(String,Query,Set[HighlightFlag]).mjava","sourceNew":"  protected CharacterRunAutomaton[] getAutomata(String field, Query query, Set<HighlightFlag> highlightFlags) {\n    return highlightFlags.contains(HighlightFlag.MULTI_TERM_QUERY)\n        ? MultiTermHighlighting.extractAutomata(query, getFieldMatcher(field), !highlightFlags.contains(HighlightFlag.PHRASES), this::preMultiTermQueryRewrite)\n        : ZERO_LEN_AUTOMATA_ARRAY;\n  }\n\n","sourceOld":"  protected CharacterRunAutomaton[] getAutomata(String field, Query query, Set<HighlightFlag> highlightFlags) {\n    return highlightFlags.contains(HighlightFlag.MULTI_TERM_QUERY)\n        ? MultiTermHighlighting.extractAutomata(query, field, !highlightFlags.contains(HighlightFlag.PHRASES),\n          this::preMultiTermQueryRewrite)\n        : ZERO_LEN_AUTOMATA_ARRAY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d","date":1481116359,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getAutomata(String,Query,Set[HighlightFlag]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getAutomata(String,Query,Set[HighlightFlag]).mjava","sourceNew":"  protected CharacterRunAutomaton[] getAutomata(String field, Query query, Set<HighlightFlag> highlightFlags) {\n    return highlightFlags.contains(HighlightFlag.MULTI_TERM_QUERY)\n        ? MultiTermHighlighting.extractAutomata(query, getFieldMatcher(field), !highlightFlags.contains(HighlightFlag.PHRASES), this::preMultiTermQueryRewrite)\n        : ZERO_LEN_AUTOMATA_ARRAY;\n  }\n\n","sourceOld":"  protected CharacterRunAutomaton[] getAutomata(String field, Query query, Set<HighlightFlag> highlightFlags) {\n    return highlightFlags.contains(HighlightFlag.MULTI_TERM_QUERY)\n        ? MultiTermHighlighting.extractAutomata(query, field, !highlightFlags.contains(HighlightFlag.PHRASES),\n          this::preMultiTermQueryRewrite)\n        : ZERO_LEN_AUTOMATA_ARRAY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getAutomata(String,Query,Set[HighlightFlag]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getAutomata(String,Query,Set[HighlightFlag]).mjava","sourceNew":"  protected CharacterRunAutomaton[] getAutomata(String field, Query query, Set<HighlightFlag> highlightFlags) {\n    return highlightFlags.contains(HighlightFlag.MULTI_TERM_QUERY)\n        ? MultiTermHighlighting.extractAutomata(query, getFieldMatcher(field), !highlightFlags.contains(HighlightFlag.PHRASES), this::preMultiTermQueryRewrite)\n        : ZERO_LEN_AUTOMATA_ARRAY;\n  }\n\n","sourceOld":"  protected CharacterRunAutomaton[] getAutomata(String field, Query query, Set<HighlightFlag> highlightFlags) {\n    return highlightFlags.contains(HighlightFlag.MULTI_TERM_QUERY)\n        ? MultiTermHighlighting.extractAutomata(query, field, !highlightFlags.contains(HighlightFlag.PHRASES),\n          this::preMultiTermQueryRewrite)\n        : ZERO_LEN_AUTOMATA_ARRAY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"795822cce6616d4035b5a4bdbb6c113ea2f715ba","date":1535599765,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getAutomata(String,Query,Set[HighlightFlag]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getAutomata(String,Query,Set[HighlightFlag]).mjava","sourceNew":"  protected CharacterRunAutomaton[] getAutomata(String field, Query query, Set<HighlightFlag> highlightFlags) {\n    // do we \"eagerly\" look in span queries for automata here, or do we not and let PhraseHelper handle those?\n    // if don't highlight phrases strictly,\n    final boolean lookInSpan =\n        !highlightFlags.contains(HighlightFlag.PHRASES) // no PhraseHelper\n        || highlightFlags.contains(HighlightFlag.WEIGHT_MATCHES); // Weight.Matches will find all\n\n    return highlightFlags.contains(HighlightFlag.MULTI_TERM_QUERY)\n        ? MultiTermHighlighting.extractAutomata(query, getFieldMatcher(field), lookInSpan, this::preMultiTermQueryRewrite)\n        : ZERO_LEN_AUTOMATA_ARRAY;\n  }\n\n","sourceOld":"  protected CharacterRunAutomaton[] getAutomata(String field, Query query, Set<HighlightFlag> highlightFlags) {\n    return highlightFlags.contains(HighlightFlag.MULTI_TERM_QUERY)\n        ? MultiTermHighlighting.extractAutomata(query, getFieldMatcher(field), !highlightFlags.contains(HighlightFlag.PHRASES), this::preMultiTermQueryRewrite)\n        : ZERO_LEN_AUTOMATA_ARRAY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7","date":1552575873,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getAutomata(String,Query,Set[HighlightFlag]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getAutomata(String,Query,Set[HighlightFlag]).mjava","sourceNew":"  protected CharacterRunAutomaton[] getAutomata(String field, Query query, Set<HighlightFlag> highlightFlags) {\n    // do we \"eagerly\" look in span queries for automata here, or do we not and let PhraseHelper handle those?\n    // if don't highlight phrases strictly,\n    final boolean lookInSpan =\n        !highlightFlags.contains(HighlightFlag.PHRASES) // no PhraseHelper\n        || highlightFlags.contains(HighlightFlag.WEIGHT_MATCHES); // Weight.Matches will find all\n\n    return highlightFlags.contains(HighlightFlag.MULTI_TERM_QUERY)\n        ? MultiTermHighlighting.extractAutomata(query, getFieldMatcher(field), lookInSpan)\n        : ZERO_LEN_AUTOMATA_ARRAY;\n  }\n\n","sourceOld":"  protected CharacterRunAutomaton[] getAutomata(String field, Query query, Set<HighlightFlag> highlightFlags) {\n    // do we \"eagerly\" look in span queries for automata here, or do we not and let PhraseHelper handle those?\n    // if don't highlight phrases strictly,\n    final boolean lookInSpan =\n        !highlightFlags.contains(HighlightFlag.PHRASES) // no PhraseHelper\n        || highlightFlags.contains(HighlightFlag.WEIGHT_MATCHES); // Weight.Matches will find all\n\n    return highlightFlags.contains(HighlightFlag.MULTI_TERM_QUERY)\n        ? MultiTermHighlighting.extractAutomata(query, getFieldMatcher(field), lookInSpan, this::preMultiTermQueryRewrite)\n        : ZERO_LEN_AUTOMATA_ARRAY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d35c63123a7e255b58f8cf3948eb9a6128100a32","date":1574872099,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getAutomata(String,Query,Set[HighlightFlag]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/UnifiedHighlighter#getAutomata(String,Query,Set[HighlightFlag]).mjava","sourceNew":"  protected LabelledCharArrayMatcher[] getAutomata(String field, Query query, Set<HighlightFlag> highlightFlags) {\n    // do we \"eagerly\" look in span queries for automata here, or do we not and let PhraseHelper handle those?\n    // if don't highlight phrases strictly,\n    final boolean lookInSpan =\n        !highlightFlags.contains(HighlightFlag.PHRASES) // no PhraseHelper\n        || highlightFlags.contains(HighlightFlag.WEIGHT_MATCHES); // Weight.Matches will find all\n\n    return highlightFlags.contains(HighlightFlag.MULTI_TERM_QUERY)\n        ? MultiTermHighlighting.extractAutomata(query, getFieldMatcher(field), lookInSpan)\n        : ZERO_LEN_AUTOMATA_ARRAY;\n  }\n\n","sourceOld":"  protected CharacterRunAutomaton[] getAutomata(String field, Query query, Set<HighlightFlag> highlightFlags) {\n    // do we \"eagerly\" look in span queries for automata here, or do we not and let PhraseHelper handle those?\n    // if don't highlight phrases strictly,\n    final boolean lookInSpan =\n        !highlightFlags.contains(HighlightFlag.PHRASES) // no PhraseHelper\n        || highlightFlags.contains(HighlightFlag.WEIGHT_MATCHES); // Weight.Matches will find all\n\n    return highlightFlags.contains(HighlightFlag.MULTI_TERM_QUERY)\n        ? MultiTermHighlighting.extractAutomata(query, getFieldMatcher(field), lookInSpan)\n        : ZERO_LEN_AUTOMATA_ARRAY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5675b3bced0b155f0ff8001ce2e1e502be7c92f6":["f2e9861e4a2b724d9fc51b618714c579491b78d7"],"f2e9861e4a2b724d9fc51b618714c579491b78d7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d":["f2e9861e4a2b724d9fc51b618714c579491b78d7","5675b3bced0b155f0ff8001ce2e1e502be7c92f6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f2e9861e4a2b724d9fc51b618714c579491b78d7"],"9856095f7afb5a607bf5e65077615ed91273508c":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d"],"d35c63123a7e255b58f8cf3948eb9a6128100a32":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"795822cce6616d4035b5a4bdbb6c113ea2f715ba":["ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d35c63123a7e255b58f8cf3948eb9a6128100a32"],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["795822cce6616d4035b5a4bdbb6c113ea2f715ba"]},"commit2Childs":{"5675b3bced0b155f0ff8001ce2e1e502be7c92f6":["ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d"],"f2e9861e4a2b724d9fc51b618714c579491b78d7":["5675b3bced0b155f0ff8001ce2e1e502be7c92f6","ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d","a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"ee8992dea79b51ba77a3fd1a5c0f94a5f0b8808d":["9856095f7afb5a607bf5e65077615ed91273508c","795822cce6616d4035b5a4bdbb6c113ea2f715ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f2e9861e4a2b724d9fc51b618714c579491b78d7","a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["9856095f7afb5a607bf5e65077615ed91273508c"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"d35c63123a7e255b58f8cf3948eb9a6128100a32":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"795822cce6616d4035b5a4bdbb6c113ea2f715ba":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["d35c63123a7e255b58f8cf3948eb9a6128100a32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}