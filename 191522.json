{"path":"solr/core/src/java/org/apache/solr/handler/SnapPuller.DirectoryFileFetcher#cleanup().mjava","commits":[{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller.DirectoryFileFetcher#cleanup().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * cleanup everything\n     */\n    private void cleanup() {\n      try {\n        outStream.close();\n      } catch (Exception e) {/* noop */\n          LOG.error(\"Error closing the file stream: \"+ this.saveAs ,e);\n      }\n      if (bytesDownloaded != size) {\n        //if the download is not complete then\n        //delete the file being downloaded\n        try {\n          copy2Dir.deleteFile(saveAs);\n        } catch (Exception e) {\n          LOG.error(\"Error deleting file in cleanup\" + e.getMessage());\n        }\n        //if the failure is due to a user abort it is returned nomally else an exception is thrown\n        if (!aborted)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Unable to download \" + fileName + \" completely. Downloaded \"\n                          + bytesDownloaded + \"!=\" + size);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller.DirectoryFileFetcher#cleanup().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * cleanup everything\n     */\n    private void cleanup() {\n      try {\n        outStream.close();\n      } catch (Exception e) {/* noop */\n          LOG.error(\"Error closing the file stream: \"+ this.saveAs ,e);\n      }\n      if (bytesDownloaded != size) {\n        //if the download is not complete then\n        //delete the file being downloaded\n        try {\n          copy2Dir.deleteFile(saveAs);\n        } catch (Exception e) {\n          LOG.error(\"Error deleting file in cleanup\" + e.getMessage());\n        }\n        //if the failure is due to a user abort it is returned nomally else an exception is thrown\n        if (!aborted)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Unable to download \" + fileName + \" completely. Downloaded \"\n                          + bytesDownloaded + \"!=\" + size);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dea8e36e8c36d610840396c282a5affe3f722f4e","date":1422297045,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#cleanup().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller.DirectoryFileFetcher#cleanup().mjava","sourceNew":"    /**\n     * cleanup everything\n     */\n    private void cleanup() {\n      try {\n        file.close();\n      } catch (Exception e) {/* no-op */\n        LOG.error(\"Error closing file: {}\", this.saveAs, e);\n      }\n      if (bytesDownloaded != size) {\n        //if the download is not complete then\n        //delete the file being downloaded\n        try {\n          file.delete();\n        } catch (Exception e) {\n          LOG.error(\"Error deleting file: {}\", this.saveAs, e);\n        }\n        //if the failure is due to a user abort it is returned normally else an exception is thrown\n        if (!aborted)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unable to download \" + fileName + \" completely. Downloaded \"\n                  + bytesDownloaded + \"!=\" + size);\n      }\n    }\n\n","sourceOld":"    /**\n     * cleanup everything\n     */\n    private void cleanup() {\n      try {\n        outStream.close();\n      } catch (Exception e) {/* noop */\n          LOG.error(\"Error closing the file stream: \"+ this.saveAs ,e);\n      }\n      if (bytesDownloaded != size) {\n        //if the download is not complete then\n        //delete the file being downloaded\n        try {\n          copy2Dir.deleteFile(saveAs);\n        } catch (Exception e) {\n          LOG.error(\"Error deleting file in cleanup\" + e.getMessage());\n        }\n        //if the failure is due to a user abort it is returned nomally else an exception is thrown\n        if (!aborted)\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Unable to download \" + fileName + \" completely. Downloaded \"\n                          + bytesDownloaded + \"!=\" + size);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dea8e36e8c36d610840396c282a5affe3f722f4e":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f2126b84bd093fa3d921582a109a0ee578c28126":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dea8e36e8c36d610840396c282a5affe3f722f4e"]},"commit2Childs":{"dea8e36e8c36d610840396c282a5affe3f722f4e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9405f486872f1e416304dfe389741f4ee2f8a4d","f2126b84bd093fa3d921582a109a0ee578c28126"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["dea8e36e8c36d610840396c282a5affe3f722f4e","f2126b84bd093fa3d921582a109a0ee578c28126"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}