{"path":"src/test/org/apache/solr/handler/component/TermVectorComponentTest#testDistributed().mjava","commits":[{"id":"3a04bdb295a363a052bdc5a2fcd6e8ce977aa51c","date":1224776958,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/component/TermVectorComponentTest#testDistributed().mjava","pathOld":"/dev/null","sourceNew":"  public void testDistributed() throws Exception {\n    SolrCore core = h.getCore();\n    TermVectorComponent tvComp = (TermVectorComponent) core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    ResponseBuilder rb = new ResponseBuilder();\n    rb.stage = ResponseBuilder.STAGE_GET_FIELDS;\n    rb.shards = new String[]{\"localhost:0\", \"localhost:1\", \"localhost:2\", \"localhost:3\"};//we don't actually call these, since we are going to invoke distributedProcess directly\n    rb.resultIds = new HashMap<Object, ShardDoc>();\n    rb.components = new ArrayList<SearchComponent>();\n    rb.components.add(tvComp);\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.IDF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    rb.req = new LocalSolrQueryRequest(core, params);\n    rb.outgoing = new ArrayList<ShardRequest>();\n    //one doc per shard, but make sure there are enough docs to go around\n    for (int i = 0; i < rb.shards.length; i++){\n      ShardDoc doc = new ShardDoc();\n      doc.id = i; //must be a valid doc that was indexed.\n      doc.score = 1 - (i / (float)rb.shards.length);\n      doc.positionInResponse = i;\n      doc.shard = rb.shards[i];\n      doc.orderInShard = 0;\n      rb.resultIds.put(doc.id, doc);\n    }\n\n    int result = tvComp.distributedProcess(rb);\n    assertTrue(result + \" does not equal: \" + ResponseBuilder.STAGE_DONE, result == ResponseBuilder.STAGE_DONE);\n    //one outgoing per shard\n    assertTrue(\"rb.outgoing Size: \" + rb.outgoing.size() + \" is not: \" + rb.shards.length, rb.outgoing.size() == rb.shards.length);\n    for (ShardRequest request : rb.outgoing) {\n      ModifiableSolrParams solrParams = request.params;\n      System.out.println(\"Shard: \" + Arrays.asList(request.shards) + \" Params: \" + solrParams);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2686717a32b40222a4361bd16ae295511cb8ce7","date":1226500515,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/component/TermVectorComponentTest#testDistributed().mjava","pathOld":"src/test/org/apache/solr/handler/component/TermVectorComponentTest#testDistributed().mjava","sourceNew":"  public void testDistributed() throws Exception {\n    SolrCore core = h.getCore();\n    TermVectorComponent tvComp = (TermVectorComponent) core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    ResponseBuilder rb = new ResponseBuilder();\n    rb.stage = ResponseBuilder.STAGE_GET_FIELDS;\n    rb.shards = new String[]{\"localhost:0\", \"localhost:1\", \"localhost:2\", \"localhost:3\"};//we don't actually call these, since we are going to invoke distributedProcess directly\n    rb.resultIds = new HashMap<Object, ShardDoc>();\n    rb.components = new ArrayList<SearchComponent>();\n    rb.components.add(tvComp);\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    rb.req = new LocalSolrQueryRequest(core, params);\n    rb.outgoing = new ArrayList<ShardRequest>();\n    //one doc per shard, but make sure there are enough docs to go around\n    for (int i = 0; i < rb.shards.length; i++){\n      ShardDoc doc = new ShardDoc();\n      doc.id = i; //must be a valid doc that was indexed.\n      doc.score = 1 - (i / (float)rb.shards.length);\n      doc.positionInResponse = i;\n      doc.shard = rb.shards[i];\n      doc.orderInShard = 0;\n      rb.resultIds.put(doc.id, doc);\n    }\n\n    int result = tvComp.distributedProcess(rb);\n    assertTrue(result + \" does not equal: \" + ResponseBuilder.STAGE_DONE, result == ResponseBuilder.STAGE_DONE);\n    //one outgoing per shard\n    assertTrue(\"rb.outgoing Size: \" + rb.outgoing.size() + \" is not: \" + rb.shards.length, rb.outgoing.size() == rb.shards.length);\n    for (ShardRequest request : rb.outgoing) {\n      ModifiableSolrParams solrParams = request.params;\n      System.out.println(\"Shard: \" + Arrays.asList(request.shards) + \" Params: \" + solrParams);\n    }\n  }\n\n","sourceOld":"  public void testDistributed() throws Exception {\n    SolrCore core = h.getCore();\n    TermVectorComponent tvComp = (TermVectorComponent) core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    ResponseBuilder rb = new ResponseBuilder();\n    rb.stage = ResponseBuilder.STAGE_GET_FIELDS;\n    rb.shards = new String[]{\"localhost:0\", \"localhost:1\", \"localhost:2\", \"localhost:3\"};//we don't actually call these, since we are going to invoke distributedProcess directly\n    rb.resultIds = new HashMap<Object, ShardDoc>();\n    rb.components = new ArrayList<SearchComponent>();\n    rb.components.add(tvComp);\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.IDF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    rb.req = new LocalSolrQueryRequest(core, params);\n    rb.outgoing = new ArrayList<ShardRequest>();\n    //one doc per shard, but make sure there are enough docs to go around\n    for (int i = 0; i < rb.shards.length; i++){\n      ShardDoc doc = new ShardDoc();\n      doc.id = i; //must be a valid doc that was indexed.\n      doc.score = 1 - (i / (float)rb.shards.length);\n      doc.positionInResponse = i;\n      doc.shard = rb.shards[i];\n      doc.orderInShard = 0;\n      rb.resultIds.put(doc.id, doc);\n    }\n\n    int result = tvComp.distributedProcess(rb);\n    assertTrue(result + \" does not equal: \" + ResponseBuilder.STAGE_DONE, result == ResponseBuilder.STAGE_DONE);\n    //one outgoing per shard\n    assertTrue(\"rb.outgoing Size: \" + rb.outgoing.size() + \" is not: \" + rb.shards.length, rb.outgoing.size() == rb.shards.length);\n    for (ShardRequest request : rb.outgoing) {\n      ModifiableSolrParams solrParams = request.params;\n      System.out.println(\"Shard: \" + Arrays.asList(request.shards) + \" Params: \" + solrParams);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testDistributed().mjava","pathOld":"src/test/org/apache/solr/handler/component/TermVectorComponentTest#testDistributed().mjava","sourceNew":"  public void testDistributed() throws Exception {\n    SolrCore core = h.getCore();\n    TermVectorComponent tvComp = (TermVectorComponent) core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    ResponseBuilder rb = new ResponseBuilder();\n    rb.stage = ResponseBuilder.STAGE_GET_FIELDS;\n    rb.shards = new String[]{\"localhost:0\", \"localhost:1\", \"localhost:2\", \"localhost:3\"};//we don't actually call these, since we are going to invoke distributedProcess directly\n    rb.resultIds = new HashMap<Object, ShardDoc>();\n    rb.components = new ArrayList<SearchComponent>();\n    rb.components.add(tvComp);\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    rb.req = new LocalSolrQueryRequest(core, params);\n    rb.outgoing = new ArrayList<ShardRequest>();\n    //one doc per shard, but make sure there are enough docs to go around\n    for (int i = 0; i < rb.shards.length; i++){\n      ShardDoc doc = new ShardDoc();\n      doc.id = i; //must be a valid doc that was indexed.\n      doc.score = 1 - (i / (float)rb.shards.length);\n      doc.positionInResponse = i;\n      doc.shard = rb.shards[i];\n      doc.orderInShard = 0;\n      rb.resultIds.put(doc.id, doc);\n    }\n\n    int result = tvComp.distributedProcess(rb);\n    assertTrue(result + \" does not equal: \" + ResponseBuilder.STAGE_DONE, result == ResponseBuilder.STAGE_DONE);\n    //one outgoing per shard\n    assertTrue(\"rb.outgoing Size: \" + rb.outgoing.size() + \" is not: \" + rb.shards.length, rb.outgoing.size() == rb.shards.length);\n    for (ShardRequest request : rb.outgoing) {\n      ModifiableSolrParams solrParams = request.params;\n      System.out.println(\"Shard: \" + Arrays.asList(request.shards) + \" Params: \" + solrParams);\n    }\n  }\n\n","sourceOld":"  public void testDistributed() throws Exception {\n    SolrCore core = h.getCore();\n    TermVectorComponent tvComp = (TermVectorComponent) core.getSearchComponent(\"tvComponent\");\n    assertTrue(\"tvComp is null and it shouldn't be\", tvComp != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    ResponseBuilder rb = new ResponseBuilder();\n    rb.stage = ResponseBuilder.STAGE_GET_FIELDS;\n    rb.shards = new String[]{\"localhost:0\", \"localhost:1\", \"localhost:2\", \"localhost:3\"};//we don't actually call these, since we are going to invoke distributedProcess directly\n    rb.resultIds = new HashMap<Object, ShardDoc>();\n    rb.components = new ArrayList<SearchComponent>();\n    rb.components.add(tvComp);\n    params.add(CommonParams.Q, \"id:0\");\n    params.add(CommonParams.QT, \"tvrh\");\n    params.add(TermVectorParams.TF, \"true\");\n    params.add(TermVectorParams.DF, \"true\");\n    params.add(TermVectorParams.OFFSETS, \"true\");\n    params.add(TermVectorParams.POSITIONS, \"true\");\n    params.add(TermVectorComponent.COMPONENT_NAME, \"true\");\n    rb.req = new LocalSolrQueryRequest(core, params);\n    rb.outgoing = new ArrayList<ShardRequest>();\n    //one doc per shard, but make sure there are enough docs to go around\n    for (int i = 0; i < rb.shards.length; i++){\n      ShardDoc doc = new ShardDoc();\n      doc.id = i; //must be a valid doc that was indexed.\n      doc.score = 1 - (i / (float)rb.shards.length);\n      doc.positionInResponse = i;\n      doc.shard = rb.shards[i];\n      doc.orderInShard = 0;\n      rb.resultIds.put(doc.id, doc);\n    }\n\n    int result = tvComp.distributedProcess(rb);\n    assertTrue(result + \" does not equal: \" + ResponseBuilder.STAGE_DONE, result == ResponseBuilder.STAGE_DONE);\n    //one outgoing per shard\n    assertTrue(\"rb.outgoing Size: \" + rb.outgoing.size() + \" is not: \" + rb.shards.length, rb.outgoing.size() == rb.shards.length);\n    for (ShardRequest request : rb.outgoing) {\n      ModifiableSolrParams solrParams = request.params;\n      System.out.println(\"Shard: \" + Arrays.asList(request.shards) + \" Params: \" + solrParams);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a2686717a32b40222a4361bd16ae295511cb8ce7":["3a04bdb295a363a052bdc5a2fcd6e8ce977aa51c"],"ad94625fb8d088209f46650c8097196fec67f00c":["a2686717a32b40222a4361bd16ae295511cb8ce7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a04bdb295a363a052bdc5a2fcd6e8ce977aa51c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["3a04bdb295a363a052bdc5a2fcd6e8ce977aa51c"],"a2686717a32b40222a4361bd16ae295511cb8ce7":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"3a04bdb295a363a052bdc5a2fcd6e8ce977aa51c":["a2686717a32b40222a4361bd16ae295511cb8ce7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}