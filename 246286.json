{"path":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#equals(Object).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#equals(Object).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Compare the given CategoryPath to another one. For two category paths to\n   * be considered equal, only the path they contain needs to be identical The\n   * unused capacity of the objects is not considered in the comparison.\n   */\n  @Override\n  public boolean equals(Object obj) {\n    if (obj instanceof CategoryPath) {\n      CategoryPath other = (CategoryPath) obj;\n      if (other.ncomponents != this.ncomponents) {\n        return false;\n      }\n      // Unfortunately, Arrays.equal() can only compare entire arrays,\n      // and in our case we potentially have unused parts of the arrays\n      // that must not be compared... I wish that some future version\n      // of Java has a offset and length parameter to Arrays.equal\n      // (sort of like System.arraycopy()).\n      if (ncomponents == 0) {\n        return true; // nothing to compare...\n      }\n      for (int i = 0; i < ncomponents; i++) {\n        if (this.ends[i] != other.ends[i]) {\n          return false;\n        }\n      }\n      int len = ends[ncomponents - 1]; \n      for (int i = 0; i < len; i++) {\n        if (this.chars[i] != other.chars[i]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#equals(Object).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Compare the given CategoryPath to another one. For two category paths to\n   * be considered equal, only the path they contain needs to be identical The\n   * unused capacity of the objects is not considered in the comparison.\n   */\n  @Override\n  public boolean equals(Object obj) {\n    if (obj instanceof CategoryPath) {\n      CategoryPath other = (CategoryPath) obj;\n      if (other.ncomponents != this.ncomponents) {\n        return false;\n      }\n      // Unfortunately, Arrays.equal() can only compare entire arrays,\n      // and in our case we potentially have unused parts of the arrays\n      // that must not be compared... I wish that some future version\n      // of Java has a offset and length parameter to Arrays.equal\n      // (sort of like System.arraycopy()).\n      if (ncomponents == 0) {\n        return true; // nothing to compare...\n      }\n      for (int i = 0; i < ncomponents; i++) {\n        if (this.ends[i] != other.ends[i]) {\n          return false;\n        }\n      }\n      int len = ends[ncomponents - 1]; \n      for (int i = 0; i < len; i++) {\n        if (this.chars[i] != other.chars[i]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#equals(Object).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Compare the given CategoryPath to another one. For two category paths to\n   * be considered equal, only the path they contain needs to be identical The\n   * unused capacity of the objects is not considered in the comparison.\n   */\n  @Override\n  public boolean equals(Object obj) {\n    if (obj instanceof CategoryPath) {\n      CategoryPath other = (CategoryPath) obj;\n      if (other.ncomponents != this.ncomponents) {\n        return false;\n      }\n      // Unfortunately, Arrays.equal() can only compare entire arrays,\n      // and in our case we potentially have unused parts of the arrays\n      // that must not be compared... I wish that some future version\n      // of Java has a offset and length parameter to Arrays.equal\n      // (sort of like System.arraycopy()).\n      if (ncomponents == 0) {\n        return true; // nothing to compare...\n      }\n      for (int i = 0; i < ncomponents; i++) {\n        if (this.ends[i] != other.ends[i]) {\n          return false;\n        }\n      }\n      int len = ends[ncomponents - 1]; \n      for (int i = 0; i < len; i++) {\n        if (this.chars[i] != other.chars[i]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#equals(Object).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#equals(Object).mjava","sourceNew":"  /**\n   * Compare the given CategoryPath to another one. For two category paths to\n   * be considered equal, only the path they contain needs to be identical The\n   * unused capacity of the objects is not considered in the comparison.\n   */\n  @Override\n  public boolean equals(Object obj) {\n    if (obj instanceof CategoryPath) {\n      CategoryPath other = (CategoryPath) obj;\n      if (other.ncomponents != this.ncomponents) {\n        return false;\n      }\n      // Unfortunately, Arrays.equal() can only compare entire arrays,\n      // and in our case we potentially have unused parts of the arrays\n      // that must not be compared... I wish that some future version\n      // of Java has a offset and length parameter to Arrays.equal\n      // (sort of like System.arraycopy()).\n      if (ncomponents == 0) {\n        return true; // nothing to compare...\n      }\n      for (int i = 0; i < ncomponents; i++) {\n        if (this.ends[i] != other.ends[i]) {\n          return false;\n        }\n      }\n      int len = ends[ncomponents - 1]; \n      for (int i = 0; i < len; i++) {\n        if (this.chars[i] != other.chars[i]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Compare the given CategoryPath to another one. For two category paths to\n   * be considered equal, only the path they contain needs to be identical The\n   * unused capacity of the objects is not considered in the comparison.\n   */\n  @Override\n  public boolean equals(Object obj) {\n    if (obj instanceof CategoryPath) {\n      CategoryPath other = (CategoryPath) obj;\n      if (other.ncomponents != this.ncomponents) {\n        return false;\n      }\n      // Unfortunately, Arrays.equal() can only compare entire arrays,\n      // and in our case we potentially have unused parts of the arrays\n      // that must not be compared... I wish that some future version\n      // of Java has a offset and length parameter to Arrays.equal\n      // (sort of like System.arraycopy()).\n      if (ncomponents == 0) {\n        return true; // nothing to compare...\n      }\n      for (int i = 0; i < ncomponents; i++) {\n        if (this.ends[i] != other.ends[i]) {\n          return false;\n        }\n      }\n      int len = ends[ncomponents - 1]; \n      for (int i = 0; i < len; i++) {\n        if (this.chars[i] != other.chars[i]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}