{"path":"solr/core/src/java/org/apache/solr/util/VersionedFile#delete(Collection[File]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/VersionedFile#delete(Collection[File]).mjava","pathOld":"solr/src/java/org/apache/solr/util/VersionedFile#delete(Collection[File]).mjava","sourceNew":"  private static synchronized void delete(Collection<File> files) {\n    synchronized (deleteList) {\n      deleteList.addAll(files);\n      List<File> deleted = new ArrayList<File>();\n      for (File df : deleteList) {\n        try {\n          df.delete();\n          // deleteList.remove(df);\n          deleted.add(df);\n        } catch (SecurityException e) {\n          if (!df.exists()) {\n            deleted.add(df);\n          }\n        }\n      }\n      deleteList.removeAll(deleted);\n    }\n  }\n\n","sourceOld":"  private static synchronized void delete(Collection<File> files) {\n    synchronized (deleteList) {\n      deleteList.addAll(files);\n      List<File> deleted = new ArrayList<File>();\n      for (File df : deleteList) {\n        try {\n          df.delete();\n          // deleteList.remove(df);\n          deleted.add(df);\n        } catch (SecurityException e) {\n          if (!df.exists()) {\n            deleted.add(df);\n          }\n        }\n      }\n      deleteList.removeAll(deleted);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/VersionedFile#delete(Collection[File]).mjava","pathOld":"solr/src/java/org/apache/solr/util/VersionedFile#delete(Collection[File]).mjava","sourceNew":"  private static synchronized void delete(Collection<File> files) {\n    synchronized (deleteList) {\n      deleteList.addAll(files);\n      List<File> deleted = new ArrayList<File>();\n      for (File df : deleteList) {\n        try {\n          df.delete();\n          // deleteList.remove(df);\n          deleted.add(df);\n        } catch (SecurityException e) {\n          if (!df.exists()) {\n            deleted.add(df);\n          }\n        }\n      }\n      deleteList.removeAll(deleted);\n    }\n  }\n\n","sourceOld":"  private static synchronized void delete(Collection<File> files) {\n    synchronized (deleteList) {\n      deleteList.addAll(files);\n      List<File> deleted = new ArrayList<File>();\n      for (File df : deleteList) {\n        try {\n          df.delete();\n          // deleteList.remove(df);\n          deleted.add(df);\n        } catch (SecurityException e) {\n          if (!df.exists()) {\n            deleted.add(df);\n          }\n        }\n      }\n      deleteList.removeAll(deleted);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/VersionedFile#delete(Collection[File]).mjava","pathOld":"solr/src/java/org/apache/solr/util/VersionedFile#delete(Collection[File]).mjava","sourceNew":"  private static synchronized void delete(Collection<File> files) {\n    synchronized (deleteList) {\n      deleteList.addAll(files);\n      List<File> deleted = new ArrayList<File>();\n      for (File df : deleteList) {\n        try {\n          df.delete();\n          // deleteList.remove(df);\n          deleted.add(df);\n        } catch (SecurityException e) {\n          if (!df.exists()) {\n            deleted.add(df);\n          }\n        }\n      }\n      deleteList.removeAll(deleted);\n    }\n  }\n\n","sourceOld":"  private static synchronized void delete(Collection<File> files) {\n    synchronized (deleteList) {\n      deleteList.addAll(files);\n      List<File> deleted = new ArrayList<File>();\n      for (File df : deleteList) {\n        try {\n          df.delete();\n          // deleteList.remove(df);\n          deleted.add(df);\n        } catch (SecurityException e) {\n          if (!df.exists()) {\n            deleted.add(df);\n          }\n        }\n      }\n      deleteList.removeAll(deleted);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/VersionedFile#delete(Collection[File]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/VersionedFile#delete(Collection[File]).mjava","sourceNew":"  private static synchronized void delete(Collection<File> files) {\n    synchronized (deleteList) {\n      deleteList.addAll(files);\n      List<File> deleted = new ArrayList<>();\n      for (File df : deleteList) {\n        try {\n          df.delete();\n          // deleteList.remove(df);\n          deleted.add(df);\n        } catch (SecurityException e) {\n          if (!df.exists()) {\n            deleted.add(df);\n          }\n        }\n      }\n      deleteList.removeAll(deleted);\n    }\n  }\n\n","sourceOld":"  private static synchronized void delete(Collection<File> files) {\n    synchronized (deleteList) {\n      deleteList.addAll(files);\n      List<File> deleted = new ArrayList<File>();\n      for (File df : deleteList) {\n        try {\n          df.delete();\n          // deleteList.remove(df);\n          deleted.add(df);\n        } catch (SecurityException e) {\n          if (!df.exists()) {\n            deleted.add(df);\n          }\n        }\n      }\n      deleteList.removeAll(deleted);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cbc3688252d4a8045d69a164236b2cf87b721f17","date":1409846185,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/VersionedFile#delete(Collection[File]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/VersionedFile#delete(Collection[File]).mjava","sourceNew":"  private static synchronized void delete(Collection<File> files) {\n    synchronized (deleteList) {\n      deleteList.addAll(files);\n      List<File> deleted = new ArrayList<>();\n      for (File df : deleteList) {\n        try {\n          try {\n            Files.deleteIfExists(df.toPath());\n          } catch (IOException cause) {\n            // TODO: should this class care if a file couldnt be deleted?\n            // this just emulates previous behavior, where only SecurityException would be handled.\n          }\n          // deleteList.remove(df);\n          deleted.add(df);\n        } catch (SecurityException e) {\n          if (!df.exists()) {\n            deleted.add(df);\n          }\n        }\n      }\n      deleteList.removeAll(deleted);\n    }\n  }\n\n","sourceOld":"  private static synchronized void delete(Collection<File> files) {\n    synchronized (deleteList) {\n      deleteList.addAll(files);\n      List<File> deleted = new ArrayList<>();\n      for (File df : deleteList) {\n        try {\n          df.delete();\n          // deleteList.remove(df);\n          deleted.add(df);\n        } catch (SecurityException e) {\n          if (!df.exists()) {\n            deleted.add(df);\n          }\n        }\n      }\n      deleteList.removeAll(deleted);\n    }\n  }\n\n","bugFix":["7d6b8491b15b391062b53404b4af3c8f18924090"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0158ced21948b6626f733c1c42c1e18d94449789","date":1462994341,"type":3,"author":"Bartosz Krasi≈Ñski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/VersionedFile#delete(Collection[File]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/VersionedFile#delete(Collection[File]).mjava","sourceNew":"  private static synchronized void delete(Collection<File> files) {\n    synchronized (deleteList) {\n      deleteList.addAll(files);\n      List<File> deleted = new ArrayList<>();\n      for (File df : deleteList) {\n        try {\n          try {\n            Files.deleteIfExists(df.toPath());\n          } catch (IOException cause) {\n            // TODO: should this class care if a file couldn't be deleted?\n            // this just emulates previous behavior, where only SecurityException would be handled.\n          }\n          // deleteList.remove(df);\n          deleted.add(df);\n        } catch (SecurityException e) {\n          if (!df.exists()) {\n            deleted.add(df);\n          }\n        }\n      }\n      deleteList.removeAll(deleted);\n    }\n  }\n\n","sourceOld":"  private static synchronized void delete(Collection<File> files) {\n    synchronized (deleteList) {\n      deleteList.addAll(files);\n      List<File> deleted = new ArrayList<>();\n      for (File df : deleteList) {\n        try {\n          try {\n            Files.deleteIfExists(df.toPath());\n          } catch (IOException cause) {\n            // TODO: should this class care if a file couldnt be deleted?\n            // this just emulates previous behavior, where only SecurityException would be handled.\n          }\n          // deleteList.remove(df);\n          deleted.add(df);\n        } catch (SecurityException e) {\n          if (!df.exists()) {\n            deleted.add(df);\n          }\n        }\n      }\n      deleteList.removeAll(deleted);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/VersionedFile#delete(Collection[File]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/VersionedFile#delete(Collection[File]).mjava","sourceNew":"  private static synchronized void delete(Collection<File> files) {\n    synchronized (deleteList) {\n      deleteList.addAll(files);\n      List<File> deleted = new ArrayList<>();\n      for (File df : deleteList) {\n        try {\n          try {\n            Files.deleteIfExists(df.toPath());\n          } catch (IOException cause) {\n            // TODO: should this class care if a file couldn't be deleted?\n            // this just emulates previous behavior, where only SecurityException would be handled.\n          }\n          // deleteList.remove(df);\n          deleted.add(df);\n        } catch (SecurityException e) {\n          if (!df.exists()) {\n            deleted.add(df);\n          }\n        }\n      }\n      deleteList.removeAll(deleted);\n    }\n  }\n\n","sourceOld":"  private static synchronized void delete(Collection<File> files) {\n    synchronized (deleteList) {\n      deleteList.addAll(files);\n      List<File> deleted = new ArrayList<>();\n      for (File df : deleteList) {\n        try {\n          try {\n            Files.deleteIfExists(df.toPath());\n          } catch (IOException cause) {\n            // TODO: should this class care if a file couldnt be deleted?\n            // this just emulates previous behavior, where only SecurityException would be handled.\n          }\n          // deleteList.remove(df);\n          deleted.add(df);\n        } catch (SecurityException e) {\n          if (!df.exists()) {\n            deleted.add(df);\n          }\n        }\n      }\n      deleteList.removeAll(deleted);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/VersionedFile#delete(Collection[File]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/VersionedFile#delete(Collection[File]).mjava","sourceNew":"  private static synchronized void delete(Collection<File> files) {\n    synchronized (deleteList) {\n      deleteList.addAll(files);\n      List<File> deleted = new ArrayList<>();\n      for (File df : deleteList) {\n        try {\n          try {\n            Files.deleteIfExists(df.toPath());\n          } catch (IOException cause) {\n            // TODO: should this class care if a file couldn't be deleted?\n            // this just emulates previous behavior, where only SecurityException would be handled.\n          }\n          // deleteList.remove(df);\n          deleted.add(df);\n        } catch (SecurityException e) {\n          if (!df.exists()) {\n            deleted.add(df);\n          }\n        }\n      }\n      deleteList.removeAll(deleted);\n    }\n  }\n\n","sourceOld":"  private static synchronized void delete(Collection<File> files) {\n    synchronized (deleteList) {\n      deleteList.addAll(files);\n      List<File> deleted = new ArrayList<>();\n      for (File df : deleteList) {\n        try {\n          try {\n            Files.deleteIfExists(df.toPath());\n          } catch (IOException cause) {\n            // TODO: should this class care if a file couldnt be deleted?\n            // this just emulates previous behavior, where only SecurityException would be handled.\n          }\n          // deleteList.remove(df);\n          deleted.add(df);\n        } catch (SecurityException e) {\n          if (!df.exists()) {\n            deleted.add(df);\n          }\n        }\n      }\n      deleteList.removeAll(deleted);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c26f00b574427b55127e869b935845554afde1fa"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["cbc3688252d4a8045d69a164236b2cf87b721f17","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["cbc3688252d4a8045d69a164236b2cf87b721f17","0158ced21948b6626f733c1c42c1e18d94449789"],"0158ced21948b6626f733c1c42c1e18d94449789":["cbc3688252d4a8045d69a164236b2cf87b721f17"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","0158ced21948b6626f733c1c42c1e18d94449789"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0158ced21948b6626f733c1c42c1e18d94449789":["d470c8182e92b264680e34081b75e70a9f2b3c89"]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}