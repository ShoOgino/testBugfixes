{"path":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#changeWriter(SolrCore,boolean,boolean).mjava","commits":[{"id":"1adea4accc297f58fd9d8de3c820fd576eb0d396","date":1441292844,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#changeWriter(SolrCore,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  // closes and opens index writers without any locking\n  private void changeWriter(SolrCore core, boolean rollback, boolean openNewWriter) throws IOException {\n    String coreName = core.getName();\n\n    // We need to null this so it picks up the new writer next get call.\n    // We do this before anything else in case we hit an exception.\n    refCntWriter = null;\n    IndexWriter iw = indexWriter; // temp reference just for closing\n    indexWriter = null; // null this out now in case we fail, so we won't use the writer again\n\n    if (iw != null) {\n      if (!rollback) {\n        try {\n          log.info(\"Closing old IndexWriter... core=\" + coreName);\n          iw.close();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error closing old IndexWriter. core=\" + coreName, e);\n        }\n      } else {\n        try {\n          log.info(\"Rollback old IndexWriter... core=\" + coreName);\n          iw.rollback();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error rolling back old IndexWriter. core=\" + coreName, e);\n        }\n      }\n    }\n\n    if (openNewWriter) {\n      indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\");\n      log.info(\"New IndexWriter is ready to be used.\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5d615d62cd8aff3690943d765e46942551f98b6","date":1474881754,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#changeWriter(SolrCore,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#changeWriter(SolrCore,boolean,boolean).mjava","sourceNew":"  // closes and opens index writers without any locking\n  private void changeWriter(SolrCore core, boolean rollback, boolean openNewWriter) throws IOException {\n    String coreName = core.getName();\n\n    // We need to null this so it picks up the new writer next get call.\n    // We do this before anything else in case we hit an exception.\n    refCntWriter = null;\n    IndexWriter iw = indexWriter; // temp reference just for closing\n    indexWriter = null; // null this out now in case we fail, so we won't use the writer again\n\n    if (iw != null) {\n      if (!rollback) {\n        try {\n          log.debug(\"Closing old IndexWriter... core=\" + coreName);\n          iw.close();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error closing old IndexWriter. core=\" + coreName, e);\n        }\n      } else {\n        try {\n          log.debug(\"Rollback old IndexWriter... core=\" + coreName);\n          iw.rollback();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error rolling back old IndexWriter. core=\" + coreName, e);\n        }\n      }\n    }\n\n    if (openNewWriter) {\n      indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\");\n      log.info(\"New IndexWriter is ready to be used.\");\n    }\n  }\n\n","sourceOld":"  // closes and opens index writers without any locking\n  private void changeWriter(SolrCore core, boolean rollback, boolean openNewWriter) throws IOException {\n    String coreName = core.getName();\n\n    // We need to null this so it picks up the new writer next get call.\n    // We do this before anything else in case we hit an exception.\n    refCntWriter = null;\n    IndexWriter iw = indexWriter; // temp reference just for closing\n    indexWriter = null; // null this out now in case we fail, so we won't use the writer again\n\n    if (iw != null) {\n      if (!rollback) {\n        try {\n          log.info(\"Closing old IndexWriter... core=\" + coreName);\n          iw.close();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error closing old IndexWriter. core=\" + coreName, e);\n        }\n      } else {\n        try {\n          log.info(\"Rollback old IndexWriter... core=\" + coreName);\n          iw.rollback();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error rolling back old IndexWriter. core=\" + coreName, e);\n        }\n      }\n    }\n\n    if (openNewWriter) {\n      indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\");\n      log.info(\"New IndexWriter is ready to be used.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#changeWriter(SolrCore,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#changeWriter(SolrCore,boolean,boolean).mjava","sourceNew":"  // closes and opens index writers without any locking\n  private void changeWriter(SolrCore core, boolean rollback, boolean openNewWriter) throws IOException {\n    String coreName = core.getName();\n\n    // We need to null this so it picks up the new writer next get call.\n    // We do this before anything else in case we hit an exception.\n    refCntWriter = null;\n    IndexWriter iw = indexWriter; // temp reference just for closing\n    indexWriter = null; // null this out now in case we fail, so we won't use the writer again\n\n    if (iw != null) {\n      if (!rollback) {\n        try {\n          log.debug(\"Closing old IndexWriter... core=\" + coreName);\n          iw.close();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error closing old IndexWriter. core=\" + coreName, e);\n        }\n      } else {\n        try {\n          log.debug(\"Rollback old IndexWriter... core=\" + coreName);\n          iw.rollback();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error rolling back old IndexWriter. core=\" + coreName, e);\n        }\n      }\n    }\n\n    if (openNewWriter) {\n      indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\");\n      log.info(\"New IndexWriter is ready to be used.\");\n    }\n  }\n\n","sourceOld":"  // closes and opens index writers without any locking\n  private void changeWriter(SolrCore core, boolean rollback, boolean openNewWriter) throws IOException {\n    String coreName = core.getName();\n\n    // We need to null this so it picks up the new writer next get call.\n    // We do this before anything else in case we hit an exception.\n    refCntWriter = null;\n    IndexWriter iw = indexWriter; // temp reference just for closing\n    indexWriter = null; // null this out now in case we fail, so we won't use the writer again\n\n    if (iw != null) {\n      if (!rollback) {\n        try {\n          log.info(\"Closing old IndexWriter... core=\" + coreName);\n          iw.close();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error closing old IndexWriter. core=\" + coreName, e);\n        }\n      } else {\n        try {\n          log.info(\"Rollback old IndexWriter... core=\" + coreName);\n          iw.rollback();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error rolling back old IndexWriter. core=\" + coreName, e);\n        }\n      }\n    }\n\n    if (openNewWriter) {\n      indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\");\n      log.info(\"New IndexWriter is ready to be used.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#changeWriter(SolrCore,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#changeWriter(SolrCore,boolean,boolean).mjava","sourceNew":"  // closes and opens index writers without any locking\n  private void changeWriter(SolrCore core, boolean rollback, boolean openNewWriter) throws IOException {\n    String coreName = core.getName();\n\n    // We need to null this so it picks up the new writer next get call.\n    // We do this before anything else in case we hit an exception.\n    refCntWriter = null;\n    IndexWriter iw = indexWriter; // temp reference just for closing\n    indexWriter = null; // null this out now in case we fail, so we won't use the writer again\n\n    if (iw != null) {\n      if (!rollback) {\n        try {\n          log.debug(\"Closing old IndexWriter... core=\" + coreName);\n          iw.close();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error closing old IndexWriter. core=\" + coreName, e);\n        }\n      } else {\n        try {\n          log.debug(\"Rollback old IndexWriter... core=\" + coreName);\n          iw.rollback();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error rolling back old IndexWriter. core=\" + coreName, e);\n        }\n      }\n    }\n\n    if (openNewWriter) {\n      indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\");\n      log.info(\"New IndexWriter is ready to be used.\");\n    }\n  }\n\n","sourceOld":"  // closes and opens index writers without any locking\n  private void changeWriter(SolrCore core, boolean rollback, boolean openNewWriter) throws IOException {\n    String coreName = core.getName();\n\n    // We need to null this so it picks up the new writer next get call.\n    // We do this before anything else in case we hit an exception.\n    refCntWriter = null;\n    IndexWriter iw = indexWriter; // temp reference just for closing\n    indexWriter = null; // null this out now in case we fail, so we won't use the writer again\n\n    if (iw != null) {\n      if (!rollback) {\n        try {\n          log.info(\"Closing old IndexWriter... core=\" + coreName);\n          iw.close();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error closing old IndexWriter. core=\" + coreName, e);\n        }\n      } else {\n        try {\n          log.info(\"Rollback old IndexWriter... core=\" + coreName);\n          iw.rollback();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error rolling back old IndexWriter. core=\" + coreName, e);\n        }\n      }\n    }\n\n    if (openNewWriter) {\n      indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\");\n      log.info(\"New IndexWriter is ready to be used.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"740d649f013f07efbeb73ca854f106c60166e7c0","date":1587431295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#changeWriter(SolrCore,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#changeWriter(SolrCore,boolean,boolean).mjava","sourceNew":"  // closes and opens index writers without any locking\n  private void changeWriter(SolrCore core, boolean rollback, boolean openNewWriter) throws IOException {\n    String coreName = core.getName();\n\n    // We need to null this so it picks up the new writer next get call.\n    // We do this before anything else in case we hit an exception.\n    refCntWriter = null;\n    IndexWriter iw = indexWriter; // temp reference just for closing\n    indexWriter = null; // null this out now in case we fail, so we won't use the writer again\n\n    if (iw != null) {\n      if (!rollback) {\n        try {\n          log.debug(\"Closing old IndexWriter... core= {}\", coreName);\n          iw.close();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error closing old IndexWriter. core=\" + coreName, e);\n        }\n      } else {\n        try {\n          log.debug(\"Rollback old IndexWriter... core={}\", coreName);\n          iw.rollback();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error rolling back old IndexWriter. core=\" + coreName, e);\n        }\n      }\n    }\n\n    if (openNewWriter) {\n      indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\");\n      log.info(\"New IndexWriter is ready to be used.\");\n    }\n  }\n\n","sourceOld":"  // closes and opens index writers without any locking\n  private void changeWriter(SolrCore core, boolean rollback, boolean openNewWriter) throws IOException {\n    String coreName = core.getName();\n\n    // We need to null this so it picks up the new writer next get call.\n    // We do this before anything else in case we hit an exception.\n    refCntWriter = null;\n    IndexWriter iw = indexWriter; // temp reference just for closing\n    indexWriter = null; // null this out now in case we fail, so we won't use the writer again\n\n    if (iw != null) {\n      if (!rollback) {\n        try {\n          log.debug(\"Closing old IndexWriter... core=\" + coreName);\n          iw.close();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error closing old IndexWriter. core=\" + coreName, e);\n        }\n      } else {\n        try {\n          log.debug(\"Rollback old IndexWriter... core=\" + coreName);\n          iw.rollback();\n        } catch (Exception e) {\n          SolrException.log(log, \"Error rolling back old IndexWriter. core=\" + coreName, e);\n        }\n      }\n    }\n\n    if (openNewWriter) {\n      indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\");\n      log.info(\"New IndexWriter is ready to be used.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1adea4accc297f58fd9d8de3c820fd576eb0d396":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a5d615d62cd8aff3690943d765e46942551f98b6":["1adea4accc297f58fd9d8de3c820fd576eb0d396"],"740d649f013f07efbeb73ca854f106c60166e7c0":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["1adea4accc297f58fd9d8de3c820fd576eb0d396","a5d615d62cd8aff3690943d765e46942551f98b6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["1adea4accc297f58fd9d8de3c820fd576eb0d396","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["740d649f013f07efbeb73ca854f106c60166e7c0"]},"commit2Childs":{"1adea4accc297f58fd9d8de3c820fd576eb0d396":["a5d615d62cd8aff3690943d765e46942551f98b6","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a5d615d62cd8aff3690943d765e46942551f98b6":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"740d649f013f07efbeb73ca854f106c60166e7c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1adea4accc297f58fd9d8de3c820fd576eb0d396"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["740d649f013f07efbeb73ca854f106c60166e7c0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}