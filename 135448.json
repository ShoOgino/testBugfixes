{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","sourceNew":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    doc.add(newField(\"zzz\", \"a b c\", customType));\n    doc.add(newField(\"aaa\", \"a b c\", customType));\n    doc.add(newField(\"zzz\", \"1 2 3\", customType));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    Document doc2 = r.document(0);\n    Iterator<IndexableField> it = doc2.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    doc.add(newField(\"zzz\", \"a b c\", customType));\n    doc.add(newField(\"aaa\", \"a b c\", customType));\n    doc.add(newField(\"zzz\", \"1 2 3\", customType));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    Document doc2 = r.document(0);\n    Iterator<IndexableField> it = doc2.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","sourceNew":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    doc.add(newField(\"zzz\", \"a b c\", customType));\n    doc.add(newField(\"aaa\", \"a b c\", customType));\n    doc.add(newField(\"zzz\", \"1 2 3\", customType));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    Document doc2 = r.document(0);\n    Iterator<IndexableField> it = doc2.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    doc.add(newField(\"zzz\", \"a b c\", customType));\n    doc.add(newField(\"aaa\", \"a b c\", customType));\n    doc.add(newField(\"zzz\", \"1 2 3\", customType));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    Document doc2 = r.document(0);\n    Iterator<IndexableField> it = doc2.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","date":1341839195,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","sourceNew":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    doc.add(newField(\"zzz\", \"a b c\", customType));\n    doc.add(newField(\"aaa\", \"a b c\", customType));\n    doc.add(newField(\"zzz\", \"1 2 3\", customType));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    StoredDocument doc2 = r.document(0);\n    Iterator<StorableField> it = doc2.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    doc.add(newField(\"zzz\", \"a b c\", customType));\n    doc.add(newField(\"aaa\", \"a b c\", customType));\n    doc.add(newField(\"zzz\", \"1 2 3\", customType));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    Document doc2 = r.document(0);\n    Iterator<IndexableField> it = doc2.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","sourceNew":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    doc.add(newField(\"zzz\", \"a b c\", customType));\n    doc.add(newField(\"aaa\", \"a b c\", customType));\n    doc.add(newField(\"zzz\", \"1 2 3\", customType));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    StoredDocument doc2 = r.document(0);\n    Iterator<StorableField> it = doc2.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    doc.add(newField(\"zzz\", \"a b c\", customType));\n    doc.add(newField(\"aaa\", \"a b c\", customType));\n    doc.add(newField(\"zzz\", \"1 2 3\", customType));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    Document doc2 = r.document(0);\n    Iterator<IndexableField> it = doc2.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70b55953b6a72596cb534ead735a8b849a473cac","date":1363634568,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseStoredFieldsFormatTestCase#testStoredFieldsOrder().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testStoredFieldsOrder().mjava","sourceNew":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    doc.add(newField(\"zzz\", \"a b c\", customType));\n    doc.add(newField(\"aaa\", \"a b c\", customType));\n    doc.add(newField(\"zzz\", \"1 2 3\", customType));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    StoredDocument doc2 = r.document(0);\n    Iterator<StorableField> it = doc2.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-1727: make sure doc fields are stored in order\n  public void testStoredFieldsOrder() throws Throwable {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n\n    FieldType customType = new FieldType();\n    customType.setStored(true);\n    doc.add(newField(\"zzz\", \"a b c\", customType));\n    doc.add(newField(\"aaa\", \"a b c\", customType));\n    doc.add(newField(\"zzz\", \"1 2 3\", customType));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    StoredDocument doc2 = r.document(0);\n    Iterator<StorableField> it = doc2.getFields().iterator();\n    assertTrue(it.hasNext());\n    Field f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"aaa\");\n    assertEquals(f.stringValue(), \"a b c\");\n\n    assertTrue(it.hasNext());\n    f = (Field) it.next();\n    assertEquals(f.name(), \"zzz\");\n    assertEquals(f.stringValue(), \"1 2 3\");\n    assertFalse(it.hasNext());\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"1d028314cced5858683a1bb4741423d0f934257b":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"70b55953b6a72596cb534ead735a8b849a473cac":["1d028314cced5858683a1bb4741423d0f934257b"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70b55953b6a72596cb534ead735a8b849a473cac"]},"commit2Childs":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["1d028314cced5858683a1bb4741423d0f934257b"],"1d028314cced5858683a1bb4741423d0f934257b":["70b55953b6a72596cb534ead735a8b849a473cac"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"70b55953b6a72596cb534ead735a8b849a473cac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","1d028314cced5858683a1bb4741423d0f934257b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}