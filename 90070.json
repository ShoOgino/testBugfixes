{"path":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLTupleStreamParser#parse(String,int,String,String,AggregationMode,boolean,StreamContext).mjava","commits":[{"id":"c39fd399a800c79eff2beaad702c9b6190d499fd","date":1453997311,"type":1,"author":"jbernste","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLTupleStreamParser#parse(String,int,String,String,AggregationMode,boolean,StreamContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLTupleStreamParser#parse(String,int,String,String,AggregationMode,boolean).mjava","sourceNew":"    public static TupleStream parse(String sql,\n                                    int numWorkers,\n                                    String workerCollection,\n                                    String workerZkhost,\n                                    AggregationMode aggregationMode,\n                                    boolean includeMetadata,\n                                    StreamContext context) throws IOException {\n      SqlParser parser = new SqlParser();\n      Statement statement = parser.createStatement(sql);\n\n      SQLVisitor sqlVistor = new SQLVisitor(new StringBuilder());\n\n      sqlVistor.process(statement, new Integer(0));\n      sqlVistor.reverseAliases();\n\n      TupleStream sqlStream = null;\n\n      if(sqlVistor.groupByQuery) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doGroupByWithAggregatesFacets(sqlVistor);\n        } else {\n          context.numWorkers = numWorkers;\n          sqlStream = doGroupByWithAggregates(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else if(sqlVistor.isDistinct) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doSelectDistinctFacets(sqlVistor);\n        } else {\n          context.numWorkers = numWorkers;\n          sqlStream = doSelectDistinct(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else {\n        sqlStream = doSelect(sqlVistor);\n      }\n\n      if(includeMetadata) {\n        sqlStream = new MetadataStream(sqlStream, sqlVistor);\n      }\n\n      sqlStream.setStreamContext(context);\n      return sqlStream;\n    }\n\n","sourceOld":"    public static TupleStream parse(String sql,\n                                    int numWorkers,\n                                    String workerCollection,\n                                    String workerZkhost,\n                                    AggregationMode aggregationMode,\n                                    boolean includeMetadata) throws IOException {\n      SqlParser parser = new SqlParser();\n      Statement statement = parser.createStatement(sql);\n\n      SQLVisitor sqlVistor = new SQLVisitor(new StringBuilder());\n\n      sqlVistor.process(statement, new Integer(0));\n      sqlVistor.reverseAliases();\n\n      TupleStream sqlStream = null;\n\n      if(sqlVistor.groupByQuery) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doGroupByWithAggregatesFacets(sqlVistor);\n        } else {\n          sqlStream = doGroupByWithAggregates(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else if(sqlVistor.isDistinct) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doSelectDistinctFacets(sqlVistor);\n        } else {\n          sqlStream = doSelectDistinct(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else {\n        sqlStream = doSelect(sqlVistor);\n      }\n\n      if(includeMetadata) {\n        sqlStream = new MetadataStream(sqlStream, sqlVistor);\n      }\n\n      return sqlStream;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d15e34266d75e4e8b95da046cd0afc812367b38","date":1454246129,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLTupleStreamParser#parse(String,int,String,String,AggregationMode,boolean,StreamContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLTupleStreamParser#parse(String,int,String,String,AggregationMode,boolean).mjava","sourceNew":"    public static TupleStream parse(String sql,\n                                    int numWorkers,\n                                    String workerCollection,\n                                    String workerZkhost,\n                                    AggregationMode aggregationMode,\n                                    boolean includeMetadata,\n                                    StreamContext context) throws IOException {\n      SqlParser parser = new SqlParser();\n      Statement statement = parser.createStatement(sql);\n\n      SQLVisitor sqlVistor = new SQLVisitor(new StringBuilder());\n\n      sqlVistor.process(statement, new Integer(0));\n      sqlVistor.reverseAliases();\n\n      TupleStream sqlStream = null;\n\n      if(sqlVistor.groupByQuery) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doGroupByWithAggregatesFacets(sqlVistor);\n        } else {\n          context.numWorkers = numWorkers;\n          sqlStream = doGroupByWithAggregates(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else if(sqlVistor.isDistinct) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doSelectDistinctFacets(sqlVistor);\n        } else {\n          context.numWorkers = numWorkers;\n          sqlStream = doSelectDistinct(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else {\n        sqlStream = doSelect(sqlVistor);\n      }\n\n      if(includeMetadata) {\n        sqlStream = new MetadataStream(sqlStream, sqlVistor);\n      }\n\n      sqlStream.setStreamContext(context);\n      return sqlStream;\n    }\n\n","sourceOld":"    public static TupleStream parse(String sql,\n                                    int numWorkers,\n                                    String workerCollection,\n                                    String workerZkhost,\n                                    AggregationMode aggregationMode,\n                                    boolean includeMetadata) throws IOException {\n      SqlParser parser = new SqlParser();\n      Statement statement = parser.createStatement(sql);\n\n      SQLVisitor sqlVistor = new SQLVisitor(new StringBuilder());\n\n      sqlVistor.process(statement, new Integer(0));\n      sqlVistor.reverseAliases();\n\n      TupleStream sqlStream = null;\n\n      if(sqlVistor.groupByQuery) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doGroupByWithAggregatesFacets(sqlVistor);\n        } else {\n          sqlStream = doGroupByWithAggregates(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else if(sqlVistor.isDistinct) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doSelectDistinctFacets(sqlVistor);\n        } else {\n          sqlStream = doSelectDistinct(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else {\n        sqlStream = doSelect(sqlVistor);\n      }\n\n      if(includeMetadata) {\n        sqlStream = new MetadataStream(sqlStream, sqlVistor);\n      }\n\n      return sqlStream;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2af3708aa5f155e8f27905be60c119be0e39be8","date":1454361673,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLTupleStreamParser#parse(String,int,String,String,AggregationMode,boolean,StreamContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLTupleStreamParser#parse(String,int,String,String,AggregationMode,boolean,StreamContext).mjava","sourceNew":"    public static TupleStream parse(String sql,\n                                    int numWorkers,\n                                    String workerCollection,\n                                    String workerZkhost,\n                                    AggregationMode aggregationMode,\n                                    boolean includeMetadata,\n                                    StreamContext context) throws IOException {\n      SqlParser parser = new SqlParser();\n      Statement statement = parser.createStatement(sql);\n\n      SQLVisitor sqlVistor = new SQLVisitor(new StringBuilder());\n\n      sqlVistor.process(statement, new Integer(0));\n      sqlVistor.reverseAliases();\n\n      TupleStream sqlStream = null;\n\n      if(sqlVistor.table.toUpperCase(Locale.getDefault()).contains(\"_CATALOGS_\")) {\n        if (!sqlVistor.fields.contains(\"TABLE_CAT\")) {\n          throw new IOException(\"When querying _CATALOGS_, fields must contain column TABLE_CAT\");\n        }\n\n        sqlStream = new CatalogsStream(defaultZkhost);\n      } else if(sqlVistor.groupByQuery) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doGroupByWithAggregatesFacets(sqlVistor);\n        } else {\n          context.numWorkers = numWorkers;\n          sqlStream = doGroupByWithAggregates(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else if(sqlVistor.isDistinct) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doSelectDistinctFacets(sqlVistor);\n        } else {\n          context.numWorkers = numWorkers;\n          sqlStream = doSelectDistinct(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else {\n        sqlStream = doSelect(sqlVistor);\n      }\n\n      if(includeMetadata) {\n        sqlStream = new MetadataStream(sqlStream, sqlVistor);\n      }\n\n      sqlStream.setStreamContext(context);\n      return sqlStream;\n    }\n\n","sourceOld":"    public static TupleStream parse(String sql,\n                                    int numWorkers,\n                                    String workerCollection,\n                                    String workerZkhost,\n                                    AggregationMode aggregationMode,\n                                    boolean includeMetadata,\n                                    StreamContext context) throws IOException {\n      SqlParser parser = new SqlParser();\n      Statement statement = parser.createStatement(sql);\n\n      SQLVisitor sqlVistor = new SQLVisitor(new StringBuilder());\n\n      sqlVistor.process(statement, new Integer(0));\n      sqlVistor.reverseAliases();\n\n      TupleStream sqlStream = null;\n\n      if(sqlVistor.groupByQuery) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doGroupByWithAggregatesFacets(sqlVistor);\n        } else {\n          context.numWorkers = numWorkers;\n          sqlStream = doGroupByWithAggregates(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else if(sqlVistor.isDistinct) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doSelectDistinctFacets(sqlVistor);\n        } else {\n          context.numWorkers = numWorkers;\n          sqlStream = doSelectDistinct(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else {\n        sqlStream = doSelect(sqlVistor);\n      }\n\n      if(includeMetadata) {\n        sqlStream = new MetadataStream(sqlStream, sqlVistor);\n      }\n\n      sqlStream.setStreamContext(context);\n      return sqlStream;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b3e07e133490ed38c90c0c915c44c30f7d2523c","date":1454437146,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLTupleStreamParser#parse(String,int,String,String,AggregationMode,boolean,StreamContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLTupleStreamParser#parse(String,int,String,String,AggregationMode,boolean,StreamContext).mjava","sourceNew":"    public static TupleStream parse(String sql,\n                                    int numWorkers,\n                                    String workerCollection,\n                                    String workerZkhost,\n                                    AggregationMode aggregationMode,\n                                    boolean includeMetadata,\n                                    StreamContext context) throws IOException {\n      SqlParser parser = new SqlParser();\n      Statement statement = parser.createStatement(sql);\n\n      SQLVisitor sqlVistor = new SQLVisitor(new StringBuilder());\n\n      sqlVistor.process(statement, new Integer(0));\n      sqlVistor.reverseAliases();\n\n      TupleStream sqlStream = null;\n\n      if(sqlVistor.table.toUpperCase(Locale.getDefault()).contains(\"_CATALOGS_\")) {\n        if (!sqlVistor.fields.contains(\"TABLE_CAT\")) {\n          throw new IOException(\"When querying _CATALOGS_, fields must contain column TABLE_CAT\");\n        }\n\n        sqlStream = new CatalogsStream(defaultZkhost);\n      } else if(sqlVistor.table.toUpperCase(Locale.getDefault()).contains(\"_SCHEMAS_\")) {\n        if (!sqlVistor.fields.contains(\"TABLE_SCHEM\") || !sqlVistor.fields.contains(\"TABLE_CATALOG\")) {\n          throw new IOException(\"When querying _SCHEMAS_, fields must contain both TABLE_SCHEM and TABLE_CATALOG\");\n        }\n\n        sqlStream = new SchemasStream(defaultZkhost);\n      } else if(sqlVistor.groupByQuery) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doGroupByWithAggregatesFacets(sqlVistor);\n        } else {\n          context.numWorkers = numWorkers;\n          sqlStream = doGroupByWithAggregates(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else if(sqlVistor.isDistinct) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doSelectDistinctFacets(sqlVistor);\n        } else {\n          context.numWorkers = numWorkers;\n          sqlStream = doSelectDistinct(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else {\n        sqlStream = doSelect(sqlVistor);\n      }\n\n      if(includeMetadata) {\n        sqlStream = new MetadataStream(sqlStream, sqlVistor);\n      }\n\n      sqlStream.setStreamContext(context);\n      return sqlStream;\n    }\n\n","sourceOld":"    public static TupleStream parse(String sql,\n                                    int numWorkers,\n                                    String workerCollection,\n                                    String workerZkhost,\n                                    AggregationMode aggregationMode,\n                                    boolean includeMetadata,\n                                    StreamContext context) throws IOException {\n      SqlParser parser = new SqlParser();\n      Statement statement = parser.createStatement(sql);\n\n      SQLVisitor sqlVistor = new SQLVisitor(new StringBuilder());\n\n      sqlVistor.process(statement, new Integer(0));\n      sqlVistor.reverseAliases();\n\n      TupleStream sqlStream = null;\n\n      if(sqlVistor.table.toUpperCase(Locale.getDefault()).contains(\"_CATALOGS_\")) {\n        if (!sqlVistor.fields.contains(\"TABLE_CAT\")) {\n          throw new IOException(\"When querying _CATALOGS_, fields must contain column TABLE_CAT\");\n        }\n\n        sqlStream = new CatalogsStream(defaultZkhost);\n      } else if(sqlVistor.groupByQuery) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doGroupByWithAggregatesFacets(sqlVistor);\n        } else {\n          context.numWorkers = numWorkers;\n          sqlStream = doGroupByWithAggregates(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else if(sqlVistor.isDistinct) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doSelectDistinctFacets(sqlVistor);\n        } else {\n          context.numWorkers = numWorkers;\n          sqlStream = doSelectDistinct(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else {\n        sqlStream = doSelect(sqlVistor);\n      }\n\n      if(includeMetadata) {\n        sqlStream = new MetadataStream(sqlStream, sqlVistor);\n      }\n\n      sqlStream.setStreamContext(context);\n      return sqlStream;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd1f5a977dc3b97799ed300423294e2c457774f","date":1454537003,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLTupleStreamParser#parse(String,int,String,String,AggregationMode,boolean,StreamContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLTupleStreamParser#parse(String,int,String,String,AggregationMode,boolean,StreamContext).mjava","sourceNew":"    public static TupleStream parse(String sql,\n                                    int numWorkers,\n                                    String workerCollection,\n                                    String workerZkhost,\n                                    AggregationMode aggregationMode,\n                                    boolean includeMetadata,\n                                    StreamContext context) throws IOException {\n      SqlParser parser = new SqlParser();\n      Statement statement = parser.createStatement(sql);\n\n      SQLVisitor sqlVistor = new SQLVisitor(new StringBuilder());\n\n      sqlVistor.process(statement, new Integer(0));\n      sqlVistor.reverseAliases();\n\n      TupleStream sqlStream = null;\n\n      if(sqlVistor.table.toUpperCase(Locale.getDefault()).contains(\"_CATALOGS_\")) {\n        if (!sqlVistor.fields.contains(\"TABLE_CAT\")) {\n          throw new IOException(\"When querying _CATALOGS_, fields must contain column TABLE_CAT\");\n        }\n\n        sqlStream = new CatalogsStream(defaultZkhost);\n      } else if(sqlVistor.table.toUpperCase(Locale.getDefault()).contains(\"_SCHEMAS_\")) {\n        if (!sqlVistor.fields.contains(\"TABLE_SCHEM\") || !sqlVistor.fields.contains(\"TABLE_CATALOG\")) {\n          throw new IOException(\"When querying _SCHEMAS_, fields must contain both TABLE_SCHEM and TABLE_CATALOG\");\n        }\n\n        sqlStream = new SchemasStream(defaultZkhost);\n      } else if(sqlVistor.groupByQuery) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doGroupByWithAggregatesFacets(sqlVistor);\n        } else {\n          context.numWorkers = numWorkers;\n          sqlStream = doGroupByWithAggregates(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else if(sqlVistor.isDistinct) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doSelectDistinctFacets(sqlVistor);\n        } else {\n          context.numWorkers = numWorkers;\n          sqlStream = doSelectDistinct(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else {\n        sqlStream = doSelect(sqlVistor);\n      }\n\n      if(includeMetadata) {\n        sqlStream = new MetadataStream(sqlStream, sqlVistor);\n      }\n\n      sqlStream.setStreamContext(context);\n      return sqlStream;\n    }\n\n","sourceOld":"    public static TupleStream parse(String sql,\n                                    int numWorkers,\n                                    String workerCollection,\n                                    String workerZkhost,\n                                    AggregationMode aggregationMode,\n                                    boolean includeMetadata,\n                                    StreamContext context) throws IOException {\n      SqlParser parser = new SqlParser();\n      Statement statement = parser.createStatement(sql);\n\n      SQLVisitor sqlVistor = new SQLVisitor(new StringBuilder());\n\n      sqlVistor.process(statement, new Integer(0));\n      sqlVistor.reverseAliases();\n\n      TupleStream sqlStream = null;\n\n      if(sqlVistor.table.toUpperCase(Locale.getDefault()).contains(\"_CATALOGS_\")) {\n        if (!sqlVistor.fields.contains(\"TABLE_CAT\")) {\n          throw new IOException(\"When querying _CATALOGS_, fields must contain column TABLE_CAT\");\n        }\n\n        sqlStream = new CatalogsStream(defaultZkhost);\n      } else if(sqlVistor.groupByQuery) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doGroupByWithAggregatesFacets(sqlVistor);\n        } else {\n          context.numWorkers = numWorkers;\n          sqlStream = doGroupByWithAggregates(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else if(sqlVistor.isDistinct) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doSelectDistinctFacets(sqlVistor);\n        } else {\n          context.numWorkers = numWorkers;\n          sqlStream = doSelectDistinct(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else {\n        sqlStream = doSelect(sqlVistor);\n      }\n\n      if(includeMetadata) {\n        sqlStream = new MetadataStream(sqlStream, sqlVistor);\n      }\n\n      sqlStream.setStreamContext(context);\n      return sqlStream;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLTupleStreamParser#parse(String,int,String,String,AggregationMode,boolean,StreamContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLTupleStreamParser#parse(String,int,String,String,AggregationMode).mjava","sourceNew":"    public static TupleStream parse(String sql,\n                                    int numWorkers,\n                                    String workerCollection,\n                                    String workerZkhost,\n                                    AggregationMode aggregationMode,\n                                    boolean includeMetadata,\n                                    StreamContext context) throws IOException {\n      SqlParser parser = new SqlParser();\n      Statement statement = parser.createStatement(sql);\n\n      SQLVisitor sqlVistor = new SQLVisitor(new StringBuilder());\n\n      sqlVistor.process(statement, new Integer(0));\n      sqlVistor.reverseAliases();\n\n      TupleStream sqlStream = null;\n\n      if(sqlVistor.table.toUpperCase(Locale.getDefault()).contains(\"_CATALOGS_\")) {\n        if (!sqlVistor.fields.contains(\"TABLE_CAT\")) {\n          throw new IOException(\"When querying _CATALOGS_, fields must contain column TABLE_CAT\");\n        }\n\n        sqlStream = new CatalogsStream(defaultZkhost);\n      } else if(sqlVistor.table.toUpperCase(Locale.getDefault()).contains(\"_SCHEMAS_\")) {\n        if (!sqlVistor.fields.contains(\"TABLE_SCHEM\") || !sqlVistor.fields.contains(\"TABLE_CATALOG\")) {\n          throw new IOException(\"When querying _SCHEMAS_, fields must contain both TABLE_SCHEM and TABLE_CATALOG\");\n        }\n\n        sqlStream = new SchemasStream(defaultZkhost);\n      } else if(sqlVistor.groupByQuery) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doGroupByWithAggregatesFacets(sqlVistor);\n        } else {\n          context.numWorkers = numWorkers;\n          sqlStream = doGroupByWithAggregates(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else if(sqlVistor.isDistinct) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doSelectDistinctFacets(sqlVistor);\n        } else {\n          context.numWorkers = numWorkers;\n          sqlStream = doSelectDistinct(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else {\n        sqlStream = doSelect(sqlVistor);\n      }\n\n      if(includeMetadata) {\n        sqlStream = new MetadataStream(sqlStream, sqlVistor);\n      }\n\n      sqlStream.setStreamContext(context);\n      return sqlStream;\n    }\n\n","sourceOld":"    public static TupleStream parse(String sql,\n                                    int numWorkers,\n                                    String workerCollection,\n                                    String workerZkhost,\n                                    AggregationMode aggregationMode) throws IOException {\n      SqlParser parser = new SqlParser();\n      Statement statement = parser.createStatement(sql);\n\n      SQLVisitor sqlVistor = new SQLVisitor(new StringBuilder());\n\n      sqlVistor.process(statement, new Integer(0));\n      sqlVistor.reverseAliases();\n\n      TupleStream sqlStream = null;\n\n      if(sqlVistor.groupByQuery) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doGroupByWithAggregatesFacets(sqlVistor);\n        } else {\n          sqlStream = doGroupByWithAggregates(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else if(sqlVistor.isDistinct) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doSelectDistinctFacets(sqlVistor);\n        } else {\n          sqlStream = doSelectDistinct(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else {\n        sqlStream = doSelect(sqlVistor);\n      }\n\n      return sqlStream;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2394c8af138e6007607f96374c24aabf72da9ea","date":1455003168,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLTupleStreamParser#parse(String,int,String,String,AggregationMode,boolean,StreamContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLTupleStreamParser#parse(String,int,String,String,AggregationMode,boolean,StreamContext).mjava","sourceNew":"    public static TupleStream parse(String sql,\n                                    int numWorkers,\n                                    String workerCollection,\n                                    String workerZkhost,\n                                    AggregationMode aggregationMode,\n                                    boolean includeMetadata,\n                                    StreamContext context) throws IOException {\n      SqlParser parser = new SqlParser();\n      Statement statement = parser.createStatement(sql);\n\n      SQLVisitor sqlVistor = new SQLVisitor(new StringBuilder());\n\n      sqlVistor.process(statement, new Integer(0));\n      sqlVistor.reverseAliases();\n\n      TupleStream sqlStream = null;\n\n      if(sqlVistor.table.toUpperCase(Locale.ROOT).contains(\"_CATALOGS_\")) {\n        if (!sqlVistor.fields.contains(\"TABLE_CAT\")) {\n          throw new IOException(\"When querying _CATALOGS_, fields must contain column TABLE_CAT\");\n        }\n\n        sqlStream = new CatalogsStream(defaultZkhost);\n      } else if(sqlVistor.table.toUpperCase(Locale.ROOT).contains(\"_SCHEMAS_\")) {\n        if (!sqlVistor.fields.contains(\"TABLE_SCHEM\") || !sqlVistor.fields.contains(\"TABLE_CATALOG\")) {\n          throw new IOException(\"When querying _SCHEMAS_, fields must contain both TABLE_SCHEM and TABLE_CATALOG\");\n        }\n\n        sqlStream = new SchemasStream(defaultZkhost);\n      } else if(sqlVistor.groupByQuery) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doGroupByWithAggregatesFacets(sqlVistor);\n        } else {\n          context.numWorkers = numWorkers;\n          sqlStream = doGroupByWithAggregates(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else if(sqlVistor.isDistinct) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doSelectDistinctFacets(sqlVistor);\n        } else {\n          context.numWorkers = numWorkers;\n          sqlStream = doSelectDistinct(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else {\n        sqlStream = doSelect(sqlVistor);\n      }\n\n      if(includeMetadata) {\n        sqlStream = new MetadataStream(sqlStream, sqlVistor);\n      }\n\n      sqlStream.setStreamContext(context);\n      return sqlStream;\n    }\n\n","sourceOld":"    public static TupleStream parse(String sql,\n                                    int numWorkers,\n                                    String workerCollection,\n                                    String workerZkhost,\n                                    AggregationMode aggregationMode,\n                                    boolean includeMetadata,\n                                    StreamContext context) throws IOException {\n      SqlParser parser = new SqlParser();\n      Statement statement = parser.createStatement(sql);\n\n      SQLVisitor sqlVistor = new SQLVisitor(new StringBuilder());\n\n      sqlVistor.process(statement, new Integer(0));\n      sqlVistor.reverseAliases();\n\n      TupleStream sqlStream = null;\n\n      if(sqlVistor.table.toUpperCase(Locale.getDefault()).contains(\"_CATALOGS_\")) {\n        if (!sqlVistor.fields.contains(\"TABLE_CAT\")) {\n          throw new IOException(\"When querying _CATALOGS_, fields must contain column TABLE_CAT\");\n        }\n\n        sqlStream = new CatalogsStream(defaultZkhost);\n      } else if(sqlVistor.table.toUpperCase(Locale.getDefault()).contains(\"_SCHEMAS_\")) {\n        if (!sqlVistor.fields.contains(\"TABLE_SCHEM\") || !sqlVistor.fields.contains(\"TABLE_CATALOG\")) {\n          throw new IOException(\"When querying _SCHEMAS_, fields must contain both TABLE_SCHEM and TABLE_CATALOG\");\n        }\n\n        sqlStream = new SchemasStream(defaultZkhost);\n      } else if(sqlVistor.groupByQuery) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doGroupByWithAggregatesFacets(sqlVistor);\n        } else {\n          context.numWorkers = numWorkers;\n          sqlStream = doGroupByWithAggregates(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else if(sqlVistor.isDistinct) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doSelectDistinctFacets(sqlVistor);\n        } else {\n          context.numWorkers = numWorkers;\n          sqlStream = doSelectDistinct(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else {\n        sqlStream = doSelect(sqlVistor);\n      }\n\n      if(includeMetadata) {\n        sqlStream = new MetadataStream(sqlStream, sqlVistor);\n      }\n\n      sqlStream.setStreamContext(context);\n      return sqlStream;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa9b48fdb08e049dc94a4077226b510eb68f2b24","date":1458766161,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLTupleStreamParser#parse(String,int,String,String,AggregationMode,boolean,StreamContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLTupleStreamParser#parse(String,int,String,String,AggregationMode,boolean,StreamContext).mjava","sourceNew":"    public static TupleStream parse(String sql,\n                                    int numWorkers,\n                                    String workerCollection,\n                                    String workerZkhost,\n                                    AggregationMode aggregationMode,\n                                    boolean includeMetadata,\n                                    StreamContext context) throws IOException {\n      SqlParser parser = new SqlParser();\n      Statement statement = parser.createStatement(sql);\n\n      SQLVisitor sqlVistor = new SQLVisitor(new StringBuilder());\n\n      sqlVistor.process(statement, new Integer(0));\n      sqlVistor.reverseAliases();\n\n      TupleStream sqlStream = null;\n\n      if(sqlVistor.table.toUpperCase(Locale.ROOT).contains(\"_CATALOGS_\")) {\n        sqlStream = new SelectStream(new CatalogsStream(defaultZkhost), sqlVistor.columnAliases);\n      } else if(sqlVistor.table.toUpperCase(Locale.ROOT).contains(\"_SCHEMAS_\")) {\n        sqlStream = new SelectStream(new SchemasStream(defaultZkhost), sqlVistor.columnAliases);\n      } else if(sqlVistor.table.toUpperCase(Locale.ROOT).contains(\"_TABLES_\")) {\n        sqlStream = new SelectStream(new TableStream(defaultZkhost), sqlVistor.columnAliases);\n      } else if(sqlVistor.groupByQuery) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doGroupByWithAggregatesFacets(sqlVistor);\n        } else {\n          context.numWorkers = numWorkers;\n          sqlStream = doGroupByWithAggregates(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else if(sqlVistor.isDistinct) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doSelectDistinctFacets(sqlVistor);\n        } else {\n          context.numWorkers = numWorkers;\n          sqlStream = doSelectDistinct(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else {\n        sqlStream = doSelect(sqlVistor);\n      }\n\n      if(includeMetadata) {\n        sqlStream = new MetadataStream(sqlStream, sqlVistor);\n      }\n\n      sqlStream.setStreamContext(context);\n      return sqlStream;\n    }\n\n","sourceOld":"    public static TupleStream parse(String sql,\n                                    int numWorkers,\n                                    String workerCollection,\n                                    String workerZkhost,\n                                    AggregationMode aggregationMode,\n                                    boolean includeMetadata,\n                                    StreamContext context) throws IOException {\n      SqlParser parser = new SqlParser();\n      Statement statement = parser.createStatement(sql);\n\n      SQLVisitor sqlVistor = new SQLVisitor(new StringBuilder());\n\n      sqlVistor.process(statement, new Integer(0));\n      sqlVistor.reverseAliases();\n\n      TupleStream sqlStream = null;\n\n      if(sqlVistor.table.toUpperCase(Locale.ROOT).contains(\"_CATALOGS_\")) {\n        if (!sqlVistor.fields.contains(\"TABLE_CAT\")) {\n          throw new IOException(\"When querying _CATALOGS_, fields must contain column TABLE_CAT\");\n        }\n\n        sqlStream = new CatalogsStream(defaultZkhost);\n      } else if(sqlVistor.table.toUpperCase(Locale.ROOT).contains(\"_SCHEMAS_\")) {\n        if (!sqlVistor.fields.contains(\"TABLE_SCHEM\") || !sqlVistor.fields.contains(\"TABLE_CATALOG\")) {\n          throw new IOException(\"When querying _SCHEMAS_, fields must contain both TABLE_SCHEM and TABLE_CATALOG\");\n        }\n\n        sqlStream = new SchemasStream(defaultZkhost);\n      } else if(sqlVistor.groupByQuery) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doGroupByWithAggregatesFacets(sqlVistor);\n        } else {\n          context.numWorkers = numWorkers;\n          sqlStream = doGroupByWithAggregates(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else if(sqlVistor.isDistinct) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doSelectDistinctFacets(sqlVistor);\n        } else {\n          context.numWorkers = numWorkers;\n          sqlStream = doSelectDistinct(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else {\n        sqlStream = doSelect(sqlVistor);\n      }\n\n      if(includeMetadata) {\n        sqlStream = new MetadataStream(sqlStream, sqlVistor);\n      }\n\n      sqlStream.setStreamContext(context);\n      return sqlStream;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d984627825732e682759c22df7a3b171a80f3812","date":1461857653,"type":4,"author":"Kevin Risden","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLTupleStreamParser#parse(String,int,String,String,AggregationMode,boolean,StreamContext).mjava","sourceNew":null,"sourceOld":"    public static TupleStream parse(String sql,\n                                    int numWorkers,\n                                    String workerCollection,\n                                    String workerZkhost,\n                                    AggregationMode aggregationMode,\n                                    boolean includeMetadata,\n                                    StreamContext context) throws IOException {\n      SqlParser parser = new SqlParser();\n      Statement statement = parser.createStatement(sql);\n\n      SQLVisitor sqlVistor = new SQLVisitor(new StringBuilder());\n\n      sqlVistor.process(statement, new Integer(0));\n      sqlVistor.reverseAliases();\n\n      TupleStream sqlStream = null;\n\n      if(sqlVistor.table.toUpperCase(Locale.ROOT).contains(\"_CATALOGS_\")) {\n        sqlStream = new SelectStream(new CatalogsStream(defaultZkhost), sqlVistor.columnAliases);\n      } else if(sqlVistor.table.toUpperCase(Locale.ROOT).contains(\"_SCHEMAS_\")) {\n        sqlStream = new SelectStream(new SchemasStream(defaultZkhost), sqlVistor.columnAliases);\n      } else if(sqlVistor.table.toUpperCase(Locale.ROOT).contains(\"_TABLES_\")) {\n        sqlStream = new SelectStream(new TableStream(defaultZkhost), sqlVistor.columnAliases);\n      } else if(sqlVistor.groupByQuery) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doGroupByWithAggregatesFacets(sqlVistor);\n        } else {\n          context.numWorkers = numWorkers;\n          sqlStream = doGroupByWithAggregates(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else if(sqlVistor.isDistinct) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doSelectDistinctFacets(sqlVistor);\n        } else {\n          context.numWorkers = numWorkers;\n          sqlStream = doSelectDistinct(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else {\n        sqlStream = doSelect(sqlVistor);\n      }\n\n      if(includeMetadata) {\n        sqlStream = new MetadataStream(sqlStream, sqlVistor);\n      }\n\n      sqlStream.setStreamContext(context);\n      return sqlStream;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"116fdd6b9e04e18a6547a5650bc0afd3fda020aa","date":1487184909,"type":4,"author":"Joel Bernstein","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLTupleStreamParser#parse(String,int,String,String,AggregationMode,boolean,StreamContext).mjava","sourceNew":null,"sourceOld":"    public static TupleStream parse(String sql,\n                                    int numWorkers,\n                                    String workerCollection,\n                                    String workerZkhost,\n                                    AggregationMode aggregationMode,\n                                    boolean includeMetadata,\n                                    StreamContext context) throws IOException {\n      SqlParser parser = new SqlParser();\n      Statement statement = parser.createStatement(sql);\n\n      SQLVisitor sqlVistor = new SQLVisitor(new StringBuilder());\n\n      sqlVistor.process(statement, new Integer(0));\n      sqlVistor.reverseAliases();\n\n      TupleStream sqlStream = null;\n\n      if(sqlVistor.table.toUpperCase(Locale.ROOT).contains(\"_CATALOGS_\")) {\n        sqlStream = new SelectStream(new CatalogsStream(defaultZkhost), sqlVistor.columnAliases);\n      } else if(sqlVistor.table.toUpperCase(Locale.ROOT).contains(\"_SCHEMAS_\")) {\n        sqlStream = new SelectStream(new SchemasStream(defaultZkhost), sqlVistor.columnAliases);\n      } else if(sqlVistor.table.toUpperCase(Locale.ROOT).contains(\"_TABLES_\")) {\n        sqlStream = new SelectStream(new TableStream(defaultZkhost), sqlVistor.columnAliases);\n      } else if(sqlVistor.groupByQuery) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doGroupByWithAggregatesFacets(sqlVistor);\n        } else {\n          context.numWorkers = numWorkers;\n          sqlStream = doGroupByWithAggregates(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else if(sqlVistor.isDistinct) {\n        if(aggregationMode == AggregationMode.FACET) {\n          sqlStream = doSelectDistinctFacets(sqlVistor);\n        } else {\n          context.numWorkers = numWorkers;\n          sqlStream = doSelectDistinct(sqlVistor, numWorkers, workerCollection, workerZkhost);\n        }\n      } else {\n        sqlStream = doSelect(sqlVistor);\n      }\n\n      if(includeMetadata) {\n        sqlStream = new MetadataStream(sqlStream, sqlVistor);\n      }\n\n      sqlStream.setStreamContext(context);\n      return sqlStream;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2af3708aa5f155e8f27905be60c119be0e39be8":["8d15e34266d75e4e8b95da046cd0afc812367b38"],"e2394c8af138e6007607f96374c24aabf72da9ea":["8b3e07e133490ed38c90c0c915c44c30f7d2523c"],"c39fd399a800c79eff2beaad702c9b6190d499fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["aa9b48fdb08e049dc94a4077226b510eb68f2b24","d984627825732e682759c22df7a3b171a80f3812"],"d984627825732e682759c22df7a3b171a80f3812":["aa9b48fdb08e049dc94a4077226b510eb68f2b24"],"acd1f5a977dc3b97799ed300423294e2c457774f":["d2af3708aa5f155e8f27905be60c119be0e39be8","8b3e07e133490ed38c90c0c915c44c30f7d2523c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b3e07e133490ed38c90c0c915c44c30f7d2523c"],"aa9b48fdb08e049dc94a4077226b510eb68f2b24":["e2394c8af138e6007607f96374c24aabf72da9ea"],"8b3e07e133490ed38c90c0c915c44c30f7d2523c":["d2af3708aa5f155e8f27905be60c119be0e39be8"],"8d15e34266d75e4e8b95da046cd0afc812367b38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c39fd399a800c79eff2beaad702c9b6190d499fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"]},"commit2Childs":{"d2af3708aa5f155e8f27905be60c119be0e39be8":["acd1f5a977dc3b97799ed300423294e2c457774f","8b3e07e133490ed38c90c0c915c44c30f7d2523c"],"e2394c8af138e6007607f96374c24aabf72da9ea":["aa9b48fdb08e049dc94a4077226b510eb68f2b24"],"c39fd399a800c79eff2beaad702c9b6190d499fd":["8d15e34266d75e4e8b95da046cd0afc812367b38"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d984627825732e682759c22df7a3b171a80f3812":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"acd1f5a977dc3b97799ed300423294e2c457774f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c39fd399a800c79eff2beaad702c9b6190d499fd","1e6acbaae7af722f17204ceccf0f7db5753eccf3","8d15e34266d75e4e8b95da046cd0afc812367b38"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"8b3e07e133490ed38c90c0c915c44c30f7d2523c":["e2394c8af138e6007607f96374c24aabf72da9ea","acd1f5a977dc3b97799ed300423294e2c457774f","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"aa9b48fdb08e049dc94a4077226b510eb68f2b24":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa","d984627825732e682759c22df7a3b171a80f3812"],"8d15e34266d75e4e8b95da046cd0afc812367b38":["d2af3708aa5f155e8f27905be60c119be0e39be8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["acd1f5a977dc3b97799ed300423294e2c457774f","1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}