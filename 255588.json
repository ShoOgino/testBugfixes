{"path":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAgainstRAMDirectory(MemoryIndex).mjava","commits":[{"id":"30fd30bfbfa6b9e036bcd99c8339712e965d4a63","date":1351859294,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAgainstRAMDirectory(MemoryIndex).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAgainstRAMDirectory().mjava","sourceNew":"  /**\n   * Build a randomish document for both RAMDirectory and MemoryIndex,\n   * and run all the queries against it.\n   */\n  public void assertAgainstRAMDirectory(MemoryIndex memory) throws Exception {\n    memory.reset();\n    StringBuilder fooField = new StringBuilder();\n    StringBuilder termField = new StringBuilder();\n \n    // add up to 250 terms to field \"foo\"\n    final int numFooTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numFooTerms; i++) {\n      fooField.append(\" \");\n      fooField.append(randomTerm());\n    }\n\n    // add up to 250 terms to field \"term\"\n    final int numTermTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numTermTerms; i++) {\n      termField.append(\" \");\n      termField.append(randomTerm());\n    }\n    \n    Directory ramdir = new RAMDirectory();\n    Analyzer analyzer = randomAnalyzer();\n    IndexWriter writer = new IndexWriter(ramdir,\n                                         new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())));\n    Document doc = new Document();\n    Field field1 = newTextField(\"foo\", fooField.toString(), Field.Store.NO);\n    Field field2 = newTextField(\"term\", termField.toString(), Field.Store.NO);\n    doc.add(field1);\n    doc.add(field2);\n    writer.addDocument(doc);\n    writer.close();\n    \n    memory.addField(\"foo\", fooField.toString(), analyzer);\n    memory.addField(\"term\", termField.toString(), analyzer);\n    \n    if (VERBOSE) {\n      System.out.println(\"Random MemoryIndex:\\n\" + memory.toString());\n      System.out.println(\"Same index as RAMDirectory: \" +\n        RamUsageEstimator.humanReadableUnits(RamUsageEstimator.sizeOf(ramdir)));\n      System.out.println();\n    } else {\n      assertTrue(memory.getMemorySize() > 0L);\n    }\n    AtomicReader reader = (AtomicReader) memory.createSearcher().getIndexReader();\n    DirectoryReader competitor = DirectoryReader.open(ramdir);\n    duellReaders(competitor, reader);\n    IOUtils.close(reader, competitor);\n    assertAllQueries(memory, ramdir, analyzer);  \n    ramdir.close();    \n  }\n\n","sourceOld":"  /**\n   * Build a randomish document for both RAMDirectory and MemoryIndex,\n   * and run all the queries against it.\n   */\n  public void assertAgainstRAMDirectory() throws Exception {\n    StringBuilder fooField = new StringBuilder();\n    StringBuilder termField = new StringBuilder();\n \n    // add up to 250 terms to field \"foo\"\n    final int numFooTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numFooTerms; i++) {\n      fooField.append(\" \");\n      fooField.append(randomTerm());\n    }\n\n    // add up to 250 terms to field \"term\"\n    final int numTermTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numTermTerms; i++) {\n      termField.append(\" \");\n      termField.append(randomTerm());\n    }\n    \n    Directory ramdir = new RAMDirectory();\n    Analyzer analyzer = randomAnalyzer();\n    IndexWriter writer = new IndexWriter(ramdir,\n                                         new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())));\n    Document doc = new Document();\n    Field field1 = newTextField(\"foo\", fooField.toString(), Field.Store.NO);\n    Field field2 = newTextField(\"term\", termField.toString(), Field.Store.NO);\n    doc.add(field1);\n    doc.add(field2);\n    writer.addDocument(doc);\n    writer.close();\n    \n    MemoryIndex memory = new MemoryIndex();\n    memory.addField(\"foo\", fooField.toString(), analyzer);\n    memory.addField(\"term\", termField.toString(), analyzer);\n    \n    if (VERBOSE) {\n      System.out.println(\"Random MemoryIndex:\\n\" + memory.toString());\n      System.out.println(\"Same index as RAMDirectory: \" +\n        RamUsageEstimator.humanReadableUnits(RamUsageEstimator.sizeOf(ramdir)));\n      System.out.println();\n    } else {\n      assertTrue(memory.getMemorySize() > 0L);\n    }\n\n    assertAllQueries(memory, ramdir, analyzer);  \n    ramdir.close();    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAgainstRAMDirectory(MemoryIndex).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAgainstRAMDirectory(MemoryIndex).mjava","sourceNew":"  /**\n   * Build a randomish document for both RAMDirectory and MemoryIndex,\n   * and run all the queries against it.\n   */\n  public void assertAgainstRAMDirectory(MemoryIndex memory) throws Exception {\n    memory.reset();\n    StringBuilder fooField = new StringBuilder();\n    StringBuilder termField = new StringBuilder();\n \n    // add up to 250 terms to field \"foo\"\n    final int numFooTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numFooTerms; i++) {\n      fooField.append(\" \");\n      fooField.append(randomTerm());\n    }\n\n    // add up to 250 terms to field \"term\"\n    final int numTermTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numTermTerms; i++) {\n      termField.append(\" \");\n      termField.append(randomTerm());\n    }\n    \n    Directory ramdir = new RAMDirectory();\n    Analyzer analyzer = randomAnalyzer();\n    IndexWriter writer = new IndexWriter(ramdir,\n                                         new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer).setCodec(TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())));\n    Document doc = new Document();\n    Field field1 = newTextField(\"foo\", fooField.toString(), Field.Store.NO);\n    Field field2 = newTextField(\"term\", termField.toString(), Field.Store.NO);\n    doc.add(field1);\n    doc.add(field2);\n    writer.addDocument(doc);\n    writer.close();\n    \n    memory.addField(\"foo\", fooField.toString(), analyzer);\n    memory.addField(\"term\", termField.toString(), analyzer);\n    \n    if (VERBOSE) {\n      System.out.println(\"Random MemoryIndex:\\n\" + memory.toString());\n      System.out.println(\"Same index as RAMDirectory: \" +\n        RamUsageEstimator.humanReadableUnits(RamUsageEstimator.sizeOf(ramdir)));\n      System.out.println();\n    } else {\n      assertTrue(memory.getMemorySize() > 0L);\n    }\n    AtomicReader reader = (AtomicReader) memory.createSearcher().getIndexReader();\n    DirectoryReader competitor = DirectoryReader.open(ramdir);\n    duellReaders(competitor, reader);\n    IOUtils.close(reader, competitor);\n    assertAllQueries(memory, ramdir, analyzer);  \n    ramdir.close();    \n  }\n\n","sourceOld":"  /**\n   * Build a randomish document for both RAMDirectory and MemoryIndex,\n   * and run all the queries against it.\n   */\n  public void assertAgainstRAMDirectory(MemoryIndex memory) throws Exception {\n    memory.reset();\n    StringBuilder fooField = new StringBuilder();\n    StringBuilder termField = new StringBuilder();\n \n    // add up to 250 terms to field \"foo\"\n    final int numFooTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numFooTerms; i++) {\n      fooField.append(\" \");\n      fooField.append(randomTerm());\n    }\n\n    // add up to 250 terms to field \"term\"\n    final int numTermTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numTermTerms; i++) {\n      termField.append(\" \");\n      termField.append(randomTerm());\n    }\n    \n    Directory ramdir = new RAMDirectory();\n    Analyzer analyzer = randomAnalyzer();\n    IndexWriter writer = new IndexWriter(ramdir,\n                                         new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer).setCodec(_TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())));\n    Document doc = new Document();\n    Field field1 = newTextField(\"foo\", fooField.toString(), Field.Store.NO);\n    Field field2 = newTextField(\"term\", termField.toString(), Field.Store.NO);\n    doc.add(field1);\n    doc.add(field2);\n    writer.addDocument(doc);\n    writer.close();\n    \n    memory.addField(\"foo\", fooField.toString(), analyzer);\n    memory.addField(\"term\", termField.toString(), analyzer);\n    \n    if (VERBOSE) {\n      System.out.println(\"Random MemoryIndex:\\n\" + memory.toString());\n      System.out.println(\"Same index as RAMDirectory: \" +\n        RamUsageEstimator.humanReadableUnits(RamUsageEstimator.sizeOf(ramdir)));\n      System.out.println();\n    } else {\n      assertTrue(memory.getMemorySize() > 0L);\n    }\n    AtomicReader reader = (AtomicReader) memory.createSearcher().getIndexReader();\n    DirectoryReader competitor = DirectoryReader.open(ramdir);\n    duellReaders(competitor, reader);\n    IOUtils.close(reader, competitor);\n    assertAllQueries(memory, ramdir, analyzer);  \n    ramdir.close();    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAgainstRAMDirectory(MemoryIndex).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAgainstRAMDirectory(MemoryIndex).mjava","sourceNew":"  /**\n   * Build a randomish document for both RAMDirectory and MemoryIndex,\n   * and run all the queries against it.\n   */\n  public void assertAgainstRAMDirectory(MemoryIndex memory) throws Exception {\n    memory.reset();\n    StringBuilder fooField = new StringBuilder();\n    StringBuilder termField = new StringBuilder();\n \n    // add up to 250 terms to field \"foo\"\n    final int numFooTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numFooTerms; i++) {\n      fooField.append(\" \");\n      fooField.append(randomTerm());\n    }\n\n    // add up to 250 terms to field \"term\"\n    final int numTermTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numTermTerms; i++) {\n      termField.append(\" \");\n      termField.append(randomTerm());\n    }\n    \n    Directory ramdir = new RAMDirectory();\n    Analyzer analyzer = randomAnalyzer();\n    IndexWriter writer = new IndexWriter(ramdir,\n                                         new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer).setCodec(TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())));\n    Document doc = new Document();\n    Field field1 = newTextField(\"foo\", fooField.toString(), Field.Store.NO);\n    Field field2 = newTextField(\"term\", termField.toString(), Field.Store.NO);\n    doc.add(field1);\n    doc.add(field2);\n    writer.addDocument(doc);\n    writer.shutdown();\n    \n    memory.addField(\"foo\", fooField.toString(), analyzer);\n    memory.addField(\"term\", termField.toString(), analyzer);\n    \n    if (VERBOSE) {\n      System.out.println(\"Random MemoryIndex:\\n\" + memory.toString());\n      System.out.println(\"Same index as RAMDirectory: \" +\n        RamUsageEstimator.humanReadableUnits(RamUsageEstimator.sizeOf(ramdir)));\n      System.out.println();\n    } else {\n      assertTrue(memory.getMemorySize() > 0L);\n    }\n    AtomicReader reader = (AtomicReader) memory.createSearcher().getIndexReader();\n    DirectoryReader competitor = DirectoryReader.open(ramdir);\n    duellReaders(competitor, reader);\n    IOUtils.close(reader, competitor);\n    assertAllQueries(memory, ramdir, analyzer);  \n    ramdir.close();    \n  }\n\n","sourceOld":"  /**\n   * Build a randomish document for both RAMDirectory and MemoryIndex,\n   * and run all the queries against it.\n   */\n  public void assertAgainstRAMDirectory(MemoryIndex memory) throws Exception {\n    memory.reset();\n    StringBuilder fooField = new StringBuilder();\n    StringBuilder termField = new StringBuilder();\n \n    // add up to 250 terms to field \"foo\"\n    final int numFooTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numFooTerms; i++) {\n      fooField.append(\" \");\n      fooField.append(randomTerm());\n    }\n\n    // add up to 250 terms to field \"term\"\n    final int numTermTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numTermTerms; i++) {\n      termField.append(\" \");\n      termField.append(randomTerm());\n    }\n    \n    Directory ramdir = new RAMDirectory();\n    Analyzer analyzer = randomAnalyzer();\n    IndexWriter writer = new IndexWriter(ramdir,\n                                         new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer).setCodec(TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())));\n    Document doc = new Document();\n    Field field1 = newTextField(\"foo\", fooField.toString(), Field.Store.NO);\n    Field field2 = newTextField(\"term\", termField.toString(), Field.Store.NO);\n    doc.add(field1);\n    doc.add(field2);\n    writer.addDocument(doc);\n    writer.close();\n    \n    memory.addField(\"foo\", fooField.toString(), analyzer);\n    memory.addField(\"term\", termField.toString(), analyzer);\n    \n    if (VERBOSE) {\n      System.out.println(\"Random MemoryIndex:\\n\" + memory.toString());\n      System.out.println(\"Same index as RAMDirectory: \" +\n        RamUsageEstimator.humanReadableUnits(RamUsageEstimator.sizeOf(ramdir)));\n      System.out.println();\n    } else {\n      assertTrue(memory.getMemorySize() > 0L);\n    }\n    AtomicReader reader = (AtomicReader) memory.createSearcher().getIndexReader();\n    DirectoryReader competitor = DirectoryReader.open(ramdir);\n    duellReaders(competitor, reader);\n    IOUtils.close(reader, competitor);\n    assertAllQueries(memory, ramdir, analyzer);  \n    ramdir.close();    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1eb6b3ce884c0b9e064e112da158013ec33cd91","date":1402692077,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAgainstRAMDirectory(MemoryIndex).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAgainstRAMDirectory(MemoryIndex).mjava","sourceNew":"  /**\n   * Build a randomish document for both RAMDirectory and MemoryIndex,\n   * and run all the queries against it.\n   */\n  public void assertAgainstRAMDirectory(MemoryIndex memory) throws Exception {\n    memory.reset();\n    StringBuilder fooField = new StringBuilder();\n    StringBuilder termField = new StringBuilder();\n \n    // add up to 250 terms to field \"foo\"\n    final int numFooTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numFooTerms; i++) {\n      fooField.append(\" \");\n      fooField.append(randomTerm());\n    }\n\n    // add up to 250 terms to field \"term\"\n    final int numTermTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numTermTerms; i++) {\n      termField.append(\" \");\n      termField.append(randomTerm());\n    }\n    \n    Directory ramdir = new RAMDirectory();\n    Analyzer analyzer = randomAnalyzer();\n    IndexWriter writer = new IndexWriter(ramdir,\n                                         new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer).setCodec(TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())));\n    Document doc = new Document();\n    Field field1 = newTextField(\"foo\", fooField.toString(), Field.Store.NO);\n    Field field2 = newTextField(\"term\", termField.toString(), Field.Store.NO);\n    doc.add(field1);\n    doc.add(field2);\n    writer.addDocument(doc);\n    writer.shutdown();\n    \n    memory.addField(\"foo\", fooField.toString(), analyzer);\n    memory.addField(\"term\", termField.toString(), analyzer);\n    \n    AtomicReader reader = (AtomicReader) memory.createSearcher().getIndexReader();\n    DirectoryReader competitor = DirectoryReader.open(ramdir);\n    duellReaders(competitor, reader);\n    IOUtils.close(reader, competitor);\n    assertAllQueries(memory, ramdir, analyzer);  \n    ramdir.close();    \n  }\n\n","sourceOld":"  /**\n   * Build a randomish document for both RAMDirectory and MemoryIndex,\n   * and run all the queries against it.\n   */\n  public void assertAgainstRAMDirectory(MemoryIndex memory) throws Exception {\n    memory.reset();\n    StringBuilder fooField = new StringBuilder();\n    StringBuilder termField = new StringBuilder();\n \n    // add up to 250 terms to field \"foo\"\n    final int numFooTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numFooTerms; i++) {\n      fooField.append(\" \");\n      fooField.append(randomTerm());\n    }\n\n    // add up to 250 terms to field \"term\"\n    final int numTermTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numTermTerms; i++) {\n      termField.append(\" \");\n      termField.append(randomTerm());\n    }\n    \n    Directory ramdir = new RAMDirectory();\n    Analyzer analyzer = randomAnalyzer();\n    IndexWriter writer = new IndexWriter(ramdir,\n                                         new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer).setCodec(TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())));\n    Document doc = new Document();\n    Field field1 = newTextField(\"foo\", fooField.toString(), Field.Store.NO);\n    Field field2 = newTextField(\"term\", termField.toString(), Field.Store.NO);\n    doc.add(field1);\n    doc.add(field2);\n    writer.addDocument(doc);\n    writer.shutdown();\n    \n    memory.addField(\"foo\", fooField.toString(), analyzer);\n    memory.addField(\"term\", termField.toString(), analyzer);\n    \n    if (VERBOSE) {\n      System.out.println(\"Random MemoryIndex:\\n\" + memory.toString());\n      System.out.println(\"Same index as RAMDirectory: \" +\n        RamUsageEstimator.humanReadableUnits(RamUsageEstimator.sizeOf(ramdir)));\n      System.out.println();\n    } else {\n      assertTrue(memory.getMemorySize() > 0L);\n    }\n    AtomicReader reader = (AtomicReader) memory.createSearcher().getIndexReader();\n    DirectoryReader competitor = DirectoryReader.open(ramdir);\n    duellReaders(competitor, reader);\n    IOUtils.close(reader, competitor);\n    assertAllQueries(memory, ramdir, analyzer);  \n    ramdir.close();    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAgainstRAMDirectory(MemoryIndex).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAgainstRAMDirectory(MemoryIndex).mjava","sourceNew":"  /**\n   * Build a randomish document for both RAMDirectory and MemoryIndex,\n   * and run all the queries against it.\n   */\n  public void assertAgainstRAMDirectory(MemoryIndex memory) throws Exception {\n    memory.reset();\n    StringBuilder fooField = new StringBuilder();\n    StringBuilder termField = new StringBuilder();\n \n    // add up to 250 terms to field \"foo\"\n    final int numFooTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numFooTerms; i++) {\n      fooField.append(\" \");\n      fooField.append(randomTerm());\n    }\n\n    // add up to 250 terms to field \"term\"\n    final int numTermTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numTermTerms; i++) {\n      termField.append(\" \");\n      termField.append(randomTerm());\n    }\n    \n    Directory ramdir = new RAMDirectory();\n    Analyzer analyzer = randomAnalyzer();\n    IndexWriter writer = new IndexWriter(ramdir,\n                                         new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer).setCodec(TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())));\n    Document doc = new Document();\n    Field field1 = newTextField(\"foo\", fooField.toString(), Field.Store.NO);\n    Field field2 = newTextField(\"term\", termField.toString(), Field.Store.NO);\n    doc.add(field1);\n    doc.add(field2);\n    writer.addDocument(doc);\n    writer.shutdown();\n    \n    memory.addField(\"foo\", fooField.toString(), analyzer);\n    memory.addField(\"term\", termField.toString(), analyzer);\n    \n    AtomicReader reader = (AtomicReader) memory.createSearcher().getIndexReader();\n    DirectoryReader competitor = DirectoryReader.open(ramdir);\n    duellReaders(competitor, reader);\n    IOUtils.close(reader, competitor);\n    assertAllQueries(memory, ramdir, analyzer);  \n    ramdir.close();    \n  }\n\n","sourceOld":"  /**\n   * Build a randomish document for both RAMDirectory and MemoryIndex,\n   * and run all the queries against it.\n   */\n  public void assertAgainstRAMDirectory(MemoryIndex memory) throws Exception {\n    memory.reset();\n    StringBuilder fooField = new StringBuilder();\n    StringBuilder termField = new StringBuilder();\n \n    // add up to 250 terms to field \"foo\"\n    final int numFooTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numFooTerms; i++) {\n      fooField.append(\" \");\n      fooField.append(randomTerm());\n    }\n\n    // add up to 250 terms to field \"term\"\n    final int numTermTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numTermTerms; i++) {\n      termField.append(\" \");\n      termField.append(randomTerm());\n    }\n    \n    Directory ramdir = new RAMDirectory();\n    Analyzer analyzer = randomAnalyzer();\n    IndexWriter writer = new IndexWriter(ramdir,\n                                         new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer).setCodec(TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())));\n    Document doc = new Document();\n    Field field1 = newTextField(\"foo\", fooField.toString(), Field.Store.NO);\n    Field field2 = newTextField(\"term\", termField.toString(), Field.Store.NO);\n    doc.add(field1);\n    doc.add(field2);\n    writer.addDocument(doc);\n    writer.shutdown();\n    \n    memory.addField(\"foo\", fooField.toString(), analyzer);\n    memory.addField(\"term\", termField.toString(), analyzer);\n    \n    if (VERBOSE) {\n      System.out.println(\"Random MemoryIndex:\\n\" + memory.toString());\n      System.out.println(\"Same index as RAMDirectory: \" +\n        RamUsageEstimator.humanReadableUnits(RamUsageEstimator.sizeOf(ramdir)));\n      System.out.println();\n    } else {\n      assertTrue(memory.getMemorySize() > 0L);\n    }\n    AtomicReader reader = (AtomicReader) memory.createSearcher().getIndexReader();\n    DirectoryReader competitor = DirectoryReader.open(ramdir);\n    duellReaders(competitor, reader);\n    IOUtils.close(reader, competitor);\n    assertAllQueries(memory, ramdir, analyzer);  \n    ramdir.close();    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAgainstRAMDirectory(MemoryIndex).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAgainstRAMDirectory(MemoryIndex).mjava","sourceNew":"  /**\n   * Build a randomish document for both RAMDirectory and MemoryIndex,\n   * and run all the queries against it.\n   */\n  public void assertAgainstRAMDirectory(MemoryIndex memory) throws Exception {\n    memory.reset();\n    StringBuilder fooField = new StringBuilder();\n    StringBuilder termField = new StringBuilder();\n \n    // add up to 250 terms to field \"foo\"\n    final int numFooTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numFooTerms; i++) {\n      fooField.append(\" \");\n      fooField.append(randomTerm());\n    }\n\n    // add up to 250 terms to field \"term\"\n    final int numTermTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numTermTerms; i++) {\n      termField.append(\" \");\n      termField.append(randomTerm());\n    }\n    \n    Directory ramdir = new RAMDirectory();\n    Analyzer analyzer = randomAnalyzer();\n    IndexWriter writer = new IndexWriter(ramdir,\n                                         new IndexWriterConfig(analyzer).setCodec(TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())));\n    Document doc = new Document();\n    Field field1 = newTextField(\"foo\", fooField.toString(), Field.Store.NO);\n    Field field2 = newTextField(\"term\", termField.toString(), Field.Store.NO);\n    doc.add(field1);\n    doc.add(field2);\n    writer.addDocument(doc);\n    writer.close();\n    \n    memory.addField(\"foo\", fooField.toString(), analyzer);\n    memory.addField(\"term\", termField.toString(), analyzer);\n    \n    AtomicReader reader = (AtomicReader) memory.createSearcher().getIndexReader();\n    DirectoryReader competitor = DirectoryReader.open(ramdir);\n    duellReaders(competitor, reader);\n    IOUtils.close(reader, competitor);\n    assertAllQueries(memory, ramdir, analyzer);  \n    ramdir.close();    \n  }\n\n","sourceOld":"  /**\n   * Build a randomish document for both RAMDirectory and MemoryIndex,\n   * and run all the queries against it.\n   */\n  public void assertAgainstRAMDirectory(MemoryIndex memory) throws Exception {\n    memory.reset();\n    StringBuilder fooField = new StringBuilder();\n    StringBuilder termField = new StringBuilder();\n \n    // add up to 250 terms to field \"foo\"\n    final int numFooTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numFooTerms; i++) {\n      fooField.append(\" \");\n      fooField.append(randomTerm());\n    }\n\n    // add up to 250 terms to field \"term\"\n    final int numTermTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numTermTerms; i++) {\n      termField.append(\" \");\n      termField.append(randomTerm());\n    }\n    \n    Directory ramdir = new RAMDirectory();\n    Analyzer analyzer = randomAnalyzer();\n    IndexWriter writer = new IndexWriter(ramdir,\n                                         new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer).setCodec(TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())));\n    Document doc = new Document();\n    Field field1 = newTextField(\"foo\", fooField.toString(), Field.Store.NO);\n    Field field2 = newTextField(\"term\", termField.toString(), Field.Store.NO);\n    doc.add(field1);\n    doc.add(field2);\n    writer.addDocument(doc);\n    writer.shutdown();\n    \n    memory.addField(\"foo\", fooField.toString(), analyzer);\n    memory.addField(\"term\", termField.toString(), analyzer);\n    \n    AtomicReader reader = (AtomicReader) memory.createSearcher().getIndexReader();\n    DirectoryReader competitor = DirectoryReader.open(ramdir);\n    duellReaders(competitor, reader);\n    IOUtils.close(reader, competitor);\n    assertAllQueries(memory, ramdir, analyzer);  \n    ramdir.close();    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e49088db00ea6cb232fbde9c8c646c721d4d049f","date":1411433559,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAgainstRAMDirectory(MemoryIndex).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAgainstRAMDirectory(MemoryIndex).mjava","sourceNew":"  /**\n   * Build a randomish document for both RAMDirectory and MemoryIndex,\n   * and run all the queries against it.\n   */\n  public void assertAgainstRAMDirectory(MemoryIndex memory) throws Exception {\n    memory.reset();\n    StringBuilder fooField = new StringBuilder();\n    StringBuilder termField = new StringBuilder();\n \n    // add up to 250 terms to field \"foo\"\n    final int numFooTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numFooTerms; i++) {\n      fooField.append(\" \");\n      fooField.append(randomTerm());\n    }\n\n    // add up to 250 terms to field \"term\"\n    final int numTermTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numTermTerms; i++) {\n      termField.append(\" \");\n      termField.append(randomTerm());\n    }\n    \n    Directory ramdir = new RAMDirectory();\n    Analyzer analyzer = randomAnalyzer();\n    IndexWriter writer = new IndexWriter(ramdir,\n                                         new IndexWriterConfig(analyzer).setCodec(TestUtil.alwaysPostingsFormat(TestUtil.getDefaultPostingsFormat())));\n    Document doc = new Document();\n    Field field1 = newTextField(\"foo\", fooField.toString(), Field.Store.NO);\n    Field field2 = newTextField(\"term\", termField.toString(), Field.Store.NO);\n    doc.add(field1);\n    doc.add(field2);\n    writer.addDocument(doc);\n    writer.close();\n    \n    memory.addField(\"foo\", fooField.toString(), analyzer);\n    memory.addField(\"term\", termField.toString(), analyzer);\n    \n    AtomicReader reader = (AtomicReader) memory.createSearcher().getIndexReader();\n    DirectoryReader competitor = DirectoryReader.open(ramdir);\n    duellReaders(competitor, reader);\n    IOUtils.close(reader, competitor);\n    assertAllQueries(memory, ramdir, analyzer);  \n    ramdir.close();    \n  }\n\n","sourceOld":"  /**\n   * Build a randomish document for both RAMDirectory and MemoryIndex,\n   * and run all the queries against it.\n   */\n  public void assertAgainstRAMDirectory(MemoryIndex memory) throws Exception {\n    memory.reset();\n    StringBuilder fooField = new StringBuilder();\n    StringBuilder termField = new StringBuilder();\n \n    // add up to 250 terms to field \"foo\"\n    final int numFooTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numFooTerms; i++) {\n      fooField.append(\" \");\n      fooField.append(randomTerm());\n    }\n\n    // add up to 250 terms to field \"term\"\n    final int numTermTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numTermTerms; i++) {\n      termField.append(\" \");\n      termField.append(randomTerm());\n    }\n    \n    Directory ramdir = new RAMDirectory();\n    Analyzer analyzer = randomAnalyzer();\n    IndexWriter writer = new IndexWriter(ramdir,\n                                         new IndexWriterConfig(analyzer).setCodec(TestUtil.alwaysPostingsFormat(new Lucene41PostingsFormat())));\n    Document doc = new Document();\n    Field field1 = newTextField(\"foo\", fooField.toString(), Field.Store.NO);\n    Field field2 = newTextField(\"term\", termField.toString(), Field.Store.NO);\n    doc.add(field1);\n    doc.add(field2);\n    writer.addDocument(doc);\n    writer.close();\n    \n    memory.addField(\"foo\", fooField.toString(), analyzer);\n    memory.addField(\"term\", termField.toString(), analyzer);\n    \n    AtomicReader reader = (AtomicReader) memory.createSearcher().getIndexReader();\n    DirectoryReader competitor = DirectoryReader.open(ramdir);\n    duellReaders(competitor, reader);\n    IOUtils.close(reader, competitor);\n    assertAllQueries(memory, ramdir, analyzer);  \n    ramdir.close();    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAgainstRAMDirectory(MemoryIndex).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAgainstRAMDirectory(MemoryIndex).mjava","sourceNew":"  /**\n   * Build a randomish document for both RAMDirectory and MemoryIndex,\n   * and run all the queries against it.\n   */\n  public void assertAgainstRAMDirectory(MemoryIndex memory) throws Exception {\n    memory.reset();\n    StringBuilder fooField = new StringBuilder();\n    StringBuilder termField = new StringBuilder();\n \n    // add up to 250 terms to field \"foo\"\n    final int numFooTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numFooTerms; i++) {\n      fooField.append(\" \");\n      fooField.append(randomTerm());\n    }\n\n    // add up to 250 terms to field \"term\"\n    final int numTermTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numTermTerms; i++) {\n      termField.append(\" \");\n      termField.append(randomTerm());\n    }\n    \n    Directory ramdir = new RAMDirectory();\n    Analyzer analyzer = randomAnalyzer();\n    IndexWriter writer = new IndexWriter(ramdir,\n                                         new IndexWriterConfig(analyzer).setCodec(TestUtil.alwaysPostingsFormat(TestUtil.getDefaultPostingsFormat())));\n    Document doc = new Document();\n    Field field1 = newTextField(\"foo\", fooField.toString(), Field.Store.NO);\n    Field field2 = newTextField(\"term\", termField.toString(), Field.Store.NO);\n    doc.add(field1);\n    doc.add(field2);\n    writer.addDocument(doc);\n    writer.close();\n    \n    memory.addField(\"foo\", fooField.toString(), analyzer);\n    memory.addField(\"term\", termField.toString(), analyzer);\n    \n    LeafReader reader = (LeafReader) memory.createSearcher().getIndexReader();\n    DirectoryReader competitor = DirectoryReader.open(ramdir);\n    duellReaders(competitor, reader);\n    IOUtils.close(reader, competitor);\n    assertAllQueries(memory, ramdir, analyzer);  \n    ramdir.close();    \n  }\n\n","sourceOld":"  /**\n   * Build a randomish document for both RAMDirectory and MemoryIndex,\n   * and run all the queries against it.\n   */\n  public void assertAgainstRAMDirectory(MemoryIndex memory) throws Exception {\n    memory.reset();\n    StringBuilder fooField = new StringBuilder();\n    StringBuilder termField = new StringBuilder();\n \n    // add up to 250 terms to field \"foo\"\n    final int numFooTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numFooTerms; i++) {\n      fooField.append(\" \");\n      fooField.append(randomTerm());\n    }\n\n    // add up to 250 terms to field \"term\"\n    final int numTermTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numTermTerms; i++) {\n      termField.append(\" \");\n      termField.append(randomTerm());\n    }\n    \n    Directory ramdir = new RAMDirectory();\n    Analyzer analyzer = randomAnalyzer();\n    IndexWriter writer = new IndexWriter(ramdir,\n                                         new IndexWriterConfig(analyzer).setCodec(TestUtil.alwaysPostingsFormat(TestUtil.getDefaultPostingsFormat())));\n    Document doc = new Document();\n    Field field1 = newTextField(\"foo\", fooField.toString(), Field.Store.NO);\n    Field field2 = newTextField(\"term\", termField.toString(), Field.Store.NO);\n    doc.add(field1);\n    doc.add(field2);\n    writer.addDocument(doc);\n    writer.close();\n    \n    memory.addField(\"foo\", fooField.toString(), analyzer);\n    memory.addField(\"term\", termField.toString(), analyzer);\n    \n    AtomicReader reader = (AtomicReader) memory.createSearcher().getIndexReader();\n    DirectoryReader competitor = DirectoryReader.open(ramdir);\n    duellReaders(competitor, reader);\n    IOUtils.close(reader, competitor);\n    assertAllQueries(memory, ramdir, analyzer);  \n    ramdir.close();    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"761333d77c7f29123c00c93b107b743f32f012e6","date":1411986072,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#assertAgainstRAMDirectory(MemoryIndex).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAgainstRAMDirectory(MemoryIndex).mjava","sourceNew":"  /**\n   * Build a randomish document for both RAMDirectory and MemoryIndex,\n   * and run all the queries against it.\n   */\n  public void assertAgainstRAMDirectory(MemoryIndex memory) throws Exception {\n    memory.reset();\n    StringBuilder fooField = new StringBuilder();\n    StringBuilder termField = new StringBuilder();\n \n    // add up to 250 terms to field \"foo\"\n    final int numFooTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numFooTerms; i++) {\n      fooField.append(\" \");\n      fooField.append(randomTerm());\n    }\n\n    // add up to 250 terms to field \"term\"\n    final int numTermTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numTermTerms; i++) {\n      termField.append(\" \");\n      termField.append(randomTerm());\n    }\n    \n    Directory ramdir = new RAMDirectory();\n    Analyzer analyzer = randomAnalyzer();\n    IndexWriter writer = new IndexWriter(ramdir,\n                                         new IndexWriterConfig(analyzer).setCodec(TestUtil.alwaysPostingsFormat(TestUtil.getDefaultPostingsFormat())));\n    Document doc = new Document();\n    Field field1 = newTextField(\"foo\", fooField.toString(), Field.Store.NO);\n    Field field2 = newTextField(\"term\", termField.toString(), Field.Store.NO);\n    doc.add(field1);\n    doc.add(field2);\n    writer.addDocument(doc);\n    writer.close();\n    \n    memory.addField(\"foo\", fooField.toString(), analyzer);\n    memory.addField(\"term\", termField.toString(), analyzer);\n    \n    LeafReader reader = (LeafReader) memory.createSearcher().getIndexReader();\n    DirectoryReader competitor = DirectoryReader.open(ramdir);\n    duellReaders(competitor, reader);\n    IOUtils.close(reader, competitor);\n    assertAllQueries(memory, ramdir, analyzer);  \n    ramdir.close();    \n  }\n\n","sourceOld":"  /**\n   * Build a randomish document for both RAMDirectory and MemoryIndex,\n   * and run all the queries against it.\n   */\n  public void assertAgainstRAMDirectory(MemoryIndex memory) throws Exception {\n    memory.reset();\n    StringBuilder fooField = new StringBuilder();\n    StringBuilder termField = new StringBuilder();\n \n    // add up to 250 terms to field \"foo\"\n    final int numFooTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numFooTerms; i++) {\n      fooField.append(\" \");\n      fooField.append(randomTerm());\n    }\n\n    // add up to 250 terms to field \"term\"\n    final int numTermTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numTermTerms; i++) {\n      termField.append(\" \");\n      termField.append(randomTerm());\n    }\n    \n    Directory ramdir = new RAMDirectory();\n    Analyzer analyzer = randomAnalyzer();\n    IndexWriter writer = new IndexWriter(ramdir,\n                                         new IndexWriterConfig(analyzer).setCodec(TestUtil.alwaysPostingsFormat(TestUtil.getDefaultPostingsFormat())));\n    Document doc = new Document();\n    Field field1 = newTextField(\"foo\", fooField.toString(), Field.Store.NO);\n    Field field2 = newTextField(\"term\", termField.toString(), Field.Store.NO);\n    doc.add(field1);\n    doc.add(field2);\n    writer.addDocument(doc);\n    writer.close();\n    \n    memory.addField(\"foo\", fooField.toString(), analyzer);\n    memory.addField(\"term\", termField.toString(), analyzer);\n    \n    LeafReader reader = (LeafReader) memory.createSearcher().getIndexReader();\n    DirectoryReader competitor = DirectoryReader.open(ramdir);\n    duellReaders(competitor, reader);\n    IOUtils.close(reader, competitor);\n    assertAllQueries(memory, ramdir, analyzer);  \n    ramdir.close();    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#assertAgainstRAMDirectory(MemoryIndex).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#assertAgainstRAMDirectory(MemoryIndex).mjava","sourceNew":"  /**\n   * Build a randomish document for both RAMDirectory and MemoryIndex,\n   * and run all the queries against it.\n   */\n  public void assertAgainstRAMDirectory(MemoryIndex memory) throws Exception {\n    memory.reset();\n    StringBuilder fooField = new StringBuilder();\n    StringBuilder termField = new StringBuilder();\n \n    // add up to 250 terms to field \"foo\"\n    final int numFooTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numFooTerms; i++) {\n      fooField.append(\" \");\n      fooField.append(randomTerm());\n    }\n\n    // add up to 250 terms to field \"term\"\n    final int numTermTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numTermTerms; i++) {\n      termField.append(\" \");\n      termField.append(randomTerm());\n    }\n    \n    Directory ramdir = new RAMDirectory();\n    Analyzer analyzer = randomAnalyzer();\n    IndexWriter writer = new IndexWriter(ramdir,\n                                         new IndexWriterConfig(analyzer).setCodec(TestUtil.alwaysPostingsFormat(TestUtil.getDefaultPostingsFormat())));\n    Document doc = new Document();\n    Field field1 = newTextField(\"foo\", fooField.toString(), Field.Store.NO);\n    Field field2 = newTextField(\"term\", termField.toString(), Field.Store.NO);\n    doc.add(field1);\n    doc.add(field2);\n    writer.addDocument(doc);\n    writer.close();\n    \n    memory.addField(\"foo\", fooField.toString(), analyzer);\n    memory.addField(\"term\", termField.toString(), analyzer);\n    \n    LeafReader reader = (LeafReader) memory.createSearcher().getIndexReader();\n    DirectoryReader competitor = DirectoryReader.open(ramdir);\n    duellReaders(competitor, reader);\n    IOUtils.close(reader, competitor);\n    assertAllQueries(memory, ramdir, analyzer);  \n    ramdir.close();    \n  }\n\n","sourceOld":"  /**\n   * Build a randomish document for both RAMDirectory and MemoryIndex,\n   * and run all the queries against it.\n   */\n  public void assertAgainstRAMDirectory(MemoryIndex memory) throws Exception {\n    memory.reset();\n    StringBuilder fooField = new StringBuilder();\n    StringBuilder termField = new StringBuilder();\n \n    // add up to 250 terms to field \"foo\"\n    final int numFooTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numFooTerms; i++) {\n      fooField.append(\" \");\n      fooField.append(randomTerm());\n    }\n\n    // add up to 250 terms to field \"term\"\n    final int numTermTerms = random().nextInt(250 * RANDOM_MULTIPLIER);\n    for (int i = 0; i < numTermTerms; i++) {\n      termField.append(\" \");\n      termField.append(randomTerm());\n    }\n    \n    Directory ramdir = new RAMDirectory();\n    Analyzer analyzer = randomAnalyzer();\n    IndexWriter writer = new IndexWriter(ramdir,\n                                         new IndexWriterConfig(analyzer).setCodec(TestUtil.alwaysPostingsFormat(TestUtil.getDefaultPostingsFormat())));\n    Document doc = new Document();\n    Field field1 = newTextField(\"foo\", fooField.toString(), Field.Store.NO);\n    Field field2 = newTextField(\"term\", termField.toString(), Field.Store.NO);\n    doc.add(field1);\n    doc.add(field2);\n    writer.addDocument(doc);\n    writer.close();\n    \n    memory.addField(\"foo\", fooField.toString(), analyzer);\n    memory.addField(\"term\", termField.toString(), analyzer);\n    \n    LeafReader reader = (LeafReader) memory.createSearcher().getIndexReader();\n    DirectoryReader competitor = DirectoryReader.open(ramdir);\n    duellReaders(competitor, reader);\n    IOUtils.close(reader, competitor);\n    assertAllQueries(memory, ramdir, analyzer);  \n    ramdir.close();    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e49088db00ea6cb232fbde9c8c646c721d4d049f":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"6613659748fe4411a7dcf85266e55db1f95f7315":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["e1eb6b3ce884c0b9e064e112da158013ec33cd91"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["c9fb5f46e264daf5ba3860defe623a89d202dd87","761333d77c7f29123c00c93b107b743f32f012e6"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["6613659748fe4411a7dcf85266e55db1f95f7315"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","e1eb6b3ce884c0b9e064e112da158013ec33cd91"],"e1eb6b3ce884c0b9e064e112da158013ec33cd91":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"761333d77c7f29123c00c93b107b743f32f012e6":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["e49088db00ea6cb232fbde9c8c646c721d4d049f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["761333d77c7f29123c00c93b107b743f32f012e6"]},"commit2Childs":{"e49088db00ea6cb232fbde9c8c646c721d4d049f":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"6613659748fe4411a7dcf85266e55db1f95f7315":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["6613659748fe4411a7dcf85266e55db1f95f7315"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["e49088db00ea6cb232fbde9c8c646c721d4d049f"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","e1eb6b3ce884c0b9e064e112da158013ec33cd91"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"e1eb6b3ce884c0b9e064e112da158013ec33cd91":["d0ef034a4f10871667ae75181537775ddcf8ade4","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d9a47902d6207303f5ed3e7aaca62ca33433af66","761333d77c7f29123c00c93b107b743f32f012e6"],"761333d77c7f29123c00c93b107b743f32f012e6":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d9a47902d6207303f5ed3e7aaca62ca33433af66","c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}