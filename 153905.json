{"path":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#privateDeleteFile(String,boolean).mjava","commits":[{"id":"cedcb3038bb218e20fc9c61e3b50642101e656e8","date":1454869299,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#privateDeleteFile(String,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#privateDeleteFile(String).mjava","sourceNew":"  private void privateDeleteFile(String name, boolean isPendingDelete) throws IOException {\n    try {\n      Files.delete(directory.resolve(name));\n      pendingDeletes.remove(name);\n    } catch (NoSuchFileException | FileNotFoundException e) {\n      // We were asked to delete a non-existent file:\n      pendingDeletes.remove(name);\n      if (isPendingDelete && Constants.WINDOWS) {\n        // TODO: can we remove this OS-specific hacky logic?  If windows deleteFile is buggy, we should instead contain this workaround in\n        // a WindowsFSDirectory ...\n        // LUCENE-6684: we suppress this check for Windows, since a file could be in a confusing \"pending delete\" state, failing the first\n        // delete attempt with access denied and then apparently falsely failing here when we try ot delete it again, with NSFE/FNFE\n      } else {\n        throw e;\n      }\n    } catch (IOException ioe) {\n      // On windows, a file delete can fail because there's still an open\n      // file handle against it.  We record this in pendingDeletes and\n      // try again later.\n\n      // TODO: this is hacky/lenient (we don't know which IOException this is), and\n      // it should only happen on filesystems that can do this, so really we should\n      // move this logic to WindowsDirectory or something\n\n      // TODO: can/should we do if (Constants.WINDOWS) here, else throw the exc?\n      // but what about a Linux box with a CIFS mount?\n      pendingDeletes.add(name);\n    }\n  }\n\n","sourceOld":"  private void privateDeleteFile(String name) throws IOException {\n    try {\n      Files.delete(directory.resolve(name));\n      pendingDeletes.remove(name);\n    } catch (NoSuchFileException | FileNotFoundException e) {\n      // We were asked to delete a non-existent file:\n      pendingDeletes.remove(name);\n      throw e;\n    } catch (IOException ioe) {\n      // On windows, a file delete can fail because there's still an open\n      // file handle against it.  We record this in pendingDeletes and\n      // try again later.\n\n      // TODO: this is hacky/lenient (we don't know which IOException this is), and\n      // it should only happen on filesystems that can do this, so really we should\n      // move this logic to WindowsDirectory or something\n\n      // TODO: can/should we do if (Constants.WINDOWS) here, else throw the exc?\n      // but what about a Linux box with a CIFS mount?\n      pendingDeletes.add(name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd75f58072bba84066e89d61bd7028de1bd5b632","date":1454871793,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#privateDeleteFile(String,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/FSDirectory#privateDeleteFile(String).mjava","sourceNew":"  private void privateDeleteFile(String name, boolean isPendingDelete) throws IOException {\n    try {\n      Files.delete(directory.resolve(name));\n      pendingDeletes.remove(name);\n    } catch (NoSuchFileException | FileNotFoundException e) {\n      // We were asked to delete a non-existent file:\n      pendingDeletes.remove(name);\n      if (isPendingDelete && Constants.WINDOWS) {\n        // TODO: can we remove this OS-specific hacky logic?  If windows deleteFile is buggy, we should instead contain this workaround in\n        // a WindowsFSDirectory ...\n        // LUCENE-6684: we suppress this check for Windows, since a file could be in a confusing \"pending delete\" state, failing the first\n        // delete attempt with access denied and then apparently falsely failing here when we try ot delete it again, with NSFE/FNFE\n      } else {\n        throw e;\n      }\n    } catch (IOException ioe) {\n      // On windows, a file delete can fail because there's still an open\n      // file handle against it.  We record this in pendingDeletes and\n      // try again later.\n\n      // TODO: this is hacky/lenient (we don't know which IOException this is), and\n      // it should only happen on filesystems that can do this, so really we should\n      // move this logic to WindowsDirectory or something\n\n      // TODO: can/should we do if (Constants.WINDOWS) here, else throw the exc?\n      // but what about a Linux box with a CIFS mount?\n      pendingDeletes.add(name);\n    }\n  }\n\n","sourceOld":"  private void privateDeleteFile(String name) throws IOException {\n    try {\n      Files.delete(directory.resolve(name));\n      pendingDeletes.remove(name);\n    } catch (NoSuchFileException | FileNotFoundException e) {\n      // We were asked to delete a non-existent file:\n      pendingDeletes.remove(name);\n      throw e;\n    } catch (IOException ioe) {\n      // On windows, a file delete can fail because there's still an open\n      // file handle against it.  We record this in pendingDeletes and\n      // try again later.\n\n      // TODO: this is hacky/lenient (we don't know which IOException this is), and\n      // it should only happen on filesystems that can do this, so really we should\n      // move this logic to WindowsDirectory or something\n\n      // TODO: can/should we do if (Constants.WINDOWS) here, else throw the exc?\n      // but what about a Linux box with a CIFS mount?\n      pendingDeletes.add(name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd75f58072bba84066e89d61bd7028de1bd5b632":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cedcb3038bb218e20fc9c61e3b50642101e656e8"],"cedcb3038bb218e20fc9c61e3b50642101e656e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cedcb3038bb218e20fc9c61e3b50642101e656e8"]},"commit2Childs":{"dd75f58072bba84066e89d61bd7028de1bd5b632":[],"cedcb3038bb218e20fc9c61e3b50642101e656e8":["dd75f58072bba84066e89d61bd7028de1bd5b632","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd75f58072bba84066e89d61bd7028de1bd5b632","cedcb3038bb218e20fc9c61e3b50642101e656e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dd75f58072bba84066e89d61bd7028de1bd5b632","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}