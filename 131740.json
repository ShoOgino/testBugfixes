{"path":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#getFieldCodec(String).mjava","commits":[{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#getFieldCodec(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#getFieldCodec(String).mjava","sourceNew":"    @Override\n    public synchronized String getFieldCodec(String name) {\n      Codec codec = previousMappings.get(name);\n      if (codec == null) {\n        codec = knownCodecs.get(Math.abs(perFieldSeed ^ name.hashCode()) % knownCodecs.size());\n        previousMappings.put(name, codec);\n      }\n      return codec.name;\n    }\n\n","sourceOld":"    @Override\n    public synchronized String getFieldCodec(String name) {\n      Codec codec = previousMappings.get(name);\n      if (codec == null) {\n        codec = knownCodecs.get(Math.abs(perFieldSeed ^ name.hashCode()) % knownCodecs.size());\n        previousMappings.put(name, codec);\n      }\n      return codec.name;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#getFieldCodec(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#getFieldCodec(String).mjava","sourceNew":"    @Override\n    public synchronized String getFieldCodec(String name) {\n      Codec codec = previousMappings.get(name);\n      if (codec == null) {\n        codec = knownCodecs.get(Math.abs(perFieldSeed ^ name.hashCode()) % knownCodecs.size());\n        previousMappings.put(name, codec);\n      }\n      return codec.name;\n    }\n\n","sourceOld":"    @Override\n    public synchronized String getFieldCodec(String name) {\n      Codec codec = previousMappings.get(name);\n      if (codec == null) {\n        codec = knownCodecs.get(Math.abs(perFieldSeed ^ name.hashCode()) % knownCodecs.size());\n        previousMappings.put(name, codec);\n      }\n      return codec.name;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#getFieldCodec(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#getFieldCodec(String).mjava","sourceNew":"    @Override\n    public synchronized String getFieldCodec(String name) {\n      Codec codec = previousMappings.get(name);\n      if (codec == null) {\n        codec = knownCodecs.get(Math.abs(perFieldSeed ^ name.hashCode()) % knownCodecs.size());\n        previousMappings.put(name, codec);\n      }\n      return codec.name;\n    }\n\n","sourceOld":"    @Override\n    public synchronized String getFieldCodec(String name) {\n      Codec codec = previousMappings.get(name);\n      if (codec == null) {\n        codec = knownCodecs.get(Math.abs(perFieldSeed ^ name.hashCode()) % knownCodecs.size());\n        previousMappings.put(name, codec);\n      }\n      return codec.name;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#getFieldCodec(String).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#getFieldCodec(String).mjava","sourceNew":"    @Override\n    public synchronized String getFieldCodec(String name) {\n      Codec codec = previousMappings.get(name);\n      if (codec == null) {\n        codec = knownCodecs.get(Math.abs(perFieldSeed ^ name.hashCode()) % knownCodecs.size());\n        if (codec instanceof SimpleTextCodec && perFieldSeed % 5 != 0) {\n          // make simpletext rarer, choose again\n          codec = knownCodecs.get(Math.abs(perFieldSeed ^ name.toUpperCase(Locale.ENGLISH).hashCode()) % knownCodecs.size());\n        }\n        previousMappings.put(name, codec);\n      }\n      return codec.name;\n    }\n\n","sourceOld":"    @Override\n    public synchronized String getFieldCodec(String name) {\n      Codec codec = previousMappings.get(name);\n      if (codec == null) {\n        codec = knownCodecs.get(Math.abs(perFieldSeed ^ name.hashCode()) % knownCodecs.size());\n        previousMappings.put(name, codec);\n      }\n      return codec.name;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#getFieldCodec(String).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#getFieldCodec(String).mjava","sourceNew":"    @Override\n    public synchronized String getFieldCodec(String name) {\n      Codec codec = previousMappings.get(name);\n      if (codec == null) {\n        codec = knownCodecs.get(Math.abs(perFieldSeed ^ name.hashCode()) % knownCodecs.size());\n        if (codec instanceof SimpleTextCodec && perFieldSeed % 5 != 0) {\n          // make simpletext rarer, choose again\n          codec = knownCodecs.get(Math.abs(perFieldSeed ^ name.toUpperCase(Locale.ENGLISH).hashCode()) % knownCodecs.size());\n        }\n        previousMappings.put(name, codec);\n      }\n      return codec.name;\n    }\n\n","sourceOld":"    @Override\n    public synchronized String getFieldCodec(String name) {\n      Codec codec = previousMappings.get(name);\n      if (codec == null) {\n        codec = knownCodecs.get(Math.abs(perFieldSeed ^ name.hashCode()) % knownCodecs.size());\n        previousMappings.put(name, codec);\n      }\n      return codec.name;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#getFieldCodec(String).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#getFieldCodec(String).mjava","sourceNew":"    @Override\n    public synchronized String getFieldCodec(String name) {\n      Codec codec = previousMappings.get(name);\n      if (codec == null) {\n        codec = knownCodecs.get(Math.abs(perFieldSeed ^ name.hashCode()) % knownCodecs.size());\n        if (codec instanceof SimpleTextCodec && perFieldSeed % 5 != 0) {\n          // make simpletext rarer, choose again\n          codec = knownCodecs.get(Math.abs(perFieldSeed ^ name.toUpperCase(Locale.ENGLISH).hashCode()) % knownCodecs.size());\n        }\n        previousMappings.put(name, codec);\n      }\n      return codec.name;\n    }\n\n","sourceOld":"    @Override\n    public synchronized String getFieldCodec(String name) {\n      Codec codec = previousMappings.get(name);\n      if (codec == null) {\n        codec = knownCodecs.get(Math.abs(perFieldSeed ^ name.hashCode()) % knownCodecs.size());\n        previousMappings.put(name, codec);\n      }\n      return codec.name;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0eb7463fbe86f15add19bc7b9206f9e98a73144","date":1314325319,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.RandomCodecProvider#getFieldCodec(String).mjava","sourceNew":null,"sourceOld":"    @Override\n    public synchronized String getFieldCodec(String name) {\n      Codec codec = previousMappings.get(name);\n      if (codec == null) {\n        codec = knownCodecs.get(Math.abs(perFieldSeed ^ name.hashCode()) % knownCodecs.size());\n        if (codec instanceof SimpleTextCodec && perFieldSeed % 5 != 0) {\n          // make simpletext rarer, choose again\n          codec = knownCodecs.get(Math.abs(perFieldSeed ^ name.toUpperCase(Locale.ENGLISH).hashCode()) % knownCodecs.size());\n        }\n        previousMappings.put(name, codec);\n      }\n      return codec.name;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"79c2cb24929f2649a8875fb629086171f914d5ce":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["29ef99d61cda9641b6250bf9567329a6e65f901d","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"e0eb7463fbe86f15add19bc7b9206f9e98a73144":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e0eb7463fbe86f15add19bc7b9206f9e98a73144"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","e0eb7463fbe86f15add19bc7b9206f9e98a73144"],"79c2cb24929f2649a8875fb629086171f914d5ce":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"e0eb7463fbe86f15add19bc7b9206f9e98a73144":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","79c2cb24929f2649a8875fb629086171f914d5ce","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}