{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsQueryFilter().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsQueryFilter().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsQueryFilter().mjava","sourceNew":"  /**\n   * This is for testing CommonGramsQueryFilter which outputs a set of tokens\n   * optimized for querying with only one token at each position, either a\n   * unigram or a bigram It also will not return a token for the final position\n   * if the final word is already in the preceding bigram Example:(three\n   * tokens/positions in)\n   * \"foo bar the\"=>\"foo:1|bar:2,bar-the:2|the:3=> \"foo\" \"bar-the\" (2 tokens\n   * out)\n   * \n   * @return Map<String,String>\n   */\n  public void testCommonGramsQueryFilter() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field, Reader in) {\n        Tokenizer tokenizer = new MockTokenizer(in, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new CommonGramsQueryFilter(new CommonGramsFilter(TEST_VERSION_CURRENT,\n            tokenizer, commonWords)));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    \n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the_fox\" });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox_of\" });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of_the\" });\n    \n    // one word queries\n    assertAnalyzesTo(a, \"the\", \n        new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", \n        new String[] { \"foo\" });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n_s\" });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown_the\" });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"quick the brown\", \n        new String[] { \"quick_the\", \"the_brown\" });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox_of\", \"of_the\" });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s_n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the_quick\", \"quick\", \"brown\" });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s_n\", \"n_s\" });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the_fox\", \"fox_of\" });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of_the\", \"the_fox\" });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of_the\", \"the_of\" });\n  }\n\n","sourceOld":"  /**\n   * This is for testing CommonGramsQueryFilter which outputs a set of tokens\n   * optimized for querying with only one token at each position, either a\n   * unigram or a bigram It also will not return a token for the final position\n   * if the final word is already in the preceding bigram Example:(three\n   * tokens/positions in)\n   * \"foo bar the\"=>\"foo:1|bar:2,bar-the:2|the:3=> \"foo\" \"bar-the\" (2 tokens\n   * out)\n   * \n   * @return Map<String,String>\n   */\n  public void testCommonGramsQueryFilter() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field, Reader in) {\n        Tokenizer tokenizer = new MockTokenizer(in, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new CommonGramsQueryFilter(new CommonGramsFilter(TEST_VERSION_CURRENT,\n            tokenizer, commonWords)));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    \n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the_fox\" });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox_of\" });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of_the\" });\n    \n    // one word queries\n    assertAnalyzesTo(a, \"the\", \n        new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", \n        new String[] { \"foo\" });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n_s\" });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown_the\" });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"quick the brown\", \n        new String[] { \"quick_the\", \"the_brown\" });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox_of\", \"of_the\" });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s_n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the_quick\", \"quick\", \"brown\" });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s_n\", \"n_s\" });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the_fox\", \"fox_of\" });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of_the\", \"the_fox\" });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of_the\", \"the_of\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd9ddb59e9d33950773d186a8b726b5610ae3aad","date":1341258232,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsQueryFilter().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsQueryFilter().mjava","sourceNew":"  /**\n   * This is for testing CommonGramsQueryFilter which outputs a set of tokens\n   * optimized for querying with only one token at each position, either a\n   * unigram or a bigram It also will not return a token for the final position\n   * if the final word is already in the preceding bigram Example:(three\n   * tokens/positions in)\n   * \"foo bar the\"=>\"foo:1|bar:2,bar-the:2|the:3=> \"foo\" \"bar-the\" (2 tokens\n   * out)\n   * \n   */\n  public void testCommonGramsQueryFilter() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field, Reader in) {\n        Tokenizer tokenizer = new MockTokenizer(in, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new CommonGramsQueryFilter(new CommonGramsFilter(TEST_VERSION_CURRENT,\n            tokenizer, commonWords)));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    \n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the_fox\" });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox_of\" });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of_the\" });\n    \n    // one word queries\n    assertAnalyzesTo(a, \"the\", \n        new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", \n        new String[] { \"foo\" });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n_s\" });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown_the\" });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"quick the brown\", \n        new String[] { \"quick_the\", \"the_brown\" });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox_of\", \"of_the\" });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s_n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the_quick\", \"quick\", \"brown\" });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s_n\", \"n_s\" });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the_fox\", \"fox_of\" });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of_the\", \"the_fox\" });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of_the\", \"the_of\" });\n  }\n\n","sourceOld":"  /**\n   * This is for testing CommonGramsQueryFilter which outputs a set of tokens\n   * optimized for querying with only one token at each position, either a\n   * unigram or a bigram It also will not return a token for the final position\n   * if the final word is already in the preceding bigram Example:(three\n   * tokens/positions in)\n   * \"foo bar the\"=>\"foo:1|bar:2,bar-the:2|the:3=> \"foo\" \"bar-the\" (2 tokens\n   * out)\n   * \n   * @return Map<String,String>\n   */\n  public void testCommonGramsQueryFilter() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field, Reader in) {\n        Tokenizer tokenizer = new MockTokenizer(in, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new CommonGramsQueryFilter(new CommonGramsFilter(TEST_VERSION_CURRENT,\n            tokenizer, commonWords)));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    \n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the_fox\" });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox_of\" });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of_the\" });\n    \n    // one word queries\n    assertAnalyzesTo(a, \"the\", \n        new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", \n        new String[] { \"foo\" });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n_s\" });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown_the\" });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"quick the brown\", \n        new String[] { \"quick_the\", \"the_brown\" });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox_of\", \"of_the\" });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s_n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the_quick\", \"quick\", \"brown\" });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s_n\", \"n_s\" });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the_fox\", \"fox_of\" });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of_the\", \"the_fox\" });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of_the\", \"the_of\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsQueryFilter().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsQueryFilter().mjava","sourceNew":"  /**\n   * This is for testing CommonGramsQueryFilter which outputs a set of tokens\n   * optimized for querying with only one token at each position, either a\n   * unigram or a bigram It also will not return a token for the final position\n   * if the final word is already in the preceding bigram Example:(three\n   * tokens/positions in)\n   * \"foo bar the\"=>\"foo:1|bar:2,bar-the:2|the:3=> \"foo\" \"bar-the\" (2 tokens\n   * out)\n   * \n   */\n  public void testCommonGramsQueryFilter() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field, Reader in) {\n        Tokenizer tokenizer = new MockTokenizer(in, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new CommonGramsQueryFilter(new CommonGramsFilter(TEST_VERSION_CURRENT,\n            tokenizer, commonWords)));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    \n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the_fox\" });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox_of\" });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of_the\" });\n    \n    // one word queries\n    assertAnalyzesTo(a, \"the\", \n        new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", \n        new String[] { \"foo\" });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n_s\" });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown_the\" });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"quick the brown\", \n        new String[] { \"quick_the\", \"the_brown\" });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox_of\", \"of_the\" });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s_n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the_quick\", \"quick\", \"brown\" });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s_n\", \"n_s\" });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the_fox\", \"fox_of\" });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of_the\", \"the_fox\" });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of_the\", \"the_of\" });\n  }\n\n","sourceOld":"  /**\n   * This is for testing CommonGramsQueryFilter which outputs a set of tokens\n   * optimized for querying with only one token at each position, either a\n   * unigram or a bigram It also will not return a token for the final position\n   * if the final word is already in the preceding bigram Example:(three\n   * tokens/positions in)\n   * \"foo bar the\"=>\"foo:1|bar:2,bar-the:2|the:3=> \"foo\" \"bar-the\" (2 tokens\n   * out)\n   * \n   * @return Map<String,String>\n   */\n  public void testCommonGramsQueryFilter() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field, Reader in) {\n        Tokenizer tokenizer = new MockTokenizer(in, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new CommonGramsQueryFilter(new CommonGramsFilter(TEST_VERSION_CURRENT,\n            tokenizer, commonWords)));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    \n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the_fox\" });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox_of\" });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of_the\" });\n    \n    // one word queries\n    assertAnalyzesTo(a, \"the\", \n        new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", \n        new String[] { \"foo\" });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n_s\" });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown_the\" });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"quick the brown\", \n        new String[] { \"quick_the\", \"the_brown\" });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox_of\", \"of_the\" });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s_n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the_quick\", \"quick\", \"brown\" });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s_n\", \"n_s\" });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the_fox\", \"fox_of\" });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of_the\", \"the_fox\" });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of_the\", \"the_of\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsQueryFilter().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsQueryFilter().mjava","sourceNew":"  /**\n   * This is for testing CommonGramsQueryFilter which outputs a set of tokens\n   * optimized for querying with only one token at each position, either a\n   * unigram or a bigram It also will not return a token for the final position\n   * if the final word is already in the preceding bigram Example:(three\n   * tokens/positions in)\n   * \"foo bar the\"=>\"foo:1|bar:2,bar-the:2|the:3=> \"foo\" \"bar-the\" (2 tokens\n   * out)\n   * \n   */\n  public void testCommonGramsQueryFilter() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new CommonGramsQueryFilter(new CommonGramsFilter(TEST_VERSION_CURRENT,\n            tokenizer, commonWords)));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    \n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the_fox\" });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox_of\" });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of_the\" });\n    \n    // one word queries\n    assertAnalyzesTo(a, \"the\", \n        new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", \n        new String[] { \"foo\" });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n_s\" });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown_the\" });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"quick the brown\", \n        new String[] { \"quick_the\", \"the_brown\" });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox_of\", \"of_the\" });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s_n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the_quick\", \"quick\", \"brown\" });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s_n\", \"n_s\" });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the_fox\", \"fox_of\" });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of_the\", \"the_fox\" });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of_the\", \"the_of\" });\n  }\n\n","sourceOld":"  /**\n   * This is for testing CommonGramsQueryFilter which outputs a set of tokens\n   * optimized for querying with only one token at each position, either a\n   * unigram or a bigram It also will not return a token for the final position\n   * if the final word is already in the preceding bigram Example:(three\n   * tokens/positions in)\n   * \"foo bar the\"=>\"foo:1|bar:2,bar-the:2|the:3=> \"foo\" \"bar-the\" (2 tokens\n   * out)\n   * \n   */\n  public void testCommonGramsQueryFilter() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field, Reader in) {\n        Tokenizer tokenizer = new MockTokenizer(in, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new CommonGramsQueryFilter(new CommonGramsFilter(TEST_VERSION_CURRENT,\n            tokenizer, commonWords)));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    \n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the_fox\" });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox_of\" });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of_the\" });\n    \n    // one word queries\n    assertAnalyzesTo(a, \"the\", \n        new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", \n        new String[] { \"foo\" });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n_s\" });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown_the\" });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"quick the brown\", \n        new String[] { \"quick_the\", \"the_brown\" });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox_of\", \"of_the\" });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s_n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the_quick\", \"quick\", \"brown\" });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s_n\", \"n_s\" });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the_fox\", \"fox_of\" });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of_the\", \"the_fox\" });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of_the\", \"the_of\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsQueryFilter().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsQueryFilter().mjava","sourceNew":"  /**\n   * This is for testing CommonGramsQueryFilter which outputs a set of tokens\n   * optimized for querying with only one token at each position, either a\n   * unigram or a bigram It also will not return a token for the final position\n   * if the final word is already in the preceding bigram Example:(three\n   * tokens/positions in)\n   * \"foo bar the\"=>\"foo:1|bar:2,bar-the:2|the:3=> \"foo\" \"bar-the\" (2 tokens\n   * out)\n   * \n   */\n  public void testCommonGramsQueryFilter() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new CommonGramsQueryFilter(new CommonGramsFilter(\n            tokenizer, commonWords)));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    \n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the_fox\" });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox_of\" });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of_the\" });\n    \n    // one word queries\n    assertAnalyzesTo(a, \"the\", \n        new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", \n        new String[] { \"foo\" });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n_s\" });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown_the\" });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"quick the brown\", \n        new String[] { \"quick_the\", \"the_brown\" });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox_of\", \"of_the\" });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s_n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the_quick\", \"quick\", \"brown\" });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s_n\", \"n_s\" });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the_fox\", \"fox_of\" });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of_the\", \"the_fox\" });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of_the\", \"the_of\" });\n  }\n\n","sourceOld":"  /**\n   * This is for testing CommonGramsQueryFilter which outputs a set of tokens\n   * optimized for querying with only one token at each position, either a\n   * unigram or a bigram It also will not return a token for the final position\n   * if the final word is already in the preceding bigram Example:(three\n   * tokens/positions in)\n   * \"foo bar the\"=>\"foo:1|bar:2,bar-the:2|the:3=> \"foo\" \"bar-the\" (2 tokens\n   * out)\n   * \n   */\n  public void testCommonGramsQueryFilter() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new CommonGramsQueryFilter(new CommonGramsFilter(TEST_VERSION_CURRENT,\n            tokenizer, commonWords)));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    \n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the_fox\" });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox_of\" });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of_the\" });\n    \n    // one word queries\n    assertAnalyzesTo(a, \"the\", \n        new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", \n        new String[] { \"foo\" });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n_s\" });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown_the\" });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"quick the brown\", \n        new String[] { \"quick_the\", \"the_brown\" });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox_of\", \"of_the\" });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s_n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the_quick\", \"quick\", \"brown\" });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s_n\", \"n_s\" });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the_fox\", \"fox_of\" });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of_the\", \"the_fox\" });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of_the\", \"the_of\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsQueryFilter().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsQueryFilter().mjava","sourceNew":"  /**\n   * This is for testing CommonGramsQueryFilter which outputs a set of tokens\n   * optimized for querying with only one token at each position, either a\n   * unigram or a bigram It also will not return a token for the final position\n   * if the final word is already in the preceding bigram Example:(three\n   * tokens/positions in)\n   * \"foo bar the\"=>\"foo:1|bar:2,bar-the:2|the:3=> \"foo\" \"bar-the\" (2 tokens\n   * out)\n   * \n   */\n  public void testCommonGramsQueryFilter() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new CommonGramsQueryFilter(new CommonGramsFilter(TEST_VERSION_CURRENT,\n            tokenizer, commonWords)));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    \n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the_fox\" });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox_of\" });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of_the\" });\n    \n    // one word queries\n    assertAnalyzesTo(a, \"the\", \n        new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", \n        new String[] { \"foo\" });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n_s\" });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown_the\" });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"quick the brown\", \n        new String[] { \"quick_the\", \"the_brown\" });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox_of\", \"of_the\" });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s_n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the_quick\", \"quick\", \"brown\" });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s_n\", \"n_s\" });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the_fox\", \"fox_of\" });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of_the\", \"the_fox\" });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of_the\", \"the_of\" });\n  }\n\n","sourceOld":"  /**\n   * This is for testing CommonGramsQueryFilter which outputs a set of tokens\n   * optimized for querying with only one token at each position, either a\n   * unigram or a bigram It also will not return a token for the final position\n   * if the final word is already in the preceding bigram Example:(three\n   * tokens/positions in)\n   * \"foo bar the\"=>\"foo:1|bar:2,bar-the:2|the:3=> \"foo\" \"bar-the\" (2 tokens\n   * out)\n   * \n   */\n  public void testCommonGramsQueryFilter() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new CommonGramsQueryFilter(new CommonGramsFilter(\n            tokenizer, commonWords)));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    \n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the_fox\" });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox_of\" });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of_the\" });\n    \n    // one word queries\n    assertAnalyzesTo(a, \"the\", \n        new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", \n        new String[] { \"foo\" });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n_s\" });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown_the\" });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"quick the brown\", \n        new String[] { \"quick_the\", \"the_brown\" });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox_of\", \"of_the\" });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s_n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the_quick\", \"quick\", \"brown\" });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s_n\", \"n_s\" });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the_fox\", \"fox_of\" });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of_the\", \"the_fox\" });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of_the\", \"the_of\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsQueryFilter().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsQueryFilter().mjava","sourceNew":"  /**\n   * This is for testing CommonGramsQueryFilter which outputs a set of tokens\n   * optimized for querying with only one token at each position, either a\n   * unigram or a bigram It also will not return a token for the final position\n   * if the final word is already in the preceding bigram Example:(three\n   * tokens/positions in)\n   * \"foo bar the\"=>\"foo:1|bar:2,bar-the:2|the:3=> \"foo\" \"bar-the\" (2 tokens\n   * out)\n   * \n   */\n  public void testCommonGramsQueryFilter() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new CommonGramsQueryFilter(new CommonGramsFilter(\n            tokenizer, commonWords)));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    \n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the_fox\" });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox_of\" });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of_the\" });\n    \n    // one word queries\n    assertAnalyzesTo(a, \"the\", \n        new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", \n        new String[] { \"foo\" });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n_s\" });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown_the\" });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"quick the brown\", \n        new String[] { \"quick_the\", \"the_brown\" });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox_of\", \"of_the\" });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s_n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the_quick\", \"quick\", \"brown\" });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s_n\", \"n_s\" });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the_fox\", \"fox_of\" });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of_the\", \"the_fox\" });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of_the\", \"the_of\" });\n  }\n\n","sourceOld":"  /**\n   * This is for testing CommonGramsQueryFilter which outputs a set of tokens\n   * optimized for querying with only one token at each position, either a\n   * unigram or a bigram It also will not return a token for the final position\n   * if the final word is already in the preceding bigram Example:(three\n   * tokens/positions in)\n   * \"foo bar the\"=>\"foo:1|bar:2,bar-the:2|the:3=> \"foo\" \"bar-the\" (2 tokens\n   * out)\n   * \n   */\n  public void testCommonGramsQueryFilter() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new CommonGramsQueryFilter(new CommonGramsFilter(TEST_VERSION_CURRENT,\n            tokenizer, commonWords)));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    \n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the_fox\" });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox_of\" });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of_the\" });\n    \n    // one word queries\n    assertAnalyzesTo(a, \"the\", \n        new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", \n        new String[] { \"foo\" });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n_s\" });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown_the\" });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"quick the brown\", \n        new String[] { \"quick_the\", \"the_brown\" });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox_of\", \"of_the\" });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s_n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the_quick\", \"quick\", \"brown\" });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s_n\", \"n_s\" });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the_fox\", \"fox_of\" });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of_the\", \"the_fox\" });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of_the\", \"the_of\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1eb427f2c6beed80d1724555fc1db003ccf3030","date":1417137397,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsQueryFilter().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsQueryFilter().mjava","sourceNew":"  /**\n   * This is for testing CommonGramsQueryFilter which outputs a set of tokens\n   * optimized for querying with only one token at each position, either a\n   * unigram or a bigram It also will not return a token for the final position\n   * if the final word is already in the preceding bigram Example:(three\n   * tokens/positions in)\n   * \"foo bar the\"=&gt;\"foo:1|bar:2,bar-the:2|the:3=&gt; \"foo\" \"bar-the\" (2 tokens\n   * out)\n   * \n   */\n  public void testCommonGramsQueryFilter() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new CommonGramsQueryFilter(new CommonGramsFilter(\n            tokenizer, commonWords)));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    \n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the_fox\" });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox_of\" });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of_the\" });\n    \n    // one word queries\n    assertAnalyzesTo(a, \"the\", \n        new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", \n        new String[] { \"foo\" });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n_s\" });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown_the\" });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"quick the brown\", \n        new String[] { \"quick_the\", \"the_brown\" });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox_of\", \"of_the\" });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s_n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the_quick\", \"quick\", \"brown\" });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s_n\", \"n_s\" });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the_fox\", \"fox_of\" });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of_the\", \"the_fox\" });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of_the\", \"the_of\" });\n  }\n\n","sourceOld":"  /**\n   * This is for testing CommonGramsQueryFilter which outputs a set of tokens\n   * optimized for querying with only one token at each position, either a\n   * unigram or a bigram It also will not return a token for the final position\n   * if the final word is already in the preceding bigram Example:(three\n   * tokens/positions in)\n   * \"foo bar the\"=>\"foo:1|bar:2,bar-the:2|the:3=> \"foo\" \"bar-the\" (2 tokens\n   * out)\n   * \n   */\n  public void testCommonGramsQueryFilter() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new CommonGramsQueryFilter(new CommonGramsFilter(\n            tokenizer, commonWords)));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    \n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the_fox\" });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox_of\" });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of_the\" });\n    \n    // one word queries\n    assertAnalyzesTo(a, \"the\", \n        new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", \n        new String[] { \"foo\" });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n_s\" });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown_the\" });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"quick the brown\", \n        new String[] { \"quick_the\", \"the_brown\" });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox_of\", \"of_the\" });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s_n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the_quick\", \"quick\", \"brown\" });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s_n\", \"n_s\" });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the_fox\", \"fox_of\" });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of_the\", \"the_fox\" });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of_the\", \"the_of\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsQueryFilter().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsQueryFilter().mjava","sourceNew":"  /**\n   * This is for testing CommonGramsQueryFilter which outputs a set of tokens\n   * optimized for querying with only one token at each position, either a\n   * unigram or a bigram It also will not return a token for the final position\n   * if the final word is already in the preceding bigram Example:(three\n   * tokens/positions in)\n   * \"foo bar the\"=&gt;\"foo:1|bar:2,bar-the:2|the:3=&gt; \"foo\" \"bar-the\" (2 tokens\n   * out)\n   * \n   */\n  public void testCommonGramsQueryFilter() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new CommonGramsQueryFilter(new CommonGramsFilter(\n            tokenizer, commonWords)));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    \n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the_fox\" });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox_of\" });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of_the\" });\n    \n    // one word queries\n    assertAnalyzesTo(a, \"the\", \n        new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", \n        new String[] { \"foo\" });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n_s\" });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown_the\" });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"quick the brown\", \n        new String[] { \"quick_the\", \"the_brown\" });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox_of\", \"of_the\" });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s_n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the_quick\", \"quick\", \"brown\" });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s_n\", \"n_s\" });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the_fox\", \"fox_of\" });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of_the\", \"the_fox\" });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of_the\", \"the_of\" });\n    a.close();\n  }\n\n","sourceOld":"  /**\n   * This is for testing CommonGramsQueryFilter which outputs a set of tokens\n   * optimized for querying with only one token at each position, either a\n   * unigram or a bigram It also will not return a token for the final position\n   * if the final word is already in the preceding bigram Example:(three\n   * tokens/positions in)\n   * \"foo bar the\"=&gt;\"foo:1|bar:2,bar-the:2|the:3=&gt; \"foo\" \"bar-the\" (2 tokens\n   * out)\n   * \n   */\n  public void testCommonGramsQueryFilter() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new CommonGramsQueryFilter(new CommonGramsFilter(\n            tokenizer, commonWords)));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    \n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the_fox\" });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox_of\" });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of_the\" });\n    \n    // one word queries\n    assertAnalyzesTo(a, \"the\", \n        new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", \n        new String[] { \"foo\" });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n_s\" });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown_the\" });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"quick the brown\", \n        new String[] { \"quick_the\", \"the_brown\" });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox_of\", \"of_the\" });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s_n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the_quick\", \"quick\", \"brown\" });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s_n\", \"n_s\" });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the_fox\", \"fox_of\" });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of_the\", \"the_fox\" });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of_the\", \"the_of\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsQueryFilter().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsQueryFilter().mjava","sourceNew":"  /**\n   * This is for testing CommonGramsQueryFilter which outputs a set of tokens\n   * optimized for querying with only one token at each position, either a\n   * unigram or a bigram It also will not return a token for the final position\n   * if the final word is already in the preceding bigram Example:(three\n   * tokens/positions in)\n   * \"foo bar the\"=&gt;\"foo:1|bar:2,bar-the:2|the:3=&gt; \"foo\" \"bar-the\" (2 tokens\n   * out)\n   * \n   */\n  public void testCommonGramsQueryFilter() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new CommonGramsQueryFilter(new CommonGramsFilter(\n            tokenizer, commonWords)));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    \n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the_fox\" });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox_of\" });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of_the\" });\n    \n    // one word queries\n    assertAnalyzesTo(a, \"the\", \n        new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", \n        new String[] { \"foo\" });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n_s\" });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown_the\" });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"quick the brown\", \n        new String[] { \"quick_the\", \"the_brown\" });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox_of\", \"of_the\" });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s_n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the_quick\", \"quick\", \"brown\" });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s_n\", \"n_s\" });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the_fox\", \"fox_of\" });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of_the\", \"the_fox\" });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of_the\", \"the_of\" });\n    a.close();\n  }\n\n","sourceOld":"  /**\n   * This is for testing CommonGramsQueryFilter which outputs a set of tokens\n   * optimized for querying with only one token at each position, either a\n   * unigram or a bigram It also will not return a token for the final position\n   * if the final word is already in the preceding bigram Example:(three\n   * tokens/positions in)\n   * \"foo bar the\"=&gt;\"foo:1|bar:2,bar-the:2|the:3=&gt; \"foo\" \"bar-the\" (2 tokens\n   * out)\n   * \n   */\n  public void testCommonGramsQueryFilter() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String field) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new CommonGramsQueryFilter(new CommonGramsFilter(\n            tokenizer, commonWords)));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    \n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the_fox\" });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox_of\" });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of_the\" });\n    \n    // one word queries\n    assertAnalyzesTo(a, \"the\", \n        new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", \n        new String[] { \"foo\" });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n_s\" });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown_the\" });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"quick the brown\", \n        new String[] { \"quick_the\", \"the_brown\" });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox_of\", \"of_the\" });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s_n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the_quick\", \"quick\", \"brown\" });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s_n\", \"n_s\" });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the_fox\", \"fox_of\" });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of_the\", \"the_fox\" });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of_the\", \"the_of\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"ff4227bb146f97aabae888091c19e48c88dbb0db":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["b1eb427f2c6beed80d1724555fc1db003ccf3030","a56958d7f71a28824f20031ffbb2e13502a0274e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bd9ddb59e9d33950773d186a8b726b5610ae3aad":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["bd9ddb59e9d33950773d186a8b726b5610ae3aad"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","bd9ddb59e9d33950773d186a8b726b5610ae3aad"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56958d7f71a28824f20031ffbb2e13502a0274e"]},"commit2Childs":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["bd9ddb59e9d33950773d186a8b726b5610ae3aad","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"bd9ddb59e9d33950773d186a8b726b5610ae3aad":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"379db3ad24c4f0214f30a122265a6d6be003a99d":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}