{"path":"lucene/src/test/org/apache/lucene/analysis/tokenattributes/TestSimpleAttributeImpl#testAttributes().mjava","commits":[{"id":"ec58fb7921964848d01bea54f8ec4a2ac813eaeb","date":1295476876,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/tokenattributes/TestSimpleAttributeImpl#testAttributes().mjava","pathOld":"/dev/null","sourceNew":"  // this checks using reflection API if the defaults are correct\n  public void testAttributes() {\n    _TestUtil.assertAttributeReflection(new PositionIncrementAttributeImpl(),\n      Collections.singletonMap(PositionIncrementAttribute.class.getName()+\"#positionIncrement\", 1));\n    _TestUtil.assertAttributeReflection(new FlagsAttributeImpl(),\n      Collections.singletonMap(FlagsAttribute.class.getName()+\"#flags\", 0));\n    _TestUtil.assertAttributeReflection(new TypeAttributeImpl(),\n      Collections.singletonMap(TypeAttribute.class.getName()+\"#type\", TypeAttribute.DEFAULT_TYPE));\n    _TestUtil.assertAttributeReflection(new PayloadAttributeImpl(),\n      Collections.singletonMap(PayloadAttribute.class.getName()+\"#payload\", null));\n    _TestUtil.assertAttributeReflection(new KeywordAttributeImpl(),\n      Collections.singletonMap(KeywordAttribute.class.getName()+\"#keyword\", false));\n    _TestUtil.assertAttributeReflection(new OffsetAttributeImpl(), new HashMap<String,Object>() {{\n      put(OffsetAttribute.class.getName()+\"#startOffset\", 0);\n      put(OffsetAttribute.class.getName()+\"#endOffset\", 0);\n    }});\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd1bfe3cedf815c14939d170d53031c88eb5c444","date":1295896578,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/tokenattributes/TestSimpleAttributeImpl#testAttributes().mjava","pathOld":"/dev/null","sourceNew":"  // this checks using reflection API if the defaults are correct\n  public void testAttributes() {\n    _TestUtil.assertAttributeReflection(new PositionIncrementAttributeImpl(),\n      Collections.singletonMap(PositionIncrementAttribute.class.getName()+\"#positionIncrement\", 1));\n    _TestUtil.assertAttributeReflection(new FlagsAttributeImpl(),\n      Collections.singletonMap(FlagsAttribute.class.getName()+\"#flags\", 0));\n    _TestUtil.assertAttributeReflection(new TypeAttributeImpl(),\n      Collections.singletonMap(TypeAttribute.class.getName()+\"#type\", TypeAttribute.DEFAULT_TYPE));\n    _TestUtil.assertAttributeReflection(new PayloadAttributeImpl(),\n      Collections.singletonMap(PayloadAttribute.class.getName()+\"#payload\", null));\n    _TestUtil.assertAttributeReflection(new KeywordAttributeImpl(),\n      Collections.singletonMap(KeywordAttribute.class.getName()+\"#keyword\", false));\n    _TestUtil.assertAttributeReflection(new OffsetAttributeImpl(), new HashMap<String,Object>() {{\n      put(OffsetAttribute.class.getName()+\"#startOffset\", 0);\n      put(OffsetAttribute.class.getName()+\"#endOffset\", 0);\n    }});\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/analysis/tokenattributes/TestSimpleAttributeImpl#testAttributes().mjava","pathOld":"/dev/null","sourceNew":"  // this checks using reflection API if the defaults are correct\n  public void testAttributes() {\n    _TestUtil.assertAttributeReflection(new PositionIncrementAttributeImpl(),\n      Collections.singletonMap(PositionIncrementAttribute.class.getName()+\"#positionIncrement\", 1));\n    _TestUtil.assertAttributeReflection(new FlagsAttributeImpl(),\n      Collections.singletonMap(FlagsAttribute.class.getName()+\"#flags\", 0));\n    _TestUtil.assertAttributeReflection(new TypeAttributeImpl(),\n      Collections.singletonMap(TypeAttribute.class.getName()+\"#type\", TypeAttribute.DEFAULT_TYPE));\n    _TestUtil.assertAttributeReflection(new PayloadAttributeImpl(),\n      Collections.singletonMap(PayloadAttribute.class.getName()+\"#payload\", null));\n    _TestUtil.assertAttributeReflection(new KeywordAttributeImpl(),\n      Collections.singletonMap(KeywordAttribute.class.getName()+\"#keyword\", false));\n    _TestUtil.assertAttributeReflection(new OffsetAttributeImpl(), new HashMap<String,Object>() {{\n      put(OffsetAttribute.class.getName()+\"#startOffset\", 0);\n      put(OffsetAttribute.class.getName()+\"#endOffset\", 0);\n    }});\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestSimpleAttributeImpl#testAttributes().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/tokenattributes/TestSimpleAttributeImpl#testAttributes().mjava","sourceNew":"  // this checks using reflection API if the defaults are correct\n  public void testAttributes() {\n    _TestUtil.assertAttributeReflection(new PositionIncrementAttributeImpl(),\n      Collections.singletonMap(PositionIncrementAttribute.class.getName()+\"#positionIncrement\", 1));\n    _TestUtil.assertAttributeReflection(new FlagsAttributeImpl(),\n      Collections.singletonMap(FlagsAttribute.class.getName()+\"#flags\", 0));\n    _TestUtil.assertAttributeReflection(new TypeAttributeImpl(),\n      Collections.singletonMap(TypeAttribute.class.getName()+\"#type\", TypeAttribute.DEFAULT_TYPE));\n    _TestUtil.assertAttributeReflection(new PayloadAttributeImpl(),\n      Collections.singletonMap(PayloadAttribute.class.getName()+\"#payload\", null));\n    _TestUtil.assertAttributeReflection(new KeywordAttributeImpl(),\n      Collections.singletonMap(KeywordAttribute.class.getName()+\"#keyword\", false));\n    _TestUtil.assertAttributeReflection(new OffsetAttributeImpl(), new HashMap<String,Object>() {{\n      put(OffsetAttribute.class.getName()+\"#startOffset\", 0);\n      put(OffsetAttribute.class.getName()+\"#endOffset\", 0);\n    }});\n  }\n\n","sourceOld":"  // this checks using reflection API if the defaults are correct\n  public void testAttributes() {\n    _TestUtil.assertAttributeReflection(new PositionIncrementAttributeImpl(),\n      Collections.singletonMap(PositionIncrementAttribute.class.getName()+\"#positionIncrement\", 1));\n    _TestUtil.assertAttributeReflection(new FlagsAttributeImpl(),\n      Collections.singletonMap(FlagsAttribute.class.getName()+\"#flags\", 0));\n    _TestUtil.assertAttributeReflection(new TypeAttributeImpl(),\n      Collections.singletonMap(TypeAttribute.class.getName()+\"#type\", TypeAttribute.DEFAULT_TYPE));\n    _TestUtil.assertAttributeReflection(new PayloadAttributeImpl(),\n      Collections.singletonMap(PayloadAttribute.class.getName()+\"#payload\", null));\n    _TestUtil.assertAttributeReflection(new KeywordAttributeImpl(),\n      Collections.singletonMap(KeywordAttribute.class.getName()+\"#keyword\", false));\n    _TestUtil.assertAttributeReflection(new OffsetAttributeImpl(), new HashMap<String,Object>() {{\n      put(OffsetAttribute.class.getName()+\"#startOffset\", 0);\n      put(OffsetAttribute.class.getName()+\"#endOffset\", 0);\n    }});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fd1bfe3cedf815c14939d170d53031c88eb5c444":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["ec58fb7921964848d01bea54f8ec4a2ac813eaeb"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ec58fb7921964848d01bea54f8ec4a2ac813eaeb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ec58fb7921964848d01bea54f8ec4a2ac813eaeb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"fd1bfe3cedf815c14939d170d53031c88eb5c444":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fd1bfe3cedf815c14939d170d53031c88eb5c444","29ef99d61cda9641b6250bf9567329a6e65f901d","ec58fb7921964848d01bea54f8ec4a2ac813eaeb"],"ec58fb7921964848d01bea54f8ec4a2ac813eaeb":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","29ef99d61cda9641b6250bf9567329a6e65f901d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fd1bfe3cedf815c14939d170d53031c88eb5c444","29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}