{"path":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfosReader#read(Directory,String,ChecksumIndexInput,SegmentInfos,IOContext).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfosReader#read(Directory,String,ChecksumIndexInput,SegmentInfos,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfosReader#read(Directory,String,ChecksumIndexInput,SegmentInfos,IOContext).mjava","sourceNew":"  @Override\n  public void read(Directory directory, String segmentsFileName, ChecksumIndexInput input, SegmentInfos infos, IOContext context) throws IOException {\n    final BytesRef scratch = new BytesRef();\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, VERSION);\n    infos.version = Long.parseLong(readString(VERSION.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, COUNTER);\n    infos.counter = Integer.parseInt(readString(COUNTER.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, NUM_USERDATA);\n    int numUserData = Integer.parseInt(readString(NUM_USERDATA.length, scratch));\n    infos.userData = new HashMap<String,String>();\n\n    for (int i = 0; i < numUserData; i++) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, USERDATA_KEY);\n      String key = readString(USERDATA_KEY.length, scratch);\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, USERDATA_VALUE);\n      String value = readString(USERDATA_VALUE.length, scratch);\n      infos.userData.put(key, value);\n    }\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, NUM_SEGMENTS);\n    int numSegments = Integer.parseInt(readString(NUM_SEGMENTS.length, scratch));\n    \n    for (int i = 0; i < numSegments; i++) {\n      infos.add(readSegmentInfo(directory, input, scratch));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void read(Directory directory, String segmentsFileName, ChecksumIndexInput input, SegmentInfos infos, IOContext context) throws IOException {\n    final BytesRef scratch = new BytesRef();\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, VERSION);\n    infos.version = Long.parseLong(readString(VERSION.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, COUNTER);\n    infos.counter = Integer.parseInt(readString(COUNTER.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, NUM_USERDATA);\n    int numUserData = Integer.parseInt(readString(NUM_USERDATA.length, scratch));\n    infos.userData = new HashMap<String,String>();\n\n    for (int i = 0; i < numUserData; i++) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, USERDATA_KEY);\n      String key = readString(USERDATA_KEY.length, scratch);\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, USERDATA_VALUE);\n      String value = readString(USERDATA_VALUE.length, scratch);\n      infos.userData.put(key, value);\n    }\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, NUM_SEGMENTS);\n    int numSegments = Integer.parseInt(readString(NUM_SEGMENTS.length, scratch));\n    \n    for (int i = 0; i < numSegments; i++) {\n      infos.add(readSegmentInfo(directory, input, scratch));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4356000e349e38c9fb48034695b7c309abd54557","date":1337460341,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfosReader#read(Directory,String,ChecksumIndexInput,SegmentInfos,IOContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void read(Directory directory, String segmentsFileName, ChecksumIndexInput input, SegmentInfos infos, IOContext context) throws IOException {\n    final BytesRef scratch = new BytesRef();\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, VERSION);\n    infos.version = Long.parseLong(readString(VERSION.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, COUNTER);\n    infos.counter = Integer.parseInt(readString(COUNTER.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, NUM_USERDATA);\n    int numUserData = Integer.parseInt(readString(NUM_USERDATA.length, scratch));\n    infos.userData = new HashMap<String,String>();\n\n    for (int i = 0; i < numUserData; i++) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, USERDATA_KEY);\n      String key = readString(USERDATA_KEY.length, scratch);\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, USERDATA_VALUE);\n      String value = readString(USERDATA_VALUE.length, scratch);\n      infos.userData.put(key, value);\n    }\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, NUM_SEGMENTS);\n    int numSegments = Integer.parseInt(readString(NUM_SEGMENTS.length, scratch));\n    \n    for (int i = 0; i < numSegments; i++) {\n      infos.add(readSegmentInfo(directory, input, scratch));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfosReader#read(Directory,String,ChecksumIndexInput,SegmentInfos,IOContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void read(Directory directory, String segmentsFileName, ChecksumIndexInput input, SegmentInfos infos, IOContext context) throws IOException {\n    final BytesRef scratch = new BytesRef();\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, VERSION);\n    infos.version = Long.parseLong(readString(VERSION.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, COUNTER);\n    infos.counter = Integer.parseInt(readString(COUNTER.length, scratch));\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, NUM_USERDATA);\n    int numUserData = Integer.parseInt(readString(NUM_USERDATA.length, scratch));\n    infos.userData = new HashMap<String,String>();\n\n    for (int i = 0; i < numUserData; i++) {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, USERDATA_KEY);\n      String key = readString(USERDATA_KEY.length, scratch);\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, USERDATA_VALUE);\n      String value = readString(USERDATA_VALUE.length, scratch);\n      infos.userData.put(key, value);\n    }\n    \n    SimpleTextUtil.readLine(input, scratch);\n    assert StringHelper.startsWith(scratch, NUM_SEGMENTS);\n    int numSegments = Integer.parseInt(readString(NUM_SEGMENTS.length, scratch));\n    \n    for (int i = 0; i < numSegments; i++) {\n      infos.add(readSegmentInfo(directory, input, scratch));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4356000e349e38c9fb48034695b7c309abd54557"],"4356000e349e38c9fb48034695b7c309abd54557":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"]},"commit2Childs":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4356000e349e38c9fb48034695b7c309abd54557":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","4356000e349e38c9fb48034695b7c309abd54557"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}