{"path":"lucene/core/src/test/org/apache/lucene/index/TestFieldUpdatesBuffer#testNumericRandom().mjava","commits":[{"id":"28211671436f185419b3f7e53ccfc3911441ab65","date":1544026960,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldUpdatesBuffer#testNumericRandom().mjava","pathOld":"/dev/null","sourceNew":"  public void testNumericRandom() throws IOException {\n    List<DocValuesUpdate.NumericDocValuesUpdate> updates = new ArrayList<>();\n    int numUpdates = 1 + random().nextInt(1000);\n    Counter counter = Counter.newCounter();\n    DocValuesUpdate.NumericDocValuesUpdate randomUpdate = getRandomUpdate(false);\n    updates.add(randomUpdate);\n    FieldUpdatesBuffer buffer = new FieldUpdatesBuffer(counter, randomUpdate, randomUpdate.docIDUpto);\n    for (int i = 0; i < numUpdates; i++) {\n      randomUpdate = getRandomUpdate(false);\n      updates.add(randomUpdate);\n      if (randomUpdate.hasValue) {\n        buffer.addUpdate(randomUpdate.term, randomUpdate.getValue(), randomUpdate.docIDUpto);\n      } else {\n        buffer.addNoValue(randomUpdate.term, randomUpdate.docIDUpto);\n      }\n    }\n    FieldUpdatesBuffer.BufferedUpdateIterator iterator = buffer.iterator();\n    FieldUpdatesBuffer.BufferedUpdate value;\n\n    int count = 0;\n    while ((value = iterator.next()) != null) {\n      randomUpdate = updates.get(count++);\n      assertEquals(randomUpdate.term.bytes.utf8ToString(), value.termValue.utf8ToString());\n      assertEquals(randomUpdate.term.field, value.termField);\n      assertEquals(randomUpdate.hasValue, value.hasValue);\n      if (randomUpdate.hasValue) {\n        assertEquals(randomUpdate.getValue(), value.numericValue);\n      } else {\n        assertEquals(0, value.numericValue);\n      }\n      assertEquals(randomUpdate.docIDUpto, value.docUpTo);\n    }\n    assertEquals(count, updates.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c58aa602dcba92248bb2498aa7b9c8daecc898b0","date":1544085659,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldUpdatesBuffer#testNumericRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldUpdatesBuffer#testNumericRandom().mjava","sourceNew":"  public void testNumericRandom() throws IOException {\n    List<DocValuesUpdate.NumericDocValuesUpdate> updates = new ArrayList<>();\n    int numUpdates = 1 + random().nextInt(1000);\n    Counter counter = Counter.newCounter();\n    DocValuesUpdate.NumericDocValuesUpdate randomUpdate = getRandomUpdate(false);\n    updates.add(randomUpdate);\n    FieldUpdatesBuffer buffer = new FieldUpdatesBuffer(counter, randomUpdate, randomUpdate.docIDUpto);\n    for (int i = 0; i < numUpdates; i++) {\n      randomUpdate = getRandomUpdate(false);\n      updates.add(randomUpdate);\n      if (randomUpdate.hasValue) {\n        buffer.addUpdate(randomUpdate.term, randomUpdate.getValue(), randomUpdate.docIDUpto);\n      } else {\n        buffer.addNoValue(randomUpdate.term, randomUpdate.docIDUpto);\n      }\n    }\n    FieldUpdatesBuffer.BufferedUpdateIterator iterator = buffer.iterator();\n    FieldUpdatesBuffer.BufferedUpdate value;\n\n    int count = 0;\n    while ((value = iterator.next()) != null) {\n      long v = buffer.getNumericValue(count);\n      randomUpdate = updates.get(count++);\n      assertEquals(randomUpdate.term.bytes.utf8ToString(), value.termValue.utf8ToString());\n      assertEquals(randomUpdate.term.field, value.termField);\n      assertEquals(randomUpdate.hasValue, value.hasValue);\n      if (randomUpdate.hasValue) {\n        assertEquals(randomUpdate.getValue(), value.numericValue);\n        assertEquals(v, value.numericValue);\n      } else {\n        assertEquals(0, value.numericValue);\n        assertEquals(0, v);\n      }\n      assertEquals(randomUpdate.docIDUpto, value.docUpTo);\n    }\n    assertEquals(count, updates.size());\n  }\n\n","sourceOld":"  public void testNumericRandom() throws IOException {\n    List<DocValuesUpdate.NumericDocValuesUpdate> updates = new ArrayList<>();\n    int numUpdates = 1 + random().nextInt(1000);\n    Counter counter = Counter.newCounter();\n    DocValuesUpdate.NumericDocValuesUpdate randomUpdate = getRandomUpdate(false);\n    updates.add(randomUpdate);\n    FieldUpdatesBuffer buffer = new FieldUpdatesBuffer(counter, randomUpdate, randomUpdate.docIDUpto);\n    for (int i = 0; i < numUpdates; i++) {\n      randomUpdate = getRandomUpdate(false);\n      updates.add(randomUpdate);\n      if (randomUpdate.hasValue) {\n        buffer.addUpdate(randomUpdate.term, randomUpdate.getValue(), randomUpdate.docIDUpto);\n      } else {\n        buffer.addNoValue(randomUpdate.term, randomUpdate.docIDUpto);\n      }\n    }\n    FieldUpdatesBuffer.BufferedUpdateIterator iterator = buffer.iterator();\n    FieldUpdatesBuffer.BufferedUpdate value;\n\n    int count = 0;\n    while ((value = iterator.next()) != null) {\n      randomUpdate = updates.get(count++);\n      assertEquals(randomUpdate.term.bytes.utf8ToString(), value.termValue.utf8ToString());\n      assertEquals(randomUpdate.term.field, value.termField);\n      assertEquals(randomUpdate.hasValue, value.hasValue);\n      if (randomUpdate.hasValue) {\n        assertEquals(randomUpdate.getValue(), value.numericValue);\n      } else {\n        assertEquals(0, value.numericValue);\n      }\n      assertEquals(randomUpdate.docIDUpto, value.docUpTo);\n    }\n    assertEquals(count, updates.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dbaff854eb04c7da5e30a9ade1644b7fbf7c3b9","date":1544461568,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldUpdatesBuffer#testNumericRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldUpdatesBuffer#testNumericRandom().mjava","sourceNew":"  public void testNumericRandom() throws IOException {\n    List<DocValuesUpdate.NumericDocValuesUpdate> updates = new ArrayList<>();\n    int numUpdates = 1 + random().nextInt(1000);\n    Counter counter = Counter.newCounter();\n    DocValuesUpdate.NumericDocValuesUpdate randomUpdate = getRandomUpdate(false);\n    updates.add(randomUpdate);\n    FieldUpdatesBuffer buffer = new FieldUpdatesBuffer(counter, randomUpdate, randomUpdate.docIDUpto);\n    for (int i = 0; i < numUpdates; i++) {\n      randomUpdate = getRandomUpdate(false);\n      updates.add(randomUpdate);\n      if (randomUpdate.hasValue) {\n        buffer.addUpdate(randomUpdate.term, randomUpdate.getValue(), randomUpdate.docIDUpto);\n      } else {\n        buffer.addNoValue(randomUpdate.term, randomUpdate.docIDUpto);\n      }\n    }\n    FieldUpdatesBuffer.BufferedUpdateIterator iterator = buffer.iterator();\n    FieldUpdatesBuffer.BufferedUpdate value;\n\n    int count = 0;\n    long min = Long.MAX_VALUE;\n    long max = Long.MIN_VALUE;\n    while ((value = iterator.next()) != null) {\n      long v = buffer.getNumericValue(count);\n      min = Math.min(min, v);\n      max = Math.max(max, v);\n      randomUpdate = updates.get(count++);\n      assertEquals(randomUpdate.term.bytes.utf8ToString(), value.termValue.utf8ToString());\n      assertEquals(randomUpdate.term.field, value.termField);\n      assertEquals(randomUpdate.hasValue, value.hasValue);\n      if (randomUpdate.hasValue) {\n        assertEquals(randomUpdate.getValue(), value.numericValue);\n        assertEquals(v, value.numericValue);\n      } else {\n        assertEquals(0, value.numericValue);\n        assertEquals(0, v);\n      }\n      assertEquals(randomUpdate.docIDUpto, value.docUpTo);\n    }\n    assertEquals(max, buffer.getMaxNumeric());\n    assertEquals(min, buffer.getMinNumeric());\n    assertEquals(count, updates.size());\n  }\n\n","sourceOld":"  public void testNumericRandom() throws IOException {\n    List<DocValuesUpdate.NumericDocValuesUpdate> updates = new ArrayList<>();\n    int numUpdates = 1 + random().nextInt(1000);\n    Counter counter = Counter.newCounter();\n    DocValuesUpdate.NumericDocValuesUpdate randomUpdate = getRandomUpdate(false);\n    updates.add(randomUpdate);\n    FieldUpdatesBuffer buffer = new FieldUpdatesBuffer(counter, randomUpdate, randomUpdate.docIDUpto);\n    for (int i = 0; i < numUpdates; i++) {\n      randomUpdate = getRandomUpdate(false);\n      updates.add(randomUpdate);\n      if (randomUpdate.hasValue) {\n        buffer.addUpdate(randomUpdate.term, randomUpdate.getValue(), randomUpdate.docIDUpto);\n      } else {\n        buffer.addNoValue(randomUpdate.term, randomUpdate.docIDUpto);\n      }\n    }\n    FieldUpdatesBuffer.BufferedUpdateIterator iterator = buffer.iterator();\n    FieldUpdatesBuffer.BufferedUpdate value;\n\n    int count = 0;\n    while ((value = iterator.next()) != null) {\n      long v = buffer.getNumericValue(count);\n      randomUpdate = updates.get(count++);\n      assertEquals(randomUpdate.term.bytes.utf8ToString(), value.termValue.utf8ToString());\n      assertEquals(randomUpdate.term.field, value.termField);\n      assertEquals(randomUpdate.hasValue, value.hasValue);\n      if (randomUpdate.hasValue) {\n        assertEquals(randomUpdate.getValue(), value.numericValue);\n        assertEquals(v, value.numericValue);\n      } else {\n        assertEquals(0, value.numericValue);\n        assertEquals(0, v);\n      }\n      assertEquals(randomUpdate.docIDUpto, value.docUpTo);\n    }\n    assertEquals(count, updates.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9aa1d51c4066eaca3765a55d4d1debee880c0c79","date":1544465931,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldUpdatesBuffer#testNumericRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldUpdatesBuffer#testNumericRandom().mjava","sourceNew":"  public void testNumericRandom() throws IOException {\n    List<DocValuesUpdate.NumericDocValuesUpdate> updates = new ArrayList<>();\n    int numUpdates = 1 + random().nextInt(1000);\n    Counter counter = Counter.newCounter();\n    DocValuesUpdate.NumericDocValuesUpdate randomUpdate = getRandomUpdate(false);\n    updates.add(randomUpdate);\n    FieldUpdatesBuffer buffer = new FieldUpdatesBuffer(counter, randomUpdate, randomUpdate.docIDUpto);\n    for (int i = 0; i < numUpdates; i++) {\n      randomUpdate = getRandomUpdate(false);\n      updates.add(randomUpdate);\n      if (randomUpdate.hasValue) {\n        buffer.addUpdate(randomUpdate.term, randomUpdate.getValue(), randomUpdate.docIDUpto);\n      } else {\n        buffer.addNoValue(randomUpdate.term, randomUpdate.docIDUpto);\n      }\n    }\n    FieldUpdatesBuffer.BufferedUpdateIterator iterator = buffer.iterator();\n    FieldUpdatesBuffer.BufferedUpdate value;\n\n    int count = 0;\n    long min = Long.MAX_VALUE;\n    long max = Long.MIN_VALUE;\n    boolean hasAtLeastOneValue = false;\n    while ((value = iterator.next()) != null) {\n      long v = buffer.getNumericValue(count);\n      randomUpdate = updates.get(count++);\n      assertEquals(randomUpdate.term.bytes.utf8ToString(), value.termValue.utf8ToString());\n      assertEquals(randomUpdate.term.field, value.termField);\n      assertEquals(randomUpdate.hasValue, value.hasValue);\n      if (randomUpdate.hasValue) {\n        assertEquals(randomUpdate.getValue(), value.numericValue);\n        assertEquals(v, value.numericValue);\n        min = Math.min(min, v);\n        max = Math.max(max, v);\n        hasAtLeastOneValue = true;\n      } else {\n        assertEquals(0, value.numericValue);\n        assertEquals(0, v);\n      }\n      assertEquals(randomUpdate.docIDUpto, value.docUpTo);\n    }\n    if (hasAtLeastOneValue) {\n      assertEquals(max, buffer.getMaxNumeric());\n      assertEquals(min, buffer.getMinNumeric());\n    } else {\n      assertEquals(0, buffer.getMaxNumeric());\n      assertEquals(0, buffer.getMinNumeric());\n    }\n    assertEquals(count, updates.size());\n  }\n\n","sourceOld":"  public void testNumericRandom() throws IOException {\n    List<DocValuesUpdate.NumericDocValuesUpdate> updates = new ArrayList<>();\n    int numUpdates = 1 + random().nextInt(1000);\n    Counter counter = Counter.newCounter();\n    DocValuesUpdate.NumericDocValuesUpdate randomUpdate = getRandomUpdate(false);\n    updates.add(randomUpdate);\n    FieldUpdatesBuffer buffer = new FieldUpdatesBuffer(counter, randomUpdate, randomUpdate.docIDUpto);\n    for (int i = 0; i < numUpdates; i++) {\n      randomUpdate = getRandomUpdate(false);\n      updates.add(randomUpdate);\n      if (randomUpdate.hasValue) {\n        buffer.addUpdate(randomUpdate.term, randomUpdate.getValue(), randomUpdate.docIDUpto);\n      } else {\n        buffer.addNoValue(randomUpdate.term, randomUpdate.docIDUpto);\n      }\n    }\n    FieldUpdatesBuffer.BufferedUpdateIterator iterator = buffer.iterator();\n    FieldUpdatesBuffer.BufferedUpdate value;\n\n    int count = 0;\n    long min = Long.MAX_VALUE;\n    long max = Long.MIN_VALUE;\n    while ((value = iterator.next()) != null) {\n      long v = buffer.getNumericValue(count);\n      min = Math.min(min, v);\n      max = Math.max(max, v);\n      randomUpdate = updates.get(count++);\n      assertEquals(randomUpdate.term.bytes.utf8ToString(), value.termValue.utf8ToString());\n      assertEquals(randomUpdate.term.field, value.termField);\n      assertEquals(randomUpdate.hasValue, value.hasValue);\n      if (randomUpdate.hasValue) {\n        assertEquals(randomUpdate.getValue(), value.numericValue);\n        assertEquals(v, value.numericValue);\n      } else {\n        assertEquals(0, value.numericValue);\n        assertEquals(0, v);\n      }\n      assertEquals(randomUpdate.docIDUpto, value.docUpTo);\n    }\n    assertEquals(max, buffer.getMaxNumeric());\n    assertEquals(min, buffer.getMinNumeric());\n    assertEquals(count, updates.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c21918ef3ad23e254f39cb0cd6c86851fcb993","date":1580123310,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldUpdatesBuffer#testNumericRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldUpdatesBuffer#testNumericRandom().mjava","sourceNew":"  public void testNumericRandom() throws IOException {\n    List<DocValuesUpdate.NumericDocValuesUpdate> updates = new ArrayList<>();\n    int numUpdates = 1 + random().nextInt(1000);\n    Counter counter = Counter.newCounter();\n    DocValuesUpdate.NumericDocValuesUpdate randomUpdate = getRandomNumericUpdate();\n    updates.add(randomUpdate);\n    FieldUpdatesBuffer buffer = new FieldUpdatesBuffer(counter, randomUpdate, randomUpdate.docIDUpto);\n    for (int i = 0; i < numUpdates; i++) {\n      randomUpdate = getRandomNumericUpdate();\n      updates.add(randomUpdate);\n      if (randomUpdate.hasValue) {\n        buffer.addUpdate(randomUpdate.term, randomUpdate.getValue(), randomUpdate.docIDUpto);\n      } else {\n        buffer.addNoValue(randomUpdate.term, randomUpdate.docIDUpto);\n      }\n    }\n    FieldUpdatesBuffer.BufferedUpdateIterator iterator = buffer.iterator();\n    FieldUpdatesBuffer.BufferedUpdate value;\n\n    int count = 0;\n    long min = Long.MAX_VALUE;\n    long max = Long.MIN_VALUE;\n    boolean hasAtLeastOneValue = false;\n    while ((value = iterator.next()) != null) {\n      long v = buffer.getNumericValue(count);\n      randomUpdate = updates.get(count++);\n      assertEquals(randomUpdate.term.bytes.utf8ToString(), value.termValue.utf8ToString());\n      assertEquals(randomUpdate.term.field, value.termField);\n      assertEquals(randomUpdate.hasValue, value.hasValue);\n      if (randomUpdate.hasValue) {\n        assertEquals(randomUpdate.getValue(), value.numericValue);\n        assertEquals(v, value.numericValue);\n        min = Math.min(min, v);\n        max = Math.max(max, v);\n        hasAtLeastOneValue = true;\n      } else {\n        assertEquals(0, value.numericValue);\n        assertEquals(0, v);\n      }\n      assertEquals(randomUpdate.docIDUpto, value.docUpTo);\n    }\n    if (hasAtLeastOneValue) {\n      assertEquals(max, buffer.getMaxNumeric());\n      assertEquals(min, buffer.getMinNumeric());\n    } else {\n      assertEquals(0, buffer.getMaxNumeric());\n      assertEquals(0, buffer.getMinNumeric());\n    }\n    assertEquals(count, updates.size());\n  }\n\n","sourceOld":"  public void testNumericRandom() throws IOException {\n    List<DocValuesUpdate.NumericDocValuesUpdate> updates = new ArrayList<>();\n    int numUpdates = 1 + random().nextInt(1000);\n    Counter counter = Counter.newCounter();\n    DocValuesUpdate.NumericDocValuesUpdate randomUpdate = getRandomUpdate(false);\n    updates.add(randomUpdate);\n    FieldUpdatesBuffer buffer = new FieldUpdatesBuffer(counter, randomUpdate, randomUpdate.docIDUpto);\n    for (int i = 0; i < numUpdates; i++) {\n      randomUpdate = getRandomUpdate(false);\n      updates.add(randomUpdate);\n      if (randomUpdate.hasValue) {\n        buffer.addUpdate(randomUpdate.term, randomUpdate.getValue(), randomUpdate.docIDUpto);\n      } else {\n        buffer.addNoValue(randomUpdate.term, randomUpdate.docIDUpto);\n      }\n    }\n    FieldUpdatesBuffer.BufferedUpdateIterator iterator = buffer.iterator();\n    FieldUpdatesBuffer.BufferedUpdate value;\n\n    int count = 0;\n    long min = Long.MAX_VALUE;\n    long max = Long.MIN_VALUE;\n    boolean hasAtLeastOneValue = false;\n    while ((value = iterator.next()) != null) {\n      long v = buffer.getNumericValue(count);\n      randomUpdate = updates.get(count++);\n      assertEquals(randomUpdate.term.bytes.utf8ToString(), value.termValue.utf8ToString());\n      assertEquals(randomUpdate.term.field, value.termField);\n      assertEquals(randomUpdate.hasValue, value.hasValue);\n      if (randomUpdate.hasValue) {\n        assertEquals(randomUpdate.getValue(), value.numericValue);\n        assertEquals(v, value.numericValue);\n        min = Math.min(min, v);\n        max = Math.max(max, v);\n        hasAtLeastOneValue = true;\n      } else {\n        assertEquals(0, value.numericValue);\n        assertEquals(0, v);\n      }\n      assertEquals(randomUpdate.docIDUpto, value.docUpTo);\n    }\n    if (hasAtLeastOneValue) {\n      assertEquals(max, buffer.getMaxNumeric());\n      assertEquals(min, buffer.getMinNumeric());\n    } else {\n      assertEquals(0, buffer.getMaxNumeric());\n      assertEquals(0, buffer.getMinNumeric());\n    }\n    assertEquals(count, updates.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb0b91dbd7ffa9329d88b6cf6d606e542fed61d8","date":1582222690,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldUpdatesBuffer#testNumericRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldUpdatesBuffer#testNumericRandom().mjava","sourceNew":"  public void testNumericRandom() throws IOException {\n    List<DocValuesUpdate.NumericDocValuesUpdate> updates = new ArrayList<>();\n    int numUpdates = 1 + random().nextInt(1000);\n    Counter counter = Counter.newCounter();\n    DocValuesUpdate.NumericDocValuesUpdate randomUpdate = getRandomNumericUpdate();\n    updates.add(randomUpdate);\n    FieldUpdatesBuffer buffer = new FieldUpdatesBuffer(counter, randomUpdate, randomUpdate.docIDUpto);\n    for (int i = 0; i < numUpdates; i++) {\n      randomUpdate = getRandomNumericUpdate();\n      updates.add(randomUpdate);\n      if (randomUpdate.hasValue) {\n        buffer.addUpdate(randomUpdate.term, randomUpdate.getValue(), randomUpdate.docIDUpto);\n      } else {\n        buffer.addNoValue(randomUpdate.term, randomUpdate.docIDUpto);\n      }\n    }\n    buffer.finish();\n    DocValuesUpdate.NumericDocValuesUpdate lastUpdate = randomUpdate;\n    boolean termsSorted = lastUpdate.hasValue && updates.stream()\n        .allMatch(update -> update.field.equals(lastUpdate.field) &&\n            update.hasValue && update.getValue() == lastUpdate.getValue());\n    assertBufferUpdates(buffer, updates, termsSorted);\n  }\n\n","sourceOld":"  public void testNumericRandom() throws IOException {\n    List<DocValuesUpdate.NumericDocValuesUpdate> updates = new ArrayList<>();\n    int numUpdates = 1 + random().nextInt(1000);\n    Counter counter = Counter.newCounter();\n    DocValuesUpdate.NumericDocValuesUpdate randomUpdate = getRandomNumericUpdate();\n    updates.add(randomUpdate);\n    FieldUpdatesBuffer buffer = new FieldUpdatesBuffer(counter, randomUpdate, randomUpdate.docIDUpto);\n    for (int i = 0; i < numUpdates; i++) {\n      randomUpdate = getRandomNumericUpdate();\n      updates.add(randomUpdate);\n      if (randomUpdate.hasValue) {\n        buffer.addUpdate(randomUpdate.term, randomUpdate.getValue(), randomUpdate.docIDUpto);\n      } else {\n        buffer.addNoValue(randomUpdate.term, randomUpdate.docIDUpto);\n      }\n    }\n    FieldUpdatesBuffer.BufferedUpdateIterator iterator = buffer.iterator();\n    FieldUpdatesBuffer.BufferedUpdate value;\n\n    int count = 0;\n    long min = Long.MAX_VALUE;\n    long max = Long.MIN_VALUE;\n    boolean hasAtLeastOneValue = false;\n    while ((value = iterator.next()) != null) {\n      long v = buffer.getNumericValue(count);\n      randomUpdate = updates.get(count++);\n      assertEquals(randomUpdate.term.bytes.utf8ToString(), value.termValue.utf8ToString());\n      assertEquals(randomUpdate.term.field, value.termField);\n      assertEquals(randomUpdate.hasValue, value.hasValue);\n      if (randomUpdate.hasValue) {\n        assertEquals(randomUpdate.getValue(), value.numericValue);\n        assertEquals(v, value.numericValue);\n        min = Math.min(min, v);\n        max = Math.max(max, v);\n        hasAtLeastOneValue = true;\n      } else {\n        assertEquals(0, value.numericValue);\n        assertEquals(0, v);\n      }\n      assertEquals(randomUpdate.docIDUpto, value.docUpTo);\n    }\n    if (hasAtLeastOneValue) {\n      assertEquals(max, buffer.getMaxNumeric());\n      assertEquals(min, buffer.getMinNumeric());\n    } else {\n      assertEquals(0, buffer.getMaxNumeric());\n      assertEquals(0, buffer.getMinNumeric());\n    }\n    assertEquals(count, updates.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9f94c392daa8f5708186bede16c84eafad4cdd2","date":1599578873,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldUpdatesBuffer#testNumericRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldUpdatesBuffer#testNumericRandom().mjava","sourceNew":"  public void testNumericRandom() throws IOException {\n    List<DocValuesUpdate.NumericDocValuesUpdate> updates = new ArrayList<>();\n    int numUpdates = 1 + random().nextInt(1000);\n    Counter counter = Counter.newCounter();\n    DocValuesUpdate.NumericDocValuesUpdate randomUpdate = getRandomNumericUpdate();\n    updates.add(randomUpdate);\n    FieldUpdatesBuffer buffer = new FieldUpdatesBuffer(counter, randomUpdate, randomUpdate.docIDUpTo);\n    for (int i = 0; i < numUpdates; i++) {\n      randomUpdate = getRandomNumericUpdate();\n      updates.add(randomUpdate);\n      if (randomUpdate.hasValue) {\n        buffer.addUpdate(randomUpdate.term, randomUpdate.getValue(), randomUpdate.docIDUpTo);\n      } else {\n        buffer.addNoValue(randomUpdate.term, randomUpdate.docIDUpTo);\n      }\n    }\n    buffer.finish();\n    DocValuesUpdate.NumericDocValuesUpdate lastUpdate = randomUpdate;\n    boolean termsSorted = lastUpdate.hasValue && updates.stream()\n        .allMatch(update -> update.field.equals(lastUpdate.field) &&\n            update.hasValue && update.getValue() == lastUpdate.getValue());\n    assertBufferUpdates(buffer, updates, termsSorted);\n  }\n\n","sourceOld":"  public void testNumericRandom() throws IOException {\n    List<DocValuesUpdate.NumericDocValuesUpdate> updates = new ArrayList<>();\n    int numUpdates = 1 + random().nextInt(1000);\n    Counter counter = Counter.newCounter();\n    DocValuesUpdate.NumericDocValuesUpdate randomUpdate = getRandomNumericUpdate();\n    updates.add(randomUpdate);\n    FieldUpdatesBuffer buffer = new FieldUpdatesBuffer(counter, randomUpdate, randomUpdate.docIDUpto);\n    for (int i = 0; i < numUpdates; i++) {\n      randomUpdate = getRandomNumericUpdate();\n      updates.add(randomUpdate);\n      if (randomUpdate.hasValue) {\n        buffer.addUpdate(randomUpdate.term, randomUpdate.getValue(), randomUpdate.docIDUpto);\n      } else {\n        buffer.addNoValue(randomUpdate.term, randomUpdate.docIDUpto);\n      }\n    }\n    buffer.finish();\n    DocValuesUpdate.NumericDocValuesUpdate lastUpdate = randomUpdate;\n    boolean termsSorted = lastUpdate.hasValue && updates.stream()\n        .allMatch(update -> update.field.equals(lastUpdate.field) &&\n            update.hasValue && update.getValue() == lastUpdate.getValue());\n    assertBufferUpdates(buffer, updates, termsSorted);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb0b91dbd7ffa9329d88b6cf6d606e542fed61d8":["30c21918ef3ad23e254f39cb0cd6c86851fcb993"],"9aa1d51c4066eaca3765a55d4d1debee880c0c79":["6dbaff854eb04c7da5e30a9ade1644b7fbf7c3b9"],"c58aa602dcba92248bb2498aa7b9c8daecc898b0":["28211671436f185419b3f7e53ccfc3911441ab65"],"28211671436f185419b3f7e53ccfc3911441ab65":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9f94c392daa8f5708186bede16c84eafad4cdd2":["fb0b91dbd7ffa9329d88b6cf6d606e542fed61d8"],"6dbaff854eb04c7da5e30a9ade1644b7fbf7c3b9":["c58aa602dcba92248bb2498aa7b9c8daecc898b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c21918ef3ad23e254f39cb0cd6c86851fcb993":["9aa1d51c4066eaca3765a55d4d1debee880c0c79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9f94c392daa8f5708186bede16c84eafad4cdd2"]},"commit2Childs":{"fb0b91dbd7ffa9329d88b6cf6d606e542fed61d8":["c9f94c392daa8f5708186bede16c84eafad4cdd2"],"9aa1d51c4066eaca3765a55d4d1debee880c0c79":["30c21918ef3ad23e254f39cb0cd6c86851fcb993"],"c58aa602dcba92248bb2498aa7b9c8daecc898b0":["6dbaff854eb04c7da5e30a9ade1644b7fbf7c3b9"],"28211671436f185419b3f7e53ccfc3911441ab65":["c58aa602dcba92248bb2498aa7b9c8daecc898b0"],"6dbaff854eb04c7da5e30a9ade1644b7fbf7c3b9":["9aa1d51c4066eaca3765a55d4d1debee880c0c79"],"c9f94c392daa8f5708186bede16c84eafad4cdd2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["28211671436f185419b3f7e53ccfc3911441ab65"],"30c21918ef3ad23e254f39cb0cd6c86851fcb993":["fb0b91dbd7ffa9329d88b6cf6d606e542fed61d8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}