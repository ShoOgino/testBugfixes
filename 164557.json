{"path":"solr/core/src/test/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/BlockPoolSlice#moveLazyPersistReplicasToFinalized(File).mjava","commits":[{"id":"44ca189138a5b6e1989d12ab992fab60e235ddc7","date":1549051496,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/BlockPoolSlice#moveLazyPersistReplicasToFinalized(File).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Move replicas in the lazy persist directory to their corresponding locations\n   * in the finalized directory.\n   * @return number of replicas recovered.\n   */\n  private int moveLazyPersistReplicasToFinalized(File source)\n      throws IOException {\n    File[] files = fileIoProvider.listFiles(volume, source);\n    int numRecovered = 0;\n    for (File file : files) {\n      if (file.isDirectory()) {\n        numRecovered += moveLazyPersistReplicasToFinalized(file);\n      }\n\n      if (Block.isMetaFilename(file.getName())) {\n        File metaFile = file;\n        File blockFile = Block.metaToBlockFile(metaFile);\n        long blockId = Block.filename2id(blockFile.getName());\n        File targetDir = DatanodeUtil.idToBlockDir(finalizedDir, blockId);\n\n        if (blockFile.exists()) {\n\n          try {\n            fileIoProvider.mkdirsWithExistsCheck(volume, targetDir);\n          } catch(IOException ioe) {\n            LOG.warn(\"Failed to mkdirs \" + targetDir);\n            continue;\n          }\n\n          final File targetMetaFile = new File(targetDir, metaFile.getName());\n          try {\n            fileIoProvider.rename(volume, metaFile, targetMetaFile);\n          } catch (IOException e) {\n            LOG.warn(\"Failed to move meta file from \"\n                + metaFile + \" to \" + targetMetaFile, e);\n            continue;\n          }\n\n          final File targetBlockFile = new File(targetDir, blockFile.getName());\n          try {\n            fileIoProvider.rename(volume, blockFile, targetBlockFile);\n          } catch (IOException e) {\n            LOG.warn(\"Failed to move block file from \"\n                + blockFile + \" to \" + targetBlockFile, e);\n            continue;\n          }\n\n          if (targetBlockFile.exists() && targetMetaFile.exists()) {\n            ++numRecovered;\n          } else {\n            // Failure should be rare.\n            LOG.warn(\"Failed to move \" + blockFile + \" to \" + targetDir);\n          }\n        }\n      }\n    }\n\n    fileIoProvider.fullyDelete(volume, source);\n    return numRecovered;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/BlockPoolSlice#moveLazyPersistReplicasToFinalized(File).mjava","pathOld":"solr/core/src/test/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/BlockPoolSlice#moveLazyPersistReplicasToFinalized(File).mjava","sourceNew":"  /**\n   * Move replicas in the lazy persist directory to their corresponding locations\n   * in the finalized directory.\n   * @return number of replicas recovered.\n   */\n  private int moveLazyPersistReplicasToFinalized(File source)\n      throws IOException {\n    File[] files = fileIoProvider.listFiles(volume, source);\n    int numRecovered = 0;\n    for (File file : files) {\n      if (file.isDirectory()) {\n        numRecovered += moveLazyPersistReplicasToFinalized(file);\n      }\n\n      if (Block.isMetaFilename(file.getName())) {\n        File metaFile = file;\n        File blockFile = Block.metaToBlockFile(metaFile);\n        long blockId = Block.filename2id(blockFile.getName());\n        File targetDir = DatanodeUtil.idToBlockDir(finalizedDir, blockId);\n\n        if (blockFile.exists()) {\n\n          try {\n            fileIoProvider.mkdirsWithExistsCheck(volume, targetDir);\n          } catch(IOException ioe) {\n            LOG.warn(\"Failed to mkdirs {}\", targetDir);\n            continue;\n          }\n\n          final File targetMetaFile = new File(targetDir, metaFile.getName());\n          try {\n            fileIoProvider.rename(volume, metaFile, targetMetaFile);\n          } catch (IOException e) {\n            LOG.warn(\"Failed to move meta file from {} to {}\", metaFile, targetMetaFile, e);\n            continue;\n          }\n\n          final File targetBlockFile = new File(targetDir, blockFile.getName());\n          try {\n            fileIoProvider.rename(volume, blockFile, targetBlockFile);\n          } catch (IOException e) {\n            LOG.warn(\"Failed to move block file from {} to {}\", blockFile, targetBlockFile, e);\n            continue;\n          }\n\n          if (targetBlockFile.exists() && targetMetaFile.exists()) {\n            ++numRecovered;\n          } else {\n            // Failure should be rare.\n            LOG.warn(\"Failed to move {} to {}\", blockFile, targetDir);\n          }\n        }\n      }\n    }\n\n    fileIoProvider.fullyDelete(volume, source);\n    return numRecovered;\n  }\n\n","sourceOld":"  /**\n   * Move replicas in the lazy persist directory to their corresponding locations\n   * in the finalized directory.\n   * @return number of replicas recovered.\n   */\n  private int moveLazyPersistReplicasToFinalized(File source)\n      throws IOException {\n    File[] files = fileIoProvider.listFiles(volume, source);\n    int numRecovered = 0;\n    for (File file : files) {\n      if (file.isDirectory()) {\n        numRecovered += moveLazyPersistReplicasToFinalized(file);\n      }\n\n      if (Block.isMetaFilename(file.getName())) {\n        File metaFile = file;\n        File blockFile = Block.metaToBlockFile(metaFile);\n        long blockId = Block.filename2id(blockFile.getName());\n        File targetDir = DatanodeUtil.idToBlockDir(finalizedDir, blockId);\n\n        if (blockFile.exists()) {\n\n          try {\n            fileIoProvider.mkdirsWithExistsCheck(volume, targetDir);\n          } catch(IOException ioe) {\n            LOG.warn(\"Failed to mkdirs \" + targetDir);\n            continue;\n          }\n\n          final File targetMetaFile = new File(targetDir, metaFile.getName());\n          try {\n            fileIoProvider.rename(volume, metaFile, targetMetaFile);\n          } catch (IOException e) {\n            LOG.warn(\"Failed to move meta file from \"\n                + metaFile + \" to \" + targetMetaFile, e);\n            continue;\n          }\n\n          final File targetBlockFile = new File(targetDir, blockFile.getName());\n          try {\n            fileIoProvider.rename(volume, blockFile, targetBlockFile);\n          } catch (IOException e) {\n            LOG.warn(\"Failed to move block file from \"\n                + blockFile + \" to \" + targetBlockFile, e);\n            continue;\n          }\n\n          if (targetBlockFile.exists() && targetMetaFile.exists()) {\n            ++numRecovered;\n          } else {\n            // Failure should be rare.\n            LOG.warn(\"Failed to move \" + blockFile + \" to \" + targetDir);\n          }\n        }\n      }\n    }\n\n    fileIoProvider.fullyDelete(volume, source);\n    return numRecovered;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"44ca189138a5b6e1989d12ab992fab60e235ddc7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["44ca189138a5b6e1989d12ab992fab60e235ddc7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["44ca189138a5b6e1989d12ab992fab60e235ddc7"],"44ca189138a5b6e1989d12ab992fab60e235ddc7":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}