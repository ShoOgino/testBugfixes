{"path":"solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader#updateSchema(Watcher).mjava","commits":[{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader#updateSchema(Watcher).mjava","pathOld":"/dev/null","sourceNew":"  private void updateSchema(Watcher watcher) throws KeeperException, InterruptedException {\n    Stat stat = new Stat();\n    synchronized (getSchemaUpdateLock()) {\n      final ManagedIndexSchema oldSchema = managedIndexSchemaFactory.getSchema();\n      byte[] data = zkClient.getData(managedSchemaPath, watcher, stat, true);\n      if (stat.getVersion() != oldSchema.schemaZkVersion) {\n        log.info(\"Retrieved schema from ZooKeeper\");\n        long start = System.currentTimeMillis();\n        InputSource inputSource = new InputSource(new ByteArrayInputStream(data));\n        ManagedIndexSchema newSchema = oldSchema.reloadFields(inputSource, stat.getVersion());\n        managedIndexSchemaFactory.setSchema(newSchema);\n        long stop = System.currentTimeMillis();\n        log.info(\"Finished refreshing schema in \" + (stop - start) + \" ms\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd5bc858b8426d40bbe90b94120ead37c77d7954","date":1393812525,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader#updateSchema(Watcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader#updateSchema(Watcher).mjava","sourceNew":"  private void updateSchema(Watcher watcher) throws KeeperException, InterruptedException {\n    Stat stat = new Stat();\n    synchronized (getSchemaUpdateLock()) {\n      final ManagedIndexSchema oldSchema = managedIndexSchemaFactory.getSchema();\n      byte[] data = zkClient.getData(managedSchemaPath, watcher, stat, true);\n      if (stat.getVersion() != oldSchema.schemaZkVersion) {\n        log.info(\"Retrieved schema from ZooKeeper\");\n        long start = System.nanoTime();\n        InputSource inputSource = new InputSource(new ByteArrayInputStream(data));\n        ManagedIndexSchema newSchema = oldSchema.reloadFields(inputSource, stat.getVersion());\n        managedIndexSchemaFactory.setSchema(newSchema);\n        long stop = System.nanoTime();\n        log.info(\"Finished refreshing schema in \" + TimeUnit.MILLISECONDS.convert(stop - start, TimeUnit.NANOSECONDS) + \" ms\");\n      }\n    }\n  }\n\n","sourceOld":"  private void updateSchema(Watcher watcher) throws KeeperException, InterruptedException {\n    Stat stat = new Stat();\n    synchronized (getSchemaUpdateLock()) {\n      final ManagedIndexSchema oldSchema = managedIndexSchemaFactory.getSchema();\n      byte[] data = zkClient.getData(managedSchemaPath, watcher, stat, true);\n      if (stat.getVersion() != oldSchema.schemaZkVersion) {\n        log.info(\"Retrieved schema from ZooKeeper\");\n        long start = System.currentTimeMillis();\n        InputSource inputSource = new InputSource(new ByteArrayInputStream(data));\n        ManagedIndexSchema newSchema = oldSchema.reloadFields(inputSource, stat.getVersion());\n        managedIndexSchemaFactory.setSchema(newSchema);\n        long stop = System.currentTimeMillis();\n        log.info(\"Finished refreshing schema in \" + (stop - start) + \" ms\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"106069d345c14ee5c76f0ea76397b02a656f883c","date":1411998064,"type":4,"author":"Timothy Potter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader#updateSchema(Watcher).mjava","sourceNew":null,"sourceOld":"  private void updateSchema(Watcher watcher) throws KeeperException, InterruptedException {\n    Stat stat = new Stat();\n    synchronized (getSchemaUpdateLock()) {\n      final ManagedIndexSchema oldSchema = managedIndexSchemaFactory.getSchema();\n      byte[] data = zkClient.getData(managedSchemaPath, watcher, stat, true);\n      if (stat.getVersion() != oldSchema.schemaZkVersion) {\n        log.info(\"Retrieved schema from ZooKeeper\");\n        long start = System.nanoTime();\n        InputSource inputSource = new InputSource(new ByteArrayInputStream(data));\n        ManagedIndexSchema newSchema = oldSchema.reloadFields(inputSource, stat.getVersion());\n        managedIndexSchemaFactory.setSchema(newSchema);\n        long stop = System.nanoTime();\n        log.info(\"Finished refreshing schema in \" + TimeUnit.MILLISECONDS.convert(stop - start, TimeUnit.NANOSECONDS) + \" ms\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/schema/ZkIndexSchemaReader#updateSchema(Watcher).mjava","sourceNew":null,"sourceOld":"  private void updateSchema(Watcher watcher) throws KeeperException, InterruptedException {\n    Stat stat = new Stat();\n    synchronized (getSchemaUpdateLock()) {\n      final ManagedIndexSchema oldSchema = managedIndexSchemaFactory.getSchema();\n      byte[] data = zkClient.getData(managedSchemaPath, watcher, stat, true);\n      if (stat.getVersion() != oldSchema.schemaZkVersion) {\n        log.info(\"Retrieved schema from ZooKeeper\");\n        long start = System.nanoTime();\n        InputSource inputSource = new InputSource(new ByteArrayInputStream(data));\n        ManagedIndexSchema newSchema = oldSchema.reloadFields(inputSource, stat.getVersion());\n        managedIndexSchemaFactory.setSchema(newSchema);\n        long stop = System.nanoTime();\n        log.info(\"Finished refreshing schema in \" + TimeUnit.MILLISECONDS.convert(stop - start, TimeUnit.NANOSECONDS) + \" ms\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["fd5bc858b8426d40bbe90b94120ead37c77d7954","106069d345c14ee5c76f0ea76397b02a656f883c"],"106069d345c14ee5c76f0ea76397b02a656f883c":["fd5bc858b8426d40bbe90b94120ead37c77d7954"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["106069d345c14ee5c76f0ea76397b02a656f883c"],"fd5bc858b8426d40bbe90b94120ead37c77d7954":["08970e5b8411182a29412c177eff67ec1110095b"],"08970e5b8411182a29412c177eff67ec1110095b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["08970e5b8411182a29412c177eff67ec1110095b"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"106069d345c14ee5c76f0ea76397b02a656f883c":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fd5bc858b8426d40bbe90b94120ead37c77d7954":["d9a47902d6207303f5ed3e7aaca62ca33433af66","106069d345c14ee5c76f0ea76397b02a656f883c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"08970e5b8411182a29412c177eff67ec1110095b":["fd5bc858b8426d40bbe90b94120ead37c77d7954"]},"heads":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}