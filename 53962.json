{"path":"solr/src/test/org/apache/solr/analysis/TestPatternReplaceCharFilterFactory#testNothingChange().mjava","commits":[{"id":"540f57ba7d9d46ccc6f0157e8b8021a4c969770d","date":1272974241,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestPatternReplaceCharFilterFactory#testNothingChange().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestPatternReplaceCharFilter#testNothingChange().mjava","sourceNew":"  //           1111\n  // 01234567890123\n  // this is test.\n  public void testNothingChange() throws IOException {\n    final String BLOCK = \"this is test.\";\n    PatternReplaceCharFilterFactory factory = new PatternReplaceCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"pattern\", \"(aa)\\\\s+(bb)\\\\s+(cc)\");\n    args.put(\"replacement\", \"$1$2$3\");\n    factory.init(args);\n    CharStream cs = factory.create(\n          CharReader.get( new StringReader( BLOCK ) ) );\n    TokenStream ts = new WhitespaceTokenizer(DEFAULT_VERSION, cs );\n    assertTokenStreamContents(ts,\n        new String[] { \"this\", \"is\", \"test.\" },\n        new int[] { 0, 5, 8 },\n        new int[] { 4, 7, 13 });\n  }\n\n","sourceOld":"  //           1111\n  // 01234567890123\n  // this is test.\n  public void testNothingChange() throws IOException {\n    final String BLOCK = \"this is test.\";\n    PatternReplaceCharFilterFactory factory = new PatternReplaceCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"pattern\", \"(aa)\\\\s+(bb)\\\\s+(cc)\");\n    args.put(\"replacement\", \"$1$2$3\");\n    factory.init(args);\n    CharStream cs = factory.create(\n          CharReader.get( new StringReader( BLOCK ) ) );\n    TokenStream ts = new WhitespaceTokenizer(DEFAULT_VERSION, cs );\n    assertTokenStreamContents(ts,\n        new String[] { \"this\", \"is\", \"test.\" },\n        new int[] { 0, 5, 8 },\n        new int[] { 4, 7, 13 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestPatternReplaceCharFilterFactory#testNothingChange().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestPatternReplaceCharFilterFactory#testNothingChange().mjava","sourceNew":"  //           1111\n  // 01234567890123\n  // this is test.\n  public void testNothingChange() throws IOException {\n    final String BLOCK = \"this is test.\";\n    PatternReplaceCharFilterFactory factory = new PatternReplaceCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"pattern\", \"(aa)\\\\s+(bb)\\\\s+(cc)\");\n    args.put(\"replacement\", \"$1$2$3\");\n    factory.init(args);\n    CharStream cs = factory.create(\n          CharReader.get( new StringReader( BLOCK ) ) );\n    TokenStream ts = new WhitespaceTokenizer(DEFAULT_VERSION, cs );\n    assertTokenStreamContents(ts,\n        new String[] { \"this\", \"is\", \"test.\" },\n        new int[] { 0, 5, 8 },\n        new int[] { 4, 7, 13 });\n  }\n\n","sourceOld":"  //           1111\n  // 01234567890123\n  // this is test.\n  public void testNothingChange() throws IOException {\n    final String BLOCK = \"this is test.\";\n    PatternReplaceCharFilterFactory factory = new PatternReplaceCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"pattern\", \"(aa)\\\\s+(bb)\\\\s+(cc)\");\n    args.put(\"replacement\", \"$1$2$3\");\n    factory.init(args);\n    CharStream cs = factory.create(\n          CharReader.get( new StringReader( BLOCK ) ) );\n    TokenStream ts = new WhitespaceTokenizer(DEFAULT_VERSION, cs );\n    assertTokenStreamContents(ts,\n        new String[] { \"this\", \"is\", \"test.\" },\n        new int[] { 0, 5, 8 },\n        new int[] { 4, 7, 13 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestPatternReplaceCharFilterFactory#testNothingChange().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestPatternReplaceCharFilterFactory#testNothingChange().mjava","sourceNew":"  //           1111\n  // 01234567890123\n  // this is test.\n  public void testNothingChange() throws IOException {\n    final String BLOCK = \"this is test.\";\n    PatternReplaceCharFilterFactory factory = new PatternReplaceCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"pattern\", \"(aa)\\\\s+(bb)\\\\s+(cc)\");\n    args.put(\"replacement\", \"$1$2$3\");\n    factory.init(args);\n    CharStream cs = factory.create(\n          CharReader.get( new StringReader( BLOCK ) ) );\n    TokenStream ts = new WhitespaceTokenizer(DEFAULT_VERSION, cs );\n    assertTokenStreamContents(ts,\n        new String[] { \"this\", \"is\", \"test.\" },\n        new int[] { 0, 5, 8 },\n        new int[] { 4, 7, 13 });\n  }\n\n","sourceOld":"  //           1111\n  // 01234567890123\n  // this is test.\n  public void testNothingChange() throws IOException {\n    final String BLOCK = \"this is test.\";\n    PatternReplaceCharFilterFactory factory = new PatternReplaceCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"pattern\", \"(aa)\\\\s+(bb)\\\\s+(cc)\");\n    args.put(\"replacement\", \"$1$2$3\");\n    factory.init(args);\n    CharStream cs = factory.create(\n          CharReader.get( new StringReader( BLOCK ) ) );\n    TokenStream ts = new WhitespaceTokenizer(DEFAULT_VERSION, cs );\n    assertTokenStreamContents(ts,\n        new String[] { \"this\", \"is\", \"test.\" },\n        new int[] { 0, 5, 8 },\n        new int[] { 4, 7, 13 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestPatternReplaceCharFilterFactory#testNothingChange().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestPatternReplaceCharFilterFactory#testNothingChange().mjava","sourceNew":"  //           1111\n  // 01234567890123\n  // this is test.\n  public void testNothingChange() throws IOException {\n    final String BLOCK = \"this is test.\";\n    PatternReplaceCharFilterFactory factory = new PatternReplaceCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"pattern\", \"(aa)\\\\s+(bb)\\\\s+(cc)\");\n    args.put(\"replacement\", \"$1$2$3\");\n    factory.init(args);\n    CharStream cs = factory.create(\n          CharReader.get( new StringReader( BLOCK ) ) );\n    TokenStream ts = new WhitespaceTokenizer(DEFAULT_VERSION, cs );\n    assertTokenStreamContents(ts,\n        new String[] { \"this\", \"is\", \"test.\" },\n        new int[] { 0, 5, 8 },\n        new int[] { 4, 7, 13 });\n  }\n\n","sourceOld":"  //           1111\n  // 01234567890123\n  // this is test.\n  public void testNothingChange() throws IOException {\n    final String BLOCK = \"this is test.\";\n    PatternReplaceCharFilterFactory factory = new PatternReplaceCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"pattern\", \"(aa)\\\\s+(bb)\\\\s+(cc)\");\n    args.put(\"replacement\", \"$1$2$3\");\n    factory.init(args);\n    CharStream cs = factory.create(\n          CharReader.get( new StringReader( BLOCK ) ) );\n    TokenStream ts = new WhitespaceTokenizer(DEFAULT_VERSION, cs );\n    assertTokenStreamContents(ts,\n        new String[] { \"this\", \"is\", \"test.\" },\n        new int[] { 0, 5, 8 },\n        new int[] { 4, 7, 13 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["540f57ba7d9d46ccc6f0157e8b8021a4c969770d"],"c26f00b574427b55127e869b935845554afde1fa":["540f57ba7d9d46ccc6f0157e8b8021a4c969770d","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"540f57ba7d9d46ccc6f0157e8b8021a4c969770d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["540f57ba7d9d46ccc6f0157e8b8021a4c969770d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["540f57ba7d9d46ccc6f0157e8b8021a4c969770d"],"540f57ba7d9d46ccc6f0157e8b8021a4c969770d":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}