{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#inform(ResourceLoader).mjava","commits":[{"id":"a05464f071eda06541fd9ed6f04aaca99b131dfa","date":1343110729,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) {\n    final boolean ignoreCase = getBoolean(\"ignoreCase\", false); \n    this.ignoreCase = ignoreCase;\n\n    String tf = args.get(\"tokenizerFactory\");\n\n    final TokenizerFactory factory = tf == null ? null : loadTokenizerFactory(loader, tf);\n    \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer(Version.LUCENE_50, reader) : factory.create(reader);\n        TokenStream stream = ignoreCase ? new LowerCaseFilter(Version.LUCENE_50, tokenizer) : tokenizer;\n        return new TokenStreamComponents(tokenizer, stream);\n      }\n    };\n\n    String format = args.get(\"format\");\n    try {\n      if (format == null || format.equals(\"solr\")) {\n        // TODO: expose dedup as a parameter?\n        map = loadSolrSynonyms(loader, true, analyzer);\n      } else if (format.equals(\"wordnet\")) {\n        map = loadWordnetSynonyms(loader, true, analyzer);\n      } else {\n        // TODO: somehow make this more pluggable\n        throw new InitializationException(\"Unrecognized synonyms format: \" + format);\n      }\n    } catch (Exception e) {\n      throw new InitializationException(\"Exception thrown while loading synonyms\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) {\n    final boolean ignoreCase = getBoolean(\"ignoreCase\", false); \n    this.ignoreCase = ignoreCase;\n\n    String tf = args.get(\"tokenizerFactory\");\n\n    final TokenizerFactory factory = tf == null ? null : loadTokenizerFactory(loader, tf);\n    \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer(Version.LUCENE_50, reader) : factory.create(reader);\n        TokenStream stream = ignoreCase ? new LowerCaseFilter(Version.LUCENE_50, tokenizer) : tokenizer;\n        return new TokenStreamComponents(tokenizer, stream);\n      }\n    };\n\n    String format = args.get(\"format\");\n    try {\n      if (format == null || format.equals(\"solr\")) {\n        // TODO: expose dedup as a parameter?\n        map = loadSolrSynonyms(loader, true, analyzer);\n      } else if (format.equals(\"wordnet\")) {\n        map = loadWordnetSynonyms(loader, true, analyzer);\n      } else {\n        // TODO: somehow make this more pluggable\n        throw new InitializationException(\"Unrecognized synonyms format: \" + format);\n      }\n    } catch (Exception e) {\n      throw new InitializationException(\"Exception thrown while loading synonyms\", e);\n    }\n    \n    if (map.fst == null) {\n      log.warn(\"Synonyms loaded with \" + args + \" has empty rule set!\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) {\n    final boolean ignoreCase = getBoolean(\"ignoreCase\", false); \n    this.ignoreCase = ignoreCase;\n\n    String tf = args.get(\"tokenizerFactory\");\n\n    final TokenizerFactory factory = tf == null ? null : loadTokenizerFactory(loader, tf);\n    \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer(Version.LUCENE_50, reader) : factory.create(reader);\n        TokenStream stream = ignoreCase ? new LowerCaseFilter(Version.LUCENE_50, tokenizer) : tokenizer;\n        return new TokenStreamComponents(tokenizer, stream);\n      }\n    };\n\n    String format = args.get(\"format\");\n    try {\n      if (format == null || format.equals(\"solr\")) {\n        // TODO: expose dedup as a parameter?\n        map = loadSolrSynonyms(loader, true, analyzer);\n      } else if (format.equals(\"wordnet\")) {\n        map = loadWordnetSynonyms(loader, true, analyzer);\n      } else {\n        // TODO: somehow make this more pluggable\n        throw new InitializationException(\"Unrecognized synonyms format: \" + format);\n      }\n    } catch (Exception e) {\n      throw new InitializationException(\"Exception thrown while loading synonyms\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) {\n    final boolean ignoreCase = getBoolean(\"ignoreCase\", false); \n    this.ignoreCase = ignoreCase;\n\n    String tf = args.get(\"tokenizerFactory\");\n\n    final TokenizerFactory factory = tf == null ? null : loadTokenizerFactory(loader, tf);\n    \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer(Version.LUCENE_50, reader) : factory.create(reader);\n        TokenStream stream = ignoreCase ? new LowerCaseFilter(Version.LUCENE_50, tokenizer) : tokenizer;\n        return new TokenStreamComponents(tokenizer, stream);\n      }\n    };\n\n    String format = args.get(\"format\");\n    try {\n      if (format == null || format.equals(\"solr\")) {\n        // TODO: expose dedup as a parameter?\n        map = loadSolrSynonyms(loader, true, analyzer);\n      } else if (format.equals(\"wordnet\")) {\n        map = loadWordnetSynonyms(loader, true, analyzer);\n      } else {\n        // TODO: somehow make this more pluggable\n        throw new InitializationException(\"Unrecognized synonyms format: \" + format);\n      }\n    } catch (Exception e) {\n      throw new InitializationException(\"Exception thrown while loading synonyms\", e);\n    }\n    \n    if (map.fst == null) {\n      log.warn(\"Synonyms loaded with \" + args + \" has empty rule set!\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6f80818731469e00f54165ec94aae2db868ea05","date":1343266866,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    final boolean ignoreCase = getBoolean(\"ignoreCase\", false); \n    this.ignoreCase = ignoreCase;\n\n    String tf = args.get(\"tokenizerFactory\");\n\n    final TokenizerFactory factory = tf == null ? null : loadTokenizerFactory(loader, tf);\n    \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer(Version.LUCENE_50, reader) : factory.create(reader);\n        TokenStream stream = ignoreCase ? new LowerCaseFilter(Version.LUCENE_50, tokenizer) : tokenizer;\n        return new TokenStreamComponents(tokenizer, stream);\n      }\n    };\n\n    String format = args.get(\"format\");\n    try {\n      if (format == null || format.equals(\"solr\")) {\n        // TODO: expose dedup as a parameter?\n        map = loadSolrSynonyms(loader, true, analyzer);\n      } else if (format.equals(\"wordnet\")) {\n        map = loadWordnetSynonyms(loader, true, analyzer);\n      } else {\n        // TODO: somehow make this more pluggable\n        throw new IllegalArgumentException(\"Unrecognized synonyms format: \" + format);\n      }\n    } catch (ParseException e) {\n      throw new IOException(\"Error parsing synonyms file:\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) {\n    final boolean ignoreCase = getBoolean(\"ignoreCase\", false); \n    this.ignoreCase = ignoreCase;\n\n    String tf = args.get(\"tokenizerFactory\");\n\n    final TokenizerFactory factory = tf == null ? null : loadTokenizerFactory(loader, tf);\n    \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer(Version.LUCENE_50, reader) : factory.create(reader);\n        TokenStream stream = ignoreCase ? new LowerCaseFilter(Version.LUCENE_50, tokenizer) : tokenizer;\n        return new TokenStreamComponents(tokenizer, stream);\n      }\n    };\n\n    String format = args.get(\"format\");\n    try {\n      if (format == null || format.equals(\"solr\")) {\n        // TODO: expose dedup as a parameter?\n        map = loadSolrSynonyms(loader, true, analyzer);\n      } else if (format.equals(\"wordnet\")) {\n        map = loadWordnetSynonyms(loader, true, analyzer);\n      } else {\n        // TODO: somehow make this more pluggable\n        throw new InitializationException(\"Unrecognized synonyms format: \" + format);\n      }\n    } catch (Exception e) {\n      throw new InitializationException(\"Exception thrown while loading synonyms\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    final boolean ignoreCase = getBoolean(\"ignoreCase\", false); \n    this.ignoreCase = ignoreCase;\n\n    String tf = args.get(\"tokenizerFactory\");\n\n    final TokenizerFactory factory = tf == null ? null : loadTokenizerFactory(loader, tf);\n    \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer(Version.LUCENE_50, reader) : factory.create(reader);\n        TokenStream stream = ignoreCase ? new LowerCaseFilter(Version.LUCENE_50, tokenizer) : tokenizer;\n        return new TokenStreamComponents(tokenizer, stream);\n      }\n    };\n\n    String format = args.get(\"format\");\n    try {\n      if (format == null || format.equals(\"solr\")) {\n        // TODO: expose dedup as a parameter?\n        map = loadSolrSynonyms(loader, true, analyzer);\n      } else if (format.equals(\"wordnet\")) {\n        map = loadWordnetSynonyms(loader, true, analyzer);\n      } else {\n        // TODO: somehow make this more pluggable\n        throw new IllegalArgumentException(\"Unrecognized synonyms format: \" + format);\n      }\n    } catch (ParseException e) {\n      throw new IOException(\"Error parsing synonyms file:\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    final boolean ignoreCase = getBoolean(\"ignoreCase\", false); \n    this.ignoreCase = ignoreCase;\n\n    String tf = args.get(\"tokenizerFactory\");\n\n    final TokenizerFactory factory = tf == null ? null : loadTokenizerFactory(loader, tf);\n    \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer(Version.LUCENE_50, reader) : factory.create(reader);\n        TokenStream stream = ignoreCase ? new LowerCaseFilter(Version.LUCENE_50, tokenizer) : tokenizer;\n        return new TokenStreamComponents(tokenizer, stream);\n      }\n    };\n\n    String format = args.get(\"format\");\n    try {\n      if (format == null || format.equals(\"solr\")) {\n        // TODO: expose dedup as a parameter?\n        map = loadSolrSynonyms(loader, true, analyzer);\n      } else if (format.equals(\"wordnet\")) {\n        map = loadWordnetSynonyms(loader, true, analyzer);\n      } else {\n        // TODO: somehow make this more pluggable\n        throw new IllegalArgumentException(\"Unrecognized synonyms format: \" + format);\n      }\n    } catch (ParseException e) {\n      throw new IOException(\"Error parsing synonyms file:\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    final TokenizerFactory factory = tokenizerFactory == null ? null : loadTokenizerFactory(loader, tokenizerFactory);\n    \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer(Version.LUCENE_50, reader) : factory.create(reader);\n        TokenStream stream = ignoreCase ? new LowerCaseFilter(Version.LUCENE_50, tokenizer) : tokenizer;\n        return new TokenStreamComponents(tokenizer, stream);\n      }\n    };\n\n    try {\n      if (format == null || format.equals(\"solr\")) {\n        // TODO: expose dedup as a parameter?\n        map = loadSolrSynonyms(loader, true, analyzer);\n      } else if (format.equals(\"wordnet\")) {\n        map = loadWordnetSynonyms(loader, true, analyzer);\n      } else {\n        // TODO: somehow make this more pluggable\n        throw new IllegalArgumentException(\"Unrecognized synonyms format: \" + format);\n      }\n    } catch (ParseException e) {\n      throw new IOException(\"Error parsing synonyms file:\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    final boolean ignoreCase = getBoolean(\"ignoreCase\", false); \n    this.ignoreCase = ignoreCase;\n\n    String tf = args.get(\"tokenizerFactory\");\n\n    final TokenizerFactory factory = tf == null ? null : loadTokenizerFactory(loader, tf);\n    \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer(Version.LUCENE_50, reader) : factory.create(reader);\n        TokenStream stream = ignoreCase ? new LowerCaseFilter(Version.LUCENE_50, tokenizer) : tokenizer;\n        return new TokenStreamComponents(tokenizer, stream);\n      }\n    };\n\n    String format = args.get(\"format\");\n    try {\n      if (format == null || format.equals(\"solr\")) {\n        // TODO: expose dedup as a parameter?\n        map = loadSolrSynonyms(loader, true, analyzer);\n      } else if (format.equals(\"wordnet\")) {\n        map = loadWordnetSynonyms(loader, true, analyzer);\n      } else {\n        // TODO: somehow make this more pluggable\n        throw new IllegalArgumentException(\"Unrecognized synonyms format: \" + format);\n      }\n    } catch (ParseException e) {\n      throw new IOException(\"Error parsing synonyms file:\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1607c8d45d996ef40c243758811c95b3670fd4d","date":1374047432,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    final TokenizerFactory factory = tokenizerFactory == null ? null : loadTokenizerFactory(loader, tokenizerFactory);\n    Analyzer analyzer;\n    \n    if (analyzerName != null) {\n      analyzer = loadAnalyzer(loader, analyzerName);\n    } else {\n      analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer(Version.LUCENE_50, reader) : factory.create(reader);\n          TokenStream stream = ignoreCase ? new LowerCaseFilter(Version.LUCENE_50, tokenizer) : tokenizer;\n          return new TokenStreamComponents(tokenizer, stream);\n        }\n      };\n    }\n\n    try {\n      if (format == null || format.equals(\"solr\")) {\n        // TODO: expose dedup as a parameter?\n        map = loadSolrSynonyms(loader, true, analyzer);\n      } else if (format.equals(\"wordnet\")) {\n        map = loadWordnetSynonyms(loader, true, analyzer);\n      } else {\n        // TODO: somehow make this more pluggable\n        throw new IllegalArgumentException(\"Unrecognized synonyms format: \" + format);\n      }\n    } catch (ParseException e) {\n      throw new IOException(\"Error parsing synonyms file:\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    final TokenizerFactory factory = tokenizerFactory == null ? null : loadTokenizerFactory(loader, tokenizerFactory);\n    \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer(Version.LUCENE_50, reader) : factory.create(reader);\n        TokenStream stream = ignoreCase ? new LowerCaseFilter(Version.LUCENE_50, tokenizer) : tokenizer;\n        return new TokenStreamComponents(tokenizer, stream);\n      }\n    };\n\n    try {\n      if (format == null || format.equals(\"solr\")) {\n        // TODO: expose dedup as a parameter?\n        map = loadSolrSynonyms(loader, true, analyzer);\n      } else if (format.equals(\"wordnet\")) {\n        map = loadWordnetSynonyms(loader, true, analyzer);\n      } else {\n        // TODO: somehow make this more pluggable\n        throw new IllegalArgumentException(\"Unrecognized synonyms format: \" + format);\n      }\n    } catch (ParseException e) {\n      throw new IOException(\"Error parsing synonyms file:\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["0bf41419d452997826ec5f17684993377be77f49"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    final TokenizerFactory factory = tokenizerFactory == null ? null : loadTokenizerFactory(loader, tokenizerFactory);\n    Analyzer analyzer;\n    \n    if (analyzerName != null) {\n      analyzer = loadAnalyzer(loader, analyzerName);\n    } else {\n      analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer(Version.LUCENE_50, reader) : factory.create(reader);\n          TokenStream stream = ignoreCase ? new LowerCaseFilter(Version.LUCENE_50, tokenizer) : tokenizer;\n          return new TokenStreamComponents(tokenizer, stream);\n        }\n      };\n    }\n\n    try {\n      if (format == null || format.equals(\"solr\")) {\n        // TODO: expose dedup as a parameter?\n        map = loadSolrSynonyms(loader, true, analyzer);\n      } else if (format.equals(\"wordnet\")) {\n        map = loadWordnetSynonyms(loader, true, analyzer);\n      } else {\n        // TODO: somehow make this more pluggable\n        throw new IllegalArgumentException(\"Unrecognized synonyms format: \" + format);\n      }\n    } catch (ParseException e) {\n      throw new IOException(\"Error parsing synonyms file:\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    final TokenizerFactory factory = tokenizerFactory == null ? null : loadTokenizerFactory(loader, tokenizerFactory);\n    \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer(Version.LUCENE_50, reader) : factory.create(reader);\n        TokenStream stream = ignoreCase ? new LowerCaseFilter(Version.LUCENE_50, tokenizer) : tokenizer;\n        return new TokenStreamComponents(tokenizer, stream);\n      }\n    };\n\n    try {\n      if (format == null || format.equals(\"solr\")) {\n        // TODO: expose dedup as a parameter?\n        map = loadSolrSynonyms(loader, true, analyzer);\n      } else if (format.equals(\"wordnet\")) {\n        map = loadWordnetSynonyms(loader, true, analyzer);\n      } else {\n        // TODO: somehow make this more pluggable\n        throw new IllegalArgumentException(\"Unrecognized synonyms format: \" + format);\n      }\n    } catch (ParseException e) {\n      throw new IOException(\"Error parsing synonyms file:\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85f3a2d749715373feb8529516e92d3538103525","date":1379624134,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    final TokenizerFactory factory = tokenizerFactory == null ? null : loadTokenizerFactory(loader, tokenizerFactory);\n    Analyzer analyzer;\n    \n    if (analyzerName != null) {\n      analyzer = loadAnalyzer(loader, analyzerName);\n    } else {\n      analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer(Version.LUCENE_50, reader) : factory.create(reader);\n          TokenStream stream = ignoreCase ? new LowerCaseFilter(Version.LUCENE_50, tokenizer) : tokenizer;\n          return new TokenStreamComponents(tokenizer, stream);\n        }\n      };\n    }\n\n    try {\n      String formatClass = format;\n      if (format == null || format.equals(\"solr\")) {\n        formatClass = SolrSynonymParser.class.getName();\n      } else if (format.equals(\"wordnet\")) {\n        formatClass = WordnetSynonymParser.class.getName();\n      }\n      // TODO: expose dedup as a parameter?\n      map = loadSynonyms(loader, formatClass, true, analyzer);\n    } catch (ParseException e) {\n      throw new IOException(\"Error parsing synonyms file:\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    final TokenizerFactory factory = tokenizerFactory == null ? null : loadTokenizerFactory(loader, tokenizerFactory);\n    Analyzer analyzer;\n    \n    if (analyzerName != null) {\n      analyzer = loadAnalyzer(loader, analyzerName);\n    } else {\n      analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer(Version.LUCENE_50, reader) : factory.create(reader);\n          TokenStream stream = ignoreCase ? new LowerCaseFilter(Version.LUCENE_50, tokenizer) : tokenizer;\n          return new TokenStreamComponents(tokenizer, stream);\n        }\n      };\n    }\n\n    try {\n      if (format == null || format.equals(\"solr\")) {\n        // TODO: expose dedup as a parameter?\n        map = loadSolrSynonyms(loader, true, analyzer);\n      } else if (format.equals(\"wordnet\")) {\n        map = loadWordnetSynonyms(loader, true, analyzer);\n      } else {\n        // TODO: somehow make this more pluggable\n        throw new IllegalArgumentException(\"Unrecognized synonyms format: \" + format);\n      }\n    } catch (ParseException e) {\n      throw new IOException(\"Error parsing synonyms file:\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bf41419d452997826ec5f17684993377be77f49","date":1386629618,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    final TokenizerFactory factory = tokenizerFactory == null ? null : loadTokenizerFactory(loader, tokenizerFactory);\n    Analyzer analyzer;\n    \n    if (analyzerName != null) {\n      analyzer = loadAnalyzer(loader, analyzerName);\n    } else {\n      analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer(Version.LUCENE_CURRENT, reader) : factory.create(reader);\n          TokenStream stream = ignoreCase ? new LowerCaseFilter(Version.LUCENE_CURRENT, tokenizer) : tokenizer;\n          return new TokenStreamComponents(tokenizer, stream);\n        }\n      };\n    }\n\n    try {\n      String formatClass = format;\n      if (format == null || format.equals(\"solr\")) {\n        formatClass = SolrSynonymParser.class.getName();\n      } else if (format.equals(\"wordnet\")) {\n        formatClass = WordnetSynonymParser.class.getName();\n      }\n      // TODO: expose dedup as a parameter?\n      map = loadSynonyms(loader, formatClass, true, analyzer);\n    } catch (ParseException e) {\n      throw new IOException(\"Error parsing synonyms file:\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    final TokenizerFactory factory = tokenizerFactory == null ? null : loadTokenizerFactory(loader, tokenizerFactory);\n    Analyzer analyzer;\n    \n    if (analyzerName != null) {\n      analyzer = loadAnalyzer(loader, analyzerName);\n    } else {\n      analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer(Version.LUCENE_50, reader) : factory.create(reader);\n          TokenStream stream = ignoreCase ? new LowerCaseFilter(Version.LUCENE_50, tokenizer) : tokenizer;\n          return new TokenStreamComponents(tokenizer, stream);\n        }\n      };\n    }\n\n    try {\n      String formatClass = format;\n      if (format == null || format.equals(\"solr\")) {\n        formatClass = SolrSynonymParser.class.getName();\n      } else if (format.equals(\"wordnet\")) {\n        formatClass = WordnetSynonymParser.class.getName();\n      }\n      // TODO: expose dedup as a parameter?\n      map = loadSynonyms(loader, formatClass, true, analyzer);\n    } catch (ParseException e) {\n      throw new IOException(\"Error parsing synonyms file:\", e);\n    }\n  }\n\n","bugFix":["a1607c8d45d996ef40c243758811c95b3670fd4d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    final TokenizerFactory factory = tokenizerFactory == null ? null : loadTokenizerFactory(loader, tokenizerFactory);\n    Analyzer analyzer;\n    \n    if (analyzerName != null) {\n      analyzer = loadAnalyzer(loader, analyzerName);\n    } else {\n      analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer(Version.LUCENE_CURRENT, reader) : factory.create(reader);\n          TokenStream stream = ignoreCase ? new LowerCaseFilter(Version.LUCENE_CURRENT, tokenizer) : tokenizer;\n          return new TokenStreamComponents(tokenizer, stream);\n        }\n      };\n    }\n\n    try {\n      String formatClass = format;\n      if (format == null || format.equals(\"solr\")) {\n        formatClass = SolrSynonymParser.class.getName();\n      } else if (format.equals(\"wordnet\")) {\n        formatClass = WordnetSynonymParser.class.getName();\n      }\n      // TODO: expose dedup as a parameter?\n      map = loadSynonyms(loader, formatClass, true, analyzer);\n    } catch (ParseException e) {\n      throw new IOException(\"Error parsing synonyms file:\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    final TokenizerFactory factory = tokenizerFactory == null ? null : loadTokenizerFactory(loader, tokenizerFactory);\n    Analyzer analyzer;\n    \n    if (analyzerName != null) {\n      analyzer = loadAnalyzer(loader, analyzerName);\n    } else {\n      analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer(Version.LUCENE_50, reader) : factory.create(reader);\n          TokenStream stream = ignoreCase ? new LowerCaseFilter(Version.LUCENE_50, tokenizer) : tokenizer;\n          return new TokenStreamComponents(tokenizer, stream);\n        }\n      };\n    }\n\n    try {\n      String formatClass = format;\n      if (format == null || format.equals(\"solr\")) {\n        formatClass = SolrSynonymParser.class.getName();\n      } else if (format.equals(\"wordnet\")) {\n        formatClass = WordnetSynonymParser.class.getName();\n      }\n      // TODO: expose dedup as a parameter?\n      map = loadSynonyms(loader, formatClass, true, analyzer);\n    } catch (ParseException e) {\n      throw new IOException(\"Error parsing synonyms file:\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    final TokenizerFactory factory = tokenizerFactory == null ? null : loadTokenizerFactory(loader, tokenizerFactory);\n    Analyzer analyzer;\n    \n    if (analyzerName != null) {\n      analyzer = loadAnalyzer(loader, analyzerName);\n    } else {\n      analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer(Version.LUCENE_CURRENT) : factory.create();\n          TokenStream stream = ignoreCase ? new LowerCaseFilter(Version.LUCENE_CURRENT, tokenizer) : tokenizer;\n          return new TokenStreamComponents(tokenizer, stream);\n        }\n      };\n    }\n\n    try {\n      String formatClass = format;\n      if (format == null || format.equals(\"solr\")) {\n        formatClass = SolrSynonymParser.class.getName();\n      } else if (format.equals(\"wordnet\")) {\n        formatClass = WordnetSynonymParser.class.getName();\n      }\n      // TODO: expose dedup as a parameter?\n      map = loadSynonyms(loader, formatClass, true, analyzer);\n    } catch (ParseException e) {\n      throw new IOException(\"Error parsing synonyms file:\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    final TokenizerFactory factory = tokenizerFactory == null ? null : loadTokenizerFactory(loader, tokenizerFactory);\n    Analyzer analyzer;\n    \n    if (analyzerName != null) {\n      analyzer = loadAnalyzer(loader, analyzerName);\n    } else {\n      analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer(Version.LUCENE_CURRENT, reader) : factory.create(reader);\n          TokenStream stream = ignoreCase ? new LowerCaseFilter(Version.LUCENE_CURRENT, tokenizer) : tokenizer;\n          return new TokenStreamComponents(tokenizer, stream);\n        }\n      };\n    }\n\n    try {\n      String formatClass = format;\n      if (format == null || format.equals(\"solr\")) {\n        formatClass = SolrSynonymParser.class.getName();\n      } else if (format.equals(\"wordnet\")) {\n        formatClass = WordnetSynonymParser.class.getName();\n      }\n      // TODO: expose dedup as a parameter?\n      map = loadSynonyms(loader, formatClass, true, analyzer);\n    } catch (ParseException e) {\n      throw new IOException(\"Error parsing synonyms file:\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    final TokenizerFactory factory = tokenizerFactory == null ? null : loadTokenizerFactory(loader, tokenizerFactory);\n    Analyzer analyzer;\n    \n    if (analyzerName != null) {\n      analyzer = loadAnalyzer(loader, analyzerName);\n    } else {\n      analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer() : factory.create();\n          TokenStream stream = ignoreCase ? new LowerCaseFilter(tokenizer) : tokenizer;\n          return new TokenStreamComponents(tokenizer, stream);\n        }\n      };\n    }\n\n    try {\n      String formatClass = format;\n      if (format == null || format.equals(\"solr\")) {\n        formatClass = SolrSynonymParser.class.getName();\n      } else if (format.equals(\"wordnet\")) {\n        formatClass = WordnetSynonymParser.class.getName();\n      }\n      // TODO: expose dedup as a parameter?\n      map = loadSynonyms(loader, formatClass, true, analyzer);\n    } catch (ParseException e) {\n      throw new IOException(\"Error parsing synonyms file:\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    final TokenizerFactory factory = tokenizerFactory == null ? null : loadTokenizerFactory(loader, tokenizerFactory);\n    Analyzer analyzer;\n    \n    if (analyzerName != null) {\n      analyzer = loadAnalyzer(loader, analyzerName);\n    } else {\n      analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer(Version.LUCENE_CURRENT) : factory.create();\n          TokenStream stream = ignoreCase ? new LowerCaseFilter(Version.LUCENE_CURRENT, tokenizer) : tokenizer;\n          return new TokenStreamComponents(tokenizer, stream);\n        }\n      };\n    }\n\n    try {\n      String formatClass = format;\n      if (format == null || format.equals(\"solr\")) {\n        formatClass = SolrSynonymParser.class.getName();\n      } else if (format.equals(\"wordnet\")) {\n        formatClass = WordnetSynonymParser.class.getName();\n      }\n      // TODO: expose dedup as a parameter?\n      map = loadSynonyms(loader, formatClass, true, analyzer);\n    } catch (ParseException e) {\n      throw new IOException(\"Error parsing synonyms file:\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    final TokenizerFactory factory = tokenizerFactory == null ? null : loadTokenizerFactory(loader, tokenizerFactory);\n    Analyzer analyzer;\n    \n    if (analyzerName != null) {\n      analyzer = loadAnalyzer(loader, analyzerName);\n    } else {\n      analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer(Version.LUCENE_CURRENT) : factory.create();\n          TokenStream stream = ignoreCase ? new LowerCaseFilter(Version.LUCENE_CURRENT, tokenizer) : tokenizer;\n          return new TokenStreamComponents(tokenizer, stream);\n        }\n      };\n    }\n\n    try {\n      String formatClass = format;\n      if (format == null || format.equals(\"solr\")) {\n        formatClass = SolrSynonymParser.class.getName();\n      } else if (format.equals(\"wordnet\")) {\n        formatClass = WordnetSynonymParser.class.getName();\n      }\n      // TODO: expose dedup as a parameter?\n      map = loadSynonyms(loader, formatClass, true, analyzer);\n    } catch (ParseException e) {\n      throw new IOException(\"Error parsing synonyms file:\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    final TokenizerFactory factory = tokenizerFactory == null ? null : loadTokenizerFactory(loader, tokenizerFactory);\n    Analyzer analyzer;\n    \n    if (analyzerName != null) {\n      analyzer = loadAnalyzer(loader, analyzerName);\n    } else {\n      analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer() : factory.create();\n          TokenStream stream = ignoreCase ? new LowerCaseFilter(tokenizer) : tokenizer;\n          return new TokenStreamComponents(tokenizer, stream);\n        }\n      };\n    }\n\n    try {\n      String formatClass = format;\n      if (format == null || format.equals(\"solr\")) {\n        formatClass = SolrSynonymParser.class.getName();\n      } else if (format.equals(\"wordnet\")) {\n        formatClass = WordnetSynonymParser.class.getName();\n      }\n      // TODO: expose dedup as a parameter?\n      map = loadSynonyms(loader, formatClass, true, analyzer);\n    } catch (ParseException e) {\n      throw new IOException(\"Error parsing synonyms file:\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    final TokenizerFactory factory = tokenizerFactory == null ? null : loadTokenizerFactory(loader, tokenizerFactory);\n    Analyzer analyzer;\n    \n    if (analyzerName != null) {\n      analyzer = loadAnalyzer(loader, analyzerName);\n    } else {\n      analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer() : factory.create();\n          TokenStream stream = ignoreCase ? new LowerCaseFilter(tokenizer) : tokenizer;\n          return new TokenStreamComponents(tokenizer, stream);\n        }\n      };\n    }\n\n    try {\n      String formatClass = format;\n      if (format == null || format.equals(\"solr\")) {\n        formatClass = SolrSynonymParser.class.getName();\n      } else if (format.equals(\"wordnet\")) {\n        formatClass = WordnetSynonymParser.class.getName();\n      }\n      // TODO: expose dedup as a parameter?\n      map = loadSynonyms(loader, formatClass, true, analyzer);\n    } catch (ParseException e) {\n      throw new IOException(\"Error parsing synonyms file:\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    final TokenizerFactory factory = tokenizerFactory == null ? null : loadTokenizerFactory(loader, tokenizerFactory);\n    Analyzer analyzer;\n    \n    if (analyzerName != null) {\n      analyzer = loadAnalyzer(loader, analyzerName);\n    } else {\n      analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer(Version.LUCENE_CURRENT) : factory.create();\n          TokenStream stream = ignoreCase ? new LowerCaseFilter(Version.LUCENE_CURRENT, tokenizer) : tokenizer;\n          return new TokenStreamComponents(tokenizer, stream);\n        }\n      };\n    }\n\n    try {\n      String formatClass = format;\n      if (format == null || format.equals(\"solr\")) {\n        formatClass = SolrSynonymParser.class.getName();\n      } else if (format.equals(\"wordnet\")) {\n        formatClass = WordnetSynonymParser.class.getName();\n      }\n      // TODO: expose dedup as a parameter?\n      map = loadSynonyms(loader, formatClass, true, analyzer);\n    } catch (ParseException e) {\n      throw new IOException(\"Error parsing synonyms file:\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    final TokenizerFactory factory = tokenizerFactory == null ? null : loadTokenizerFactory(loader, tokenizerFactory);\n    Analyzer analyzer;\n    \n    if (analyzerName != null) {\n      analyzer = loadAnalyzer(loader, analyzerName);\n    } else {\n      analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer() : factory.create();\n          TokenStream stream = ignoreCase ? new LowerCaseFilter(tokenizer) : tokenizer;\n          return new TokenStreamComponents(tokenizer, stream);\n        }\n      };\n    }\n\n    try (Analyzer a = analyzer) {\n      String formatClass = format;\n      if (format == null || format.equals(\"solr\")) {\n        formatClass = SolrSynonymParser.class.getName();\n      } else if (format.equals(\"wordnet\")) {\n        formatClass = WordnetSynonymParser.class.getName();\n      }\n      // TODO: expose dedup as a parameter?\n      map = loadSynonyms(loader, formatClass, true, a);\n    } catch (ParseException e) {\n      throw new IOException(\"Error parsing synonyms file:\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    final TokenizerFactory factory = tokenizerFactory == null ? null : loadTokenizerFactory(loader, tokenizerFactory);\n    Analyzer analyzer;\n    \n    if (analyzerName != null) {\n      analyzer = loadAnalyzer(loader, analyzerName);\n    } else {\n      analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer() : factory.create();\n          TokenStream stream = ignoreCase ? new LowerCaseFilter(tokenizer) : tokenizer;\n          return new TokenStreamComponents(tokenizer, stream);\n        }\n      };\n    }\n\n    try {\n      String formatClass = format;\n      if (format == null || format.equals(\"solr\")) {\n        formatClass = SolrSynonymParser.class.getName();\n      } else if (format.equals(\"wordnet\")) {\n        formatClass = WordnetSynonymParser.class.getName();\n      }\n      // TODO: expose dedup as a parameter?\n      map = loadSynonyms(loader, formatClass, true, analyzer);\n    } catch (ParseException e) {\n      throw new IOException(\"Error parsing synonyms file:\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    final TokenizerFactory factory = tokenizerFactory == null ? null : loadTokenizerFactory(loader, tokenizerFactory);\n    Analyzer analyzer;\n    \n    if (analyzerName != null) {\n      analyzer = loadAnalyzer(loader, analyzerName);\n    } else {\n      analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer() : factory.create();\n          TokenStream stream = ignoreCase ? new LowerCaseFilter(tokenizer) : tokenizer;\n          return new TokenStreamComponents(tokenizer, stream);\n        }\n      };\n    }\n\n    try (Analyzer a = analyzer) {\n      String formatClass = format;\n      if (format == null || format.equals(\"solr\")) {\n        formatClass = SolrSynonymParser.class.getName();\n      } else if (format.equals(\"wordnet\")) {\n        formatClass = WordnetSynonymParser.class.getName();\n      }\n      // TODO: expose dedup as a parameter?\n      map = loadSynonyms(loader, formatClass, true, a);\n    } catch (ParseException e) {\n      throw new IOException(\"Error parsing synonyms file:\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) throws IOException {\n    final TokenizerFactory factory = tokenizerFactory == null ? null : loadTokenizerFactory(loader, tokenizerFactory);\n    Analyzer analyzer;\n    \n    if (analyzerName != null) {\n      analyzer = loadAnalyzer(loader, analyzerName);\n    } else {\n      analyzer = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer() : factory.create();\n          TokenStream stream = ignoreCase ? new LowerCaseFilter(tokenizer) : tokenizer;\n          return new TokenStreamComponents(tokenizer, stream);\n        }\n      };\n    }\n\n    try {\n      String formatClass = format;\n      if (format == null || format.equals(\"solr\")) {\n        formatClass = SolrSynonymParser.class.getName();\n      } else if (format.equals(\"wordnet\")) {\n        formatClass = WordnetSynonymParser.class.getName();\n      }\n      // TODO: expose dedup as a parameter?\n      map = loadSynonyms(loader, formatClass, true, analyzer);\n    } catch (ParseException e) {\n      throw new IOException(\"Error parsing synonyms file:\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["0bf41419d452997826ec5f17684993377be77f49"],"a05464f071eda06541fd9ed6f04aaca99b131dfa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["f6f80818731469e00f54165ec94aae2db868ea05"],"a1607c8d45d996ef40c243758811c95b3670fd4d":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a05464f071eda06541fd9ed6f04aaca99b131dfa"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["379db3ad24c4f0214f30a122265a6d6be003a99d","a56958d7f71a28824f20031ffbb2e13502a0274e"],"0bf41419d452997826ec5f17684993377be77f49":["85f3a2d749715373feb8529516e92d3538103525"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f6f80818731469e00f54165ec94aae2db868ea05"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f6f80818731469e00f54165ec94aae2db868ea05"],"f6f80818731469e00f54165ec94aae2db868ea05":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["85f3a2d749715373feb8529516e92d3538103525","0bf41419d452997826ec5f17684993377be77f49"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"85f3a2d749715373feb8529516e92d3538103525":["a1607c8d45d996ef40c243758811c95b3670fd4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56958d7f71a28824f20031ffbb2e13502a0274e"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"a05464f071eda06541fd9ed6f04aaca99b131dfa":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["a1607c8d45d996ef40c243758811c95b3670fd4d","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"a1607c8d45d996ef40c243758811c95b3670fd4d":["85f3a2d749715373feb8529516e92d3538103525"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["f6f80818731469e00f54165ec94aae2db868ea05"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0bf41419d452997826ec5f17684993377be77f49":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a05464f071eda06541fd9ed6f04aaca99b131dfa","5a1a22b1ad88b436661458df567f3fdb446392a4","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"f6f80818731469e00f54165ec94aae2db868ea05":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"85f3a2d749715373feb8529516e92d3538103525":["0bf41419d452997826ec5f17684993377be77f49","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}