{"path":"lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils#getComplementSet(ScoredDocIDs,IndexReader).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils#getComplementSet(ScoredDocIDs,IndexReader).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils#getComplementSet(ScoredDocIDs,IndexReader).mjava","sourceNew":"  /**\n   * Create a complement of the input set. The returned {@link ScoredDocIDs}\n   * does not contain any scores, which makes sense given that the complementing\n   * documents were not scored.\n   * \n   * Note: the complement set does NOT contain doc ids which are noted as deleted by the given reader\n   * \n   * @param docids to be complemented.\n   * @param reader holding the number of documents & information about deletions.\n   */\n  public final static ScoredDocIDs getComplementSet(final ScoredDocIDs docids, final IndexReader reader)\n  throws IOException {\n    final int maxDoc = reader.maxDoc();\n\n    DocIdSet docIdSet = docids.getDocIDs();\n    final OpenBitSet complement;\n    if (docIdSet instanceof OpenBitSet) {\n      // That is the most common case, if ScoredDocIdsCollector was used.\n      complement = ((OpenBitSet) docIdSet).clone();\n    } else {\n      complement = new OpenBitSetDISI(docIdSet.iterator(), maxDoc);\n    }\n\n    complement.flip(0, maxDoc);\n\n    // Remove all Deletions from the complement set\n    clearDeleted(reader, complement);\n\n    return createScoredDocIds(complement, maxDoc);\n  }\n\n","sourceOld":"  /**\n   * Create a complement of the input set. The returned {@link ScoredDocIDs}\n   * does not contain any scores, which makes sense given that the complementing\n   * documents were not scored.\n   * \n   * Note: the complement set does NOT contain doc ids which are noted as deleted by the given reader\n   * \n   * @param docids to be complemented.\n   * @param reader holding the number of documents & information about deletions.\n   */\n  public final static ScoredDocIDs getComplementSet(final ScoredDocIDs docids, final IndexReader reader)\n  throws IOException {\n    final int maxDoc = reader.maxDoc();\n\n    DocIdSet docIdSet = docids.getDocIDs();\n    final OpenBitSet complement;\n    if (docIdSet instanceof OpenBitSet) {\n      // That is the most common case, if ScoredDocIdsCollector was used.\n      complement = ((OpenBitSet) docIdSet).clone();\n    } else {\n      complement = new OpenBitSetDISI(docIdSet.iterator(), maxDoc);\n    }\n\n    complement.flip(0, maxDoc);\n\n    // Remove all Deletions from the complement set\n    clearDeleted(reader, complement);\n\n    return createScoredDocIds(complement, maxDoc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42f51b3ab4258ff4623227b0db011b8bb83db5c7","date":1358164991,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils#getComplementSet(ScoredDocIDs,IndexReader).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils#getComplementSet(ScoredDocIDs,IndexReader).mjava","sourceNew":"  /**\n   * Create a complement of the input set. The returned {@link ScoredDocIDs}\n   * does not contain any scores, which makes sense given that the complementing\n   * documents were not scored.\n   * \n   * Note: the complement set does NOT contain doc ids which are noted as deleted by the given reader\n   * \n   * @param docids to be complemented.\n   * @param reader holding the number of documents & information about deletions.\n   */\n  public final static ScoredDocIDs getComplementSet(final ScoredDocIDs docids, final IndexReader reader)\n      throws IOException {\n    final int maxDoc = reader.maxDoc();\n\n    DocIdSet docIdSet = docids.getDocIDs();\n    final FixedBitSet complement;\n    if (docIdSet instanceof FixedBitSet) {\n      // That is the most common case, if ScoredDocIdsCollector was used.\n      complement = ((FixedBitSet) docIdSet).clone();\n    } else {\n      complement = new FixedBitSet(maxDoc);\n      DocIdSetIterator iter = docIdSet.iterator();\n      int doc;\n      while ((doc = iter.nextDoc()) < maxDoc) {\n        complement.set(doc);\n      }\n    }\n    complement.flip(0, maxDoc);\n    clearDeleted(reader, complement);\n\n    return createScoredDocIds(complement, maxDoc);\n  }\n\n","sourceOld":"  /**\n   * Create a complement of the input set. The returned {@link ScoredDocIDs}\n   * does not contain any scores, which makes sense given that the complementing\n   * documents were not scored.\n   * \n   * Note: the complement set does NOT contain doc ids which are noted as deleted by the given reader\n   * \n   * @param docids to be complemented.\n   * @param reader holding the number of documents & information about deletions.\n   */\n  public final static ScoredDocIDs getComplementSet(final ScoredDocIDs docids, final IndexReader reader)\n  throws IOException {\n    final int maxDoc = reader.maxDoc();\n\n    DocIdSet docIdSet = docids.getDocIDs();\n    final OpenBitSet complement;\n    if (docIdSet instanceof OpenBitSet) {\n      // That is the most common case, if ScoredDocIdsCollector was used.\n      complement = ((OpenBitSet) docIdSet).clone();\n    } else {\n      complement = new OpenBitSetDISI(docIdSet.iterator(), maxDoc);\n    }\n\n    complement.flip(0, maxDoc);\n\n    // Remove all Deletions from the complement set\n    clearDeleted(reader, complement);\n\n    return createScoredDocIds(complement, maxDoc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils#getComplementSet(ScoredDocIDs,IndexReader).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils#getComplementSet(ScoredDocIDs,IndexReader).mjava","sourceNew":"  /**\n   * Create a complement of the input set. The returned {@link ScoredDocIDs}\n   * does not contain any scores, which makes sense given that the complementing\n   * documents were not scored.\n   * \n   * Note: the complement set does NOT contain doc ids which are noted as deleted by the given reader\n   * \n   * @param docids to be complemented.\n   * @param reader holding the number of documents & information about deletions.\n   */\n  public final static ScoredDocIDs getComplementSet(final ScoredDocIDs docids, final IndexReader reader)\n      throws IOException {\n    final int maxDoc = reader.maxDoc();\n\n    DocIdSet docIdSet = docids.getDocIDs();\n    final FixedBitSet complement;\n    if (docIdSet instanceof FixedBitSet) {\n      // That is the most common case, if ScoredDocIdsCollector was used.\n      complement = ((FixedBitSet) docIdSet).clone();\n    } else {\n      complement = new FixedBitSet(maxDoc);\n      DocIdSetIterator iter = docIdSet.iterator();\n      int doc;\n      while ((doc = iter.nextDoc()) < maxDoc) {\n        complement.set(doc);\n      }\n    }\n    complement.flip(0, maxDoc);\n    clearDeleted(reader, complement);\n\n    return createScoredDocIds(complement, maxDoc);\n  }\n\n","sourceOld":"  /**\n   * Create a complement of the input set. The returned {@link ScoredDocIDs}\n   * does not contain any scores, which makes sense given that the complementing\n   * documents were not scored.\n   * \n   * Note: the complement set does NOT contain doc ids which are noted as deleted by the given reader\n   * \n   * @param docids to be complemented.\n   * @param reader holding the number of documents & information about deletions.\n   */\n  public final static ScoredDocIDs getComplementSet(final ScoredDocIDs docids, final IndexReader reader)\n  throws IOException {\n    final int maxDoc = reader.maxDoc();\n\n    DocIdSet docIdSet = docids.getDocIDs();\n    final OpenBitSet complement;\n    if (docIdSet instanceof OpenBitSet) {\n      // That is the most common case, if ScoredDocIdsCollector was used.\n      complement = ((OpenBitSet) docIdSet).clone();\n    } else {\n      complement = new OpenBitSetDISI(docIdSet.iterator(), maxDoc);\n    }\n\n    complement.flip(0, maxDoc);\n\n    // Remove all Deletions from the complement set\n    clearDeleted(reader, complement);\n\n    return createScoredDocIds(complement, maxDoc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","date":1375108983,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/old/ScoredDocIdsUtils#getComplementSet(ScoredDocIDs,IndexReader).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils#getComplementSet(ScoredDocIDs,IndexReader).mjava","sourceNew":"  /**\n   * Create a complement of the input set. The returned {@link ScoredDocIDs}\n   * does not contain any scores, which makes sense given that the complementing\n   * documents were not scored.\n   * \n   * Note: the complement set does NOT contain doc ids which are noted as deleted by the given reader\n   * \n   * @param docids to be complemented.\n   * @param reader holding the number of documents & information about deletions.\n   */\n  public final static ScoredDocIDs getComplementSet(final ScoredDocIDs docids, final IndexReader reader)\n      throws IOException {\n    final int maxDoc = reader.maxDoc();\n\n    DocIdSet docIdSet = docids.getDocIDs();\n    final FixedBitSet complement;\n    if (docIdSet instanceof FixedBitSet) {\n      // That is the most common case, if ScoredDocIdsCollector was used.\n      complement = ((FixedBitSet) docIdSet).clone();\n    } else {\n      complement = new FixedBitSet(maxDoc);\n      DocIdSetIterator iter = docIdSet.iterator();\n      int doc;\n      while ((doc = iter.nextDoc()) < maxDoc) {\n        complement.set(doc);\n      }\n    }\n    complement.flip(0, maxDoc);\n    clearDeleted(reader, complement);\n\n    return createScoredDocIds(complement, maxDoc);\n  }\n\n","sourceOld":"  /**\n   * Create a complement of the input set. The returned {@link ScoredDocIDs}\n   * does not contain any scores, which makes sense given that the complementing\n   * documents were not scored.\n   * \n   * Note: the complement set does NOT contain doc ids which are noted as deleted by the given reader\n   * \n   * @param docids to be complemented.\n   * @param reader holding the number of documents & information about deletions.\n   */\n  public final static ScoredDocIDs getComplementSet(final ScoredDocIDs docids, final IndexReader reader)\n      throws IOException {\n    final int maxDoc = reader.maxDoc();\n\n    DocIdSet docIdSet = docids.getDocIDs();\n    final FixedBitSet complement;\n    if (docIdSet instanceof FixedBitSet) {\n      // That is the most common case, if ScoredDocIdsCollector was used.\n      complement = ((FixedBitSet) docIdSet).clone();\n    } else {\n      complement = new FixedBitSet(maxDoc);\n      DocIdSetIterator iter = docIdSet.iterator();\n      int doc;\n      while ((doc = iter.nextDoc()) < maxDoc) {\n        complement.set(doc);\n      }\n    }\n    complement.flip(0, maxDoc);\n    clearDeleted(reader, complement);\n\n    return createScoredDocIds(complement, maxDoc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/old/ScoredDocIdsUtils#getComplementSet(ScoredDocIDs,IndexReader).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/ScoredDocIdsUtils#getComplementSet(ScoredDocIDs,IndexReader).mjava","sourceNew":"  /**\n   * Create a complement of the input set. The returned {@link ScoredDocIDs}\n   * does not contain any scores, which makes sense given that the complementing\n   * documents were not scored.\n   * \n   * Note: the complement set does NOT contain doc ids which are noted as deleted by the given reader\n   * \n   * @param docids to be complemented.\n   * @param reader holding the number of documents & information about deletions.\n   */\n  public final static ScoredDocIDs getComplementSet(final ScoredDocIDs docids, final IndexReader reader)\n      throws IOException {\n    final int maxDoc = reader.maxDoc();\n\n    DocIdSet docIdSet = docids.getDocIDs();\n    final FixedBitSet complement;\n    if (docIdSet instanceof FixedBitSet) {\n      // That is the most common case, if ScoredDocIdsCollector was used.\n      complement = ((FixedBitSet) docIdSet).clone();\n    } else {\n      complement = new FixedBitSet(maxDoc);\n      DocIdSetIterator iter = docIdSet.iterator();\n      int doc;\n      while ((doc = iter.nextDoc()) < maxDoc) {\n        complement.set(doc);\n      }\n    }\n    complement.flip(0, maxDoc);\n    clearDeleted(reader, complement);\n\n    return createScoredDocIds(complement, maxDoc);\n  }\n\n","sourceOld":"  /**\n   * Create a complement of the input set. The returned {@link ScoredDocIDs}\n   * does not contain any scores, which makes sense given that the complementing\n   * documents were not scored.\n   * \n   * Note: the complement set does NOT contain doc ids which are noted as deleted by the given reader\n   * \n   * @param docids to be complemented.\n   * @param reader holding the number of documents & information about deletions.\n   */\n  public final static ScoredDocIDs getComplementSet(final ScoredDocIDs docids, final IndexReader reader)\n      throws IOException {\n    final int maxDoc = reader.maxDoc();\n\n    DocIdSet docIdSet = docids.getDocIDs();\n    final FixedBitSet complement;\n    if (docIdSet instanceof FixedBitSet) {\n      // That is the most common case, if ScoredDocIdsCollector was used.\n      complement = ((FixedBitSet) docIdSet).clone();\n    } else {\n      complement = new FixedBitSet(maxDoc);\n      DocIdSetIterator iter = docIdSet.iterator();\n      int doc;\n      while ((doc = iter.nextDoc()) < maxDoc) {\n        complement.set(doc);\n      }\n    }\n    complement.flip(0, maxDoc);\n    clearDeleted(reader, complement);\n\n    return createScoredDocIds(complement, maxDoc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"42f51b3ab4258ff4623227b0db011b8bb83db5c7":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["b89678825b68eccaf09e6ab71675fc0b0af1e099","42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6"]},"commit2Childs":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["42f51b3ab4258ff4623227b0db011b8bb83db5c7","8917bfede3b4ca30f4305c1e391e9218959cd723"],"42f51b3ab4258ff4623227b0db011b8bb83db5c7":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","8917bfede3b4ca30f4305c1e391e9218959cd723","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8917bfede3b4ca30f4305c1e391e9218959cd723","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}