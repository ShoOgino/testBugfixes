{"path":"solr/core/src/test/org/apache/solr/cloud/SharedFSAutoReplicaFailoverTest#assertSliceAndReplicaCount(String,int,int,int).mjava","commits":[{"id":"717e5ceb2acae36d422ec75e5a4ce9fac40506e1","date":1501239603,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SharedFSAutoReplicaFailoverTest#assertSliceAndReplicaCount(String,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void assertSliceAndReplicaCount(String collection, int numSlices, int numReplicas, int timeOutInMs) throws InterruptedException {\n    TimeOut timeOut = new TimeOut(timeOutInMs, TimeUnit.MILLISECONDS);\n    while (!timeOut.hasTimedOut()) {\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      Collection<Slice> slices = clusterState.getCollection(collection).getActiveSlices();\n      if (slices.size() == numSlices) {\n        boolean isMatch = true;\n        for (Slice slice : slices) {\n          int count = 0;\n          for (Replica replica : slice.getReplicas()) {\n            if (replica.getState() == Replica.State.ACTIVE && clusterState.liveNodesContain(replica.getNodeName())) {\n              count++;\n            }\n          }\n          if (count < numReplicas) {\n            isMatch = false;\n          }\n        }\n        if (isMatch) return;\n      }\n      Thread.sleep(200);\n    }\n    fail(\"Expected numSlices=\" + numSlices + \" numReplicas=\" + numReplicas + \" but found \" + cloudClient.getZkStateReader().getClusterState().getCollection(collection));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8cffee0b9c10b78bd087c71485b482217fe84f","date":1505950827,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SharedFSAutoReplicaFailoverTest#assertSliceAndReplicaCount(String,int,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SharedFSAutoReplicaFailoverTest#assertSliceAndReplicaCount(String,int,int,int).mjava","sourceNew":"  private void assertSliceAndReplicaCount(String collection, int numSlices, int numReplicas, int timeOutInMs) throws InterruptedException {\n    TimeOut timeOut = new TimeOut(timeOutInMs, TimeUnit.MILLISECONDS);\n    while (!timeOut.hasTimedOut()) {\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      Collection<Slice> slices = clusterState.getCollection(collection).getActiveSlices();\n      if (slices.size() == numSlices) {\n        boolean isMatch = true;\n        for (Slice slice : slices) {\n          int count = 0;\n          for (Replica replica : slice.getReplicas()) {\n            if (replica.getState() == Replica.State.ACTIVE && clusterState.liveNodesContain(replica.getNodeName())) {\n              count++;\n            }\n          }\n          if (count < numReplicas) {\n            isMatch = false;\n          }\n        }\n        if (isMatch) return;\n      }\n      Thread.sleep(200);\n    }\n    fail(\"Expected numSlices=\" + numSlices + \" numReplicas=\" + numReplicas + \" but found \" + cloudClient.getZkStateReader().getClusterState().getCollection(collection) + \" with /live_nodes: \" + cloudClient.getZkStateReader().getClusterState().getLiveNodes());\n  }\n\n","sourceOld":"  private void assertSliceAndReplicaCount(String collection, int numSlices, int numReplicas, int timeOutInMs) throws InterruptedException {\n    TimeOut timeOut = new TimeOut(timeOutInMs, TimeUnit.MILLISECONDS);\n    while (!timeOut.hasTimedOut()) {\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      Collection<Slice> slices = clusterState.getCollection(collection).getActiveSlices();\n      if (slices.size() == numSlices) {\n        boolean isMatch = true;\n        for (Slice slice : slices) {\n          int count = 0;\n          for (Replica replica : slice.getReplicas()) {\n            if (replica.getState() == Replica.State.ACTIVE && clusterState.liveNodesContain(replica.getNodeName())) {\n              count++;\n            }\n          }\n          if (count < numReplicas) {\n            isMatch = false;\n          }\n        }\n        if (isMatch) return;\n      }\n      Thread.sleep(200);\n    }\n    fail(\"Expected numSlices=\" + numSlices + \" numReplicas=\" + numReplicas + \" but found \" + cloudClient.getZkStateReader().getClusterState().getCollection(collection));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SharedFSAutoReplicaFailoverTest#assertSliceAndReplicaCount(String,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void assertSliceAndReplicaCount(String collection, int numSlices, int numReplicas, int timeOutInMs) throws InterruptedException {\n    TimeOut timeOut = new TimeOut(timeOutInMs, TimeUnit.MILLISECONDS);\n    while (!timeOut.hasTimedOut()) {\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      Collection<Slice> slices = clusterState.getCollection(collection).getActiveSlices();\n      if (slices.size() == numSlices) {\n        boolean isMatch = true;\n        for (Slice slice : slices) {\n          int count = 0;\n          for (Replica replica : slice.getReplicas()) {\n            if (replica.getState() == Replica.State.ACTIVE && clusterState.liveNodesContain(replica.getNodeName())) {\n              count++;\n            }\n          }\n          if (count < numReplicas) {\n            isMatch = false;\n          }\n        }\n        if (isMatch) return;\n      }\n      Thread.sleep(200);\n    }\n    fail(\"Expected numSlices=\" + numSlices + \" numReplicas=\" + numReplicas + \" but found \" + cloudClient.getZkStateReader().getClusterState().getCollection(collection) + \" with /live_nodes: \" + cloudClient.getZkStateReader().getClusterState().getLiveNodes());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SharedFSAutoReplicaFailoverTest#assertSliceAndReplicaCount(String,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void assertSliceAndReplicaCount(String collection, int numSlices, int numReplicas, int timeOutInMs) throws InterruptedException {\n    TimeOut timeOut = new TimeOut(timeOutInMs, TimeUnit.MILLISECONDS);\n    while (!timeOut.hasTimedOut()) {\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      Collection<Slice> slices = clusterState.getCollection(collection).getActiveSlices();\n      if (slices.size() == numSlices) {\n        boolean isMatch = true;\n        for (Slice slice : slices) {\n          int count = 0;\n          for (Replica replica : slice.getReplicas()) {\n            if (replica.getState() == Replica.State.ACTIVE && clusterState.liveNodesContain(replica.getNodeName())) {\n              count++;\n            }\n          }\n          if (count < numReplicas) {\n            isMatch = false;\n          }\n        }\n        if (isMatch) return;\n      }\n      Thread.sleep(200);\n    }\n    fail(\"Expected numSlices=\" + numSlices + \" numReplicas=\" + numReplicas + \" but found \" + cloudClient.getZkStateReader().getClusterState().getCollection(collection) + \" with /live_nodes: \" + cloudClient.getZkStateReader().getClusterState().getLiveNodes());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SharedFSAutoReplicaFailoverTest#assertSliceAndReplicaCount(String,int,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SharedFSAutoReplicaFailoverTest#assertSliceAndReplicaCount(String,int,int,int).mjava","sourceNew":"  private void assertSliceAndReplicaCount(String collection, int numSlices, int numReplicas, int timeOutInMs) throws InterruptedException {\n    TimeOut timeOut = new TimeOut(timeOutInMs, TimeUnit.MILLISECONDS, TimeSource.NANO_TIME);\n    while (!timeOut.hasTimedOut()) {\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      Collection<Slice> slices = clusterState.getCollection(collection).getActiveSlices();\n      if (slices.size() == numSlices) {\n        boolean isMatch = true;\n        for (Slice slice : slices) {\n          int count = 0;\n          for (Replica replica : slice.getReplicas()) {\n            if (replica.getState() == Replica.State.ACTIVE && clusterState.liveNodesContain(replica.getNodeName())) {\n              count++;\n            }\n          }\n          if (count < numReplicas) {\n            isMatch = false;\n          }\n        }\n        if (isMatch) return;\n      }\n      Thread.sleep(200);\n    }\n    fail(\"Expected numSlices=\" + numSlices + \" numReplicas=\" + numReplicas + \" but found \" + cloudClient.getZkStateReader().getClusterState().getCollection(collection) + \" with /live_nodes: \" + cloudClient.getZkStateReader().getClusterState().getLiveNodes());\n  }\n\n","sourceOld":"  private void assertSliceAndReplicaCount(String collection, int numSlices, int numReplicas, int timeOutInMs) throws InterruptedException {\n    TimeOut timeOut = new TimeOut(timeOutInMs, TimeUnit.MILLISECONDS);\n    while (!timeOut.hasTimedOut()) {\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      Collection<Slice> slices = clusterState.getCollection(collection).getActiveSlices();\n      if (slices.size() == numSlices) {\n        boolean isMatch = true;\n        for (Slice slice : slices) {\n          int count = 0;\n          for (Replica replica : slice.getReplicas()) {\n            if (replica.getState() == Replica.State.ACTIVE && clusterState.liveNodesContain(replica.getNodeName())) {\n              count++;\n            }\n          }\n          if (count < numReplicas) {\n            isMatch = false;\n          }\n        }\n        if (isMatch) return;\n      }\n      Thread.sleep(200);\n    }\n    fail(\"Expected numSlices=\" + numSlices + \" numReplicas=\" + numReplicas + \" but found \" + cloudClient.getZkStateReader().getClusterState().getCollection(collection) + \" with /live_nodes: \" + cloudClient.getZkStateReader().getClusterState().getLiveNodes());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5b8cffee0b9c10b78bd087c71485b482217fe84f"],"717e5ceb2acae36d422ec75e5a4ce9fac40506e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b8cffee0b9c10b78bd087c71485b482217fe84f":["717e5ceb2acae36d422ec75e5a4ce9fac40506e1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["560c18d71dad43d675158783c3840f8c80d6d39c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"717e5ceb2acae36d422ec75e5a4ce9fac40506e1":["5b8cffee0b9c10b78bd087c71485b482217fe84f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","717e5ceb2acae36d422ec75e5a4ce9fac40506e1","560c18d71dad43d675158783c3840f8c80d6d39c"],"5b8cffee0b9c10b78bd087c71485b482217fe84f":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"560c18d71dad43d675158783c3840f8c80d6d39c":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}