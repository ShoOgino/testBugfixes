{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#readField(StoredFieldVisitor,FieldInfo,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#readField(StoredFieldVisitor,FieldInfo,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#readField(StoredFieldVisitor,FieldInfo,int).mjava","sourceNew":"  private void readField(StoredFieldVisitor visitor, FieldInfo info, int bits) throws IOException {\n    final int numeric = bits & Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_MASK;\n    if (numeric != 0) {\n      switch(numeric) {\n        case Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_INT:\n          visitor.intField(info, fieldsStream.readInt());\n          return;\n        case Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_LONG:\n          visitor.longField(info, fieldsStream.readLong());\n          return;\n        case Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_FLOAT:\n          visitor.floatField(info, Float.intBitsToFloat(fieldsStream.readInt()));\n          return;\n        case Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_DOUBLE:\n          visitor.doubleField(info, Double.longBitsToDouble(fieldsStream.readLong()));\n          return;\n        default:\n          throw new CorruptIndexException(\"Invalid numeric type: \" + Integer.toHexString(numeric));\n      }\n    } else { \n      final int length = fieldsStream.readVInt();\n      byte bytes[] = new byte[length];\n      fieldsStream.readBytes(bytes, 0, length);\n      if ((bits & Lucene40StoredFieldsWriter.FIELD_IS_BINARY) != 0) {\n        visitor.binaryField(info, bytes, 0, bytes.length);\n      } else {\n        visitor.stringField(info, new String(bytes, 0, bytes.length, IOUtils.CHARSET_UTF_8));\n      }\n    }\n  }\n\n","sourceOld":"  private void readField(StoredFieldVisitor visitor, FieldInfo info, int bits) throws IOException {\n    final int numeric = bits & Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_MASK;\n    if (numeric != 0) {\n      switch(numeric) {\n        case Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_INT:\n          visitor.intField(info, fieldsStream.readInt());\n          return;\n        case Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_LONG:\n          visitor.longField(info, fieldsStream.readLong());\n          return;\n        case Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_FLOAT:\n          visitor.floatField(info, Float.intBitsToFloat(fieldsStream.readInt()));\n          return;\n        case Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_DOUBLE:\n          visitor.doubleField(info, Double.longBitsToDouble(fieldsStream.readLong()));\n          return;\n        default:\n          throw new CorruptIndexException(\"Invalid numeric type: \" + Integer.toHexString(numeric));\n      }\n    } else { \n      final int length = fieldsStream.readVInt();\n      byte bytes[] = new byte[length];\n      fieldsStream.readBytes(bytes, 0, length);\n      if ((bits & Lucene40StoredFieldsWriter.FIELD_IS_BINARY) != 0) {\n        visitor.binaryField(info, bytes, 0, bytes.length);\n      } else {\n        visitor.stringField(info, new String(bytes, 0, bytes.length, IOUtils.CHARSET_UTF_8));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32e43f282bea25b8cc26e4a842d98deafd617e9b","date":1337759516,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#readField(StoredFieldVisitor,FieldInfo,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#readField(StoredFieldVisitor,FieldInfo,int).mjava","sourceNew":"  private void readField(StoredFieldVisitor visitor, FieldInfo info, int bits) throws IOException {\n    final int numeric = bits & FIELD_IS_NUMERIC_MASK;\n    if (numeric != 0) {\n      switch(numeric) {\n        case FIELD_IS_NUMERIC_INT:\n          visitor.intField(info, fieldsStream.readInt());\n          return;\n        case FIELD_IS_NUMERIC_LONG:\n          visitor.longField(info, fieldsStream.readLong());\n          return;\n        case FIELD_IS_NUMERIC_FLOAT:\n          visitor.floatField(info, Float.intBitsToFloat(fieldsStream.readInt()));\n          return;\n        case FIELD_IS_NUMERIC_DOUBLE:\n          visitor.doubleField(info, Double.longBitsToDouble(fieldsStream.readLong()));\n          return;\n        default:\n          throw new CorruptIndexException(\"Invalid numeric type: \" + Integer.toHexString(numeric));\n      }\n    } else { \n      final int length = fieldsStream.readVInt();\n      byte bytes[] = new byte[length];\n      fieldsStream.readBytes(bytes, 0, length);\n      if ((bits & FIELD_IS_BINARY) != 0) {\n        visitor.binaryField(info, bytes, 0, bytes.length);\n      } else {\n        visitor.stringField(info, new String(bytes, 0, bytes.length, IOUtils.CHARSET_UTF_8));\n      }\n    }\n  }\n\n","sourceOld":"  private void readField(StoredFieldVisitor visitor, FieldInfo info, int bits) throws IOException {\n    final int numeric = bits & Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_MASK;\n    if (numeric != 0) {\n      switch(numeric) {\n        case Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_INT:\n          visitor.intField(info, fieldsStream.readInt());\n          return;\n        case Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_LONG:\n          visitor.longField(info, fieldsStream.readLong());\n          return;\n        case Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_FLOAT:\n          visitor.floatField(info, Float.intBitsToFloat(fieldsStream.readInt()));\n          return;\n        case Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_DOUBLE:\n          visitor.doubleField(info, Double.longBitsToDouble(fieldsStream.readLong()));\n          return;\n        default:\n          throw new CorruptIndexException(\"Invalid numeric type: \" + Integer.toHexString(numeric));\n      }\n    } else { \n      final int length = fieldsStream.readVInt();\n      byte bytes[] = new byte[length];\n      fieldsStream.readBytes(bytes, 0, length);\n      if ((bits & Lucene40StoredFieldsWriter.FIELD_IS_BINARY) != 0) {\n        visitor.binaryField(info, bytes, 0, bytes.length);\n      } else {\n        visitor.stringField(info, new String(bytes, 0, bytes.length, IOUtils.CHARSET_UTF_8));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3599646b4d4c346cf74d334813488b8b337b5bf5","date":1337790261,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#readField(StoredFieldVisitor,FieldInfo,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#readField(StoredFieldVisitor,FieldInfo,int).mjava","sourceNew":"  private void readField(StoredFieldVisitor visitor, FieldInfo info, int bits) throws IOException {\n    final int numeric = bits & FIELD_IS_NUMERIC_MASK;\n    if (numeric != 0) {\n      switch(numeric) {\n        case FIELD_IS_NUMERIC_INT:\n          visitor.intField(info, fieldsStream.readInt());\n          return;\n        case FIELD_IS_NUMERIC_LONG:\n          visitor.longField(info, fieldsStream.readLong());\n          return;\n        case FIELD_IS_NUMERIC_FLOAT:\n          visitor.floatField(info, Float.intBitsToFloat(fieldsStream.readInt()));\n          return;\n        case FIELD_IS_NUMERIC_DOUBLE:\n          visitor.doubleField(info, Double.longBitsToDouble(fieldsStream.readLong()));\n          return;\n        default:\n          throw new CorruptIndexException(\"Invalid numeric type: \" + Integer.toHexString(numeric));\n      }\n    } else { \n      final int length = fieldsStream.readVInt();\n      byte bytes[] = new byte[length];\n      fieldsStream.readBytes(bytes, 0, length);\n      if ((bits & FIELD_IS_BINARY) != 0) {\n        visitor.binaryField(info, bytes, 0, bytes.length);\n      } else {\n        visitor.stringField(info, new String(bytes, 0, bytes.length, IOUtils.CHARSET_UTF_8));\n      }\n    }\n  }\n\n","sourceOld":"  private void readField(StoredFieldVisitor visitor, FieldInfo info, int bits) throws IOException {\n    final int numeric = bits & Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_MASK;\n    if (numeric != 0) {\n      switch(numeric) {\n        case Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_INT:\n          visitor.intField(info, fieldsStream.readInt());\n          return;\n        case Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_LONG:\n          visitor.longField(info, fieldsStream.readLong());\n          return;\n        case Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_FLOAT:\n          visitor.floatField(info, Float.intBitsToFloat(fieldsStream.readInt()));\n          return;\n        case Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_DOUBLE:\n          visitor.doubleField(info, Double.longBitsToDouble(fieldsStream.readLong()));\n          return;\n        default:\n          throw new CorruptIndexException(\"Invalid numeric type: \" + Integer.toHexString(numeric));\n      }\n    } else { \n      final int length = fieldsStream.readVInt();\n      byte bytes[] = new byte[length];\n      fieldsStream.readBytes(bytes, 0, length);\n      if ((bits & Lucene40StoredFieldsWriter.FIELD_IS_BINARY) != 0) {\n        visitor.binaryField(info, bytes, 0, bytes.length);\n      } else {\n        visitor.stringField(info, new String(bytes, 0, bytes.length, IOUtils.CHARSET_UTF_8));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560e2ea4254f72003898bd4d74a0971828130864","date":1348686997,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#readField(StoredFieldVisitor,FieldInfo,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#readField(StoredFieldVisitor,FieldInfo,int).mjava","sourceNew":"  private void readField(StoredFieldVisitor visitor, FieldInfo info, int bits) throws IOException {\n    final int numeric = bits & FIELD_IS_NUMERIC_MASK;\n    if (numeric != 0) {\n      switch(numeric) {\n        case FIELD_IS_NUMERIC_INT:\n          visitor.intField(info, fieldsStream.readInt());\n          return;\n        case FIELD_IS_NUMERIC_LONG:\n          visitor.longField(info, fieldsStream.readLong());\n          return;\n        case FIELD_IS_NUMERIC_FLOAT:\n          visitor.floatField(info, Float.intBitsToFloat(fieldsStream.readInt()));\n          return;\n        case FIELD_IS_NUMERIC_DOUBLE:\n          visitor.doubleField(info, Double.longBitsToDouble(fieldsStream.readLong()));\n          return;\n        default:\n          throw new CorruptIndexException(\"Invalid numeric type: \" + Integer.toHexString(numeric));\n      }\n    } else { \n      final int length = fieldsStream.readVInt();\n      byte bytes[] = new byte[length];\n      fieldsStream.readBytes(bytes, 0, length);\n      if ((bits & FIELD_IS_BINARY) != 0) {\n        visitor.binaryField(info, bytes);\n      } else {\n        visitor.stringField(info, new String(bytes, 0, bytes.length, IOUtils.CHARSET_UTF_8));\n      }\n    }\n  }\n\n","sourceOld":"  private void readField(StoredFieldVisitor visitor, FieldInfo info, int bits) throws IOException {\n    final int numeric = bits & FIELD_IS_NUMERIC_MASK;\n    if (numeric != 0) {\n      switch(numeric) {\n        case FIELD_IS_NUMERIC_INT:\n          visitor.intField(info, fieldsStream.readInt());\n          return;\n        case FIELD_IS_NUMERIC_LONG:\n          visitor.longField(info, fieldsStream.readLong());\n          return;\n        case FIELD_IS_NUMERIC_FLOAT:\n          visitor.floatField(info, Float.intBitsToFloat(fieldsStream.readInt()));\n          return;\n        case FIELD_IS_NUMERIC_DOUBLE:\n          visitor.doubleField(info, Double.longBitsToDouble(fieldsStream.readLong()));\n          return;\n        default:\n          throw new CorruptIndexException(\"Invalid numeric type: \" + Integer.toHexString(numeric));\n      }\n    } else { \n      final int length = fieldsStream.readVInt();\n      byte bytes[] = new byte[length];\n      fieldsStream.readBytes(bytes, 0, length);\n      if ((bits & FIELD_IS_BINARY) != 0) {\n        visitor.binaryField(info, bytes, 0, bytes.length);\n      } else {\n        visitor.stringField(info, new String(bytes, 0, bytes.length, IOUtils.CHARSET_UTF_8));\n      }\n    }\n  }\n\n","bugFix":["06584e6e98d592b34e1329b384182f368d2025e8"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#readField(StoredFieldVisitor,FieldInfo,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#readField(StoredFieldVisitor,FieldInfo,int).mjava","sourceNew":"  private void readField(StoredFieldVisitor visitor, FieldInfo info, int bits) throws IOException {\n    final int numeric = bits & FIELD_IS_NUMERIC_MASK;\n    if (numeric != 0) {\n      switch(numeric) {\n        case FIELD_IS_NUMERIC_INT:\n          visitor.intField(info, fieldsStream.readInt());\n          return;\n        case FIELD_IS_NUMERIC_LONG:\n          visitor.longField(info, fieldsStream.readLong());\n          return;\n        case FIELD_IS_NUMERIC_FLOAT:\n          visitor.floatField(info, Float.intBitsToFloat(fieldsStream.readInt()));\n          return;\n        case FIELD_IS_NUMERIC_DOUBLE:\n          visitor.doubleField(info, Double.longBitsToDouble(fieldsStream.readLong()));\n          return;\n        default:\n          throw new CorruptIndexException(\"Invalid numeric type: \" + Integer.toHexString(numeric));\n      }\n    } else { \n      final int length = fieldsStream.readVInt();\n      byte bytes[] = new byte[length];\n      fieldsStream.readBytes(bytes, 0, length);\n      if ((bits & FIELD_IS_BINARY) != 0) {\n        visitor.binaryField(info, bytes);\n      } else {\n        visitor.stringField(info, new String(bytes, 0, bytes.length, StandardCharsets.UTF_8));\n      }\n    }\n  }\n\n","sourceOld":"  private void readField(StoredFieldVisitor visitor, FieldInfo info, int bits) throws IOException {\n    final int numeric = bits & FIELD_IS_NUMERIC_MASK;\n    if (numeric != 0) {\n      switch(numeric) {\n        case FIELD_IS_NUMERIC_INT:\n          visitor.intField(info, fieldsStream.readInt());\n          return;\n        case FIELD_IS_NUMERIC_LONG:\n          visitor.longField(info, fieldsStream.readLong());\n          return;\n        case FIELD_IS_NUMERIC_FLOAT:\n          visitor.floatField(info, Float.intBitsToFloat(fieldsStream.readInt()));\n          return;\n        case FIELD_IS_NUMERIC_DOUBLE:\n          visitor.doubleField(info, Double.longBitsToDouble(fieldsStream.readLong()));\n          return;\n        default:\n          throw new CorruptIndexException(\"Invalid numeric type: \" + Integer.toHexString(numeric));\n      }\n    } else { \n      final int length = fieldsStream.readVInt();\n      byte bytes[] = new byte[length];\n      fieldsStream.readBytes(bytes, 0, length);\n      if ((bits & FIELD_IS_BINARY) != 0) {\n        visitor.binaryField(info, bytes);\n      } else {\n        visitor.stringField(info, new String(bytes, 0, bytes.length, IOUtils.CHARSET_UTF_8));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#readField(StoredFieldVisitor,FieldInfo,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#readField(StoredFieldVisitor,FieldInfo,int).mjava","sourceNew":"  private void readField(StoredFieldVisitor visitor, FieldInfo info, int bits) throws IOException {\n    final int numeric = bits & FIELD_IS_NUMERIC_MASK;\n    if (numeric != 0) {\n      switch(numeric) {\n        case FIELD_IS_NUMERIC_INT:\n          visitor.intField(info, fieldsStream.readInt());\n          return;\n        case FIELD_IS_NUMERIC_LONG:\n          visitor.longField(info, fieldsStream.readLong());\n          return;\n        case FIELD_IS_NUMERIC_FLOAT:\n          visitor.floatField(info, Float.intBitsToFloat(fieldsStream.readInt()));\n          return;\n        case FIELD_IS_NUMERIC_DOUBLE:\n          visitor.doubleField(info, Double.longBitsToDouble(fieldsStream.readLong()));\n          return;\n        default:\n          throw new CorruptIndexException(\"Invalid numeric type: \" + Integer.toHexString(numeric));\n      }\n    } else { \n      final int length = fieldsStream.readVInt();\n      byte bytes[] = new byte[length];\n      fieldsStream.readBytes(bytes, 0, length);\n      if ((bits & FIELD_IS_BINARY) != 0) {\n        visitor.binaryField(info, bytes);\n      } else {\n        visitor.stringField(info, new String(bytes, 0, bytes.length, StandardCharsets.UTF_8));\n      }\n    }\n  }\n\n","sourceOld":"  private void readField(StoredFieldVisitor visitor, FieldInfo info, int bits) throws IOException {\n    final int numeric = bits & FIELD_IS_NUMERIC_MASK;\n    if (numeric != 0) {\n      switch(numeric) {\n        case FIELD_IS_NUMERIC_INT:\n          visitor.intField(info, fieldsStream.readInt());\n          return;\n        case FIELD_IS_NUMERIC_LONG:\n          visitor.longField(info, fieldsStream.readLong());\n          return;\n        case FIELD_IS_NUMERIC_FLOAT:\n          visitor.floatField(info, Float.intBitsToFloat(fieldsStream.readInt()));\n          return;\n        case FIELD_IS_NUMERIC_DOUBLE:\n          visitor.doubleField(info, Double.longBitsToDouble(fieldsStream.readLong()));\n          return;\n        default:\n          throw new CorruptIndexException(\"Invalid numeric type: \" + Integer.toHexString(numeric));\n      }\n    } else { \n      final int length = fieldsStream.readVInt();\n      byte bytes[] = new byte[length];\n      fieldsStream.readBytes(bytes, 0, length);\n      if ((bits & FIELD_IS_BINARY) != 0) {\n        visitor.binaryField(info, bytes);\n      } else {\n        visitor.stringField(info, new String(bytes, 0, bytes.length, IOUtils.CHARSET_UTF_8));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#readField(StoredFieldVisitor,FieldInfo,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#readField(StoredFieldVisitor,FieldInfo,int).mjava","sourceNew":"  private void readField(StoredFieldVisitor visitor, FieldInfo info, int bits) throws IOException {\n    final int numeric = bits & FIELD_IS_NUMERIC_MASK;\n    if (numeric != 0) {\n      switch(numeric) {\n        case FIELD_IS_NUMERIC_INT:\n          visitor.intField(info, fieldsStream.readInt());\n          return;\n        case FIELD_IS_NUMERIC_LONG:\n          visitor.longField(info, fieldsStream.readLong());\n          return;\n        case FIELD_IS_NUMERIC_FLOAT:\n          visitor.floatField(info, Float.intBitsToFloat(fieldsStream.readInt()));\n          return;\n        case FIELD_IS_NUMERIC_DOUBLE:\n          visitor.doubleField(info, Double.longBitsToDouble(fieldsStream.readLong()));\n          return;\n        default:\n          throw new CorruptIndexException(\"Invalid numeric type: \" + Integer.toHexString(numeric));\n      }\n    } else { \n      final int length = fieldsStream.readVInt();\n      byte bytes[] = new byte[length];\n      fieldsStream.readBytes(bytes, 0, length);\n      if ((bits & FIELD_IS_BINARY) != 0) {\n        visitor.binaryField(info, bytes);\n      } else {\n        visitor.stringField(info, new String(bytes, 0, bytes.length, StandardCharsets.UTF_8));\n      }\n    }\n  }\n\n","sourceOld":"  private void readField(StoredFieldVisitor visitor, FieldInfo info, int bits) throws IOException {\n    final int numeric = bits & FIELD_IS_NUMERIC_MASK;\n    if (numeric != 0) {\n      switch(numeric) {\n        case FIELD_IS_NUMERIC_INT:\n          visitor.intField(info, fieldsStream.readInt());\n          return;\n        case FIELD_IS_NUMERIC_LONG:\n          visitor.longField(info, fieldsStream.readLong());\n          return;\n        case FIELD_IS_NUMERIC_FLOAT:\n          visitor.floatField(info, Float.intBitsToFloat(fieldsStream.readInt()));\n          return;\n        case FIELD_IS_NUMERIC_DOUBLE:\n          visitor.doubleField(info, Double.longBitsToDouble(fieldsStream.readLong()));\n          return;\n        default:\n          throw new CorruptIndexException(\"Invalid numeric type: \" + Integer.toHexString(numeric));\n      }\n    } else { \n      final int length = fieldsStream.readVInt();\n      byte bytes[] = new byte[length];\n      fieldsStream.readBytes(bytes, 0, length);\n      if ((bits & FIELD_IS_BINARY) != 0) {\n        visitor.binaryField(info, bytes);\n      } else {\n        visitor.stringField(info, new String(bytes, 0, bytes.length, StandardCharsets.UTF_8));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#readField(StoredFieldVisitor,FieldInfo,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#readField(StoredFieldVisitor,FieldInfo,int).mjava","sourceNew":"  private void readField(StoredFieldVisitor visitor, FieldInfo info, int bits) throws IOException {\n    final int numeric = bits & FIELD_IS_NUMERIC_MASK;\n    if (numeric != 0) {\n      switch(numeric) {\n        case FIELD_IS_NUMERIC_INT:\n          visitor.intField(info, fieldsStream.readInt());\n          return;\n        case FIELD_IS_NUMERIC_LONG:\n          visitor.longField(info, fieldsStream.readLong());\n          return;\n        case FIELD_IS_NUMERIC_FLOAT:\n          visitor.floatField(info, Float.intBitsToFloat(fieldsStream.readInt()));\n          return;\n        case FIELD_IS_NUMERIC_DOUBLE:\n          visitor.doubleField(info, Double.longBitsToDouble(fieldsStream.readLong()));\n          return;\n        default:\n          throw new CorruptIndexException(\"Invalid numeric type: \" + Integer.toHexString(numeric));\n      }\n    } else { \n      final int length = fieldsStream.readVInt();\n      byte bytes[] = new byte[length];\n      fieldsStream.readBytes(bytes, 0, length);\n      if ((bits & FIELD_IS_BINARY) != 0) {\n        visitor.binaryField(info, bytes);\n      } else {\n        visitor.stringField(info, new String(bytes, 0, bytes.length, StandardCharsets.UTF_8));\n      }\n    }\n  }\n\n","sourceOld":"  private void readField(StoredFieldVisitor visitor, FieldInfo info, int bits) throws IOException {\n    final int numeric = bits & FIELD_IS_NUMERIC_MASK;\n    if (numeric != 0) {\n      switch(numeric) {\n        case FIELD_IS_NUMERIC_INT:\n          visitor.intField(info, fieldsStream.readInt());\n          return;\n        case FIELD_IS_NUMERIC_LONG:\n          visitor.longField(info, fieldsStream.readLong());\n          return;\n        case FIELD_IS_NUMERIC_FLOAT:\n          visitor.floatField(info, Float.intBitsToFloat(fieldsStream.readInt()));\n          return;\n        case FIELD_IS_NUMERIC_DOUBLE:\n          visitor.doubleField(info, Double.longBitsToDouble(fieldsStream.readLong()));\n          return;\n        default:\n          throw new CorruptIndexException(\"Invalid numeric type: \" + Integer.toHexString(numeric));\n      }\n    } else { \n      final int length = fieldsStream.readVInt();\n      byte bytes[] = new byte[length];\n      fieldsStream.readBytes(bytes, 0, length);\n      if ((bits & FIELD_IS_BINARY) != 0) {\n        visitor.binaryField(info, bytes);\n      } else {\n        visitor.stringField(info, new String(bytes, 0, bytes.length, StandardCharsets.UTF_8));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["560e2ea4254f72003898bd4d74a0971828130864","7d89d7e4e5101347833eea558851bf4209218619"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["7d89d7e4e5101347833eea558851bf4209218619"],"3599646b4d4c346cf74d334813488b8b337b5bf5":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","32e43f282bea25b8cc26e4a842d98deafd617e9b"],"32e43f282bea25b8cc26e4a842d98deafd617e9b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7d89d7e4e5101347833eea558851bf4209218619":["560e2ea4254f72003898bd4d74a0971828130864"],"560e2ea4254f72003898bd4d74a0971828130864":["32e43f282bea25b8cc26e4a842d98deafd617e9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["7d89d7e4e5101347833eea558851bf4209218619","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3599646b4d4c346cf74d334813488b8b337b5bf5","32e43f282bea25b8cc26e4a842d98deafd617e9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"3599646b4d4c346cf74d334813488b8b337b5bf5":[],"32e43f282bea25b8cc26e4a842d98deafd617e9b":["3599646b4d4c346cf74d334813488b8b337b5bf5","560e2ea4254f72003898bd4d74a0971828130864"],"560e2ea4254f72003898bd4d74a0971828130864":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","3599646b4d4c346cf74d334813488b8b337b5bf5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}