{"path":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchWithLeaderUrl().mjava","commits":[{"id":"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e","date":1596664368,"type":0,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexFetchWithLeaderUrl().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void doTestIndexFetchWithLeaderUrl() throws Exception {\n    //change solrconfig on follower\n    //this has no entry for pollinginterval\n    follower.setTestPort(leaderJetty.getLocalPort());\n    follower.copyConfigFile(CONF_DIR + \"solrconfig-follower1.xml\", \"solrconfig.xml\");\n    followerJetty.stop();\n    followerJetty = createAndStartJetty(follower);\n    followerClient.close();\n    followerClient = createNewSolrClient(followerJetty.getLocalPort());\n\n    leaderClient.deleteByQuery(\"*:*\");\n    followerClient.deleteByQuery(\"*:*\");\n    followerClient.commit();\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(leaderClient, \"id\", i, \"name\", \"name = \" + i);\n\n    // make sure prepareCommit doesn't mess up commit  (SOLR-3938)\n    \n    // todo: make SolrJ easier to pass arbitrary params to\n    // TODO: precommit WILL screw with the rest of this test\n\n    leaderClient.commit();\n\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList leaderQueryRsp = rQuery(nDocs, \"*:*\", leaderClient);\n    SolrDocumentList leaderQueryResult = (SolrDocumentList) leaderQueryRsp.get(\"response\");\n    assertEquals(nDocs, leaderQueryResult.getNumFound());\n    \n    String urlKey = \"leaderUrl\";\n    if (useLegacyParams) {\n      urlKey = \"masterUrl\";\n    }\n\n    // index fetch\n    String leaderUrl = buildUrl(followerJetty.getLocalPort()) + \"/\" + DEFAULT_TEST_CORENAME + ReplicationHandler.PATH+\"?command=fetchindex&\" + urlKey + \"=\";\n    leaderUrl += buildUrl(leaderJetty.getLocalPort()) + \"/\" + DEFAULT_TEST_CORENAME + ReplicationHandler.PATH;\n    URL url = new URL(leaderUrl);\n    InputStream stream = url.openStream();\n    stream.close();\n    \n    //get docs from follower and check if number is equal to leader\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList followerQueryRsp = rQuery(nDocs, \"*:*\", followerClient);\n    SolrDocumentList followerQueryResult = (SolrDocumentList) followerQueryRsp.get(\"response\");\n    assertEquals(nDocs, followerQueryResult.getNumFound());\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(leaderQueryResult, followerQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // index fetch from the follower to the leader\n    \n    for (int i = nDocs; i < nDocs + 3; i++)\n      index(followerClient, \"id\", i, \"name\", \"name = \" + i);\n\n    followerClient.commit();\n    \n    pullFromFollowerToLeader();\n    rQuery(nDocs + 3, \"*:*\", leaderClient);\n    \n    //get docs from follower and check if number is equal to leader\n    followerQueryRsp = rQuery(nDocs + 3, \"*:*\", followerClient);\n    followerQueryResult = (SolrDocumentList) followerQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, followerQueryResult.getNumFound());\n    //compare results\n    leaderQueryRsp = rQuery(nDocs + 3, \"*:*\", leaderClient);\n    leaderQueryResult = (SolrDocumentList) leaderQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(leaderQueryResult, followerQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    assertVersions(leaderClient, followerClient);\n    \n    pullFromFollowerToLeader();\n    \n    //get docs from follower and check if number is equal to leader\n    followerQueryRsp = rQuery(nDocs + 3, \"*:*\", followerClient);\n    followerQueryResult = (SolrDocumentList) followerQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, followerQueryResult.getNumFound());\n    //compare results\n    leaderQueryRsp = rQuery(nDocs + 3, \"*:*\", leaderClient);\n    leaderQueryResult = (SolrDocumentList) leaderQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(leaderQueryResult, followerQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(leaderClient, followerClient);\n    \n    // now force a new index directory\n    for (int i = nDocs + 3; i < nDocs + 7; i++)\n      index(leaderClient, \"id\", i, \"name\", \"name = \" + i);\n    \n    leaderClient.commit();\n    \n    pullFromFollowerToLeader();\n    rQuery((int) followerQueryResult.getNumFound(), \"*:*\", leaderClient);\n    \n    //get docs from follower and check if number is equal to leader\n    followerQueryRsp = rQuery(nDocs + 3, \"*:*\", followerClient);\n    followerQueryResult = (SolrDocumentList) followerQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, followerQueryResult.getNumFound());\n    //compare results\n    leaderQueryRsp = rQuery(nDocs + 3, \"*:*\", leaderClient);\n    leaderQueryResult = (SolrDocumentList) leaderQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(leaderQueryResult, followerQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(leaderClient, followerClient);\n    pullFromFollowerToLeader();\n    \n    //get docs from follower and check if number is equal to leader\n    followerQueryRsp = rQuery(nDocs + 3, \"*:*\", followerClient);\n    followerQueryResult = (SolrDocumentList) followerQueryRsp.get(\"response\");\n    assertEquals(nDocs + 3, followerQueryResult.getNumFound());\n    //compare results\n    leaderQueryRsp = rQuery(nDocs + 3, \"*:*\", leaderClient);\n    leaderQueryResult = (SolrDocumentList) leaderQueryRsp.get(\"response\");\n    cmp = BaseDistributedSearchTestCase.compare(leaderQueryResult, followerQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(leaderClient, followerClient);\n    \n    NamedList<Object> details = getDetails(leaderClient);\n   \n    details = getDetails(followerClient);\n    \n    checkForSingleIndex(leaderJetty);\n    checkForSingleIndex(followerJetty);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"]},"commit2Childs":{"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}