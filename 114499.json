{"path":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","commits":[{"id":"b3cefb552695b930cefe85eb7880cccdb914be6b","date":1275316631,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBasicSnapshots() throws Exception {\n    int numSnapshots = 3;\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n\n    // Create 3 snapshots: snapshot0, snapshot1, snapshot2\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(sdp));\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    \n    assertSnapshotExists(dir, sdp, numSnapshots);\n\n    // open a reader on a snapshot - should succeed.\n    IndexReader.open(sdp.getSnapshot(\"snapshot0\"), true).close();\n\n    // open a new IndexWriter w/ no snapshots to keep and assert that all snapshots are gone.\n    sdp = getDeletionPolicy();\n    writer = new IndexWriter(dir, getConfig(sdp));\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertEquals(\"no snapshots should exist\", 1, IndexReader.listCommits(dir).size());\n    \n    for (int i = 0; i < numSnapshots; i++) {\n      try {\n        sdp.getSnapshot(\"snapshot\" + i);\n        fail(\"snapshot shouldn't have existed, but did: snapshot\" + i);\n      } catch (IllegalStateException e) {\n        // expected - snapshot should not exist\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","sourceNew":"  @Test\n  public void testBasicSnapshots() throws Exception {\n    int numSnapshots = 3;\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    Random random = newRandom();\n    \n    // Create 3 snapshots: snapshot0, snapshot1, snapshot2\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    \n    assertSnapshotExists(dir, sdp, numSnapshots);\n\n    // open a reader on a snapshot - should succeed.\n    IndexReader.open(sdp.getSnapshot(\"snapshot0\"), true).close();\n\n    // open a new IndexWriter w/ no snapshots to keep and assert that all snapshots are gone.\n    sdp = getDeletionPolicy();\n    writer = new IndexWriter(dir, getConfig(random, sdp));\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertEquals(\"no snapshots should exist\", 1, IndexReader.listCommits(dir).size());\n    \n    for (int i = 0; i < numSnapshots; i++) {\n      try {\n        sdp.getSnapshot(\"snapshot\" + i);\n        fail(\"snapshot shouldn't have existed, but did: snapshot\" + i);\n      } catch (IllegalStateException e) {\n        // expected - snapshot should not exist\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBasicSnapshots() throws Exception {\n    int numSnapshots = 3;\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n\n    // Create 3 snapshots: snapshot0, snapshot1, snapshot2\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(sdp));\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    \n    assertSnapshotExists(dir, sdp, numSnapshots);\n\n    // open a reader on a snapshot - should succeed.\n    IndexReader.open(sdp.getSnapshot(\"snapshot0\"), true).close();\n\n    // open a new IndexWriter w/ no snapshots to keep and assert that all snapshots are gone.\n    sdp = getDeletionPolicy();\n    writer = new IndexWriter(dir, getConfig(sdp));\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertEquals(\"no snapshots should exist\", 1, IndexReader.listCommits(dir).size());\n    \n    for (int i = 0; i < numSnapshots; i++) {\n      try {\n        sdp.getSnapshot(\"snapshot\" + i);\n        fail(\"snapshot shouldn't have existed, but did: snapshot\" + i);\n      } catch (IllegalStateException e) {\n        // expected - snapshot should not exist\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","sourceNew":"  @Test\n  public void testBasicSnapshots() throws Exception {\n    int numSnapshots = 3;\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    \n    // Create 3 snapshots: snapshot0, snapshot1, snapshot2\n    Directory dir = newDirectory(random);\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    \n    assertSnapshotExists(dir, sdp, numSnapshots);\n\n    // open a reader on a snapshot - should succeed.\n    IndexReader.open(sdp.getSnapshot(\"snapshot0\"), true).close();\n\n    // open a new IndexWriter w/ no snapshots to keep and assert that all snapshots are gone.\n    sdp = getDeletionPolicy();\n    writer = new IndexWriter(dir, getConfig(random, sdp));\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertEquals(\"no snapshots should exist\", 1, IndexReader.listCommits(dir).size());\n    \n    for (int i = 0; i < numSnapshots; i++) {\n      try {\n        sdp.getSnapshot(\"snapshot\" + i);\n        fail(\"snapshot shouldn't have existed, but did: snapshot\" + i);\n      } catch (IllegalStateException e) {\n        // expected - snapshot should not exist\n      }\n    }\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBasicSnapshots() throws Exception {\n    int numSnapshots = 3;\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    Random random = newRandom();\n    \n    // Create 3 snapshots: snapshot0, snapshot1, snapshot2\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    \n    assertSnapshotExists(dir, sdp, numSnapshots);\n\n    // open a reader on a snapshot - should succeed.\n    IndexReader.open(sdp.getSnapshot(\"snapshot0\"), true).close();\n\n    // open a new IndexWriter w/ no snapshots to keep and assert that all snapshots are gone.\n    sdp = getDeletionPolicy();\n    writer = new IndexWriter(dir, getConfig(random, sdp));\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertEquals(\"no snapshots should exist\", 1, IndexReader.listCommits(dir).size());\n    \n    for (int i = 0; i < numSnapshots; i++) {\n      try {\n        sdp.getSnapshot(\"snapshot\" + i);\n        fail(\"snapshot shouldn't have existed, but did: snapshot\" + i);\n      } catch (IllegalStateException e) {\n        // expected - snapshot should not exist\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","sourceNew":"  @Test\n  public void testBasicSnapshots() throws Exception {\n    int numSnapshots = 3;\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    \n    // Create 3 snapshots: snapshot0, snapshot1, snapshot2\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    \n    assertSnapshotExists(dir, sdp, numSnapshots);\n\n    // open a reader on a snapshot - should succeed.\n    IndexReader.open(sdp.getSnapshot(\"snapshot0\"), true).close();\n\n    // open a new IndexWriter w/ no snapshots to keep and assert that all snapshots are gone.\n    sdp = getDeletionPolicy();\n    writer = new IndexWriter(dir, getConfig(random, sdp));\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertEquals(\"no snapshots should exist\", 1, IndexReader.listCommits(dir).size());\n    \n    for (int i = 0; i < numSnapshots; i++) {\n      try {\n        sdp.getSnapshot(\"snapshot\" + i);\n        fail(\"snapshot shouldn't have existed, but did: snapshot\" + i);\n      } catch (IllegalStateException e) {\n        // expected - snapshot should not exist\n      }\n    }\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBasicSnapshots() throws Exception {\n    int numSnapshots = 3;\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    \n    // Create 3 snapshots: snapshot0, snapshot1, snapshot2\n    Directory dir = newDirectory(random);\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    \n    assertSnapshotExists(dir, sdp, numSnapshots);\n\n    // open a reader on a snapshot - should succeed.\n    IndexReader.open(sdp.getSnapshot(\"snapshot0\"), true).close();\n\n    // open a new IndexWriter w/ no snapshots to keep and assert that all snapshots are gone.\n    sdp = getDeletionPolicy();\n    writer = new IndexWriter(dir, getConfig(random, sdp));\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertEquals(\"no snapshots should exist\", 1, IndexReader.listCommits(dir).size());\n    \n    for (int i = 0; i < numSnapshots; i++) {\n      try {\n        sdp.getSnapshot(\"snapshot\" + i);\n        fail(\"snapshot shouldn't have existed, but did: snapshot\" + i);\n      } catch (IllegalStateException e) {\n        // expected - snapshot should not exist\n      }\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","sourceNew":"  @Test\n  public void testBasicSnapshots() throws Exception {\n    int numSnapshots = 3;\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    \n    // Create 3 snapshots: snapshot0, snapshot1, snapshot2\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    \n    assertSnapshotExists(dir, sdp, numSnapshots);\n\n    // open a reader on a snapshot - should succeed.\n    IndexReader.open(sdp.getSnapshot(\"snapshot0\"), true).close();\n\n    // open a new IndexWriter w/ no snapshots to keep and assert that all snapshots are gone.\n    sdp = getDeletionPolicy();\n    writer = new IndexWriter(dir, getConfig(random, sdp));\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertEquals(\"no snapshots should exist\", 1, IndexReader.listCommits(dir).size());\n    \n    for (int i = 0; i < numSnapshots; i++) {\n      try {\n        sdp.getSnapshot(\"snapshot\" + i);\n        fail(\"snapshot shouldn't have existed, but did: snapshot\" + i);\n      } catch (IllegalStateException e) {\n        // expected - snapshot should not exist\n      }\n    }\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBasicSnapshots() throws Exception {\n    int numSnapshots = 3;\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n\n    // Create 3 snapshots: snapshot0, snapshot1, snapshot2\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(sdp));\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    \n    assertSnapshotExists(dir, sdp, numSnapshots);\n\n    // open a reader on a snapshot - should succeed.\n    IndexReader.open(sdp.getSnapshot(\"snapshot0\"), true).close();\n\n    // open a new IndexWriter w/ no snapshots to keep and assert that all snapshots are gone.\n    sdp = getDeletionPolicy();\n    writer = new IndexWriter(dir, getConfig(sdp));\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertEquals(\"no snapshots should exist\", 1, IndexReader.listCommits(dir).size());\n    \n    for (int i = 0; i < numSnapshots; i++) {\n      try {\n        sdp.getSnapshot(\"snapshot\" + i);\n        fail(\"snapshot shouldn't have existed, but did: snapshot\" + i);\n      } catch (IllegalStateException e) {\n        // expected - snapshot should not exist\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","sourceNew":"  @Test\n  public void testBasicSnapshots() throws Exception {\n    int numSnapshots = 3;\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    \n    // Create 3 snapshots: snapshot0, snapshot1, snapshot2\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    \n    assertSnapshotExists(dir, sdp, numSnapshots);\n\n    // open a reader on a snapshot - should succeed.\n    IndexReader.open(sdp.getSnapshot(\"snapshot0\")).close();\n\n    // open a new IndexWriter w/ no snapshots to keep and assert that all snapshots are gone.\n    sdp = getDeletionPolicy();\n    writer = new IndexWriter(dir, getConfig(random, sdp));\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertEquals(\"no snapshots should exist\", 1, IndexReader.listCommits(dir).size());\n    \n    for (int i = 0; i < numSnapshots; i++) {\n      try {\n        sdp.getSnapshot(\"snapshot\" + i);\n        fail(\"snapshot shouldn't have existed, but did: snapshot\" + i);\n      } catch (IllegalStateException e) {\n        // expected - snapshot should not exist\n      }\n    }\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBasicSnapshots() throws Exception {\n    int numSnapshots = 3;\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    \n    // Create 3 snapshots: snapshot0, snapshot1, snapshot2\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    \n    assertSnapshotExists(dir, sdp, numSnapshots);\n\n    // open a reader on a snapshot - should succeed.\n    IndexReader.open(sdp.getSnapshot(\"snapshot0\"), true).close();\n\n    // open a new IndexWriter w/ no snapshots to keep and assert that all snapshots are gone.\n    sdp = getDeletionPolicy();\n    writer = new IndexWriter(dir, getConfig(random, sdp));\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertEquals(\"no snapshots should exist\", 1, IndexReader.listCommits(dir).size());\n    \n    for (int i = 0; i < numSnapshots; i++) {\n      try {\n        sdp.getSnapshot(\"snapshot\" + i);\n        fail(\"snapshot shouldn't have existed, but did: snapshot\" + i);\n      } catch (IllegalStateException e) {\n        // expected - snapshot should not exist\n      }\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","sourceNew":"  @Test\n  public void testBasicSnapshots() throws Exception {\n    int numSnapshots = 3;\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    \n    // Create 3 snapshots: snapshot0, snapshot1, snapshot2\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    \n    assertSnapshotExists(dir, sdp, numSnapshots);\n\n    // open a reader on a snapshot - should succeed.\n    IndexReader.open(sdp.getSnapshot(\"snapshot0\")).close();\n\n    // open a new IndexWriter w/ no snapshots to keep and assert that all snapshots are gone.\n    sdp = getDeletionPolicy();\n    writer = new IndexWriter(dir, getConfig(random, sdp));\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertEquals(\"no snapshots should exist\", 1, IndexReader.listCommits(dir).size());\n    \n    for (int i = 0; i < numSnapshots; i++) {\n      try {\n        sdp.getSnapshot(\"snapshot\" + i);\n        fail(\"snapshot shouldn't have existed, but did: snapshot\" + i);\n      } catch (IllegalStateException e) {\n        // expected - snapshot should not exist\n      }\n    }\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBasicSnapshots() throws Exception {\n    int numSnapshots = 3;\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    \n    // Create 3 snapshots: snapshot0, snapshot1, snapshot2\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    \n    assertSnapshotExists(dir, sdp, numSnapshots);\n\n    // open a reader on a snapshot - should succeed.\n    IndexReader.open(sdp.getSnapshot(\"snapshot0\"), true).close();\n\n    // open a new IndexWriter w/ no snapshots to keep and assert that all snapshots are gone.\n    sdp = getDeletionPolicy();\n    writer = new IndexWriter(dir, getConfig(random, sdp));\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertEquals(\"no snapshots should exist\", 1, IndexReader.listCommits(dir).size());\n    \n    for (int i = 0; i < numSnapshots; i++) {\n      try {\n        sdp.getSnapshot(\"snapshot\" + i);\n        fail(\"snapshot shouldn't have existed, but did: snapshot\" + i);\n      } catch (IllegalStateException e) {\n        // expected - snapshot should not exist\n      }\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","sourceNew":"  @Test\n  public void testBasicSnapshots() throws Exception {\n    int numSnapshots = 3;\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    \n    // Create 3 snapshots: snapshot0, snapshot1, snapshot2\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    \n    assertSnapshotExists(dir, sdp, numSnapshots);\n\n    // open a reader on a snapshot - should succeed.\n    IndexReader.open(sdp.getSnapshot(\"snapshot0\")).close();\n\n    // open a new IndexWriter w/ no snapshots to keep and assert that all snapshots are gone.\n    sdp = getDeletionPolicy();\n    writer = new IndexWriter(dir, getConfig(random, sdp));\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertEquals(\"no snapshots should exist\", 1, IndexReader.listCommits(dir).size());\n    \n    for (int i = 0; i < numSnapshots; i++) {\n      try {\n        sdp.getSnapshot(\"snapshot\" + i);\n        fail(\"snapshot shouldn't have existed, but did: snapshot\" + i);\n      } catch (IllegalStateException e) {\n        // expected - snapshot should not exist\n      }\n    }\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBasicSnapshots() throws Exception {\n    int numSnapshots = 3;\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    \n    // Create 3 snapshots: snapshot0, snapshot1, snapshot2\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    \n    assertSnapshotExists(dir, sdp, numSnapshots);\n\n    // open a reader on a snapshot - should succeed.\n    IndexReader.open(sdp.getSnapshot(\"snapshot0\"), true).close();\n\n    // open a new IndexWriter w/ no snapshots to keep and assert that all snapshots are gone.\n    sdp = getDeletionPolicy();\n    writer = new IndexWriter(dir, getConfig(random, sdp));\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertEquals(\"no snapshots should exist\", 1, IndexReader.listCommits(dir).size());\n    \n    for (int i = 0; i < numSnapshots; i++) {\n      try {\n        sdp.getSnapshot(\"snapshot\" + i);\n        fail(\"snapshot shouldn't have existed, but did: snapshot\" + i);\n      } catch (IllegalStateException e) {\n        // expected - snapshot should not exist\n      }\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9172d6bebb12f0bba2ebb1756779c2f8948ab7e","date":1327848882,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","sourceNew":"  @Test\n  public void testBasicSnapshots() throws Exception {\n    int numSnapshots = 3;\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    \n    // Create 3 snapshots: snapshot0, snapshot1, snapshot2\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    \n    assertSnapshotExists(dir, sdp, numSnapshots);\n\n    // open a reader on a snapshot - should succeed.\n    IndexReader.open(sdp.getSnapshot(\"snapshot0\")).close();\n\n    // open a new IndexWriter w/ no snapshots to keep and assert that all snapshots are gone.\n    sdp = getDeletionPolicy();\n    writer = new IndexWriter(dir, getConfig(random, sdp));\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertEquals(\"no snapshots should exist\", 1, DirectoryReader.listCommits(dir).size());\n    \n    for (int i = 0; i < numSnapshots; i++) {\n      try {\n        sdp.getSnapshot(\"snapshot\" + i);\n        fail(\"snapshot shouldn't have existed, but did: snapshot\" + i);\n      } catch (IllegalStateException e) {\n        // expected - snapshot should not exist\n      }\n    }\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBasicSnapshots() throws Exception {\n    int numSnapshots = 3;\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    \n    // Create 3 snapshots: snapshot0, snapshot1, snapshot2\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    \n    assertSnapshotExists(dir, sdp, numSnapshots);\n\n    // open a reader on a snapshot - should succeed.\n    IndexReader.open(sdp.getSnapshot(\"snapshot0\")).close();\n\n    // open a new IndexWriter w/ no snapshots to keep and assert that all snapshots are gone.\n    sdp = getDeletionPolicy();\n    writer = new IndexWriter(dir, getConfig(random, sdp));\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertEquals(\"no snapshots should exist\", 1, IndexReader.listCommits(dir).size());\n    \n    for (int i = 0; i < numSnapshots; i++) {\n      try {\n        sdp.getSnapshot(\"snapshot\" + i);\n        fail(\"snapshot shouldn't have existed, but did: snapshot\" + i);\n      } catch (IllegalStateException e) {\n        // expected - snapshot should not exist\n      }\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","sourceNew":"  @Test\n  public void testBasicSnapshots() throws Exception {\n    int numSnapshots = 3;\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    \n    // Create 3 snapshots: snapshot0, snapshot1, snapshot2\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    \n    assertSnapshotExists(dir, sdp, numSnapshots);\n\n    // open a reader on a snapshot - should succeed.\n    IndexReader.open(sdp.getSnapshot(\"snapshot0\")).close();\n\n    // open a new IndexWriter w/ no snapshots to keep and assert that all snapshots are gone.\n    sdp = getDeletionPolicy();\n    writer = new IndexWriter(dir, getConfig(random, sdp));\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertEquals(\"no snapshots should exist\", 1, DirectoryReader.listCommits(dir).size());\n    \n    for (int i = 0; i < numSnapshots; i++) {\n      try {\n        sdp.getSnapshot(\"snapshot\" + i);\n        fail(\"snapshot shouldn't have existed, but did: snapshot\" + i);\n      } catch (IllegalStateException e) {\n        // expected - snapshot should not exist\n      }\n    }\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBasicSnapshots() throws Exception {\n    int numSnapshots = 3;\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    \n    // Create 3 snapshots: snapshot0, snapshot1, snapshot2\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    \n    assertSnapshotExists(dir, sdp, numSnapshots);\n\n    // open a reader on a snapshot - should succeed.\n    IndexReader.open(sdp.getSnapshot(\"snapshot0\")).close();\n\n    // open a new IndexWriter w/ no snapshots to keep and assert that all snapshots are gone.\n    sdp = getDeletionPolicy();\n    writer = new IndexWriter(dir, getConfig(random, sdp));\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertEquals(\"no snapshots should exist\", 1, IndexReader.listCommits(dir).size());\n    \n    for (int i = 0; i < numSnapshots; i++) {\n      try {\n        sdp.getSnapshot(\"snapshot\" + i);\n        fail(\"snapshot shouldn't have existed, but did: snapshot\" + i);\n      } catch (IllegalStateException e) {\n        // expected - snapshot should not exist\n      }\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#testBasicSnapshots().mjava","sourceNew":"  @Test\n  public void testBasicSnapshots() throws Exception {\n    int numSnapshots = 3;\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    \n    // Create 3 snapshots: snapshot0, snapshot1, snapshot2\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    \n    assertSnapshotExists(dir, sdp, numSnapshots);\n\n    // open a reader on a snapshot - should succeed.\n    IndexReader.open(sdp.getSnapshot(\"snapshot0\")).close();\n\n    // open a new IndexWriter w/ no snapshots to keep and assert that all snapshots are gone.\n    sdp = getDeletionPolicy();\n    writer = new IndexWriter(dir, getConfig(random, sdp));\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertEquals(\"no snapshots should exist\", 1, DirectoryReader.listCommits(dir).size());\n    \n    for (int i = 0; i < numSnapshots; i++) {\n      try {\n        sdp.getSnapshot(\"snapshot\" + i);\n        fail(\"snapshot shouldn't have existed, but did: snapshot\" + i);\n      } catch (IllegalStateException e) {\n        // expected - snapshot should not exist\n      }\n    }\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testBasicSnapshots() throws Exception {\n    int numSnapshots = 3;\n    SnapshotDeletionPolicy sdp = getDeletionPolicy();\n    \n    // Create 3 snapshots: snapshot0, snapshot1, snapshot2\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, getConfig(random, sdp));\n    prepareIndexAndSnapshots(sdp, writer, numSnapshots, \"snapshot\");\n    writer.close();\n    \n    assertSnapshotExists(dir, sdp, numSnapshots);\n\n    // open a reader on a snapshot - should succeed.\n    IndexReader.open(sdp.getSnapshot(\"snapshot0\")).close();\n\n    // open a new IndexWriter w/ no snapshots to keep and assert that all snapshots are gone.\n    sdp = getDeletionPolicy();\n    writer = new IndexWriter(dir, getConfig(random, sdp));\n    writer.deleteUnusedFiles();\n    writer.close();\n    assertEquals(\"no snapshots should exist\", 1, DirectoryReader.listCommits(dir).size());\n    \n    for (int i = 0; i < numSnapshots; i++) {\n      try {\n        sdp.getSnapshot(\"snapshot\" + i);\n        fail(\"snapshot shouldn't have existed, but did: snapshot\" + i);\n      } catch (IllegalStateException e) {\n        // expected - snapshot should not exist\n      }\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["1f653cfcf159baeaafe5d01682a911e95bba4012","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"f9172d6bebb12f0bba2ebb1756779c2f8948ab7e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"b3cefb552695b930cefe85eb7880cccdb914be6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["b3cefb552695b930cefe85eb7880cccdb914be6b","1f653cfcf159baeaafe5d01682a911e95bba4012"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3615ce4a1f785ae1b779244de52c6a7d99227e60","f9172d6bebb12f0bba2ebb1756779c2f8948ab7e"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["1f653cfcf159baeaafe5d01682a911e95bba4012","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["b3cefb552695b930cefe85eb7880cccdb914be6b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f9172d6bebb12f0bba2ebb1756779c2f8948ab7e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"b3cefb552695b930cefe85eb7880cccdb914be6b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b3cefb552695b930cefe85eb7880cccdb914be6b"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","f9172d6bebb12f0bba2ebb1756779c2f8948ab7e","5cab9a86bd67202d20b6adc463008c8e982b070a"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}