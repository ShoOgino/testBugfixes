{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeField1Dim(IndexOutput,String,MutablePointsReader).mjava","commits":[{"id":"d561885e9bb6238af1ff8afe8630dcfe49b66ac7","date":1469780634,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeField1Dim(IndexOutput,String,MutablePointsReader).mjava","pathOld":"/dev/null","sourceNew":"  /* In the 1D case, we can simply sort points in ascending order and use the\n   * same writing logic as we use at merge time. */\n  private long writeField1Dim(IndexOutput out, String fieldName, MutablePointsReader reader) throws IOException {\n    MutablePointsReaderUtils.sort(maxDoc, packedBytesLength, reader, 0, Math.toIntExact(reader.size(fieldName)));\n\n    final OneDimensionBKDWriter oneDimWriter = new OneDimensionBKDWriter(out);\n\n    reader.intersect(fieldName, new IntersectVisitor() {\n\n      @Override\n      public void visit(int docID, byte[] packedValue) throws IOException {\n        oneDimWriter.add(packedValue, docID);\n      }\n\n      @Override\n      public void visit(int docID) throws IOException {\n        throw new IllegalStateException();\n      }\n\n      @Override\n      public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n    });\n\n    return oneDimWriter.finish();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeField1Dim(IndexOutput,String,MutablePointsReader).mjava","pathOld":"/dev/null","sourceNew":"  /* In the 1D case, we can simply sort points in ascending order and use the\n   * same writing logic as we use at merge time. */\n  private long writeField1Dim(IndexOutput out, String fieldName, MutablePointsReader reader) throws IOException {\n    MutablePointsReaderUtils.sort(maxDoc, packedBytesLength, reader, 0, Math.toIntExact(reader.size(fieldName)));\n\n    final OneDimensionBKDWriter oneDimWriter = new OneDimensionBKDWriter(out);\n\n    reader.intersect(fieldName, new IntersectVisitor() {\n\n      @Override\n      public void visit(int docID, byte[] packedValue) throws IOException {\n        oneDimWriter.add(packedValue, docID);\n      }\n\n      @Override\n      public void visit(int docID) throws IOException {\n        throw new IllegalStateException();\n      }\n\n      @Override\n      public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n    });\n\n    return oneDimWriter.finish();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"367f57e2ee85b7f7e28cfe73370a22cf67624f65","date":1476778467,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeField1Dim(IndexOutput,String,MutablePointValues).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#writeField1Dim(IndexOutput,String,MutablePointsReader).mjava","sourceNew":"  /* In the 1D case, we can simply sort points in ascending order and use the\n   * same writing logic as we use at merge time. */\n  private long writeField1Dim(IndexOutput out, String fieldName, MutablePointValues reader) throws IOException {\n    MutablePointsReaderUtils.sort(maxDoc, packedBytesLength, reader, 0, Math.toIntExact(reader.size()));\n\n    final OneDimensionBKDWriter oneDimWriter = new OneDimensionBKDWriter(out);\n\n    reader.intersect(new IntersectVisitor() {\n\n      @Override\n      public void visit(int docID, byte[] packedValue) throws IOException {\n        oneDimWriter.add(packedValue, docID);\n      }\n\n      @Override\n      public void visit(int docID) throws IOException {\n        throw new IllegalStateException();\n      }\n\n      @Override\n      public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n    });\n\n    return oneDimWriter.finish();\n  }\n\n","sourceOld":"  /* In the 1D case, we can simply sort points in ascending order and use the\n   * same writing logic as we use at merge time. */\n  private long writeField1Dim(IndexOutput out, String fieldName, MutablePointsReader reader) throws IOException {\n    MutablePointsReaderUtils.sort(maxDoc, packedBytesLength, reader, 0, Math.toIntExact(reader.size(fieldName)));\n\n    final OneDimensionBKDWriter oneDimWriter = new OneDimensionBKDWriter(out);\n\n    reader.intersect(fieldName, new IntersectVisitor() {\n\n      @Override\n      public void visit(int docID, byte[] packedValue) throws IOException {\n        oneDimWriter.add(packedValue, docID);\n      }\n\n      @Override\n      public void visit(int docID) throws IOException {\n        throw new IllegalStateException();\n      }\n\n      @Override\n      public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n    });\n\n    return oneDimWriter.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["367f57e2ee85b7f7e28cfe73370a22cf67624f65"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["367f57e2ee85b7f7e28cfe73370a22cf67624f65","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}