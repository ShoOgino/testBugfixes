{"path":"lucene/core/src/test/org/apache/lucene/codecs/pfor/TestPForUtil#testAllDistribution().mjava","commits":[{"id":"5373bc7574123da55ae25e216b6d768ccb1dcd91","date":1342013351,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/pfor/TestPForUtil#testAllDistribution().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/pfor/TestPForUtil#tryAllDistribution().mjava","sourceNew":"  /**\n   * Test correctness of compressing and decompressing.\n   * Here we randomly assign a rate of exception (i.e. 1-alpha), \n   * and test different scale of normal/exception values.\n   */\n  public void testAllDistribution() throws Exception {\n    initRandom();\n    for (int i=0; i<=32; ++i) { // try to test every kinds of distribution\n      double alpha=gen.nextDouble(); // rate of normal value\n      for (int j=0; j<=32; ++j) {\n        tryDistribution(ForPostingsFormat.DEFAULT_BLOCK_SIZE,alpha,MASK[i],MASK[j]);\n      }\n    }\n  }\n\n","sourceOld":"  // Test correctness of compressing and decompressing\n  public void tryAllDistribution() throws Exception {\n    for (int i=0; i<=32; ++i) { // try to test every kinds of distribution\n      double alpha=gen.nextDouble(); // rate of normal value\n      for (int j=0; j<=32; ++j) {\n        tryDistribution(128,alpha,MASK[i],MASK[j]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48d40647dc87c7b55ffe4d9dca73f63a3cebc58b","date":1342134079,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/pfor/TestPForUtil#testAllDistribution().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/pfor/TestPForUtil#testAllDistribution().mjava","sourceNew":"  /**\n   * Test correctness of compressing and decompressing.\n   * Here we randomly assign a rate of exception (i.e. 1-alpha), \n   * and test different scale of normal/exception values.\n   */\n  public void testAllDistribution() throws Exception {\n    initRandom();\n    int sz = ForPostingsFormat.DEFAULT_BLOCK_SIZE;\n    int[] data = new int[sz];\n    for (int i=0; i<=32; ++i) { // try to test every kinds of distribution\n      double alpha=gen.nextDouble(); // rate of normal value\n      for (int j=0; j<=32; ++j) {\n        createDistribution(data,sz,alpha,MASK[i],MASK[j]);\n        tryCompressAndDecompress(data, sz);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Test correctness of compressing and decompressing.\n   * Here we randomly assign a rate of exception (i.e. 1-alpha), \n   * and test different scale of normal/exception values.\n   */\n  public void testAllDistribution() throws Exception {\n    initRandom();\n    for (int i=0; i<=32; ++i) { // try to test every kinds of distribution\n      double alpha=gen.nextDouble(); // rate of normal value\n      for (int j=0; j<=32; ++j) {\n        tryDistribution(ForPostingsFormat.DEFAULT_BLOCK_SIZE,alpha,MASK[i],MASK[j]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a91a0a325d8dbf4d5759c5b368c5eae7ec8483b5","date":1342443326,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/pfor/TestPForUtil#testAllDistribution().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/pfor/TestPForUtil#testAllDistribution().mjava","sourceNew":"  /**\n   * Test correctness of compressing and decompressing.\n   * Here we randomly assign a rate of exception (i.e. 1-alpha), \n   * and test different scale of normal/exception values.\n   */\n  public void testAllDistribution() throws Exception {\n    initRandom();\n    int sz = ForPostingsFormat.DEFAULT_BLOCK_SIZE;\n    int[] data = new int[sz];\n    for (int i=0; i<=32; ++i) { // try to test every kinds of distribution\n      double alpha=gen.nextDouble(); // rate of normal value\n      for (int j=i; j<=32; ++j) {\n        createDistribution(data,sz,alpha,MASK[i],MASK[j]);\n        tryCompressAndDecompress(data, sz);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Test correctness of compressing and decompressing.\n   * Here we randomly assign a rate of exception (i.e. 1-alpha), \n   * and test different scale of normal/exception values.\n   */\n  public void testAllDistribution() throws Exception {\n    initRandom();\n    int sz = ForPostingsFormat.DEFAULT_BLOCK_SIZE;\n    int[] data = new int[sz];\n    for (int i=0; i<=32; ++i) { // try to test every kinds of distribution\n      double alpha=gen.nextDouble(); // rate of normal value\n      for (int j=0; j<=32; ++j) {\n        createDistribution(data,sz,alpha,MASK[i],MASK[j]);\n        tryCompressAndDecompress(data, sz);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","date":1343686506,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/pfor/TestPForUtil#testAllDistribution().mjava","sourceNew":null,"sourceOld":"  /**\n   * Test correctness of compressing and decompressing.\n   * Here we randomly assign a rate of exception (i.e. 1-alpha), \n   * and test different scale of normal/exception values.\n   */\n  public void testAllDistribution() throws Exception {\n    initRandom();\n    int sz = ForPostingsFormat.DEFAULT_BLOCK_SIZE;\n    int[] data = new int[sz];\n    for (int i=0; i<=32; ++i) { // try to test every kinds of distribution\n      double alpha=gen.nextDouble(); // rate of normal value\n      for (int j=i; j<=32; ++j) {\n        createDistribution(data,sz,alpha,MASK[i],MASK[j]);\n        tryCompressAndDecompress(data, sz);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":["a91a0a325d8dbf4d5759c5b368c5eae7ec8483b5"],"5373bc7574123da55ae25e216b6d768ccb1dcd91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a91a0a325d8dbf4d5759c5b368c5eae7ec8483b5":["48d40647dc87c7b55ffe4d9dca73f63a3cebc58b"],"48d40647dc87c7b55ffe4d9dca73f63a3cebc58b":["5373bc7574123da55ae25e216b6d768ccb1dcd91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":[],"5373bc7574123da55ae25e216b6d768ccb1dcd91":["48d40647dc87c7b55ffe4d9dca73f63a3cebc58b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5373bc7574123da55ae25e216b6d768ccb1dcd91","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a91a0a325d8dbf4d5759c5b368c5eae7ec8483b5":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df"],"48d40647dc87c7b55ffe4d9dca73f63a3cebc58b":["a91a0a325d8dbf4d5759c5b368c5eae7ec8483b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}