{"path":"lucene/backwards/src/java/org/apache/lucene/store/MMapDirectory.MultiMMapIndexInput#MultiMMapIndexInput(RandomAccessFile,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/store/MMapDirectory.MultiMMapIndexInput#MultiMMapIndexInput(RandomAccessFile,int).mjava","pathOld":"backwards/src/java/org/apache/lucene/store/MMapDirectory.MultiMMapIndexInput#MultiMMapIndexInput(RandomAccessFile,int).mjava","sourceNew":"    public MultiMMapIndexInput(RandomAccessFile raf, int maxBufSize)\n      throws IOException {\n      this.length = raf.length();\n      this.maxBufSize = maxBufSize;\n      \n      if (maxBufSize <= 0)\n        throw new IllegalArgumentException(\"Non positive maxBufSize: \"\n                                           + maxBufSize);\n      \n      if ((length / maxBufSize) > Integer.MAX_VALUE)\n        throw new IllegalArgumentException\n          (\"RandomAccessFile too big for maximum buffer size: \"\n           + raf.toString());\n      \n      int nrBuffers = (int) (length / maxBufSize);\n      if (((long) nrBuffers * maxBufSize) < length) nrBuffers++;\n      \n      this.buffers = new ByteBuffer[nrBuffers];\n      this.bufSizes = new int[nrBuffers];\n      \n      long bufferStart = 0;\n      FileChannel rafc = raf.getChannel();\n      for (int bufNr = 0; bufNr < nrBuffers; bufNr++) { \n        int bufSize = (length > (bufferStart + maxBufSize))\n          ? maxBufSize\n          : (int) (length - bufferStart);\n        this.buffers[bufNr] = rafc.map(MapMode.READ_ONLY,bufferStart,bufSize);\n        this.bufSizes[bufNr] = bufSize;\n        bufferStart += bufSize;\n      }\n      seek(0L);\n    }\n\n","sourceOld":"    public MultiMMapIndexInput(RandomAccessFile raf, int maxBufSize)\n      throws IOException {\n      this.length = raf.length();\n      this.maxBufSize = maxBufSize;\n      \n      if (maxBufSize <= 0)\n        throw new IllegalArgumentException(\"Non positive maxBufSize: \"\n                                           + maxBufSize);\n      \n      if ((length / maxBufSize) > Integer.MAX_VALUE)\n        throw new IllegalArgumentException\n          (\"RandomAccessFile too big for maximum buffer size: \"\n           + raf.toString());\n      \n      int nrBuffers = (int) (length / maxBufSize);\n      if (((long) nrBuffers * maxBufSize) < length) nrBuffers++;\n      \n      this.buffers = new ByteBuffer[nrBuffers];\n      this.bufSizes = new int[nrBuffers];\n      \n      long bufferStart = 0;\n      FileChannel rafc = raf.getChannel();\n      for (int bufNr = 0; bufNr < nrBuffers; bufNr++) { \n        int bufSize = (length > (bufferStart + maxBufSize))\n          ? maxBufSize\n          : (int) (length - bufferStart);\n        this.buffers[bufNr] = rafc.map(MapMode.READ_ONLY,bufferStart,bufSize);\n        this.bufSizes[bufNr] = bufSize;\n        bufferStart += bufSize;\n      }\n      seek(0L);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/store/MMapDirectory.MultiMMapIndexInput#MultiMMapIndexInput(RandomAccessFile,int).mjava","sourceNew":null,"sourceOld":"    public MultiMMapIndexInput(RandomAccessFile raf, int maxBufSize)\n      throws IOException {\n      this.length = raf.length();\n      this.maxBufSize = maxBufSize;\n      \n      if (maxBufSize <= 0)\n        throw new IllegalArgumentException(\"Non positive maxBufSize: \"\n                                           + maxBufSize);\n      \n      if ((length / maxBufSize) > Integer.MAX_VALUE)\n        throw new IllegalArgumentException\n          (\"RandomAccessFile too big for maximum buffer size: \"\n           + raf.toString());\n      \n      int nrBuffers = (int) (length / maxBufSize);\n      if (((long) nrBuffers * maxBufSize) < length) nrBuffers++;\n      \n      this.buffers = new ByteBuffer[nrBuffers];\n      this.bufSizes = new int[nrBuffers];\n      \n      long bufferStart = 0;\n      FileChannel rafc = raf.getChannel();\n      for (int bufNr = 0; bufNr < nrBuffers; bufNr++) { \n        int bufSize = (length > (bufferStart + maxBufSize))\n          ? maxBufSize\n          : (int) (length - bufferStart);\n        this.buffers[bufNr] = rafc.map(MapMode.READ_ONLY,bufferStart,bufSize);\n        this.bufSizes[bufNr] = bufSize;\n        bufferStart += bufSize;\n      }\n      seek(0L);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}