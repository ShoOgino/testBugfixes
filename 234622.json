{"path":"lucene/core/src/java/org/apache/lucene/util/GrowableByteArrayDataOutput#writeString(String).mjava","commits":[{"id":"c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9","date":1481155163,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/GrowableByteArrayDataOutput#writeString(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/GrowableByteArrayDataOutput#writeString(String).mjava","sourceNew":"  @Override\n  public void writeString(String string) throws IOException {\n    int maxLen = UnicodeUtil.maxUTF8Length(string.length());\n    if (maxLen <= MIN_UTF8_SIZE_TO_ENABLE_DOUBLE_PASS_ENCODING)  {\n      // string is small enough that we don't need to save memory by falling back to double-pass approach\n      // this is just an optimized writeString() that re-uses scratchBytes.\n      if (scratchBytes == null) {\n        scratchBytes = new byte[ArrayUtil.oversize(maxLen, Character.BYTES)];\n      } else {\n        scratchBytes = ArrayUtil.grow(scratchBytes, maxLen);\n      }\n      int len = UnicodeUtil.UTF16toUTF8(string, 0, string.length(), scratchBytes);\n      writeVInt(len);\n      writeBytes(scratchBytes, len);\n    } else  {\n      // use a double pass approach to avoid allocating a large intermediate buffer for string encoding\n      int numBytes = UnicodeUtil.calcUTF16toUTF8Length(string, 0, string.length());\n      writeVInt(numBytes);\n      bytes = ArrayUtil.grow(bytes, length + numBytes);\n      length = UnicodeUtil.UTF16toUTF8(string, 0, string.length(), bytes, length);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeString(String string) throws IOException {\n    int maxLen = UnicodeUtil.maxUTF8Length(string.length());\n    if (maxLen <= MIN_UTF8_SIZE_TO_ENABLE_DOUBLE_PASS_ENCODING)  {\n      // string is small enough that we don't need to save memory by falling back to double-pass approach\n      // this is just an optimized writeString() that re-uses scratchBytes.\n      scratchBytes = ArrayUtil.grow(scratchBytes, maxLen);\n      int len = UnicodeUtil.UTF16toUTF8(string, 0, string.length(), scratchBytes);\n      writeVInt(len);\n      writeBytes(scratchBytes, len);\n    } else  {\n      // use a double pass approach to avoid allocating a large intermediate buffer for string encoding\n      int numBytes = UnicodeUtil.calcUTF16toUTF8Length(string, 0, string.length());\n      writeVInt(numBytes);\n      bytes = ArrayUtil.grow(bytes, length + numBytes);\n      length = UnicodeUtil.UTF16toUTF8(string, 0, string.length(), bytes, length);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7a2e1716e01d8e64da1eaa94cbba1dfde2863cf","date":1481240091,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/GrowableByteArrayDataOutput#writeString(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/GrowableByteArrayDataOutput#writeString(String).mjava","sourceNew":"  @Override\n  public void writeString(String string) throws IOException {\n    int maxLen = UnicodeUtil.maxUTF8Length(string.length());\n    if (maxLen <= MIN_UTF8_SIZE_TO_ENABLE_DOUBLE_PASS_ENCODING)  {\n      // string is small enough that we don't need to save memory by falling back to double-pass approach\n      // this is just an optimized writeString() that re-uses scratchBytes.\n      if (scratchBytes == null) {\n        scratchBytes = new byte[ArrayUtil.oversize(maxLen, Character.BYTES)];\n      } else {\n        scratchBytes = ArrayUtil.grow(scratchBytes, maxLen);\n      }\n      int len = UnicodeUtil.UTF16toUTF8(string, 0, string.length(), scratchBytes);\n      writeVInt(len);\n      writeBytes(scratchBytes, len);\n    } else  {\n      // use a double pass approach to avoid allocating a large intermediate buffer for string encoding\n      int numBytes = UnicodeUtil.calcUTF16toUTF8Length(string, 0, string.length());\n      writeVInt(numBytes);\n      bytes = ArrayUtil.grow(bytes, length + numBytes);\n      length = UnicodeUtil.UTF16toUTF8(string, 0, string.length(), bytes, length);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeString(String string) throws IOException {\n    int maxLen = UnicodeUtil.maxUTF8Length(string.length());\n    if (maxLen <= MIN_UTF8_SIZE_TO_ENABLE_DOUBLE_PASS_ENCODING)  {\n      // string is small enough that we don't need to save memory by falling back to double-pass approach\n      // this is just an optimized writeString() that re-uses scratchBytes.\n      if (scratchBytes == null) {\n        scratchBytes = new byte[ArrayUtil.oversize(maxLen, Character.BYTES)];\n      } else {\n        scratchBytes = ArrayUtil.grow(scratchBytes, maxLen);\n      }\n      int len = UnicodeUtil.UTF16toUTF8(string, 0, string.length(), scratchBytes);\n      writeVInt(len);\n      writeBytes(scratchBytes, len);\n    } else  {\n      // use a double pass approach to avoid allocating a large intermediate buffer for string encoding\n      int numBytes = UnicodeUtil.calcUTF16toUTF8Length(string, 0, string.length());\n      writeVInt(numBytes);\n      bytes = ArrayUtil.grow(bytes, length + numBytes);\n      length = UnicodeUtil.UTF16toUTF8(string, 0, string.length(), bytes, length);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f7a2e1716e01d8e64da1eaa94cbba1dfde2863cf":["c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7a2e1716e01d8e64da1eaa94cbba1dfde2863cf"],"c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f7a2e1716e01d8e64da1eaa94cbba1dfde2863cf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9"],"c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9":["f7a2e1716e01d8e64da1eaa94cbba1dfde2863cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}