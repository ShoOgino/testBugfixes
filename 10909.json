{"path":"lucene/core/src/java/org/apache/lucene/document/SortedDocValuesField#newSlowRangeQuery(String,BytesRef,BytesRef,boolean,boolean).mjava","commits":[{"id":"b22152b9e1a55aed5f1510ecb2312a0be7056400","date":1500556211,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/SortedDocValuesField#newSlowRangeQuery(String,BytesRef,BytesRef,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/SortedDocValuesField#newRangeQuery(String,BytesRef,BytesRef,boolean,boolean).mjava","sourceNew":"  /**\n   * Create a range query that matches all documents whose value is between\n   * {@code lowerValue} and {@code upperValue} included.\n   * <p>\n   * You can have half-open ranges by setting {@code lowerValue = null}\n   * or {@code upperValue = null}.\n   * <p><b>NOTE</b>: Such queries cannot efficiently advance to the next match,\n   * which makes them slow if they are not ANDed with a selective query. As a\n   * consequence, they are best used wrapped in an {@link IndexOrDocValuesQuery},\n   * alongside a range query that executes on points, such as\n   * {@link BinaryPoint#newRangeQuery}.\n   */\n  public static Query newSlowRangeQuery(String field,\n      BytesRef lowerValue, BytesRef upperValue,\n      boolean lowerInclusive, boolean upperInclusive) {\n    return new SortedSetDocValuesRangeQuery(field, lowerValue, upperValue, lowerInclusive, upperInclusive) {\n      @Override\n      SortedSetDocValues getValues(LeafReader reader, String field) throws IOException {\n        return DocValues.singleton(DocValues.getSorted(reader, field));\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Create a range query that matches all documents whose value is between\n   * {@code lowerValue} and {@code upperValue} included.\n   * <p>\n   * You can have half-open ranges by setting {@code lowerValue = null}\n   * or {@code upperValue = null}.\n   * <p><b>NOTE</b>: Such queries cannot efficiently advance to the next match,\n   * which makes them slow if they are not ANDed with a selective query. As a\n   * consequence, they are best used wrapped in an {@link IndexOrDocValuesQuery},\n   * alongside a range query that executes on points, such as\n   * {@link BinaryPoint#newRangeQuery}.\n   */\n  public static Query newRangeQuery(String field,\n      BytesRef lowerValue, BytesRef upperValue,\n      boolean lowerInclusive, boolean upperInclusive) {\n    return new SortedSetDocValuesRangeQuery(field, lowerValue, upperValue, lowerInclusive, upperInclusive) {\n      @Override\n      SortedSetDocValues getValues(LeafReader reader, String field) throws IOException {\n        return DocValues.singleton(DocValues.getSorted(reader, field));\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":1,"author":"Cao Manh Dat","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/SortedDocValuesField#newSlowRangeQuery(String,BytesRef,BytesRef,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/SortedDocValuesField#newRangeQuery(String,BytesRef,BytesRef,boolean,boolean).mjava","sourceNew":"  /**\n   * Create a range query that matches all documents whose value is between\n   * {@code lowerValue} and {@code upperValue} included.\n   * <p>\n   * You can have half-open ranges by setting {@code lowerValue = null}\n   * or {@code upperValue = null}.\n   * <p><b>NOTE</b>: Such queries cannot efficiently advance to the next match,\n   * which makes them slow if they are not ANDed with a selective query. As a\n   * consequence, they are best used wrapped in an {@link IndexOrDocValuesQuery},\n   * alongside a range query that executes on points, such as\n   * {@link BinaryPoint#newRangeQuery}.\n   */\n  public static Query newSlowRangeQuery(String field,\n      BytesRef lowerValue, BytesRef upperValue,\n      boolean lowerInclusive, boolean upperInclusive) {\n    return new SortedSetDocValuesRangeQuery(field, lowerValue, upperValue, lowerInclusive, upperInclusive) {\n      @Override\n      SortedSetDocValues getValues(LeafReader reader, String field) throws IOException {\n        return DocValues.singleton(DocValues.getSorted(reader, field));\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Create a range query that matches all documents whose value is between\n   * {@code lowerValue} and {@code upperValue} included.\n   * <p>\n   * You can have half-open ranges by setting {@code lowerValue = null}\n   * or {@code upperValue = null}.\n   * <p><b>NOTE</b>: Such queries cannot efficiently advance to the next match,\n   * which makes them slow if they are not ANDed with a selective query. As a\n   * consequence, they are best used wrapped in an {@link IndexOrDocValuesQuery},\n   * alongside a range query that executes on points, such as\n   * {@link BinaryPoint#newRangeQuery}.\n   */\n  public static Query newRangeQuery(String field,\n      BytesRef lowerValue, BytesRef upperValue,\n      boolean lowerInclusive, boolean upperInclusive) {\n    return new SortedSetDocValuesRangeQuery(field, lowerValue, upperValue, lowerInclusive, upperInclusive) {\n      @Override\n      SortedSetDocValues getValues(LeafReader reader, String field) throws IOException {\n        return DocValues.singleton(DocValues.getSorted(reader, field));\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b22152b9e1a55aed5f1510ecb2312a0be7056400":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"936cdd5882761db3b844afd6f84ab81cbb011a75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b22152b9e1a55aed5f1510ecb2312a0be7056400"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b22152b9e1a55aed5f1510ecb2312a0be7056400"]},"commit2Childs":{"b22152b9e1a55aed5f1510ecb2312a0be7056400":["936cdd5882761db3b844afd6f84ab81cbb011a75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b22152b9e1a55aed5f1510ecb2312a0be7056400","936cdd5882761db3b844afd6f84ab81cbb011a75"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}