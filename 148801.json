{"path":"solr/core/src/test/org/apache/solr/cloud/TestDynamicFieldNamesIndexCorrectly#assertThatDocsHaveCorrectFields(Collection[SolrInputDocument],SolrDocumentList).mjava","commits":[{"id":"2ef9571ba4e2220aa3ec121b266f821e0d345139","date":1574716343,"type":0,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestDynamicFieldNamesIndexCorrectly#assertThatDocsHaveCorrectFields(Collection[SolrInputDocument],SolrDocumentList).mjava","pathOld":"/dev/null","sourceNew":"  private void assertThatDocsHaveCorrectFields(final Collection<SolrInputDocument> solrDocs,\n      final SolrDocumentList resultDocs) {\n    assertEquals(\"Wrong number of docs found\", resultDocs.getNumFound(), solrDocs.size());\n    final Map<Object,SolrDocument> resultMap = resultDocs.stream()\n        .collect(Collectors.toMap(doc -> doc.getFieldValue(\"id\"), doc -> doc));\n    Iterator<SolrInputDocument> it = solrDocs.iterator();\n    while (it.hasNext()) {\n      final SolrInputDocument inDoc = it.next();\n      final String id = inDoc.getField(\"id\").getRawValue().toString();\n      final SolrDocument resultDoc = resultMap.get(id);\n      final Collection<String> resultFieldNames = resultDoc.getFieldNames();\n      inDoc\n          .getFieldNames()\n          .forEach(\n              fieldName -> {\n                assertThat(\n                    String.format(Locale.ROOT, \"Doc %s does not have field %s, it has %s\", id, fieldName,\n                        resultFieldNames),\n                    resultFieldNames, new IsCollectionContaining<>(new IsEqual<>(fieldName)));\n              });\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3665b66adafb1514bba04cd1d5c477fcaa93d592","date":1576153597,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestDynamicFieldNamesIndexCorrectly#assertThatDocsHaveCorrectFields(Collection[SolrInputDocument],SolrDocumentList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestDynamicFieldNamesIndexCorrectly#assertThatDocsHaveCorrectFields(Collection[SolrInputDocument],SolrDocumentList).mjava","sourceNew":"  private void assertThatDocsHaveCorrectFields(final Collection<SolrInputDocument> solrDocs,\n      final SolrDocumentList resultDocs) {\n    assertEquals(\"Wrong number of docs found\", resultDocs.getNumFound(), solrDocs.size());\n    final Map<Object,SolrDocument> resultMap = resultDocs.stream()\n        .collect(Collectors.toMap(doc -> doc.getFieldValue(\"id\"), doc -> doc));\n    Iterator<SolrInputDocument> it = solrDocs.iterator();\n    while (it.hasNext()) {\n      final SolrInputDocument inDoc = it.next();\n      final String id = inDoc.getField(\"id\").getValue().toString();\n      final SolrDocument resultDoc = resultMap.get(id);\n      final Collection<String> resultFieldNames = resultDoc.getFieldNames();\n      inDoc\n          .getFieldNames()\n          .forEach(\n              fieldName -> {\n                assertThat(\n                    String.format(Locale.ROOT, \"Doc %s does not have field %s, it has %s\", id, fieldName,\n                        resultFieldNames),\n                    resultFieldNames, new IsCollectionContaining<>(new IsEqual<>(fieldName)));\n              });\n    }\n  }\n\n","sourceOld":"  private void assertThatDocsHaveCorrectFields(final Collection<SolrInputDocument> solrDocs,\n      final SolrDocumentList resultDocs) {\n    assertEquals(\"Wrong number of docs found\", resultDocs.getNumFound(), solrDocs.size());\n    final Map<Object,SolrDocument> resultMap = resultDocs.stream()\n        .collect(Collectors.toMap(doc -> doc.getFieldValue(\"id\"), doc -> doc));\n    Iterator<SolrInputDocument> it = solrDocs.iterator();\n    while (it.hasNext()) {\n      final SolrInputDocument inDoc = it.next();\n      final String id = inDoc.getField(\"id\").getRawValue().toString();\n      final SolrDocument resultDoc = resultMap.get(id);\n      final Collection<String> resultFieldNames = resultDoc.getFieldNames();\n      inDoc\n          .getFieldNames()\n          .forEach(\n              fieldName -> {\n                assertThat(\n                    String.format(Locale.ROOT, \"Doc %s does not have field %s, it has %s\", id, fieldName,\n                        resultFieldNames),\n                    resultFieldNames, new IsCollectionContaining<>(new IsEqual<>(fieldName)));\n              });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df724d84dab24a0cc54bec95a8680867adc7f171","date":1576156608,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestDynamicFieldNamesIndexCorrectly#assertThatDocsHaveCorrectFields(Collection[SolrInputDocument],SolrDocumentList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestDynamicFieldNamesIndexCorrectly#assertThatDocsHaveCorrectFields(Collection[SolrInputDocument],SolrDocumentList).mjava","sourceNew":"  private void assertThatDocsHaveCorrectFields(final Collection<SolrInputDocument> solrDocs,\n      final SolrDocumentList resultDocs) {\n    assertEquals(\"Wrong number of docs found\", resultDocs.getNumFound(), solrDocs.size());\n    final Map<Object,SolrDocument> resultMap = resultDocs.stream()\n        .collect(Collectors.toMap(doc -> doc.getFieldValue(\"id\"), doc -> doc));\n    Iterator<SolrInputDocument> it = solrDocs.iterator();\n    while (it.hasNext()) {\n      final SolrInputDocument inDoc = it.next();\n      final String id = inDoc.getField(\"id\").getValue().toString();\n      final SolrDocument resultDoc = resultMap.get(id);\n      final Collection<String> resultFieldNames = resultDoc.getFieldNames();\n      inDoc\n          .getFieldNames()\n          .forEach(\n              fieldName -> {\n                assertThat(\n                    String.format(Locale.ROOT, \"Doc %s does not have field %s, it has %s\", id, fieldName,\n                        resultFieldNames),\n                    resultFieldNames, new IsCollectionContaining<>(new IsEqual<>(fieldName)));\n              });\n    }\n  }\n\n","sourceOld":"  private void assertThatDocsHaveCorrectFields(final Collection<SolrInputDocument> solrDocs,\n      final SolrDocumentList resultDocs) {\n    assertEquals(\"Wrong number of docs found\", resultDocs.getNumFound(), solrDocs.size());\n    final Map<Object,SolrDocument> resultMap = resultDocs.stream()\n        .collect(Collectors.toMap(doc -> doc.getFieldValue(\"id\"), doc -> doc));\n    Iterator<SolrInputDocument> it = solrDocs.iterator();\n    while (it.hasNext()) {\n      final SolrInputDocument inDoc = it.next();\n      final String id = inDoc.getField(\"id\").getRawValue().toString();\n      final SolrDocument resultDoc = resultMap.get(id);\n      final Collection<String> resultFieldNames = resultDoc.getFieldNames();\n      inDoc\n          .getFieldNames()\n          .forEach(\n              fieldName -> {\n                assertThat(\n                    String.format(Locale.ROOT, \"Doc %s does not have field %s, it has %s\", id, fieldName,\n                        resultFieldNames),\n                    resultFieldNames, new IsCollectionContaining<>(new IsEqual<>(fieldName)));\n              });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df724d84dab24a0cc54bec95a8680867adc7f171":["2ef9571ba4e2220aa3ec121b266f821e0d345139","3665b66adafb1514bba04cd1d5c477fcaa93d592"],"3665b66adafb1514bba04cd1d5c477fcaa93d592":["2ef9571ba4e2220aa3ec121b266f821e0d345139"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2ef9571ba4e2220aa3ec121b266f821e0d345139":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3665b66adafb1514bba04cd1d5c477fcaa93d592"]},"commit2Childs":{"df724d84dab24a0cc54bec95a8680867adc7f171":[],"3665b66adafb1514bba04cd1d5c477fcaa93d592":["df724d84dab24a0cc54bec95a8680867adc7f171","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2ef9571ba4e2220aa3ec121b266f821e0d345139"],"2ef9571ba4e2220aa3ec121b266f821e0d345139":["df724d84dab24a0cc54bec95a8680867adc7f171","3665b66adafb1514bba04cd1d5c477fcaa93d592"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["df724d84dab24a0cc54bec95a8680867adc7f171","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}