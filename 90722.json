{"path":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testDateRange().mjava","commits":[{"id":"36f91bf9cfc9d0c3155edab43359e7670ea8a5af","date":1269580873,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testDateRange().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testDateRange().mjava","sourceNew":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1);\n    String endDate = getLocalizedDate(2002, 1, 4);\n    assertQueryEquals(\"[ \" + escapeDateString(startDate) + \" TO \" + escapeDateString(endDate) + \"]\", null,\n                      \"[\" + getDate(startDate) + \" TO \" + getDate(endDate) + \"]\");\n    assertQueryEquals(\"{  \" + escapeDateString(startDate) + \"    \" + escapeDateString(endDate) + \"   }\", null,\n                      \"{\" + getDate(startDate) + \" TO \" + getDate(endDate) + \"}\");\n  }\n\n","sourceOld":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1);\n    String endDate = getLocalizedDate(2002, 1, 4);\n    assertQueryEquals(\"[ \" + escapeDateString(startDate) + \" TO \" + escapeDateString(endDate) + \"]\", null,\n                      \"[\" + getDate(startDate) + \" TO \" + getDate(endDate) + \"]\");\n    assertQueryEquals(\"{  \" + escapeDateString(startDate) + \"    \" + escapeDateString(endDate) + \"   }\", null,\n                      \"{\" + getDate(startDate) + \" TO \" + getDate(endDate) + \"}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecaea79e307d83311c31273b0ea89b9fdb0c5a32","date":1287584790,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testDateRange().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testDateRange().mjava","sourceNew":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1, false);\n    String endDate = getLocalizedDate(2002, 1, 4, false);\n    Calendar endDateExpected = new GregorianCalendar();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    final String defaultField = \"default\";\n    final String monthField = \"month\";\n    final String hourField = \"hour\";\n    PrecedenceQueryParser qp = new PrecedenceQueryParser(new MockAnalyzer());\n\n    // Don't set any date resolution and verify if DateField is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate,\n        endDateExpected.getTime(), null);\n\n    Map<CharSequence, DateTools.Resolution> fieldMap = new HashMap<CharSequence,DateTools.Resolution>();\n    // set a field specific date resolution\n    fieldMap.put(monthField, DateTools.Resolution.MONTH);\n    qp.setDateResolution(fieldMap);\n\n    // DateField should still be used for defaultField\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate,\n        endDateExpected.getTime(), null);\n\n    // set default date resolution to MILLISECOND\n    qp.setDateResolution(DateTools.Resolution.MILLISECOND);\n\n    // set second field specific date resolution\n    fieldMap.put(hourField, DateTools.Resolution.HOUR);\n    qp.setDateResolution(fieldMap);\n\n    // for this field no field specific date resolution has been set,\n    // so verify if the default resolution is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MILLISECOND);\n\n    // verify if field specific date resolutions are used for these two fields\n    assertDateRangeQueryEquals(qp, monthField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MONTH);\n\n    assertDateRangeQueryEquals(qp, hourField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.HOUR);\n  }\n\n","sourceOld":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1);\n    String endDate = getLocalizedDate(2002, 1, 4);\n    assertQueryEquals(\"[ \" + escapeDateString(startDate) + \" TO \" + escapeDateString(endDate) + \"]\", null,\n                      \"[\" + getDate(startDate) + \" TO \" + getDate(endDate) + \"]\");\n    assertQueryEquals(\"{  \" + escapeDateString(startDate) + \"    \" + escapeDateString(endDate) + \"   }\", null,\n                      \"{\" + getDate(startDate) + \" TO \" + getDate(endDate) + \"}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8017ab6544f30f93b106e419e7298173bad77f69","date":1287608126,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testDateRange().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testDateRange().mjava","sourceNew":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1, false);\n    String endDate = getLocalizedDate(2002, 1, 4, false);\n    Calendar endDateExpected = new GregorianCalendar();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    final String defaultField = \"default\";\n    final String monthField = \"month\";\n    final String hourField = \"hour\";\n    PrecedenceQueryParser qp = new PrecedenceQueryParser(new MockAnalyzer());\n\n    // Don't set any date resolution and verify if DateField is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate,\n        endDateExpected.getTime(), null);\n\n    Map<CharSequence, DateTools.Resolution> fieldMap = new HashMap<CharSequence,DateTools.Resolution>();\n    // set a field specific date resolution\n    fieldMap.put(monthField, DateTools.Resolution.MONTH);\n    qp.setDateResolution(fieldMap);\n\n    // DateField should still be used for defaultField\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate,\n        endDateExpected.getTime(), null);\n\n    // set default date resolution to MILLISECOND\n    qp.setDateResolution(DateTools.Resolution.MILLISECOND);\n\n    // set second field specific date resolution\n    fieldMap.put(hourField, DateTools.Resolution.HOUR);\n    qp.setDateResolution(fieldMap);\n\n    // for this field no field specific date resolution has been set,\n    // so verify if the default resolution is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MILLISECOND);\n\n    // verify if field specific date resolutions are used for these two fields\n    assertDateRangeQueryEquals(qp, monthField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MONTH);\n\n    assertDateRangeQueryEquals(qp, hourField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.HOUR);\n  }\n\n","sourceOld":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1);\n    String endDate = getLocalizedDate(2002, 1, 4);\n    assertQueryEquals(\"[ \" + escapeDateString(startDate) + \" TO \" + escapeDateString(endDate) + \"]\", null,\n                      \"[\" + getDate(startDate) + \" TO \" + getDate(endDate) + \"]\");\n    assertQueryEquals(\"{  \" + escapeDateString(startDate) + \"    \" + escapeDateString(endDate) + \"   }\", null,\n                      \"{\" + getDate(startDate) + \" TO \" + getDate(endDate) + \"}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testDateRange().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testDateRange().mjava","sourceNew":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1, false);\n    String endDate = getLocalizedDate(2002, 1, 4, false);\n    Calendar endDateExpected = new GregorianCalendar();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    final String defaultField = \"default\";\n    final String monthField = \"month\";\n    final String hourField = \"hour\";\n    PrecedenceQueryParser qp = new PrecedenceQueryParser(new MockAnalyzer());\n\n    Map<CharSequence, DateTools.Resolution> fieldMap = new HashMap<CharSequence,DateTools.Resolution>();\n    // set a field specific date resolution\n    fieldMap.put(monthField, DateTools.Resolution.MONTH);\n    qp.setDateResolution(fieldMap);\n\n    // set default date resolution to MILLISECOND\n    qp.setDateResolution(DateTools.Resolution.MILLISECOND);\n\n    // set second field specific date resolution\n    fieldMap.put(hourField, DateTools.Resolution.HOUR);\n    qp.setDateResolution(fieldMap);\n\n    // for this field no field specific date resolution has been set,\n    // so verify if the default resolution is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MILLISECOND);\n\n    // verify if field specific date resolutions are used for these two fields\n    assertDateRangeQueryEquals(qp, monthField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MONTH);\n\n    assertDateRangeQueryEquals(qp, hourField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.HOUR);\n  }\n\n","sourceOld":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1, false);\n    String endDate = getLocalizedDate(2002, 1, 4, false);\n    Calendar endDateExpected = new GregorianCalendar();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    final String defaultField = \"default\";\n    final String monthField = \"month\";\n    final String hourField = \"hour\";\n    PrecedenceQueryParser qp = new PrecedenceQueryParser(new MockAnalyzer());\n\n    // Don't set any date resolution and verify if DateField is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate,\n        endDateExpected.getTime(), null);\n\n    Map<CharSequence, DateTools.Resolution> fieldMap = new HashMap<CharSequence,DateTools.Resolution>();\n    // set a field specific date resolution\n    fieldMap.put(monthField, DateTools.Resolution.MONTH);\n    qp.setDateResolution(fieldMap);\n\n    // DateField should still be used for defaultField\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate,\n        endDateExpected.getTime(), null);\n\n    // set default date resolution to MILLISECOND\n    qp.setDateResolution(DateTools.Resolution.MILLISECOND);\n\n    // set second field specific date resolution\n    fieldMap.put(hourField, DateTools.Resolution.HOUR);\n    qp.setDateResolution(fieldMap);\n\n    // for this field no field specific date resolution has been set,\n    // so verify if the default resolution is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MILLISECOND);\n\n    // verify if field specific date resolutions are used for these two fields\n    assertDateRangeQueryEquals(qp, monthField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MONTH);\n\n    assertDateRangeQueryEquals(qp, hourField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.HOUR);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testDateRange().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testDateRange().mjava","sourceNew":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1, false);\n    String endDate = getLocalizedDate(2002, 1, 4, false);\n    Calendar endDateExpected = new GregorianCalendar();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    final String defaultField = \"default\";\n    final String monthField = \"month\";\n    final String hourField = \"hour\";\n    PrecedenceQueryParser qp = new PrecedenceQueryParser(new MockAnalyzer());\n\n    Map<CharSequence, DateTools.Resolution> fieldMap = new HashMap<CharSequence,DateTools.Resolution>();\n    // set a field specific date resolution\n    fieldMap.put(monthField, DateTools.Resolution.MONTH);\n    qp.setDateResolution(fieldMap);\n\n    // set default date resolution to MILLISECOND\n    qp.setDateResolution(DateTools.Resolution.MILLISECOND);\n\n    // set second field specific date resolution\n    fieldMap.put(hourField, DateTools.Resolution.HOUR);\n    qp.setDateResolution(fieldMap);\n\n    // for this field no field specific date resolution has been set,\n    // so verify if the default resolution is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MILLISECOND);\n\n    // verify if field specific date resolutions are used for these two fields\n    assertDateRangeQueryEquals(qp, monthField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MONTH);\n\n    assertDateRangeQueryEquals(qp, hourField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.HOUR);\n  }\n\n","sourceOld":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1, false);\n    String endDate = getLocalizedDate(2002, 1, 4, false);\n    Calendar endDateExpected = new GregorianCalendar();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    final String defaultField = \"default\";\n    final String monthField = \"month\";\n    final String hourField = \"hour\";\n    PrecedenceQueryParser qp = new PrecedenceQueryParser(new MockAnalyzer());\n\n    // Don't set any date resolution and verify if DateField is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate,\n        endDateExpected.getTime(), null);\n\n    Map<CharSequence, DateTools.Resolution> fieldMap = new HashMap<CharSequence,DateTools.Resolution>();\n    // set a field specific date resolution\n    fieldMap.put(monthField, DateTools.Resolution.MONTH);\n    qp.setDateResolution(fieldMap);\n\n    // DateField should still be used for defaultField\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate,\n        endDateExpected.getTime(), null);\n\n    // set default date resolution to MILLISECOND\n    qp.setDateResolution(DateTools.Resolution.MILLISECOND);\n\n    // set second field specific date resolution\n    fieldMap.put(hourField, DateTools.Resolution.HOUR);\n    qp.setDateResolution(fieldMap);\n\n    // for this field no field specific date resolution has been set,\n    // so verify if the default resolution is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MILLISECOND);\n\n    // verify if field specific date resolutions are used for these two fields\n    assertDateRangeQueryEquals(qp, monthField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MONTH);\n\n    assertDateRangeQueryEquals(qp, hourField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.HOUR);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testDateRange().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testDateRange().mjava","sourceNew":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1, false);\n    String endDate = getLocalizedDate(2002, 1, 4, false);\n    Calendar endDateExpected = new GregorianCalendar();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    final String defaultField = \"default\";\n    final String monthField = \"month\";\n    final String hourField = \"hour\";\n    PrecedenceQueryParser qp = new PrecedenceQueryParser(new MockAnalyzer());\n\n    Map<CharSequence, DateTools.Resolution> fieldMap = new HashMap<CharSequence,DateTools.Resolution>();\n    // set a field specific date resolution\n    fieldMap.put(monthField, DateTools.Resolution.MONTH);\n    qp.setDateResolution(fieldMap);\n\n    // set default date resolution to MILLISECOND\n    qp.setDateResolution(DateTools.Resolution.MILLISECOND);\n\n    // set second field specific date resolution\n    fieldMap.put(hourField, DateTools.Resolution.HOUR);\n    qp.setDateResolution(fieldMap);\n\n    // for this field no field specific date resolution has been set,\n    // so verify if the default resolution is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MILLISECOND);\n\n    // verify if field specific date resolutions are used for these two fields\n    assertDateRangeQueryEquals(qp, monthField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MONTH);\n\n    assertDateRangeQueryEquals(qp, hourField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.HOUR);\n  }\n\n","sourceOld":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1);\n    String endDate = getLocalizedDate(2002, 1, 4);\n    assertQueryEquals(\"[ \" + escapeDateString(startDate) + \" TO \" + escapeDateString(endDate) + \"]\", null,\n                      \"[\" + getDate(startDate) + \" TO \" + getDate(endDate) + \"]\");\n    assertQueryEquals(\"{  \" + escapeDateString(startDate) + \"    \" + escapeDateString(endDate) + \"   }\", null,\n                      \"{\" + getDate(startDate) + \" TO \" + getDate(endDate) + \"}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testDateRange().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testDateRange().mjava","sourceNew":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1, false);\n    String endDate = getLocalizedDate(2002, 1, 4, false);\n    Calendar endDateExpected = new GregorianCalendar();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    final String defaultField = \"default\";\n    final String monthField = \"month\";\n    final String hourField = \"hour\";\n    PrecedenceQueryParser qp = new PrecedenceQueryParser(new MockAnalyzer(random));\n\n    Map<CharSequence, DateTools.Resolution> fieldMap = new HashMap<CharSequence,DateTools.Resolution>();\n    // set a field specific date resolution\n    fieldMap.put(monthField, DateTools.Resolution.MONTH);\n    qp.setDateResolution(fieldMap);\n\n    // set default date resolution to MILLISECOND\n    qp.setDateResolution(DateTools.Resolution.MILLISECOND);\n\n    // set second field specific date resolution\n    fieldMap.put(hourField, DateTools.Resolution.HOUR);\n    qp.setDateResolution(fieldMap);\n\n    // for this field no field specific date resolution has been set,\n    // so verify if the default resolution is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MILLISECOND);\n\n    // verify if field specific date resolutions are used for these two fields\n    assertDateRangeQueryEquals(qp, monthField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MONTH);\n\n    assertDateRangeQueryEquals(qp, hourField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.HOUR);\n  }\n\n","sourceOld":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1, false);\n    String endDate = getLocalizedDate(2002, 1, 4, false);\n    Calendar endDateExpected = new GregorianCalendar();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    final String defaultField = \"default\";\n    final String monthField = \"month\";\n    final String hourField = \"hour\";\n    PrecedenceQueryParser qp = new PrecedenceQueryParser(new MockAnalyzer());\n\n    Map<CharSequence, DateTools.Resolution> fieldMap = new HashMap<CharSequence,DateTools.Resolution>();\n    // set a field specific date resolution\n    fieldMap.put(monthField, DateTools.Resolution.MONTH);\n    qp.setDateResolution(fieldMap);\n\n    // set default date resolution to MILLISECOND\n    qp.setDateResolution(DateTools.Resolution.MILLISECOND);\n\n    // set second field specific date resolution\n    fieldMap.put(hourField, DateTools.Resolution.HOUR);\n    qp.setDateResolution(fieldMap);\n\n    // for this field no field specific date resolution has been set,\n    // so verify if the default resolution is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MILLISECOND);\n\n    // verify if field specific date resolutions are used for these two fields\n    assertDateRangeQueryEquals(qp, monthField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MONTH);\n\n    assertDateRangeQueryEquals(qp, hourField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.HOUR);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testDateRange().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testDateRange().mjava","sourceNew":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1, false);\n    String endDate = getLocalizedDate(2002, 1, 4, false);\n    Calendar endDateExpected = new GregorianCalendar();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    final String defaultField = \"default\";\n    final String monthField = \"month\";\n    final String hourField = \"hour\";\n    PrecedenceQueryParser qp = new PrecedenceQueryParser(new MockAnalyzer(random));\n\n    Map<CharSequence, DateTools.Resolution> fieldMap = new HashMap<CharSequence,DateTools.Resolution>();\n    // set a field specific date resolution\n    fieldMap.put(monthField, DateTools.Resolution.MONTH);\n    qp.setDateResolution(fieldMap);\n\n    // set default date resolution to MILLISECOND\n    qp.setDateResolution(DateTools.Resolution.MILLISECOND);\n\n    // set second field specific date resolution\n    fieldMap.put(hourField, DateTools.Resolution.HOUR);\n    qp.setDateResolution(fieldMap);\n\n    // for this field no field specific date resolution has been set,\n    // so verify if the default resolution is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MILLISECOND);\n\n    // verify if field specific date resolutions are used for these two fields\n    assertDateRangeQueryEquals(qp, monthField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MONTH);\n\n    assertDateRangeQueryEquals(qp, hourField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.HOUR);\n  }\n\n","sourceOld":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1, false);\n    String endDate = getLocalizedDate(2002, 1, 4, false);\n    Calendar endDateExpected = new GregorianCalendar();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    final String defaultField = \"default\";\n    final String monthField = \"month\";\n    final String hourField = \"hour\";\n    PrecedenceQueryParser qp = new PrecedenceQueryParser(new MockAnalyzer());\n\n    Map<CharSequence, DateTools.Resolution> fieldMap = new HashMap<CharSequence,DateTools.Resolution>();\n    // set a field specific date resolution\n    fieldMap.put(monthField, DateTools.Resolution.MONTH);\n    qp.setDateResolution(fieldMap);\n\n    // set default date resolution to MILLISECOND\n    qp.setDateResolution(DateTools.Resolution.MILLISECOND);\n\n    // set second field specific date resolution\n    fieldMap.put(hourField, DateTools.Resolution.HOUR);\n    qp.setDateResolution(fieldMap);\n\n    // for this field no field specific date resolution has been set,\n    // so verify if the default resolution is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MILLISECOND);\n\n    // verify if field specific date resolutions are used for these two fields\n    assertDateRangeQueryEquals(qp, monthField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MONTH);\n\n    assertDateRangeQueryEquals(qp, hourField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.HOUR);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testDateRange().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testDateRange().mjava","sourceNew":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1, false);\n    String endDate = getLocalizedDate(2002, 1, 4, false);\n    Calendar endDateExpected = new GregorianCalendar();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    final String defaultField = \"default\";\n    final String monthField = \"month\";\n    final String hourField = \"hour\";\n    PrecedenceQueryParser qp = new PrecedenceQueryParser(new MockAnalyzer(random));\n\n    Map<CharSequence, DateTools.Resolution> fieldMap = new HashMap<CharSequence,DateTools.Resolution>();\n    // set a field specific date resolution\n    fieldMap.put(monthField, DateTools.Resolution.MONTH);\n    qp.setDateResolution(fieldMap);\n\n    // set default date resolution to MILLISECOND\n    qp.setDateResolution(DateTools.Resolution.MILLISECOND);\n\n    // set second field specific date resolution\n    fieldMap.put(hourField, DateTools.Resolution.HOUR);\n    qp.setDateResolution(fieldMap);\n\n    // for this field no field specific date resolution has been set,\n    // so verify if the default resolution is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MILLISECOND);\n\n    // verify if field specific date resolutions are used for these two fields\n    assertDateRangeQueryEquals(qp, monthField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MONTH);\n\n    assertDateRangeQueryEquals(qp, hourField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.HOUR);\n  }\n\n","sourceOld":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1, false);\n    String endDate = getLocalizedDate(2002, 1, 4, false);\n    Calendar endDateExpected = new GregorianCalendar();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    final String defaultField = \"default\";\n    final String monthField = \"month\";\n    final String hourField = \"hour\";\n    PrecedenceQueryParser qp = new PrecedenceQueryParser(new MockAnalyzer());\n\n    Map<CharSequence, DateTools.Resolution> fieldMap = new HashMap<CharSequence,DateTools.Resolution>();\n    // set a field specific date resolution\n    fieldMap.put(monthField, DateTools.Resolution.MONTH);\n    qp.setDateResolution(fieldMap);\n\n    // set default date resolution to MILLISECOND\n    qp.setDateResolution(DateTools.Resolution.MILLISECOND);\n\n    // set second field specific date resolution\n    fieldMap.put(hourField, DateTools.Resolution.HOUR);\n    qp.setDateResolution(fieldMap);\n\n    // for this field no field specific date resolution has been set,\n    // so verify if the default resolution is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MILLISECOND);\n\n    // verify if field specific date resolutions are used for these two fields\n    assertDateRangeQueryEquals(qp, monthField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MONTH);\n\n    assertDateRangeQueryEquals(qp, hourField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.HOUR);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testDateRange().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testDateRange().mjava","sourceNew":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1, false);\n    String endDate = getLocalizedDate(2002, 1, 4, false);\n    Calendar endDateExpected = new GregorianCalendar();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    final String defaultField = \"default\";\n    final String monthField = \"month\";\n    final String hourField = \"hour\";\n    PrecedenceQueryParser qp = new PrecedenceQueryParser(new MockAnalyzer(random));\n\n    Map<CharSequence, DateTools.Resolution> fieldMap = new HashMap<CharSequence,DateTools.Resolution>();\n    // set a field specific date resolution\n    fieldMap.put(monthField, DateTools.Resolution.MONTH);\n    qp.setDateResolution(fieldMap);\n\n    // set default date resolution to MILLISECOND\n    qp.setDateResolution(DateTools.Resolution.MILLISECOND);\n\n    // set second field specific date resolution\n    fieldMap.put(hourField, DateTools.Resolution.HOUR);\n    qp.setDateResolution(fieldMap);\n\n    // for this field no field specific date resolution has been set,\n    // so verify if the default resolution is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MILLISECOND);\n\n    // verify if field specific date resolutions are used for these two fields\n    assertDateRangeQueryEquals(qp, monthField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MONTH);\n\n    assertDateRangeQueryEquals(qp, hourField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.HOUR);\n  }\n\n","sourceOld":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1, false);\n    String endDate = getLocalizedDate(2002, 1, 4, false);\n    Calendar endDateExpected = new GregorianCalendar();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    final String defaultField = \"default\";\n    final String monthField = \"month\";\n    final String hourField = \"hour\";\n    PrecedenceQueryParser qp = new PrecedenceQueryParser(new MockAnalyzer());\n\n    Map<CharSequence, DateTools.Resolution> fieldMap = new HashMap<CharSequence,DateTools.Resolution>();\n    // set a field specific date resolution\n    fieldMap.put(monthField, DateTools.Resolution.MONTH);\n    qp.setDateResolution(fieldMap);\n\n    // set default date resolution to MILLISECOND\n    qp.setDateResolution(DateTools.Resolution.MILLISECOND);\n\n    // set second field specific date resolution\n    fieldMap.put(hourField, DateTools.Resolution.HOUR);\n    qp.setDateResolution(fieldMap);\n\n    // for this field no field specific date resolution has been set,\n    // so verify if the default resolution is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MILLISECOND);\n\n    // verify if field specific date resolutions are used for these two fields\n    assertDateRangeQueryEquals(qp, monthField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MONTH);\n\n    assertDateRangeQueryEquals(qp, hourField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.HOUR);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/precedence/TestPrecedenceQueryParser#testDateRange().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testDateRange().mjava","sourceNew":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1, false);\n    String endDate = getLocalizedDate(2002, 1, 4, false);\n    Calendar endDateExpected = new GregorianCalendar();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    final String defaultField = \"default\";\n    final String monthField = \"month\";\n    final String hourField = \"hour\";\n    PrecedenceQueryParser qp = new PrecedenceQueryParser(new MockAnalyzer(random));\n\n    Map<CharSequence, DateTools.Resolution> fieldMap = new HashMap<CharSequence,DateTools.Resolution>();\n    // set a field specific date resolution\n    fieldMap.put(monthField, DateTools.Resolution.MONTH);\n    qp.setDateResolution(fieldMap);\n\n    // set default date resolution to MILLISECOND\n    qp.setDateResolution(DateTools.Resolution.MILLISECOND);\n\n    // set second field specific date resolution\n    fieldMap.put(hourField, DateTools.Resolution.HOUR);\n    qp.setDateResolution(fieldMap);\n\n    // for this field no field specific date resolution has been set,\n    // so verify if the default resolution is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MILLISECOND);\n\n    // verify if field specific date resolutions are used for these two fields\n    assertDateRangeQueryEquals(qp, monthField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MONTH);\n\n    assertDateRangeQueryEquals(qp, hourField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.HOUR);\n  }\n\n","sourceOld":"  public void testDateRange() throws Exception {\n    String startDate = getLocalizedDate(2002, 1, 1, false);\n    String endDate = getLocalizedDate(2002, 1, 4, false);\n    Calendar endDateExpected = new GregorianCalendar();\n    endDateExpected.set(2002, 1, 4, 23, 59, 59);\n    endDateExpected.set(Calendar.MILLISECOND, 999);\n    final String defaultField = \"default\";\n    final String monthField = \"month\";\n    final String hourField = \"hour\";\n    PrecedenceQueryParser qp = new PrecedenceQueryParser(new MockAnalyzer(random));\n\n    Map<CharSequence, DateTools.Resolution> fieldMap = new HashMap<CharSequence,DateTools.Resolution>();\n    // set a field specific date resolution\n    fieldMap.put(monthField, DateTools.Resolution.MONTH);\n    qp.setDateResolution(fieldMap);\n\n    // set default date resolution to MILLISECOND\n    qp.setDateResolution(DateTools.Resolution.MILLISECOND);\n\n    // set second field specific date resolution\n    fieldMap.put(hourField, DateTools.Resolution.HOUR);\n    qp.setDateResolution(fieldMap);\n\n    // for this field no field specific date resolution has been set,\n    // so verify if the default resolution is used\n    assertDateRangeQueryEquals(qp, defaultField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MILLISECOND);\n\n    // verify if field specific date resolutions are used for these two fields\n    assertDateRangeQueryEquals(qp, monthField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.MONTH);\n\n    assertDateRangeQueryEquals(qp, hourField, startDate, endDate,\n        endDateExpected.getTime(), DateTools.Resolution.HOUR);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["3bb13258feba31ab676502787ab2e1779f129b7a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"ecaea79e307d83311c31273b0ea89b9fdb0c5a32":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4e8cc373c801e54cec75daf9f52792cb4b17f536","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8017ab6544f30f93b106e419e7298173bad77f69":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af","ecaea79e307d83311c31273b0ea89b9fdb0c5a32"],"3bb13258feba31ab676502787ab2e1779f129b7a":["8017ab6544f30f93b106e419e7298173bad77f69","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["ecaea79e307d83311c31273b0ea89b9fdb0c5a32"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ecaea79e307d83311c31273b0ea89b9fdb0c5a32","8017ab6544f30f93b106e419e7298173bad77f69"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"ecaea79e307d83311c31273b0ea89b9fdb0c5a32":["8017ab6544f30f93b106e419e7298173bad77f69","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"8017ab6544f30f93b106e419e7298173bad77f69":["3bb13258feba31ab676502787ab2e1779f129b7a"],"3bb13258feba31ab676502787ab2e1779f129b7a":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}