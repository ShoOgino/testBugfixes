{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newFilterChain(Random,Tokenizer,boolean).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newFilterChain(Random,Tokenizer,boolean).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newFilterChain(Random,Tokenizer,boolean).mjava","sourceNew":"    private TokenFilterSpec newFilterChain(Random random, Tokenizer tokenizer, boolean offsetsAreCorrect) {\n      TokenFilterSpec spec = new TokenFilterSpec();\n      spec.offsetsAreCorrect = offsetsAreCorrect;\n      spec.stream = tokenizer;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(5);\n      for (int i = 0; i < numFilters; i++) {\n\n        // Insert ValidatingTF after each stage so we can\n        // catch problems right after the TF that \"caused\"\n        // them:\n        spec.stream = new ValidatingTokenFilter(spec.stream, \"stage \" + i, spec.offsetsAreCorrect);\n\n        while (true) {\n          final Constructor<? extends TokenFilter> ctor = tokenfilters.get(random.nextInt(tokenfilters.size()));\n          \n          // hack: MockGraph/MockLookahead has assertions that will trip if they follow\n          // an offsets violator. so we cant use them after e.g. wikipediatokenizer\n          if (!spec.offsetsAreCorrect &&\n              (ctor.getDeclaringClass().equals(MockGraphTokenFilter.class)\n               || ctor.getDeclaringClass().equals(MockRandomLookaheadTokenFilter.class))) {\n            continue;\n          }\n          \n          final Object args[] = newFilterArgs(random, spec.stream, ctor.getParameterTypes());\n          final TokenFilter flt = createComponent(ctor, args, descr);\n          if (flt != null) {\n            if (brokenOffsetsComponents.contains(ctor.getDeclaringClass())) {\n              spec.offsetsAreCorrect = false;\n            }\n            spec.stream = flt;\n            break;\n          }\n        }\n      }\n\n      // Insert ValidatingTF after each stage so we can\n      // catch problems right after the TF that \"caused\"\n      // them:\n      spec.stream = new ValidatingTokenFilter(spec.stream, \"last stage\", spec.offsetsAreCorrect);\n\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","sourceOld":"    private TokenFilterSpec newFilterChain(Random random, Tokenizer tokenizer, boolean offsetsAreCorrect) {\n      TokenFilterSpec spec = new TokenFilterSpec();\n      spec.offsetsAreCorrect = offsetsAreCorrect;\n      spec.stream = tokenizer;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(5);\n      for (int i = 0; i < numFilters; i++) {\n\n        // Insert ValidatingTF after each stage so we can\n        // catch problems right after the TF that \"caused\"\n        // them:\n        spec.stream = new ValidatingTokenFilter(spec.stream, \"stage \" + i, spec.offsetsAreCorrect);\n\n        while (true) {\n          final Constructor<? extends TokenFilter> ctor = tokenfilters.get(random.nextInt(tokenfilters.size()));\n          \n          // hack: MockGraph/MockLookahead has assertions that will trip if they follow\n          // an offsets violator. so we cant use them after e.g. wikipediatokenizer\n          if (!spec.offsetsAreCorrect &&\n              (ctor.getDeclaringClass().equals(MockGraphTokenFilter.class)\n               || ctor.getDeclaringClass().equals(MockRandomLookaheadTokenFilter.class))) {\n            continue;\n          }\n          \n          final Object args[] = newFilterArgs(random, spec.stream, ctor.getParameterTypes());\n          final TokenFilter flt = createComponent(ctor, args, descr);\n          if (flt != null) {\n            if (brokenOffsetsComponents.contains(ctor.getDeclaringClass())) {\n              spec.offsetsAreCorrect = false;\n            }\n            spec.stream = flt;\n            break;\n          }\n        }\n      }\n\n      // Insert ValidatingTF after each stage so we can\n      // catch problems right after the TF that \"caused\"\n      // them:\n      spec.stream = new ValidatingTokenFilter(spec.stream, \"last stage\", spec.offsetsAreCorrect);\n\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19786ac48e7c7cb2da0d29218e579be4c750f8ff","date":1357748196,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newFilterChain(Random,Tokenizer,boolean).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newFilterChain(Random,Tokenizer,boolean).mjava","sourceNew":"    private TokenFilterSpec newFilterChain(Random random, Tokenizer tokenizer, boolean offsetsAreCorrect) {\n      TokenFilterSpec spec = new TokenFilterSpec();\n      spec.offsetsAreCorrect = offsetsAreCorrect;\n      spec.stream = tokenizer;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(5);\n      for (int i = 0; i < numFilters; i++) {\n\n        // Insert ValidatingTF after each stage so we can\n        // catch problems right after the TF that \"caused\"\n        // them:\n        spec.stream = new ValidatingTokenFilter(spec.stream, \"stage \" + i, spec.offsetsAreCorrect);\n\n        while (true) {\n          final Constructor<? extends TokenFilter> ctor = tokenfilters.get(random.nextInt(tokenfilters.size()));\n          \n          // hack: MockGraph/MockLookahead has assertions that will trip if they follow\n          // an offsets violator. so we cant use them after e.g. wikipediatokenizer\n          if (!spec.offsetsAreCorrect &&\n              (ctor.getDeclaringClass().equals(MockGraphTokenFilter.class)\n               || ctor.getDeclaringClass().equals(MockRandomLookaheadTokenFilter.class))) {\n            continue;\n          }\n          \n          final Object args[] = newFilterArgs(random, spec.stream, ctor.getParameterTypes());\n          if (broken(ctor, args)) {\n            continue;\n          }\n          final TokenFilter flt = createComponent(ctor, args, descr);\n          if (flt != null) {\n            spec.offsetsAreCorrect &= !brokenOffsets(ctor, args);\n            spec.stream = flt;\n            break;\n          }\n        }\n      }\n\n      // Insert ValidatingTF after each stage so we can\n      // catch problems right after the TF that \"caused\"\n      // them:\n      spec.stream = new ValidatingTokenFilter(spec.stream, \"last stage\", spec.offsetsAreCorrect);\n\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","sourceOld":"    private TokenFilterSpec newFilterChain(Random random, Tokenizer tokenizer, boolean offsetsAreCorrect) {\n      TokenFilterSpec spec = new TokenFilterSpec();\n      spec.offsetsAreCorrect = offsetsAreCorrect;\n      spec.stream = tokenizer;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(5);\n      for (int i = 0; i < numFilters; i++) {\n\n        // Insert ValidatingTF after each stage so we can\n        // catch problems right after the TF that \"caused\"\n        // them:\n        spec.stream = new ValidatingTokenFilter(spec.stream, \"stage \" + i, spec.offsetsAreCorrect);\n\n        while (true) {\n          final Constructor<? extends TokenFilter> ctor = tokenfilters.get(random.nextInt(tokenfilters.size()));\n          \n          // hack: MockGraph/MockLookahead has assertions that will trip if they follow\n          // an offsets violator. so we cant use them after e.g. wikipediatokenizer\n          if (!spec.offsetsAreCorrect &&\n              (ctor.getDeclaringClass().equals(MockGraphTokenFilter.class)\n               || ctor.getDeclaringClass().equals(MockRandomLookaheadTokenFilter.class))) {\n            continue;\n          }\n          \n          final Object args[] = newFilterArgs(random, spec.stream, ctor.getParameterTypes());\n          final TokenFilter flt = createComponent(ctor, args, descr);\n          if (flt != null) {\n            if (brokenOffsetsComponents.contains(ctor.getDeclaringClass())) {\n              spec.offsetsAreCorrect = false;\n            }\n            spec.stream = flt;\n            break;\n          }\n        }\n      }\n\n      // Insert ValidatingTF after each stage so we can\n      // catch problems right after the TF that \"caused\"\n      // them:\n      spec.stream = new ValidatingTokenFilter(spec.stream, \"last stage\", spec.offsetsAreCorrect);\n\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newFilterChain(Random,Tokenizer,boolean).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newFilterChain(Random,Tokenizer,boolean).mjava","sourceNew":"    private TokenFilterSpec newFilterChain(Random random, Tokenizer tokenizer, boolean offsetsAreCorrect) {\n      TokenFilterSpec spec = new TokenFilterSpec();\n      spec.offsetsAreCorrect = offsetsAreCorrect;\n      spec.stream = tokenizer;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(5);\n      for (int i = 0; i < numFilters; i++) {\n\n        // Insert ValidatingTF after each stage so we can\n        // catch problems right after the TF that \"caused\"\n        // them:\n        spec.stream = new ValidatingTokenFilter(spec.stream, \"stage \" + i, spec.offsetsAreCorrect);\n\n        while (true) {\n          final Constructor<? extends TokenFilter> ctor = tokenfilters.get(random.nextInt(tokenfilters.size()));\n          \n          // hack: MockGraph/MockLookahead has assertions that will trip if they follow\n          // an offsets violator. so we cant use them after e.g. wikipediatokenizer\n          if (!spec.offsetsAreCorrect &&\n              (ctor.getDeclaringClass().equals(MockGraphTokenFilter.class)\n               || ctor.getDeclaringClass().equals(MockRandomLookaheadTokenFilter.class))) {\n            continue;\n          }\n          \n          final Object args[] = newFilterArgs(random, spec.stream, ctor.getParameterTypes());\n          if (broken(ctor, args)) {\n            continue;\n          }\n          final TokenFilter flt = createComponent(ctor, args, descr);\n          if (flt != null) {\n            spec.offsetsAreCorrect &= !brokenOffsets(ctor, args);\n            spec.stream = flt;\n            break;\n          }\n        }\n      }\n\n      // Insert ValidatingTF after each stage so we can\n      // catch problems right after the TF that \"caused\"\n      // them:\n      spec.stream = new ValidatingTokenFilter(spec.stream, \"last stage\", spec.offsetsAreCorrect);\n\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","sourceOld":"    private TokenFilterSpec newFilterChain(Random random, Tokenizer tokenizer, boolean offsetsAreCorrect) {\n      TokenFilterSpec spec = new TokenFilterSpec();\n      spec.offsetsAreCorrect = offsetsAreCorrect;\n      spec.stream = tokenizer;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(5);\n      for (int i = 0; i < numFilters; i++) {\n\n        // Insert ValidatingTF after each stage so we can\n        // catch problems right after the TF that \"caused\"\n        // them:\n        spec.stream = new ValidatingTokenFilter(spec.stream, \"stage \" + i, spec.offsetsAreCorrect);\n\n        while (true) {\n          final Constructor<? extends TokenFilter> ctor = tokenfilters.get(random.nextInt(tokenfilters.size()));\n          \n          // hack: MockGraph/MockLookahead has assertions that will trip if they follow\n          // an offsets violator. so we cant use them after e.g. wikipediatokenizer\n          if (!spec.offsetsAreCorrect &&\n              (ctor.getDeclaringClass().equals(MockGraphTokenFilter.class)\n               || ctor.getDeclaringClass().equals(MockRandomLookaheadTokenFilter.class))) {\n            continue;\n          }\n          \n          final Object args[] = newFilterArgs(random, spec.stream, ctor.getParameterTypes());\n          final TokenFilter flt = createComponent(ctor, args, descr);\n          if (flt != null) {\n            if (brokenOffsetsComponents.contains(ctor.getDeclaringClass())) {\n              spec.offsetsAreCorrect = false;\n            }\n            spec.stream = flt;\n            break;\n          }\n        }\n      }\n\n      // Insert ValidatingTF after each stage so we can\n      // catch problems right after the TF that \"caused\"\n      // them:\n      spec.stream = new ValidatingTokenFilter(spec.stream, \"last stage\", spec.offsetsAreCorrect);\n\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad55dd51ee5593c207639943b98a58782872b232","date":1520180625,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newFilterChain(Random,Tokenizer).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#newFilterChain(Random,Tokenizer,boolean).mjava","sourceNew":"    private TokenFilterSpec newFilterChain(Random random, Tokenizer tokenizer) {\n      TokenFilterSpec spec = new TokenFilterSpec();\n      spec.stream = tokenizer;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(5);\n      for (int i = 0; i < numFilters; i++) {\n\n        // Insert ValidatingTF after each stage so we can\n        // catch problems right after the TF that \"caused\"\n        // them:\n        spec.stream = new ValidatingTokenFilter(spec.stream, \"stage \" + i);\n\n        while (true) {\n          final Constructor<? extends TokenFilter> ctor = tokenfilters.get(random.nextInt(tokenfilters.size()));\n          \n          final Object args[] = newFilterArgs(random, spec.stream, ctor.getParameterTypes());\n          if (broken(ctor, args)) {\n            continue;\n          }\n          final TokenFilter flt = createComponent(ctor, args, descr);\n          if (flt != null) {\n            spec.stream = flt;\n            break;\n          }\n        }\n      }\n\n      // Insert ValidatingTF after each stage so we can\n      // catch problems right after the TF that \"caused\"\n      // them:\n      spec.stream = new ValidatingTokenFilter(spec.stream, \"last stage\");\n\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","sourceOld":"    private TokenFilterSpec newFilterChain(Random random, Tokenizer tokenizer, boolean offsetsAreCorrect) {\n      TokenFilterSpec spec = new TokenFilterSpec();\n      spec.offsetsAreCorrect = offsetsAreCorrect;\n      spec.stream = tokenizer;\n      StringBuilder descr = new StringBuilder();\n      int numFilters = random.nextInt(5);\n      for (int i = 0; i < numFilters; i++) {\n\n        // Insert ValidatingTF after each stage so we can\n        // catch problems right after the TF that \"caused\"\n        // them:\n        spec.stream = new ValidatingTokenFilter(spec.stream, \"stage \" + i, spec.offsetsAreCorrect);\n\n        while (true) {\n          final Constructor<? extends TokenFilter> ctor = tokenfilters.get(random.nextInt(tokenfilters.size()));\n          \n          // hack: MockGraph/MockLookahead has assertions that will trip if they follow\n          // an offsets violator. so we cant use them after e.g. wikipediatokenizer\n          if (!spec.offsetsAreCorrect &&\n              (ctor.getDeclaringClass().equals(MockGraphTokenFilter.class)\n               || ctor.getDeclaringClass().equals(MockRandomLookaheadTokenFilter.class))) {\n            continue;\n          }\n          \n          final Object args[] = newFilterArgs(random, spec.stream, ctor.getParameterTypes());\n          if (broken(ctor, args)) {\n            continue;\n          }\n          final TokenFilter flt = createComponent(ctor, args, descr);\n          if (flt != null) {\n            spec.offsetsAreCorrect &= !brokenOffsets(ctor, args);\n            spec.stream = flt;\n            break;\n          }\n        }\n      }\n\n      // Insert ValidatingTF after each stage so we can\n      // catch problems right after the TF that \"caused\"\n      // them:\n      spec.stream = new ValidatingTokenFilter(spec.stream, \"last stage\", spec.offsetsAreCorrect);\n\n      spec.toString = descr.toString();\n      return spec;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ad55dd51ee5593c207639943b98a58782872b232":["19786ac48e7c7cb2da0d29218e579be4c750f8ff"],"19786ac48e7c7cb2da0d29218e579be4c750f8ff":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["b89678825b68eccaf09e6ab71675fc0b0af1e099","19786ac48e7c7cb2da0d29218e579be4c750f8ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad55dd51ee5593c207639943b98a58782872b232"]},"commit2Childs":{"ad55dd51ee5593c207639943b98a58782872b232":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"19786ac48e7c7cb2da0d29218e579be4c750f8ff":["ad55dd51ee5593c207639943b98a58782872b232","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["19786ac48e7c7cb2da0d29218e579be4c750f8ff","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}