{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#getMatchingNode(XMLStreamReader,List[Node]).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#getMatchingNode(XMLStreamReader,List[Node]).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#getMatchingNode(XMLStreamReader,List[Node]).mjava","sourceNew":"    /**\n     * Check if the current tag is to be parsed or not. We step through the\n     * supplied List \"searchList\" looking for a match. If matched, return the\n     * Node object.\n     */\n    private Node getMatchingNode(XMLStreamReader parser,List<Node> searchL){\n      if (searchL == null)\n        return null;\n      String localName = parser.getLocalName();\n      for (Node n : searchL) {\n        if (n.name.equals(localName)) {\n          if (n.attribAndValues == null)\n            return n;\n          if (checkForAttributes(parser, n.attribAndValues))\n            return n;\n        }\n      }\n      return null;\n    }\n\n","sourceOld":"    /**\n     * Check if the current tag is to be parsed or not. We step through the\n     * supplied List \"searchList\" looking for a match. If matched, return the\n     * Node object.\n     */\n    private Node getMatchingNode(XMLStreamReader parser,List<Node> searchL){\n      if (searchL == null)\n        return null;\n      String localName = parser.getLocalName();\n      for (Node n : searchL) {\n        if (n.name.equals(localName)) {\n          if (n.attribAndValues == null)\n            return n;\n          if (checkForAttributes(parser, n.attribAndValues))\n            return n;\n        }\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#getMatchingNode(XMLStreamReader,List[Node]).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#getMatchingNode(XMLStreamReader,List[Node]).mjava","sourceNew":"    /**\n     * Check if the current tag is to be parsed or not. We step through the\n     * supplied List \"searchList\" looking for a match. If matched, return the\n     * Node object.\n     */\n    private Node getMatchingNode(XMLStreamReader parser,List<Node> searchL){\n      if (searchL == null)\n        return null;\n      String localName = parser.getLocalName();\n      for (Node n : searchL) {\n        if (n.name.equals(localName)) {\n          if (n.attribAndValues == null)\n            return n;\n          if (checkForAttributes(parser, n.attribAndValues))\n            return n;\n        }\n      }\n      return null;\n    }\n\n","sourceOld":"    /**\n     * Check if the current tag is to be parsed or not. We step through the\n     * supplied List \"searchList\" looking for a match. If matched, return the\n     * Node object.\n     */\n    private Node getMatchingNode(XMLStreamReader parser,List<Node> searchL){\n      if (searchL == null)\n        return null;\n      String localName = parser.getLocalName();\n      for (Node n : searchL) {\n        if (n.name.equals(localName)) {\n          if (n.attribAndValues == null)\n            return n;\n          if (checkForAttributes(parser, n.attribAndValues))\n            return n;\n        }\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#getMatchingNode(XMLStreamReader,List[Node]).mjava","sourceNew":null,"sourceOld":"    /**\n     * Check if the current tag is to be parsed or not. We step through the\n     * supplied List \"searchList\" looking for a match. If matched, return the\n     * Node object.\n     */\n    private Node getMatchingNode(XMLStreamReader parser,List<Node> searchL){\n      if (searchL == null)\n        return null;\n      String localName = parser.getLocalName();\n      for (Node n : searchL) {\n        if (n.name.equals(localName)) {\n          if (n.attribAndValues == null)\n            return n;\n          if (checkForAttributes(parser, n.attribAndValues))\n            return n;\n        }\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["c26f00b574427b55127e869b935845554afde1fa"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}