{"path":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(MergeTrigger,SegmentInfos,IndexWriter).mjava","commits":[{"id":"027bee21e09164c9ee230395405076d1e0034b30","date":1401521821,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(MergeTrigger,SegmentInfos,IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(MergeTrigger,SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos infos, IndexWriter writer) throws IOException {\n    if (verbose(writer)) {\n      message(\"findMerges: \" + infos.size() + \" segments\", writer);\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentCommitInfo> merging = writer.getMergingSegments();\n    final Collection<SegmentCommitInfo> toBeMerged = new HashSet<>();\n\n    final List<SegmentCommitInfo> infosSorted = new ArrayList<>(infos.asList());\n    Collections.sort(infosSorted, new SegmentByteSizeDescending(writer));\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentCommitInfo info : infosSorted) {\n      final long segBytes = size(info, writer);\n      if (verbose(writer)) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.segString(info) + \" size=\" + String.format(Locale.ROOT, \"%.3f\", segBytes/1024/1024.) + \" MB\" + extra, writer);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size() && size(infosSorted.get(tooBigCount), writer) >= maxMergedSegmentBytes/2.0) {\n      totIndexBytes -= size(infosSorted.get(tooBigCount), writer);\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentCommitInfo> eligible = new ArrayList<>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentCommitInfo info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += info.sizeInBytes();\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      if (verbose(writer)) {\n        message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount, writer);\n      }\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() > allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentCommitInfo> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentCommitInfo> candidate = new ArrayList<>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentCommitInfo info = eligible.get(idx);\n            final long segBytes = size(info, writer);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes, writer);\n          if (verbose(writer)) {\n            message(\"  maybe=\" + writer.segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", totAfterMergeBytes/1024./1024.), writer);\n          }\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentCommitInfo info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose(writer)) {\n            message(\"  add merge=\" + writer.segString(merge.segments) + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(Locale.ROOT, \"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"), writer);\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos infos) throws IOException {\n    if (verbose()) {\n      message(\"findMerges: \" + infos.size() + \" segments\");\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentCommitInfo> merging = writer.get().getMergingSegments();\n    final Collection<SegmentCommitInfo> toBeMerged = new HashSet<>();\n\n    final List<SegmentCommitInfo> infosSorted = new ArrayList<>(infos.asList());\n    Collections.sort(infosSorted, new SegmentByteSizeDescending());\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentCommitInfo info : infosSorted) {\n      final long segBytes = size(info);\n      if (verbose()) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.get().segString(info) + \" size=\" + String.format(Locale.ROOT, \"%.3f\", segBytes/1024/1024.) + \" MB\" + extra);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size() && size(infosSorted.get(tooBigCount)) >= maxMergedSegmentBytes/2.0) {\n      totIndexBytes -= size(infosSorted.get(tooBigCount));\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentCommitInfo> eligible = new ArrayList<>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentCommitInfo info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += info.sizeInBytes();\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      if (verbose()) {\n        message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount);\n      }\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() > allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentCommitInfo> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentCommitInfo> candidate = new ArrayList<>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentCommitInfo info = eligible.get(idx);\n            final long segBytes = size(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes);\n          if (verbose()) {\n            message(\"  maybe=\" + writer.get().segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", totAfterMergeBytes/1024./1024.));\n          }\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentCommitInfo info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose()) {\n            message(\"  add merge=\" + writer.get().segString(merge.segments) + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(Locale.ROOT, \"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"));\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39cc7fae4e4c6be7c74434527ee9852592db649f","date":1412761164,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(MergeTrigger,SegmentInfos,IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(MergeTrigger,SegmentInfos,IndexWriter).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos infos, IndexWriter writer) throws IOException {\n    if (verbose(writer)) {\n      message(\"findMerges: \" + infos.size() + \" segments\", writer);\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentCommitInfo> merging = writer.getMergingSegments();\n    final Collection<SegmentCommitInfo> toBeMerged = new HashSet<>();\n\n    final List<SegmentCommitInfo> infosSorted = new ArrayList<>(infos.asList());\n    Collections.sort(infosSorted, new SegmentByteSizeDescending(writer));\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentCommitInfo info : infosSorted) {\n      final long segBytes = size(info, writer);\n      if (verbose(writer)) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.segString(info) + \" size=\" + String.format(Locale.ROOT, \"%.3f\", segBytes/1024/1024.) + \" MB\" + extra, writer);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size()) {\n      long segBytes = size(infosSorted.get(tooBigCount), writer);\n      if (segBytes < maxMergedSegmentBytes/2.0) {\n        break;\n      }\n      totIndexBytes -= segBytes;\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentCommitInfo> eligible = new ArrayList<>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentCommitInfo info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += size(info, writer);\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      if (verbose(writer)) {\n        message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount, writer);\n      }\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() > allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentCommitInfo> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentCommitInfo> candidate = new ArrayList<>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentCommitInfo info = eligible.get(idx);\n            final long segBytes = size(info, writer);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          // We should never see an empty candidate: we iterated over maxMergeAtOnce\n          // segments, and already pre-excluded the too-large segments:\n          assert candidate.size() > 0;\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes, writer);\n          if (verbose(writer)) {\n            message(\"  maybe=\" + writer.segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", totAfterMergeBytes/1024./1024.), writer);\n          }\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentCommitInfo info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose(writer)) {\n            message(\"  add merge=\" + writer.segString(merge.segments) + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(Locale.ROOT, \"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"), writer);\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos infos, IndexWriter writer) throws IOException {\n    if (verbose(writer)) {\n      message(\"findMerges: \" + infos.size() + \" segments\", writer);\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentCommitInfo> merging = writer.getMergingSegments();\n    final Collection<SegmentCommitInfo> toBeMerged = new HashSet<>();\n\n    final List<SegmentCommitInfo> infosSorted = new ArrayList<>(infos.asList());\n    Collections.sort(infosSorted, new SegmentByteSizeDescending(writer));\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentCommitInfo info : infosSorted) {\n      final long segBytes = size(info, writer);\n      if (verbose(writer)) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.segString(info) + \" size=\" + String.format(Locale.ROOT, \"%.3f\", segBytes/1024/1024.) + \" MB\" + extra, writer);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size() && size(infosSorted.get(tooBigCount), writer) >= maxMergedSegmentBytes/2.0) {\n      totIndexBytes -= size(infosSorted.get(tooBigCount), writer);\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentCommitInfo> eligible = new ArrayList<>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentCommitInfo info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += info.sizeInBytes();\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      if (verbose(writer)) {\n        message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount, writer);\n      }\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() > allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentCommitInfo> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentCommitInfo> candidate = new ArrayList<>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentCommitInfo info = eligible.get(idx);\n            final long segBytes = size(info, writer);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes, writer);\n          if (verbose(writer)) {\n            message(\"  maybe=\" + writer.segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", totAfterMergeBytes/1024./1024.), writer);\n          }\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentCommitInfo info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose(writer)) {\n            message(\"  add merge=\" + writer.segString(merge.segments) + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(Locale.ROOT, \"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"), writer);\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(MergeTrigger,SegmentInfos,IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(MergeTrigger,SegmentInfos,IndexWriter).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos infos, IndexWriter writer) throws IOException {\n    if (verbose(writer)) {\n      message(\"findMerges: \" + infos.size() + \" segments\", writer);\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentCommitInfo> merging = writer.getMergingSegments();\n    final Collection<SegmentCommitInfo> toBeMerged = new HashSet<>();\n\n    final List<SegmentCommitInfo> infosSorted = new ArrayList<>(infos.asList());\n    Collections.sort(infosSorted, new SegmentByteSizeDescending(writer));\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentCommitInfo info : infosSorted) {\n      final long segBytes = size(info, writer);\n      if (verbose(writer)) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.segString(info) + \" size=\" + String.format(Locale.ROOT, \"%.3f\", segBytes/1024/1024.) + \" MB\" + extra, writer);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size()) {\n      long segBytes = size(infosSorted.get(tooBigCount), writer);\n      if (segBytes < maxMergedSegmentBytes/2.0) {\n        break;\n      }\n      totIndexBytes -= segBytes;\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentCommitInfo> eligible = new ArrayList<>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentCommitInfo info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += size(info, writer);\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      if (verbose(writer)) {\n        message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount, writer);\n      }\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() > allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentCommitInfo> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentCommitInfo> candidate = new ArrayList<>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentCommitInfo info = eligible.get(idx);\n            final long segBytes = size(info, writer);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          // We should never see an empty candidate: we iterated over maxMergeAtOnce\n          // segments, and already pre-excluded the too-large segments:\n          assert candidate.size() > 0;\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes, writer);\n          if (verbose(writer)) {\n            message(\"  maybe=\" + writer.segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", totAfterMergeBytes/1024./1024.), writer);\n          }\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentCommitInfo info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose(writer)) {\n            message(\"  add merge=\" + writer.segString(merge.segments) + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(Locale.ROOT, \"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"), writer);\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos infos, IndexWriter writer) throws IOException {\n    if (verbose(writer)) {\n      message(\"findMerges: \" + infos.size() + \" segments\", writer);\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentCommitInfo> merging = writer.getMergingSegments();\n    final Collection<SegmentCommitInfo> toBeMerged = new HashSet<>();\n\n    final List<SegmentCommitInfo> infosSorted = new ArrayList<>(infos.asList());\n    Collections.sort(infosSorted, new SegmentByteSizeDescending(writer));\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentCommitInfo info : infosSorted) {\n      final long segBytes = size(info, writer);\n      if (verbose(writer)) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.segString(info) + \" size=\" + String.format(Locale.ROOT, \"%.3f\", segBytes/1024/1024.) + \" MB\" + extra, writer);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size() && size(infosSorted.get(tooBigCount), writer) >= maxMergedSegmentBytes/2.0) {\n      totIndexBytes -= size(infosSorted.get(tooBigCount), writer);\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentCommitInfo> eligible = new ArrayList<>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentCommitInfo info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += info.sizeInBytes();\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      if (verbose(writer)) {\n        message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount, writer);\n      }\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() > allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentCommitInfo> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentCommitInfo> candidate = new ArrayList<>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentCommitInfo info = eligible.get(idx);\n            final long segBytes = size(info, writer);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes, writer);\n          if (verbose(writer)) {\n            message(\"  maybe=\" + writer.segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", totAfterMergeBytes/1024./1024.), writer);\n          }\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentCommitInfo info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose(writer)) {\n            message(\"  add merge=\" + writer.segString(merge.segments) + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(Locale.ROOT, \"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"), writer);\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(MergeTrigger,SegmentInfos,IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(MergeTrigger,SegmentInfos,IndexWriter).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos infos, IndexWriter writer) throws IOException {\n    if (verbose(writer)) {\n      message(\"findMerges: \" + infos.size() + \" segments\", writer);\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentCommitInfo> merging = writer.getMergingSegments();\n    final Collection<SegmentCommitInfo> toBeMerged = new HashSet<>();\n\n    final List<SegmentCommitInfo> infosSorted = new ArrayList<>(infos.asList());\n\n    // The size can change concurrently while we are running here, because deletes\n    // are now applied concurrently, and this can piss off TimSort!  So we\n    // call size() once per segment and sort by that:\n    Map<SegmentCommitInfo,Long> sizeInBytes = getSegmentSizes(writer, infos.asList());\n    \n    Collections.sort(infosSorted, new SegmentByteSizeDescending(sizeInBytes));\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentCommitInfo info : infosSorted) {\n      final long segBytes = sizeInBytes.get(info);\n      if (verbose(writer)) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.segString(info) + \" size=\" + String.format(Locale.ROOT, \"%.3f\", segBytes/1024/1024.) + \" MB\" + extra, writer);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size()) {\n      long segBytes = sizeInBytes.get(infosSorted.get(tooBigCount));\n      if (segBytes < maxMergedSegmentBytes/2.0) {\n        break;\n      }\n      totIndexBytes -= segBytes;\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentCommitInfo> eligible = new ArrayList<>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentCommitInfo info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += sizeInBytes.get(info);\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      if (verbose(writer)) {\n        message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount, writer);\n      }\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() > allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentCommitInfo> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentCommitInfo> candidate = new ArrayList<>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentCommitInfo info = eligible.get(idx);\n            final long segBytes = sizeInBytes.get(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          // We should never see an empty candidate: we iterated over maxMergeAtOnce\n          // segments, and already pre-excluded the too-large segments:\n          assert candidate.size() > 0;\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes, writer, sizeInBytes);\n          if (verbose(writer)) {\n            message(\"  maybe=\" + writer.segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", totAfterMergeBytes/1024./1024.), writer);\n          }\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentCommitInfo info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose(writer)) {\n            message(\"  add merge=\" + writer.segString(merge.segments) + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(Locale.ROOT, \"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"), writer);\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos infos, IndexWriter writer) throws IOException {\n    if (verbose(writer)) {\n      message(\"findMerges: \" + infos.size() + \" segments\", writer);\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentCommitInfo> merging = writer.getMergingSegments();\n    final Collection<SegmentCommitInfo> toBeMerged = new HashSet<>();\n\n    final List<SegmentCommitInfo> infosSorted = new ArrayList<>(infos.asList());\n    Collections.sort(infosSorted, new SegmentByteSizeDescending(writer));\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentCommitInfo info : infosSorted) {\n      final long segBytes = size(info, writer);\n      if (verbose(writer)) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.segString(info) + \" size=\" + String.format(Locale.ROOT, \"%.3f\", segBytes/1024/1024.) + \" MB\" + extra, writer);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size()) {\n      long segBytes = size(infosSorted.get(tooBigCount), writer);\n      if (segBytes < maxMergedSegmentBytes/2.0) {\n        break;\n      }\n      totIndexBytes -= segBytes;\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentCommitInfo> eligible = new ArrayList<>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentCommitInfo info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += size(info, writer);\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      if (verbose(writer)) {\n        message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount, writer);\n      }\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() > allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentCommitInfo> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentCommitInfo> candidate = new ArrayList<>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentCommitInfo info = eligible.get(idx);\n            final long segBytes = size(info, writer);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          // We should never see an empty candidate: we iterated over maxMergeAtOnce\n          // segments, and already pre-excluded the too-large segments:\n          assert candidate.size() > 0;\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes, writer);\n          if (verbose(writer)) {\n            message(\"  maybe=\" + writer.segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", totAfterMergeBytes/1024./1024.), writer);\n          }\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentCommitInfo info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose(writer)) {\n            message(\"  add merge=\" + writer.segString(merge.segments) + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(Locale.ROOT, \"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"), writer);\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(MergeTrigger,SegmentInfos,IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(MergeTrigger,SegmentInfos,IndexWriter).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos infos, IndexWriter writer) throws IOException {\n    if (verbose(writer)) {\n      message(\"findMerges: \" + infos.size() + \" segments\", writer);\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentCommitInfo> merging = writer.getMergingSegments();\n    final Collection<SegmentCommitInfo> toBeMerged = new HashSet<>();\n\n    final List<SegmentCommitInfo> infosSorted = new ArrayList<>(infos.asList());\n\n    // The size can change concurrently while we are running here, because deletes\n    // are now applied concurrently, and this can piss off TimSort!  So we\n    // call size() once per segment and sort by that:\n    Map<SegmentCommitInfo,Long> sizeInBytes = getSegmentSizes(writer, infos.asList());\n    \n    Collections.sort(infosSorted, new SegmentByteSizeDescending(sizeInBytes));\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentCommitInfo info : infosSorted) {\n      final long segBytes = sizeInBytes.get(info);\n      if (verbose(writer)) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.segString(info) + \" size=\" + String.format(Locale.ROOT, \"%.3f\", segBytes/1024/1024.) + \" MB\" + extra, writer);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size()) {\n      long segBytes = sizeInBytes.get(infosSorted.get(tooBigCount));\n      if (segBytes < maxMergedSegmentBytes/2.0) {\n        break;\n      }\n      totIndexBytes -= segBytes;\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentCommitInfo> eligible = new ArrayList<>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentCommitInfo info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += sizeInBytes.get(info);\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      if (verbose(writer)) {\n        message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount, writer);\n      }\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() > allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentCommitInfo> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentCommitInfo> candidate = new ArrayList<>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentCommitInfo info = eligible.get(idx);\n            final long segBytes = sizeInBytes.get(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          // We should never see an empty candidate: we iterated over maxMergeAtOnce\n          // segments, and already pre-excluded the too-large segments:\n          assert candidate.size() > 0;\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes, writer, sizeInBytes);\n          if (verbose(writer)) {\n            message(\"  maybe=\" + writer.segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", totAfterMergeBytes/1024./1024.), writer);\n          }\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentCommitInfo info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose(writer)) {\n            message(\"  add merge=\" + writer.segString(merge.segments) + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(Locale.ROOT, \"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"), writer);\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos infos, IndexWriter writer) throws IOException {\n    if (verbose(writer)) {\n      message(\"findMerges: \" + infos.size() + \" segments\", writer);\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentCommitInfo> merging = writer.getMergingSegments();\n    final Collection<SegmentCommitInfo> toBeMerged = new HashSet<>();\n\n    final List<SegmentCommitInfo> infosSorted = new ArrayList<>(infos.asList());\n    Collections.sort(infosSorted, new SegmentByteSizeDescending(writer));\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentCommitInfo info : infosSorted) {\n      final long segBytes = size(info, writer);\n      if (verbose(writer)) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.segString(info) + \" size=\" + String.format(Locale.ROOT, \"%.3f\", segBytes/1024/1024.) + \" MB\" + extra, writer);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size()) {\n      long segBytes = size(infosSorted.get(tooBigCount), writer);\n      if (segBytes < maxMergedSegmentBytes/2.0) {\n        break;\n      }\n      totIndexBytes -= segBytes;\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentCommitInfo> eligible = new ArrayList<>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentCommitInfo info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += size(info, writer);\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      if (verbose(writer)) {\n        message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount, writer);\n      }\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() > allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentCommitInfo> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentCommitInfo> candidate = new ArrayList<>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentCommitInfo info = eligible.get(idx);\n            final long segBytes = size(info, writer);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          // We should never see an empty candidate: we iterated over maxMergeAtOnce\n          // segments, and already pre-excluded the too-large segments:\n          assert candidate.size() > 0;\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes, writer);\n          if (verbose(writer)) {\n            message(\"  maybe=\" + writer.segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", totAfterMergeBytes/1024./1024.), writer);\n          }\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentCommitInfo info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose(writer)) {\n            message(\"  add merge=\" + writer.segString(merge.segments) + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(Locale.ROOT, \"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"), writer);\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(MergeTrigger,SegmentInfos,IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(MergeTrigger,SegmentInfos,IndexWriter).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos infos, IndexWriter writer) throws IOException {\n    if (verbose(writer)) {\n      message(\"findMerges: \" + infos.size() + \" segments\", writer);\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentCommitInfo> merging = writer.getMergingSegments();\n    final Collection<SegmentCommitInfo> toBeMerged = new HashSet<>();\n\n    final List<SegmentCommitInfo> infosSorted = new ArrayList<>(infos.asList());\n\n    // The size can change concurrently while we are running here, because deletes\n    // are now applied concurrently, and this can piss off TimSort!  So we\n    // call size() once per segment and sort by that:\n    Map<SegmentCommitInfo,Long> sizeInBytes = getSegmentSizes(writer, infos.asList());\n    \n    Collections.sort(infosSorted, new SegmentByteSizeDescending(sizeInBytes));\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentCommitInfo info : infosSorted) {\n      final long segBytes = sizeInBytes.get(info);\n      if (verbose(writer)) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.segString(info) + \" size=\" + String.format(Locale.ROOT, \"%.3f\", segBytes/1024/1024.) + \" MB\" + extra, writer);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size()) {\n      long segBytes = sizeInBytes.get(infosSorted.get(tooBigCount));\n      if (segBytes < maxMergedSegmentBytes/2.0) {\n        break;\n      }\n      totIndexBytes -= segBytes;\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentCommitInfo> eligible = new ArrayList<>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentCommitInfo info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += sizeInBytes.get(info);\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      if (verbose(writer)) {\n        message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount, writer);\n      }\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() > allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentCommitInfo> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentCommitInfo> candidate = new ArrayList<>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentCommitInfo info = eligible.get(idx);\n            final long segBytes = sizeInBytes.get(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          // We should never see an empty candidate: we iterated over maxMergeAtOnce\n          // segments, and already pre-excluded the too-large segments:\n          assert candidate.size() > 0;\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes, writer, sizeInBytes);\n          if (verbose(writer)) {\n            message(\"  maybe=\" + writer.segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", totAfterMergeBytes/1024./1024.), writer);\n          }\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentCommitInfo info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose(writer)) {\n            message(\"  add merge=\" + writer.segString(merge.segments) + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(Locale.ROOT, \"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"), writer);\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos infos, IndexWriter writer) throws IOException {\n    if (verbose(writer)) {\n      message(\"findMerges: \" + infos.size() + \" segments\", writer);\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentCommitInfo> merging = writer.getMergingSegments();\n    final Collection<SegmentCommitInfo> toBeMerged = new HashSet<>();\n\n    final List<SegmentCommitInfo> infosSorted = new ArrayList<>(infos.asList());\n    Collections.sort(infosSorted, new SegmentByteSizeDescending(writer));\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentCommitInfo info : infosSorted) {\n      final long segBytes = size(info, writer);\n      if (verbose(writer)) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.segString(info) + \" size=\" + String.format(Locale.ROOT, \"%.3f\", segBytes/1024/1024.) + \" MB\" + extra, writer);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size()) {\n      long segBytes = size(infosSorted.get(tooBigCount), writer);\n      if (segBytes < maxMergedSegmentBytes/2.0) {\n        break;\n      }\n      totIndexBytes -= segBytes;\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentCommitInfo> eligible = new ArrayList<>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentCommitInfo info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += size(info, writer);\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      if (verbose(writer)) {\n        message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount, writer);\n      }\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() > allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentCommitInfo> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentCommitInfo> candidate = new ArrayList<>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentCommitInfo info = eligible.get(idx);\n            final long segBytes = size(info, writer);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          // We should never see an empty candidate: we iterated over maxMergeAtOnce\n          // segments, and already pre-excluded the too-large segments:\n          assert candidate.size() > 0;\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes, writer);\n          if (verbose(writer)) {\n            message(\"  maybe=\" + writer.segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", totAfterMergeBytes/1024./1024.), writer);\n          }\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentCommitInfo info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose(writer)) {\n            message(\"  add merge=\" + writer.segString(merge.segments) + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(Locale.ROOT, \"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"), writer);\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c0f10353be871363159f724b6419748c9b89c5c0","date":1501592481,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(MergeTrigger,SegmentInfos,IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(MergeTrigger,SegmentInfos,IndexWriter).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos infos, IndexWriter writer) throws IOException {\n    if (verbose(writer)) {\n      message(\"findMerges: \" + infos.size() + \" segments\", writer);\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentCommitInfo> merging = writer.getMergingSegments();\n    final Collection<SegmentCommitInfo> toBeMerged = new HashSet<>();\n\n    final List<SegmentCommitInfo> infosSorted = new ArrayList<>(infos.asList());\n\n    // The size can change concurrently while we are running here, because deletes\n    // are now applied concurrently, and this can piss off TimSort!  So we\n    // call size() once per segment and sort by that:\n    Map<SegmentCommitInfo,Long> sizeInBytes = getSegmentSizes(writer, infos.asList());\n    \n    infosSorted.sort(new SegmentByteSizeDescending(sizeInBytes));\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentCommitInfo info : infosSorted) {\n      final long segBytes = sizeInBytes.get(info);\n      if (verbose(writer)) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.segString(info) + \" size=\" + String.format(Locale.ROOT, \"%.3f\", segBytes/1024/1024.) + \" MB\" + extra, writer);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size()) {\n      long segBytes = sizeInBytes.get(infosSorted.get(tooBigCount));\n      if (segBytes < maxMergedSegmentBytes/2.0) {\n        break;\n      }\n      totIndexBytes -= segBytes;\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentCommitInfo> eligible = new ArrayList<>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentCommitInfo info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += sizeInBytes.get(info);\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      if (verbose(writer)) {\n        message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount, writer);\n      }\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() > allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentCommitInfo> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentCommitInfo> candidate = new ArrayList<>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentCommitInfo info = eligible.get(idx);\n            final long segBytes = sizeInBytes.get(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          // We should never see an empty candidate: we iterated over maxMergeAtOnce\n          // segments, and already pre-excluded the too-large segments:\n          assert candidate.size() > 0;\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes, writer, sizeInBytes);\n          if (verbose(writer)) {\n            message(\"  maybe=\" + writer.segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", totAfterMergeBytes/1024./1024.), writer);\n          }\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          toBeMerged.addAll(merge.segments);\n\n          if (verbose(writer)) {\n            message(\"  add merge=\" + writer.segString(merge.segments) + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(Locale.ROOT, \"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"), writer);\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos infos, IndexWriter writer) throws IOException {\n    if (verbose(writer)) {\n      message(\"findMerges: \" + infos.size() + \" segments\", writer);\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentCommitInfo> merging = writer.getMergingSegments();\n    final Collection<SegmentCommitInfo> toBeMerged = new HashSet<>();\n\n    final List<SegmentCommitInfo> infosSorted = new ArrayList<>(infos.asList());\n\n    // The size can change concurrently while we are running here, because deletes\n    // are now applied concurrently, and this can piss off TimSort!  So we\n    // call size() once per segment and sort by that:\n    Map<SegmentCommitInfo,Long> sizeInBytes = getSegmentSizes(writer, infos.asList());\n    \n    Collections.sort(infosSorted, new SegmentByteSizeDescending(sizeInBytes));\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentCommitInfo info : infosSorted) {\n      final long segBytes = sizeInBytes.get(info);\n      if (verbose(writer)) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.segString(info) + \" size=\" + String.format(Locale.ROOT, \"%.3f\", segBytes/1024/1024.) + \" MB\" + extra, writer);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size()) {\n      long segBytes = sizeInBytes.get(infosSorted.get(tooBigCount));\n      if (segBytes < maxMergedSegmentBytes/2.0) {\n        break;\n      }\n      totIndexBytes -= segBytes;\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentCommitInfo> eligible = new ArrayList<>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentCommitInfo info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += sizeInBytes.get(info);\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      if (verbose(writer)) {\n        message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount, writer);\n      }\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() > allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentCommitInfo> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentCommitInfo> candidate = new ArrayList<>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentCommitInfo info = eligible.get(idx);\n            final long segBytes = sizeInBytes.get(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          // We should never see an empty candidate: we iterated over maxMergeAtOnce\n          // segments, and already pre-excluded the too-large segments:\n          assert candidate.size() > 0;\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes, writer, sizeInBytes);\n          if (verbose(writer)) {\n            message(\"  maybe=\" + writer.segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", totAfterMergeBytes/1024./1024.), writer);\n          }\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentCommitInfo info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose(writer)) {\n            message(\"  add merge=\" + writer.segString(merge.segments) + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(Locale.ROOT, \"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"), writer);\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(MergeTrigger,SegmentInfos,IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(MergeTrigger,SegmentInfos,IndexWriter).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos infos, IndexWriter writer) throws IOException {\n    if (verbose(writer)) {\n      message(\"findMerges: \" + infos.size() + \" segments\", writer);\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentCommitInfo> merging = writer.getMergingSegments();\n    final Collection<SegmentCommitInfo> toBeMerged = new HashSet<>();\n\n    final List<SegmentCommitInfo> infosSorted = new ArrayList<>(infos.asList());\n\n    // The size can change concurrently while we are running here, because deletes\n    // are now applied concurrently, and this can piss off TimSort!  So we\n    // call size() once per segment and sort by that:\n    Map<SegmentCommitInfo,Long> sizeInBytes = getSegmentSizes(writer, infos.asList());\n    \n    infosSorted.sort(new SegmentByteSizeDescending(sizeInBytes));\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentCommitInfo info : infosSorted) {\n      final long segBytes = sizeInBytes.get(info);\n      if (verbose(writer)) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.segString(info) + \" size=\" + String.format(Locale.ROOT, \"%.3f\", segBytes/1024/1024.) + \" MB\" + extra, writer);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size()) {\n      long segBytes = sizeInBytes.get(infosSorted.get(tooBigCount));\n      if (segBytes < maxMergedSegmentBytes/2.0) {\n        break;\n      }\n      totIndexBytes -= segBytes;\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentCommitInfo> eligible = new ArrayList<>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentCommitInfo info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += sizeInBytes.get(info);\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      if (verbose(writer)) {\n        message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount, writer);\n      }\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() > allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentCommitInfo> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentCommitInfo> candidate = new ArrayList<>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentCommitInfo info = eligible.get(idx);\n            final long segBytes = sizeInBytes.get(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          // We should never see an empty candidate: we iterated over maxMergeAtOnce\n          // segments, and already pre-excluded the too-large segments:\n          assert candidate.size() > 0;\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes, writer, sizeInBytes);\n          if (verbose(writer)) {\n            message(\"  maybe=\" + writer.segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", totAfterMergeBytes/1024./1024.), writer);\n          }\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          toBeMerged.addAll(merge.segments);\n\n          if (verbose(writer)) {\n            message(\"  add merge=\" + writer.segString(merge.segments) + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(Locale.ROOT, \"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"), writer);\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos infos, IndexWriter writer) throws IOException {\n    if (verbose(writer)) {\n      message(\"findMerges: \" + infos.size() + \" segments\", writer);\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentCommitInfo> merging = writer.getMergingSegments();\n    final Collection<SegmentCommitInfo> toBeMerged = new HashSet<>();\n\n    final List<SegmentCommitInfo> infosSorted = new ArrayList<>(infos.asList());\n\n    // The size can change concurrently while we are running here, because deletes\n    // are now applied concurrently, and this can piss off TimSort!  So we\n    // call size() once per segment and sort by that:\n    Map<SegmentCommitInfo,Long> sizeInBytes = getSegmentSizes(writer, infos.asList());\n    \n    Collections.sort(infosSorted, new SegmentByteSizeDescending(sizeInBytes));\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentCommitInfo info : infosSorted) {\n      final long segBytes = sizeInBytes.get(info);\n      if (verbose(writer)) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.segString(info) + \" size=\" + String.format(Locale.ROOT, \"%.3f\", segBytes/1024/1024.) + \" MB\" + extra, writer);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size()) {\n      long segBytes = sizeInBytes.get(infosSorted.get(tooBigCount));\n      if (segBytes < maxMergedSegmentBytes/2.0) {\n        break;\n      }\n      totIndexBytes -= segBytes;\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentCommitInfo> eligible = new ArrayList<>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentCommitInfo info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += sizeInBytes.get(info);\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      if (verbose(writer)) {\n        message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount, writer);\n      }\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() > allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentCommitInfo> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentCommitInfo> candidate = new ArrayList<>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentCommitInfo info = eligible.get(idx);\n            final long segBytes = sizeInBytes.get(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          // We should never see an empty candidate: we iterated over maxMergeAtOnce\n          // segments, and already pre-excluded the too-large segments:\n          assert candidate.size() > 0;\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes, writer, sizeInBytes);\n          if (verbose(writer)) {\n            message(\"  maybe=\" + writer.segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", totAfterMergeBytes/1024./1024.), writer);\n          }\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          for(SegmentCommitInfo info : merge.segments) {\n            toBeMerged.add(info);\n          }\n\n          if (verbose(writer)) {\n            message(\"  add merge=\" + writer.segString(merge.segments) + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(Locale.ROOT, \"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"), writer);\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5399733c0eeb73827ff5b8aee51c110ec540e6f0","date":1511756706,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(MergeTrigger,SegmentInfos,IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(MergeTrigger,SegmentInfos,IndexWriter).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos infos, IndexWriter writer) throws IOException {\n    if (verbose(writer)) {\n      message(\"findMerges: \" + infos.size() + \" segments\", writer);\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Set<SegmentCommitInfo> merging = writer.getMergingSegments();\n    final Set<SegmentCommitInfo> toBeMerged = new HashSet<>();\n\n    final List<SegmentCommitInfo> infosSorted = new ArrayList<>(infos.asList());\n\n    // The size can change concurrently while we are running here, because deletes\n    // are now applied concurrently, and this can piss off TimSort!  So we\n    // call size() once per segment and sort by that:\n    Map<SegmentCommitInfo,Long> sizeInBytes = getSegmentSizes(writer, infos.asList());\n    \n    infosSorted.sort(new SegmentByteSizeDescending(sizeInBytes));\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentCommitInfo info : infosSorted) {\n      final long segBytes = sizeInBytes.get(info);\n      if (verbose(writer)) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.segString(info) + \" size=\" + String.format(Locale.ROOT, \"%.3f\", segBytes/1024/1024.) + \" MB\" + extra, writer);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size()) {\n      long segBytes = sizeInBytes.get(infosSorted.get(tooBigCount));\n      if (segBytes < maxMergedSegmentBytes/2.0) {\n        break;\n      }\n      totIndexBytes -= segBytes;\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentCommitInfo> eligible = new ArrayList<>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentCommitInfo info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += sizeInBytes.get(info);\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      if (verbose(writer)) {\n        message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount, writer);\n      }\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() > allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentCommitInfo> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentCommitInfo> candidate = new ArrayList<>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentCommitInfo info = eligible.get(idx);\n            final long segBytes = sizeInBytes.get(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          // We should never see an empty candidate: we iterated over maxMergeAtOnce\n          // segments, and already pre-excluded the too-large segments:\n          assert candidate.size() > 0;\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes, writer, sizeInBytes);\n          if (verbose(writer)) {\n            message(\"  maybe=\" + writer.segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", totAfterMergeBytes/1024./1024.), writer);\n          }\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          toBeMerged.addAll(merge.segments);\n\n          if (verbose(writer)) {\n            message(\"  add merge=\" + writer.segString(merge.segments) + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(Locale.ROOT, \"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"), writer);\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos infos, IndexWriter writer) throws IOException {\n    if (verbose(writer)) {\n      message(\"findMerges: \" + infos.size() + \" segments\", writer);\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentCommitInfo> merging = writer.getMergingSegments();\n    final Collection<SegmentCommitInfo> toBeMerged = new HashSet<>();\n\n    final List<SegmentCommitInfo> infosSorted = new ArrayList<>(infos.asList());\n\n    // The size can change concurrently while we are running here, because deletes\n    // are now applied concurrently, and this can piss off TimSort!  So we\n    // call size() once per segment and sort by that:\n    Map<SegmentCommitInfo,Long> sizeInBytes = getSegmentSizes(writer, infos.asList());\n    \n    infosSorted.sort(new SegmentByteSizeDescending(sizeInBytes));\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentCommitInfo info : infosSorted) {\n      final long segBytes = sizeInBytes.get(info);\n      if (verbose(writer)) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.segString(info) + \" size=\" + String.format(Locale.ROOT, \"%.3f\", segBytes/1024/1024.) + \" MB\" + extra, writer);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size()) {\n      long segBytes = sizeInBytes.get(infosSorted.get(tooBigCount));\n      if (segBytes < maxMergedSegmentBytes/2.0) {\n        break;\n      }\n      totIndexBytes -= segBytes;\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentCommitInfo> eligible = new ArrayList<>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentCommitInfo info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += sizeInBytes.get(info);\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      if (verbose(writer)) {\n        message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount, writer);\n      }\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() > allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentCommitInfo> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentCommitInfo> candidate = new ArrayList<>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentCommitInfo info = eligible.get(idx);\n            final long segBytes = sizeInBytes.get(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          // We should never see an empty candidate: we iterated over maxMergeAtOnce\n          // segments, and already pre-excluded the too-large segments:\n          assert candidate.size() > 0;\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes, writer, sizeInBytes);\n          if (verbose(writer)) {\n            message(\"  maybe=\" + writer.segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", totAfterMergeBytes/1024./1024.), writer);\n          }\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          toBeMerged.addAll(merge.segments);\n\n          if (verbose(writer)) {\n            message(\"  add merge=\" + writer.segString(merge.segments) + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(Locale.ROOT, \"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"), writer);\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f0e53d133180083c87dcb8114b087cfe6bfc7bce","date":1511856078,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(MergeTrigger,SegmentInfos,IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(MergeTrigger,SegmentInfos,IndexWriter).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos infos, IndexWriter writer) throws IOException {\n    if (verbose(writer)) {\n      message(\"findMerges: \" + infos.size() + \" segments\", writer);\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Set<SegmentCommitInfo> merging = writer.getMergingSegments();\n    final Set<SegmentCommitInfo> toBeMerged = new HashSet<>();\n\n    final List<SegmentCommitInfo> infosSorted = new ArrayList<>(infos.asList());\n\n    // The size can change concurrently while we are running here, because deletes\n    // are now applied concurrently, and this can piss off TimSort!  So we\n    // call size() once per segment and sort by that:\n    Map<SegmentCommitInfo,Long> sizeInBytes = getSegmentSizes(writer, infos.asList());\n    \n    infosSorted.sort(new SegmentByteSizeDescending(sizeInBytes));\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentCommitInfo info : infosSorted) {\n      final long segBytes = sizeInBytes.get(info);\n      if (verbose(writer)) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.segString(info) + \" size=\" + String.format(Locale.ROOT, \"%.3f\", segBytes/1024/1024.) + \" MB\" + extra, writer);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size()) {\n      long segBytes = sizeInBytes.get(infosSorted.get(tooBigCount));\n      if (segBytes < maxMergedSegmentBytes/2.0) {\n        break;\n      }\n      totIndexBytes -= segBytes;\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentCommitInfo> eligible = new ArrayList<>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentCommitInfo info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += sizeInBytes.get(info);\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      if (verbose(writer)) {\n        message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount, writer);\n      }\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() > allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentCommitInfo> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentCommitInfo> candidate = new ArrayList<>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentCommitInfo info = eligible.get(idx);\n            final long segBytes = sizeInBytes.get(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          // We should never see an empty candidate: we iterated over maxMergeAtOnce\n          // segments, and already pre-excluded the too-large segments:\n          assert candidate.size() > 0;\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes, writer, sizeInBytes);\n          if (verbose(writer)) {\n            message(\"  maybe=\" + writer.segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", totAfterMergeBytes/1024./1024.), writer);\n          }\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          toBeMerged.addAll(merge.segments);\n\n          if (verbose(writer)) {\n            message(\"  add merge=\" + writer.segString(merge.segments) + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(Locale.ROOT, \"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"), writer);\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos infos, IndexWriter writer) throws IOException {\n    if (verbose(writer)) {\n      message(\"findMerges: \" + infos.size() + \" segments\", writer);\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Collection<SegmentCommitInfo> merging = writer.getMergingSegments();\n    final Collection<SegmentCommitInfo> toBeMerged = new HashSet<>();\n\n    final List<SegmentCommitInfo> infosSorted = new ArrayList<>(infos.asList());\n\n    // The size can change concurrently while we are running here, because deletes\n    // are now applied concurrently, and this can piss off TimSort!  So we\n    // call size() once per segment and sort by that:\n    Map<SegmentCommitInfo,Long> sizeInBytes = getSegmentSizes(writer, infos.asList());\n    \n    infosSorted.sort(new SegmentByteSizeDescending(sizeInBytes));\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentCommitInfo info : infosSorted) {\n      final long segBytes = sizeInBytes.get(info);\n      if (verbose(writer)) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.segString(info) + \" size=\" + String.format(Locale.ROOT, \"%.3f\", segBytes/1024/1024.) + \" MB\" + extra, writer);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size()) {\n      long segBytes = sizeInBytes.get(infosSorted.get(tooBigCount));\n      if (segBytes < maxMergedSegmentBytes/2.0) {\n        break;\n      }\n      totIndexBytes -= segBytes;\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentCommitInfo> eligible = new ArrayList<>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentCommitInfo info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += sizeInBytes.get(info);\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      if (verbose(writer)) {\n        message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount, writer);\n      }\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() > allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentCommitInfo> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentCommitInfo> candidate = new ArrayList<>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentCommitInfo info = eligible.get(idx);\n            final long segBytes = sizeInBytes.get(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          // We should never see an empty candidate: we iterated over maxMergeAtOnce\n          // segments, and already pre-excluded the too-large segments:\n          assert candidate.size() > 0;\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes, writer, sizeInBytes);\n          if (verbose(writer)) {\n            message(\"  maybe=\" + writer.segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", totAfterMergeBytes/1024./1024.), writer);\n          }\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          toBeMerged.addAll(merge.segments);\n\n          if (verbose(writer)) {\n            message(\"  add merge=\" + writer.segString(merge.segments) + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(Locale.ROOT, \"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"), writer);\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d28f215464f76024caf026606f8ea51a5319c53","date":1527226629,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(MergeTrigger,SegmentInfos,MergeContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findMerges(MergeTrigger,SegmentInfos,IndexWriter).mjava","sourceNew":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos infos, MergeContext mergeContext) throws IOException {\n    if (verbose(mergeContext)) {\n      message(\"findMerges: \" + infos.size() + \" segments\", mergeContext);\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Set<SegmentCommitInfo> merging = mergeContext.getMergingSegments();\n    final Set<SegmentCommitInfo> toBeMerged = new HashSet<>();\n\n    final List<SegmentCommitInfo> infosSorted = new ArrayList<>(infos.asList());\n\n    // The size can change concurrently while we are running here, because deletes\n    // are now applied concurrently, and this can piss off TimSort!  So we\n    // call size() once per segment and sort by that:\n    Map<SegmentCommitInfo,Long> sizeInBytes = getSegmentSizes(mergeContext, infos.asList());\n    \n    infosSorted.sort(new SegmentByteSizeDescending(sizeInBytes));\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentCommitInfo info : infosSorted) {\n      final long segBytes = sizeInBytes.get(info);\n      if (verbose(mergeContext)) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + segString(mergeContext, Collections.singleton(info)) + \" size=\" + String.format(Locale.ROOT, \"%.3f\", segBytes/1024/1024.) + \" MB\" + extra, mergeContext);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size()) {\n      long segBytes = sizeInBytes.get(infosSorted.get(tooBigCount));\n      if (segBytes < maxMergedSegmentBytes/2.0) {\n        break;\n      }\n      totIndexBytes -= segBytes;\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentCommitInfo> eligible = new ArrayList<>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentCommitInfo info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += sizeInBytes.get(info);\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      if (verbose(mergeContext)) {\n        message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount, mergeContext);\n      }\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() > allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentCommitInfo> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentCommitInfo> candidate = new ArrayList<>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentCommitInfo info = eligible.get(idx);\n            final long segBytes = sizeInBytes.get(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          // We should never see an empty candidate: we iterated over maxMergeAtOnce\n          // segments, and already pre-excluded the too-large segments:\n          assert candidate.size() > 0;\n\n          final MergeScore score = score(candidate, hitTooLarge, sizeInBytes);\n          if (verbose(mergeContext)) {\n            message(\"  maybe=\" + segString(mergeContext, candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", totAfterMergeBytes/1024./1024.), mergeContext);\n          }\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          toBeMerged.addAll(merge.segments);\n\n          if (verbose(mergeContext)) {\n            message(\"  add merge=\" + segString(mergeContext, merge.segments) + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(Locale.ROOT, \"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"), mergeContext);\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMerges(MergeTrigger mergeTrigger, SegmentInfos infos, IndexWriter writer) throws IOException {\n    if (verbose(writer)) {\n      message(\"findMerges: \" + infos.size() + \" segments\", writer);\n    }\n    if (infos.size() == 0) {\n      return null;\n    }\n    final Set<SegmentCommitInfo> merging = writer.getMergingSegments();\n    final Set<SegmentCommitInfo> toBeMerged = new HashSet<>();\n\n    final List<SegmentCommitInfo> infosSorted = new ArrayList<>(infos.asList());\n\n    // The size can change concurrently while we are running here, because deletes\n    // are now applied concurrently, and this can piss off TimSort!  So we\n    // call size() once per segment and sort by that:\n    Map<SegmentCommitInfo,Long> sizeInBytes = getSegmentSizes(writer, infos.asList());\n    \n    infosSorted.sort(new SegmentByteSizeDescending(sizeInBytes));\n\n    // Compute total index bytes & print details about the index\n    long totIndexBytes = 0;\n    long minSegmentBytes = Long.MAX_VALUE;\n    for(SegmentCommitInfo info : infosSorted) {\n      final long segBytes = sizeInBytes.get(info);\n      if (verbose(writer)) {\n        String extra = merging.contains(info) ? \" [merging]\" : \"\";\n        if (segBytes >= maxMergedSegmentBytes/2.0) {\n          extra += \" [skip: too large]\";\n        } else if (segBytes < floorSegmentBytes) {\n          extra += \" [floored]\";\n        }\n        message(\"  seg=\" + writer.segString(info) + \" size=\" + String.format(Locale.ROOT, \"%.3f\", segBytes/1024/1024.) + \" MB\" + extra, writer);\n      }\n\n      minSegmentBytes = Math.min(segBytes, minSegmentBytes);\n      // Accum total byte size\n      totIndexBytes += segBytes;\n    }\n\n    // If we have too-large segments, grace them out\n    // of the maxSegmentCount:\n    int tooBigCount = 0;\n    while (tooBigCount < infosSorted.size()) {\n      long segBytes = sizeInBytes.get(infosSorted.get(tooBigCount));\n      if (segBytes < maxMergedSegmentBytes/2.0) {\n        break;\n      }\n      totIndexBytes -= segBytes;\n      tooBigCount++;\n    }\n\n    minSegmentBytes = floorSize(minSegmentBytes);\n\n    // Compute max allowed segs in the index\n    long levelSize = minSegmentBytes;\n    long bytesLeft = totIndexBytes;\n    double allowedSegCount = 0;\n    while(true) {\n      final double segCountLevel = bytesLeft / (double) levelSize;\n      if (segCountLevel < segsPerTier) {\n        allowedSegCount += Math.ceil(segCountLevel);\n        break;\n      }\n      allowedSegCount += segsPerTier;\n      bytesLeft -= segsPerTier * levelSize;\n      levelSize *= maxMergeAtOnce;\n    }\n    int allowedSegCountInt = (int) allowedSegCount;\n\n    MergeSpecification spec = null;\n\n    // Cycle to possibly select more than one merge:\n    while(true) {\n\n      long mergingBytes = 0;\n\n      // Gather eligible segments for merging, ie segments\n      // not already being merged and not already picked (by\n      // prior iteration of this loop) for merging:\n      final List<SegmentCommitInfo> eligible = new ArrayList<>();\n      for(int idx = tooBigCount; idx<infosSorted.size(); idx++) {\n        final SegmentCommitInfo info = infosSorted.get(idx);\n        if (merging.contains(info)) {\n          mergingBytes += sizeInBytes.get(info);\n        } else if (!toBeMerged.contains(info)) {\n          eligible.add(info);\n        }\n      }\n\n      final boolean maxMergeIsRunning = mergingBytes >= maxMergedSegmentBytes;\n\n      if (verbose(writer)) {\n        message(\"  allowedSegmentCount=\" + allowedSegCountInt + \" vs count=\" + infosSorted.size() + \" (eligible count=\" + eligible.size() + \") tooBigCount=\" + tooBigCount, writer);\n      }\n\n      if (eligible.size() == 0) {\n        return spec;\n      }\n\n      if (eligible.size() > allowedSegCountInt) {\n\n        // OK we are over budget -- find best merge!\n        MergeScore bestScore = null;\n        List<SegmentCommitInfo> best = null;\n        boolean bestTooLarge = false;\n        long bestMergeBytes = 0;\n\n        // Consider all merge starts:\n        for(int startIdx = 0;startIdx <= eligible.size()-maxMergeAtOnce; startIdx++) {\n\n          long totAfterMergeBytes = 0;\n\n          final List<SegmentCommitInfo> candidate = new ArrayList<>();\n          boolean hitTooLarge = false;\n          for(int idx = startIdx;idx<eligible.size() && candidate.size() < maxMergeAtOnce;idx++) {\n            final SegmentCommitInfo info = eligible.get(idx);\n            final long segBytes = sizeInBytes.get(info);\n\n            if (totAfterMergeBytes + segBytes > maxMergedSegmentBytes) {\n              hitTooLarge = true;\n              // NOTE: we continue, so that we can try\n              // \"packing\" smaller segments into this merge\n              // to see if we can get closer to the max\n              // size; this in general is not perfect since\n              // this is really \"bin packing\" and we'd have\n              // to try different permutations.\n              continue;\n            }\n            candidate.add(info);\n            totAfterMergeBytes += segBytes;\n          }\n\n          // We should never see an empty candidate: we iterated over maxMergeAtOnce\n          // segments, and already pre-excluded the too-large segments:\n          assert candidate.size() > 0;\n\n          final MergeScore score = score(candidate, hitTooLarge, mergingBytes, writer, sizeInBytes);\n          if (verbose(writer)) {\n            message(\"  maybe=\" + writer.segString(candidate) + \" score=\" + score.getScore() + \" \" + score.getExplanation() + \" tooLarge=\" + hitTooLarge + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", totAfterMergeBytes/1024./1024.), writer);\n          }\n\n          // If we are already running a max sized merge\n          // (maxMergeIsRunning), don't allow another max\n          // sized merge to kick off:\n          if ((bestScore == null || score.getScore() < bestScore.getScore()) && (!hitTooLarge || !maxMergeIsRunning)) {\n            best = candidate;\n            bestScore = score;\n            bestTooLarge = hitTooLarge;\n            bestMergeBytes = totAfterMergeBytes;\n          }\n        }\n        \n        if (best != null) {\n          if (spec == null) {\n            spec = new MergeSpecification();\n          }\n          final OneMerge merge = new OneMerge(best);\n          spec.add(merge);\n          toBeMerged.addAll(merge.segments);\n\n          if (verbose(writer)) {\n            message(\"  add merge=\" + writer.segString(merge.segments) + \" size=\" + String.format(Locale.ROOT, \"%.3f MB\", bestMergeBytes/1024./1024.) + \" score=\" + String.format(Locale.ROOT, \"%.3f\", bestScore.getScore()) + \" \" + bestScore.getExplanation() + (bestTooLarge ? \" [max merge]\" : \"\"), writer);\n          }\n        } else {\n          return spec;\n        }\n      } else {\n        return spec;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"55980207f1977bd1463465de1659b821347e2fa8":["027bee21e09164c9ee230395405076d1e0034b30","39cc7fae4e4c6be7c74434527ee9852592db649f"],"5399733c0eeb73827ff5b8aee51c110ec540e6f0":["c0f10353be871363159f724b6419748c9b89c5c0"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["39cc7fae4e4c6be7c74434527ee9852592db649f"],"1d28f215464f76024caf026606f8ea51a5319c53":["f0e53d133180083c87dcb8114b087cfe6bfc7bce"],"c0f10353be871363159f724b6419748c9b89c5c0":["28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["39cc7fae4e4c6be7c74434527ee9852592db649f","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["39cc7fae4e4c6be7c74434527ee9852592db649f","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"39cc7fae4e4c6be7c74434527ee9852592db649f":["027bee21e09164c9ee230395405076d1e0034b30"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","c0f10353be871363159f724b6419748c9b89c5c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f0e53d133180083c87dcb8114b087cfe6bfc7bce":["c0f10353be871363159f724b6419748c9b89c5c0","5399733c0eeb73827ff5b8aee51c110ec540e6f0"],"027bee21e09164c9ee230395405076d1e0034b30":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d28f215464f76024caf026606f8ea51a5319c53"]},"commit2Childs":{"55980207f1977bd1463465de1659b821347e2fa8":[],"5399733c0eeb73827ff5b8aee51c110ec540e6f0":["f0e53d133180083c87dcb8114b087cfe6bfc7bce"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"c0f10353be871363159f724b6419748c9b89c5c0":["5399733c0eeb73827ff5b8aee51c110ec540e6f0","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","f0e53d133180083c87dcb8114b087cfe6bfc7bce"],"1d28f215464f76024caf026606f8ea51a5319c53":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"28288370235ed02234a64753cdbf0c6ec096304a":["c0f10353be871363159f724b6419748c9b89c5c0"],"39cc7fae4e4c6be7c74434527ee9852592db649f":["55980207f1977bd1463465de1659b821347e2fa8","f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["027bee21e09164c9ee230395405076d1e0034b30"],"f0e53d133180083c87dcb8114b087cfe6bfc7bce":["1d28f215464f76024caf026606f8ea51a5319c53"],"027bee21e09164c9ee230395405076d1e0034b30":["55980207f1977bd1463465de1659b821347e2fa8","39cc7fae4e4c6be7c74434527ee9852592db649f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}