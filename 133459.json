{"path":"solr/src/java/org/apache/solr/search/function/ScaleFloatFunction#getValues(Map,IndexReader).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/ScaleFloatFunction#getValues(Map,IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final DocValues vals =  source.getValues(context, reader);\n    int maxDoc = reader.maxDoc();\n\n    // this doesn't take into account deleted docs!\n    float minVal=0.0f;\n    float maxVal=0.0f;\n\n    if (maxDoc>0) {\n      minVal = maxVal = vals.floatVal(0);      \n    }\n\n    // Traverse the complete set of values to get the min and the max.\n    // Future alternatives include being able to ask a DocValues for min/max\n    // Another memory-intensive option is to cache the values in\n    // a float[] on this first pass.\n\n    for (int i=0; i<maxDoc; i++) {\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      } else if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n\n    final float scale = (maxVal-minVal==0) ? 0 : (max-min)/(maxVal-minVal);\n    final float minSource = minVal;\n    final float maxSource = maxVal;\n\n    return new DocValues() {\n      public float floatVal(int doc) {\n\treturn (vals.floatVal(doc) - minSource) * scale + min;\n      }\n      public int intVal(int doc) {\n        return (int)floatVal(doc);\n      }\n      public long longVal(int doc) {\n        return (long)floatVal(doc);\n      }\n      public double doubleVal(int doc) {\n        return (double)floatVal(doc);\n      }\n      public String strVal(int doc) {\n        return Float.toString(floatVal(doc));\n      }\n      public String toString(int doc) {\n\treturn \"scale(\" + vals.toString(doc) + \",toMin=\" + min + \",toMax=\" + max\n                + \",fromMin=\" + minSource\n                + \",fromMax=\" + maxSource\n                + \")\";\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/function/ScaleFloatFunction#getValues(Map,IndexReader).mjava","sourceNew":null,"sourceOld":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final DocValues vals =  source.getValues(context, reader);\n    int maxDoc = reader.maxDoc();\n\n    // this doesn't take into account deleted docs!\n    float minVal=0.0f;\n    float maxVal=0.0f;\n\n    if (maxDoc>0) {\n      minVal = maxVal = vals.floatVal(0);      \n    }\n\n    // Traverse the complete set of values to get the min and the max.\n    // Future alternatives include being able to ask a DocValues for min/max\n    // Another memory-intensive option is to cache the values in\n    // a float[] on this first pass.\n\n    for (int i=0; i<maxDoc; i++) {\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      } else if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n\n    final float scale = (maxVal-minVal==0) ? 0 : (max-min)/(maxVal-minVal);\n    final float minSource = minVal;\n    final float maxSource = maxVal;\n\n    return new DocValues() {\n      public float floatVal(int doc) {\n\treturn (vals.floatVal(doc) - minSource) * scale + min;\n      }\n      public int intVal(int doc) {\n        return (int)floatVal(doc);\n      }\n      public long longVal(int doc) {\n        return (long)floatVal(doc);\n      }\n      public double doubleVal(int doc) {\n        return (double)floatVal(doc);\n      }\n      public String strVal(int doc) {\n        return Float.toString(floatVal(doc));\n      }\n      public String toString(int doc) {\n\treturn \"scale(\" + vals.toString(doc) + \",toMin=\" + min + \",toMax=\" + max\n                + \",fromMin=\" + minSource\n                + \",fromMax=\" + maxSource\n                + \")\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/ScaleFloatFunction#getValues(Map,IndexReader).mjava","pathOld":"src/java/org/apache/solr/search/function/ScaleFloatFunction#getValues(Map,IndexReader).mjava","sourceNew":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final DocValues vals =  source.getValues(context, reader);\n    int maxDoc = reader.maxDoc();\n\n    // this doesn't take into account deleted docs!\n    float minVal=0.0f;\n    float maxVal=0.0f;\n\n    if (maxDoc>0) {\n      minVal = maxVal = vals.floatVal(0);      \n    }\n\n    // Traverse the complete set of values to get the min and the max.\n    // Future alternatives include being able to ask a DocValues for min/max\n    // Another memory-intensive option is to cache the values in\n    // a float[] on this first pass.\n\n    for (int i=0; i<maxDoc; i++) {\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      } else if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n\n    final float scale = (maxVal-minVal==0) ? 0 : (max-min)/(maxVal-minVal);\n    final float minSource = minVal;\n    final float maxSource = maxVal;\n\n    return new DocValues() {\n      public float floatVal(int doc) {\n\treturn (vals.floatVal(doc) - minSource) * scale + min;\n      }\n      public int intVal(int doc) {\n        return (int)floatVal(doc);\n      }\n      public long longVal(int doc) {\n        return (long)floatVal(doc);\n      }\n      public double doubleVal(int doc) {\n        return (double)floatVal(doc);\n      }\n      public String strVal(int doc) {\n        return Float.toString(floatVal(doc));\n      }\n      public String toString(int doc) {\n\treturn \"scale(\" + vals.toString(doc) + \",toMin=\" + min + \",toMax=\" + max\n                + \",fromMin=\" + minSource\n                + \",fromMax=\" + maxSource\n                + \")\";\n      }\n    };\n  }\n\n","sourceOld":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final DocValues vals =  source.getValues(context, reader);\n    int maxDoc = reader.maxDoc();\n\n    // this doesn't take into account deleted docs!\n    float minVal=0.0f;\n    float maxVal=0.0f;\n\n    if (maxDoc>0) {\n      minVal = maxVal = vals.floatVal(0);      \n    }\n\n    // Traverse the complete set of values to get the min and the max.\n    // Future alternatives include being able to ask a DocValues for min/max\n    // Another memory-intensive option is to cache the values in\n    // a float[] on this first pass.\n\n    for (int i=0; i<maxDoc; i++) {\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      } else if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n\n    final float scale = (maxVal-minVal==0) ? 0 : (max-min)/(maxVal-minVal);\n    final float minSource = minVal;\n    final float maxSource = maxVal;\n\n    return new DocValues() {\n      public float floatVal(int doc) {\n\treturn (vals.floatVal(doc) - minSource) * scale + min;\n      }\n      public int intVal(int doc) {\n        return (int)floatVal(doc);\n      }\n      public long longVal(int doc) {\n        return (long)floatVal(doc);\n      }\n      public double doubleVal(int doc) {\n        return (double)floatVal(doc);\n      }\n      public String strVal(int doc) {\n        return Float.toString(floatVal(doc));\n      }\n      public String toString(int doc) {\n\treturn \"scale(\" + vals.toString(doc) + \",toMin=\" + min + \",toMax=\" + max\n                + \",fromMin=\" + minSource\n                + \",fromMax=\" + maxSource\n                + \")\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/function/ScaleFloatFunction#getValues(Map,IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final DocValues vals =  source.getValues(context, reader);\n    int maxDoc = reader.maxDoc();\n\n    // this doesn't take into account deleted docs!\n    float minVal=0.0f;\n    float maxVal=0.0f;\n\n    if (maxDoc>0) {\n      minVal = maxVal = vals.floatVal(0);      \n    }\n\n    // Traverse the complete set of values to get the min and the max.\n    // Future alternatives include being able to ask a DocValues for min/max\n    // Another memory-intensive option is to cache the values in\n    // a float[] on this first pass.\n\n    for (int i=0; i<maxDoc; i++) {\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      } else if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n\n    final float scale = (maxVal-minVal==0) ? 0 : (max-min)/(maxVal-minVal);\n    final float minSource = minVal;\n    final float maxSource = maxVal;\n\n    return new DocValues() {\n      public float floatVal(int doc) {\n\treturn (vals.floatVal(doc) - minSource) * scale + min;\n      }\n      public int intVal(int doc) {\n        return (int)floatVal(doc);\n      }\n      public long longVal(int doc) {\n        return (long)floatVal(doc);\n      }\n      public double doubleVal(int doc) {\n        return (double)floatVal(doc);\n      }\n      public String strVal(int doc) {\n        return Float.toString(floatVal(doc));\n      }\n      public String toString(int doc) {\n\treturn \"scale(\" + vals.toString(doc) + \",toMin=\" + min + \",toMax=\" + max\n                + \",fromMin=\" + minSource\n                + \",fromMax=\" + maxSource\n                + \")\";\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bf86dfc469b73b567b31e1c3562f075096bd005b","date":1294505468,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/ScaleFloatFunction#getValues(Map,IndexReader).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/ScaleFloatFunction#getValues(Map,IndexReader).mjava","sourceNew":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n\n    ScaleInfo scaleInfo = (ScaleInfo)context.get(source);\n    if (scaleInfo == null) {\n      scaleInfo = createScaleInfo(context, reader);\n    }\n\n    final float scale = (scaleInfo.maxVal-scaleInfo.minVal==0) ? 0 : (max-min)/(scaleInfo.maxVal-scaleInfo.minVal);\n    final float minSource = scaleInfo.minVal;\n    final float maxSource = scaleInfo.maxVal;\n\n    final DocValues vals =  source.getValues(context, reader);\n\n    return new DocValues() {\n      public float floatVal(int doc) {\n\treturn (vals.floatVal(doc) - minSource) * scale + min;\n      }\n      public int intVal(int doc) {\n        return (int)floatVal(doc);\n      }\n      public long longVal(int doc) {\n        return (long)floatVal(doc);\n      }\n      public double doubleVal(int doc) {\n        return (double)floatVal(doc);\n      }\n      public String strVal(int doc) {\n        return Float.toString(floatVal(doc));\n      }\n      public String toString(int doc) {\n\treturn \"scale(\" + vals.toString(doc) + \",toMin=\" + min + \",toMax=\" + max\n                + \",fromMin=\" + minSource\n                + \",fromMax=\" + maxSource\n                + \")\";\n      }\n    };\n  }\n\n","sourceOld":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final DocValues vals =  source.getValues(context, reader);\n    int maxDoc = reader.maxDoc();\n\n    // this doesn't take into account deleted docs!\n    float minVal=0.0f;\n    float maxVal=0.0f;\n\n    if (maxDoc>0) {\n      minVal = maxVal = vals.floatVal(0);      \n    }\n\n    // Traverse the complete set of values to get the min and the max.\n    // Future alternatives include being able to ask a DocValues for min/max\n    // Another memory-intensive option is to cache the values in\n    // a float[] on this first pass.\n\n    for (int i=0; i<maxDoc; i++) {\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      } else if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n\n    final float scale = (maxVal-minVal==0) ? 0 : (max-min)/(maxVal-minVal);\n    final float minSource = minVal;\n    final float maxSource = maxVal;\n\n    return new DocValues() {\n      public float floatVal(int doc) {\n\treturn (vals.floatVal(doc) - minSource) * scale + min;\n      }\n      public int intVal(int doc) {\n        return (int)floatVal(doc);\n      }\n      public long longVal(int doc) {\n        return (long)floatVal(doc);\n      }\n      public double doubleVal(int doc) {\n        return (double)floatVal(doc);\n      }\n      public String strVal(int doc) {\n        return Float.toString(floatVal(doc));\n      }\n      public String toString(int doc) {\n\treturn \"scale(\" + vals.toString(doc) + \",toMin=\" + min + \",toMax=\" + max\n                + \",fromMin=\" + minSource\n                + \",fromMax=\" + maxSource\n                + \")\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c220849f876de24a79f756f65b3eb045db59f63f","date":1294902803,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/ScaleFloatFunction#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/ScaleFloatFunction#getValues(Map,IndexReader).mjava","sourceNew":"  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n\n    ScaleInfo scaleInfo = (ScaleInfo)context.get(source);\n    if (scaleInfo == null) {\n      scaleInfo = createScaleInfo(context, readerContext);\n    }\n\n    final float scale = (scaleInfo.maxVal-scaleInfo.minVal==0) ? 0 : (max-min)/(scaleInfo.maxVal-scaleInfo.minVal);\n    final float minSource = scaleInfo.minVal;\n    final float maxSource = scaleInfo.maxVal;\n\n    final DocValues vals =  source.getValues(context, readerContext);\n\n    return new DocValues() {\n      public float floatVal(int doc) {\n\treturn (vals.floatVal(doc) - minSource) * scale + min;\n      }\n      public int intVal(int doc) {\n        return (int)floatVal(doc);\n      }\n      public long longVal(int doc) {\n        return (long)floatVal(doc);\n      }\n      public double doubleVal(int doc) {\n        return (double)floatVal(doc);\n      }\n      public String strVal(int doc) {\n        return Float.toString(floatVal(doc));\n      }\n      public String toString(int doc) {\n\treturn \"scale(\" + vals.toString(doc) + \",toMin=\" + min + \",toMax=\" + max\n                + \",fromMin=\" + minSource\n                + \",fromMax=\" + maxSource\n                + \")\";\n      }\n    };\n  }\n\n","sourceOld":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n\n    ScaleInfo scaleInfo = (ScaleInfo)context.get(source);\n    if (scaleInfo == null) {\n      scaleInfo = createScaleInfo(context, reader);\n    }\n\n    final float scale = (scaleInfo.maxVal-scaleInfo.minVal==0) ? 0 : (max-min)/(scaleInfo.maxVal-scaleInfo.minVal);\n    final float minSource = scaleInfo.minVal;\n    final float maxSource = scaleInfo.maxVal;\n\n    final DocValues vals =  source.getValues(context, reader);\n\n    return new DocValues() {\n      public float floatVal(int doc) {\n\treturn (vals.floatVal(doc) - minSource) * scale + min;\n      }\n      public int intVal(int doc) {\n        return (int)floatVal(doc);\n      }\n      public long longVal(int doc) {\n        return (long)floatVal(doc);\n      }\n      public double doubleVal(int doc) {\n        return (double)floatVal(doc);\n      }\n      public String strVal(int doc) {\n        return Float.toString(floatVal(doc));\n      }\n      public String toString(int doc) {\n\treturn \"scale(\" + vals.toString(doc) + \",toMin=\" + min + \",toMax=\" + max\n                + \",fromMin=\" + minSource\n                + \",fromMax=\" + maxSource\n                + \")\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/function/ScaleFloatFunction#getValues(Map,IndexReader).mjava","sourceNew":null,"sourceOld":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final DocValues vals =  source.getValues(context, reader);\n    int maxDoc = reader.maxDoc();\n\n    // this doesn't take into account deleted docs!\n    float minVal=0.0f;\n    float maxVal=0.0f;\n\n    if (maxDoc>0) {\n      minVal = maxVal = vals.floatVal(0);      \n    }\n\n    // Traverse the complete set of values to get the min and the max.\n    // Future alternatives include being able to ask a DocValues for min/max\n    // Another memory-intensive option is to cache the values in\n    // a float[] on this first pass.\n\n    for (int i=0; i<maxDoc; i++) {\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      } else if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n\n    final float scale = (maxVal-minVal==0) ? 0 : (max-min)/(maxVal-minVal);\n    final float minSource = minVal;\n    final float maxSource = maxVal;\n\n    return new DocValues() {\n      public float floatVal(int doc) {\n\treturn (vals.floatVal(doc) - minSource) * scale + min;\n      }\n      public int intVal(int doc) {\n        return (int)floatVal(doc);\n      }\n      public long longVal(int doc) {\n        return (long)floatVal(doc);\n      }\n      public double doubleVal(int doc) {\n        return (double)floatVal(doc);\n      }\n      public String strVal(int doc) {\n        return Float.toString(floatVal(doc));\n      }\n      public String toString(int doc) {\n\treturn \"scale(\" + vals.toString(doc) + \",toMin=\" + min + \",toMax=\" + max\n                + \",fromMin=\" + minSource\n                + \",fromMax=\" + maxSource\n                + \")\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/function/ScaleFloatFunction#getValues(Map,IndexReader).mjava","sourceNew":null,"sourceOld":"  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    final DocValues vals =  source.getValues(context, reader);\n    int maxDoc = reader.maxDoc();\n\n    // this doesn't take into account deleted docs!\n    float minVal=0.0f;\n    float maxVal=0.0f;\n\n    if (maxDoc>0) {\n      minVal = maxVal = vals.floatVal(0);      \n    }\n\n    // Traverse the complete set of values to get the min and the max.\n    // Future alternatives include being able to ask a DocValues for min/max\n    // Another memory-intensive option is to cache the values in\n    // a float[] on this first pass.\n\n    for (int i=0; i<maxDoc; i++) {\n      float val = vals.floatVal(i);\n      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n        // which don't make sense to factor into the scale function\n        continue;\n      }\n      if (val < minVal) {\n        minVal = val;\n      } else if (val > maxVal) {\n        maxVal = val;\n      }\n    }\n\n    final float scale = (maxVal-minVal==0) ? 0 : (max-min)/(maxVal-minVal);\n    final float minSource = minVal;\n    final float maxSource = maxVal;\n\n    return new DocValues() {\n      public float floatVal(int doc) {\n\treturn (vals.floatVal(doc) - minSource) * scale + min;\n      }\n      public int intVal(int doc) {\n        return (int)floatVal(doc);\n      }\n      public long longVal(int doc) {\n        return (long)floatVal(doc);\n      }\n      public double doubleVal(int doc) {\n        return (double)floatVal(doc);\n      }\n      public String strVal(int doc) {\n        return Float.toString(floatVal(doc));\n      }\n      public String toString(int doc) {\n\treturn \"scale(\" + vals.toString(doc) + \",toMin=\" + min + \",toMax=\" + max\n                + \",fromMin=\" + minSource\n                + \",fromMax=\" + maxSource\n                + \")\";\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c220849f876de24a79f756f65b3eb045db59f63f":["bf86dfc469b73b567b31e1c3562f075096bd005b"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"bf86dfc469b73b567b31e1c3562f075096bd005b":["1da8d55113b689b06716246649de6f62430f15c0"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["1da8d55113b689b06716246649de6f62430f15c0","c220849f876de24a79f756f65b3eb045db59f63f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["1da8d55113b689b06716246649de6f62430f15c0","c220849f876de24a79f756f65b3eb045db59f63f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c220849f876de24a79f756f65b3eb045db59f63f"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["bf86dfc469b73b567b31e1c3562f075096bd005b","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"c220849f876de24a79f756f65b3eb045db59f63f":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"bf86dfc469b73b567b31e1c3562f075096bd005b":["c220849f876de24a79f756f65b3eb045db59f63f"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}