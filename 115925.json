{"path":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#testBinaryDocValuesField().mjava","commits":[{"id":"cb767289784b682dea51f9e6d7222add811edb77","date":1362902138,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#testBinaryDocValuesField().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBinaryDocValuesField() throws Exception {\n    BinaryDocValues dv = reader.getBinaryDocValues(BINARY_DV_FIELD);\n    BytesRef bytes = new BytesRef();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      dv.get(i, bytes);\n      assertEquals(\"incorrect binary DocValues for doc \" + i, sortedValues[i].toString(), bytes.utf8ToString());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#testBinaryDocValuesField().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#testBinaryDocValuesField().mjava","sourceNew":"  @Test\n  public void testBinaryDocValuesField() throws Exception {\n    BinaryDocValues dv = reader.getBinaryDocValues(BINARY_DV_FIELD);\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      final BytesRef bytes = dv.get(i);\n      assertEquals(\"incorrect binary DocValues for doc \" + i, sortedValues[i].toString(), bytes.utf8ToString());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBinaryDocValuesField() throws Exception {\n    BinaryDocValues dv = reader.getBinaryDocValues(BINARY_DV_FIELD);\n    BytesRef bytes = new BytesRef();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      dv.get(i, bytes);\n      assertEquals(\"incorrect binary DocValues for doc \" + i, sortedValues[i].toString(), bytes.utf8ToString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c17ec76fa103f80e80ed20ee425dbc357fb1356f","date":1414420673,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#testBinaryDocValuesField().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#testBinaryDocValuesField().mjava","sourceNew":"  @Test\n  public void testBinaryDocValuesField() throws Exception {\n    BinaryDocValues dv = sortedReader.getBinaryDocValues(BINARY_DV_FIELD);\n    for (int i = 0; i < sortedReader.maxDoc(); i++) {\n      final BytesRef bytes = dv.get(i);\n      assertEquals(\"incorrect binary DocValues for doc \" + i, sortedValues[i].toString(), bytes.utf8ToString());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBinaryDocValuesField() throws Exception {\n    BinaryDocValues dv = reader.getBinaryDocValues(BINARY_DV_FIELD);\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      final BytesRef bytes = dv.get(i);\n      assertEquals(\"incorrect binary DocValues for doc \" + i, sortedValues[i].toString(), bytes.utf8ToString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e","date":1419346542,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/SorterTestBase#testBinaryDocValuesField().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/SorterTestBase#testBinaryDocValuesField().mjava","sourceNew":"  @Test\n  public void testBinaryDocValuesField() throws Exception {\n    BinaryDocValues dv = sortedReader.getBinaryDocValues(BINARY_DV_FIELD);\n    for (int i = 0; i < sortedReader.maxDoc(); i++) {\n      final BytesRef bytes = dv.get(i);\n      assertEquals(\"incorrect binary DocValues for doc \" + i, sortedValues[i].toString(), bytes.utf8ToString());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBinaryDocValuesField() throws Exception {\n    BinaryDocValues dv = sortedReader.getBinaryDocValues(BINARY_DV_FIELD);\n    for (int i = 0; i < sortedReader.maxDoc(); i++) {\n      final BytesRef bytes = dv.get(i);\n      assertEquals(\"incorrect binary DocValues for doc \" + i, sortedValues[i].toString(), bytes.utf8ToString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["cb767289784b682dea51f9e6d7222add811edb77"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c17ec76fa103f80e80ed20ee425dbc357fb1356f":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["c17ec76fa103f80e80ed20ee425dbc357fb1356f"],"cb767289784b682dea51f9e6d7222add811edb77":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"]},"commit2Childs":{"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["c17ec76fa103f80e80ed20ee425dbc357fb1356f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cb767289784b682dea51f9e6d7222add811edb77"],"c17ec76fa103f80e80ed20ee425dbc357fb1356f":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"cb767289784b682dea51f9e6d7222add811edb77":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}