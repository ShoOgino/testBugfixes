{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,boolean).mjava","commits":[{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          return null;\n        }\n\n        /*\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n        */\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        double planetMax = PlanetModel.WGS84.getMaximumMagnitude();\n\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc());\n\n        values.intersect(field,\n                         new IntersectVisitor() {\n\n                           @Override\n                           public void visit(int docID) {\n                             result.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             assert packedValue.length == 12;\n                             double x = Geo3DPoint.decodeDimension(packedValue, 0);\n                             double y = Geo3DPoint.decodeDimension(packedValue, Integer.BYTES);\n                             double z = Geo3DPoint.decodeDimension(packedValue, 2 * Integer.BYTES);\n                             if (shape.isWithin(x, y, z)) {\n                               result.add(docID);\n                             }\n                           }\n\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             // Because the dimensional format operates in quantized (64 bit -> 32 bit) space, and the cell bounds\n                             // here are inclusive, we need to extend the bounds to the largest un-quantized values that\n                             // could quantize into these bounds.  The encoding (Geo3DUtil.encodeValue) does\n                             // a Math.round from double to long, so e.g. 1.4 -> 1, and -1.4 -> -1:\n                             double xMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.sortableBytesToInt(minPackedValue, 0));\n                             double xMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.sortableBytesToInt(maxPackedValue, 0));\n                             double yMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.sortableBytesToInt(minPackedValue, 1 * Integer.BYTES));\n                             double yMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.sortableBytesToInt(maxPackedValue, 1 * Integer.BYTES));\n                             double zMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.sortableBytesToInt(minPackedValue, 2 * Integer.BYTES));\n                             double zMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.sortableBytesToInt(maxPackedValue, 2 * Integer.BYTES));\n\n                             //System.out.println(\"  compare: x=\" + cellXMin + \"-\" + cellXMax + \" y=\" + cellYMin + \"-\" + cellYMax + \" z=\" + cellZMin + \"-\" + cellZMax);\n                             assert xMin <= xMax;\n                             assert yMin <= yMax;\n                             assert zMin <= zMax;\n\n                             GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84, xMin, xMax, yMin, yMax, zMin, zMax);\n\n                             switch(xyzSolid.getRelationship(shape)) {\n                             case GeoArea.CONTAINS:\n                               // Shape fully contains the cell\n                               //System.out.println(\"    inside\");\n                               return Relation.CELL_INSIDE_QUERY;\n                             case GeoArea.OVERLAPS:\n                               // They do overlap but neither contains the other:\n                               //System.out.println(\"    crosses1\");\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.WITHIN:\n                               // Cell fully contains the shape:\n                               //System.out.println(\"    crosses2\");\n                               // return Relation.SHAPE_INSIDE_CELL;\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.DISJOINT:\n                               // They do not overlap at all\n                               //System.out.println(\"    outside\");\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             default:\n                               assert false;\n                               return Relation.CELL_CROSSES_QUERY;\n                             }\n                           }\n                         });\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          return null;\n        }\n\n        /*\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n        */\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        double planetMax = PlanetModel.WGS84.getMaximumMagnitude();\n\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc());\n\n        values.intersect(field,\n                         new IntersectVisitor() {\n\n                           @Override\n                           public void visit(int docID) {\n                             result.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             assert packedValue.length == 12;\n                             double x = Geo3DPoint.decodeDimension(packedValue, 0);\n                             double y = Geo3DPoint.decodeDimension(packedValue, Integer.BYTES);\n                             double z = Geo3DPoint.decodeDimension(packedValue, 2 * Integer.BYTES);\n                             if (shape.isWithin(x, y, z)) {\n                               result.add(docID);\n                             }\n                           }\n\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             // Because the dimensional format operates in quantized (64 bit -> 32 bit) space, and the cell bounds\n                             // here are inclusive, we need to extend the bounds to the largest un-quantized values that\n                             // could quantize into these bounds.  The encoding (Geo3DUtil.encodeValue) does\n                             // a Math.round from double to long, so e.g. 1.4 -> 1, and -1.4 -> -1:\n                             double xMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.sortableBytesToInt(minPackedValue, 0));\n                             double xMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.sortableBytesToInt(maxPackedValue, 0));\n                             double yMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.sortableBytesToInt(minPackedValue, 1 * Integer.BYTES));\n                             double yMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.sortableBytesToInt(maxPackedValue, 1 * Integer.BYTES));\n                             double zMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.sortableBytesToInt(minPackedValue, 2 * Integer.BYTES));\n                             double zMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.sortableBytesToInt(maxPackedValue, 2 * Integer.BYTES));\n\n                             //System.out.println(\"  compare: x=\" + cellXMin + \"-\" + cellXMax + \" y=\" + cellYMin + \"-\" + cellYMax + \" z=\" + cellZMin + \"-\" + cellZMax);\n                             assert xMin <= xMax;\n                             assert yMin <= yMax;\n                             assert zMin <= zMax;\n\n                             GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84, xMin, xMax, yMin, yMax, zMin, zMax);\n\n                             switch(xyzSolid.getRelationship(shape)) {\n                             case GeoArea.CONTAINS:\n                               // Shape fully contains the cell\n                               //System.out.println(\"    inside\");\n                               return Relation.CELL_INSIDE_QUERY;\n                             case GeoArea.OVERLAPS:\n                               // They do overlap but neither contains the other:\n                               //System.out.println(\"    crosses1\");\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.WITHIN:\n                               // Cell fully contains the shape:\n                               //System.out.println(\"    crosses2\");\n                               // return Relation.SHAPE_INSIDE_CELL;\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.DISJOINT:\n                               // They do not overlap at all\n                               //System.out.println(\"    outside\");\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             default:\n                               assert false;\n                               return Relation.CELL_CROSSES_QUERY;\n                             }\n                           }\n                         });\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3a37d877793d2b7b46b7d8b0b0319d65f7d2a9","date":1459984736,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          return null;\n        }\n\n        /*\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n        */\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc());\n\n        values.intersect(field, new PointInShapeIntersectVisitor(result, shape));\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          return null;\n        }\n\n        /*\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n        */\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        double planetMax = PlanetModel.WGS84.getMaximumMagnitude();\n\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc());\n\n        values.intersect(field,\n                         new IntersectVisitor() {\n\n                           @Override\n                           public void visit(int docID) {\n                             result.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             assert packedValue.length == 12;\n                             double x = Geo3DPoint.decodeDimension(packedValue, 0);\n                             double y = Geo3DPoint.decodeDimension(packedValue, Integer.BYTES);\n                             double z = Geo3DPoint.decodeDimension(packedValue, 2 * Integer.BYTES);\n                             if (shape.isWithin(x, y, z)) {\n                               result.add(docID);\n                             }\n                           }\n\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             // Because the dimensional format operates in quantized (64 bit -> 32 bit) space, and the cell bounds\n                             // here are inclusive, we need to extend the bounds to the largest un-quantized values that\n                             // could quantize into these bounds.  The encoding (Geo3DUtil.encodeValue) does\n                             // a Math.round from double to long, so e.g. 1.4 -> 1, and -1.4 -> -1:\n                             double xMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.sortableBytesToInt(minPackedValue, 0));\n                             double xMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.sortableBytesToInt(maxPackedValue, 0));\n                             double yMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.sortableBytesToInt(minPackedValue, 1 * Integer.BYTES));\n                             double yMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.sortableBytesToInt(maxPackedValue, 1 * Integer.BYTES));\n                             double zMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.sortableBytesToInt(minPackedValue, 2 * Integer.BYTES));\n                             double zMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.sortableBytesToInt(maxPackedValue, 2 * Integer.BYTES));\n\n                             //System.out.println(\"  compare: x=\" + cellXMin + \"-\" + cellXMax + \" y=\" + cellYMin + \"-\" + cellYMax + \" z=\" + cellZMin + \"-\" + cellZMax);\n                             assert xMin <= xMax;\n                             assert yMin <= yMax;\n                             assert zMin <= zMax;\n\n                             GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(PlanetModel.WGS84, xMin, xMax, yMin, yMax, zMin, zMax);\n\n                             switch(xyzSolid.getRelationship(shape)) {\n                             case GeoArea.CONTAINS:\n                               // Shape fully contains the cell\n                               //System.out.println(\"    inside\");\n                               return Relation.CELL_INSIDE_QUERY;\n                             case GeoArea.OVERLAPS:\n                               // They do overlap but neither contains the other:\n                               //System.out.println(\"    crosses1\");\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.WITHIN:\n                               // Cell fully contains the shape:\n                               //System.out.println(\"    crosses2\");\n                               // return Relation.SHAPE_INSIDE_CELL;\n                               return Relation.CELL_CROSSES_QUERY;\n                             case GeoArea.DISJOINT:\n                               // They do not overlap at all\n                               //System.out.println(\"    outside\");\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             default:\n                               assert false;\n                               return Relation.CELL_CROSSES_QUERY;\n                             }\n                           }\n                         });\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936e62fbacf493107c977e945b4211c43a957400","date":1460681198,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          return null;\n        }\n\n        /*\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n        */\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc());\n\n        values.intersect(field, new PointInShapeIntersectVisitor(result, shape, shapeBounds));\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          return null;\n        }\n\n        /*\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n        */\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc());\n\n        values.intersect(field, new PointInShapeIntersectVisitor(result, shape));\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9ee4c03e3ee986704eeeb45c571d001905a6430","date":1462194267,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          return null;\n        }\n\n        /*\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n        */\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n\n        values.intersect(field, new PointInShapeIntersectVisitor(result, shape, shapeBounds));\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          return null;\n        }\n\n        /*\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n        */\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc());\n\n        values.intersect(field, new PointInShapeIntersectVisitor(result, shape, shapeBounds));\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30540ec27130887a9372c159e8fe971200f37727","date":1462223109,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          return null;\n        }\n\n        /*\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n        */\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n\n        values.intersect(field, new PointInShapeIntersectVisitor(result, shape, shapeBounds));\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          return null;\n        }\n\n        /*\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n        */\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc());\n\n        values.intersect(field, new PointInShapeIntersectVisitor(result, shape, shapeBounds));\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          return null;\n        }\n\n        /*\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n        */\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n\n        values.intersect(field, new PointInShapeIntersectVisitor(result, shape, shapeBounds));\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          return null;\n        }\n\n        /*\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n        */\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc());\n\n        values.intersect(field, new PointInShapeIntersectVisitor(result, shape, shapeBounds));\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          return null;\n        }\n\n        /*\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n        */\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n\n        values.intersect(field, new PointInShapeIntersectVisitor(result, shape, shapeBounds));\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          return null;\n        }\n\n        /*\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n        */\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n\n        values.intersect(field, new PointInShapeIntersectVisitor(result, shape, shapeBounds));\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/PointInGeo3DShapeQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          return null;\n        }\n\n        /*\n        XYZBounds bounds = new XYZBounds();\n        shape.getBounds(bounds);\n\n        final double planetMax = planetModel.getMaximumMagnitude();\n        if (planetMax != treeDV.planetMax) {\n          throw new IllegalStateException(planetModel + \" is not the same one used during indexing: planetMax=\" + planetMax + \" vs indexing planetMax=\" + treeDV.planetMax);\n        }\n        */\n\n        /*\n        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,\n                                                      bounds.getMinimumX(),\n                                                      bounds.getMaximumX(),\n                                                      bounds.getMinimumY(),\n                                                      bounds.getMaximumY(),\n                                                      bounds.getMinimumZ(),\n                                                      bounds.getMaximumZ());\n\n        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: \"expected WITHIN (1) or OVERLAPS (2) but got \" + xyzSolid.getRelationship(shape) + \"; shape=\"+shape+\"; XYZSolid=\"+xyzSolid;\n        */\n\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n\n        values.intersect(field, new PointInShapeIntersectVisitor(result, shape, shapeBounds));\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d3a37d877793d2b7b46b7d8b0b0319d65f7d2a9":["b4e444678504caf66a8060b1d514383aa4feac0c"],"936e62fbacf493107c977e945b4211c43a957400":["4d3a37d877793d2b7b46b7d8b0b0319d65f7d2a9"],"c9ee4c03e3ee986704eeeb45c571d001905a6430":["936e62fbacf493107c977e945b4211c43a957400"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["30540ec27130887a9372c159e8fe971200f37727"],"30540ec27130887a9372c159e8fe971200f37727":["936e62fbacf493107c977e945b4211c43a957400","c9ee4c03e3ee986704eeeb45c571d001905a6430"],"b4e444678504caf66a8060b1d514383aa4feac0c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["55b50463286869f584cf849d1587a0fcd54d1dfa","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["936e62fbacf493107c977e945b4211c43a957400","30540ec27130887a9372c159e8fe971200f37727"]},"commit2Childs":{"4d3a37d877793d2b7b46b7d8b0b0319d65f7d2a9":["936e62fbacf493107c977e945b4211c43a957400"],"936e62fbacf493107c977e945b4211c43a957400":["c9ee4c03e3ee986704eeeb45c571d001905a6430","30540ec27130887a9372c159e8fe971200f37727","55b50463286869f584cf849d1587a0fcd54d1dfa"],"c9ee4c03e3ee986704eeeb45c571d001905a6430":["30540ec27130887a9372c159e8fe971200f37727"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4e444678504caf66a8060b1d514383aa4feac0c"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"30540ec27130887a9372c159e8fe971200f37727":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","55b50463286869f584cf849d1587a0fcd54d1dfa"],"b4e444678504caf66a8060b1d514383aa4feac0c":["4d3a37d877793d2b7b46b7d8b0b0319d65f7d2a9"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"55b50463286869f584cf849d1587a0fcd54d1dfa":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}