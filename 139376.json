{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EvaluatorBag#getFunctionsNamespace(List[Map[String,String]],DocBuilder).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EvaluatorBag#getFunctionsNamespace(List[Map[String,String]],DocBuilder).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#getFunctionsNamespace(List[Map[String,String]],DocBuilder).mjava","sourceNew":"  static Map<String, Object> getFunctionsNamespace(final List<Map<String, String>> fn, DocBuilder docBuilder) {\n    final Map<String, Evaluator> evaluators = new HashMap<String, Evaluator>();\n    evaluators.put(DATE_FORMAT_EVALUATOR, getDateFormatEvaluator());\n    evaluators.put(SQL_ESCAPE_EVALUATOR, getSqlEscapingEvaluator());\n    evaluators.put(URL_ENCODE_EVALUATOR, getUrlEvaluator());\n    evaluators.put(ESCAPE_SOLR_QUERY_CHARS, getSolrQueryEscapingEvaluator());\n    SolrCore core = docBuilder == null ? null : docBuilder.dataImporter.getCore();\n    for (Map<String, String> map : fn) {\n      try {\n        evaluators.put(map.get(NAME), (Evaluator) loadClass(map.get(CLASS), core).newInstance());\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Unable to instantiate evaluator: \" + map.get(CLASS));\n      }\n    }\n\n    return new HashMap<String, Object>() {\n      @Override\n      public String get(Object key) {\n        if (key == null)\n          return null;\n        Matcher m = FORMAT_METHOD.matcher((String) key);\n        if (!m.find())\n          return null;\n        String fname = m.group(1);\n        Evaluator evaluator = evaluators.get(fname);\n        if (evaluator == null)\n          return null;\n        VariableResolverImpl vri = VariableResolverImpl.CURRENT_VARIABLE_RESOLVER.get();\n        return evaluator.evaluate(m.group(2), Context.CURRENT_CONTEXT.get());\n      }\n\n    };\n  }\n\n","sourceOld":"  static Map<String, Object> getFunctionsNamespace(final List<Map<String, String>> fn, DocBuilder docBuilder) {\n    final Map<String, Evaluator> evaluators = new HashMap<String, Evaluator>();\n    evaluators.put(DATE_FORMAT_EVALUATOR, getDateFormatEvaluator());\n    evaluators.put(SQL_ESCAPE_EVALUATOR, getSqlEscapingEvaluator());\n    evaluators.put(URL_ENCODE_EVALUATOR, getUrlEvaluator());\n    evaluators.put(ESCAPE_SOLR_QUERY_CHARS, getSolrQueryEscapingEvaluator());\n    SolrCore core = docBuilder == null ? null : docBuilder.dataImporter.getCore();\n    for (Map<String, String> map : fn) {\n      try {\n        evaluators.put(map.get(NAME), (Evaluator) loadClass(map.get(CLASS), core).newInstance());\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Unable to instantiate evaluator: \" + map.get(CLASS));\n      }\n    }\n\n    return new HashMap<String, Object>() {\n      @Override\n      public String get(Object key) {\n        if (key == null)\n          return null;\n        Matcher m = FORMAT_METHOD.matcher((String) key);\n        if (!m.find())\n          return null;\n        String fname = m.group(1);\n        Evaluator evaluator = evaluators.get(fname);\n        if (evaluator == null)\n          return null;\n        VariableResolverImpl vri = VariableResolverImpl.CURRENT_VARIABLE_RESOLVER.get();\n        return evaluator.evaluate(m.group(2), Context.CURRENT_CONTEXT.get());\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EvaluatorBag#getFunctionsNamespace(List[Map[String,String]],DocBuilder).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EvaluatorBag#getFunctionsNamespace(List[Map[String,String]],DocBuilder).mjava","sourceNew":"  static Map<String, Object> getFunctionsNamespace(final List<Map<String, String>> fn, DocBuilder docBuilder) {\n    final Map<String, Evaluator> evaluators = new HashMap<String, Evaluator>();\n    evaluators.put(DATE_FORMAT_EVALUATOR, getDateFormatEvaluator());\n    evaluators.put(SQL_ESCAPE_EVALUATOR, getSqlEscapingEvaluator());\n    evaluators.put(URL_ENCODE_EVALUATOR, getUrlEvaluator());\n    evaluators.put(ESCAPE_SOLR_QUERY_CHARS, getSolrQueryEscapingEvaluator());\n    SolrCore core = docBuilder == null ? null : docBuilder.dataImporter.getCore();\n    for (Map<String, String> map : fn) {\n      try {\n        evaluators.put(map.get(NAME), (Evaluator) loadClass(map.get(CLASS), core).newInstance());\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Unable to instantiate evaluator: \" + map.get(CLASS));\n      }\n    }\n\n    return new HashMap<String, Object>() {\n      @Override\n      public String get(Object key) {\n        if (key == null)\n          return null;\n        Matcher m = FORMAT_METHOD.matcher((String) key);\n        if (!m.find())\n          return null;\n        String fname = m.group(1);\n        Evaluator evaluator = evaluators.get(fname);\n        if (evaluator == null)\n          return null;\n        VariableResolverImpl vri = VariableResolverImpl.CURRENT_VARIABLE_RESOLVER.get();\n        return evaluator.evaluate(m.group(2), Context.CURRENT_CONTEXT.get());\n      }\n\n    };\n  }\n\n","sourceOld":"  static Map<String, Object> getFunctionsNamespace(final List<Map<String, String>> fn, DocBuilder docBuilder) {\n    final Map<String, Evaluator> evaluators = new HashMap<String, Evaluator>();\n    evaluators.put(DATE_FORMAT_EVALUATOR, getDateFormatEvaluator());\n    evaluators.put(SQL_ESCAPE_EVALUATOR, getSqlEscapingEvaluator());\n    evaluators.put(URL_ENCODE_EVALUATOR, getUrlEvaluator());\n    evaluators.put(ESCAPE_SOLR_QUERY_CHARS, getSolrQueryEscapingEvaluator());\n    SolrCore core = docBuilder == null ? null : docBuilder.dataImporter.getCore();\n    for (Map<String, String> map : fn) {\n      try {\n        evaluators.put(map.get(NAME), (Evaluator) loadClass(map.get(CLASS), core).newInstance());\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Unable to instantiate evaluator: \" + map.get(CLASS));\n      }\n    }\n\n    return new HashMap<String, Object>() {\n      @Override\n      public String get(Object key) {\n        if (key == null)\n          return null;\n        Matcher m = FORMAT_METHOD.matcher((String) key);\n        if (!m.find())\n          return null;\n        String fname = m.group(1);\n        Evaluator evaluator = evaluators.get(fname);\n        if (evaluator == null)\n          return null;\n        VariableResolverImpl vri = VariableResolverImpl.CURRENT_VARIABLE_RESOLVER.get();\n        return evaluator.evaluate(m.group(2), Context.CURRENT_CONTEXT.get());\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17a92a6c6955645d64747d96f75583d591643464","date":1311245814,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EvaluatorBag#getFunctionsNamespace(List[Map[String,String]],DocBuilder).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EvaluatorBag#getFunctionsNamespace(List[Map[String,String]],DocBuilder).mjava","sourceNew":"  static Map<String, Object> getFunctionsNamespace(final List<Map<String, String>> fn, DocBuilder docBuilder) {\n    final Map<String, Evaluator> evaluators = new HashMap<String, Evaluator>();\n    evaluators.put(DATE_FORMAT_EVALUATOR, getDateFormatEvaluator());\n    evaluators.put(SQL_ESCAPE_EVALUATOR, getSqlEscapingEvaluator());\n    evaluators.put(URL_ENCODE_EVALUATOR, getUrlEvaluator());\n    evaluators.put(ESCAPE_SOLR_QUERY_CHARS, getSolrQueryEscapingEvaluator());\n    SolrCore core = docBuilder == null ? null : docBuilder.dataImporter.getCore();\n    for (Map<String, String> map : fn) {\n      try {\n        evaluators.put(map.get(NAME), (Evaluator) loadClass(map.get(CLASS), core).newInstance());\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Unable to instantiate evaluator: \" + map.get(CLASS));\n      }\n    }\n\n    return new HashMap<String, Object>() {\n      @Override\n      public String get(Object key) {\n        if (key == null)\n          return null;\n        Matcher m = FORMAT_METHOD.matcher((String) key);\n        if (!m.find())\n          return null;\n        String fname = m.group(1);\n        Evaluator evaluator = evaluators.get(fname);\n        if (evaluator == null)\n          return null;\n        return evaluator.evaluate(m.group(2), Context.CURRENT_CONTEXT.get());\n      }\n\n    };\n  }\n\n","sourceOld":"  static Map<String, Object> getFunctionsNamespace(final List<Map<String, String>> fn, DocBuilder docBuilder) {\n    final Map<String, Evaluator> evaluators = new HashMap<String, Evaluator>();\n    evaluators.put(DATE_FORMAT_EVALUATOR, getDateFormatEvaluator());\n    evaluators.put(SQL_ESCAPE_EVALUATOR, getSqlEscapingEvaluator());\n    evaluators.put(URL_ENCODE_EVALUATOR, getUrlEvaluator());\n    evaluators.put(ESCAPE_SOLR_QUERY_CHARS, getSolrQueryEscapingEvaluator());\n    SolrCore core = docBuilder == null ? null : docBuilder.dataImporter.getCore();\n    for (Map<String, String> map : fn) {\n      try {\n        evaluators.put(map.get(NAME), (Evaluator) loadClass(map.get(CLASS), core).newInstance());\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Unable to instantiate evaluator: \" + map.get(CLASS));\n      }\n    }\n\n    return new HashMap<String, Object>() {\n      @Override\n      public String get(Object key) {\n        if (key == null)\n          return null;\n        Matcher m = FORMAT_METHOD.matcher((String) key);\n        if (!m.find())\n          return null;\n        String fname = m.group(1);\n        Evaluator evaluator = evaluators.get(fname);\n        if (evaluator == null)\n          return null;\n        VariableResolverImpl vri = VariableResolverImpl.CURRENT_VARIABLE_RESOLVER.get();\n        return evaluator.evaluate(m.group(2), Context.CURRENT_CONTEXT.get());\n      }\n\n    };\n  }\n\n","bugFix":["7dfc8d8c033e2239995c45b976c90c18559da31e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b84e23a1c994ea309896dd9424563e0092f3607","date":1332774278,"type":5,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EvaluatorBag#getFunctionsNamespace(List[Map[String,String]],DocBuilder,VariableResolverImpl).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EvaluatorBag#getFunctionsNamespace(List[Map[String,String]],DocBuilder).mjava","sourceNew":"  static Map<String, Object> getFunctionsNamespace(final List<Map<String, String>> fn, DocBuilder docBuilder, final VariableResolverImpl vr) {\n    final Map<String, Evaluator> evaluators = new HashMap<String, Evaluator>();\n    evaluators.put(DATE_FORMAT_EVALUATOR, getDateFormatEvaluator());\n    evaluators.put(SQL_ESCAPE_EVALUATOR, getSqlEscapingEvaluator());\n    evaluators.put(URL_ENCODE_EVALUATOR, getUrlEvaluator());\n    evaluators.put(ESCAPE_SOLR_QUERY_CHARS, getSolrQueryEscapingEvaluator());\n    SolrCore core = docBuilder == null ? null : docBuilder.dataImporter.getCore();\n    for (Map<String, String> map : fn) {\n      try {\n        evaluators.put(map.get(NAME), (Evaluator) loadClass(map.get(CLASS), core).newInstance());\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Unable to instantiate evaluator: \" + map.get(CLASS));\n      }\n    }\n\n    return new HashMap<String, Object>() {\n      @Override\n      public String get(Object key) {\n        if (key == null)\n          return null;\n        Matcher m = FORMAT_METHOD.matcher((String) key);\n        if (!m.find())\n          return null;\n        String fname = m.group(1);\n        Evaluator evaluator = evaluators.get(fname);\n        if (evaluator == null)\n          return null;\n        ContextImpl ctx = new ContextImpl(null, vr, null, null, null, null, null);\n        String g2 = m.group(2);\n        return evaluator.evaluate(g2, ctx);\n      }\n\n    };\n  }\n\n","sourceOld":"  static Map<String, Object> getFunctionsNamespace(final List<Map<String, String>> fn, DocBuilder docBuilder) {\n    final Map<String, Evaluator> evaluators = new HashMap<String, Evaluator>();\n    evaluators.put(DATE_FORMAT_EVALUATOR, getDateFormatEvaluator());\n    evaluators.put(SQL_ESCAPE_EVALUATOR, getSqlEscapingEvaluator());\n    evaluators.put(URL_ENCODE_EVALUATOR, getUrlEvaluator());\n    evaluators.put(ESCAPE_SOLR_QUERY_CHARS, getSolrQueryEscapingEvaluator());\n    SolrCore core = docBuilder == null ? null : docBuilder.dataImporter.getCore();\n    for (Map<String, String> map : fn) {\n      try {\n        evaluators.put(map.get(NAME), (Evaluator) loadClass(map.get(CLASS), core).newInstance());\n      } catch (Exception e) {\n        wrapAndThrow(SEVERE, e, \"Unable to instantiate evaluator: \" + map.get(CLASS));\n      }\n    }\n\n    return new HashMap<String, Object>() {\n      @Override\n      public String get(Object key) {\n        if (key == null)\n          return null;\n        Matcher m = FORMAT_METHOD.matcher((String) key);\n        if (!m.find())\n          return null;\n        String fname = m.group(1);\n        Evaluator evaluator = evaluators.get(fname);\n        if (evaluator == null)\n          return null;\n        return evaluator.evaluate(m.group(2), Context.CURRENT_CONTEXT.get());\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4b84e23a1c994ea309896dd9424563e0092f3607":["17a92a6c6955645d64747d96f75583d591643464"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17a92a6c6955645d64747d96f75583d591643464":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4b84e23a1c994ea309896dd9424563e0092f3607"]},"commit2Childs":{"4b84e23a1c994ea309896dd9424563e0092f3607":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["17a92a6c6955645d64747d96f75583d591643464"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"17a92a6c6955645d64747d96f75583d591643464":["4b84e23a1c994ea309896dd9424563e0092f3607"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}