{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsStoredFields(int,int,int,int).mjava","commits":[{"id":"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793","date":1408030244,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsStoredFields(int,int,int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsStoredFields(int,int,int).mjava","sourceNew":"  protected void doTestSortedSetVsStoredFields(int numDocs, int minLength, int maxLength, int maxValuesPerDoc) throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"dvduel\"));\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n      // create a random set of strings\n      Set<String> values = new TreeSet<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare\n    DirectoryReader ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          assert docValues != null;\n          long ord = docValues.nextOrd();\n          assert ord != NO_MORE_ORDS;\n          BytesRef scratch = docValues.lookupOrd(ord);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    writer.forceMerge(1);\n    \n    // compare again\n    ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          assert docValues != null;\n          long ord = docValues.nextOrd();\n          assert ord != NO_MORE_ORDS;\n          BytesRef scratch = docValues.lookupOrd(ord);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSortedSetVsStoredFields(int minLength, int maxLength, int maxValuesPerDoc) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n      // create a random set of strings\n      Set<String> values = new TreeSet<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare\n    DirectoryReader ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          assert docValues != null;\n          long ord = docValues.nextOrd();\n          assert ord != NO_MORE_ORDS;\n          BytesRef scratch = docValues.lookupOrd(ord);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    writer.forceMerge(1);\n    \n    // compare again\n    ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          assert docValues != null;\n          long ord = docValues.nextOrd();\n          assert ord != NO_MORE_ORDS;\n          BytesRef scratch = docValues.lookupOrd(ord);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsStoredFields(int,int,int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsStoredFields(int,int,int,int).mjava","sourceNew":"  protected void doTestSortedSetVsStoredFields(int numDocs, int minLength, int maxLength, int maxValuesPerDoc) throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"dvduel\"));\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n      // create a random set of strings\n      Set<String> values = new TreeSet<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare\n    DirectoryReader ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          assert docValues != null;\n          long ord = docValues.nextOrd();\n          assert ord != NO_MORE_ORDS;\n          BytesRef scratch = docValues.lookupOrd(ord);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    writer.forceMerge(1);\n    \n    // compare again\n    ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          assert docValues != null;\n          long ord = docValues.nextOrd();\n          assert ord != NO_MORE_ORDS;\n          BytesRef scratch = docValues.lookupOrd(ord);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  protected void doTestSortedSetVsStoredFields(int numDocs, int minLength, int maxLength, int maxValuesPerDoc) throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"dvduel\"));\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n      // create a random set of strings\n      Set<String> values = new TreeSet<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare\n    DirectoryReader ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          assert docValues != null;\n          long ord = docValues.nextOrd();\n          assert ord != NO_MORE_ORDS;\n          BytesRef scratch = docValues.lookupOrd(ord);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    writer.forceMerge(1);\n    \n    // compare again\n    ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          assert docValues != null;\n          long ord = docValues.nextOrd();\n          assert ord != NO_MORE_ORDS;\n          BytesRef scratch = docValues.lookupOrd(ord);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c4b1dec123e039b2e4f9a82d8d7005a1151a97c","date":1437464198,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsStoredFields(int,int,int,int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsStoredFields(int,int,int,int).mjava","sourceNew":"  protected void doTestSortedSetVsStoredFields(int numDocs, int minLength, int maxLength, int maxValuesPerDoc, int maxUniqueValues) throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"dvduel\"));\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n\n    Set<String> valueSet = new HashSet<String>();\n    for (int i = 0; i < 10000 && valueSet.size() < maxUniqueValues; ++i) {\n      final int length = TestUtil.nextInt(random(), minLength, maxLength);\n      valueSet.add(TestUtil.randomSimpleString(random(), length));\n    }\n    String[] uniqueValues = valueSet.toArray(new String[0]);\n\n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n      // create a random set of strings\n      Set<String> values = new TreeSet<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(RandomPicks.randomFrom(random(), uniqueValues));\n      }\n\n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare\n    DirectoryReader ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          assert docValues != null;\n          long ord = docValues.nextOrd();\n          assert ord != NO_MORE_ORDS;\n          BytesRef scratch = docValues.lookupOrd(ord);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    writer.forceMerge(1);\n    \n    // compare again\n    ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          assert docValues != null;\n          long ord = docValues.nextOrd();\n          assert ord != NO_MORE_ORDS;\n          BytesRef scratch = docValues.lookupOrd(ord);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  protected void doTestSortedSetVsStoredFields(int numDocs, int minLength, int maxLength, int maxValuesPerDoc) throws Exception {\n    Directory dir = newFSDirectory(createTempDir(\"dvduel\"));\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = TestUtil.nextInt(random(), 0, maxValuesPerDoc);\n      // create a random set of strings\n      Set<String> values = new TreeSet<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add ordered to the stored field\n      for (String v : values) {\n        doc.add(new StoredField(\"stored\", v));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : unordered) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare\n    DirectoryReader ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          assert docValues != null;\n          long ord = docValues.nextOrd();\n          assert ord != NO_MORE_ORDS;\n          BytesRef scratch = docValues.lookupOrd(ord);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    writer.forceMerge(1);\n    \n    // compare again\n    ir = writer.getReader();\n    for (LeafReaderContext context : ir.leaves()) {\n      LeafReader r = context.reader();\n      SortedSetDocValues docValues = r.getSortedSetDocValues(\"dv\");\n      for (int i = 0; i < r.maxDoc(); i++) {\n        String stringValues[] = r.document(i).getValues(\"stored\");\n        if (docValues != null) {\n          docValues.setDocument(i);\n        }\n        for (int j = 0; j < stringValues.length; j++) {\n          assert docValues != null;\n          long ord = docValues.nextOrd();\n          assert ord != NO_MORE_ORDS;\n          BytesRef scratch = docValues.lookupOrd(ord);\n          assertEquals(stringValues[j], scratch.utf8ToString());\n        }\n        assert docValues == null || docValues.nextOrd() == NO_MORE_ORDS;\n      }\n    }\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3c4b1dec123e039b2e4f9a82d8d7005a1151a97c":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3c4b1dec123e039b2e4f9a82d8d7005a1151a97c"]},"commit2Childs":{"3c4b1dec123e039b2e4f9a82d8d7005a1151a97c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["3c4b1dec123e039b2e4f9a82d8d7005a1151a97c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}