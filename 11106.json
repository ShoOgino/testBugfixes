{"path":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,IndexWriterConfig).mjava","commits":[{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,IndexWriterConfig).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,IndexDeletionPolicy,int,IndexingChain,IndexCommit).mjava","sourceNew":"  /**\n   * Constructs a new IndexWriter per the settings given in <code>conf</code>.\n   * Note that the passed in {@link IndexWriterConfig} is cloned and thus making\n   * changes to it after IndexWriter has been instantiated will not affect\n   * IndexWriter. Additionally, calling {@link #getConfig()} and changing the\n   * parameters does not affect that IndexWriter instance.\n   * <p>\n   * <b>NOTE:</b> by default, {@link IndexWriterConfig#getMaxFieldLength()}\n   * returns {@link IndexWriterConfig#UNLIMITED_FIELD_LENGTH}. Pay attention to\n   * whether this setting fits your application.\n   * \n   * @param d\n   *          the index directory. The index is either created or appended\n   *          according <code>conf.getOpenMode()</code>.\n   * @param conf\n   *          the configuration settings according to which IndexWriter should\n   *          be initalized.\n   * @throws CorruptIndexException\n   *           if the index is corrupt\n   * @throws LockObtainFailedException\n   *           if another writer has this index open (<code>write.lock</code>\n   *           could not be obtained)\n   * @throws IOException\n   *           if the directory cannot be read/written to, or if it does not\n   *           exist and <code>conf.getOpenMode()</code> is\n   *           <code>OpenMode.APPEND</code> or if there is any other low-level\n   *           IO error\n   */\n  public IndexWriter(Directory d, IndexWriterConfig conf)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    config = (IndexWriterConfig) conf.clone();\n    directory = d;\n    analyzer = conf.getAnalyzer();\n    setMessageID(defaultInfoStream);\n    maxFieldLength = conf.getMaxFieldLength();\n    termIndexInterval = conf.getTermIndexInterval();\n    writeLockTimeout = conf.getWriteLockTimeout();\n    similarity = conf.getSimilarity();\n    mergeScheduler = conf.getMergeScheduler();\n\n    OpenMode mode = conf.getOpenMode();\n    boolean create;\n    if (mode == OpenMode.CREATE) {\n      create = true;\n    } else if (mode == OpenMode.APPEND) {\n      create = false;\n    } else {\n      // CREATE_OR_APPEND - create only if an index does not exist\n      create = !IndexReader.indexExists(directory);\n    }\n\n    if (create) {\n      // Clear the write lock in case it's leftover:\n      directory.clearLock(WRITE_LOCK_NAME);\n    }\n\n    writeLock = directory.makeLock(WRITE_LOCK_NAME);\n    if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n      throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n\n    try {\n      if (create) {\n        // Try to read first.  This is to allow create\n        // against an index that's currently open for\n        // searching.  In this case we write the next\n        // segments_N file with no segments:\n        boolean doCommit;\n        try {\n          segmentInfos.read(directory);\n          segmentInfos.clear();\n          doCommit = false;\n        } catch (IOException e) {\n          // Likely this means it's a fresh directory\n          doCommit = true;\n        }\n\n        if (doCommit) {\n          // Only commit if there is no segments file in\n          // this dir already.\n          segmentInfos.commit(directory);\n          synced.addAll(segmentInfos.files(directory, true));\n        } else {\n          // Record that we have a change (zero out all\n          // segments) pending:\n          changeCount++;\n        }\n      } else {\n        segmentInfos.read(directory);\n\n        IndexCommit commit = conf.getIndexCommit();\n        if (commit != null) {\n          // Swap out all segments, but, keep metadata in\n          // SegmentInfos, like version & generation, to\n          // preserve write-once.  This is important if\n          // readers are open against the future commit\n          // points.\n          if (commit.getDirectory() != directory)\n            throw new IllegalArgumentException(\"IndexCommit's directory doesn't match my directory\");\n          SegmentInfos oldInfos = new SegmentInfos();\n          oldInfos.read(directory, commit.getSegmentsFileName());\n          segmentInfos.replace(oldInfos);\n          changeCount++;\n          if (infoStream != null)\n            message(\"init: loaded commit \\\"\" + commit.getSegmentsFileName() + \"\\\"\");\n        }\n\n        // We assume that this segments_N was previously\n        // properly sync'd:\n        synced.addAll(segmentInfos.files(directory, true));\n      }\n\n      setRollbackSegmentInfos(segmentInfos);\n\n      docWriter = new DocumentsWriter(directory, this, conf.getIndexingChain());\n      docWriter.setInfoStream(infoStream);\n      docWriter.setMaxFieldLength(maxFieldLength);\n\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      deleter = new IndexFileDeleter(directory,\n                                     conf.getIndexDeletionPolicy(),\n                                     segmentInfos, infoStream, docWriter);\n\n      if (deleter.startingCommitDeleted)\n        // Deletion policy deleted the \"head\" commit point.\n        // We have to mark ourself as changed so that if we\n        // are closed w/o any further changes we write a new\n        // segments_N file.\n        changeCount++;\n\n      docWriter.setMaxBufferedDeleteTerms(conf.getMaxBufferedDeleteTerms());\n      docWriter.setRAMBufferSizeMB(conf.getRAMBufferSizeMB());\n      docWriter.setMaxBufferedDocs(conf.getMaxBufferedDocs());\n      pushMaxBufferedDocs();\n\n      if (infoStream != null) {\n        messageState();\n      }\n\n    } catch (IOException e) {\n      writeLock.release();\n      writeLock = null;\n      throw e;\n    }\n  }\n\n","sourceOld":"  private void init(Directory d, Analyzer a, final boolean create,  \n                    IndexDeletionPolicy deletionPolicy, int maxFieldLength,\n                    IndexingChain indexingChain, IndexCommit commit)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n\n    directory = d;\n    analyzer = a;\n    setMessageID(defaultInfoStream);\n    this.maxFieldLength = maxFieldLength;\n\n    if (indexingChain == null)\n      indexingChain = DocumentsWriter.DefaultIndexingChain;\n\n    if (create) {\n      // Clear the write lock in case it's leftover:\n      directory.clearLock(WRITE_LOCK_NAME);\n    }\n\n    Lock writeLock = directory.makeLock(WRITE_LOCK_NAME);\n    if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n      throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    try {\n      if (create) {\n        // Try to read first.  This is to allow create\n        // against an index that's currently open for\n        // searching.  In this case we write the next\n        // segments_N file with no segments:\n        boolean doCommit;\n        try {\n          segmentInfos.read(directory);\n          segmentInfos.clear();\n          doCommit = false;\n        } catch (IOException e) {\n          // Likely this means it's a fresh directory\n          doCommit = true;\n        }\n\n        if (doCommit) {\n          // Only commit if there is no segments file in\n          // this dir already.\n          segmentInfos.commit(directory);\n          synced.addAll(segmentInfos.files(directory, true));\n        } else {\n          // Record that we have a change (zero out all\n          // segments) pending:\n          changeCount++;\n        }\n      } else {\n        segmentInfos.read(directory);\n\n        if (commit != null) {\n          // Swap out all segments, but, keep metadata in\n          // SegmentInfos, like version & generation, to\n          // preserve write-once.  This is important if\n          // readers are open against the future commit\n          // points.\n          if (commit.getDirectory() != directory)\n            throw new IllegalArgumentException(\"IndexCommit's directory doesn't match my directory\");\n          SegmentInfos oldInfos = new SegmentInfos();\n          oldInfos.read(directory, commit.getSegmentsFileName());\n          segmentInfos.replace(oldInfos);\n          changeCount++;\n          if (infoStream != null)\n            message(\"init: loaded commit \\\"\" + commit.getSegmentsFileName() + \"\\\"\");\n        }\n\n        // We assume that this segments_N was previously\n        // properly sync'd:\n        synced.addAll(segmentInfos.files(directory, true));\n      }\n\n      setRollbackSegmentInfos(segmentInfos);\n\n      docWriter = new DocumentsWriter(directory, this, indexingChain);\n      docWriter.setInfoStream(infoStream);\n      docWriter.setMaxFieldLength(maxFieldLength);\n\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      deleter = new IndexFileDeleter(directory,\n                                     deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                     segmentInfos, infoStream, docWriter);\n\n      if (deleter.startingCommitDeleted)\n        // Deletion policy deleted the \"head\" commit point.\n        // We have to mark ourself as changed so that if we\n        // are closed w/o any further changes we write a new\n        // segments_N file.\n        changeCount++;\n\n      pushMaxBufferedDocs();\n\n      if (infoStream != null) {\n        message(\"init: create=\" + create);\n        messageState();\n      }\n\n    } catch (IOException e) {\n      this.writeLock.release();\n      this.writeLock = null;\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,IndexDeletionPolicy,int,IndexingChain,IndexCommit).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,IndexWriterConfig).mjava","sourceNew":"  private void init(Directory d, Analyzer a, final boolean create,  \n                    IndexDeletionPolicy deletionPolicy, int maxFieldLength,\n                    IndexingChain indexingChain, IndexCommit commit)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n\n    directory = d;\n    analyzer = a;\n    setMessageID(defaultInfoStream);\n    this.maxFieldLength = maxFieldLength;\n\n    if (indexingChain == null)\n      indexingChain = DocumentsWriter.DefaultIndexingChain;\n\n    if (create) {\n      // Clear the write lock in case it's leftover:\n      directory.clearLock(WRITE_LOCK_NAME);\n    }\n\n    Lock writeLock = directory.makeLock(WRITE_LOCK_NAME);\n    if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n      throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    try {\n      if (create) {\n        // Try to read first.  This is to allow create\n        // against an index that's currently open for\n        // searching.  In this case we write the next\n        // segments_N file with no segments:\n        boolean doCommit;\n        try {\n          segmentInfos.read(directory);\n          segmentInfos.clear();\n          doCommit = false;\n        } catch (IOException e) {\n          // Likely this means it's a fresh directory\n          doCommit = true;\n        }\n\n        if (doCommit) {\n          // Only commit if there is no segments file in\n          // this dir already.\n          segmentInfos.commit(directory);\n          synced.addAll(segmentInfos.files(directory, true));\n        } else {\n          // Record that we have a change (zero out all\n          // segments) pending:\n          changeCount++;\n        }\n      } else {\n        segmentInfos.read(directory);\n\n        if (commit != null) {\n          // Swap out all segments, but, keep metadata in\n          // SegmentInfos, like version & generation, to\n          // preserve write-once.  This is important if\n          // readers are open against the future commit\n          // points.\n          if (commit.getDirectory() != directory)\n            throw new IllegalArgumentException(\"IndexCommit's directory doesn't match my directory\");\n          SegmentInfos oldInfos = new SegmentInfos();\n          oldInfos.read(directory, commit.getSegmentsFileName());\n          segmentInfos.replace(oldInfos);\n          changeCount++;\n          if (infoStream != null)\n            message(\"init: loaded commit \\\"\" + commit.getSegmentsFileName() + \"\\\"\");\n        }\n\n        // We assume that this segments_N was previously\n        // properly sync'd:\n        synced.addAll(segmentInfos.files(directory, true));\n      }\n\n      setRollbackSegmentInfos(segmentInfos);\n\n      docWriter = new DocumentsWriter(directory, this, indexingChain);\n      docWriter.setInfoStream(infoStream);\n      docWriter.setMaxFieldLength(maxFieldLength);\n\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      deleter = new IndexFileDeleter(directory,\n                                     deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                     segmentInfos, infoStream, docWriter);\n\n      if (deleter.startingCommitDeleted)\n        // Deletion policy deleted the \"head\" commit point.\n        // We have to mark ourself as changed so that if we\n        // are closed w/o any further changes we write a new\n        // segments_N file.\n        changeCount++;\n\n      pushMaxBufferedDocs();\n\n      if (infoStream != null) {\n        message(\"init: create=\" + create);\n        messageState();\n      }\n\n    } catch (IOException e) {\n      this.writeLock.release();\n      this.writeLock = null;\n      throw e;\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a new IndexWriter per the settings given in <code>conf</code>.\n   * Note that the passed in {@link IndexWriterConfig} is cloned and thus making\n   * changes to it after IndexWriter has been instantiated will not affect\n   * IndexWriter. Additionally, calling {@link #getConfig()} and changing the\n   * parameters does not affect that IndexWriter instance.\n   * <p>\n   * <b>NOTE:</b> by default, {@link IndexWriterConfig#getMaxFieldLength()}\n   * returns {@link IndexWriterConfig#UNLIMITED_FIELD_LENGTH}. Pay attention to\n   * whether this setting fits your application.\n   * \n   * @param d\n   *          the index directory. The index is either created or appended\n   *          according <code>conf.getOpenMode()</code>.\n   * @param conf\n   *          the configuration settings according to which IndexWriter should\n   *          be initalized.\n   * @throws CorruptIndexException\n   *           if the index is corrupt\n   * @throws LockObtainFailedException\n   *           if another writer has this index open (<code>write.lock</code>\n   *           could not be obtained)\n   * @throws IOException\n   *           if the directory cannot be read/written to, or if it does not\n   *           exist and <code>conf.getOpenMode()</code> is\n   *           <code>OpenMode.APPEND</code> or if there is any other low-level\n   *           IO error\n   */\n  public IndexWriter(Directory d, IndexWriterConfig conf)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    config = (IndexWriterConfig) conf.clone();\n    directory = d;\n    analyzer = conf.getAnalyzer();\n    setMessageID(defaultInfoStream);\n    maxFieldLength = conf.getMaxFieldLength();\n    termIndexInterval = conf.getTermIndexInterval();\n    writeLockTimeout = conf.getWriteLockTimeout();\n    similarity = conf.getSimilarity();\n    mergeScheduler = conf.getMergeScheduler();\n\n    OpenMode mode = conf.getOpenMode();\n    boolean create;\n    if (mode == OpenMode.CREATE) {\n      create = true;\n    } else if (mode == OpenMode.APPEND) {\n      create = false;\n    } else {\n      // CREATE_OR_APPEND - create only if an index does not exist\n      create = !IndexReader.indexExists(directory);\n    }\n\n    if (create) {\n      // Clear the write lock in case it's leftover:\n      directory.clearLock(WRITE_LOCK_NAME);\n    }\n\n    writeLock = directory.makeLock(WRITE_LOCK_NAME);\n    if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n      throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n\n    try {\n      if (create) {\n        // Try to read first.  This is to allow create\n        // against an index that's currently open for\n        // searching.  In this case we write the next\n        // segments_N file with no segments:\n        boolean doCommit;\n        try {\n          segmentInfos.read(directory);\n          segmentInfos.clear();\n          doCommit = false;\n        } catch (IOException e) {\n          // Likely this means it's a fresh directory\n          doCommit = true;\n        }\n\n        if (doCommit) {\n          // Only commit if there is no segments file in\n          // this dir already.\n          segmentInfos.commit(directory);\n          synced.addAll(segmentInfos.files(directory, true));\n        } else {\n          // Record that we have a change (zero out all\n          // segments) pending:\n          changeCount++;\n        }\n      } else {\n        segmentInfos.read(directory);\n\n        IndexCommit commit = conf.getIndexCommit();\n        if (commit != null) {\n          // Swap out all segments, but, keep metadata in\n          // SegmentInfos, like version & generation, to\n          // preserve write-once.  This is important if\n          // readers are open against the future commit\n          // points.\n          if (commit.getDirectory() != directory)\n            throw new IllegalArgumentException(\"IndexCommit's directory doesn't match my directory\");\n          SegmentInfos oldInfos = new SegmentInfos();\n          oldInfos.read(directory, commit.getSegmentsFileName());\n          segmentInfos.replace(oldInfos);\n          changeCount++;\n          if (infoStream != null)\n            message(\"init: loaded commit \\\"\" + commit.getSegmentsFileName() + \"\\\"\");\n        }\n\n        // We assume that this segments_N was previously\n        // properly sync'd:\n        synced.addAll(segmentInfos.files(directory, true));\n      }\n\n      setRollbackSegmentInfos(segmentInfos);\n\n      docWriter = new DocumentsWriter(directory, this, conf.getIndexingChain());\n      docWriter.setInfoStream(infoStream);\n      docWriter.setMaxFieldLength(maxFieldLength);\n\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      deleter = new IndexFileDeleter(directory,\n                                     conf.getIndexDeletionPolicy(),\n                                     segmentInfos, infoStream, docWriter);\n\n      if (deleter.startingCommitDeleted)\n        // Deletion policy deleted the \"head\" commit point.\n        // We have to mark ourself as changed so that if we\n        // are closed w/o any further changes we write a new\n        // segments_N file.\n        changeCount++;\n\n      docWriter.setMaxBufferedDeleteTerms(conf.getMaxBufferedDeleteTerms());\n      docWriter.setRAMBufferSizeMB(conf.getRAMBufferSizeMB());\n      docWriter.setMaxBufferedDocs(conf.getMaxBufferedDocs());\n      pushMaxBufferedDocs();\n\n      if (infoStream != null) {\n        messageState();\n      }\n\n    } catch (IOException e) {\n      writeLock.release();\n      writeLock = null;\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,IndexWriterConfig).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#init(Directory,Analyzer,boolean,IndexDeletionPolicy,int,IndexingChain,IndexCommit).mjava","sourceNew":"  /**\n   * Constructs a new IndexWriter per the settings given in <code>conf</code>.\n   * Note that the passed in {@link IndexWriterConfig} is cloned and thus making\n   * changes to it after IndexWriter has been instantiated will not affect\n   * IndexWriter. Additionally, calling {@link #getConfig()} and changing the\n   * parameters does not affect that IndexWriter instance.\n   * <p>\n   * <b>NOTE:</b> by default, {@link IndexWriterConfig#getMaxFieldLength()}\n   * returns {@link IndexWriterConfig#UNLIMITED_FIELD_LENGTH}. Pay attention to\n   * whether this setting fits your application.\n   * \n   * @param d\n   *          the index directory. The index is either created or appended\n   *          according <code>conf.getOpenMode()</code>.\n   * @param conf\n   *          the configuration settings according to which IndexWriter should\n   *          be initalized.\n   * @throws CorruptIndexException\n   *           if the index is corrupt\n   * @throws LockObtainFailedException\n   *           if another writer has this index open (<code>write.lock</code>\n   *           could not be obtained)\n   * @throws IOException\n   *           if the directory cannot be read/written to, or if it does not\n   *           exist and <code>conf.getOpenMode()</code> is\n   *           <code>OpenMode.APPEND</code> or if there is any other low-level\n   *           IO error\n   */\n  public IndexWriter(Directory d, IndexWriterConfig conf)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    config = (IndexWriterConfig) conf.clone();\n    directory = d;\n    analyzer = conf.getAnalyzer();\n    setMessageID(defaultInfoStream);\n    maxFieldLength = conf.getMaxFieldLength();\n    termIndexInterval = conf.getTermIndexInterval();\n    writeLockTimeout = conf.getWriteLockTimeout();\n    similarity = conf.getSimilarity();\n    mergeScheduler = conf.getMergeScheduler();\n    mergedSegmentWarmer = conf.getMergedSegmentWarmer();\n    \n    OpenMode mode = conf.getOpenMode();\n    boolean create;\n    if (mode == OpenMode.CREATE) {\n      create = true;\n    } else if (mode == OpenMode.APPEND) {\n      create = false;\n    } else {\n      // CREATE_OR_APPEND - create only if an index does not exist\n      create = !IndexReader.indexExists(directory);\n    }\n\n    if (create) {\n      // Clear the write lock in case it's leftover:\n      directory.clearLock(WRITE_LOCK_NAME);\n    }\n\n    writeLock = directory.makeLock(WRITE_LOCK_NAME);\n    if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n      throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n\n    try {\n      if (create) {\n        // Try to read first.  This is to allow create\n        // against an index that's currently open for\n        // searching.  In this case we write the next\n        // segments_N file with no segments:\n        boolean doCommit;\n        try {\n          segmentInfos.read(directory);\n          segmentInfos.clear();\n          doCommit = false;\n        } catch (IOException e) {\n          // Likely this means it's a fresh directory\n          doCommit = true;\n        }\n\n        if (doCommit) {\n          // Only commit if there is no segments file in\n          // this dir already.\n          segmentInfos.commit(directory);\n          synced.addAll(segmentInfos.files(directory, true));\n        } else {\n          // Record that we have a change (zero out all\n          // segments) pending:\n          changeCount++;\n        }\n      } else {\n        segmentInfos.read(directory);\n\n        IndexCommit commit = conf.getIndexCommit();\n        if (commit != null) {\n          // Swap out all segments, but, keep metadata in\n          // SegmentInfos, like version & generation, to\n          // preserve write-once.  This is important if\n          // readers are open against the future commit\n          // points.\n          if (commit.getDirectory() != directory)\n            throw new IllegalArgumentException(\"IndexCommit's directory doesn't match my directory\");\n          SegmentInfos oldInfos = new SegmentInfos();\n          oldInfos.read(directory, commit.getSegmentsFileName());\n          segmentInfos.replace(oldInfos);\n          changeCount++;\n          if (infoStream != null)\n            message(\"init: loaded commit \\\"\" + commit.getSegmentsFileName() + \"\\\"\");\n        }\n\n        // We assume that this segments_N was previously\n        // properly sync'd:\n        synced.addAll(segmentInfos.files(directory, true));\n      }\n\n      setRollbackSegmentInfos(segmentInfos);\n\n      docWriter = new DocumentsWriter(directory, this, conf.getIndexingChain());\n      docWriter.setInfoStream(infoStream);\n      docWriter.setMaxFieldLength(maxFieldLength);\n\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      deleter = new IndexFileDeleter(directory,\n                                     conf.getIndexDeletionPolicy(),\n                                     segmentInfos, infoStream, docWriter);\n\n      if (deleter.startingCommitDeleted)\n        // Deletion policy deleted the \"head\" commit point.\n        // We have to mark ourself as changed so that if we\n        // are closed w/o any further changes we write a new\n        // segments_N file.\n        changeCount++;\n\n      docWriter.setMaxBufferedDeleteTerms(conf.getMaxBufferedDeleteTerms());\n      docWriter.setRAMBufferSizeMB(conf.getRAMBufferSizeMB());\n      docWriter.setMaxBufferedDocs(conf.getMaxBufferedDocs());\n      pushMaxBufferedDocs();\n\n      if (infoStream != null) {\n        messageState();\n      }\n\n    } catch (IOException e) {\n      writeLock.release();\n      writeLock = null;\n      throw e;\n    }\n  }\n\n","sourceOld":"  private void init(Directory d, Analyzer a, final boolean create,  \n                    IndexDeletionPolicy deletionPolicy, int maxFieldLength,\n                    IndexingChain indexingChain, IndexCommit commit)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n\n    directory = d;\n    analyzer = a;\n    setMessageID(defaultInfoStream);\n    this.maxFieldLength = maxFieldLength;\n\n    if (indexingChain == null)\n      indexingChain = DocumentsWriter.DefaultIndexingChain;\n\n    if (create) {\n      // Clear the write lock in case it's leftover:\n      directory.clearLock(WRITE_LOCK_NAME);\n    }\n\n    Lock writeLock = directory.makeLock(WRITE_LOCK_NAME);\n    if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n      throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n    this.writeLock = writeLock;                   // save it\n\n    try {\n      if (create) {\n        // Try to read first.  This is to allow create\n        // against an index that's currently open for\n        // searching.  In this case we write the next\n        // segments_N file with no segments:\n        boolean doCommit;\n        try {\n          segmentInfos.read(directory);\n          segmentInfos.clear();\n          doCommit = false;\n        } catch (IOException e) {\n          // Likely this means it's a fresh directory\n          doCommit = true;\n        }\n\n        if (doCommit) {\n          // Only commit if there is no segments file in\n          // this dir already.\n          segmentInfos.commit(directory);\n          synced.addAll(segmentInfos.files(directory, true));\n        } else {\n          // Record that we have a change (zero out all\n          // segments) pending:\n          changeCount++;\n        }\n      } else {\n        segmentInfos.read(directory);\n\n        if (commit != null) {\n          // Swap out all segments, but, keep metadata in\n          // SegmentInfos, like version & generation, to\n          // preserve write-once.  This is important if\n          // readers are open against the future commit\n          // points.\n          if (commit.getDirectory() != directory)\n            throw new IllegalArgumentException(\"IndexCommit's directory doesn't match my directory\");\n          SegmentInfos oldInfos = new SegmentInfos();\n          oldInfos.read(directory, commit.getSegmentsFileName());\n          segmentInfos.replace(oldInfos);\n          changeCount++;\n          if (infoStream != null)\n            message(\"init: loaded commit \\\"\" + commit.getSegmentsFileName() + \"\\\"\");\n        }\n\n        // We assume that this segments_N was previously\n        // properly sync'd:\n        synced.addAll(segmentInfos.files(directory, true));\n      }\n\n      setRollbackSegmentInfos(segmentInfos);\n\n      docWriter = new DocumentsWriter(directory, this, indexingChain);\n      docWriter.setInfoStream(infoStream);\n      docWriter.setMaxFieldLength(maxFieldLength);\n\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      deleter = new IndexFileDeleter(directory,\n                                     deletionPolicy == null ? new KeepOnlyLastCommitDeletionPolicy() : deletionPolicy,\n                                     segmentInfos, infoStream, docWriter);\n\n      if (deleter.startingCommitDeleted)\n        // Deletion policy deleted the \"head\" commit point.\n        // We have to mark ourself as changed so that if we\n        // are closed w/o any further changes we write a new\n        // segments_N file.\n        changeCount++;\n\n      pushMaxBufferedDocs();\n\n      if (infoStream != null) {\n        message(\"init: create=\" + create);\n        messageState();\n      }\n\n    } catch (IOException e) {\n      this.writeLock.release();\n      this.writeLock = null;\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9802bb5985cb6cc3e0a3a0ecb2158acf4d5cfcf","date":1268662366,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,IndexWriterConfig).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,IndexWriterConfig).mjava","sourceNew":"  /**\n   * Constructs a new IndexWriter per the settings given in <code>conf</code>.\n   * Note that the passed in {@link IndexWriterConfig} is cloned and thus making\n   * changes to it after IndexWriter has been instantiated will not affect\n   * IndexWriter. Additionally, calling {@link #getConfig()} and changing the\n   * parameters does not affect that IndexWriter instance.\n   * <p>\n   * <b>NOTE:</b> by default, {@link IndexWriterConfig#getMaxFieldLength()}\n   * returns {@link IndexWriterConfig#UNLIMITED_FIELD_LENGTH}. Pay attention to\n   * whether this setting fits your application.\n   * \n   * @param d\n   *          the index directory. The index is either created or appended\n   *          according <code>conf.getOpenMode()</code>.\n   * @param conf\n   *          the configuration settings according to which IndexWriter should\n   *          be initalized.\n   * @throws CorruptIndexException\n   *           if the index is corrupt\n   * @throws LockObtainFailedException\n   *           if another writer has this index open (<code>write.lock</code>\n   *           could not be obtained)\n   * @throws IOException\n   *           if the directory cannot be read/written to, or if it does not\n   *           exist and <code>conf.getOpenMode()</code> is\n   *           <code>OpenMode.APPEND</code> or if there is any other low-level\n   *           IO error\n   */\n  public IndexWriter(Directory d, IndexWriterConfig conf)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    config = (IndexWriterConfig) conf.clone();\n    directory = d;\n    analyzer = conf.getAnalyzer();\n    setMessageID(defaultInfoStream);\n    maxFieldLength = conf.getMaxFieldLength();\n    termIndexInterval = conf.getTermIndexInterval();\n    writeLockTimeout = conf.getWriteLockTimeout();\n    similarity = conf.getSimilarity();\n    mergeScheduler = conf.getMergeScheduler();\n    mergedSegmentWarmer = conf.getMergedSegmentWarmer();\n    \n    OpenMode mode = conf.getOpenMode();\n    boolean create;\n    if (mode == OpenMode.CREATE) {\n      create = true;\n    } else if (mode == OpenMode.APPEND) {\n      create = false;\n    } else {\n      // CREATE_OR_APPEND - create only if an index does not exist\n      create = !IndexReader.indexExists(directory);\n    }\n\n    if (create) {\n      // Clear the write lock in case it's leftover:\n      directory.clearLock(WRITE_LOCK_NAME);\n    }\n\n    writeLock = directory.makeLock(WRITE_LOCK_NAME);\n    if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n      throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n\n    try {\n      if (create) {\n        // Try to read first.  This is to allow create\n        // against an index that's currently open for\n        // searching.  In this case we write the next\n        // segments_N file with no segments:\n        boolean doCommit;\n        try {\n          segmentInfos.read(directory);\n          segmentInfos.clear();\n          doCommit = false;\n        } catch (IOException e) {\n          // Likely this means it's a fresh directory\n          doCommit = true;\n        }\n\n        if (doCommit) {\n          // Only commit if there is no segments file in\n          // this dir already.\n          segmentInfos.commit(directory);\n          synced.addAll(segmentInfos.files(directory, true));\n        } else {\n          // Record that we have a change (zero out all\n          // segments) pending:\n          changeCount++;\n        }\n      } else {\n        segmentInfos.read(directory);\n\n        IndexCommit commit = conf.getIndexCommit();\n        if (commit != null) {\n          // Swap out all segments, but, keep metadata in\n          // SegmentInfos, like version & generation, to\n          // preserve write-once.  This is important if\n          // readers are open against the future commit\n          // points.\n          if (commit.getDirectory() != directory)\n            throw new IllegalArgumentException(\"IndexCommit's directory doesn't match my directory\");\n          SegmentInfos oldInfos = new SegmentInfos();\n          oldInfos.read(directory, commit.getSegmentsFileName());\n          segmentInfos.replace(oldInfos);\n          changeCount++;\n          if (infoStream != null)\n            message(\"init: loaded commit \\\"\" + commit.getSegmentsFileName() + \"\\\"\");\n        }\n\n        // We assume that this segments_N was previously\n        // properly sync'd:\n        synced.addAll(segmentInfos.files(directory, true));\n      }\n\n      setRollbackSegmentInfos(segmentInfos);\n\n      docWriter = new DocumentsWriter(directory, this, conf.getIndexingChain(), conf.getMaxThreadStates());\n      docWriter.setInfoStream(infoStream);\n      docWriter.setMaxFieldLength(maxFieldLength);\n\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      deleter = new IndexFileDeleter(directory,\n                                     conf.getIndexDeletionPolicy(),\n                                     segmentInfos, infoStream, docWriter);\n\n      if (deleter.startingCommitDeleted)\n        // Deletion policy deleted the \"head\" commit point.\n        // We have to mark ourself as changed so that if we\n        // are closed w/o any further changes we write a new\n        // segments_N file.\n        changeCount++;\n\n      docWriter.setMaxBufferedDeleteTerms(conf.getMaxBufferedDeleteTerms());\n      docWriter.setRAMBufferSizeMB(conf.getRAMBufferSizeMB());\n      docWriter.setMaxBufferedDocs(conf.getMaxBufferedDocs());\n      pushMaxBufferedDocs();\n\n      if (infoStream != null) {\n        messageState();\n      }\n\n    } catch (IOException e) {\n      writeLock.release();\n      writeLock = null;\n      throw e;\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a new IndexWriter per the settings given in <code>conf</code>.\n   * Note that the passed in {@link IndexWriterConfig} is cloned and thus making\n   * changes to it after IndexWriter has been instantiated will not affect\n   * IndexWriter. Additionally, calling {@link #getConfig()} and changing the\n   * parameters does not affect that IndexWriter instance.\n   * <p>\n   * <b>NOTE:</b> by default, {@link IndexWriterConfig#getMaxFieldLength()}\n   * returns {@link IndexWriterConfig#UNLIMITED_FIELD_LENGTH}. Pay attention to\n   * whether this setting fits your application.\n   * \n   * @param d\n   *          the index directory. The index is either created or appended\n   *          according <code>conf.getOpenMode()</code>.\n   * @param conf\n   *          the configuration settings according to which IndexWriter should\n   *          be initalized.\n   * @throws CorruptIndexException\n   *           if the index is corrupt\n   * @throws LockObtainFailedException\n   *           if another writer has this index open (<code>write.lock</code>\n   *           could not be obtained)\n   * @throws IOException\n   *           if the directory cannot be read/written to, or if it does not\n   *           exist and <code>conf.getOpenMode()</code> is\n   *           <code>OpenMode.APPEND</code> or if there is any other low-level\n   *           IO error\n   */\n  public IndexWriter(Directory d, IndexWriterConfig conf)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    config = (IndexWriterConfig) conf.clone();\n    directory = d;\n    analyzer = conf.getAnalyzer();\n    setMessageID(defaultInfoStream);\n    maxFieldLength = conf.getMaxFieldLength();\n    termIndexInterval = conf.getTermIndexInterval();\n    writeLockTimeout = conf.getWriteLockTimeout();\n    similarity = conf.getSimilarity();\n    mergeScheduler = conf.getMergeScheduler();\n    mergedSegmentWarmer = conf.getMergedSegmentWarmer();\n    \n    OpenMode mode = conf.getOpenMode();\n    boolean create;\n    if (mode == OpenMode.CREATE) {\n      create = true;\n    } else if (mode == OpenMode.APPEND) {\n      create = false;\n    } else {\n      // CREATE_OR_APPEND - create only if an index does not exist\n      create = !IndexReader.indexExists(directory);\n    }\n\n    if (create) {\n      // Clear the write lock in case it's leftover:\n      directory.clearLock(WRITE_LOCK_NAME);\n    }\n\n    writeLock = directory.makeLock(WRITE_LOCK_NAME);\n    if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n      throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n\n    try {\n      if (create) {\n        // Try to read first.  This is to allow create\n        // against an index that's currently open for\n        // searching.  In this case we write the next\n        // segments_N file with no segments:\n        boolean doCommit;\n        try {\n          segmentInfos.read(directory);\n          segmentInfos.clear();\n          doCommit = false;\n        } catch (IOException e) {\n          // Likely this means it's a fresh directory\n          doCommit = true;\n        }\n\n        if (doCommit) {\n          // Only commit if there is no segments file in\n          // this dir already.\n          segmentInfos.commit(directory);\n          synced.addAll(segmentInfos.files(directory, true));\n        } else {\n          // Record that we have a change (zero out all\n          // segments) pending:\n          changeCount++;\n        }\n      } else {\n        segmentInfos.read(directory);\n\n        IndexCommit commit = conf.getIndexCommit();\n        if (commit != null) {\n          // Swap out all segments, but, keep metadata in\n          // SegmentInfos, like version & generation, to\n          // preserve write-once.  This is important if\n          // readers are open against the future commit\n          // points.\n          if (commit.getDirectory() != directory)\n            throw new IllegalArgumentException(\"IndexCommit's directory doesn't match my directory\");\n          SegmentInfos oldInfos = new SegmentInfos();\n          oldInfos.read(directory, commit.getSegmentsFileName());\n          segmentInfos.replace(oldInfos);\n          changeCount++;\n          if (infoStream != null)\n            message(\"init: loaded commit \\\"\" + commit.getSegmentsFileName() + \"\\\"\");\n        }\n\n        // We assume that this segments_N was previously\n        // properly sync'd:\n        synced.addAll(segmentInfos.files(directory, true));\n      }\n\n      setRollbackSegmentInfos(segmentInfos);\n\n      docWriter = new DocumentsWriter(directory, this, conf.getIndexingChain());\n      docWriter.setInfoStream(infoStream);\n      docWriter.setMaxFieldLength(maxFieldLength);\n\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      deleter = new IndexFileDeleter(directory,\n                                     conf.getIndexDeletionPolicy(),\n                                     segmentInfos, infoStream, docWriter);\n\n      if (deleter.startingCommitDeleted)\n        // Deletion policy deleted the \"head\" commit point.\n        // We have to mark ourself as changed so that if we\n        // are closed w/o any further changes we write a new\n        // segments_N file.\n        changeCount++;\n\n      docWriter.setMaxBufferedDeleteTerms(conf.getMaxBufferedDeleteTerms());\n      docWriter.setRAMBufferSizeMB(conf.getRAMBufferSizeMB());\n      docWriter.setMaxBufferedDocs(conf.getMaxBufferedDocs());\n      pushMaxBufferedDocs();\n\n      if (infoStream != null) {\n        messageState();\n      }\n\n    } catch (IOException e) {\n      writeLock.release();\n      writeLock = null;\n      throw e;\n    }\n  }\n\n","bugFix":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,IndexWriterConfig).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,IndexWriterConfig).mjava","sourceNew":"  /**\n   * Constructs a new IndexWriter per the settings given in <code>conf</code>.\n   * Note that the passed in {@link IndexWriterConfig} is cloned and thus making\n   * changes to it after IndexWriter has been instantiated will not affect\n   * IndexWriter. Additionally, calling {@link #getConfig()} and changing the\n   * parameters does not affect that IndexWriter instance.\n   * <p>\n   * <b>NOTE:</b> by default, {@link IndexWriterConfig#getMaxFieldLength()}\n   * returns {@link IndexWriterConfig#UNLIMITED_FIELD_LENGTH}. Pay attention to\n   * whether this setting fits your application.\n   * \n   * @param d\n   *          the index directory. The index is either created or appended\n   *          according <code>conf.getOpenMode()</code>.\n   * @param conf\n   *          the configuration settings according to which IndexWriter should\n   *          be initalized.\n   * @throws CorruptIndexException\n   *           if the index is corrupt\n   * @throws LockObtainFailedException\n   *           if another writer has this index open (<code>write.lock</code>\n   *           could not be obtained)\n   * @throws IOException\n   *           if the directory cannot be read/written to, or if it does not\n   *           exist and <code>conf.getOpenMode()</code> is\n   *           <code>OpenMode.APPEND</code> or if there is any other low-level\n   *           IO error\n   */\n  public IndexWriter(Directory d, IndexWriterConfig conf)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    config = (IndexWriterConfig) conf.clone();\n    directory = d;\n    analyzer = conf.getAnalyzer();\n    setMessageID(defaultInfoStream);\n    maxFieldLength = conf.getMaxFieldLength();\n    termIndexInterval = conf.getTermIndexInterval();\n    writeLockTimeout = conf.getWriteLockTimeout();\n    similarity = conf.getSimilarity();\n    mergeScheduler = conf.getMergeScheduler();\n    mergedSegmentWarmer = conf.getMergedSegmentWarmer();\n    \n    OpenMode mode = conf.getOpenMode();\n    boolean create;\n    if (mode == OpenMode.CREATE) {\n      create = true;\n    } else if (mode == OpenMode.APPEND) {\n      create = false;\n    } else {\n      // CREATE_OR_APPEND - create only if an index does not exist\n      create = !IndexReader.indexExists(directory);\n    }\n\n    if (create) {\n      // Clear the write lock in case it's leftover:\n      directory.clearLock(WRITE_LOCK_NAME);\n    }\n\n    writeLock = directory.makeLock(WRITE_LOCK_NAME);\n    if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n      throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n\n    try {\n      if (create) {\n        // Try to read first.  This is to allow create\n        // against an index that's currently open for\n        // searching.  In this case we write the next\n        // segments_N file with no segments:\n        boolean doCommit;\n        try {\n          segmentInfos.read(directory);\n          segmentInfos.clear();\n          doCommit = false;\n        } catch (IOException e) {\n          // Likely this means it's a fresh directory\n          doCommit = true;\n        }\n\n        if (doCommit) {\n          // Only commit if there is no segments file in\n          // this dir already.\n          segmentInfos.commit(directory);\n          synced.addAll(segmentInfos.files(directory, true));\n        } else {\n          // Record that we have a change (zero out all\n          // segments) pending:\n          changeCount++;\n        }\n      } else {\n        segmentInfos.read(directory);\n\n        IndexCommit commit = conf.getIndexCommit();\n        if (commit != null) {\n          // Swap out all segments, but, keep metadata in\n          // SegmentInfos, like version & generation, to\n          // preserve write-once.  This is important if\n          // readers are open against the future commit\n          // points.\n          if (commit.getDirectory() != directory)\n            throw new IllegalArgumentException(\"IndexCommit's directory doesn't match my directory\");\n          SegmentInfos oldInfos = new SegmentInfos();\n          oldInfos.read(directory, commit.getSegmentsFileName());\n          segmentInfos.replace(oldInfos);\n          changeCount++;\n          if (infoStream != null)\n            message(\"init: loaded commit \\\"\" + commit.getSegmentsFileName() + \"\\\"\");\n        }\n\n        // We assume that this segments_N was previously\n        // properly sync'd:\n        synced.addAll(segmentInfos.files(directory, true));\n      }\n\n      setRollbackSegmentInfos(segmentInfos);\n\n      docWriter = new DocumentsWriter(directory, this, conf.getIndexingChain(), conf.getMaxThreadStates());\n      docWriter.setInfoStream(infoStream);\n      docWriter.setMaxFieldLength(maxFieldLength);\n\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      deleter = new IndexFileDeleter(directory,\n                                     conf.getIndexDeletionPolicy(),\n                                     segmentInfos, infoStream, docWriter);\n\n      if (deleter.startingCommitDeleted)\n        // Deletion policy deleted the \"head\" commit point.\n        // We have to mark ourself as changed so that if we\n        // are closed w/o any further changes we write a new\n        // segments_N file.\n        changeCount++;\n\n      docWriter.setMaxBufferedDeleteTerms(conf.getMaxBufferedDeleteTerms());\n      docWriter.setRAMBufferSizeMB(conf.getRAMBufferSizeMB());\n      docWriter.setMaxBufferedDocs(conf.getMaxBufferedDocs());\n      pushMaxBufferedDocs();\n\n      if (infoStream != null) {\n        messageState();\n      }\n\n    } catch (IOException e) {\n      writeLock.release();\n      writeLock = null;\n      throw e;\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a new IndexWriter per the settings given in <code>conf</code>.\n   * Note that the passed in {@link IndexWriterConfig} is cloned and thus making\n   * changes to it after IndexWriter has been instantiated will not affect\n   * IndexWriter. Additionally, calling {@link #getConfig()} and changing the\n   * parameters does not affect that IndexWriter instance.\n   * <p>\n   * <b>NOTE:</b> by default, {@link IndexWriterConfig#getMaxFieldLength()}\n   * returns {@link IndexWriterConfig#UNLIMITED_FIELD_LENGTH}. Pay attention to\n   * whether this setting fits your application.\n   * \n   * @param d\n   *          the index directory. The index is either created or appended\n   *          according <code>conf.getOpenMode()</code>.\n   * @param conf\n   *          the configuration settings according to which IndexWriter should\n   *          be initalized.\n   * @throws CorruptIndexException\n   *           if the index is corrupt\n   * @throws LockObtainFailedException\n   *           if another writer has this index open (<code>write.lock</code>\n   *           could not be obtained)\n   * @throws IOException\n   *           if the directory cannot be read/written to, or if it does not\n   *           exist and <code>conf.getOpenMode()</code> is\n   *           <code>OpenMode.APPEND</code> or if there is any other low-level\n   *           IO error\n   */\n  public IndexWriter(Directory d, IndexWriterConfig conf)\n      throws CorruptIndexException, LockObtainFailedException, IOException {\n    config = (IndexWriterConfig) conf.clone();\n    directory = d;\n    analyzer = conf.getAnalyzer();\n    setMessageID(defaultInfoStream);\n    maxFieldLength = conf.getMaxFieldLength();\n    termIndexInterval = conf.getTermIndexInterval();\n    writeLockTimeout = conf.getWriteLockTimeout();\n    similarity = conf.getSimilarity();\n    mergeScheduler = conf.getMergeScheduler();\n    mergedSegmentWarmer = conf.getMergedSegmentWarmer();\n    \n    OpenMode mode = conf.getOpenMode();\n    boolean create;\n    if (mode == OpenMode.CREATE) {\n      create = true;\n    } else if (mode == OpenMode.APPEND) {\n      create = false;\n    } else {\n      // CREATE_OR_APPEND - create only if an index does not exist\n      create = !IndexReader.indexExists(directory);\n    }\n\n    if (create) {\n      // Clear the write lock in case it's leftover:\n      directory.clearLock(WRITE_LOCK_NAME);\n    }\n\n    writeLock = directory.makeLock(WRITE_LOCK_NAME);\n    if (!writeLock.obtain(writeLockTimeout)) // obtain write lock\n      throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n\n    try {\n      if (create) {\n        // Try to read first.  This is to allow create\n        // against an index that's currently open for\n        // searching.  In this case we write the next\n        // segments_N file with no segments:\n        boolean doCommit;\n        try {\n          segmentInfos.read(directory);\n          segmentInfos.clear();\n          doCommit = false;\n        } catch (IOException e) {\n          // Likely this means it's a fresh directory\n          doCommit = true;\n        }\n\n        if (doCommit) {\n          // Only commit if there is no segments file in\n          // this dir already.\n          segmentInfos.commit(directory);\n          synced.addAll(segmentInfos.files(directory, true));\n        } else {\n          // Record that we have a change (zero out all\n          // segments) pending:\n          changeCount++;\n        }\n      } else {\n        segmentInfos.read(directory);\n\n        IndexCommit commit = conf.getIndexCommit();\n        if (commit != null) {\n          // Swap out all segments, but, keep metadata in\n          // SegmentInfos, like version & generation, to\n          // preserve write-once.  This is important if\n          // readers are open against the future commit\n          // points.\n          if (commit.getDirectory() != directory)\n            throw new IllegalArgumentException(\"IndexCommit's directory doesn't match my directory\");\n          SegmentInfos oldInfos = new SegmentInfos();\n          oldInfos.read(directory, commit.getSegmentsFileName());\n          segmentInfos.replace(oldInfos);\n          changeCount++;\n          if (infoStream != null)\n            message(\"init: loaded commit \\\"\" + commit.getSegmentsFileName() + \"\\\"\");\n        }\n\n        // We assume that this segments_N was previously\n        // properly sync'd:\n        synced.addAll(segmentInfos.files(directory, true));\n      }\n\n      setRollbackSegmentInfos(segmentInfos);\n\n      docWriter = new DocumentsWriter(directory, this, conf.getIndexingChain(), conf.getMaxThreadStates());\n      docWriter.setInfoStream(infoStream);\n      docWriter.setMaxFieldLength(maxFieldLength);\n\n      // Default deleter (for backwards compatibility) is\n      // KeepOnlyLastCommitDeleter:\n      deleter = new IndexFileDeleter(directory,\n                                     conf.getIndexDeletionPolicy(),\n                                     segmentInfos, infoStream, docWriter);\n\n      if (deleter.startingCommitDeleted)\n        // Deletion policy deleted the \"head\" commit point.\n        // We have to mark ourself as changed so that if we\n        // are closed w/o any further changes we write a new\n        // segments_N file.\n        changeCount++;\n\n      docWriter.setMaxBufferedDeleteTerms(conf.getMaxBufferedDeleteTerms());\n      docWriter.setRAMBufferSizeMB(conf.getRAMBufferSizeMB());\n      docWriter.setMaxBufferedDocs(conf.getMaxBufferedDocs());\n      pushMaxBufferedDocs();\n\n      if (infoStream != null) {\n        messageState();\n      }\n\n    } catch (IOException e) {\n      writeLock.release();\n      writeLock = null;\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a9802bb5985cb6cc3e0a3a0ecb2158acf4d5cfcf":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9802bb5985cb6cc3e0a3a0ecb2158acf4d5cfcf"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["a9802bb5985cb6cc3e0a3a0ecb2158acf4d5cfcf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"a9802bb5985cb6cc3e0a3a0ecb2158acf4d5cfcf":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}