{"path":"solr/core/src/java/org/apache/solr/schema/LatLonPointSpatialField.LatLonPointSpatialStrategy.DistanceSortValueSource#getValues(LeafReaderContext,DoubleValues).mjava","commits":[{"id":"32b9119890a8e82252b6cc341ac491d18fa1e49b","date":1498575219,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/LatLonPointSpatialField.LatLonPointSpatialStrategy.DistanceSortValueSource#getValues(LeafReaderContext,DoubleValues).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/LatLonPointSpatialField.LatLonPointSpatialStrategy.DistanceSortValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        return new DoubleValues() {\n\n          @SuppressWarnings(\"unchecked\")\n          final FieldComparator<Double> comparator =\n              (FieldComparator<Double>) getSortField(false).getComparator(1, 1);\n          final LeafFieldComparator leafComparator = comparator.getLeafComparator(ctx);\n          final double mult = multiplier; // so it's a local field\n\n          double value = Double.POSITIVE_INFINITY;\n\n          @Override\n          public double doubleValue() throws IOException {\n            return value;\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            leafComparator.copy(0, doc);\n            value = comparator.value(0) * mult;\n            return true;\n          }\n        };\n      }\n\n","sourceOld":"      @Override\n      public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n        return new DoubleDocValues(this) {\n          @SuppressWarnings(\"unchecked\")\n          final FieldComparator<Double> comparator =\n              (FieldComparator<Double>) getSortField(false).getComparator(1, 1);\n          final LeafFieldComparator leafComparator = comparator.getLeafComparator(readerContext);\n          final double mult = multiplier; // so it's a local field\n\n          // Since this computation is expensive, it's worth caching it just in case.\n          double cacheDoc = -1;\n          double cacheVal = Double.POSITIVE_INFINITY;\n\n          @Override\n          public double doubleVal(int doc) {\n            if (cacheDoc != doc) {\n              try {\n                leafComparator.copy(0, doc);\n                cacheVal = comparator.value(0) * mult;\n                cacheDoc = doc;\n              } catch (IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n            return cacheVal;\n          }\n\n          @Override\n          public boolean exists(int doc) {\n            return !Double.isInfinite(doubleVal(doc));\n          }\n        };\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/LatLonPointSpatialField.LatLonPointSpatialStrategy.DistanceSortValueSource#getValues(LeafReaderContext,DoubleValues).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/LatLonPointSpatialField.LatLonPointSpatialStrategy.DistanceSortValueSource#getValues(Map,LeafReaderContext).mjava","sourceNew":"      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        return new DoubleValues() {\n\n          @SuppressWarnings(\"unchecked\")\n          final FieldComparator<Double> comparator =\n              (FieldComparator<Double>) getSortField(false).getComparator(1, 1);\n          final LeafFieldComparator leafComparator = comparator.getLeafComparator(ctx);\n          final double mult = multiplier; // so it's a local field\n\n          double value = Double.POSITIVE_INFINITY;\n\n          @Override\n          public double doubleValue() throws IOException {\n            return value;\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            leafComparator.copy(0, doc);\n            value = comparator.value(0) * mult;\n            return true;\n          }\n        };\n      }\n\n","sourceOld":"      @Override\n      public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n        return new DoubleDocValues(this) {\n          @SuppressWarnings(\"unchecked\")\n          final FieldComparator<Double> comparator =\n              (FieldComparator<Double>) getSortField(false).getComparator(1, 1);\n          final LeafFieldComparator leafComparator = comparator.getLeafComparator(readerContext);\n          final double mult = multiplier; // so it's a local field\n\n          // Since this computation is expensive, it's worth caching it just in case.\n          double cacheDoc = -1;\n          double cacheVal = Double.POSITIVE_INFINITY;\n\n          @Override\n          public double doubleVal(int doc) {\n            if (cacheDoc != doc) {\n              try {\n                leafComparator.copy(0, doc);\n                cacheVal = comparator.value(0) * mult;\n                cacheDoc = doc;\n              } catch (IOException e) {\n                throw new RuntimeException(e);\n              }\n            }\n            return cacheVal;\n          }\n\n          @Override\n          public boolean exists(int doc) {\n            return !Double.isInfinite(doubleVal(doc));\n          }\n        };\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/LatLonPointSpatialField.LatLonPointSpatialStrategy.DistanceSortValueSource#getValues(LeafReaderContext,DoubleValues).mjava","pathOld":"/dev/null","sourceNew":"      @Override\n      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {\n        return new DoubleValues() {\n\n          @SuppressWarnings(\"unchecked\")\n          final FieldComparator<Double> comparator =\n              (FieldComparator<Double>) getSortField(false).getComparator(1, 1);\n          final LeafFieldComparator leafComparator = comparator.getLeafComparator(ctx);\n          final double mult = multiplier; // so it's a local field\n\n          double value = Double.POSITIVE_INFINITY;\n\n          @Override\n          public double doubleValue() throws IOException {\n            return value;\n          }\n\n          @Override\n          public boolean advanceExact(int doc) throws IOException {\n            leafComparator.copy(0, doc);\n            value = comparator.value(0) * mult;\n            return true;\n          }\n        };\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"32b9119890a8e82252b6cc341ac491d18fa1e49b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","32b9119890a8e82252b6cc341ac491d18fa1e49b"],"98f11c416d30e556e0004a9a84960702d12d35b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","32b9119890a8e82252b6cc341ac491d18fa1e49b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"32b9119890a8e82252b6cc341ac491d18fa1e49b":["28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["32b9119890a8e82252b6cc341ac491d18fa1e49b","28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"98f11c416d30e556e0004a9a84960702d12d35b1":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["98f11c416d30e556e0004a9a84960702d12d35b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}