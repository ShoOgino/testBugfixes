{"path":"lucene/core/src/java/org/apache/lucene/search/NRTManager#close().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NRTManager#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/NRTManager#close().mjava","sourceNew":"  /**\n   * Close this NRTManager to future searching. Any searches still in process in\n   * other threads won't be affected, and they should still call\n   * {@link SearcherManager#release(IndexSearcher)} after they are done.\n   * \n   * <p>\n   * <b>NOTE</b>: caller must separately close the writer.\n   */\n  public void close() throws IOException {\n    reopenLock.lock();\n    try {\n      try {\n        IOUtils.close(withDeletes, withoutDeletes);\n      } finally { // make sure we signal even if close throws an exception\n        newGeneration.signalAll();\n      }\n    } finally {\n      reopenLock.unlock();\n      assert withDeletes.generation == MAX_SEARCHER_GEN && withoutDeletes.generation == MAX_SEARCHER_GEN;\n    }\n  }\n\n","sourceOld":"  /**\n   * Close this NRTManager to future searching. Any searches still in process in\n   * other threads won't be affected, and they should still call\n   * {@link SearcherManager#release(IndexSearcher)} after they are done.\n   * \n   * <p>\n   * <b>NOTE</b>: caller must separately close the writer.\n   */\n  public void close() throws IOException {\n    reopenLock.lock();\n    try {\n      try {\n        IOUtils.close(withDeletes, withoutDeletes);\n      } finally { // make sure we signal even if close throws an exception\n        newGeneration.signalAll();\n      }\n    } finally {\n      reopenLock.unlock();\n      assert withDeletes.generation == MAX_SEARCHER_GEN && withoutDeletes.generation == MAX_SEARCHER_GEN;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c36db4818c5eba16bdcbedab4f06dd69ae59190","date":1329160108,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NRTManager#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/NRTManager#close().mjava","sourceNew":"  /**\n   * Close this NRTManager to future searching. Any searches still in process in\n   * other threads won't be affected, and they should still call\n   * {@link SearcherManager#release(IndexSearcher)} after they are done.\n   * \n   * <p>\n   * <b>NOTE</b>: caller must separately close the writer.\n   */\n  public void close() throws IOException {\n    reopenLock.lock();\n    try {\n      try {\n        // max it out to make sure nobody can wait on another gen\n        searchingGen = MAX_SEARCHER_GEN; \n        mgr.close();\n      } finally { // make sure we signal even if close throws an exception\n        newGeneration.signalAll();\n      }\n    } finally {\n      reopenLock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Close this NRTManager to future searching. Any searches still in process in\n   * other threads won't be affected, and they should still call\n   * {@link SearcherManager#release(IndexSearcher)} after they are done.\n   * \n   * <p>\n   * <b>NOTE</b>: caller must separately close the writer.\n   */\n  public void close() throws IOException {\n    reopenLock.lock();\n    try {\n      try {\n        IOUtils.close(withDeletes, withoutDeletes);\n      } finally { // make sure we signal even if close throws an exception\n        newGeneration.signalAll();\n      }\n    } finally {\n      reopenLock.unlock();\n      assert withDeletes.generation == MAX_SEARCHER_GEN && withoutDeletes.generation == MAX_SEARCHER_GEN;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d95e5ffa3f10097accecdf508cd7999d0fb90882","date":1329235828,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NRTManager#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/NRTManager#close().mjava","sourceNew":"  /**\n   * Close this NRTManager to future searching. Any searches still in process in\n   * other threads won't be affected, and they should still call\n   * {@link SearcherManager#release} after they are done.\n   * \n   * <p>\n   * <b>NOTE</b>: caller must separately close the writer.\n   */\n  public void close() throws IOException {\n    reopenLock.lock();\n    try {\n      try {\n        // max it out to make sure nobody can wait on another gen\n        searchingGen = MAX_SEARCHER_GEN; \n        mgr.close();\n      } finally { // make sure we signal even if close throws an exception\n        newGeneration.signalAll();\n      }\n    } finally {\n      reopenLock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Close this NRTManager to future searching. Any searches still in process in\n   * other threads won't be affected, and they should still call\n   * {@link SearcherManager#release(IndexSearcher)} after they are done.\n   * \n   * <p>\n   * <b>NOTE</b>: caller must separately close the writer.\n   */\n  public void close() throws IOException {\n    reopenLock.lock();\n    try {\n      try {\n        // max it out to make sure nobody can wait on another gen\n        searchingGen = MAX_SEARCHER_GEN; \n        mgr.close();\n      } finally { // make sure we signal even if close throws an exception\n        newGeneration.signalAll();\n      }\n    } finally {\n      reopenLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c380c22ff3b659b2d7412a3335f853d354d17568","date":1329505731,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/NRTManager#close().mjava","sourceNew":null,"sourceOld":"  /**\n   * Close this NRTManager to future searching. Any searches still in process in\n   * other threads won't be affected, and they should still call\n   * {@link SearcherManager#release} after they are done.\n   * \n   * <p>\n   * <b>NOTE</b>: caller must separately close the writer.\n   */\n  public void close() throws IOException {\n    reopenLock.lock();\n    try {\n      try {\n        // max it out to make sure nobody can wait on another gen\n        searchingGen = MAX_SEARCHER_GEN; \n        mgr.close();\n      } finally { // make sure we signal even if close throws an exception\n        newGeneration.signalAll();\n      }\n    } finally {\n      reopenLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c380c22ff3b659b2d7412a3335f853d354d17568":["d95e5ffa3f10097accecdf508cd7999d0fb90882"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d95e5ffa3f10097accecdf508cd7999d0fb90882":["2c36db4818c5eba16bdcbedab4f06dd69ae59190"],"2c36db4818c5eba16bdcbedab4f06dd69ae59190":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c380c22ff3b659b2d7412a3335f853d354d17568"]},"commit2Childs":{"c380c22ff3b659b2d7412a3335f853d354d17568":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["2c36db4818c5eba16bdcbedab4f06dd69ae59190"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d95e5ffa3f10097accecdf508cd7999d0fb90882":["c380c22ff3b659b2d7412a3335f853d354d17568"],"2c36db4818c5eba16bdcbedab4f06dd69ae59190":["d95e5ffa3f10097accecdf508cd7999d0fb90882"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}