{"path":"solr/core/src/test/org/apache/solr/analysis/TestSlowSynonymFilter#testMapMerge().mjava","commits":[{"id":"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","date":1310389132,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestSlowSynonymFilter#testMapMerge().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymFilter#testMapMerge().mjava","sourceNew":"  public void testMapMerge() throws IOException {\n    SlowSynonymMap map = new SlowSynonymMap();\n\n    boolean orig = false;\n    boolean merge = true;\n    map.add(strings(\"a\"), tokens(\"a5,5\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"a3,3\"), orig, merge);\n\n    assertTokenizesTo(map, \"a\",\n        new String[] { \"a3\", \"a5\" },\n        new int[] { 1, 2 });\n\n    map.add(strings(\"b\"), tokens(\"b3,3\"), orig, merge);\n    map.add(strings(\"b\"), tokens(\"b5,5\"), orig, merge);\n\n    assertTokenizesTo(map, \"b\",\n        new String[] { \"b3\", \"b5\" },\n        new int[] { 1, 2 });\n\n    map.add(strings(\"a\"), tokens(\"A3,3\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"A5,5\"), orig, merge);\n    \n    assertTokenizesTo(map, \"a\",\n        new String[] { \"a3\", \"A3\", \"a5\", \"A5\" },\n        new int[] { 1, 0, 2, 0 });\n\n    map.add(strings(\"a\"), tokens(\"a1\"), orig, merge);\n    assertTokenizesTo(map, \"a\",\n        new String[] { \"a1\", \"a3\", \"A3\", \"a5\", \"A5\" },\n        new int[] { 1, 2, 0, 2, 0 });\n\n    map.add(strings(\"a\"), tokens(\"a2,2\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"a4,4 a6,2\"), orig, merge);\n    assertTokenizesTo(map, \"a\",\n        new String[] { \"a1\", \"a2\", \"a3\", \"A3\", \"a4\", \"a5\", \"A5\", \"a6\" },\n        new int[] { 1, 1, 1, 0, 1, 1, 0, 1  });\n  }\n\n","sourceOld":"  public void testMapMerge() throws IOException {\n    SynonymMap map = new SynonymMap();\n\n    boolean orig = false;\n    boolean merge = true;\n    map.add(strings(\"a\"), tokens(\"a5,5\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"a3,3\"), orig, merge);\n\n    assertTokenizesTo(map, \"a\",\n        new String[] { \"a3\", \"a5\" },\n        new int[] { 1, 2 });\n\n    map.add(strings(\"b\"), tokens(\"b3,3\"), orig, merge);\n    map.add(strings(\"b\"), tokens(\"b5,5\"), orig, merge);\n\n    assertTokenizesTo(map, \"b\",\n        new String[] { \"b3\", \"b5\" },\n        new int[] { 1, 2 });\n\n    map.add(strings(\"a\"), tokens(\"A3,3\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"A5,5\"), orig, merge);\n    \n    assertTokenizesTo(map, \"a\",\n        new String[] { \"a3\", \"A3\", \"a5\", \"A5\" },\n        new int[] { 1, 0, 2, 0 });\n\n    map.add(strings(\"a\"), tokens(\"a1\"), orig, merge);\n    assertTokenizesTo(map, \"a\",\n        new String[] { \"a1\", \"a3\", \"A3\", \"a5\", \"A5\" },\n        new int[] { 1, 2, 0, 2, 0 });\n\n    map.add(strings(\"a\"), tokens(\"a2,2\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"a4,4 a6,2\"), orig, merge);\n    assertTokenizesTo(map, \"a\",\n        new String[] { \"a1\", \"a2\", \"a3\", \"A3\", \"a4\", \"a5\", \"A5\", \"a6\" },\n        new int[] { 1, 1, 1, 0, 1, 1, 0, 1  });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestSlowSynonymFilter#testMapMerge().mjava","sourceNew":null,"sourceOld":"  public void testMapMerge() throws IOException {\n    SlowSynonymMap map = new SlowSynonymMap();\n\n    boolean orig = false;\n    boolean merge = true;\n    map.add(strings(\"a\"), tokens(\"a5,5\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"a3,3\"), orig, merge);\n\n    assertTokenizesTo(map, \"a\",\n        new String[] { \"a3\", \"a5\" },\n        new int[] { 1, 2 });\n\n    map.add(strings(\"b\"), tokens(\"b3,3\"), orig, merge);\n    map.add(strings(\"b\"), tokens(\"b5,5\"), orig, merge);\n\n    assertTokenizesTo(map, \"b\",\n        new String[] { \"b3\", \"b5\" },\n        new int[] { 1, 2 });\n\n    map.add(strings(\"a\"), tokens(\"A3,3\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"A5,5\"), orig, merge);\n    \n    assertTokenizesTo(map, \"a\",\n        new String[] { \"a3\", \"A3\", \"a5\", \"A5\" },\n        new int[] { 1, 0, 2, 0 });\n\n    map.add(strings(\"a\"), tokens(\"a1\"), orig, merge);\n    assertTokenizesTo(map, \"a\",\n        new String[] { \"a1\", \"a3\", \"A3\", \"a5\", \"A5\" },\n        new int[] { 1, 2, 0, 2, 0 });\n\n    map.add(strings(\"a\"), tokens(\"a2,2\"), orig, merge);\n    map.add(strings(\"a\"), tokens(\"a4,4 a6,2\"), orig, merge);\n    assertTokenizesTo(map, \"a\",\n        new String[] { \"a1\", \"a2\", \"a3\", \"A3\", \"a4\", \"a5\", \"A5\", \"a6\" },\n        new int[] { 1, 1, 1, 0, 1, 1, 0, 1  });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"]},"commit2Childs":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}