{"path":"solr/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Initialize the components based on name.  Note, if using {@link #INIT_FIRST_COMPONENTS} or {@link #INIT_LAST_COMPONENTS},\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the {@link #INIT_COMPONENTS} syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.info(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.info(\"Adding  debug component:\" + dbgCmp);\n    }\n\n    Object co = initArgs.get(INIT_CONNECTION_TIMEOUT);\n    if (co != null) {\n      connectionTimeout = (Integer) co;\n      log.info(\"Setting shard-connection-timeout to: \" + connectionTimeout);\n    }\n\n    Object so = initArgs.get(INIT_SO_TIMEOUT);\n    if (so != null) {\n      soTimeout = (Integer) so;\n      log.info(\"Setting shard-socket-timeout to: \" + soTimeout);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","sourceNew":null,"sourceOld":"  /**\n   * Initialize the components based on name.  Note, if using {@link #INIT_FIRST_COMPONENTS} or {@link #INIT_LAST_COMPONENTS},\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the {@link #INIT_COMPONENTS} syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.info(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.info(\"Adding  debug component:\" + dbgCmp);\n    }\n\n    Object co = initArgs.get(INIT_CONNECTION_TIMEOUT);\n    if (co != null) {\n      connectionTimeout = (Integer) co;\n      log.info(\"Setting shard-connection-timeout to: \" + connectionTimeout);\n    }\n\n    Object so = initArgs.get(INIT_SO_TIMEOUT);\n    if (so != null) {\n      soTimeout = (Integer) so;\n      log.info(\"Setting shard-socket-timeout to: \" + soTimeout);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","pathOld":"src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","sourceNew":"  /**\n   * Initialize the components based on name.  Note, if using {@link #INIT_FIRST_COMPONENTS} or {@link #INIT_LAST_COMPONENTS},\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the {@link #INIT_COMPONENTS} syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.info(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.info(\"Adding  debug component:\" + dbgCmp);\n    }\n\n    Object co = initArgs.get(INIT_CONNECTION_TIMEOUT);\n    if (co != null) {\n      connectionTimeout = (Integer) co;\n      log.info(\"Setting shard-connection-timeout to: \" + connectionTimeout);\n    }\n\n    Object so = initArgs.get(INIT_SO_TIMEOUT);\n    if (so != null) {\n      soTimeout = (Integer) so;\n      log.info(\"Setting shard-socket-timeout to: \" + soTimeout);\n    }\n  }\n\n","sourceOld":"  /**\n   * Initialize the components based on name.  Note, if using {@link #INIT_FIRST_COMPONENTS} or {@link #INIT_LAST_COMPONENTS},\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the {@link #INIT_COMPONENTS} syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.info(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.info(\"Adding  debug component:\" + dbgCmp);\n    }\n\n    Object co = initArgs.get(INIT_CONNECTION_TIMEOUT);\n    if (co != null) {\n      connectionTimeout = (Integer) co;\n      log.info(\"Setting shard-connection-timeout to: \" + connectionTimeout);\n    }\n\n    Object so = initArgs.get(INIT_SO_TIMEOUT);\n    if (so != null) {\n      soTimeout = (Integer) so;\n      log.info(\"Setting shard-socket-timeout to: \" + soTimeout);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Initialize the components based on name.  Note, if using {@link #INIT_FIRST_COMPONENTS} or {@link #INIT_LAST_COMPONENTS},\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the {@link #INIT_COMPONENTS} syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.info(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.info(\"Adding  debug component:\" + dbgCmp);\n    }\n\n    Object co = initArgs.get(INIT_CONNECTION_TIMEOUT);\n    if (co != null) {\n      connectionTimeout = (Integer) co;\n      log.info(\"Setting shard-connection-timeout to: \" + connectionTimeout);\n    }\n\n    Object so = initArgs.get(INIT_SO_TIMEOUT);\n    if (so != null) {\n      soTimeout = (Integer) so;\n      log.info(\"Setting shard-socket-timeout to: \" + soTimeout);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8e709106bc4b142af640858fbbbd0d95e1f82c96","date":1282153300,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","sourceNew":"  /**\n   * Initialize the components based on name.  Note, if using {@link #INIT_FIRST_COMPONENTS} or {@link #INIT_LAST_COMPONENTS},\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the {@link #INIT_COMPONENTS} syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.info(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.info(\"Adding  debug component:\" + dbgCmp);\n    }\n\n    Object co = initArgs.get(INIT_CONNECTION_TIMEOUT);\n    if (co != null) {\n      connectionTimeout = (Integer) co;\n      log.info(\"Setting shard-connection-timeout to: \" + connectionTimeout);\n    }\n\n    Object so = initArgs.get(INIT_SO_TIMEOUT);\n    if (so != null) {\n      soTimeout = (Integer) so;\n      log.info(\"Setting shard-socket-timeout to: \" + soTimeout);\n    }\n\n    Object urlScheme = initArgs.get(INIT_URL_SCHEME);\n    if (urlScheme != null) {\n      SearchHandler.scheme = (String) urlScheme + \"://\";\n      log.info(\"Setting url-scheme to: \" + urlScheme);\n    }\n  }\n\n","sourceOld":"  /**\n   * Initialize the components based on name.  Note, if using {@link #INIT_FIRST_COMPONENTS} or {@link #INIT_LAST_COMPONENTS},\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the {@link #INIT_COMPONENTS} syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.info(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.info(\"Adding  debug component:\" + dbgCmp);\n    }\n\n    Object co = initArgs.get(INIT_CONNECTION_TIMEOUT);\n    if (co != null) {\n      connectionTimeout = (Integer) co;\n      log.info(\"Setting shard-connection-timeout to: \" + connectionTimeout);\n    }\n\n    Object so = initArgs.get(INIT_SO_TIMEOUT);\n    if (so != null) {\n      soTimeout = (Integer) so;\n      log.info(\"Setting shard-socket-timeout to: \" + soTimeout);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","sourceNew":"  /**\n   * Initialize the components based on name.  Note, if using {@link #INIT_FIRST_COMPONENTS} or {@link #INIT_LAST_COMPONENTS},\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the {@link #INIT_COMPONENTS} syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.info(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.info(\"Adding  debug component:\" + dbgCmp);\n    }\n\n    Object co = initArgs.get(INIT_CONNECTION_TIMEOUT);\n    if (co != null) {\n      connectionTimeout = (Integer) co;\n      log.info(\"Setting shard-connection-timeout to: \" + connectionTimeout);\n    }\n\n    Object so = initArgs.get(INIT_SO_TIMEOUT);\n    if (so != null) {\n      soTimeout = (Integer) so;\n      log.info(\"Setting shard-socket-timeout to: \" + soTimeout);\n    }\n\n    Object urlScheme = initArgs.get(INIT_URL_SCHEME);\n    if (urlScheme != null) {\n      SearchHandler.scheme = (String) urlScheme + \"://\";\n      log.info(\"Setting url-scheme to: \" + urlScheme);\n    }\n  }\n\n","sourceOld":"  /**\n   * Initialize the components based on name.  Note, if using {@link #INIT_FIRST_COMPONENTS} or {@link #INIT_LAST_COMPONENTS},\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the {@link #INIT_COMPONENTS} syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.info(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.info(\"Adding  debug component:\" + dbgCmp);\n    }\n\n    Object co = initArgs.get(INIT_CONNECTION_TIMEOUT);\n    if (co != null) {\n      connectionTimeout = (Integer) co;\n      log.info(\"Setting shard-connection-timeout to: \" + connectionTimeout);\n    }\n\n    Object so = initArgs.get(INIT_SO_TIMEOUT);\n    if (so != null) {\n      soTimeout = (Integer) so;\n      log.info(\"Setting shard-socket-timeout to: \" + soTimeout);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"828f199c76d70a5ea0ddc4d9605063f1d323a28d","date":1308738340,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","sourceNew":"  /**\n   * Initialize the components based on name.  Note, if using {@link #INIT_FIRST_COMPONENTS} or {@link #INIT_LAST_COMPONENTS},\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the {@link #INIT_COMPONENTS} syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.info(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.info(\"Adding  debug component:\" + dbgCmp);\n    }\n    if(shfInfo ==null) {\n      Map m = new HashMap();\n      m.put(\"class\",HttpShardHandlerFactory.class.getName());\n      shfInfo = new PluginInfo(\"shardHandlerFactory\", m,null,Collections.<PluginInfo>emptyList());\n    }\n    shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n  }\n\n","sourceOld":"  /**\n   * Initialize the components based on name.  Note, if using {@link #INIT_FIRST_COMPONENTS} or {@link #INIT_LAST_COMPONENTS},\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the {@link #INIT_COMPONENTS} syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.info(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.info(\"Adding  debug component:\" + dbgCmp);\n    }\n\n    Object co = initArgs.get(INIT_CONNECTION_TIMEOUT);\n    if (co != null) {\n      connectionTimeout = (Integer) co;\n      log.info(\"Setting shard-connection-timeout to: \" + connectionTimeout);\n    }\n\n    Object so = initArgs.get(INIT_SO_TIMEOUT);\n    if (so != null) {\n      soTimeout = (Integer) so;\n      log.info(\"Setting shard-socket-timeout to: \" + soTimeout);\n    }\n\n    Object urlScheme = initArgs.get(INIT_URL_SCHEME);\n    if (urlScheme != null) {\n      SearchHandler.scheme = (String) urlScheme + \"://\";\n      log.info(\"Setting url-scheme to: \" + urlScheme);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","sourceNew":"  /**\n   * Initialize the components based on name.  Note, if using {@link #INIT_FIRST_COMPONENTS} or {@link #INIT_LAST_COMPONENTS},\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the {@link #INIT_COMPONENTS} syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.info(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.info(\"Adding  debug component:\" + dbgCmp);\n    }\n    if(shfInfo ==null) {\n      Map m = new HashMap();\n      m.put(\"class\",HttpShardHandlerFactory.class.getName());\n      shfInfo = new PluginInfo(\"shardHandlerFactory\", m,null,Collections.<PluginInfo>emptyList());\n    }\n    shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n  }\n\n","sourceOld":"  /**\n   * Initialize the components based on name.  Note, if using {@link #INIT_FIRST_COMPONENTS} or {@link #INIT_LAST_COMPONENTS},\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the {@link #INIT_COMPONENTS} syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.info(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.info(\"Adding  debug component:\" + dbgCmp);\n    }\n\n    Object co = initArgs.get(INIT_CONNECTION_TIMEOUT);\n    if (co != null) {\n      connectionTimeout = (Integer) co;\n      log.info(\"Setting shard-connection-timeout to: \" + connectionTimeout);\n    }\n\n    Object so = initArgs.get(INIT_SO_TIMEOUT);\n    if (so != null) {\n      soTimeout = (Integer) so;\n      log.info(\"Setting shard-socket-timeout to: \" + soTimeout);\n    }\n\n    Object urlScheme = initArgs.get(INIT_URL_SCHEME);\n    if (urlScheme != null) {\n      SearchHandler.scheme = (String) urlScheme + \"://\";\n      log.info(\"Setting url-scheme to: \" + urlScheme);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","sourceNew":"  /**\n   * Initialize the components based on name.  Note, if using {@link #INIT_FIRST_COMPONENTS} or {@link #INIT_LAST_COMPONENTS},\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the {@link #INIT_COMPONENTS} syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.info(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.info(\"Adding  debug component:\" + dbgCmp);\n    }\n    if(shfInfo ==null) {\n      Map m = new HashMap();\n      m.put(\"class\",HttpShardHandlerFactory.class.getName());\n      shfInfo = new PluginInfo(\"shardHandlerFactory\", m,null,Collections.<PluginInfo>emptyList());\n    }\n    shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n  }\n\n","sourceOld":"  /**\n   * Initialize the components based on name.  Note, if using {@link #INIT_FIRST_COMPONENTS} or {@link #INIT_LAST_COMPONENTS},\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the {@link #INIT_COMPONENTS} syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.info(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.info(\"Adding  debug component:\" + dbgCmp);\n    }\n\n    Object co = initArgs.get(INIT_CONNECTION_TIMEOUT);\n    if (co != null) {\n      connectionTimeout = (Integer) co;\n      log.info(\"Setting shard-connection-timeout to: \" + connectionTimeout);\n    }\n\n    Object so = initArgs.get(INIT_SO_TIMEOUT);\n    if (so != null) {\n      soTimeout = (Integer) so;\n      log.info(\"Setting shard-socket-timeout to: \" + soTimeout);\n    }\n\n    Object urlScheme = initArgs.get(INIT_URL_SCHEME);\n    if (urlScheme != null) {\n      SearchHandler.scheme = (String) urlScheme + \"://\";\n      log.info(\"Setting url-scheme to: \" + urlScheme);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","sourceNew":"  /**\n   * Initialize the components based on name.  Note, if using {@link #INIT_FIRST_COMPONENTS} or {@link #INIT_LAST_COMPONENTS},\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the {@link #INIT_COMPONENTS} syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.info(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.info(\"Adding  debug component:\" + dbgCmp);\n    }\n    if(shfInfo ==null) {\n      Map m = new HashMap();\n      m.put(\"class\",HttpShardHandlerFactory.class.getName());\n      shfInfo = new PluginInfo(\"shardHandlerFactory\", m,null,Collections.<PluginInfo>emptyList());\n    }\n    shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n  }\n\n","sourceOld":"  /**\n   * Initialize the components based on name.  Note, if using {@link #INIT_FIRST_COMPONENTS} or {@link #INIT_LAST_COMPONENTS},\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the {@link #INIT_COMPONENTS} syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.info(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.info(\"Adding  debug component:\" + dbgCmp);\n    }\n    if(shfInfo ==null) {\n      Map m = new HashMap();\n      m.put(\"class\",HttpShardHandlerFactory.class.getName());\n      shfInfo = new PluginInfo(\"shardHandlerFactory\", m,null,Collections.<PluginInfo>emptyList());\n    }\n    shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","sourceNew":"  /**\n   * Initialize the components based on name.  Note, if using {@link #INIT_FIRST_COMPONENTS} or {@link #INIT_LAST_COMPONENTS},\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the {@link #INIT_COMPONENTS} syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.info(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.info(\"Adding  debug component:\" + dbgCmp);\n    }\n    if(shfInfo ==null) {\n      Map m = new HashMap();\n      m.put(\"class\",HttpShardHandlerFactory.class.getName());\n      shfInfo = new PluginInfo(\"shardHandlerFactory\", m,null,Collections.<PluginInfo>emptyList());\n    }\n    shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n  }\n\n","sourceOld":"  /**\n   * Initialize the components based on name.  Note, if using {@link #INIT_FIRST_COMPONENTS} or {@link #INIT_LAST_COMPONENTS},\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the {@link #INIT_COMPONENTS} syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.info(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.info(\"Adding  debug component:\" + dbgCmp);\n    }\n    if(shfInfo ==null) {\n      Map m = new HashMap();\n      m.put(\"class\",HttpShardHandlerFactory.class.getName());\n      shfInfo = new PluginInfo(\"shardHandlerFactory\", m,null,Collections.<PluginInfo>emptyList());\n    }\n    shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SearchHandler#inform(SolrCore).mjava","sourceNew":"  /**\n   * Initialize the components based on name.  Note, if using {@link #INIT_FIRST_COMPONENTS} or {@link #INIT_LAST_COMPONENTS},\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the {@link #INIT_COMPONENTS} syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.info(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.info(\"Adding  debug component:\" + dbgCmp);\n    }\n    if(shfInfo ==null) {\n      Map m = new HashMap();\n      m.put(\"class\",HttpShardHandlerFactory.class.getName());\n      shfInfo = new PluginInfo(\"shardHandlerFactory\", m,null,Collections.<PluginInfo>emptyList());\n    }\n    shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n  }\n\n","sourceOld":"  /**\n   * Initialize the components based on name.  Note, if using {@link #INIT_FIRST_COMPONENTS} or {@link #INIT_LAST_COMPONENTS},\n   * then the {@link DebugComponent} will always occur last.  If this is not desired, then one must explicitly declare all components using\n   * the {@link #INIT_COMPONENTS} syntax.\n   */\n  @SuppressWarnings(\"unchecked\")\n  public void inform(SolrCore core)\n  {\n    Object declaredComponents = initArgs.get(INIT_COMPONENTS);\n    List<String> first = (List<String>) initArgs.get(INIT_FIRST_COMPONENTS);\n    List<String> last  = (List<String>) initArgs.get(INIT_LAST_COMPONENTS);\n\n    List<String> list = null;\n    boolean makeDebugLast = true;\n    if( declaredComponents == null ) {\n      // Use the default component list\n      list = getDefaultComponents();\n\n      if( first != null ) {\n        List<String> clist = first;\n        clist.addAll( list );\n        list = clist;\n      }\n\n      if( last != null ) {\n        list.addAll( last );\n      }\n    }\n    else {\n      list = (List<String>)declaredComponents;\n      if( first != null || last != null ) {\n        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n            \"First/Last components only valid if you do not declare 'components'\");\n      }\n      makeDebugLast = false;\n    }\n\n    // Build the component list\n    components = new ArrayList<SearchComponent>( list.size() );\n    DebugComponent dbgCmp = null;\n    for(String c : list){\n      SearchComponent comp = core.getSearchComponent( c );\n      if (comp instanceof DebugComponent && makeDebugLast == true){\n        dbgCmp = (DebugComponent) comp;\n      } else {\n        components.add(comp);\n        log.info(\"Adding  component:\"+comp);\n      }\n    }\n    if (makeDebugLast == true && dbgCmp != null){\n      components.add(dbgCmp);\n      log.info(\"Adding  debug component:\" + dbgCmp);\n    }\n    if(shfInfo ==null) {\n      Map m = new HashMap();\n      m.put(\"class\",HttpShardHandlerFactory.class.getName());\n      shfInfo = new PluginInfo(\"shardHandlerFactory\", m,null,Collections.<PluginInfo>emptyList());\n    }\n    shardHandlerFactory = core.createInitInstance(shfInfo, ShardHandlerFactory.class, null, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["828f199c76d70a5ea0ddc4d9605063f1d323a28d","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"2553b00f699380c64959ccb27991289aae87be2e":["8e709106bc4b142af640858fbbbd0d95e1f82c96","828f199c76d70a5ea0ddc4d9605063f1d323a28d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","8e709106bc4b142af640858fbbbd0d95e1f82c96"],"828f199c76d70a5ea0ddc4d9605063f1d323a28d":["8e709106bc4b142af640858fbbbd0d95e1f82c96"],"8e709106bc4b142af640858fbbbd0d95e1f82c96":["1da8d55113b689b06716246649de6f62430f15c0"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["8e709106bc4b142af640858fbbbd0d95e1f82c96","828f199c76d70a5ea0ddc4d9605063f1d323a28d"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["2553b00f699380c64959ccb27991289aae87be2e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["828f199c76d70a5ea0ddc4d9605063f1d323a28d"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"2553b00f699380c64959ccb27991289aae87be2e":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"828f199c76d70a5ea0ddc4d9605063f1d323a28d":["c26f00b574427b55127e869b935845554afde1fa","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","a258fbb26824fd104ed795e5d9033d2d040049ee"],"8e709106bc4b142af640858fbbbd0d95e1f82c96":["2553b00f699380c64959ccb27991289aae87be2e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","828f199c76d70a5ea0ddc4d9605063f1d323a28d","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"1da8d55113b689b06716246649de6f62430f15c0":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8e709106bc4b142af640858fbbbd0d95e1f82c96"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}