{"path":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShapeQueries#verifyRandomBBoxes(Polygon...).mjava","commits":[{"id":"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c","date":1531585717,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShapeQueries#verifyRandomBBoxes(Polygon...).mjava","pathOld":"/dev/null","sourceNew":"  protected void verifyRandomBBoxes(Polygon... polygons) throws Exception {\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < polygons.length / 100) {\n      iwc.setMaxBufferedDocs(polygons.length / 100);\n    }\n    Directory dir;\n    if (polygons.length > 1000) {\n      dir = newFSDirectory(createTempDir(getClass().getSimpleName()));\n    } else {\n      dir = newDirectory();\n    }\n\n    Set<Integer> deleted = new HashSet<>();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Polygon2D[] poly2D = new Polygon2D[polygons.length];\n    for (int id = 0; id < polygons.length; ++id) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (polygons[id] != null) {\n        try {\n          addPolygonsToDoc(FIELD_NAME, doc, polygons[id]);\n        } catch (IllegalArgumentException e) {\n          // GeoTestUtil will occassionally create invalid polygons\n          // invalid polygons will not tessellate\n          // we skip those polygons that will not tessellate, relying on the TestTessellator class\n          // to ensure the Tessellator correctly identified a malformed shape and its not a bug\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" could not tessellate. Malformed shape \" + polygons[id] + \" detected\");\n          }\n          // remove and skip the malformed shape\n          polygons[id] = null;\n          continue;\n        }\n        poly2D[id] = Polygon2D.create(quantizePolygon(polygons[id]));\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 42) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.out.println(\"   delete id=\" + idToDelete);\n        }\n      }\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w);\n    w.close();\n\n    IndexSearcher s = newSearcher(r);\n\n    final int iters = atLeast(75);\n\n    Bits liveDocs = MultiFields.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter+1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // BBox\n      Rectangle rect = GeoTestUtil.nextBoxNotCrossingDateline();\n      Query query = newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (polygons[id] == null) {\n          expected = false;\n        } else {\n          // check quantized poly against quantized query\n          expected = poly2D[id].relate(quantizeLatCeil(rect.minLat), quantizeLat(rect.maxLat),\n              quantizeLonCeil(rect.minLon), quantizeLon(rect.maxLon)) != Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          b.append(\"  polygon=\" + quantizePolygon(polygons[id]) + \"\\n\");\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  rect=Rectangle(\" + quantizeLatCeil(rect.minLat) + \" TO \" + quantizeLat(rect.maxLat) + \" lon=\" + quantizeLonCeil(rect.minLon) + \" TO \" + quantizeLon(rect.maxLon) + \")\");\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShapeQueries#verifyRandomBBoxes(Polygon...).mjava","pathOld":"/dev/null","sourceNew":"  protected void verifyRandomBBoxes(Polygon... polygons) throws Exception {\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < polygons.length / 100) {\n      iwc.setMaxBufferedDocs(polygons.length / 100);\n    }\n    Directory dir;\n    if (polygons.length > 1000) {\n      dir = newFSDirectory(createTempDir(getClass().getSimpleName()));\n    } else {\n      dir = newDirectory();\n    }\n\n    Set<Integer> deleted = new HashSet<>();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Polygon2D[] poly2D = new Polygon2D[polygons.length];\n    for (int id = 0; id < polygons.length; ++id) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (polygons[id] != null) {\n        try {\n          addPolygonsToDoc(FIELD_NAME, doc, polygons[id]);\n        } catch (IllegalArgumentException e) {\n          // GeoTestUtil will occassionally create invalid polygons\n          // invalid polygons will not tessellate\n          // we skip those polygons that will not tessellate, relying on the TestTessellator class\n          // to ensure the Tessellator correctly identified a malformed shape and its not a bug\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" could not tessellate. Malformed shape \" + polygons[id] + \" detected\");\n          }\n          // remove and skip the malformed shape\n          polygons[id] = null;\n          continue;\n        }\n        poly2D[id] = Polygon2D.create(quantizePolygon(polygons[id]));\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 42) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.out.println(\"   delete id=\" + idToDelete);\n        }\n      }\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w);\n    w.close();\n\n    IndexSearcher s = newSearcher(r);\n\n    final int iters = atLeast(75);\n\n    Bits liveDocs = MultiFields.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter+1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // BBox\n      Rectangle rect = GeoTestUtil.nextBoxNotCrossingDateline();\n      Query query = newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (polygons[id] == null) {\n          expected = false;\n        } else {\n          // check quantized poly against quantized query\n          expected = poly2D[id].relate(quantizeLatCeil(rect.minLat), quantizeLat(rect.maxLat),\n              quantizeLonCeil(rect.minLon), quantizeLon(rect.maxLon)) != Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          b.append(\"  polygon=\" + quantizePolygon(polygons[id]) + \"\\n\");\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  rect=Rectangle(\" + quantizeLatCeil(rect.minLat) + \" TO \" + quantizeLat(rect.maxLat) + \" lon=\" + quantizeLonCeil(rect.minLon) + \" TO \" + quantizeLon(rect.maxLon) + \")\");\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShapeQueries#verifyRandomBBoxes(Polygon...).mjava","pathOld":"/dev/null","sourceNew":"  protected void verifyRandomBBoxes(Polygon... polygons) throws Exception {\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < polygons.length / 100) {\n      iwc.setMaxBufferedDocs(polygons.length / 100);\n    }\n    Directory dir;\n    if (polygons.length > 1000) {\n      dir = newFSDirectory(createTempDir(getClass().getSimpleName()));\n    } else {\n      dir = newDirectory();\n    }\n\n    Set<Integer> deleted = new HashSet<>();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Polygon2D[] poly2D = new Polygon2D[polygons.length];\n    for (int id = 0; id < polygons.length; ++id) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (polygons[id] != null) {\n        try {\n          addPolygonsToDoc(FIELD_NAME, doc, polygons[id]);\n        } catch (IllegalArgumentException e) {\n          // GeoTestUtil will occassionally create invalid polygons\n          // invalid polygons will not tessellate\n          // we skip those polygons that will not tessellate, relying on the TestTessellator class\n          // to ensure the Tessellator correctly identified a malformed shape and its not a bug\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" could not tessellate. Malformed shape \" + polygons[id] + \" detected\");\n          }\n          // remove and skip the malformed shape\n          polygons[id] = null;\n          continue;\n        }\n        poly2D[id] = Polygon2D.create(quantizePolygon(polygons[id]));\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 42) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.out.println(\"   delete id=\" + idToDelete);\n        }\n      }\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w);\n    w.close();\n\n    IndexSearcher s = newSearcher(r);\n\n    final int iters = atLeast(75);\n\n    Bits liveDocs = MultiFields.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter+1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // BBox\n      Rectangle rect = GeoTestUtil.nextBoxNotCrossingDateline();\n      Query query = newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (polygons[id] == null) {\n          expected = false;\n        } else {\n          // check quantized poly against quantized query\n          expected = poly2D[id].relate(quantizeLatCeil(rect.minLat), quantizeLat(rect.maxLat),\n              quantizeLonCeil(rect.minLon), quantizeLon(rect.maxLon)) != Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          b.append(\"  polygon=\" + quantizePolygon(polygons[id]) + \"\\n\");\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  rect=Rectangle(\" + quantizeLatCeil(rect.minLat) + \" TO \" + quantizeLat(rect.maxLat) + \" lon=\" + quantizeLonCeil(rect.minLon) + \" TO \" + quantizeLon(rect.maxLon) + \")\");\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60f64dc6ee2edd7a99b719d96f6d9e7ef0ae5980","date":1533125102,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShapeQueries#verifyRandomBBoxes(Polygon...).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShapeQueries#verifyRandomBBoxes(Polygon...).mjava","sourceNew":"  protected void verifyRandomBBoxes(Polygon... polygons) throws Exception {\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < polygons.length / 100) {\n      iwc.setMaxBufferedDocs(polygons.length / 100);\n    }\n    Directory dir;\n    if (polygons.length > 1000) {\n      dir = newFSDirectory(createTempDir(getClass().getSimpleName()));\n    } else {\n      dir = newDirectory();\n    }\n\n    Set<Integer> deleted = new HashSet<>();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Polygon2D[] poly2D = new Polygon2D[polygons.length];\n    for (int id = 0; id < polygons.length; ++id) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (polygons[id] != null) {\n        try {\n          addPolygonsToDoc(FIELD_NAME, doc, polygons[id]);\n        } catch (IllegalArgumentException e) {\n          // GeoTestUtil will occassionally create invalid polygons\n          // invalid polygons will not tessellate\n          // we skip those polygons that will not tessellate, relying on the TestTessellator class\n          // to ensure the Tessellator correctly identified a malformed shape and its not a bug\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" could not tessellate. Malformed shape \" + polygons[id] + \" detected\");\n          }\n          // remove and skip the malformed shape\n          polygons[id] = null;\n          continue;\n        }\n        poly2D[id] = Polygon2D.create(quantizePolygon(polygons[id]));\n      }\n      w.addDocument(doc);\n      if (id > 0 && randomInt(100) == 42) {\n        int idToDelete = randomInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.out.println(\"   delete id=\" + idToDelete);\n        }\n      }\n    }\n\n    if (randomBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w);\n    w.close();\n\n    IndexSearcher s = newSearcher(r);\n\n    final int iters = atLeast(75);\n\n    Bits liveDocs = MultiFields.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter + 1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // BBox\n      Rectangle rect = GeoTestUtil.nextBoxNotCrossingDateline();\n      Query query = newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (polygons[id] == null) {\n          expected = false;\n        } else {\n          // check quantized poly against quantized query\n          expected = poly2D[id].relate(quantizeLatCeil(rect.minLat), quantizeLat(rect.maxLat),\n              quantizeLonCeil(rect.minLon), quantizeLon(rect.maxLon)) != Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          b.append(\"  polygon=\" + quantizePolygon(polygons[id]) + \"\\n\");\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  rect=Rectangle(\" + quantizeLatCeil(rect.minLat) + \" TO \" + quantizeLat(rect.maxLat) + \" lon=\" + quantizeLonCeil(rect.minLon) + \" TO \" + quantizeLon(rect.maxLon) + \")\");\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  protected void verifyRandomBBoxes(Polygon... polygons) throws Exception {\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < polygons.length / 100) {\n      iwc.setMaxBufferedDocs(polygons.length / 100);\n    }\n    Directory dir;\n    if (polygons.length > 1000) {\n      dir = newFSDirectory(createTempDir(getClass().getSimpleName()));\n    } else {\n      dir = newDirectory();\n    }\n\n    Set<Integer> deleted = new HashSet<>();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Polygon2D[] poly2D = new Polygon2D[polygons.length];\n    for (int id = 0; id < polygons.length; ++id) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (polygons[id] != null) {\n        try {\n          addPolygonsToDoc(FIELD_NAME, doc, polygons[id]);\n        } catch (IllegalArgumentException e) {\n          // GeoTestUtil will occassionally create invalid polygons\n          // invalid polygons will not tessellate\n          // we skip those polygons that will not tessellate, relying on the TestTessellator class\n          // to ensure the Tessellator correctly identified a malformed shape and its not a bug\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" could not tessellate. Malformed shape \" + polygons[id] + \" detected\");\n          }\n          // remove and skip the malformed shape\n          polygons[id] = null;\n          continue;\n        }\n        poly2D[id] = Polygon2D.create(quantizePolygon(polygons[id]));\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 42) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.out.println(\"   delete id=\" + idToDelete);\n        }\n      }\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w);\n    w.close();\n\n    IndexSearcher s = newSearcher(r);\n\n    final int iters = atLeast(75);\n\n    Bits liveDocs = MultiFields.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter+1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // BBox\n      Rectangle rect = GeoTestUtil.nextBoxNotCrossingDateline();\n      Query query = newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (polygons[id] == null) {\n          expected = false;\n        } else {\n          // check quantized poly against quantized query\n          expected = poly2D[id].relate(quantizeLatCeil(rect.minLat), quantizeLat(rect.maxLat),\n              quantizeLonCeil(rect.minLon), quantizeLon(rect.maxLon)) != Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          b.append(\"  polygon=\" + quantizePolygon(polygons[id]) + \"\\n\");\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  rect=Rectangle(\" + quantizeLatCeil(rect.minLat) + \" TO \" + quantizeLat(rect.maxLat) + \" lon=\" + quantizeLonCeil(rect.minLon) + \" TO \" + quantizeLon(rect.maxLon) + \")\");\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b39f95206bdb2c5b28ef7e848cacce7f2baefea","date":1533131097,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShapeQueries#verifyRandomBBoxes(Polygon...).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShapeQueries#verifyRandomBBoxes(Polygon...).mjava","sourceNew":"  protected void verifyRandomBBoxes(Polygon... polygons) throws Exception {\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < polygons.length / 100) {\n      iwc.setMaxBufferedDocs(polygons.length / 100);\n    }\n    Directory dir;\n    if (polygons.length > 1000) {\n      dir = newFSDirectory(createTempDir(getClass().getSimpleName()));\n    } else {\n      dir = newDirectory();\n    }\n\n    Set<Integer> deleted = new HashSet<>();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Polygon2D[] poly2D = new Polygon2D[polygons.length];\n    for (int id = 0; id < polygons.length; ++id) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (polygons[id] != null) {\n        try {\n          addPolygonsToDoc(FIELD_NAME, doc, polygons[id]);\n        } catch (IllegalArgumentException e) {\n          // GeoTestUtil will occassionally create invalid polygons\n          // invalid polygons will not tessellate\n          // we skip those polygons that will not tessellate, relying on the TestTessellator class\n          // to ensure the Tessellator correctly identified a malformed shape and its not a bug\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" could not tessellate. Malformed shape \" + polygons[id] + \" detected\");\n          }\n          // remove and skip the malformed shape\n          polygons[id] = null;\n          continue;\n        }\n        poly2D[id] = Polygon2D.create(quantizePolygon(polygons[id]));\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 42) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.out.println(\"   delete id=\" + idToDelete);\n        }\n      }\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w);\n    w.close();\n\n    IndexSearcher s = newSearcher(r);\n\n    final int iters = atLeast(75);\n\n    Bits liveDocs = MultiFields.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter+1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // BBox\n      Rectangle rect = GeoTestUtil.nextBoxNotCrossingDateline();\n      Query query = newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (polygons[id] == null) {\n          expected = false;\n        } else {\n          // check quantized poly against quantized query\n          expected = poly2D[id].relate(quantizeLatCeil(rect.minLat), quantizeLat(rect.maxLat),\n              quantizeLonCeil(rect.minLon), quantizeLon(rect.maxLon)) != Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          b.append(\"  polygon=\" + quantizePolygon(polygons[id]) + \"\\n\");\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  rect=Rectangle(\" + quantizeLatCeil(rect.minLat) + \" TO \" + quantizeLat(rect.maxLat) + \" lon=\" + quantizeLonCeil(rect.minLon) + \" TO \" + quantizeLon(rect.maxLon) + \")\");\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  protected void verifyRandomBBoxes(Polygon... polygons) throws Exception {\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < polygons.length / 100) {\n      iwc.setMaxBufferedDocs(polygons.length / 100);\n    }\n    Directory dir;\n    if (polygons.length > 1000) {\n      dir = newFSDirectory(createTempDir(getClass().getSimpleName()));\n    } else {\n      dir = newDirectory();\n    }\n\n    Set<Integer> deleted = new HashSet<>();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Polygon2D[] poly2D = new Polygon2D[polygons.length];\n    for (int id = 0; id < polygons.length; ++id) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (polygons[id] != null) {\n        try {\n          addPolygonsToDoc(FIELD_NAME, doc, polygons[id]);\n        } catch (IllegalArgumentException e) {\n          // GeoTestUtil will occassionally create invalid polygons\n          // invalid polygons will not tessellate\n          // we skip those polygons that will not tessellate, relying on the TestTessellator class\n          // to ensure the Tessellator correctly identified a malformed shape and its not a bug\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" could not tessellate. Malformed shape \" + polygons[id] + \" detected\");\n          }\n          // remove and skip the malformed shape\n          polygons[id] = null;\n          continue;\n        }\n        poly2D[id] = Polygon2D.create(quantizePolygon(polygons[id]));\n      }\n      w.addDocument(doc);\n      if (id > 0 && randomInt(100) == 42) {\n        int idToDelete = randomInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.out.println(\"   delete id=\" + idToDelete);\n        }\n      }\n    }\n\n    if (randomBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w);\n    w.close();\n\n    IndexSearcher s = newSearcher(r);\n\n    final int iters = atLeast(75);\n\n    Bits liveDocs = MultiFields.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter + 1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // BBox\n      Rectangle rect = GeoTestUtil.nextBoxNotCrossingDateline();\n      Query query = newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (polygons[id] == null) {\n          expected = false;\n        } else {\n          // check quantized poly against quantized query\n          expected = poly2D[id].relate(quantizeLatCeil(rect.minLat), quantizeLat(rect.maxLat),\n              quantizeLonCeil(rect.minLon), quantizeLon(rect.maxLon)) != Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          b.append(\"  polygon=\" + quantizePolygon(polygons[id]) + \"\\n\");\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  rect=Rectangle(\" + quantizeLatCeil(rect.minLat) + \" TO \" + quantizeLat(rect.maxLat) + \" lon=\" + quantizeLonCeil(rect.minLon) + \" TO \" + quantizeLon(rect.maxLon) + \")\");\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4312aa12218419d320e0966c3f3e72deb359afaa","date":1533146016,"type":6,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPolygonShapeQueries#indexRandomPolygons(List[Polygon2D],Polygon...).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShapeQueries#verifyRandomBBoxes(Polygon...).mjava","sourceNew":"  protected IndexWriter indexRandomPolygons(List<Polygon2D> poly2d, Polygon... polygons) throws Exception {\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < polygons.length / 100) {\n      iwc.setMaxBufferedDocs(polygons.length / 100);\n    }\n    Directory dir;\n    if (polygons.length > 1000) {\n      dir = newFSDirectory(createTempDir(getClass().getSimpleName()));\n    } else {\n      dir = newDirectory();\n    }\n\n    Set<Integer> deleted = new HashSet<>();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    for (int id = 0; id < polygons.length; ++id) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (polygons[id] != null) {\n        try {\n          addPolygonsToDoc(FIELD_NAME, doc, polygons[id]);\n        } catch (IllegalArgumentException e) {\n          // GeoTestUtil will occassionally create invalid polygons\n          // invalid polygons will not tessellate\n          // we skip those polygons that will not tessellate, relying on the TestTessellator class\n          // to ensure the Tessellator correctly identified a malformed shape and its not a bug\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" could not tessellate. Malformed shape \" + polygons[id] + \" detected\");\n          }\n          // remove and skip the malformed shape\n          polygons[id] = null;\n          poly2d.add(id, null);\n          continue;\n        }\n        poly2d.add(id, Polygon2D.create(quantizePolygon(polygons[id])));\n      } else {\n        poly2d.add(id, null);\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 42) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.out.println(\"   delete id=\" + idToDelete);\n        }\n      }\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n\n    return w;\n  }\n\n","sourceOld":"  protected void verifyRandomBBoxes(Polygon... polygons) throws Exception {\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < polygons.length / 100) {\n      iwc.setMaxBufferedDocs(polygons.length / 100);\n    }\n    Directory dir;\n    if (polygons.length > 1000) {\n      dir = newFSDirectory(createTempDir(getClass().getSimpleName()));\n    } else {\n      dir = newDirectory();\n    }\n\n    Set<Integer> deleted = new HashSet<>();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Polygon2D[] poly2D = new Polygon2D[polygons.length];\n    for (int id = 0; id < polygons.length; ++id) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (polygons[id] != null) {\n        try {\n          addPolygonsToDoc(FIELD_NAME, doc, polygons[id]);\n        } catch (IllegalArgumentException e) {\n          // GeoTestUtil will occassionally create invalid polygons\n          // invalid polygons will not tessellate\n          // we skip those polygons that will not tessellate, relying on the TestTessellator class\n          // to ensure the Tessellator correctly identified a malformed shape and its not a bug\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" could not tessellate. Malformed shape \" + polygons[id] + \" detected\");\n          }\n          // remove and skip the malformed shape\n          polygons[id] = null;\n          continue;\n        }\n        poly2D[id] = Polygon2D.create(quantizePolygon(polygons[id]));\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 42) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.out.println(\"   delete id=\" + idToDelete);\n        }\n      }\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w);\n    w.close();\n\n    IndexSearcher s = newSearcher(r);\n\n    final int iters = atLeast(75);\n\n    Bits liveDocs = MultiFields.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter+1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // BBox\n      Rectangle rect = GeoTestUtil.nextBoxNotCrossingDateline();\n      Query query = newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (polygons[id] == null) {\n          expected = false;\n        } else {\n          // check quantized poly against quantized query\n          expected = poly2D[id].relate(quantizeLatCeil(rect.minLat), quantizeLat(rect.maxLat),\n              quantizeLonCeil(rect.minLon), quantizeLon(rect.maxLon)) != Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          b.append(\"  polygon=\" + quantizePolygon(polygons[id]) + \"\\n\");\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  rect=Rectangle(\" + quantizeLatCeil(rect.minLat) + \" TO \" + quantizeLat(rect.maxLat) + \" lon=\" + quantizeLonCeil(rect.minLon) + \" TO \" + quantizeLon(rect.maxLon) + \")\");\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":["cb1d3c28af553b906e024a8a705042fa072efbdd","cb1d3c28af553b906e024a8a705042fa072efbdd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4312aa12218419d320e0966c3f3e72deb359afaa","date":1533146016,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPolygonShapeQueries#verifyRandomBBoxQueries(IndexReader,List[Polygon2D],Polygon...).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShapeQueries#verifyRandomBBoxes(Polygon...).mjava","sourceNew":"  protected void verifyRandomBBoxQueries(IndexReader reader, List<Polygon2D> poly2d, Polygon... polygons) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = atLeast(75);\n\n    Bits liveDocs = MultiFields.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter+1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // BBox\n      Rectangle rect = GeoTestUtil.nextBoxNotCrossingDateline();\n      Query query = newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (polygons[id] == null) {\n          expected = false;\n        } else {\n          // check quantized poly against quantized query\n          expected = poly2d.get(id).relate(quantizeLatCeil(rect.minLat), quantizeLat(rect.maxLat),\n              quantizeLonCeil(rect.minLon), quantizeLon(rect.maxLon)) != Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          b.append(\"  polygon=\" + quantizePolygon(polygons[id]) + \"\\n\");\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  rect=Rectangle(\" + quantizeLatCeil(rect.minLat) + \" TO \" + quantizeLat(rect.maxLat) + \" lon=\" + quantizeLonCeil(rect.minLon) + \" TO \" + quantizeLon(rect.maxLon) + \")\");\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","sourceOld":"  protected void verifyRandomBBoxes(Polygon... polygons) throws Exception {\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < polygons.length / 100) {\n      iwc.setMaxBufferedDocs(polygons.length / 100);\n    }\n    Directory dir;\n    if (polygons.length > 1000) {\n      dir = newFSDirectory(createTempDir(getClass().getSimpleName()));\n    } else {\n      dir = newDirectory();\n    }\n\n    Set<Integer> deleted = new HashSet<>();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Polygon2D[] poly2D = new Polygon2D[polygons.length];\n    for (int id = 0; id < polygons.length; ++id) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (polygons[id] != null) {\n        try {\n          addPolygonsToDoc(FIELD_NAME, doc, polygons[id]);\n        } catch (IllegalArgumentException e) {\n          // GeoTestUtil will occassionally create invalid polygons\n          // invalid polygons will not tessellate\n          // we skip those polygons that will not tessellate, relying on the TestTessellator class\n          // to ensure the Tessellator correctly identified a malformed shape and its not a bug\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" could not tessellate. Malformed shape \" + polygons[id] + \" detected\");\n          }\n          // remove and skip the malformed shape\n          polygons[id] = null;\n          continue;\n        }\n        poly2D[id] = Polygon2D.create(quantizePolygon(polygons[id]));\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 42) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.out.println(\"   delete id=\" + idToDelete);\n        }\n      }\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w);\n    w.close();\n\n    IndexSearcher s = newSearcher(r);\n\n    final int iters = atLeast(75);\n\n    Bits liveDocs = MultiFields.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter+1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // BBox\n      Rectangle rect = GeoTestUtil.nextBoxNotCrossingDateline();\n      Query query = newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (polygons[id] == null) {\n          expected = false;\n        } else {\n          // check quantized poly against quantized query\n          expected = poly2D[id].relate(quantizeLatCeil(rect.minLat), quantizeLat(rect.maxLat),\n              quantizeLonCeil(rect.minLon), quantizeLon(rect.maxLon)) != Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          b.append(\"  polygon=\" + quantizePolygon(polygons[id]) + \"\\n\");\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  rect=Rectangle(\" + quantizeLatCeil(rect.minLat) + \" TO \" + quantizeLat(rect.maxLat) + \" lon=\" + quantizeLonCeil(rect.minLon) + \" TO \" + quantizeLon(rect.maxLon) + \")\");\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":["cb1d3c28af553b906e024a8a705042fa072efbdd","cb1d3c28af553b906e024a8a705042fa072efbdd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4312aa12218419d320e0966c3f3e72deb359afaa","date":1533146016,"type":6,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPolygonShapeQueries#verifyRandomPolygonQueries(IndexReader,List[Polygon2D],Polygon...).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShapeQueries#verifyRandomBBoxes(Polygon...).mjava","sourceNew":"  protected void verifyRandomPolygonQueries(IndexReader reader, List<Polygon2D> poly2d, Polygon... polygons) throws Exception {\n    IndexSearcher s = newSearcher(reader);\n\n    final int iters = atLeast(75);\n\n    Bits liveDocs = MultiFields.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter+1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // Polygon\n      Polygon queryPolygon = GeoTestUtil.nextPolygon();\n      Polygon2D queryPoly2D = Polygon2D.create(queryPolygon);\n      Query query = newPolygonQuery(FIELD_NAME, queryPolygon);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(reader, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (polygons[id] == null) {\n          expected = false;\n        } else {\n          expected = false;\n          try {\n            // check poly (quantized the same way as indexed) against query polygon\n            List<Tessellator.Triangle> tesselation = Tessellator.tessellate(quantizePolygon(polygons[id]));\n            for (Tessellator.Triangle t : tesselation) {\n              if (queryPoly2D.relateTriangle(t.getLon(0), t.getLat(0),\n                  t.getLon(1), t.getLat(1), t.getLon(2), t.getLat(2)) != Relation.CELL_OUTSIDE_QUERY) {\n                expected = true;\n                break;\n              }\n            }\n          } catch (IllegalArgumentException e) {\n            continue;\n          }\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          b.append(\"  polygon=\" + quantizePolygon(polygons[id]).toGeoJSON() + \"\\n\");\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  queryPolygon=\" + queryPolygon.toGeoJSON());\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n  }\n\n","sourceOld":"  protected void verifyRandomBBoxes(Polygon... polygons) throws Exception {\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < polygons.length / 100) {\n      iwc.setMaxBufferedDocs(polygons.length / 100);\n    }\n    Directory dir;\n    if (polygons.length > 1000) {\n      dir = newFSDirectory(createTempDir(getClass().getSimpleName()));\n    } else {\n      dir = newDirectory();\n    }\n\n    Set<Integer> deleted = new HashSet<>();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    Polygon2D[] poly2D = new Polygon2D[polygons.length];\n    for (int id = 0; id < polygons.length; ++id) {\n      Document doc = new Document();\n      doc.add(newStringField(\"id\", \"\" + id, Field.Store.NO));\n      doc.add(new NumericDocValuesField(\"id\", id));\n      if (polygons[id] != null) {\n        try {\n          addPolygonsToDoc(FIELD_NAME, doc, polygons[id]);\n        } catch (IllegalArgumentException e) {\n          // GeoTestUtil will occassionally create invalid polygons\n          // invalid polygons will not tessellate\n          // we skip those polygons that will not tessellate, relying on the TestTessellator class\n          // to ensure the Tessellator correctly identified a malformed shape and its not a bug\n          if (VERBOSE) {\n            System.out.println(\"  id=\" + id + \" could not tessellate. Malformed shape \" + polygons[id] + \" detected\");\n          }\n          // remove and skip the malformed shape\n          polygons[id] = null;\n          continue;\n        }\n        poly2D[id] = Polygon2D.create(quantizePolygon(polygons[id]));\n      }\n      w.addDocument(doc);\n      if (id > 0 && random().nextInt(100) == 42) {\n        int idToDelete = random().nextInt(id);\n        w.deleteDocuments(new Term(\"id\", \"\"+idToDelete));\n        deleted.add(idToDelete);\n        if (VERBOSE) {\n          System.out.println(\"   delete id=\" + idToDelete);\n        }\n      }\n    }\n\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    final IndexReader r = DirectoryReader.open(w);\n    w.close();\n\n    IndexSearcher s = newSearcher(r);\n\n    final int iters = atLeast(75);\n\n    Bits liveDocs = MultiFields.getLiveDocs(s.getIndexReader());\n    int maxDoc = s.getIndexReader().maxDoc();\n\n    for (int iter = 0; iter < iters; ++iter) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + (iter+1) + \" of \" + iters + \" s=\" + s);\n      }\n\n      // BBox\n      Rectangle rect = GeoTestUtil.nextBoxNotCrossingDateline();\n      Query query = newRectQuery(FIELD_NAME, rect.minLat, rect.maxLat, rect.minLon, rect.maxLon);\n\n      if (VERBOSE) {\n        System.out.println(\"  query=\" + query);\n      }\n\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n        private int docBase;\n\n        @Override\n        public ScoreMode scoreMode() {\n          return ScoreMode.COMPLETE_NO_SCORES;\n        }\n\n        @Override\n        protected void doSetNextReader(LeafReaderContext context) throws IOException {\n          docBase = context.docBase;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          hits.set(docBase+doc);\n        }\n      });\n\n      boolean fail = false;\n      NumericDocValues docIDToID = MultiDocValues.getNumericValues(r, \"id\");\n      for (int docID = 0; docID < maxDoc; ++docID) {\n        assertEquals(docID, docIDToID.nextDoc());\n        int id = (int) docIDToID.longValue();\n        boolean expected;\n        if (liveDocs != null && liveDocs.get(docID) == false) {\n          // document is deleted\n          expected = false;\n        } else if (polygons[id] == null) {\n          expected = false;\n        } else {\n          // check quantized poly against quantized query\n          expected = poly2D[id].relate(quantizeLatCeil(rect.minLat), quantizeLat(rect.maxLat),\n              quantizeLonCeil(rect.minLon), quantizeLon(rect.maxLon)) != Relation.CELL_OUTSIDE_QUERY;\n        }\n\n        if (hits.get(docID) != expected) {\n          StringBuilder b = new StringBuilder();\n\n          if (expected) {\n            b.append(\"FAIL: id=\" + id + \" should match but did not\\n\");\n          } else {\n            b.append(\"FAIL: id=\" + id + \" should not match but did\\n\");\n          }\n          b.append(\"  query=\" + query + \" docID=\" + docID + \"\\n\");\n          b.append(\"  polygon=\" + quantizePolygon(polygons[id]) + \"\\n\");\n          b.append(\"  deleted?=\" + (liveDocs != null && liveDocs.get(docID) == false));\n          b.append(\"  rect=Rectangle(\" + quantizeLatCeil(rect.minLat) + \" TO \" + quantizeLat(rect.maxLat) + \" lon=\" + quantizeLonCeil(rect.minLon) + \" TO \" + quantizeLon(rect.maxLon) + \")\");\n          if (true) {\n            fail(\"wrong hit (first of possibly more):\\n\\n\" + b);\n          } else {\n            System.out.println(b.toString());\n            fail = true;\n          }\n        }\n      }\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":["cb1d3c28af553b906e024a8a705042fa072efbdd","cb1d3c28af553b906e024a8a705042fa072efbdd"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"60f64dc6ee2edd7a99b719d96f6d9e7ef0ae5980":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"],"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"],"1b39f95206bdb2c5b28ef7e848cacce7f2baefea":["60f64dc6ee2edd7a99b719d96f6d9e7ef0ae5980"],"4312aa12218419d320e0966c3f3e72deb359afaa":["1b39f95206bdb2c5b28ef7e848cacce7f2baefea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4312aa12218419d320e0966c3f3e72deb359afaa"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"]},"commit2Childs":{"60f64dc6ee2edd7a99b719d96f6d9e7ef0ae5980":["1b39f95206bdb2c5b28ef7e848cacce7f2baefea"],"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c":["60f64dc6ee2edd7a99b719d96f6d9e7ef0ae5980","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"1b39f95206bdb2c5b28ef7e848cacce7f2baefea":["4312aa12218419d320e0966c3f3e72deb359afaa"],"4312aa12218419d320e0966c3f3e72deb359afaa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}