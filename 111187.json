{"path":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReaderIterator#next(int).mjava","commits":[{"id":"37b84753dc1f66eba4973779932885fe42cde001","date":1358812051,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReaderIterator#next(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#next(int).mjava","sourceNew":"  /** Read between <tt>1</tt> and <code>count</code> values. */\n  public LongsRef next(int count) throws IOException {\n    assert count > 0;\n    if (ord == valueCount) {\n      throw new EOFException();\n    }\n    if (off == blockSize) {\n      refill();\n    }\n\n    count = Math.min(count, blockSize - off);\n    count = (int) Math.min(count, valueCount - ord);\n\n    valuesRef.offset = off;\n    valuesRef.length = count;\n    off += count;\n    ord += count;\n    return valuesRef;\n  }\n\n","sourceOld":"  /** Read between <tt>1</tt> and <code>count</code> values. */\n  public LongsRef next(int count) throws IOException {\n    assert count > 0;\n    if (ord == valueCount) {\n      throw new EOFException();\n    }\n    if (off == blockSize) {\n      refill();\n    }\n\n    count = Math.min(count, blockSize - off);\n    count = (int) Math.min(count, valueCount - ord);\n\n    valuesRef.offset = off;\n    valuesRef.length = count;\n    off += count;\n    ord += count;\n    return valuesRef;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReaderIterator#next(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#next(int).mjava","sourceNew":"  /** Read between <tt>1</tt> and <code>count</code> values. */\n  public LongsRef next(int count) throws IOException {\n    assert count > 0;\n    if (ord == valueCount) {\n      throw new EOFException();\n    }\n    if (off == blockSize) {\n      refill();\n    }\n\n    count = Math.min(count, blockSize - off);\n    count = (int) Math.min(count, valueCount - ord);\n\n    valuesRef.offset = off;\n    valuesRef.length = count;\n    off += count;\n    ord += count;\n    return valuesRef;\n  }\n\n","sourceOld":"  /** Read between <tt>1</tt> and <code>count</code> values. */\n  public LongsRef next(int count) throws IOException {\n    assert count > 0;\n    if (ord == valueCount) {\n      throw new EOFException();\n    }\n    if (off == blockSize) {\n      refill();\n    }\n\n    count = Math.min(count, blockSize - off);\n    count = (int) Math.min(count, valueCount - ord);\n\n    valuesRef.offset = off;\n    valuesRef.length = count;\n    off += count;\n    ord += count;\n    return valuesRef;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e3751ad4cc85eb979419cf5469dfba266eae56a","date":1581046252,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReaderIterator#next(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReaderIterator#next(int).mjava","sourceNew":"  /** Read between <code>1</code> and <code>count</code> values. */\n  public LongsRef next(int count) throws IOException {\n    assert count > 0;\n    if (ord == valueCount) {\n      throw new EOFException();\n    }\n    if (off == blockSize) {\n      refill();\n    }\n\n    count = Math.min(count, blockSize - off);\n    count = (int) Math.min(count, valueCount - ord);\n\n    valuesRef.offset = off;\n    valuesRef.length = count;\n    off += count;\n    ord += count;\n    return valuesRef;\n  }\n\n","sourceOld":"  /** Read between <tt>1</tt> and <code>count</code> values. */\n  public LongsRef next(int count) throws IOException {\n    assert count > 0;\n    if (ord == valueCount) {\n      throw new EOFException();\n    }\n    if (off == blockSize) {\n      refill();\n    }\n\n    count = Math.min(count, blockSize - off);\n    count = (int) Math.min(count, valueCount - ord);\n\n    valuesRef.offset = off;\n    valuesRef.length = count;\n    off += count;\n    ord += count;\n    return valuesRef;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9e3751ad4cc85eb979419cf5469dfba266eae56a":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","37b84753dc1f66eba4973779932885fe42cde001"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"37b84753dc1f66eba4973779932885fe42cde001":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9e3751ad4cc85eb979419cf5469dfba266eae56a"]},"commit2Childs":{"9e3751ad4cc85eb979419cf5469dfba266eae56a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["9e3751ad4cc85eb979419cf5469dfba266eae56a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","37b84753dc1f66eba4973779932885fe42cde001"],"37b84753dc1f66eba4973779932885fe42cde001":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}