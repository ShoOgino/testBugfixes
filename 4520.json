{"path":"lucene/src/java/org/apache/lucene/index/codecs/docvalues/DocValuesCodec.WrappingFieldsConsumer#addValuesField(FieldInfo).mjava","commits":[{"id":"d38eb16935a27250e66a031c80560615df637f95","date":1288085332,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/docvalues/DocValuesCodec.WrappingFieldsConsumer#addValuesField(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public synchronized DocValuesConsumer addValuesField(FieldInfo field)\n        throws IOException {\n      DocValuesConsumer consumer = DocValuesConsumer.create(state.segmentName,\n          state.directory, field, null); // TODO: set comparator here\n      docValuesConsumers.add(consumer);\n      return consumer;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/docvalues/DocValuesCodec.WrappingFieldsConsumer#addValuesField(FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/docvalues/DocValuesCodec.WrappingFieldsConsumer#addValuesField(FieldInfo).mjava","sourceNew":"    @Override\n    public synchronized DocValuesConsumer addValuesField(FieldInfo field)\n        throws IOException {\n      DocValuesConsumer consumer = DocValuesConsumer.create(state.segmentName,\n      // TODO: set comparator here\n      //TODO can we have a compound file per segment and codec for docvalues?\n          state.directory, field, state.codecId +\"-\"+ field.number, null);\n      docValuesConsumers.add(consumer);\n      return consumer;\n    }\n\n","sourceOld":"    @Override\n    public synchronized DocValuesConsumer addValuesField(FieldInfo field)\n        throws IOException {\n      DocValuesConsumer consumer = DocValuesConsumer.create(state.segmentName,\n          state.directory, field, null); // TODO: set comparator here\n      docValuesConsumers.add(consumer);\n      return consumer;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d84736c4614acce6720851cbd2c823d7cd516e4","date":1290551630,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/docvalues/DocValuesCodec.WrappingFieldsConsumer#addValuesField(FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/docvalues/DocValuesCodec.WrappingFieldsConsumer#addValuesField(FieldInfo).mjava","sourceNew":"    @Override\n    public synchronized DocValuesConsumer addValuesField(FieldInfo field)\n        throws IOException {\n      if(info == null) {\n        info = new DocValuesCodecInfo();\n      }\n      final DocValuesConsumer consumer = DocValuesConsumer.create(info.docValuesId(state.segmentName, state.codecId, \"\"\n          + field.number),\n      // TODO can we have a compound file per segment and codec for\n          // docvalues?\n          state.directory, field, comparator);\n      info.add(field.number);\n      return consumer;\n    }\n\n","sourceOld":"    @Override\n    public synchronized DocValuesConsumer addValuesField(FieldInfo field)\n        throws IOException {\n      DocValuesConsumer consumer = DocValuesConsumer.create(state.segmentName,\n      // TODO: set comparator here\n      //TODO can we have a compound file per segment and codec for docvalues?\n          state.directory, field, state.codecId +\"-\"+ field.number, null);\n      docValuesConsumers.add(consumer);\n      return consumer;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4","date":1291128345,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/docvalues/DocValuesCodec.WrappingFieldsConsumer#addValuesField(FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/docvalues/DocValuesCodec.WrappingFieldsConsumer#addValuesField(FieldInfo).mjava","sourceNew":"    @Override\n    public synchronized DocValuesConsumer addValuesField(FieldInfo field)\n        throws IOException {\n      if(info == null) {\n        info = new DocValuesCodecInfo();\n      }\n      final DocValuesConsumer consumer = DocValuesConsumer.create(info.docValuesId(state.segmentName, state.codecId, \"\"\n          + field.number),\n      // TODO can we have a compound file per segment and codec for\n          // docvalues?\n          state.directory, field, comparator, state.bytesUsed);\n      info.add(field.number);\n      return consumer;\n    }\n\n","sourceOld":"    @Override\n    public synchronized DocValuesConsumer addValuesField(FieldInfo field)\n        throws IOException {\n      if(info == null) {\n        info = new DocValuesCodecInfo();\n      }\n      final DocValuesConsumer consumer = DocValuesConsumer.create(info.docValuesId(state.segmentName, state.codecId, \"\"\n          + field.number),\n      // TODO can we have a compound file per segment and codec for\n          // docvalues?\n          state.directory, field, comparator);\n      info.add(field.number);\n      return consumer;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16dc5aef9648bb8fedce2ef55874f52e62c2766d","date":1293994163,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/docvalues/DocValuesCodec.WrappingFieldsConsumer#addValuesField(FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/docvalues/DocValuesCodec.WrappingFieldsConsumer#addValuesField(FieldInfo).mjava","sourceNew":"    @Override\n    public synchronized DocValuesConsumer addValuesField(FieldInfo field)\n        throws IOException {\n      if(info == null) {\n        info = new DocValuesCodecInfo();\n      }\n      final DocValuesConsumer consumer = Writer.create(field.getDocValues(), info.docValuesId(state.segmentName, state.codecId, \"\"\n          + field.number),\n      // TODO can we have a compound file per segment and codec for\n          // docvalues?\n          state.directory, comparator, state.bytesUsed);\n      info.add(field.number);\n      return consumer;\n    }\n\n","sourceOld":"    @Override\n    public synchronized DocValuesConsumer addValuesField(FieldInfo field)\n        throws IOException {\n      if(info == null) {\n        info = new DocValuesCodecInfo();\n      }\n      final DocValuesConsumer consumer = DocValuesConsumer.create(info.docValuesId(state.segmentName, state.codecId, \"\"\n          + field.number),\n      // TODO can we have a compound file per segment and codec for\n          // docvalues?\n          state.directory, field, comparator, state.bytesUsed);\n      info.add(field.number);\n      return consumer;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/docvalues/DocValuesCodec.WrappingFieldsConsumer#addValuesField(FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/docvalues/DocValuesCodec.WrappingFieldsConsumer#addValuesField(FieldInfo).mjava","sourceNew":"    @Override\n    public synchronized DocValuesConsumer addValuesField(FieldInfo field)\n        throws IOException {\n      final DocValuesConsumer consumer = Writer.create(field.getDocValues(), docValuesId(state.segmentName, state.codecId, field.number),\n      // TODO can we have a compound file per segment and codec for\n          // docvalues?\n          state.directory, comparator, state.bytesUsed);\n      return consumer;\n    }\n\n","sourceOld":"    @Override\n    public synchronized DocValuesConsumer addValuesField(FieldInfo field)\n        throws IOException {\n      if(info == null) {\n        info = new DocValuesCodecInfo();\n      }\n      final DocValuesConsumer consumer = Writer.create(field.getDocValues(), info.docValuesId(state.segmentName, state.codecId, \"\"\n          + field.number),\n      // TODO can we have a compound file per segment and codec for\n          // docvalues?\n          state.directory, comparator, state.bytesUsed);\n      info.add(field.number);\n      return consumer;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/docvalues/DocValuesCodec.WrappingFieldsConsumer#addValuesField(FieldInfo).mjava","sourceNew":null,"sourceOld":"    @Override\n    public synchronized DocValuesConsumer addValuesField(FieldInfo field)\n        throws IOException {\n      final DocValuesConsumer consumer = Writer.create(field.getDocValues(), docValuesId(state.segmentName, state.codecId, field.number),\n      // TODO can we have a compound file per segment and codec for\n          // docvalues?\n          state.directory, comparator, state.bytesUsed);\n      return consumer;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4":["2d84736c4614acce6720851cbd2c823d7cd516e4"],"2d84736c4614acce6720851cbd2c823d7cd516e4":["9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["d38eb16935a27250e66a031c80560615df637f95","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["16dc5aef9648bb8fedce2ef55874f52e62c2766d","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"16dc5aef9648bb8fedce2ef55874f52e62c2766d":["5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4"],"d38eb16935a27250e66a031c80560615df637f95":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4":["16dc5aef9648bb8fedce2ef55874f52e62c2766d"],"2d84736c4614acce6720851cbd2c823d7cd516e4":["5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["2d84736c4614acce6720851cbd2c823d7cd516e4"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","d619839baa8ce5503e496b94a9e42ad6f079293f","135621f3a0670a9394eb563224a3b76cc4dddc0f","d38eb16935a27250e66a031c80560615df637f95","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"16dc5aef9648bb8fedce2ef55874f52e62c2766d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"d38eb16935a27250e66a031c80560615df637f95":["9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}