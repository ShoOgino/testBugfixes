{"path":"lucene/core/src/java/org/apache/lucene/util/MSBRadixSorter#getFallbackSorter(int).mjava","commits":[{"id":"1ad3fdaef92a8e8112ab0f5be5fd95362cf9030e","date":1464596999,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/MSBRadixSorter#getFallbackSorter(int).mjava","pathOld":"/dev/null","sourceNew":"  /** Get a fall-back sorter which may assume that the first k bytes of all compared strings are equal. */\n  protected Sorter getFallbackSorter(int k) {\n    return new IntroSorter() {\n      @Override\n      protected void swap(int i, int j) {\n        MSBRadixSorter.this.swap(i, j);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        for (int o = k; o < maxLength; ++o) {\n          final int b1 = byteAt(i, o);\n          final int b2 = byteAt(j, o);\n          if (b1 != b2) {\n            return b1 - b2;\n          } else if (b1 == -1) {\n            break;\n          }\n        }\n        return 0;\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        pivot.setLength(0);\n        for (int o = k; o < maxLength; ++o) {\n          final int b = byteAt(i, o);\n          if (b == -1) {\n            break;\n          }\n          pivot.append((byte) b);\n        }\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        for (int o = 0; o < pivot.length(); ++o) {\n          final int b1 = pivot.byteAt(o) & 0xff;\n          final int b2 = byteAt(j, k + o);\n          if (b1 != b2) {\n            return b1 - b2;\n          }\n        }\n        if (k + pivot.length() == maxLength) {\n          return 0;\n        }\n        return -1 - byteAt(j, k + pivot.length());\n      }\n\n      private final BytesRefBuilder pivot = new BytesRefBuilder();\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da8a02bef7458089240404614139b53c9f875ec7","date":1464597207,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/MSBRadixSorter#getFallbackSorter(int).mjava","pathOld":"/dev/null","sourceNew":"  /** Get a fall-back sorter which may assume that the first k bytes of all compared strings are equal. */\n  protected Sorter getFallbackSorter(int k) {\n    return new IntroSorter() {\n      @Override\n      protected void swap(int i, int j) {\n        MSBRadixSorter.this.swap(i, j);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        for (int o = k; o < maxLength; ++o) {\n          final int b1 = byteAt(i, o);\n          final int b2 = byteAt(j, o);\n          if (b1 != b2) {\n            return b1 - b2;\n          } else if (b1 == -1) {\n            break;\n          }\n        }\n        return 0;\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        pivot.setLength(0);\n        for (int o = k; o < maxLength; ++o) {\n          final int b = byteAt(i, o);\n          if (b == -1) {\n            break;\n          }\n          pivot.append((byte) b);\n        }\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        for (int o = 0; o < pivot.length(); ++o) {\n          final int b1 = pivot.byteAt(o) & 0xff;\n          final int b2 = byteAt(j, k + o);\n          if (b1 != b2) {\n            return b1 - b2;\n          }\n        }\n        if (k + pivot.length() == maxLength) {\n          return 0;\n        }\n        return -1 - byteAt(j, k + pivot.length());\n      }\n\n      private final BytesRefBuilder pivot = new BytesRefBuilder();\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8ee93140fd0efef7e101786e3ed5160a700b5f","date":1464820111,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/MSBRadixSorter#getFallbackSorter(int).mjava","pathOld":"/dev/null","sourceNew":"  /** Get a fall-back sorter which may assume that the first k bytes of all compared strings are equal. */\n  protected Sorter getFallbackSorter(int k) {\n    return new IntroSorter() {\n      @Override\n      protected void swap(int i, int j) {\n        MSBRadixSorter.this.swap(i, j);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        for (int o = k; o < maxLength; ++o) {\n          final int b1 = byteAt(i, o);\n          final int b2 = byteAt(j, o);\n          if (b1 != b2) {\n            return b1 - b2;\n          } else if (b1 == -1) {\n            break;\n          }\n        }\n        return 0;\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        pivot.setLength(0);\n        for (int o = k; o < maxLength; ++o) {\n          final int b = byteAt(i, o);\n          if (b == -1) {\n            break;\n          }\n          pivot.append((byte) b);\n        }\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        for (int o = 0; o < pivot.length(); ++o) {\n          final int b1 = pivot.byteAt(o) & 0xff;\n          final int b2 = byteAt(j, k + o);\n          if (b1 != b2) {\n            return b1 - b2;\n          }\n        }\n        if (k + pivot.length() == maxLength) {\n          return 0;\n        }\n        return -1 - byteAt(j, k + pivot.length());\n      }\n\n      private final BytesRefBuilder pivot = new BytesRefBuilder();\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/MSBRadixSorter#getFallbackSorter(int).mjava","pathOld":"/dev/null","sourceNew":"  /** Get a fall-back sorter which may assume that the first k bytes of all compared strings are equal. */\n  protected Sorter getFallbackSorter(int k) {\n    return new IntroSorter() {\n      @Override\n      protected void swap(int i, int j) {\n        MSBRadixSorter.this.swap(i, j);\n      }\n\n      @Override\n      protected int compare(int i, int j) {\n        for (int o = k; o < maxLength; ++o) {\n          final int b1 = byteAt(i, o);\n          final int b2 = byteAt(j, o);\n          if (b1 != b2) {\n            return b1 - b2;\n          } else if (b1 == -1) {\n            break;\n          }\n        }\n        return 0;\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        pivot.setLength(0);\n        for (int o = k; o < maxLength; ++o) {\n          final int b = byteAt(i, o);\n          if (b == -1) {\n            break;\n          }\n          pivot.append((byte) b);\n        }\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        for (int o = 0; o < pivot.length(); ++o) {\n          final int b1 = pivot.byteAt(o) & 0xff;\n          final int b2 = byteAt(j, k + o);\n          if (b1 != b2) {\n            return b1 - b2;\n          }\n        }\n        if (k + pivot.length() == maxLength) {\n          return 0;\n        }\n        return -1 - byteAt(j, k + pivot.length());\n      }\n\n      private final BytesRefBuilder pivot = new BytesRefBuilder();\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da8a02bef7458089240404614139b53c9f875ec7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1ad3fdaef92a8e8112ab0f5be5fd95362cf9030e"],"1ad3fdaef92a8e8112ab0f5be5fd95362cf9030e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1ad3fdaef92a8e8112ab0f5be5fd95362cf9030e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1ad3fdaef92a8e8112ab0f5be5fd95362cf9030e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1ad3fdaef92a8e8112ab0f5be5fd95362cf9030e"]},"commit2Childs":{"da8a02bef7458089240404614139b53c9f875ec7":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["da8a02bef7458089240404614139b53c9f875ec7","1ad3fdaef92a8e8112ab0f5be5fd95362cf9030e","5b8ee93140fd0efef7e101786e3ed5160a700b5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1ad3fdaef92a8e8112ab0f5be5fd95362cf9030e":["da8a02bef7458089240404614139b53c9f875ec7","5b8ee93140fd0efef7e101786e3ed5160a700b5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["da8a02bef7458089240404614139b53c9f875ec7","5b8ee93140fd0efef7e101786e3ed5160a700b5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}