{"path":"src/java/org/apache/lucene/search/MultiTermQuery#rewrite(IndexReader).mjava","commits":[{"id":"e0b950aef8cdf4606d480e28ea17bd870b93c81e","date":1060680143,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiTermQuery#rewrite(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"    public Query rewrite(IndexReader reader) throws IOException {\n      FilteredTermEnum enumerator = getEnum(reader);\n      BooleanQuery query = new BooleanQuery();\n      try {\n        do {\n          Term t = enumerator.term();\n          if (t != null) {\n            TermQuery tq = new TermQuery(t);      // found a match\n            tq.setBoost(getBoost() * enumerator.difference()); // set the boost\n            query.add(tq, false, false);          // add to query\n          }\n        } while (enumerator.next());\n      } finally {\n        enumerator.close();\n      }\n      return query;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2db8da778bc059db762a1d91f6e41624d01f0c1d","date":1093638047,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiTermQuery#rewrite(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/MultiTermQuery#rewrite(IndexReader).mjava","sourceNew":"    public Query rewrite(IndexReader reader) throws IOException {\n      FilteredTermEnum enumerator = getEnum(reader);\n      BooleanQuery query = new BooleanQuery();\n      try {\n        do {\n          Term t = enumerator.term();\n          if (t != null) {\n            TermQuery tq = new TermQuery(t);      // found a match\n            tq.setBoost(getBoost() * enumerator.difference()); // set the boost\n            query.add(tq, BooleanClause.Occur.SHOULD);          // add to query\n          }\n        } while (enumerator.next());\n      } finally {\n        enumerator.close();\n      }\n      return query;\n    }\n\n","sourceOld":"    public Query rewrite(IndexReader reader) throws IOException {\n      FilteredTermEnum enumerator = getEnum(reader);\n      BooleanQuery query = new BooleanQuery();\n      try {\n        do {\n          Term t = enumerator.term();\n          if (t != null) {\n            TermQuery tq = new TermQuery(t);      // found a match\n            tq.setBoost(getBoost() * enumerator.difference()); // set the boost\n            query.add(tq, false, false);          // add to query\n          }\n        } while (enumerator.next());\n      } finally {\n        enumerator.close();\n      }\n      return query;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcbc8ed27f45a5a299f8414d7a886340ce7bb3db","date":1110223587,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiTermQuery#rewrite(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/MultiTermQuery#rewrite(IndexReader).mjava","sourceNew":"    public Query rewrite(IndexReader reader) throws IOException {\n      FilteredTermEnum enumerator = getEnum(reader);\n      BooleanQuery query = new BooleanQuery(true);\n      try {\n        do {\n          Term t = enumerator.term();\n          if (t != null) {\n            TermQuery tq = new TermQuery(t);      // found a match\n            tq.setBoost(getBoost() * enumerator.difference()); // set the boost\n            query.add(tq, BooleanClause.Occur.SHOULD);          // add to query\n          }\n        } while (enumerator.next());\n      } finally {\n        enumerator.close();\n      }\n      return query;\n    }\n\n","sourceOld":"    public Query rewrite(IndexReader reader) throws IOException {\n      FilteredTermEnum enumerator = getEnum(reader);\n      BooleanQuery query = new BooleanQuery();\n      try {\n        do {\n          Term t = enumerator.term();\n          if (t != null) {\n            TermQuery tq = new TermQuery(t);      // found a match\n            tq.setBoost(getBoost() * enumerator.difference()); // set the boost\n            query.add(tq, BooleanClause.Occur.SHOULD);          // add to query\n          }\n        } while (enumerator.next());\n      } finally {\n        enumerator.close();\n      }\n      return query;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f7a11eba51d213f09b96054111cf56a1e5796a3","date":1226364000,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiTermQuery#rewrite(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/MultiTermQuery#rewrite(IndexReader).mjava","sourceNew":"  public Query rewrite(IndexReader reader) throws IOException {\n    if (!constantScoreRewrite) {\n      FilteredTermEnum enumerator = getEnum(reader);\n      BooleanQuery query = new BooleanQuery(true);\n      try {\n        do {\n          Term t = enumerator.term();\n          if (t != null) {\n            TermQuery tq = new TermQuery(t); // found a match\n            tq.setBoost(getBoost() * enumerator.difference()); // set the boost\n            query.add(tq, BooleanClause.Occur.SHOULD); // add to query\n          }\n        } while (enumerator.next());\n      } finally {\n        enumerator.close();\n      }\n      return query;\n    } else {\n      Query query = new ConstantScoreQuery(getFilter());\n      query.setBoost(getBoost());\n      return query;\n    }\n  }\n\n","sourceOld":"    public Query rewrite(IndexReader reader) throws IOException {\n      FilteredTermEnum enumerator = getEnum(reader);\n      BooleanQuery query = new BooleanQuery(true);\n      try {\n        do {\n          Term t = enumerator.term();\n          if (t != null) {\n            TermQuery tq = new TermQuery(t);      // found a match\n            tq.setBoost(getBoost() * enumerator.difference()); // set the boost\n            query.add(tq, BooleanClause.Occur.SHOULD);          // add to query\n          }\n        } while (enumerator.next());\n      } finally {\n        enumerator.close();\n      }\n      return query;\n    }\n\n","bugFix":null,"bugIntro":["a848bab7293f0a257ec5153d4995973083b451e1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f7d84f690e0bbb5758c1aae9f89183da2fa31fd","date":1239737743,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiTermQuery#rewrite(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/MultiTermQuery#rewrite(IndexReader).mjava","sourceNew":"  public Query rewrite(IndexReader reader) throws IOException {\n    if (!constantScoreRewrite) {\n      FilteredTermEnum enumerator = getEnum(reader);\n      BooleanQuery query = new BooleanQuery(true);\n      try {\n        do {\n          Term t = enumerator.term();\n          if (t != null) {\n            numberOfTerms++;\n            TermQuery tq = new TermQuery(t); // found a match\n            tq.setBoost(getBoost() * enumerator.difference()); // set the boost\n            query.add(tq, BooleanClause.Occur.SHOULD); // add to query\n          }\n        } while (enumerator.next());\n      } finally {\n        enumerator.close();\n      }\n      return query;\n    } else {\n      Query query = new ConstantScoreQuery(getFilter());\n      query.setBoost(getBoost());\n      return query;\n    }\n  }\n\n","sourceOld":"  public Query rewrite(IndexReader reader) throws IOException {\n    if (!constantScoreRewrite) {\n      FilteredTermEnum enumerator = getEnum(reader);\n      BooleanQuery query = new BooleanQuery(true);\n      try {\n        do {\n          Term t = enumerator.term();\n          if (t != null) {\n            TermQuery tq = new TermQuery(t); // found a match\n            tq.setBoost(getBoost() * enumerator.difference()); // set the boost\n            query.add(tq, BooleanClause.Occur.SHOULD); // add to query\n          }\n        } while (enumerator.next());\n      } finally {\n        enumerator.close();\n      }\n      return query;\n    } else {\n      Query query = new ConstantScoreQuery(getFilter());\n      query.setBoost(getBoost());\n      return query;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8b20609f6fb2cd074bd08115b0c3280b9646af7c","date":1248480213,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiTermQuery#rewrite(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/MultiTermQuery#rewrite(IndexReader).mjava","sourceNew":"  public Query rewrite(IndexReader reader) throws IOException {\n    return rewriteMethod.rewrite(reader, this);\n  }\n\n","sourceOld":"  public Query rewrite(IndexReader reader) throws IOException {\n    if (!constantScoreRewrite) {\n      FilteredTermEnum enumerator = getEnum(reader);\n      BooleanQuery query = new BooleanQuery(true);\n      try {\n        do {\n          Term t = enumerator.term();\n          if (t != null) {\n            numberOfTerms++;\n            TermQuery tq = new TermQuery(t); // found a match\n            tq.setBoost(getBoost() * enumerator.difference()); // set the boost\n            query.add(tq, BooleanClause.Occur.SHOULD); // add to query\n          }\n        } while (enumerator.next());\n      } finally {\n        enumerator.close();\n      }\n      return query;\n    } else {\n      Query query = new ConstantScoreQuery(getFilter());\n      query.setBoost(getBoost());\n      return query;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiTermQuery#rewrite(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/MultiTermQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    return rewriteMethod.rewrite(reader, this);\n  }\n\n","sourceOld":"  public Query rewrite(IndexReader reader) throws IOException {\n    return rewriteMethod.rewrite(reader, this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQuery#rewrite(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/MultiTermQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    return rewriteMethod.rewrite(reader, this);\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    return rewriteMethod.rewrite(reader, this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e0b950aef8cdf4606d480e28ea17bd870b93c81e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5f7d84f690e0bbb5758c1aae9f89183da2fa31fd":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"8a9e385641d717e641408d8fbbc62be8fc766357":["8b20609f6fb2cd074bd08115b0c3280b9646af7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b20609f6fb2cd074bd08115b0c3280b9646af7c":["5f7d84f690e0bbb5758c1aae9f89183da2fa31fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["bcbc8ed27f45a5a299f8414d7a886340ce7bb3db"],"bcbc8ed27f45a5a299f8414d7a886340ce7bb3db":["2db8da778bc059db762a1d91f6e41624d01f0c1d"],"2db8da778bc059db762a1d91f6e41624d01f0c1d":["e0b950aef8cdf4606d480e28ea17bd870b93c81e"]},"commit2Childs":{"e0b950aef8cdf4606d480e28ea17bd870b93c81e":["2db8da778bc059db762a1d91f6e41624d01f0c1d"],"5f7d84f690e0bbb5758c1aae9f89183da2fa31fd":["8b20609f6fb2cd074bd08115b0c3280b9646af7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e0b950aef8cdf4606d480e28ea17bd870b93c81e"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8b20609f6fb2cd074bd08115b0c3280b9646af7c":["8a9e385641d717e641408d8fbbc62be8fc766357"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["5f7d84f690e0bbb5758c1aae9f89183da2fa31fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bcbc8ed27f45a5a299f8414d7a886340ce7bb3db":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"2db8da778bc059db762a1d91f6e41624d01f0c1d":["bcbc8ed27f45a5a299f8414d7a886340ce7bb3db"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}