{"path":"lucene/expressions/src/java/org/apache/lucene/expressions/SimpleBindings#getValueSource(String).mjava","commits":[{"id":"f18d4e1cdc7330101ca433af5e8564dfd894f2bf","date":1379041877,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/SimpleBindings#getValueSource(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public ValueSource getValueSource(String name) {\n    Object o = map.get(name);\n    if (o == null) {\n      throw new IllegalArgumentException(\"Invalid reference '\" + name + \"'\");\n    } else if (o instanceof Expression) {\n      return ((Expression)o).getValueSource(this);\n    }\n    SortField field = (SortField) o;\n    switch(field.getType()) {\n      case INT:\n        return new IntFieldSource(field.getField(), (IntParser) field.getParser());\n      case LONG:\n        return new LongFieldSource(field.getField(), (LongParser) field.getParser());\n      case FLOAT:\n        return new FloatFieldSource(field.getField(), (FloatParser) field.getParser());\n      case DOUBLE:\n        return new DoubleFieldSource(field.getField(), (DoubleParser) field.getParser());\n      case SCORE:\n        return new ScoreValueSource();\n      default:\n        throw new UnsupportedOperationException(); \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f0e44787cffbb978aa2182761e3f9b184545a1e","date":1379265303,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/SimpleBindings#getValueSource(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public ValueSource getValueSource(String name) {\n    Object o = map.get(name);\n    if (o == null) {\n      throw new IllegalArgumentException(\"Invalid reference '\" + name + \"'\");\n    } else if (o instanceof Expression) {\n      return ((Expression)o).getValueSource(this);\n    }\n    SortField field = (SortField) o;\n    switch(field.getType()) {\n      case INT:\n        return new IntFieldSource(field.getField(), (IntParser) field.getParser());\n      case LONG:\n        return new LongFieldSource(field.getField(), (LongParser) field.getParser());\n      case FLOAT:\n        return new FloatFieldSource(field.getField(), (FloatParser) field.getParser());\n      case DOUBLE:\n        return new DoubleFieldSource(field.getField(), (DoubleParser) field.getParser());\n      case SCORE:\n        return new ScoreValueSource();\n      default:\n        throw new UnsupportedOperationException(); \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4a2e0e19d6ee2740632e97e6248b49b1f6df7fb","date":1379734663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/SimpleBindings#getValueSource(String).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/SimpleBindings#getValueSource(String).mjava","sourceNew":"  @Override\n  public ValueSource getValueSource(String name) {\n    Object o = map.get(name);\n    if (o == null) {\n      throw new IllegalArgumentException(\"Invalid reference '\" + name + \"'\");\n    } else if (o instanceof Expression) {\n      return ((Expression)o).getValueSource(this);\n    }\n    SortField field = (SortField) o;\n    switch(field.getType()) {\n      case INT:\n        return new IntFieldSource(field.getField(), (IntParser) field.getParser());\n      case LONG:\n        return new LongFieldSource(field.getField(), (LongParser) field.getParser());\n      case FLOAT:\n        return new FloatFieldSource(field.getField(), (FloatParser) field.getParser());\n      case DOUBLE:\n        return new DoubleFieldSource(field.getField(), (DoubleParser) field.getParser());\n      case SCORE:\n        return getScoreValueSource();\n      default:\n        throw new UnsupportedOperationException(); \n    }\n  }\n\n","sourceOld":"  @Override\n  public ValueSource getValueSource(String name) {\n    Object o = map.get(name);\n    if (o == null) {\n      throw new IllegalArgumentException(\"Invalid reference '\" + name + \"'\");\n    } else if (o instanceof Expression) {\n      return ((Expression)o).getValueSource(this);\n    }\n    SortField field = (SortField) o;\n    switch(field.getType()) {\n      case INT:\n        return new IntFieldSource(field.getField(), (IntParser) field.getParser());\n      case LONG:\n        return new LongFieldSource(field.getField(), (LongParser) field.getParser());\n      case FLOAT:\n        return new FloatFieldSource(field.getField(), (FloatParser) field.getParser());\n      case DOUBLE:\n        return new DoubleFieldSource(field.getField(), (DoubleParser) field.getParser());\n      case SCORE:\n        return new ScoreValueSource();\n      default:\n        throw new UnsupportedOperationException(); \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/SimpleBindings#getValueSource(String).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/SimpleBindings#getValueSource(String).mjava","sourceNew":"  @Override\n  public ValueSource getValueSource(String name) {\n    Object o = map.get(name);\n    if (o == null) {\n      throw new IllegalArgumentException(\"Invalid reference '\" + name + \"'\");\n    } else if (o instanceof Expression) {\n      return ((Expression)o).getValueSource(this);\n    }\n    SortField field = (SortField) o;\n    switch(field.getType()) {\n      case INT:\n        return new IntFieldSource(field.getField());\n      case LONG:\n        return new LongFieldSource(field.getField());\n      case FLOAT:\n        return new FloatFieldSource(field.getField());\n      case DOUBLE:\n        return new DoubleFieldSource(field.getField());\n      case SCORE:\n        return getScoreValueSource();\n      default:\n        throw new UnsupportedOperationException(); \n    }\n  }\n\n","sourceOld":"  @Override\n  public ValueSource getValueSource(String name) {\n    Object o = map.get(name);\n    if (o == null) {\n      throw new IllegalArgumentException(\"Invalid reference '\" + name + \"'\");\n    } else if (o instanceof Expression) {\n      return ((Expression)o).getValueSource(this);\n    }\n    SortField field = (SortField) o;\n    switch(field.getType()) {\n      case INT:\n        return new IntFieldSource(field.getField(), (IntParser) field.getParser());\n      case LONG:\n        return new LongFieldSource(field.getField(), (LongParser) field.getParser());\n      case FLOAT:\n        return new FloatFieldSource(field.getField(), (FloatParser) field.getParser());\n      case DOUBLE:\n        return new DoubleFieldSource(field.getField(), (DoubleParser) field.getParser());\n      case SCORE:\n        return getScoreValueSource();\n      default:\n        throw new UnsupportedOperationException(); \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/SimpleBindings#getValueSource(String).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/SimpleBindings#getValueSource(String).mjava","sourceNew":"  @Override\n  public ValueSource getValueSource(String name) {\n    Object o = map.get(name);\n    if (o == null) {\n      throw new IllegalArgumentException(\"Invalid reference '\" + name + \"'\");\n    } else if (o instanceof Expression) {\n      return ((Expression)o).getValueSource(this);\n    }\n    SortField field = (SortField) o;\n    switch(field.getType()) {\n      case INT:\n        return new IntFieldSource(field.getField());\n      case LONG:\n        return new LongFieldSource(field.getField());\n      case FLOAT:\n        return new FloatFieldSource(field.getField());\n      case DOUBLE:\n        return new DoubleFieldSource(field.getField());\n      case SCORE:\n        return getScoreValueSource();\n      default:\n        throw new UnsupportedOperationException(); \n    }\n  }\n\n","sourceOld":"  @Override\n  public ValueSource getValueSource(String name) {\n    Object o = map.get(name);\n    if (o == null) {\n      throw new IllegalArgumentException(\"Invalid reference '\" + name + \"'\");\n    } else if (o instanceof Expression) {\n      return ((Expression)o).getValueSource(this);\n    }\n    SortField field = (SortField) o;\n    switch(field.getType()) {\n      case INT:\n        return new IntFieldSource(field.getField(), (IntParser) field.getParser());\n      case LONG:\n        return new LongFieldSource(field.getField(), (LongParser) field.getParser());\n      case FLOAT:\n        return new FloatFieldSource(field.getField(), (FloatParser) field.getParser());\n      case DOUBLE:\n        return new DoubleFieldSource(field.getField(), (DoubleParser) field.getParser());\n      case SCORE:\n        return getScoreValueSource();\n      default:\n        throw new UnsupportedOperationException(); \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/SimpleBindings#getValueSource(String).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/SimpleBindings#getValueSource(String).mjava","sourceNew":"  @Override\n  public ValueSource getValueSource(String name) {\n    Object o = map.get(name);\n    if (o == null) {\n      throw new IllegalArgumentException(\"Invalid reference '\" + name + \"'\");\n    } else if (o instanceof Expression) {\n      return ((Expression)o).getValueSource(this);\n    }\n    SortField field = (SortField) o;\n    switch(field.getType()) {\n      case INT:\n        return new IntFieldSource(field.getField());\n      case LONG:\n        return new LongFieldSource(field.getField());\n      case FLOAT:\n        return new FloatFieldSource(field.getField());\n      case DOUBLE:\n        return new DoubleFieldSource(field.getField());\n      case SCORE:\n        return getScoreValueSource();\n      default:\n        throw new UnsupportedOperationException(); \n    }\n  }\n\n","sourceOld":"  @Override\n  public ValueSource getValueSource(String name) {\n    Object o = map.get(name);\n    if (o == null) {\n      throw new IllegalArgumentException(\"Invalid reference '\" + name + \"'\");\n    } else if (o instanceof Expression) {\n      return ((Expression)o).getValueSource(this);\n    }\n    SortField field = (SortField) o;\n    switch(field.getType()) {\n      case INT:\n        return new IntFieldSource(field.getField(), (IntParser) field.getParser());\n      case LONG:\n        return new LongFieldSource(field.getField(), (LongParser) field.getParser());\n      case FLOAT:\n        return new FloatFieldSource(field.getField(), (FloatParser) field.getParser());\n      case DOUBLE:\n        return new DoubleFieldSource(field.getField(), (DoubleParser) field.getParser());\n      case SCORE:\n        return getScoreValueSource();\n      default:\n        throw new UnsupportedOperationException(); \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6aa541ae5bb3c0260e1c263d6897a7925fa00c","date":1404947938,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/SimpleBindings#getValueSource(String).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/SimpleBindings#getValueSource(String).mjava","sourceNew":"  @Override\n  public ValueSource getValueSource(String name) {\n    Object o = map.get(name);\n    if (o == null) {\n      throw new IllegalArgumentException(\"Invalid reference '\" + name + \"'\");\n    } else if (o instanceof Expression) {\n      return ((Expression)o).getValueSource(this);\n    } else if (o instanceof ValueSource) {\n      return ((ValueSource)o);\n    }\n    SortField field = (SortField) o;\n    switch(field.getType()) {\n      case INT:\n        return new IntFieldSource(field.getField());\n      case LONG:\n        return new LongFieldSource(field.getField());\n      case FLOAT:\n        return new FloatFieldSource(field.getField());\n      case DOUBLE:\n        return new DoubleFieldSource(field.getField());\n      case SCORE:\n        return getScoreValueSource();\n      default:\n        throw new UnsupportedOperationException(); \n    }\n  }\n\n","sourceOld":"  @Override\n  public ValueSource getValueSource(String name) {\n    Object o = map.get(name);\n    if (o == null) {\n      throw new IllegalArgumentException(\"Invalid reference '\" + name + \"'\");\n    } else if (o instanceof Expression) {\n      return ((Expression)o).getValueSource(this);\n    }\n    SortField field = (SortField) o;\n    switch(field.getType()) {\n      case INT:\n        return new IntFieldSource(field.getField());\n      case LONG:\n        return new LongFieldSource(field.getField());\n      case FLOAT:\n        return new FloatFieldSource(field.getField());\n      case DOUBLE:\n        return new DoubleFieldSource(field.getField());\n      case SCORE:\n        return getScoreValueSource();\n      default:\n        throw new UnsupportedOperationException(); \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ae1ad302fc92a61505409a38838f2b1a4a2b092","date":1483787106,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/SimpleBindings#getDoubleValuesSource(String).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/SimpleBindings#getValueSource(String).mjava","sourceNew":"  @Override\n  public DoubleValuesSource getDoubleValuesSource(String name) {\n    Object o = map.get(name);\n    if (o == null) {\n      throw new IllegalArgumentException(\"Invalid reference '\" + name + \"'\");\n    } else if (o instanceof Expression) {\n      return ((Expression)o).getDoubleValuesSource(this);\n    } else if (o instanceof DoubleValuesSource) {\n      return ((DoubleValuesSource) o);\n    }\n    SortField field = (SortField) o;\n    switch(field.getType()) {\n      case INT:\n        return DoubleValuesSource.fromIntField(field.getField());\n      case LONG:\n        return DoubleValuesSource.fromLongField(field.getField());\n      case FLOAT:\n        return DoubleValuesSource.fromFloatField(field.getField());\n      case DOUBLE:\n        return DoubleValuesSource.fromDoubleField(field.getField());\n      case SCORE:\n        return DoubleValuesSource.SCORES;\n      default:\n        throw new UnsupportedOperationException(); \n    }\n  }\n\n","sourceOld":"  @Override\n  public ValueSource getValueSource(String name) {\n    Object o = map.get(name);\n    if (o == null) {\n      throw new IllegalArgumentException(\"Invalid reference '\" + name + \"'\");\n    } else if (o instanceof Expression) {\n      return ((Expression)o).getValueSource(this);\n    } else if (o instanceof ValueSource) {\n      return ((ValueSource)o);\n    }\n    SortField field = (SortField) o;\n    switch(field.getType()) {\n      case INT:\n        return new IntFieldSource(field.getField());\n      case LONG:\n        return new LongFieldSource(field.getField());\n      case FLOAT:\n        return new FloatFieldSource(field.getField());\n      case DOUBLE:\n        return new DoubleFieldSource(field.getField());\n      case SCORE:\n        return getScoreValueSource();\n      default:\n        throw new UnsupportedOperationException(); \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/SimpleBindings#getDoubleValuesSource(String).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/SimpleBindings#getValueSource(String).mjava","sourceNew":"  @Override\n  public DoubleValuesSource getDoubleValuesSource(String name) {\n    Object o = map.get(name);\n    if (o == null) {\n      throw new IllegalArgumentException(\"Invalid reference '\" + name + \"'\");\n    } else if (o instanceof Expression) {\n      return ((Expression)o).getDoubleValuesSource(this);\n    } else if (o instanceof DoubleValuesSource) {\n      return ((DoubleValuesSource) o);\n    }\n    SortField field = (SortField) o;\n    switch(field.getType()) {\n      case INT:\n        return DoubleValuesSource.fromIntField(field.getField());\n      case LONG:\n        return DoubleValuesSource.fromLongField(field.getField());\n      case FLOAT:\n        return DoubleValuesSource.fromFloatField(field.getField());\n      case DOUBLE:\n        return DoubleValuesSource.fromDoubleField(field.getField());\n      case SCORE:\n        return DoubleValuesSource.SCORES;\n      default:\n        throw new UnsupportedOperationException(); \n    }\n  }\n\n","sourceOld":"  @Override\n  public ValueSource getValueSource(String name) {\n    Object o = map.get(name);\n    if (o == null) {\n      throw new IllegalArgumentException(\"Invalid reference '\" + name + \"'\");\n    } else if (o instanceof Expression) {\n      return ((Expression)o).getValueSource(this);\n    } else if (o instanceof ValueSource) {\n      return ((ValueSource)o);\n    }\n    SortField field = (SortField) o;\n    switch(field.getType()) {\n      case INT:\n        return new IntFieldSource(field.getField());\n      case LONG:\n        return new LongFieldSource(field.getField());\n      case FLOAT:\n        return new FloatFieldSource(field.getField());\n      case DOUBLE:\n        return new DoubleFieldSource(field.getField());\n      case SCORE:\n        return getScoreValueSource();\n      default:\n        throw new UnsupportedOperationException(); \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c4a2e0e19d6ee2740632e97e6248b49b1f6df7fb":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"f18d4e1cdc7330101ca433af5e8564dfd894f2bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["c4a2e0e19d6ee2740632e97e6248b49b1f6df7fb","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7ae1ad302fc92a61505409a38838f2b1a4a2b092":["5b6aa541ae5bb3c0260e1c263d6897a7925fa00c"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["c4a2e0e19d6ee2740632e97e6248b49b1f6df7fb"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["5b6aa541ae5bb3c0260e1c263d6897a7925fa00c","7ae1ad302fc92a61505409a38838f2b1a4a2b092"],"5b6aa541ae5bb3c0260e1c263d6897a7925fa00c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"56572ec06f1407c066d6b7399413178b33176cd8":["c4a2e0e19d6ee2740632e97e6248b49b1f6df7fb","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7ae1ad302fc92a61505409a38838f2b1a4a2b092"],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f18d4e1cdc7330101ca433af5e8564dfd894f2bf"]},"commit2Childs":{"c4a2e0e19d6ee2740632e97e6248b49b1f6df7fb":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"f18d4e1cdc7330101ca433af5e8564dfd894f2bf":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["5b6aa541ae5bb3c0260e1c263d6897a7925fa00c","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f18d4e1cdc7330101ca433af5e8564dfd894f2bf","5f0e44787cffbb978aa2182761e3f9b184545a1e"],"7ae1ad302fc92a61505409a38838f2b1a4a2b092":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"5b6aa541ae5bb3c0260e1c263d6897a7925fa00c":["7ae1ad302fc92a61505409a38838f2b1a4a2b092","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["c4a2e0e19d6ee2740632e97e6248b49b1f6df7fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}