{"path":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResultsBody(ResultContext,JavaBinCodec).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResultsBody(ResultContext,JavaBinCodec).mjava","pathOld":"solr/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResultsBody(ResultContext,JavaBinCodec).mjava","sourceNew":"    protected void writeResultsBody( ResultContext res, JavaBinCodec codec ) throws IOException \n    {\n      DocList ids = res.docs;\n      TransformContext context = new TransformContext();\n      context.query = res.query;\n      context.wantsScores = returnFields.wantsScore() && ids.hasScores();\n      \n      int sz = ids.size();\n      codec.writeTag(JavaBinCodec.ARR, sz);\n      if(searcher == null) searcher = solrQueryRequest.getSearcher();\n      if(schema == null) schema = solrQueryRequest.getSchema(); \n      \n      context.searcher = searcher;\n      DocTransformer transformer = returnFields.getTransformer();\n      if( transformer != null ) {\n        transformer.setContext( context );\n      }\n      \n      Set<String> fnames = returnFields.getLuceneFieldNames();\n      context.iterator = ids.iterator();\n      for (int i = 0; i < sz; i++) {\n        int id = context.iterator.nextDoc();\n        Document doc = searcher.doc(id, fnames);\n        SolrDocument sdoc = getDoc(doc);\n        if( transformer != null ) {\n          transformer.transform(sdoc, id );\n        }\n        codec.writeSolrDocument(sdoc);\n      }\n      if( transformer != null ) {\n        transformer.setContext( null );\n      }\n    }\n\n","sourceOld":"    protected void writeResultsBody( ResultContext res, JavaBinCodec codec ) throws IOException \n    {\n      DocList ids = res.docs;\n      TransformContext context = new TransformContext();\n      context.query = res.query;\n      context.wantsScores = returnFields.wantsScore() && ids.hasScores();\n      \n      int sz = ids.size();\n      codec.writeTag(JavaBinCodec.ARR, sz);\n      if(searcher == null) searcher = solrQueryRequest.getSearcher();\n      if(schema == null) schema = solrQueryRequest.getSchema(); \n      \n      context.searcher = searcher;\n      DocTransformer transformer = returnFields.getTransformer();\n      if( transformer != null ) {\n        transformer.setContext( context );\n      }\n      \n      Set<String> fnames = returnFields.getLuceneFieldNames();\n      context.iterator = ids.iterator();\n      for (int i = 0; i < sz; i++) {\n        int id = context.iterator.nextDoc();\n        Document doc = searcher.doc(id, fnames);\n        SolrDocument sdoc = getDoc(doc);\n        if( transformer != null ) {\n          transformer.transform(sdoc, id );\n        }\n        codec.writeSolrDocument(sdoc);\n      }\n      if( transformer != null ) {\n        transformer.setContext( null );\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResultsBody(ResultContext,JavaBinCodec).mjava","pathOld":"solr/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResultsBody(ResultContext,JavaBinCodec).mjava","sourceNew":"    protected void writeResultsBody( ResultContext res, JavaBinCodec codec ) throws IOException \n    {\n      DocList ids = res.docs;\n      TransformContext context = new TransformContext();\n      context.query = res.query;\n      context.wantsScores = returnFields.wantsScore() && ids.hasScores();\n      \n      int sz = ids.size();\n      codec.writeTag(JavaBinCodec.ARR, sz);\n      if(searcher == null) searcher = solrQueryRequest.getSearcher();\n      if(schema == null) schema = solrQueryRequest.getSchema(); \n      \n      context.searcher = searcher;\n      DocTransformer transformer = returnFields.getTransformer();\n      if( transformer != null ) {\n        transformer.setContext( context );\n      }\n      \n      Set<String> fnames = returnFields.getLuceneFieldNames();\n      context.iterator = ids.iterator();\n      for (int i = 0; i < sz; i++) {\n        int id = context.iterator.nextDoc();\n        Document doc = searcher.doc(id, fnames);\n        SolrDocument sdoc = getDoc(doc);\n        if( transformer != null ) {\n          transformer.transform(sdoc, id );\n        }\n        codec.writeSolrDocument(sdoc);\n      }\n      if( transformer != null ) {\n        transformer.setContext( null );\n      }\n    }\n\n","sourceOld":"    protected void writeResultsBody( ResultContext res, JavaBinCodec codec ) throws IOException \n    {\n      DocList ids = res.docs;\n      TransformContext context = new TransformContext();\n      context.query = res.query;\n      context.wantsScores = returnFields.wantsScore() && ids.hasScores();\n      \n      int sz = ids.size();\n      codec.writeTag(JavaBinCodec.ARR, sz);\n      if(searcher == null) searcher = solrQueryRequest.getSearcher();\n      if(schema == null) schema = solrQueryRequest.getSchema(); \n      \n      context.searcher = searcher;\n      DocTransformer transformer = returnFields.getTransformer();\n      if( transformer != null ) {\n        transformer.setContext( context );\n      }\n      \n      Set<String> fnames = returnFields.getLuceneFieldNames();\n      context.iterator = ids.iterator();\n      for (int i = 0; i < sz; i++) {\n        int id = context.iterator.nextDoc();\n        Document doc = searcher.doc(id, fnames);\n        SolrDocument sdoc = getDoc(doc);\n        if( transformer != null ) {\n          transformer.transform(sdoc, id );\n        }\n        codec.writeSolrDocument(sdoc);\n      }\n      if( transformer != null ) {\n        transformer.setContext( null );\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResultsBody(ResultContext,JavaBinCodec).mjava","pathOld":"solr/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResultsBody(ResultContext,JavaBinCodec).mjava","sourceNew":"    protected void writeResultsBody( ResultContext res, JavaBinCodec codec ) throws IOException \n    {\n      DocList ids = res.docs;\n      TransformContext context = new TransformContext();\n      context.query = res.query;\n      context.wantsScores = returnFields.wantsScore() && ids.hasScores();\n      \n      int sz = ids.size();\n      codec.writeTag(JavaBinCodec.ARR, sz);\n      if(searcher == null) searcher = solrQueryRequest.getSearcher();\n      if(schema == null) schema = solrQueryRequest.getSchema(); \n      \n      context.searcher = searcher;\n      DocTransformer transformer = returnFields.getTransformer();\n      if( transformer != null ) {\n        transformer.setContext( context );\n      }\n      \n      Set<String> fnames = returnFields.getLuceneFieldNames();\n      context.iterator = ids.iterator();\n      for (int i = 0; i < sz; i++) {\n        int id = context.iterator.nextDoc();\n        Document doc = searcher.doc(id, fnames);\n        SolrDocument sdoc = getDoc(doc);\n        if( transformer != null ) {\n          transformer.transform(sdoc, id );\n        }\n        codec.writeSolrDocument(sdoc);\n      }\n      if( transformer != null ) {\n        transformer.setContext( null );\n      }\n    }\n\n","sourceOld":"    protected void writeResultsBody( ResultContext res, JavaBinCodec codec ) throws IOException \n    {\n      DocList ids = res.docs;\n      TransformContext context = new TransformContext();\n      context.query = res.query;\n      context.wantsScores = returnFields.wantsScore() && ids.hasScores();\n      \n      int sz = ids.size();\n      codec.writeTag(JavaBinCodec.ARR, sz);\n      if(searcher == null) searcher = solrQueryRequest.getSearcher();\n      if(schema == null) schema = solrQueryRequest.getSchema(); \n      \n      context.searcher = searcher;\n      DocTransformer transformer = returnFields.getTransformer();\n      if( transformer != null ) {\n        transformer.setContext( context );\n      }\n      \n      Set<String> fnames = returnFields.getLuceneFieldNames();\n      context.iterator = ids.iterator();\n      for (int i = 0; i < sz; i++) {\n        int id = context.iterator.nextDoc();\n        Document doc = searcher.doc(id, fnames);\n        SolrDocument sdoc = getDoc(doc);\n        if( transformer != null ) {\n          transformer.transform(sdoc, id );\n        }\n        codec.writeSolrDocument(sdoc);\n      }\n      if( transformer != null ) {\n        transformer.setContext( null );\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b68df8b95f3ea758a8dc21cb20a50a01db973e8e","date":1321650433,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResultsBody(ResultContext,JavaBinCodec).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResultsBody(ResultContext,JavaBinCodec).mjava","sourceNew":"    protected void writeResultsBody( ResultContext res, JavaBinCodec codec ) throws IOException \n    {\n      DocList ids = res.docs;\n      int sz = ids.size();\n      codec.writeTag(JavaBinCodec.ARR, sz);\n      if(searcher == null) searcher = solrQueryRequest.getSearcher();\n      if(schema == null) schema = solrQueryRequest.getSchema();\n\n      DocTransformer transformer = returnFields.getTransformer();\n      TransformContext context = new TransformContext();\n      context.query = res.query;\n      context.wantsScores = returnFields.wantsScore() && ids.hasScores();\n      context.req = solrQueryRequest;\n      context.searcher = searcher;\n      if( transformer != null ) {\n        transformer.setContext( context );\n      }\n      \n      Set<String> fnames = returnFields.getLuceneFieldNames();\n      context.iterator = ids.iterator();\n      for (int i = 0; i < sz; i++) {\n        int id = context.iterator.nextDoc();\n        Document doc = searcher.doc(id, fnames);\n        SolrDocument sdoc = getDoc(doc);\n        if( transformer != null ) {\n          transformer.transform(sdoc, id);\n        }\n        codec.writeSolrDocument(sdoc);\n      }\n      if( transformer != null ) {\n        transformer.setContext( null );\n      }\n    }\n\n","sourceOld":"    protected void writeResultsBody( ResultContext res, JavaBinCodec codec ) throws IOException \n    {\n      DocList ids = res.docs;\n      TransformContext context = new TransformContext();\n      context.query = res.query;\n      context.wantsScores = returnFields.wantsScore() && ids.hasScores();\n      \n      int sz = ids.size();\n      codec.writeTag(JavaBinCodec.ARR, sz);\n      if(searcher == null) searcher = solrQueryRequest.getSearcher();\n      if(schema == null) schema = solrQueryRequest.getSchema(); \n      \n      context.searcher = searcher;\n      DocTransformer transformer = returnFields.getTransformer();\n      if( transformer != null ) {\n        transformer.setContext( context );\n      }\n      \n      Set<String> fnames = returnFields.getLuceneFieldNames();\n      context.iterator = ids.iterator();\n      for (int i = 0; i < sz; i++) {\n        int id = context.iterator.nextDoc();\n        Document doc = searcher.doc(id, fnames);\n        SolrDocument sdoc = getDoc(doc);\n        if( transformer != null ) {\n          transformer.transform(sdoc, id );\n        }\n        codec.writeSolrDocument(sdoc);\n      }\n      if( transformer != null ) {\n        transformer.setContext( null );\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a7e4907084808af8fdb14b9809e6dceaccf6867b","date":1343473006,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResultsBody(ResultContext,JavaBinCodec).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResultsBody(ResultContext,JavaBinCodec).mjava","sourceNew":"    protected void writeResultsBody( ResultContext res, JavaBinCodec codec ) throws IOException \n    {\n      DocList ids = res.docs;\n      int sz = ids.size();\n      codec.writeTag(JavaBinCodec.ARR, sz);\n      if(searcher == null) searcher = solrQueryRequest.getSearcher();\n      if(schema == null) schema = solrQueryRequest.getSchema();\n\n      DocTransformer transformer = returnFields.getTransformer();\n      TransformContext context = new TransformContext();\n      context.query = res.query;\n      context.wantsScores = returnFields.wantsScore() && ids.hasScores();\n      context.req = solrQueryRequest;\n      context.searcher = searcher;\n      if( transformer != null ) {\n        transformer.setContext( context );\n      }\n      \n      Set<String> fnames = returnFields.getLuceneFieldNames();\n      context.iterator = ids.iterator();\n      for (int i = 0; i < sz; i++) {\n        int id = context.iterator.nextDoc();\n        StoredDocument doc = searcher.doc(id, fnames);\n        SolrDocument sdoc = getDoc(doc);\n        if( transformer != null ) {\n          transformer.transform(sdoc, id);\n        }\n        codec.writeSolrDocument(sdoc);\n      }\n      if( transformer != null ) {\n        transformer.setContext( null );\n      }\n    }\n\n","sourceOld":"    protected void writeResultsBody( ResultContext res, JavaBinCodec codec ) throws IOException \n    {\n      DocList ids = res.docs;\n      int sz = ids.size();\n      codec.writeTag(JavaBinCodec.ARR, sz);\n      if(searcher == null) searcher = solrQueryRequest.getSearcher();\n      if(schema == null) schema = solrQueryRequest.getSchema();\n\n      DocTransformer transformer = returnFields.getTransformer();\n      TransformContext context = new TransformContext();\n      context.query = res.query;\n      context.wantsScores = returnFields.wantsScore() && ids.hasScores();\n      context.req = solrQueryRequest;\n      context.searcher = searcher;\n      if( transformer != null ) {\n        transformer.setContext( context );\n      }\n      \n      Set<String> fnames = returnFields.getLuceneFieldNames();\n      context.iterator = ids.iterator();\n      for (int i = 0; i < sz; i++) {\n        int id = context.iterator.nextDoc();\n        Document doc = searcher.doc(id, fnames);\n        SolrDocument sdoc = getDoc(doc);\n        if( transformer != null ) {\n          transformer.transform(sdoc, id);\n        }\n        codec.writeSolrDocument(sdoc);\n      }\n      if( transformer != null ) {\n        transformer.setContext( null );\n      }\n    }\n\n","bugFix":null,"bugIntro":["204c8bd48c409f38fbe240108b1155caede6962c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResultsBody(ResultContext,JavaBinCodec).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResultsBody(ResultContext,JavaBinCodec).mjava","sourceNew":"    protected void writeResultsBody( ResultContext res, JavaBinCodec codec ) throws IOException \n    {\n      DocList ids = res.docs;\n      int sz = ids.size();\n      codec.writeTag(JavaBinCodec.ARR, sz);\n      if(searcher == null) searcher = solrQueryRequest.getSearcher();\n      if(schema == null) schema = solrQueryRequest.getSchema();\n\n      DocTransformer transformer = returnFields.getTransformer();\n      TransformContext context = new TransformContext();\n      context.query = res.query;\n      context.wantsScores = returnFields.wantsScore() && ids.hasScores();\n      context.req = solrQueryRequest;\n      context.searcher = searcher;\n      if( transformer != null ) {\n        transformer.setContext( context );\n      }\n      \n      Set<String> fnames = returnFields.getLuceneFieldNames();\n      context.iterator = ids.iterator();\n      for (int i = 0; i < sz; i++) {\n        int id = context.iterator.nextDoc();\n        StoredDocument doc = searcher.doc(id, fnames);\n        SolrDocument sdoc = getDoc(doc);\n        if( transformer != null ) {\n          transformer.transform(sdoc, id);\n        }\n        codec.writeSolrDocument(sdoc);\n      }\n      if( transformer != null ) {\n        transformer.setContext( null );\n      }\n    }\n\n","sourceOld":"    protected void writeResultsBody( ResultContext res, JavaBinCodec codec ) throws IOException \n    {\n      DocList ids = res.docs;\n      int sz = ids.size();\n      codec.writeTag(JavaBinCodec.ARR, sz);\n      if(searcher == null) searcher = solrQueryRequest.getSearcher();\n      if(schema == null) schema = solrQueryRequest.getSchema();\n\n      DocTransformer transformer = returnFields.getTransformer();\n      TransformContext context = new TransformContext();\n      context.query = res.query;\n      context.wantsScores = returnFields.wantsScore() && ids.hasScores();\n      context.req = solrQueryRequest;\n      context.searcher = searcher;\n      if( transformer != null ) {\n        transformer.setContext( context );\n      }\n      \n      Set<String> fnames = returnFields.getLuceneFieldNames();\n      context.iterator = ids.iterator();\n      for (int i = 0; i < sz; i++) {\n        int id = context.iterator.nextDoc();\n        Document doc = searcher.doc(id, fnames);\n        SolrDocument sdoc = getDoc(doc);\n        if( transformer != null ) {\n          transformer.transform(sdoc, id);\n        }\n        codec.writeSolrDocument(sdoc);\n      }\n      if( transformer != null ) {\n        transformer.setContext( null );\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResultsBody(ResultContext,JavaBinCodec).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResultsBody(ResultContext,JavaBinCodec).mjava","sourceNew":"    protected void writeResultsBody( ResultContext res, JavaBinCodec codec ) throws IOException \n    {\n      DocList ids = res.docs;\n      int sz = ids.size();\n      codec.writeTag(JavaBinCodec.ARR, sz);\n      if(searcher == null) searcher = solrQueryRequest.getSearcher();\n      if(schema == null) schema = solrQueryRequest.getSchema();\n\n      DocTransformer transformer = returnFields.getTransformer();\n      TransformContext context = new TransformContext();\n      context.query = res.query;\n      context.wantsScores = returnFields.wantsScore() && ids.hasScores();\n      context.req = solrQueryRequest;\n      context.searcher = searcher;\n      if( transformer != null ) {\n        transformer.setContext( context );\n      }\n      \n      Set<String> fnames = returnFields.getLuceneFieldNames();\n      context.iterator = ids.iterator();\n      for (int i = 0; i < sz; i++) {\n        int id = context.iterator.nextDoc();\n        StoredDocument doc = searcher.doc(id, fnames);\n        SolrDocument sdoc = getDoc(doc);\n        if( transformer != null ) {\n          transformer.transform(sdoc, id);\n        }\n        codec.writeSolrDocument(sdoc);\n      }\n      if( transformer != null ) {\n        transformer.setContext( null );\n      }\n    }\n\n","sourceOld":"    protected void writeResultsBody( ResultContext res, JavaBinCodec codec ) throws IOException \n    {\n      DocList ids = res.docs;\n      int sz = ids.size();\n      codec.writeTag(JavaBinCodec.ARR, sz);\n      if(searcher == null) searcher = solrQueryRequest.getSearcher();\n      if(schema == null) schema = solrQueryRequest.getSchema();\n\n      DocTransformer transformer = returnFields.getTransformer();\n      TransformContext context = new TransformContext();\n      context.query = res.query;\n      context.wantsScores = returnFields.wantsScore() && ids.hasScores();\n      context.req = solrQueryRequest;\n      context.searcher = searcher;\n      if( transformer != null ) {\n        transformer.setContext( context );\n      }\n      \n      Set<String> fnames = returnFields.getLuceneFieldNames();\n      context.iterator = ids.iterator();\n      for (int i = 0; i < sz; i++) {\n        int id = context.iterator.nextDoc();\n        StoredDocument doc = searcher.doc(id, fnames);\n        SolrDocument sdoc = getDoc(doc);\n        if( transformer != null ) {\n          transformer.transform(sdoc, id);\n        }\n        codec.writeSolrDocument(sdoc);\n      }\n      if( transformer != null ) {\n        transformer.setContext( null );\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResultsBody(ResultContext,JavaBinCodec).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResultsBody(ResultContext,JavaBinCodec).mjava","sourceNew":"    protected void writeResultsBody( ResultContext res, JavaBinCodec codec ) throws IOException \n    {\n      DocList ids = res.docs;\n      int sz = ids.size();\n      codec.writeTag(JavaBinCodec.ARR, sz);\n      if(searcher == null) searcher = solrQueryRequest.getSearcher();\n      if(schema == null) schema = solrQueryRequest.getSchema();\n\n      DocTransformer transformer = returnFields.getTransformer();\n      TransformContext context = new TransformContext();\n      context.query = res.query;\n      context.wantsScores = returnFields.wantsScore() && ids.hasScores();\n      context.req = solrQueryRequest;\n      context.searcher = searcher;\n      if( transformer != null ) {\n        transformer.setContext( context );\n      }\n      \n      Set<String> fnames = returnFields.getLuceneFieldNames();\n      context.iterator = ids.iterator();\n      for (int i = 0; i < sz; i++) {\n        int id = context.iterator.nextDoc();\n        StoredDocument doc = searcher.doc(id, fnames);\n        SolrDocument sdoc = getDoc(doc);\n        if( transformer != null ) {\n          transformer.transform(sdoc, id);\n        }\n        codec.writeSolrDocument(sdoc);\n      }\n      if( transformer != null ) {\n        transformer.setContext( null );\n      }\n    }\n\n","sourceOld":"    protected void writeResultsBody( ResultContext res, JavaBinCodec codec ) throws IOException \n    {\n      DocList ids = res.docs;\n      int sz = ids.size();\n      codec.writeTag(JavaBinCodec.ARR, sz);\n      if(searcher == null) searcher = solrQueryRequest.getSearcher();\n      if(schema == null) schema = solrQueryRequest.getSchema();\n\n      DocTransformer transformer = returnFields.getTransformer();\n      TransformContext context = new TransformContext();\n      context.query = res.query;\n      context.wantsScores = returnFields.wantsScore() && ids.hasScores();\n      context.req = solrQueryRequest;\n      context.searcher = searcher;\n      if( transformer != null ) {\n        transformer.setContext( context );\n      }\n      \n      Set<String> fnames = returnFields.getLuceneFieldNames();\n      context.iterator = ids.iterator();\n      for (int i = 0; i < sz; i++) {\n        int id = context.iterator.nextDoc();\n        StoredDocument doc = searcher.doc(id, fnames);\n        SolrDocument sdoc = getDoc(doc);\n        if( transformer != null ) {\n          transformer.transform(sdoc, id);\n        }\n        codec.writeSolrDocument(sdoc);\n      }\n      if( transformer != null ) {\n        transformer.setContext( null );\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"204c8bd48c409f38fbe240108b1155caede6962c","date":1405927524,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResultsBody(ResultContext,JavaBinCodec).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResultsBody(ResultContext,JavaBinCodec).mjava","sourceNew":"    protected void writeResultsBody( ResultContext res, JavaBinCodec codec ) throws IOException \n    {\n      DocList ids = res.docs;\n      int sz = ids.size();\n      codec.writeTag(JavaBinCodec.ARR, sz);\n      if(searcher == null) searcher = solrQueryRequest.getSearcher();\n      if(schema == null) schema = solrQueryRequest.getSchema();\n\n      DocTransformer transformer = returnFields.getTransformer();\n      TransformContext context = new TransformContext();\n      context.query = res.query;\n      context.wantsScores = returnFields.wantsScore() && ids.hasScores();\n      context.req = solrQueryRequest;\n      context.searcher = searcher;\n      if( transformer != null ) {\n        transformer.setContext( context );\n      }\n      \n      Set<String> fnames = returnFields.getLuceneFieldNames();\n      boolean onlyPseudoFields = (fnames == null && !returnFields.wantsAllFields())\n          || (fnames != null && fnames.size() == 1 && SolrReturnFields.SCORE.equals(fnames.iterator().next()));\n      context.iterator = ids.iterator();\n      for (int i = 0; i < sz; i++) {\n        int id = context.iterator.nextDoc();\n        SolrDocument sdoc;\n        if (onlyPseudoFields) {\n          // no need to get stored fields of the document, see SOLR-5968\n          sdoc = new SolrDocument();\n        } else {\n          StoredDocument doc = searcher.doc(id, fnames);\n          sdoc = getDoc(doc);\n        }\n        if( transformer != null ) {\n          transformer.transform(sdoc, id);\n        }\n        codec.writeSolrDocument(sdoc);\n      }\n      if( transformer != null ) {\n        transformer.setContext( null );\n      }\n    }\n\n","sourceOld":"    protected void writeResultsBody( ResultContext res, JavaBinCodec codec ) throws IOException \n    {\n      DocList ids = res.docs;\n      int sz = ids.size();\n      codec.writeTag(JavaBinCodec.ARR, sz);\n      if(searcher == null) searcher = solrQueryRequest.getSearcher();\n      if(schema == null) schema = solrQueryRequest.getSchema();\n\n      DocTransformer transformer = returnFields.getTransformer();\n      TransformContext context = new TransformContext();\n      context.query = res.query;\n      context.wantsScores = returnFields.wantsScore() && ids.hasScores();\n      context.req = solrQueryRequest;\n      context.searcher = searcher;\n      if( transformer != null ) {\n        transformer.setContext( context );\n      }\n      \n      Set<String> fnames = returnFields.getLuceneFieldNames();\n      context.iterator = ids.iterator();\n      for (int i = 0; i < sz; i++) {\n        int id = context.iterator.nextDoc();\n        StoredDocument doc = searcher.doc(id, fnames);\n        SolrDocument sdoc = getDoc(doc);\n        if( transformer != null ) {\n          transformer.transform(sdoc, id);\n        }\n        codec.writeSolrDocument(sdoc);\n      }\n      if( transformer != null ) {\n        transformer.setContext( null );\n      }\n    }\n\n","bugFix":["6aedf81f068e430dec27d94310415cc6ff52731c","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"bugIntro":["1bc2416ffb7e5672bc209e3c8f14a031844d15ef"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1bc2416ffb7e5672bc209e3c8f14a031844d15ef","date":1410464404,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResultsBody(ResultContext,JavaBinCodec).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResultsBody(ResultContext,JavaBinCodec).mjava","sourceNew":"    protected void writeResultsBody( ResultContext res, JavaBinCodec codec ) throws IOException \n    {\n      DocList ids = res.docs;\n      int sz = ids.size();\n      codec.writeTag(JavaBinCodec.ARR, sz);\n      if(searcher == null) searcher = solrQueryRequest.getSearcher();\n      if(schema == null) schema = solrQueryRequest.getSchema();\n\n      DocTransformer transformer = returnFields.getTransformer();\n      TransformContext context = new TransformContext();\n      context.query = res.query;\n      context.wantsScores = returnFields.wantsScore() && ids.hasScores();\n      context.req = solrQueryRequest;\n      context.searcher = searcher;\n      if( transformer != null ) {\n        transformer.setContext( context );\n      }\n      \n      Set<String> fnames = returnFields.getLuceneFieldNames();\n      boolean onlyPseudoFields = (fnames == null && !returnFields.wantsAllFields() && !returnFields.hasPatternMatching())\n          || (fnames != null && fnames.size() == 1 && SolrReturnFields.SCORE.equals(fnames.iterator().next()));\n      context.iterator = ids.iterator();\n      for (int i = 0; i < sz; i++) {\n        int id = context.iterator.nextDoc();\n        SolrDocument sdoc;\n        if (onlyPseudoFields) {\n          // no need to get stored fields of the document, see SOLR-5968\n          sdoc = new SolrDocument();\n        } else {\n          StoredDocument doc = searcher.doc(id, fnames);\n          sdoc = getDoc(doc);\n        }\n        if( transformer != null ) {\n          transformer.transform(sdoc, id);\n        }\n        codec.writeSolrDocument(sdoc);\n      }\n      if( transformer != null ) {\n        transformer.setContext( null );\n      }\n    }\n\n","sourceOld":"    protected void writeResultsBody( ResultContext res, JavaBinCodec codec ) throws IOException \n    {\n      DocList ids = res.docs;\n      int sz = ids.size();\n      codec.writeTag(JavaBinCodec.ARR, sz);\n      if(searcher == null) searcher = solrQueryRequest.getSearcher();\n      if(schema == null) schema = solrQueryRequest.getSchema();\n\n      DocTransformer transformer = returnFields.getTransformer();\n      TransformContext context = new TransformContext();\n      context.query = res.query;\n      context.wantsScores = returnFields.wantsScore() && ids.hasScores();\n      context.req = solrQueryRequest;\n      context.searcher = searcher;\n      if( transformer != null ) {\n        transformer.setContext( context );\n      }\n      \n      Set<String> fnames = returnFields.getLuceneFieldNames();\n      boolean onlyPseudoFields = (fnames == null && !returnFields.wantsAllFields())\n          || (fnames != null && fnames.size() == 1 && SolrReturnFields.SCORE.equals(fnames.iterator().next()));\n      context.iterator = ids.iterator();\n      for (int i = 0; i < sz; i++) {\n        int id = context.iterator.nextDoc();\n        SolrDocument sdoc;\n        if (onlyPseudoFields) {\n          // no need to get stored fields of the document, see SOLR-5968\n          sdoc = new SolrDocument();\n        } else {\n          StoredDocument doc = searcher.doc(id, fnames);\n          sdoc = getDoc(doc);\n        }\n        if( transformer != null ) {\n          transformer.transform(sdoc, id);\n        }\n        codec.writeSolrDocument(sdoc);\n      }\n      if( transformer != null ) {\n        transformer.setContext( null );\n      }\n    }\n\n","bugFix":["204c8bd48c409f38fbe240108b1155caede6962c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9","date":1434467834,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResultsBody(ResultContext,JavaBinCodec).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResultsBody(ResultContext,JavaBinCodec).mjava","sourceNew":"    protected void writeResultsBody( ResultContext res, JavaBinCodec codec ) throws IOException {\n      codec.writeTag(JavaBinCodec.ARR, res.docs.size());\n      DocsStreamer docStreamer = new DocsStreamer(res.docs,res.query, solrQueryRequest, returnFields);\n      while (docStreamer.hasNext()) {\n        SolrDocument doc = docStreamer.next();\n        codec.writeSolrDocument(doc);\n      }\n    }\n\n","sourceOld":"    protected void writeResultsBody( ResultContext res, JavaBinCodec codec ) throws IOException \n    {\n      DocList ids = res.docs;\n      int sz = ids.size();\n      codec.writeTag(JavaBinCodec.ARR, sz);\n      if(searcher == null) searcher = solrQueryRequest.getSearcher();\n      if(schema == null) schema = solrQueryRequest.getSchema();\n\n      DocTransformer transformer = returnFields.getTransformer();\n      TransformContext context = new TransformContext();\n      context.query = res.query;\n      context.wantsScores = returnFields.wantsScore() && ids.hasScores();\n      context.req = solrQueryRequest;\n      context.searcher = searcher;\n      if( transformer != null ) {\n        transformer.setContext( context );\n      }\n      \n      Set<String> fnames = returnFields.getLuceneFieldNames();\n      boolean onlyPseudoFields = (fnames == null && !returnFields.wantsAllFields() && !returnFields.hasPatternMatching())\n          || (fnames != null && fnames.size() == 1 && SolrReturnFields.SCORE.equals(fnames.iterator().next()));\n      context.iterator = ids.iterator();\n      for (int i = 0; i < sz; i++) {\n        int id = context.iterator.nextDoc();\n        SolrDocument sdoc;\n        if (onlyPseudoFields) {\n          // no need to get stored fields of the document, see SOLR-5968\n          sdoc = new SolrDocument();\n        } else {\n          StoredDocument doc = searcher.doc(id, fnames);\n          sdoc = getDoc(doc);\n        }\n        if( transformer != null ) {\n          transformer.transform(sdoc, id);\n        }\n        codec.writeSolrDocument(sdoc);\n      }\n      if( transformer != null ) {\n        transformer.setContext( null );\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc","date":1440797084,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResultsBody(ResultContext,JavaBinCodec).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResultsBody(ResultContext,JavaBinCodec).mjava","sourceNew":"    protected void writeResultsBody( ResultContext res, JavaBinCodec codec ) throws IOException {\n      codec.writeTag(JavaBinCodec.ARR, res.getDocList().size());\n      Iterator<SolrDocument> docStreamer = res.getProcessedDocuments();\n      while (docStreamer.hasNext()) {\n        SolrDocument doc = docStreamer.next();\n        codec.writeSolrDocument(doc);\n      }\n    }\n\n","sourceOld":"    protected void writeResultsBody( ResultContext res, JavaBinCodec codec ) throws IOException {\n      codec.writeTag(JavaBinCodec.ARR, res.docs.size());\n      DocsStreamer docStreamer = new DocsStreamer(res.docs,res.query, solrQueryRequest, returnFields);\n      while (docStreamer.hasNext()) {\n        SolrDocument doc = docStreamer.next();\n        codec.writeSolrDocument(doc);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["1d028314cced5858683a1bb4741423d0f934257b","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"204c8bd48c409f38fbe240108b1155caede6962c":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["1d028314cced5858683a1bb4741423d0f934257b"],"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc":["b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9"],"b68df8b95f3ea758a8dc21cb20a50a01db973e8e":["c26f00b574427b55127e869b935845554afde1fa"],"1d028314cced5858683a1bb4741423d0f934257b":["b68df8b95f3ea758a8dc21cb20a50a01db973e8e","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1bc2416ffb7e5672bc209e3c8f14a031844d15ef":["204c8bd48c409f38fbe240108b1155caede6962c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9":["1bc2416ffb7e5672bc209e3c8f14a031844d15ef"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["b68df8b95f3ea758a8dc21cb20a50a01db973e8e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c26f00b574427b55127e869b935845554afde1fa":["b68df8b95f3ea758a8dc21cb20a50a01db973e8e"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","204c8bd48c409f38fbe240108b1155caede6962c"],"204c8bd48c409f38fbe240108b1155caede6962c":["1bc2416ffb7e5672bc209e3c8f14a031844d15ef"],"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b68df8b95f3ea758a8dc21cb20a50a01db973e8e":["1d028314cced5858683a1bb4741423d0f934257b","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"1d028314cced5858683a1bb4741423d0f934257b":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"1bc2416ffb7e5672bc209e3c8f14a031844d15ef":["b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9":["7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["1d028314cced5858683a1bb4741423d0f934257b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}