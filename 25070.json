{"path":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testTooManyTransientCores().mjava","commits":[{"id":"5266ca9bc8a24a7d53dbfbe7f1d3b7e9c65e8454","date":1434515030,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testTooManyTransientCores().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testTooManyTransientCores() throws Exception {\n\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"coreLOS\", makeCorePropFile(\"coreLOS\", false, true, \"dataDir=coreLOS\"));\n    addCoreWithProps(\"coreT1\", makeCorePropFile(\"coreT1\", true, true, \"dataDir=coreT1\"));\n    addCoreWithProps(\"coreT2\", makeCorePropFile(\"coreT2\", true, true, \"dataDir=coreT2\"));\n    addCoreWithProps(\"coreT3\", makeCorePropFile(\"coreT3\", true, true, \"dataDir=coreT3\"));\n    addCoreWithProps(\"coreT4\", makeCorePropFile(\"coreT4\", true, true, \"dataDir=coreT4\"));\n    addCoreWithProps(\"coreT5\", makeCorePropFile(\"coreT5\", true, true, \"dataDir=coreT5\"));\n    addCoreWithProps(\"coreT6\", makeCorePropFile(\"coreT6\", true, true, \"dataDir=coreT6\"));\n\n    // Do this specially since we need to search.\n    final CoreContainer cc = new CoreContainer(solrHomeDirectory.getPath().toString());\n    try {\n      cc.load();\n      // Just check that the proper number of cores are loaded since making the test depend on order would be fragile\n      assertEquals(\"There should only be 3 cores loaded, coreLOS and two coreT? cores\",\n          3, cc.getCoreNames().size());\n\n      SolrCore c1 = cc.getCore(\"coreT1\");\n      assertNotNull(\"Core T1 should NOT BE NULL\", c1);\n      SolrCore c2 = cc.getCore(\"coreT2\");\n      assertNotNull(\"Core T2 should NOT BE NULL\", c2);\n      SolrCore c3 = cc.getCore(\"coreT3\");\n      assertNotNull(\"Core T3 should NOT BE NULL\", c3);\n      SolrCore c4 = cc.getCore(\"coreT4\");\n      assertNotNull(\"Core T4 should NOT BE NULL\", c4);\n      SolrCore c5 = cc.getCore(\"coreT5\");\n      assertNotNull(\"Core T5 should NOT BE NULL\", c5);\n      SolrCore c6 = cc.getCore(\"coreT6\");\n      assertNotNull(\"Core T6 should NOT BE NULL\", c6);\n\n      c1.close();\n      c2.close();\n      c3.close();\n      c4.close();\n      c5.close();\n      c6.close();\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testTooManyTransientCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testTooManyTransientCores().mjava","sourceNew":"  @Test\n  public void testTooManyTransientCores() throws Exception {\n\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"coreLOS\", makeCorePropFile(\"coreLOS\", false, true, \"dataDir=coreLOS\"));\n    addCoreWithProps(\"coreT1\", makeCorePropFile(\"coreT1\", true, true, \"dataDir=coreT1\"));\n    addCoreWithProps(\"coreT2\", makeCorePropFile(\"coreT2\", true, true, \"dataDir=coreT2\"));\n    addCoreWithProps(\"coreT3\", makeCorePropFile(\"coreT3\", true, true, \"dataDir=coreT3\"));\n    addCoreWithProps(\"coreT4\", makeCorePropFile(\"coreT4\", true, true, \"dataDir=coreT4\"));\n    addCoreWithProps(\"coreT5\", makeCorePropFile(\"coreT5\", true, true, \"dataDir=coreT5\"));\n    addCoreWithProps(\"coreT6\", makeCorePropFile(\"coreT6\", true, true, \"dataDir=coreT6\"));\n\n    // Do this specially since we need to search.\n    final CoreContainer cc = new CoreContainer(solrHomeDirectory.getPath().toString());\n    try {\n      cc.load();\n      // Just check that the proper number of cores are loaded since making the test depend on order would be fragile\n      assertEquals(\"There should only be 3 cores loaded, coreLOS and two coreT? cores\",\n          3, cc.getLoadedCoreNames().size());\n\n      SolrCore c1 = cc.getCore(\"coreT1\");\n      assertNotNull(\"Core T1 should NOT BE NULL\", c1);\n      SolrCore c2 = cc.getCore(\"coreT2\");\n      assertNotNull(\"Core T2 should NOT BE NULL\", c2);\n      SolrCore c3 = cc.getCore(\"coreT3\");\n      assertNotNull(\"Core T3 should NOT BE NULL\", c3);\n      SolrCore c4 = cc.getCore(\"coreT4\");\n      assertNotNull(\"Core T4 should NOT BE NULL\", c4);\n      SolrCore c5 = cc.getCore(\"coreT5\");\n      assertNotNull(\"Core T5 should NOT BE NULL\", c5);\n      SolrCore c6 = cc.getCore(\"coreT6\");\n      assertNotNull(\"Core T6 should NOT BE NULL\", c6);\n\n      c1.close();\n      c2.close();\n      c3.close();\n      c4.close();\n      c5.close();\n      c6.close();\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTooManyTransientCores() throws Exception {\n\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"coreLOS\", makeCorePropFile(\"coreLOS\", false, true, \"dataDir=coreLOS\"));\n    addCoreWithProps(\"coreT1\", makeCorePropFile(\"coreT1\", true, true, \"dataDir=coreT1\"));\n    addCoreWithProps(\"coreT2\", makeCorePropFile(\"coreT2\", true, true, \"dataDir=coreT2\"));\n    addCoreWithProps(\"coreT3\", makeCorePropFile(\"coreT3\", true, true, \"dataDir=coreT3\"));\n    addCoreWithProps(\"coreT4\", makeCorePropFile(\"coreT4\", true, true, \"dataDir=coreT4\"));\n    addCoreWithProps(\"coreT5\", makeCorePropFile(\"coreT5\", true, true, \"dataDir=coreT5\"));\n    addCoreWithProps(\"coreT6\", makeCorePropFile(\"coreT6\", true, true, \"dataDir=coreT6\"));\n\n    // Do this specially since we need to search.\n    final CoreContainer cc = new CoreContainer(solrHomeDirectory.getPath().toString());\n    try {\n      cc.load();\n      // Just check that the proper number of cores are loaded since making the test depend on order would be fragile\n      assertEquals(\"There should only be 3 cores loaded, coreLOS and two coreT? cores\",\n          3, cc.getCoreNames().size());\n\n      SolrCore c1 = cc.getCore(\"coreT1\");\n      assertNotNull(\"Core T1 should NOT BE NULL\", c1);\n      SolrCore c2 = cc.getCore(\"coreT2\");\n      assertNotNull(\"Core T2 should NOT BE NULL\", c2);\n      SolrCore c3 = cc.getCore(\"coreT3\");\n      assertNotNull(\"Core T3 should NOT BE NULL\", c3);\n      SolrCore c4 = cc.getCore(\"coreT4\");\n      assertNotNull(\"Core T4 should NOT BE NULL\", c4);\n      SolrCore c5 = cc.getCore(\"coreT5\");\n      assertNotNull(\"Core T5 should NOT BE NULL\", c5);\n      SolrCore c6 = cc.getCore(\"coreT6\");\n      assertNotNull(\"Core T6 should NOT BE NULL\", c6);\n\n      c1.close();\n      c2.close();\n      c3.close();\n      c4.close();\n      c5.close();\n      c6.close();\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testTooManyTransientCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testTooManyTransientCores().mjava","sourceNew":"  @Test\n  public void testTooManyTransientCores() throws Exception {\n\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"coreLOS\", makeCorePropFile(\"coreLOS\", false, true, \"dataDir=coreLOS\"));\n    addCoreWithProps(\"coreT1\", makeCorePropFile(\"coreT1\", true, true, \"dataDir=coreT1\"));\n    addCoreWithProps(\"coreT2\", makeCorePropFile(\"coreT2\", true, true, \"dataDir=coreT2\"));\n    addCoreWithProps(\"coreT3\", makeCorePropFile(\"coreT3\", true, true, \"dataDir=coreT3\"));\n    addCoreWithProps(\"coreT4\", makeCorePropFile(\"coreT4\", true, true, \"dataDir=coreT4\"));\n    addCoreWithProps(\"coreT5\", makeCorePropFile(\"coreT5\", true, true, \"dataDir=coreT5\"));\n    addCoreWithProps(\"coreT6\", makeCorePropFile(\"coreT6\", true, true, \"dataDir=coreT6\"));\n\n    // Do this specially since we need to search.\n    final CoreContainer cc = new CoreContainer(solrHomeDirectory.getPath().toString());\n    try {\n      cc.load();\n      // Just check that the proper number of cores are loaded since making the test depend on order would be fragile\n      assertEquals(\"There should only be 3 cores loaded, coreLOS and two coreT? cores\",\n          3, cc.getLoadedCoreNames().size());\n\n      SolrCore c1 = cc.getCore(\"coreT1\");\n      assertNotNull(\"Core T1 should NOT BE NULL\", c1);\n      SolrCore c2 = cc.getCore(\"coreT2\");\n      assertNotNull(\"Core T2 should NOT BE NULL\", c2);\n      SolrCore c3 = cc.getCore(\"coreT3\");\n      assertNotNull(\"Core T3 should NOT BE NULL\", c3);\n      SolrCore c4 = cc.getCore(\"coreT4\");\n      assertNotNull(\"Core T4 should NOT BE NULL\", c4);\n      SolrCore c5 = cc.getCore(\"coreT5\");\n      assertNotNull(\"Core T5 should NOT BE NULL\", c5);\n      SolrCore c6 = cc.getCore(\"coreT6\");\n      assertNotNull(\"Core T6 should NOT BE NULL\", c6);\n\n      c1.close();\n      c2.close();\n      c3.close();\n      c4.close();\n      c5.close();\n      c6.close();\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTooManyTransientCores() throws Exception {\n\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"coreLOS\", makeCorePropFile(\"coreLOS\", false, true, \"dataDir=coreLOS\"));\n    addCoreWithProps(\"coreT1\", makeCorePropFile(\"coreT1\", true, true, \"dataDir=coreT1\"));\n    addCoreWithProps(\"coreT2\", makeCorePropFile(\"coreT2\", true, true, \"dataDir=coreT2\"));\n    addCoreWithProps(\"coreT3\", makeCorePropFile(\"coreT3\", true, true, \"dataDir=coreT3\"));\n    addCoreWithProps(\"coreT4\", makeCorePropFile(\"coreT4\", true, true, \"dataDir=coreT4\"));\n    addCoreWithProps(\"coreT5\", makeCorePropFile(\"coreT5\", true, true, \"dataDir=coreT5\"));\n    addCoreWithProps(\"coreT6\", makeCorePropFile(\"coreT6\", true, true, \"dataDir=coreT6\"));\n\n    // Do this specially since we need to search.\n    final CoreContainer cc = new CoreContainer(solrHomeDirectory.getPath().toString());\n    try {\n      cc.load();\n      // Just check that the proper number of cores are loaded since making the test depend on order would be fragile\n      assertEquals(\"There should only be 3 cores loaded, coreLOS and two coreT? cores\",\n          3, cc.getCoreNames().size());\n\n      SolrCore c1 = cc.getCore(\"coreT1\");\n      assertNotNull(\"Core T1 should NOT BE NULL\", c1);\n      SolrCore c2 = cc.getCore(\"coreT2\");\n      assertNotNull(\"Core T2 should NOT BE NULL\", c2);\n      SolrCore c3 = cc.getCore(\"coreT3\");\n      assertNotNull(\"Core T3 should NOT BE NULL\", c3);\n      SolrCore c4 = cc.getCore(\"coreT4\");\n      assertNotNull(\"Core T4 should NOT BE NULL\", c4);\n      SolrCore c5 = cc.getCore(\"coreT5\");\n      assertNotNull(\"Core T5 should NOT BE NULL\", c5);\n      SolrCore c6 = cc.getCore(\"coreT6\");\n      assertNotNull(\"Core T6 should NOT BE NULL\", c6);\n\n      c1.close();\n      c2.close();\n      c3.close();\n      c4.close();\n      c5.close();\n      c6.close();\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd7a2b4785d366164d3cd69f9948de6ff34d23a1","date":1500527874,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testTooManyTransientCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testTooManyTransientCores().mjava","sourceNew":"  @Test\n  public void testTooManyTransientCores() throws Exception {\n\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"coreLOS\", makeCoreProperties(\"coreLOS\", false, true, \"dataDir=coreLOS\"));\n    addCoreWithProps(\"coreT1\", makeCoreProperties(\"coreT1\", true, true, \"dataDir=coreT1\"));\n    addCoreWithProps(\"coreT2\", makeCoreProperties(\"coreT2\", true, true, \"dataDir=coreT2\"));\n    addCoreWithProps(\"coreT3\", makeCoreProperties(\"coreT3\", true, true, \"dataDir=coreT3\"));\n    addCoreWithProps(\"coreT4\", makeCoreProperties(\"coreT4\", true, true, \"dataDir=coreT4\"));\n    addCoreWithProps(\"coreT5\", makeCoreProperties(\"coreT5\", true, true, \"dataDir=coreT5\"));\n    addCoreWithProps(\"coreT6\", makeCoreProperties(\"coreT6\", true, true, \"dataDir=coreT6\"));\n\n    // Do this specially since we need to search.\n    final CoreContainer cc = new CoreContainer(solrHomeDirectory.toString());\n    try {\n      cc.load();\n      // Just check that the proper number of cores are loaded since making the test depend on order would be fragile\n      assertEquals(\"There should only be 3 cores loaded, coreLOS and two coreT? cores\",\n          3, cc.getLoadedCoreNames().size());\n\n      SolrCore c1 = cc.getCore(\"coreT1\");\n      assertNotNull(\"Core T1 should NOT BE NULL\", c1);\n      SolrCore c2 = cc.getCore(\"coreT2\");\n      assertNotNull(\"Core T2 should NOT BE NULL\", c2);\n      SolrCore c3 = cc.getCore(\"coreT3\");\n      assertNotNull(\"Core T3 should NOT BE NULL\", c3);\n      SolrCore c4 = cc.getCore(\"coreT4\");\n      assertNotNull(\"Core T4 should NOT BE NULL\", c4);\n      SolrCore c5 = cc.getCore(\"coreT5\");\n      assertNotNull(\"Core T5 should NOT BE NULL\", c5);\n      SolrCore c6 = cc.getCore(\"coreT6\");\n      assertNotNull(\"Core T6 should NOT BE NULL\", c6);\n\n      c1.close();\n      c2.close();\n      c3.close();\n      c4.close();\n      c5.close();\n      c6.close();\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTooManyTransientCores() throws Exception {\n\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"coreLOS\", makeCorePropFile(\"coreLOS\", false, true, \"dataDir=coreLOS\"));\n    addCoreWithProps(\"coreT1\", makeCorePropFile(\"coreT1\", true, true, \"dataDir=coreT1\"));\n    addCoreWithProps(\"coreT2\", makeCorePropFile(\"coreT2\", true, true, \"dataDir=coreT2\"));\n    addCoreWithProps(\"coreT3\", makeCorePropFile(\"coreT3\", true, true, \"dataDir=coreT3\"));\n    addCoreWithProps(\"coreT4\", makeCorePropFile(\"coreT4\", true, true, \"dataDir=coreT4\"));\n    addCoreWithProps(\"coreT5\", makeCorePropFile(\"coreT5\", true, true, \"dataDir=coreT5\"));\n    addCoreWithProps(\"coreT6\", makeCorePropFile(\"coreT6\", true, true, \"dataDir=coreT6\"));\n\n    // Do this specially since we need to search.\n    final CoreContainer cc = new CoreContainer(solrHomeDirectory.getPath().toString());\n    try {\n      cc.load();\n      // Just check that the proper number of cores are loaded since making the test depend on order would be fragile\n      assertEquals(\"There should only be 3 cores loaded, coreLOS and two coreT? cores\",\n          3, cc.getLoadedCoreNames().size());\n\n      SolrCore c1 = cc.getCore(\"coreT1\");\n      assertNotNull(\"Core T1 should NOT BE NULL\", c1);\n      SolrCore c2 = cc.getCore(\"coreT2\");\n      assertNotNull(\"Core T2 should NOT BE NULL\", c2);\n      SolrCore c3 = cc.getCore(\"coreT3\");\n      assertNotNull(\"Core T3 should NOT BE NULL\", c3);\n      SolrCore c4 = cc.getCore(\"coreT4\");\n      assertNotNull(\"Core T4 should NOT BE NULL\", c4);\n      SolrCore c5 = cc.getCore(\"coreT5\");\n      assertNotNull(\"Core T5 should NOT BE NULL\", c5);\n      SolrCore c6 = cc.getCore(\"coreT6\");\n      assertNotNull(\"Core T6 should NOT BE NULL\", c6);\n\n      c1.close();\n      c2.close();\n      c3.close();\n      c4.close();\n      c5.close();\n      c6.close();\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d301cb76d81de80d07b44735622a04d49ed938eb","date":1500536382,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testTooManyTransientCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testTooManyTransientCores().mjava","sourceNew":"  @Test\n  public void testTooManyTransientCores() throws Exception {\n\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"coreLOS\", makeCoreProperties(\"coreLOS\", false, true, \"dataDir=coreLOS\"));\n    addCoreWithProps(\"coreT1\", makeCoreProperties(\"coreT1\", true, true, \"dataDir=coreT1\"));\n    addCoreWithProps(\"coreT2\", makeCoreProperties(\"coreT2\", true, true, \"dataDir=coreT2\"));\n    addCoreWithProps(\"coreT3\", makeCoreProperties(\"coreT3\", true, true, \"dataDir=coreT3\"));\n    addCoreWithProps(\"coreT4\", makeCoreProperties(\"coreT4\", true, true, \"dataDir=coreT4\"));\n    addCoreWithProps(\"coreT5\", makeCoreProperties(\"coreT5\", true, true, \"dataDir=coreT5\"));\n    addCoreWithProps(\"coreT6\", makeCoreProperties(\"coreT6\", true, true, \"dataDir=coreT6\"));\n\n    // Do this specially since we need to search.\n    final CoreContainer cc = new CoreContainer(solrHomeDirectory.toString());\n    try {\n      cc.load();\n      // Just check that the proper number of cores are loaded since making the test depend on order would be fragile\n      assertEquals(\"There should only be 3 cores loaded, coreLOS and two coreT? cores\",\n          3, cc.getLoadedCoreNames().size());\n\n      SolrCore c1 = cc.getCore(\"coreT1\");\n      assertNotNull(\"Core T1 should NOT BE NULL\", c1);\n      SolrCore c2 = cc.getCore(\"coreT2\");\n      assertNotNull(\"Core T2 should NOT BE NULL\", c2);\n      SolrCore c3 = cc.getCore(\"coreT3\");\n      assertNotNull(\"Core T3 should NOT BE NULL\", c3);\n      SolrCore c4 = cc.getCore(\"coreT4\");\n      assertNotNull(\"Core T4 should NOT BE NULL\", c4);\n      SolrCore c5 = cc.getCore(\"coreT5\");\n      assertNotNull(\"Core T5 should NOT BE NULL\", c5);\n      SolrCore c6 = cc.getCore(\"coreT6\");\n      assertNotNull(\"Core T6 should NOT BE NULL\", c6);\n\n      c1.close();\n      c2.close();\n      c3.close();\n      c4.close();\n      c5.close();\n      c6.close();\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTooManyTransientCores() throws Exception {\n\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"coreLOS\", makeCorePropFile(\"coreLOS\", false, true, \"dataDir=coreLOS\"));\n    addCoreWithProps(\"coreT1\", makeCorePropFile(\"coreT1\", true, true, \"dataDir=coreT1\"));\n    addCoreWithProps(\"coreT2\", makeCorePropFile(\"coreT2\", true, true, \"dataDir=coreT2\"));\n    addCoreWithProps(\"coreT3\", makeCorePropFile(\"coreT3\", true, true, \"dataDir=coreT3\"));\n    addCoreWithProps(\"coreT4\", makeCorePropFile(\"coreT4\", true, true, \"dataDir=coreT4\"));\n    addCoreWithProps(\"coreT5\", makeCorePropFile(\"coreT5\", true, true, \"dataDir=coreT5\"));\n    addCoreWithProps(\"coreT6\", makeCorePropFile(\"coreT6\", true, true, \"dataDir=coreT6\"));\n\n    // Do this specially since we need to search.\n    final CoreContainer cc = new CoreContainer(solrHomeDirectory.getPath().toString());\n    try {\n      cc.load();\n      // Just check that the proper number of cores are loaded since making the test depend on order would be fragile\n      assertEquals(\"There should only be 3 cores loaded, coreLOS and two coreT? cores\",\n          3, cc.getLoadedCoreNames().size());\n\n      SolrCore c1 = cc.getCore(\"coreT1\");\n      assertNotNull(\"Core T1 should NOT BE NULL\", c1);\n      SolrCore c2 = cc.getCore(\"coreT2\");\n      assertNotNull(\"Core T2 should NOT BE NULL\", c2);\n      SolrCore c3 = cc.getCore(\"coreT3\");\n      assertNotNull(\"Core T3 should NOT BE NULL\", c3);\n      SolrCore c4 = cc.getCore(\"coreT4\");\n      assertNotNull(\"Core T4 should NOT BE NULL\", c4);\n      SolrCore c5 = cc.getCore(\"coreT5\");\n      assertNotNull(\"Core T5 should NOT BE NULL\", c5);\n      SolrCore c6 = cc.getCore(\"coreT6\");\n      assertNotNull(\"Core T6 should NOT BE NULL\", c6);\n\n      c1.close();\n      c2.close();\n      c3.close();\n      c4.close();\n      c5.close();\n      c6.close();\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testTooManyTransientCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testTooManyTransientCores().mjava","sourceNew":"  @Test\n  public void testTooManyTransientCores() throws Exception {\n\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"coreLOS\", makeCoreProperties(\"coreLOS\", false, true, \"dataDir=coreLOS\"));\n    addCoreWithProps(\"coreT1\", makeCoreProperties(\"coreT1\", true, true, \"dataDir=coreT1\"));\n    addCoreWithProps(\"coreT2\", makeCoreProperties(\"coreT2\", true, true, \"dataDir=coreT2\"));\n    addCoreWithProps(\"coreT3\", makeCoreProperties(\"coreT3\", true, true, \"dataDir=coreT3\"));\n    addCoreWithProps(\"coreT4\", makeCoreProperties(\"coreT4\", true, true, \"dataDir=coreT4\"));\n    addCoreWithProps(\"coreT5\", makeCoreProperties(\"coreT5\", true, true, \"dataDir=coreT5\"));\n    addCoreWithProps(\"coreT6\", makeCoreProperties(\"coreT6\", true, true, \"dataDir=coreT6\"));\n\n    // Do this specially since we need to search.\n    final CoreContainer cc = new CoreContainer(solrHomeDirectory.toString());\n    try {\n      cc.load();\n      // Just check that the proper number of cores are loaded since making the test depend on order would be fragile\n      assertEquals(\"There should only be 3 cores loaded, coreLOS and two coreT? cores\",\n          3, cc.getLoadedCoreNames().size());\n\n      SolrCore c1 = cc.getCore(\"coreT1\");\n      assertNotNull(\"Core T1 should NOT BE NULL\", c1);\n      SolrCore c2 = cc.getCore(\"coreT2\");\n      assertNotNull(\"Core T2 should NOT BE NULL\", c2);\n      SolrCore c3 = cc.getCore(\"coreT3\");\n      assertNotNull(\"Core T3 should NOT BE NULL\", c3);\n      SolrCore c4 = cc.getCore(\"coreT4\");\n      assertNotNull(\"Core T4 should NOT BE NULL\", c4);\n      SolrCore c5 = cc.getCore(\"coreT5\");\n      assertNotNull(\"Core T5 should NOT BE NULL\", c5);\n      SolrCore c6 = cc.getCore(\"coreT6\");\n      assertNotNull(\"Core T6 should NOT BE NULL\", c6);\n\n      c1.close();\n      c2.close();\n      c3.close();\n      c4.close();\n      c5.close();\n      c6.close();\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTooManyTransientCores() throws Exception {\n\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"coreLOS\", makeCorePropFile(\"coreLOS\", false, true, \"dataDir=coreLOS\"));\n    addCoreWithProps(\"coreT1\", makeCorePropFile(\"coreT1\", true, true, \"dataDir=coreT1\"));\n    addCoreWithProps(\"coreT2\", makeCorePropFile(\"coreT2\", true, true, \"dataDir=coreT2\"));\n    addCoreWithProps(\"coreT3\", makeCorePropFile(\"coreT3\", true, true, \"dataDir=coreT3\"));\n    addCoreWithProps(\"coreT4\", makeCorePropFile(\"coreT4\", true, true, \"dataDir=coreT4\"));\n    addCoreWithProps(\"coreT5\", makeCorePropFile(\"coreT5\", true, true, \"dataDir=coreT5\"));\n    addCoreWithProps(\"coreT6\", makeCorePropFile(\"coreT6\", true, true, \"dataDir=coreT6\"));\n\n    // Do this specially since we need to search.\n    final CoreContainer cc = new CoreContainer(solrHomeDirectory.getPath().toString());\n    try {\n      cc.load();\n      // Just check that the proper number of cores are loaded since making the test depend on order would be fragile\n      assertEquals(\"There should only be 3 cores loaded, coreLOS and two coreT? cores\",\n          3, cc.getLoadedCoreNames().size());\n\n      SolrCore c1 = cc.getCore(\"coreT1\");\n      assertNotNull(\"Core T1 should NOT BE NULL\", c1);\n      SolrCore c2 = cc.getCore(\"coreT2\");\n      assertNotNull(\"Core T2 should NOT BE NULL\", c2);\n      SolrCore c3 = cc.getCore(\"coreT3\");\n      assertNotNull(\"Core T3 should NOT BE NULL\", c3);\n      SolrCore c4 = cc.getCore(\"coreT4\");\n      assertNotNull(\"Core T4 should NOT BE NULL\", c4);\n      SolrCore c5 = cc.getCore(\"coreT5\");\n      assertNotNull(\"Core T5 should NOT BE NULL\", c5);\n      SolrCore c6 = cc.getCore(\"coreT6\");\n      assertNotNull(\"Core T6 should NOT BE NULL\", c6);\n\n      c1.close();\n      c2.close();\n      c3.close();\n      c4.close();\n      c5.close();\n      c6.close();\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","date":1583932828,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testTooManyTransientCores().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testTooManyTransientCores().mjava","sourceNew":"  @Test\n  public void testTooManyTransientCores() throws Exception {\n\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"coreLOS\", makeCoreProperties(\"coreLOS\", false, true, \"dataDir=coreLOS\"));\n    addCoreWithProps(\"coreT1\", makeCoreProperties(\"coreT1\", true, true, \"dataDir=coreT1\"));\n    addCoreWithProps(\"coreT2\", makeCoreProperties(\"coreT2\", true, true, \"dataDir=coreT2\"));\n    addCoreWithProps(\"coreT3\", makeCoreProperties(\"coreT3\", true, true, \"dataDir=coreT3\"));\n    addCoreWithProps(\"coreT4\", makeCoreProperties(\"coreT4\", true, true, \"dataDir=coreT4\"));\n    addCoreWithProps(\"coreT5\", makeCoreProperties(\"coreT5\", true, true, \"dataDir=coreT5\"));\n    addCoreWithProps(\"coreT6\", makeCoreProperties(\"coreT6\", true, true, \"dataDir=coreT6\"));\n\n    // Do this specially since we need to search.\n    final CoreContainer cc = new CoreContainer(solrHomeDirectory, new Properties());\n    try {\n      cc.load();\n      // Just check that the proper number of cores are loaded since making the test depend on order would be fragile\n      assertEquals(\"There should only be 3 cores loaded, coreLOS and two coreT? cores\",\n          3, cc.getLoadedCoreNames().size());\n\n      SolrCore c1 = cc.getCore(\"coreT1\");\n      assertNotNull(\"Core T1 should NOT BE NULL\", c1);\n      SolrCore c2 = cc.getCore(\"coreT2\");\n      assertNotNull(\"Core T2 should NOT BE NULL\", c2);\n      SolrCore c3 = cc.getCore(\"coreT3\");\n      assertNotNull(\"Core T3 should NOT BE NULL\", c3);\n      SolrCore c4 = cc.getCore(\"coreT4\");\n      assertNotNull(\"Core T4 should NOT BE NULL\", c4);\n      SolrCore c5 = cc.getCore(\"coreT5\");\n      assertNotNull(\"Core T5 should NOT BE NULL\", c5);\n      SolrCore c6 = cc.getCore(\"coreT6\");\n      assertNotNull(\"Core T6 should NOT BE NULL\", c6);\n\n      c1.close();\n      c2.close();\n      c3.close();\n      c4.close();\n      c5.close();\n      c6.close();\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTooManyTransientCores() throws Exception {\n\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"coreLOS\", makeCoreProperties(\"coreLOS\", false, true, \"dataDir=coreLOS\"));\n    addCoreWithProps(\"coreT1\", makeCoreProperties(\"coreT1\", true, true, \"dataDir=coreT1\"));\n    addCoreWithProps(\"coreT2\", makeCoreProperties(\"coreT2\", true, true, \"dataDir=coreT2\"));\n    addCoreWithProps(\"coreT3\", makeCoreProperties(\"coreT3\", true, true, \"dataDir=coreT3\"));\n    addCoreWithProps(\"coreT4\", makeCoreProperties(\"coreT4\", true, true, \"dataDir=coreT4\"));\n    addCoreWithProps(\"coreT5\", makeCoreProperties(\"coreT5\", true, true, \"dataDir=coreT5\"));\n    addCoreWithProps(\"coreT6\", makeCoreProperties(\"coreT6\", true, true, \"dataDir=coreT6\"));\n\n    // Do this specially since we need to search.\n    final CoreContainer cc = new CoreContainer(solrHomeDirectory.toString());\n    try {\n      cc.load();\n      // Just check that the proper number of cores are loaded since making the test depend on order would be fragile\n      assertEquals(\"There should only be 3 cores loaded, coreLOS and two coreT? cores\",\n          3, cc.getLoadedCoreNames().size());\n\n      SolrCore c1 = cc.getCore(\"coreT1\");\n      assertNotNull(\"Core T1 should NOT BE NULL\", c1);\n      SolrCore c2 = cc.getCore(\"coreT2\");\n      assertNotNull(\"Core T2 should NOT BE NULL\", c2);\n      SolrCore c3 = cc.getCore(\"coreT3\");\n      assertNotNull(\"Core T3 should NOT BE NULL\", c3);\n      SolrCore c4 = cc.getCore(\"coreT4\");\n      assertNotNull(\"Core T4 should NOT BE NULL\", c4);\n      SolrCore c5 = cc.getCore(\"coreT5\");\n      assertNotNull(\"Core T5 should NOT BE NULL\", c5);\n      SolrCore c6 = cc.getCore(\"coreT6\");\n      assertNotNull(\"Core T6 should NOT BE NULL\", c6);\n\n      c1.close();\n      c2.close();\n      c3.close();\n      c4.close();\n      c5.close();\n      c6.close();\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5266ca9bc8a24a7d53dbfbe7f1d3b7e9c65e8454":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["5266ca9bc8a24a7d53dbfbe7f1d3b7e9c65e8454"],"d301cb76d81de80d07b44735622a04d49ed938eb":["729cb470f975115d4c60517b2cb7c42e37a7a2e1","bd7a2b4785d366164d3cd69f9948de6ff34d23a1"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["d301cb76d81de80d07b44735622a04d49ed938eb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"936cdd5882761db3b844afd6f84ab81cbb011a75":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","d301cb76d81de80d07b44735622a04d49ed938eb"],"bd7a2b4785d366164d3cd69f9948de6ff34d23a1":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["5266ca9bc8a24a7d53dbfbe7f1d3b7e9c65e8454"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"]},"commit2Childs":{"5266ca9bc8a24a7d53dbfbe7f1d3b7e9c65e8454":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["936cdd5882761db3b844afd6f84ab81cbb011a75"],"d301cb76d81de80d07b44735622a04d49ed938eb":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","936cdd5882761db3b844afd6f84ab81cbb011a75"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5266ca9bc8a24a7d53dbfbe7f1d3b7e9c65e8454"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"bd7a2b4785d366164d3cd69f9948de6ff34d23a1":["d301cb76d81de80d07b44735622a04d49ed938eb"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["d301cb76d81de80d07b44735622a04d49ed938eb","bd7a2b4785d366164d3cd69f9948de6ff34d23a1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}