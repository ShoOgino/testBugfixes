{"path":"lucene/backwards/src/java/org/apache/lucene/index/TermInfosReader#TermInfosReader(Directory,String,FieldInfos,int,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/TermInfosReader#TermInfosReader(Directory,String,FieldInfos,int,int).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/TermInfosReader#TermInfosReader(Directory,String,FieldInfos,int,int).mjava","sourceNew":"  TermInfosReader(Directory dir, String seg, FieldInfos fis, int readBufferSize, int indexDivisor)\n       throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    if (indexDivisor < 1 && indexDivisor != -1) {\n      throw new IllegalArgumentException(\"indexDivisor must be -1 (don't load terms index) or greater than 0: got \" + indexDivisor);\n    }\n\n    try {\n      directory = dir;\n      segment = seg;\n      fieldInfos = fis;\n\n      origEnum = new SegmentTermEnum(directory.openInput(segment + \".\" + IndexFileNames.TERMS_EXTENSION,\n          readBufferSize), fieldInfos, false);\n      size = origEnum.size;\n\n\n      if (indexDivisor != -1) {\n        // Load terms index\n        totalIndexInterval = origEnum.indexInterval * indexDivisor;\n        final SegmentTermEnum indexEnum = new SegmentTermEnum(directory.openInput(segment + \".\" + IndexFileNames.TERMS_INDEX_EXTENSION,\n                                                                                  readBufferSize), fieldInfos, true);\n\n        try {\n          int indexSize = 1+((int)indexEnum.size-1)/indexDivisor;  // otherwise read index\n\n          indexTerms = new Term[indexSize];\n          indexInfos = new TermInfo[indexSize];\n          indexPointers = new long[indexSize];\n        \n          for (int i = 0; indexEnum.next(); i++) {\n            indexTerms[i] = indexEnum.term();\n            indexInfos[i] = indexEnum.termInfo();\n            indexPointers[i] = indexEnum.indexPointer;\n        \n            for (int j = 1; j < indexDivisor; j++)\n              if (!indexEnum.next())\n                break;\n          }\n        } finally {\n          indexEnum.close();\n        }\n      } else {\n        // Do not load terms index:\n        totalIndexInterval = -1;\n        indexTerms = null;\n        indexInfos = null;\n        indexPointers = null;\n      }\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  TermInfosReader(Directory dir, String seg, FieldInfos fis, int readBufferSize, int indexDivisor)\n       throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    if (indexDivisor < 1 && indexDivisor != -1) {\n      throw new IllegalArgumentException(\"indexDivisor must be -1 (don't load terms index) or greater than 0: got \" + indexDivisor);\n    }\n\n    try {\n      directory = dir;\n      segment = seg;\n      fieldInfos = fis;\n\n      origEnum = new SegmentTermEnum(directory.openInput(segment + \".\" + IndexFileNames.TERMS_EXTENSION,\n          readBufferSize), fieldInfos, false);\n      size = origEnum.size;\n\n\n      if (indexDivisor != -1) {\n        // Load terms index\n        totalIndexInterval = origEnum.indexInterval * indexDivisor;\n        final SegmentTermEnum indexEnum = new SegmentTermEnum(directory.openInput(segment + \".\" + IndexFileNames.TERMS_INDEX_EXTENSION,\n                                                                                  readBufferSize), fieldInfos, true);\n\n        try {\n          int indexSize = 1+((int)indexEnum.size-1)/indexDivisor;  // otherwise read index\n\n          indexTerms = new Term[indexSize];\n          indexInfos = new TermInfo[indexSize];\n          indexPointers = new long[indexSize];\n        \n          for (int i = 0; indexEnum.next(); i++) {\n            indexTerms[i] = indexEnum.term();\n            indexInfos[i] = indexEnum.termInfo();\n            indexPointers[i] = indexEnum.indexPointer;\n        \n            for (int j = 1; j < indexDivisor; j++)\n              if (!indexEnum.next())\n                break;\n          }\n        } finally {\n          indexEnum.close();\n        }\n      } else {\n        // Do not load terms index:\n        totalIndexInterval = -1;\n        indexTerms = null;\n        indexInfos = null;\n        indexPointers = null;\n      }\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/TermInfosReader#TermInfosReader(Directory,String,FieldInfos,int,int).mjava","sourceNew":null,"sourceOld":"  TermInfosReader(Directory dir, String seg, FieldInfos fis, int readBufferSize, int indexDivisor)\n       throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    if (indexDivisor < 1 && indexDivisor != -1) {\n      throw new IllegalArgumentException(\"indexDivisor must be -1 (don't load terms index) or greater than 0: got \" + indexDivisor);\n    }\n\n    try {\n      directory = dir;\n      segment = seg;\n      fieldInfos = fis;\n\n      origEnum = new SegmentTermEnum(directory.openInput(segment + \".\" + IndexFileNames.TERMS_EXTENSION,\n          readBufferSize), fieldInfos, false);\n      size = origEnum.size;\n\n\n      if (indexDivisor != -1) {\n        // Load terms index\n        totalIndexInterval = origEnum.indexInterval * indexDivisor;\n        final SegmentTermEnum indexEnum = new SegmentTermEnum(directory.openInput(segment + \".\" + IndexFileNames.TERMS_INDEX_EXTENSION,\n                                                                                  readBufferSize), fieldInfos, true);\n\n        try {\n          int indexSize = 1+((int)indexEnum.size-1)/indexDivisor;  // otherwise read index\n\n          indexTerms = new Term[indexSize];\n          indexInfos = new TermInfo[indexSize];\n          indexPointers = new long[indexSize];\n        \n          for (int i = 0; indexEnum.next(); i++) {\n            indexTerms[i] = indexEnum.term();\n            indexInfos[i] = indexEnum.termInfo();\n            indexPointers[i] = indexEnum.indexPointer;\n        \n            for (int j = 1; j < indexDivisor; j++)\n              if (!indexEnum.next())\n                break;\n          }\n        } finally {\n          indexEnum.close();\n        }\n      } else {\n        // Do not load terms index:\n        totalIndexInterval = -1;\n        indexTerms = null;\n        indexInfos = null;\n        indexPointers = null;\n      }\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}