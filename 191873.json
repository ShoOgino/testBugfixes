{"path":"lucene/core/src/test/org/apache/lucene/search/TestRegexpQuery#testBacktracking().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestRegexpQuery#testBacktracking().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestRegexpQuery#testBacktracking().mjava","sourceNew":"  /**\n   * Test a corner case for backtracking: In this case the term dictionary has\n   * 493432 followed by 49344. When backtracking from 49343... to 4934, its\n   * necessary to test that 4934 itself is ok before trying to append more\n   * characters.\n   */\n  public void testBacktracking() throws IOException {\n    assertEquals(1, regexQueryNrHits(\"4934[314]\"));\n  }\n\n","sourceOld":"  /**\n   * Test a corner case for backtracking: In this case the term dictionary has\n   * 493432 followed by 49344. When backtracking from 49343... to 4934, its\n   * necessary to test that 4934 itself is ok before trying to append more\n   * characters.\n   */\n  public void testBacktracking() throws IOException {\n    assertEquals(1, regexQueryNrHits(\"4934[314]\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestRegexpQuery#testBacktracking().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestRegexpQuery#testBacktracking().mjava","sourceNew":"  /**\n   * Test a corner case for backtracking: In this case the term dictionary has\n   * 493432 followed by 49344. When backtracking from 49343... to 4934, it's\n   * necessary to test that 4934 itself is ok before trying to append more\n   * characters.\n   */\n  public void testBacktracking() throws IOException {\n    assertEquals(1, regexQueryNrHits(\"4934[314]\"));\n  }\n\n","sourceOld":"  /**\n   * Test a corner case for backtracking: In this case the term dictionary has\n   * 493432 followed by 49344. When backtracking from 49343... to 4934, its\n   * necessary to test that 4934 itself is ok before trying to append more\n   * characters.\n   */\n  public void testBacktracking() throws IOException {\n    assertEquals(1, regexQueryNrHits(\"4934[314]\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"]},"commit2Childs":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}