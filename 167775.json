{"path":"src/java/org/apache/lucene/util/ArrayUtil#getShrinkSize(int,int).mjava","commits":[{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/ArrayUtil#getShrinkSize(int,int).mjava","pathOld":"/dev/null","sourceNew":"  public static int getShrinkSize(int currentSize, int targetSize) {\n    final int newSize = getNextSize(targetSize);\n    if (newSize < currentSize && currentSize > newSize*2)\n      return newSize;\n    else\n      return currentSize;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/ArrayUtil#getShrinkSize(int,int).mjava","pathOld":"src/java/org/apache/lucene/util/ArrayUtil#getShrinkSize(int,int).mjava","sourceNew":"  public static int getShrinkSize(int currentSize, int targetSize) {\n    final int newSize = getNextSize(targetSize);\n    // Only reallocate if we are \"substantially\" smaller.\n    // This saves us from \"running hot\" (constantly making a\n    // bit bigger then a bit smaller, over and over):\n    if (newSize < currentSize/2)\n      return newSize;\n    else\n      return currentSize;\n  }\n\n","sourceOld":"  public static int getShrinkSize(int currentSize, int targetSize) {\n    final int newSize = getNextSize(targetSize);\n    if (newSize < currentSize && currentSize > newSize*2)\n      return newSize;\n    else\n      return currentSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d17e89cf704a29ea5d627f86a66bb0ad595ee2c","date":1244845561,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/ArrayUtil#getShrinkSize(int,int).mjava","pathOld":"src/java/org/apache/lucene/util/ArrayUtil#getShrinkSize(int,int).mjava","sourceNew":"  public static int getShrinkSize(int currentSize, int targetSize) {\n    final int newSize = getNextSize(targetSize);\n    // Only reallocate if we are \"substantially\" smaller.\n    // This saves us from \"running hot\" (constantly making a\n    // bit bigger then a bit smaller, over and over):\n    if (newSize < currentSize / 2)\n      return newSize;\n    else\n      return currentSize;\n  }\n\n","sourceOld":"  public static int getShrinkSize(int currentSize, int targetSize) {\n    final int newSize = getNextSize(targetSize);\n    // Only reallocate if we are \"substantially\" smaller.\n    // This saves us from \"running hot\" (constantly making a\n    // bit bigger then a bit smaller, over and over):\n    if (newSize < currentSize/2)\n      return newSize;\n    else\n      return currentSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38c26570a4fd6cf0856801c977a2bc9c28a5424c","date":1264074890,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/ArrayUtil#getShrinkSize(int,int,int).mjava","pathOld":"src/java/org/apache/lucene/util/ArrayUtil#getShrinkSize(int,int).mjava","sourceNew":"  public static int getShrinkSize(int currentSize, int targetSize, int bytesPerElement) {\n    final int newSize = oversize(targetSize, bytesPerElement);\n    // Only reallocate if we are \"substantially\" smaller.\n    // This saves us from \"running hot\" (constantly making a\n    // bit bigger then a bit smaller, over and over):\n    if (newSize < currentSize / 2)\n      return newSize;\n    else\n      return currentSize;\n  }\n\n","sourceOld":"  public static int getShrinkSize(int currentSize, int targetSize) {\n    final int newSize = getNextSize(targetSize);\n    // Only reallocate if we are \"substantially\" smaller.\n    // This saves us from \"running hot\" (constantly making a\n    // bit bigger then a bit smaller, over and over):\n    if (newSize < currentSize / 2)\n      return newSize;\n    else\n      return currentSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["5350389bf83287111f7760b9e3db3af8e3648474"],"7d17e89cf704a29ea5d627f86a66bb0ad595ee2c":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"38c26570a4fd6cf0856801c977a2bc9c28a5424c":["7d17e89cf704a29ea5d627f86a66bb0ad595ee2c"],"5350389bf83287111f7760b9e3db3af8e3648474":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["38c26570a4fd6cf0856801c977a2bc9c28a5424c"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["7d17e89cf704a29ea5d627f86a66bb0ad595ee2c"],"7d17e89cf704a29ea5d627f86a66bb0ad595ee2c":["38c26570a4fd6cf0856801c977a2bc9c28a5424c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5350389bf83287111f7760b9e3db3af8e3648474"],"38c26570a4fd6cf0856801c977a2bc9c28a5424c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5350389bf83287111f7760b9e3db3af8e3648474":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}