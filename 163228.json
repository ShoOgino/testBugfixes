{"path":"src/test/org/apache/lucene/index/TestNewIndexModifierDelete#testOperationsOnDiskFull(boolean).mjava","commits":[{"id":"6b772434f9f358356f8eedc2e017b9ddfb2615ec","date":1170327312,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestNewIndexModifierDelete#testOperationsOnDiskFull(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Make sure if modifier tries to commit but hits disk full that modifier\n   * remains consistent and usable. Similar to TestIndexReader.testDiskFull().\n   */\n  private void testOperationsOnDiskFull(boolean updates) throws IOException {\n\n    boolean debug = false;\n    Term searchTerm = new Term(\"content\", \"aaa\");\n    int START_COUNT = 157;\n    int END_COUNT = 144;\n\n    // First build up a starting index:\n    RAMDirectory startDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(startDir, new WhitespaceAnalyzer(),\n        true);\n    for (int i = 0; i < 157; i++) {\n      Document d = new Document();\n      d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES,\n          Field.Index.UN_TOKENIZED));\n      d.add(new Field(\"content\", \"aaa \" + i, Field.Store.NO,\n          Field.Index.TOKENIZED));\n      writer.addDocument(d);\n    }\n    writer.close();\n\n    long diskUsage = startDir.sizeInBytes();\n    long diskFree = diskUsage + 10;\n\n    IOException err = null;\n\n    boolean done = false;\n\n    // Iterate w/ ever increasing free disk space:\n    while (!done) {\n      MockRAMDirectory dir = new MockRAMDirectory(startDir);\n      NewIndexModifier modifier = new NewIndexModifier(dir,\n          new WhitespaceAnalyzer(), false);\n\n      modifier.setMaxBufferedDocs(1000); // use flush or close\n      modifier.setMaxBufferedDeleteTerms(1000); // use flush or close\n\n      // For each disk size, first try to commit against\n      // dir that will hit random IOExceptions & disk\n      // full; after, give it infinite disk space & turn\n      // off random IOExceptions & retry w/ same reader:\n      boolean success = false;\n\n      for (int x = 0; x < 2; x++) {\n\n        double rate = 0.1;\n        double diskRatio = ((double)diskFree) / diskUsage;\n        long thisDiskFree;\n        String testName;\n\n        if (0 == x) {\n          thisDiskFree = diskFree;\n          if (diskRatio >= 2.0) {\n            rate /= 2;\n          }\n          if (diskRatio >= 4.0) {\n            rate /= 2;\n          }\n          if (diskRatio >= 6.0) {\n            rate = 0.0;\n          }\n          if (debug) {\n            System.out.println(\"\\ncycle: \" + diskFree + \" bytes\");\n          }\n          testName = \"disk full during reader.close() @ \" + thisDiskFree\n              + \" bytes\";\n        } else {\n          thisDiskFree = 0;\n          rate = 0.0;\n          if (debug) {\n            System.out.println(\"\\ncycle: same writer: unlimited disk space\");\n          }\n          testName = \"reader re-use after disk full\";\n        }\n\n        dir.setMaxSizeInBytes(thisDiskFree);\n        dir.setRandomIOExceptionRate(rate, diskFree);\n\n        try {\n          if (0 == x) {\n            int docId = 12;\n            for (int i = 0; i < 13; i++) {\n              if (updates) {\n                Document d = new Document();\n                d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES,\n                    Field.Index.UN_TOKENIZED));\n                d.add(new Field(\"content\", \"bbb \" + i, Field.Store.NO,\n                    Field.Index.TOKENIZED));\n                modifier.updateDocument(\n                    new Term(\"id\", Integer.toString(docId)), d);\n              } else { // deletes\n                modifier\n                    .deleteDocuments(new Term(\"id\", Integer.toString(docId)));\n                // modifier.setNorm(docId, \"contents\", (float)2.0);\n              }\n              docId += 12;\n            }\n          }\n          modifier.close();\n          success = true;\n          if (0 == x) {\n            done = true;\n          }\n        }\n        catch (IOException e) {\n          if (debug) {\n            System.out.println(\"  hit IOException: \" + e);\n          }\n          err = e;\n          if (1 == x) {\n            e.printStackTrace();\n            fail(testName + \" hit IOException after disk space was freed up\");\n          }\n        }\n\n        // Whether we succeeded or failed, check that all\n        // un-referenced files were in fact deleted (ie,\n        // we did not create garbage). Just create a\n        // new IndexFileDeleter, have it delete\n        // unreferenced files, then verify that in fact\n        // no files were deleted:\n        String[] startFiles = dir.list();\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(dir);\n        IndexFileDeleter d = new IndexFileDeleter(infos, dir);\n        d.findDeletableFiles();\n        d.deleteFiles();\n        String[] endFiles = dir.list();\n\n        Arrays.sort(startFiles);\n        Arrays.sort(endFiles);\n\n        // for(int i=0;i<startFiles.length;i++) {\n        // System.out.println(\" startFiles: \" + i + \": \" + startFiles[i]);\n        // }\n\n        if (!Arrays.equals(startFiles, endFiles)) {\n          String successStr;\n          if (success) {\n            successStr = \"success\";\n          } else {\n            successStr = \"IOException\";\n            err.printStackTrace();\n          }\n          fail(\"reader.close() failed to delete unreferenced files after \"\n              + successStr + \" (\" + diskFree + \" bytes): before delete:\\n    \"\n              + arrayToString(startFiles) + \"\\n  after delete:\\n    \"\n              + arrayToString(endFiles));\n        }\n\n        // Finally, verify index is not corrupt, and, if\n        // we succeeded, we see all docs changed, and if\n        // we failed, we see either all docs or no docs\n        // changed (transactional semantics):\n        IndexReader newReader = null;\n        try {\n          newReader = IndexReader.open(dir);\n        }\n        catch (IOException e) {\n          e.printStackTrace();\n          fail(testName\n              + \":exception when creating IndexReader after disk full during close: \"\n              + e);\n        }\n\n        IndexSearcher searcher = new IndexSearcher(newReader);\n        Hits hits = null;\n        try {\n          hits = searcher.search(new TermQuery(searchTerm));\n        }\n        catch (IOException e) {\n          e.printStackTrace();\n          fail(testName + \": exception when searching: \" + e);\n        }\n        int result2 = hits.length();\n        if (success) {\n          if (result2 != END_COUNT) {\n            fail(testName\n                + \": method did not throw exception but hits.length for search on term 'aaa' is \"\n                + result2 + \" instead of expected \" + END_COUNT);\n          }\n        } else {\n          // On hitting exception we still may have added\n          // all docs:\n          if (result2 != START_COUNT && result2 != END_COUNT) {\n            err.printStackTrace();\n            fail(testName\n                + \": method did throw exception but hits.length for search on term 'aaa' is \"\n                + result2 + \" instead of expected \" + START_COUNT);\n          }\n        }\n\n        searcher.close();\n        newReader.close();\n\n        if (result2 == END_COUNT) {\n          break;\n        }\n      }\n\n      dir.close();\n\n      // Try again with 10 more bytes of free space:\n      diskFree += 10;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42a18cb0bca2c4ac9747f31c7a74fac90c661f39","date":1171363388,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterDelete#testOperationsOnDiskFull(boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestNewIndexModifierDelete#testOperationsOnDiskFull(boolean).mjava","sourceNew":"  /**\n   * Make sure if modifier tries to commit but hits disk full that modifier\n   * remains consistent and usable. Similar to TestIndexReader.testDiskFull().\n   */\n  private void testOperationsOnDiskFull(boolean updates) throws IOException {\n\n    boolean debug = false;\n    Term searchTerm = new Term(\"content\", \"aaa\");\n    int START_COUNT = 157;\n    int END_COUNT = 144;\n\n    // First build up a starting index:\n    RAMDirectory startDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(startDir, new WhitespaceAnalyzer(),\n        true);\n    for (int i = 0; i < 157; i++) {\n      Document d = new Document();\n      d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES,\n          Field.Index.UN_TOKENIZED));\n      d.add(new Field(\"content\", \"aaa \" + i, Field.Store.NO,\n          Field.Index.TOKENIZED));\n      writer.addDocument(d);\n    }\n    writer.close();\n\n    long diskUsage = startDir.sizeInBytes();\n    long diskFree = diskUsage + 10;\n\n    IOException err = null;\n\n    boolean done = false;\n\n    // Iterate w/ ever increasing free disk space:\n    while (!done) {\n      MockRAMDirectory dir = new MockRAMDirectory(startDir);\n      IndexWriter modifier = new IndexWriter(dir,\n          new WhitespaceAnalyzer(), false);\n\n      modifier.setMaxBufferedDocs(1000); // use flush or close\n      modifier.setMaxBufferedDeleteTerms(1000); // use flush or close\n\n      // For each disk size, first try to commit against\n      // dir that will hit random IOExceptions & disk\n      // full; after, give it infinite disk space & turn\n      // off random IOExceptions & retry w/ same reader:\n      boolean success = false;\n\n      for (int x = 0; x < 2; x++) {\n\n        double rate = 0.1;\n        double diskRatio = ((double)diskFree) / diskUsage;\n        long thisDiskFree;\n        String testName;\n\n        if (0 == x) {\n          thisDiskFree = diskFree;\n          if (diskRatio >= 2.0) {\n            rate /= 2;\n          }\n          if (diskRatio >= 4.0) {\n            rate /= 2;\n          }\n          if (diskRatio >= 6.0) {\n            rate = 0.0;\n          }\n          if (debug) {\n            System.out.println(\"\\ncycle: \" + diskFree + \" bytes\");\n          }\n          testName = \"disk full during reader.close() @ \" + thisDiskFree\n              + \" bytes\";\n        } else {\n          thisDiskFree = 0;\n          rate = 0.0;\n          if (debug) {\n            System.out.println(\"\\ncycle: same writer: unlimited disk space\");\n          }\n          testName = \"reader re-use after disk full\";\n        }\n\n        dir.setMaxSizeInBytes(thisDiskFree);\n        dir.setRandomIOExceptionRate(rate, diskFree);\n\n        try {\n          if (0 == x) {\n            int docId = 12;\n            for (int i = 0; i < 13; i++) {\n              if (updates) {\n                Document d = new Document();\n                d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES,\n                    Field.Index.UN_TOKENIZED));\n                d.add(new Field(\"content\", \"bbb \" + i, Field.Store.NO,\n                    Field.Index.TOKENIZED));\n                modifier.updateDocument(new Term(\"id\", Integer.toString(docId)), d);\n              } else { // deletes\n                modifier.deleteDocuments(new Term(\"id\", Integer.toString(docId)));\n                // modifier.setNorm(docId, \"contents\", (float)2.0);\n              }\n              docId += 12;\n            }\n          }\n          modifier.close();\n          success = true;\n          if (0 == x) {\n            done = true;\n          }\n        }\n        catch (IOException e) {\n          if (debug) {\n            System.out.println(\"  hit IOException: \" + e);\n          }\n          err = e;\n          if (1 == x) {\n            e.printStackTrace();\n            fail(testName + \" hit IOException after disk space was freed up\");\n          }\n        }\n\n        // Whether we succeeded or failed, check that all\n        // un-referenced files were in fact deleted (ie,\n        // we did not create garbage). Just create a\n        // new IndexFileDeleter, have it delete\n        // unreferenced files, then verify that in fact\n        // no files were deleted:\n        String[] startFiles = dir.list();\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(dir);\n        IndexFileDeleter d = new IndexFileDeleter(infos, dir);\n        d.findDeletableFiles();\n        d.deleteFiles();\n        String[] endFiles = dir.list();\n\n        Arrays.sort(startFiles);\n        Arrays.sort(endFiles);\n\n        // for(int i=0;i<startFiles.length;i++) {\n        // System.out.println(\" startFiles: \" + i + \": \" + startFiles[i]);\n        // }\n\n        if (!Arrays.equals(startFiles, endFiles)) {\n          String successStr;\n          if (success) {\n            successStr = \"success\";\n          } else {\n            successStr = \"IOException\";\n            err.printStackTrace();\n          }\n          fail(\"reader.close() failed to delete unreferenced files after \"\n              + successStr + \" (\" + diskFree + \" bytes): before delete:\\n    \"\n              + arrayToString(startFiles) + \"\\n  after delete:\\n    \"\n              + arrayToString(endFiles));\n        }\n\n        // Finally, verify index is not corrupt, and, if\n        // we succeeded, we see all docs changed, and if\n        // we failed, we see either all docs or no docs\n        // changed (transactional semantics):\n        IndexReader newReader = null;\n        try {\n          newReader = IndexReader.open(dir);\n        }\n        catch (IOException e) {\n          e.printStackTrace();\n          fail(testName\n              + \":exception when creating IndexReader after disk full during close: \"\n              + e);\n        }\n\n        IndexSearcher searcher = new IndexSearcher(newReader);\n        Hits hits = null;\n        try {\n          hits = searcher.search(new TermQuery(searchTerm));\n        }\n        catch (IOException e) {\n          e.printStackTrace();\n          fail(testName + \": exception when searching: \" + e);\n        }\n        int result2 = hits.length();\n        if (success) {\n          if (result2 != END_COUNT) {\n            fail(testName\n                + \": method did not throw exception but hits.length for search on term 'aaa' is \"\n                + result2 + \" instead of expected \" + END_COUNT);\n          }\n        } else {\n          // On hitting exception we still may have added\n          // all docs:\n          if (result2 != START_COUNT && result2 != END_COUNT) {\n            err.printStackTrace();\n            fail(testName\n                + \": method did throw exception but hits.length for search on term 'aaa' is \"\n                + result2 + \" instead of expected \" + START_COUNT);\n          }\n        }\n\n        searcher.close();\n        newReader.close();\n\n        if (result2 == END_COUNT) {\n          break;\n        }\n      }\n\n      dir.close();\n\n      // Try again with 10 more bytes of free space:\n      diskFree += 10;\n    }\n  }\n\n","sourceOld":"  /**\n   * Make sure if modifier tries to commit but hits disk full that modifier\n   * remains consistent and usable. Similar to TestIndexReader.testDiskFull().\n   */\n  private void testOperationsOnDiskFull(boolean updates) throws IOException {\n\n    boolean debug = false;\n    Term searchTerm = new Term(\"content\", \"aaa\");\n    int START_COUNT = 157;\n    int END_COUNT = 144;\n\n    // First build up a starting index:\n    RAMDirectory startDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(startDir, new WhitespaceAnalyzer(),\n        true);\n    for (int i = 0; i < 157; i++) {\n      Document d = new Document();\n      d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES,\n          Field.Index.UN_TOKENIZED));\n      d.add(new Field(\"content\", \"aaa \" + i, Field.Store.NO,\n          Field.Index.TOKENIZED));\n      writer.addDocument(d);\n    }\n    writer.close();\n\n    long diskUsage = startDir.sizeInBytes();\n    long diskFree = diskUsage + 10;\n\n    IOException err = null;\n\n    boolean done = false;\n\n    // Iterate w/ ever increasing free disk space:\n    while (!done) {\n      MockRAMDirectory dir = new MockRAMDirectory(startDir);\n      NewIndexModifier modifier = new NewIndexModifier(dir,\n          new WhitespaceAnalyzer(), false);\n\n      modifier.setMaxBufferedDocs(1000); // use flush or close\n      modifier.setMaxBufferedDeleteTerms(1000); // use flush or close\n\n      // For each disk size, first try to commit against\n      // dir that will hit random IOExceptions & disk\n      // full; after, give it infinite disk space & turn\n      // off random IOExceptions & retry w/ same reader:\n      boolean success = false;\n\n      for (int x = 0; x < 2; x++) {\n\n        double rate = 0.1;\n        double diskRatio = ((double)diskFree) / diskUsage;\n        long thisDiskFree;\n        String testName;\n\n        if (0 == x) {\n          thisDiskFree = diskFree;\n          if (diskRatio >= 2.0) {\n            rate /= 2;\n          }\n          if (diskRatio >= 4.0) {\n            rate /= 2;\n          }\n          if (diskRatio >= 6.0) {\n            rate = 0.0;\n          }\n          if (debug) {\n            System.out.println(\"\\ncycle: \" + diskFree + \" bytes\");\n          }\n          testName = \"disk full during reader.close() @ \" + thisDiskFree\n              + \" bytes\";\n        } else {\n          thisDiskFree = 0;\n          rate = 0.0;\n          if (debug) {\n            System.out.println(\"\\ncycle: same writer: unlimited disk space\");\n          }\n          testName = \"reader re-use after disk full\";\n        }\n\n        dir.setMaxSizeInBytes(thisDiskFree);\n        dir.setRandomIOExceptionRate(rate, diskFree);\n\n        try {\n          if (0 == x) {\n            int docId = 12;\n            for (int i = 0; i < 13; i++) {\n              if (updates) {\n                Document d = new Document();\n                d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES,\n                    Field.Index.UN_TOKENIZED));\n                d.add(new Field(\"content\", \"bbb \" + i, Field.Store.NO,\n                    Field.Index.TOKENIZED));\n                modifier.updateDocument(\n                    new Term(\"id\", Integer.toString(docId)), d);\n              } else { // deletes\n                modifier\n                    .deleteDocuments(new Term(\"id\", Integer.toString(docId)));\n                // modifier.setNorm(docId, \"contents\", (float)2.0);\n              }\n              docId += 12;\n            }\n          }\n          modifier.close();\n          success = true;\n          if (0 == x) {\n            done = true;\n          }\n        }\n        catch (IOException e) {\n          if (debug) {\n            System.out.println(\"  hit IOException: \" + e);\n          }\n          err = e;\n          if (1 == x) {\n            e.printStackTrace();\n            fail(testName + \" hit IOException after disk space was freed up\");\n          }\n        }\n\n        // Whether we succeeded or failed, check that all\n        // un-referenced files were in fact deleted (ie,\n        // we did not create garbage). Just create a\n        // new IndexFileDeleter, have it delete\n        // unreferenced files, then verify that in fact\n        // no files were deleted:\n        String[] startFiles = dir.list();\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(dir);\n        IndexFileDeleter d = new IndexFileDeleter(infos, dir);\n        d.findDeletableFiles();\n        d.deleteFiles();\n        String[] endFiles = dir.list();\n\n        Arrays.sort(startFiles);\n        Arrays.sort(endFiles);\n\n        // for(int i=0;i<startFiles.length;i++) {\n        // System.out.println(\" startFiles: \" + i + \": \" + startFiles[i]);\n        // }\n\n        if (!Arrays.equals(startFiles, endFiles)) {\n          String successStr;\n          if (success) {\n            successStr = \"success\";\n          } else {\n            successStr = \"IOException\";\n            err.printStackTrace();\n          }\n          fail(\"reader.close() failed to delete unreferenced files after \"\n              + successStr + \" (\" + diskFree + \" bytes): before delete:\\n    \"\n              + arrayToString(startFiles) + \"\\n  after delete:\\n    \"\n              + arrayToString(endFiles));\n        }\n\n        // Finally, verify index is not corrupt, and, if\n        // we succeeded, we see all docs changed, and if\n        // we failed, we see either all docs or no docs\n        // changed (transactional semantics):\n        IndexReader newReader = null;\n        try {\n          newReader = IndexReader.open(dir);\n        }\n        catch (IOException e) {\n          e.printStackTrace();\n          fail(testName\n              + \":exception when creating IndexReader after disk full during close: \"\n              + e);\n        }\n\n        IndexSearcher searcher = new IndexSearcher(newReader);\n        Hits hits = null;\n        try {\n          hits = searcher.search(new TermQuery(searchTerm));\n        }\n        catch (IOException e) {\n          e.printStackTrace();\n          fail(testName + \": exception when searching: \" + e);\n        }\n        int result2 = hits.length();\n        if (success) {\n          if (result2 != END_COUNT) {\n            fail(testName\n                + \": method did not throw exception but hits.length for search on term 'aaa' is \"\n                + result2 + \" instead of expected \" + END_COUNT);\n          }\n        } else {\n          // On hitting exception we still may have added\n          // all docs:\n          if (result2 != START_COUNT && result2 != END_COUNT) {\n            err.printStackTrace();\n            fail(testName\n                + \": method did throw exception but hits.length for search on term 'aaa' is \"\n                + result2 + \" instead of expected \" + START_COUNT);\n          }\n        }\n\n        searcher.close();\n        newReader.close();\n\n        if (result2 == END_COUNT) {\n          break;\n        }\n      }\n\n      dir.close();\n\n      // Try again with 10 more bytes of free space:\n      diskFree += 10;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"42a18cb0bca2c4ac9747f31c7a74fac90c661f39":["6b772434f9f358356f8eedc2e017b9ddfb2615ec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["42a18cb0bca2c4ac9747f31c7a74fac90c661f39"],"6b772434f9f358356f8eedc2e017b9ddfb2615ec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"42a18cb0bca2c4ac9747f31c7a74fac90c661f39":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6b772434f9f358356f8eedc2e017b9ddfb2615ec"],"6b772434f9f358356f8eedc2e017b9ddfb2615ec":["42a18cb0bca2c4ac9747f31c7a74fac90c661f39"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}