{"path":"solr/core/src/java/org/apache/solr/handler/JsonLoader#parseCommitOptions(CommitUpdateCommand).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/JsonLoader#parseCommitOptions(CommitUpdateCommand).mjava","pathOld":"solr/src/java/org/apache/solr/handler/JsonLoader#parseCommitOptions(CommitUpdateCommand).mjava","sourceNew":"  void parseCommitOptions(CommitUpdateCommand cmd ) throws IOException\n  {\n    assertNextEvent( JSONParser.OBJECT_START );\n\n    while( true ) {\n      int ev = parser.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = parser.getString();\n        if( parser.wasKey() ) {\n          if( XmlUpdateRequestHandler.WAIT_SEARCHER.equals( key ) ) {\n            cmd.waitSearcher = parser.getBoolean();\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key: \"+key+\" [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"invalid string: \" + key \n              +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        return;\n      }\n      else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+parser.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","sourceOld":"  void parseCommitOptions(CommitUpdateCommand cmd ) throws IOException\n  {\n    assertNextEvent( JSONParser.OBJECT_START );\n\n    while( true ) {\n      int ev = parser.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = parser.getString();\n        if( parser.wasKey() ) {\n          if( XmlUpdateRequestHandler.WAIT_SEARCHER.equals( key ) ) {\n            cmd.waitSearcher = parser.getBoolean();\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key: \"+key+\" [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"invalid string: \" + key \n              +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        return;\n      }\n      else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+parser.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/JsonLoader#parseCommitOptions(CommitUpdateCommand).mjava","pathOld":"solr/src/java/org/apache/solr/handler/JsonLoader#parseCommitOptions(CommitUpdateCommand).mjava","sourceNew":"  void parseCommitOptions(CommitUpdateCommand cmd ) throws IOException\n  {\n    assertNextEvent( JSONParser.OBJECT_START );\n\n    while( true ) {\n      int ev = parser.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = parser.getString();\n        if( parser.wasKey() ) {\n          if( XmlUpdateRequestHandler.WAIT_SEARCHER.equals( key ) ) {\n            cmd.waitSearcher = parser.getBoolean();\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key: \"+key+\" [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"invalid string: \" + key \n              +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        return;\n      }\n      else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+parser.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","sourceOld":"  void parseCommitOptions(CommitUpdateCommand cmd ) throws IOException\n  {\n    assertNextEvent( JSONParser.OBJECT_START );\n\n    while( true ) {\n      int ev = parser.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = parser.getString();\n        if( parser.wasKey() ) {\n          if( XmlUpdateRequestHandler.WAIT_SEARCHER.equals( key ) ) {\n            cmd.waitSearcher = parser.getBoolean();\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key: \"+key+\" [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"invalid string: \" + key \n              +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        return;\n      }\n      else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+parser.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/JsonLoader#parseCommitOptions(CommitUpdateCommand).mjava","pathOld":"solr/src/java/org/apache/solr/handler/JsonLoader#parseCommitOptions(CommitUpdateCommand).mjava","sourceNew":"  void parseCommitOptions(CommitUpdateCommand cmd ) throws IOException\n  {\n    assertNextEvent( JSONParser.OBJECT_START );\n\n    while( true ) {\n      int ev = parser.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = parser.getString();\n        if( parser.wasKey() ) {\n          if( XmlUpdateRequestHandler.WAIT_SEARCHER.equals( key ) ) {\n            cmd.waitSearcher = parser.getBoolean();\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key: \"+key+\" [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"invalid string: \" + key \n              +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        return;\n      }\n      else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+parser.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","sourceOld":"  void parseCommitOptions(CommitUpdateCommand cmd ) throws IOException\n  {\n    assertNextEvent( JSONParser.OBJECT_START );\n\n    while( true ) {\n      int ev = parser.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = parser.getString();\n        if( parser.wasKey() ) {\n          if( XmlUpdateRequestHandler.WAIT_SEARCHER.equals( key ) ) {\n            cmd.waitSearcher = parser.getBoolean();\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key: \"+key+\" [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"invalid string: \" + key \n              +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        return;\n      }\n      else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+parser.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad31de9d3b830bc174d4c41df9f80f4cac82576","date":1328107867,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/JsonLoader#parseCommitOptions(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/JsonLoader#parseCommitOptions(CommitUpdateCommand).mjava","sourceNew":"  void parseCommitOptions(CommitUpdateCommand cmd ) throws IOException\n  {\n    assertNextEvent( JSONParser.OBJECT_START );\n    final Map<String,Object> map = (Map)ObjectBuilder.getVal(parser);\n\n    // SolrParams currently expects string values...\n    SolrParams p = new SolrParams() {\n      @Override\n      public String get(String param) {\n        Object o = map.get(param);\n        return o == null ? null : o.toString();\n      }\n\n      @Override\n      public String[] getParams(String param) {\n        return new String[]{get(param)};\n      }\n\n      @Override\n      public Iterator<String> getParameterNamesIterator() {\n        return map.keySet().iterator();\n      }\n    };\n\n    RequestHandlerUtils.validateCommitParams(p);\n    p = SolrParams.wrapDefaults(p, req.getParams());   // default to the normal request params for commit options\n    RequestHandlerUtils.updateCommit(cmd, p);\n  }\n\n","sourceOld":"  void parseCommitOptions(CommitUpdateCommand cmd ) throws IOException\n  {\n    assertNextEvent( JSONParser.OBJECT_START );\n\n    while( true ) {\n      int ev = parser.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = parser.getString();\n        if( parser.wasKey() ) {\n          if( XmlUpdateRequestHandler.WAIT_SEARCHER.equals( key ) ) {\n            cmd.waitSearcher = parser.getBoolean();\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key: \"+key+\" [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"invalid string: \" + key \n              +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        return;\n      }\n      else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+parser.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"042e4d934397657ba04c82b46cc5665076bc5c58","date":1336511170,"type":4,"author":"Ryan McKinley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/JsonLoader#parseCommitOptions(CommitUpdateCommand).mjava","sourceNew":null,"sourceOld":"  void parseCommitOptions(CommitUpdateCommand cmd ) throws IOException\n  {\n    assertNextEvent( JSONParser.OBJECT_START );\n    final Map<String,Object> map = (Map)ObjectBuilder.getVal(parser);\n\n    // SolrParams currently expects string values...\n    SolrParams p = new SolrParams() {\n      @Override\n      public String get(String param) {\n        Object o = map.get(param);\n        return o == null ? null : o.toString();\n      }\n\n      @Override\n      public String[] getParams(String param) {\n        return new String[]{get(param)};\n      }\n\n      @Override\n      public Iterator<String> getParameterNamesIterator() {\n        return map.keySet().iterator();\n      }\n    };\n\n    RequestHandlerUtils.validateCommitParams(p);\n    p = SolrParams.wrapDefaults(p, req.getParams());   // default to the normal request params for commit options\n    RequestHandlerUtils.updateCommit(cmd, p);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"042e4d934397657ba04c82b46cc5665076bc5c58":["0ad31de9d3b830bc174d4c41df9f80f4cac82576"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"0ad31de9d3b830bc174d4c41df9f80f4cac82576":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["042e4d934397657ba04c82b46cc5665076bc5c58"]},"commit2Childs":{"042e4d934397657ba04c82b46cc5665076bc5c58":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["0ad31de9d3b830bc174d4c41df9f80f4cac82576"],"0ad31de9d3b830bc174d4c41df9f80f4cac82576":["042e4d934397657ba04c82b46cc5665076bc5c58"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}