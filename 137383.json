{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#getSlices(String,ZkStateReader,boolean).mjava","commits":[{"id":"8c969f15cd04d31e520319c619a445ae21f02d72","date":1479263638,"type":0,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#getSlices(String,ZkStateReader,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public static Collection<Slice> getSlices(String collectionName, ZkStateReader zkStateReader, boolean checkAlias) throws IOException {\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    Map<String, DocCollection> collectionsMap = clusterState.getCollectionsMap();\n\n    // Check collection case sensitive\n    if(collectionsMap.containsKey(collectionName)) {\n      return collectionsMap.get(collectionName).getActiveSlices();\n    }\n\n    // Check collection case insensitive\n    for(String collectionMapKey : collectionsMap.keySet()) {\n      if(collectionMapKey.equalsIgnoreCase(collectionName)) {\n        return collectionsMap.get(collectionMapKey).getActiveSlices();\n      }\n    }\n\n    if(checkAlias) {\n      // check for collection alias\n      Aliases aliases = zkStateReader.getAliases();\n      String alias = aliases.getCollectionAlias(collectionName);\n      if (alias != null) {\n        Collection<Slice> slices = new ArrayList<>();\n\n        List<String> aliasList = StrUtils.splitSmart(alias, \",\", true);\n        for (String aliasCollectionName : aliasList) {\n          // Add all active slices for this alias collection\n          slices.addAll(collectionsMap.get(aliasCollectionName).getActiveSlices());\n        }\n\n        return slices;\n      }\n    }\n\n    throw new IOException(\"Slices not found for \" + collectionName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#getSlices(String,ZkStateReader,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public static Collection<Slice> getSlices(String collectionName, ZkStateReader zkStateReader, boolean checkAlias) throws IOException {\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    Map<String, DocCollection> collectionsMap = clusterState.getCollectionsMap();\n\n    // Check collection case sensitive\n    if(collectionsMap.containsKey(collectionName)) {\n      return collectionsMap.get(collectionName).getActiveSlices();\n    }\n\n    // Check collection case insensitive\n    for(String collectionMapKey : collectionsMap.keySet()) {\n      if(collectionMapKey.equalsIgnoreCase(collectionName)) {\n        return collectionsMap.get(collectionMapKey).getActiveSlices();\n      }\n    }\n\n    if(checkAlias) {\n      // check for collection alias\n      Aliases aliases = zkStateReader.getAliases();\n      String alias = aliases.getCollectionAlias(collectionName);\n      if (alias != null) {\n        Collection<Slice> slices = new ArrayList<>();\n\n        List<String> aliasList = StrUtils.splitSmart(alias, \",\", true);\n        for (String aliasCollectionName : aliasList) {\n          // Add all active slices for this alias collection\n          slices.addAll(collectionsMap.get(aliasCollectionName).getActiveSlices());\n        }\n\n        return slices;\n      }\n    }\n\n    throw new IOException(\"Slices not found for \" + collectionName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b824daa61db3f30b91a22213d6c04e1fa2e2b06","date":1508385744,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#getSlices(String,ZkStateReader,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#getSlices(String,ZkStateReader,boolean).mjava","sourceNew":"  public static Collection<Slice> getSlices(String collectionName, ZkStateReader zkStateReader, boolean checkAlias) throws IOException {\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    Map<String, DocCollection> collectionsMap = clusterState.getCollectionsMap();\n\n    //TODO we should probably split collection by comma to query more than one\n    //  which is something already supported in other parts of Solr\n\n    // check for alias or collection\n    List<String> collections = checkAlias\n        ? zkStateReader.getAliases().resolveAliases(collectionName)  // if not an alias, returns collectionName\n        : Collections.singletonList(collectionName);\n    // Lookup all actives slices for these collections\n    List<Slice> slices = collections.stream()\n        .map(collectionsMap::get)\n        .filter(Objects::nonNull)\n        .flatMap(docCol -> docCol.getActiveSlices().stream())\n        .collect(Collectors.toList());\n    if (!slices.isEmpty()) {\n      return slices;\n    }\n\n    // Check collection case insensitive\n    for(String collectionMapKey : collectionsMap.keySet()) {\n      if(collectionMapKey.equalsIgnoreCase(collectionName)) {\n        return collectionsMap.get(collectionMapKey).getActiveSlices();\n      }\n    }\n\n    throw new IOException(\"Slices not found for \" + collectionName);\n  }\n\n","sourceOld":"  public static Collection<Slice> getSlices(String collectionName, ZkStateReader zkStateReader, boolean checkAlias) throws IOException {\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    Map<String, DocCollection> collectionsMap = clusterState.getCollectionsMap();\n\n    // Check collection case sensitive\n    if(collectionsMap.containsKey(collectionName)) {\n      return collectionsMap.get(collectionName).getActiveSlices();\n    }\n\n    // Check collection case insensitive\n    for(String collectionMapKey : collectionsMap.keySet()) {\n      if(collectionMapKey.equalsIgnoreCase(collectionName)) {\n        return collectionsMap.get(collectionMapKey).getActiveSlices();\n      }\n    }\n\n    if(checkAlias) {\n      // check for collection alias\n      Aliases aliases = zkStateReader.getAliases();\n      String alias = aliases.getCollectionAlias(collectionName);\n      if (alias != null) {\n        Collection<Slice> slices = new ArrayList<>();\n\n        List<String> aliasList = StrUtils.splitSmart(alias, \",\", true);\n        for (String aliasCollectionName : aliasList) {\n          // Add all active slices for this alias collection\n          slices.addAll(collectionsMap.get(aliasCollectionName).getActiveSlices());\n        }\n\n        return slices;\n      }\n    }\n\n    throw new IOException(\"Slices not found for \" + collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c84df91ca6a2e8d6f26f185663112546a27f6b45","date":1536077760,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#getSlices(String,ZkStateReader,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#getSlices(String,ZkStateReader,boolean).mjava","sourceNew":"  public static Slice[] getSlices(String collectionName, ZkStateReader zkStateReader, boolean checkAlias) throws IOException {\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    Map<String, DocCollection> collectionsMap = clusterState.getCollectionsMap();\n\n    //TODO we should probably split collection by comma to query more than one\n    //  which is something already supported in other parts of Solr\n\n    // check for alias or collection\n    List<String> collections = checkAlias\n        ? zkStateReader.getAliases().resolveAliases(collectionName)  // if not an alias, returns collectionName\n        : Collections.singletonList(collectionName);\n    // Lookup all actives slices for these collections\n    List<Slice> slices = collections.stream()\n        .map(collectionsMap::get)\n        .filter(Objects::nonNull)\n        .flatMap(docCol -> Arrays.stream(docCol.getActiveSlicesArr()))\n        .collect(Collectors.toList());\n    if (!slices.isEmpty()) {\n      return slices.toArray(new Slice[slices.size()]);\n    }\n\n    // Check collection case insensitive\n    for(String collectionMapKey : collectionsMap.keySet()) {\n      if(collectionMapKey.equalsIgnoreCase(collectionName)) {\n        return collectionsMap.get(collectionMapKey).getActiveSlicesArr();\n      }\n    }\n\n    throw new IOException(\"Slices not found for \" + collectionName);\n  }\n\n","sourceOld":"  public static Collection<Slice> getSlices(String collectionName, ZkStateReader zkStateReader, boolean checkAlias) throws IOException {\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    Map<String, DocCollection> collectionsMap = clusterState.getCollectionsMap();\n\n    //TODO we should probably split collection by comma to query more than one\n    //  which is something already supported in other parts of Solr\n\n    // check for alias or collection\n    List<String> collections = checkAlias\n        ? zkStateReader.getAliases().resolveAliases(collectionName)  // if not an alias, returns collectionName\n        : Collections.singletonList(collectionName);\n    // Lookup all actives slices for these collections\n    List<Slice> slices = collections.stream()\n        .map(collectionsMap::get)\n        .filter(Objects::nonNull)\n        .flatMap(docCol -> docCol.getActiveSlices().stream())\n        .collect(Collectors.toList());\n    if (!slices.isEmpty()) {\n      return slices;\n    }\n\n    // Check collection case insensitive\n    for(String collectionMapKey : collectionsMap.keySet()) {\n      if(collectionMapKey.equalsIgnoreCase(collectionName)) {\n        return collectionsMap.get(collectionMapKey).getActiveSlices();\n      }\n    }\n\n    throw new IOException(\"Slices not found for \" + collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a209db4770770843a101e5dfe46086a63507fd3","date":1544624168,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#getSlices(String,ZkStateReader,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#getSlices(String,ZkStateReader,boolean).mjava","sourceNew":"  public static Slice[] getSlices(String collectionName, ZkStateReader zkStateReader, boolean checkAlias) throws IOException {\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    Map<String, DocCollection> collectionsMap = clusterState.getCollectionsMap();\n\n    //TODO we should probably split collection by comma to query more than one\n    //  which is something already supported in other parts of Solr\n\n    // check for alias or collection\n\n    List<String> allCollections = new ArrayList();\n    String[] collectionNames = collectionName.split(\",\");\n    for(String col : collectionNames) {\n      List<String> collections = checkAlias\n          ? zkStateReader.getAliases().resolveAliases(col)  // if not an alias, returns collectionName\n          : Collections.singletonList(collectionName);\n      allCollections.addAll(collections);\n    }\n\n    // Lookup all actives slices for these collections\n    List<Slice> slices = allCollections.stream()\n        .map(collectionsMap::get)\n        .filter(Objects::nonNull)\n        .flatMap(docCol -> Arrays.stream(docCol.getActiveSlicesArr()))\n        .collect(Collectors.toList());\n    if (!slices.isEmpty()) {\n      return slices.toArray(new Slice[slices.size()]);\n    }\n\n    // Check collection case insensitive\n    for(String collectionMapKey : collectionsMap.keySet()) {\n      if(collectionMapKey.equalsIgnoreCase(collectionName)) {\n        return collectionsMap.get(collectionMapKey).getActiveSlicesArr();\n      }\n    }\n\n    throw new IOException(\"Slices not found for \" + collectionName);\n  }\n\n","sourceOld":"  public static Slice[] getSlices(String collectionName, ZkStateReader zkStateReader, boolean checkAlias) throws IOException {\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    Map<String, DocCollection> collectionsMap = clusterState.getCollectionsMap();\n\n    //TODO we should probably split collection by comma to query more than one\n    //  which is something already supported in other parts of Solr\n\n    // check for alias or collection\n    List<String> collections = checkAlias\n        ? zkStateReader.getAliases().resolveAliases(collectionName)  // if not an alias, returns collectionName\n        : Collections.singletonList(collectionName);\n    // Lookup all actives slices for these collections\n    List<Slice> slices = collections.stream()\n        .map(collectionsMap::get)\n        .filter(Objects::nonNull)\n        .flatMap(docCol -> Arrays.stream(docCol.getActiveSlicesArr()))\n        .collect(Collectors.toList());\n    if (!slices.isEmpty()) {\n      return slices.toArray(new Slice[slices.size()]);\n    }\n\n    // Check collection case insensitive\n    for(String collectionMapKey : collectionsMap.keySet()) {\n      if(collectionMapKey.equalsIgnoreCase(collectionName)) {\n        return collectionsMap.get(collectionMapKey).getActiveSlicesArr();\n      }\n    }\n\n    throw new IOException(\"Slices not found for \" + collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","date":1571070979,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#getSlices(String,ZkStateReader,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#getSlices(String,ZkStateReader,boolean).mjava","sourceNew":"  public static Slice[] getSlices(String collectionName, ZkStateReader zkStateReader, boolean checkAlias) throws IOException {\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    Map<String, DocCollection> collectionsMap = clusterState.getCollectionsMap();\n\n    //TODO we should probably split collection by comma to query more than one\n    //  which is something already supported in other parts of Solr\n\n    // check for alias or collection\n\n    List<String> allCollections = new ArrayList();\n    String[] collectionNames = collectionName.split(\",\");\n    for(String col : collectionNames) {\n      List<String> collections = checkAlias\n          ? zkStateReader.getAliases().resolveAliases(col)  // if not an alias, returns collectionName\n          : Collections.singletonList(collectionName);\n      allCollections.addAll(collections);\n    }\n\n    // Lookup all actives slices for these collections\n    List<Slice> slices = allCollections.stream()\n        .map(collectionsMap::get)\n        .filter(Objects::nonNull)\n        .flatMap(docCol -> Arrays.stream(docCol.getActiveSlicesArr()))\n        .collect(Collectors.toList());\n    if (!slices.isEmpty()) {\n      return slices.toArray(new Slice[slices.size()]);\n    }\n\n    // Check collection case insensitive\n    for(Entry<String, DocCollection> entry : collectionsMap.entrySet()) {\n      if(entry.getKey().equalsIgnoreCase(collectionName)) {\n        return entry.getValue().getActiveSlicesArr();\n      }\n    }\n\n    throw new IOException(\"Slices not found for \" + collectionName);\n  }\n\n","sourceOld":"  public static Slice[] getSlices(String collectionName, ZkStateReader zkStateReader, boolean checkAlias) throws IOException {\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    Map<String, DocCollection> collectionsMap = clusterState.getCollectionsMap();\n\n    //TODO we should probably split collection by comma to query more than one\n    //  which is something already supported in other parts of Solr\n\n    // check for alias or collection\n\n    List<String> allCollections = new ArrayList();\n    String[] collectionNames = collectionName.split(\",\");\n    for(String col : collectionNames) {\n      List<String> collections = checkAlias\n          ? zkStateReader.getAliases().resolveAliases(col)  // if not an alias, returns collectionName\n          : Collections.singletonList(collectionName);\n      allCollections.addAll(collections);\n    }\n\n    // Lookup all actives slices for these collections\n    List<Slice> slices = allCollections.stream()\n        .map(collectionsMap::get)\n        .filter(Objects::nonNull)\n        .flatMap(docCol -> Arrays.stream(docCol.getActiveSlicesArr()))\n        .collect(Collectors.toList());\n    if (!slices.isEmpty()) {\n      return slices.toArray(new Slice[slices.size()]);\n    }\n\n    // Check collection case insensitive\n    for(String collectionMapKey : collectionsMap.keySet()) {\n      if(collectionMapKey.equalsIgnoreCase(collectionName)) {\n        return collectionsMap.get(collectionMapKey).getActiveSlicesArr();\n      }\n    }\n\n    throw new IOException(\"Slices not found for \" + collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#getSlices(String,ZkStateReader,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#getSlices(String,ZkStateReader,boolean).mjava","sourceNew":"  public static Slice[] getSlices(String collectionName, ZkStateReader zkStateReader, boolean checkAlias) throws IOException {\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    Map<String, DocCollection> collectionsMap = clusterState.getCollectionsMap();\n\n    //TODO we should probably split collection by comma to query more than one\n    //  which is something already supported in other parts of Solr\n\n    // check for alias or collection\n\n    List<String> allCollections = new ArrayList();\n    String[] collectionNames = collectionName.split(\",\");\n    for(String col : collectionNames) {\n      List<String> collections = checkAlias\n          ? zkStateReader.getAliases().resolveAliases(col)  // if not an alias, returns collectionName\n          : Collections.singletonList(collectionName);\n      allCollections.addAll(collections);\n    }\n\n    // Lookup all actives slices for these collections\n    List<Slice> slices = allCollections.stream()\n        .map(collectionsMap::get)\n        .filter(Objects::nonNull)\n        .flatMap(docCol -> Arrays.stream(docCol.getActiveSlicesArr()))\n        .collect(Collectors.toList());\n    if (!slices.isEmpty()) {\n      return slices.toArray(new Slice[slices.size()]);\n    }\n\n    // Check collection case insensitive\n    for(Entry<String, DocCollection> entry : collectionsMap.entrySet()) {\n      if(entry.getKey().equalsIgnoreCase(collectionName)) {\n        return entry.getValue().getActiveSlicesArr();\n      }\n    }\n\n    throw new IOException(\"Slices not found for \" + collectionName);\n  }\n\n","sourceOld":"  public static Slice[] getSlices(String collectionName, ZkStateReader zkStateReader, boolean checkAlias) throws IOException {\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    Map<String, DocCollection> collectionsMap = clusterState.getCollectionsMap();\n\n    //TODO we should probably split collection by comma to query more than one\n    //  which is something already supported in other parts of Solr\n\n    // check for alias or collection\n\n    List<String> allCollections = new ArrayList();\n    String[] collectionNames = collectionName.split(\",\");\n    for(String col : collectionNames) {\n      List<String> collections = checkAlias\n          ? zkStateReader.getAliases().resolveAliases(col)  // if not an alias, returns collectionName\n          : Collections.singletonList(collectionName);\n      allCollections.addAll(collections);\n    }\n\n    // Lookup all actives slices for these collections\n    List<Slice> slices = allCollections.stream()\n        .map(collectionsMap::get)\n        .filter(Objects::nonNull)\n        .flatMap(docCol -> Arrays.stream(docCol.getActiveSlicesArr()))\n        .collect(Collectors.toList());\n    if (!slices.isEmpty()) {\n      return slices.toArray(new Slice[slices.size()]);\n    }\n\n    // Check collection case insensitive\n    for(String collectionMapKey : collectionsMap.keySet()) {\n      if(collectionMapKey.equalsIgnoreCase(collectionName)) {\n        return collectionsMap.get(collectionMapKey).getActiveSlicesArr();\n      }\n    }\n\n    throw new IOException(\"Slices not found for \" + collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75","date":1591744896,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#getSlices(String,ZkStateReader,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream#getSlices(String,ZkStateReader,boolean).mjava","sourceNew":"  public static Slice[] getSlices(String collectionName, ZkStateReader zkStateReader, boolean checkAlias) throws IOException {\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    Map<String, DocCollection> collectionsMap = clusterState.getCollectionsMap();\n\n    //TODO we should probably split collection by comma to query more than one\n    //  which is something already supported in other parts of Solr\n\n    // check for alias or collection\n\n    List<String> allCollections = new ArrayList<>();\n    String[] collectionNames = collectionName.split(\",\");\n    for(String col : collectionNames) {\n      List<String> collections = checkAlias\n          ? zkStateReader.getAliases().resolveAliases(col)  // if not an alias, returns collectionName\n          : Collections.singletonList(collectionName);\n      allCollections.addAll(collections);\n    }\n\n    // Lookup all actives slices for these collections\n    List<Slice> slices = allCollections.stream()\n        .map(collectionsMap::get)\n        .filter(Objects::nonNull)\n        .flatMap(docCol -> Arrays.stream(docCol.getActiveSlicesArr()))\n        .collect(Collectors.toList());\n    if (!slices.isEmpty()) {\n      return slices.toArray(new Slice[slices.size()]);\n    }\n\n    // Check collection case insensitive\n    for(Entry<String, DocCollection> entry : collectionsMap.entrySet()) {\n      if(entry.getKey().equalsIgnoreCase(collectionName)) {\n        return entry.getValue().getActiveSlicesArr();\n      }\n    }\n\n    throw new IOException(\"Slices not found for \" + collectionName);\n  }\n\n","sourceOld":"  public static Slice[] getSlices(String collectionName, ZkStateReader zkStateReader, boolean checkAlias) throws IOException {\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    Map<String, DocCollection> collectionsMap = clusterState.getCollectionsMap();\n\n    //TODO we should probably split collection by comma to query more than one\n    //  which is something already supported in other parts of Solr\n\n    // check for alias or collection\n\n    List<String> allCollections = new ArrayList();\n    String[] collectionNames = collectionName.split(\",\");\n    for(String col : collectionNames) {\n      List<String> collections = checkAlias\n          ? zkStateReader.getAliases().resolveAliases(col)  // if not an alias, returns collectionName\n          : Collections.singletonList(collectionName);\n      allCollections.addAll(collections);\n    }\n\n    // Lookup all actives slices for these collections\n    List<Slice> slices = allCollections.stream()\n        .map(collectionsMap::get)\n        .filter(Objects::nonNull)\n        .flatMap(docCol -> Arrays.stream(docCol.getActiveSlicesArr()))\n        .collect(Collectors.toList());\n    if (!slices.isEmpty()) {\n      return slices.toArray(new Slice[slices.size()]);\n    }\n\n    // Check collection case insensitive\n    for(Entry<String, DocCollection> entry : collectionsMap.entrySet()) {\n      if(entry.getKey().equalsIgnoreCase(collectionName)) {\n        return entry.getValue().getActiveSlicesArr();\n      }\n    }\n\n    throw new IOException(\"Slices not found for \" + collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0":["5a209db4770770843a101e5dfe46086a63507fd3"],"c84df91ca6a2e8d6f26f185663112546a27f6b45":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06"],"6b824daa61db3f30b91a22213d6c04e1fa2e2b06":["8c969f15cd04d31e520319c619a445ae21f02d72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8c969f15cd04d31e520319c619a445ae21f02d72"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0"],"5a209db4770770843a101e5dfe46086a63507fd3":["c84df91ca6a2e8d6f26f185663112546a27f6b45"],"8c969f15cd04d31e520319c619a445ae21f02d72":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"],"b0b597c65628ca9e73913a07e81691f8229bae35":["5a209db4770770843a101e5dfe46086a63507fd3","7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0"]},"commit2Childs":{"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75","b0b597c65628ca9e73913a07e81691f8229bae35"],"c84df91ca6a2e8d6f26f185663112546a27f6b45":["5a209db4770770843a101e5dfe46086a63507fd3"],"6b824daa61db3f30b91a22213d6c04e1fa2e2b06":["c84df91ca6a2e8d6f26f185663112546a27f6b45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","8c969f15cd04d31e520319c619a445ae21f02d72"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"5a209db4770770843a101e5dfe46086a63507fd3":["7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","b0b597c65628ca9e73913a07e81691f8229bae35"],"8c969f15cd04d31e520319c619a445ae21f02d72":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06","a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}