{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrClient#getById(String,String,SolrParams).mjava","commits":[{"id":"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df","date":1425554964,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrClient#getById(String,String,SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Retrieves the SolrDocument associated with the given identifier and uses\n   * the SolrParams to execute the request.\n   *\n   * @param collection the Solr collection to query\n   * @param id the id\n   * @param params additional parameters to add to the query\n   *\n   * @return retrieved SolrDocument, or null if no document is found.\n   *\n   * @throws IOException If there is a low-level I/O error.\n   * @throws SolrServerException if there is an error on the server\n   */\n  public SolrDocument getById(String collection, String id, SolrParams params) throws SolrServerException, IOException {\n    SolrDocumentList docs = getById(collection, Arrays.asList(id), params);\n    if (!docs.isEmpty()) {\n      return docs.get(0);\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b4407017a35dea85f652ec066e4565818dd75436"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrClient#getById(String,String,SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Retrieves the SolrDocument associated with the given identifier and uses\n   * the SolrParams to execute the request.\n   *\n   * @param collection the Solr collection to query\n   * @param id the id\n   * @param params additional parameters to add to the query\n   *\n   * @return retrieved SolrDocument, or null if no document is found.\n   *\n   * @throws IOException If there is a low-level I/O error.\n   * @throws SolrServerException if there is an error on the server\n   */\n  public SolrDocument getById(String collection, String id, SolrParams params) throws SolrServerException, IOException {\n    SolrDocumentList docs = getById(collection, Arrays.asList(id), params);\n    if (!docs.isEmpty()) {\n      return docs.get(0);\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4407017a35dea85f652ec066e4565818dd75436","date":1431296729,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrClient#getById(String,String,SolrParams).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrClient#getById(String,String,SolrParams).mjava","sourceNew":"  /**\n   * Retrieves the SolrDocument associated with the given identifier and uses\n   * the SolrParams to execute the request.\n   *\n   * @param collection the Solr collection to query\n   * @param id the id\n   * @param params additional parameters to add to the query\n   *\n   * @return retrieved SolrDocument, or null if no document is found.\n   *\n   * @throws IOException If there is a low-level I/O error.\n   * @throws SolrServerException if there is an error on the server\n   */\n  public SolrDocument getById(String collection, String id, SolrParams params) throws SolrServerException, IOException {\n    SolrDocumentList docs = getById(collection, Collections.singletonList(id), params);\n    if (!docs.isEmpty()) {\n      return docs.get(0);\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Retrieves the SolrDocument associated with the given identifier and uses\n   * the SolrParams to execute the request.\n   *\n   * @param collection the Solr collection to query\n   * @param id the id\n   * @param params additional parameters to add to the query\n   *\n   * @return retrieved SolrDocument, or null if no document is found.\n   *\n   * @throws IOException If there is a low-level I/O error.\n   * @throws SolrServerException if there is an error on the server\n   */\n  public SolrDocument getById(String collection, String id, SolrParams params) throws SolrServerException, IOException {\n    SolrDocumentList docs = getById(collection, Arrays.asList(id), params);\n    if (!docs.isEmpty()) {\n      return docs.get(0);\n    }\n    return null;\n  }\n\n","bugFix":["7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b4407017a35dea85f652ec066e4565818dd75436":["7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4407017a35dea85f652ec066e4565818dd75436"],"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"b4407017a35dea85f652ec066e4565818dd75436":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b4407017a35dea85f652ec066e4565818dd75436"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}