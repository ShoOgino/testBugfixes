{"path":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testRandomTermLookup().mjava","commits":[{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testRandomTermLookup().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandomTermLookup() throws Exception {\n    Directory dir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random, dir,\n                                                newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n    w.w.setInfoStream(VERBOSE ? System.out : null);\n\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", Field.Index.NOT_ANALYZED);\n    doc.add(f);\n      \n    final int NUM_TERMS = (int) (1000*RANDOM_MULTIPLIER * (1+random.nextDouble()));\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_TERMS=\" + NUM_TERMS);\n    }\n\n    final Set<String> allTerms = new HashSet<String>();\n    while(allTerms.size() < NUM_TERMS) {\n      allTerms.add(simpleRandomString(random));\n    }\n\n    for(String term : allTerms) {\n      f.setValue(term);\n      w.addDocument(doc);\n    }\n\n    // turn writer into reader:\n    if (VERBOSE) {\n      System.out.println(\"TEST: get reader\");\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"TEST: got reader=\" + r);\n    }\n    IndexSearcher s = new IndexSearcher(r);\n    w.close();\n\n    final List<String> allTermsList = new ArrayList<String>(allTerms);\n    Collections.shuffle(allTermsList, random);\n\n    // verify exact lookup\n    for(String term : allTermsList) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: term=\" + term);\n      }\n      assertEquals(\"term=\" + term, 1, s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testRandomTermLookup().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testRandomTermLookup().mjava","sourceNew":"  public void testRandomTermLookup() throws Exception {\n    Directory dir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random, dir,\n                                                newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n    w.w.setInfoStream(VERBOSE ? System.out : null);\n\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", StringField.TYPE_UNSTORED);\n    doc.add(f);\n      \n    final int NUM_TERMS = (int) (1000*RANDOM_MULTIPLIER * (1+random.nextDouble()));\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_TERMS=\" + NUM_TERMS);\n    }\n\n    final Set<String> allTerms = new HashSet<String>();\n    while(allTerms.size() < NUM_TERMS) {\n      allTerms.add(simpleRandomString(random));\n    }\n\n    for(String term : allTerms) {\n      f.setValue(term);\n      w.addDocument(doc);\n    }\n\n    // turn writer into reader:\n    if (VERBOSE) {\n      System.out.println(\"TEST: get reader\");\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"TEST: got reader=\" + r);\n    }\n    IndexSearcher s = new IndexSearcher(r);\n    w.close();\n\n    final List<String> allTermsList = new ArrayList<String>(allTerms);\n    Collections.shuffle(allTermsList, random);\n\n    // verify exact lookup\n    for(String term : allTermsList) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: term=\" + term);\n      }\n      assertEquals(\"term=\" + term, 1, s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomTermLookup() throws Exception {\n    Directory dir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random, dir,\n                                                newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n    w.w.setInfoStream(VERBOSE ? System.out : null);\n\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", Field.Index.NOT_ANALYZED);\n    doc.add(f);\n      \n    final int NUM_TERMS = (int) (1000*RANDOM_MULTIPLIER * (1+random.nextDouble()));\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_TERMS=\" + NUM_TERMS);\n    }\n\n    final Set<String> allTerms = new HashSet<String>();\n    while(allTerms.size() < NUM_TERMS) {\n      allTerms.add(simpleRandomString(random));\n    }\n\n    for(String term : allTerms) {\n      f.setValue(term);\n      w.addDocument(doc);\n    }\n\n    // turn writer into reader:\n    if (VERBOSE) {\n      System.out.println(\"TEST: get reader\");\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"TEST: got reader=\" + r);\n    }\n    IndexSearcher s = new IndexSearcher(r);\n    w.close();\n\n    final List<String> allTermsList = new ArrayList<String>(allTerms);\n    Collections.shuffle(allTermsList, random);\n\n    // verify exact lookup\n    for(String term : allTermsList) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: term=\" + term);\n      }\n      assertEquals(\"term=\" + term, 1, s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testRandomTermLookup().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testRandomTermLookup().mjava","sourceNew":"  public void testRandomTermLookup() throws Exception {\n    Directory dir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random, dir,\n                                                newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", StringField.TYPE_UNSTORED);\n    doc.add(f);\n      \n    final int NUM_TERMS = (int) (1000*RANDOM_MULTIPLIER * (1+random.nextDouble()));\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_TERMS=\" + NUM_TERMS);\n    }\n\n    final Set<String> allTerms = new HashSet<String>();\n    while(allTerms.size() < NUM_TERMS) {\n      allTerms.add(simpleRandomString(random));\n    }\n\n    for(String term : allTerms) {\n      f.setValue(term);\n      w.addDocument(doc);\n    }\n\n    // turn writer into reader:\n    if (VERBOSE) {\n      System.out.println(\"TEST: get reader\");\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"TEST: got reader=\" + r);\n    }\n    IndexSearcher s = new IndexSearcher(r);\n    w.close();\n\n    final List<String> allTermsList = new ArrayList<String>(allTerms);\n    Collections.shuffle(allTermsList, random);\n\n    // verify exact lookup\n    for(String term : allTermsList) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: term=\" + term);\n      }\n      assertEquals(\"term=\" + term, 1, s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomTermLookup() throws Exception {\n    Directory dir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random, dir,\n                                                newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n    w.w.setInfoStream(VERBOSE ? System.out : null);\n\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", StringField.TYPE_UNSTORED);\n    doc.add(f);\n      \n    final int NUM_TERMS = (int) (1000*RANDOM_MULTIPLIER * (1+random.nextDouble()));\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_TERMS=\" + NUM_TERMS);\n    }\n\n    final Set<String> allTerms = new HashSet<String>();\n    while(allTerms.size() < NUM_TERMS) {\n      allTerms.add(simpleRandomString(random));\n    }\n\n    for(String term : allTerms) {\n      f.setValue(term);\n      w.addDocument(doc);\n    }\n\n    // turn writer into reader:\n    if (VERBOSE) {\n      System.out.println(\"TEST: get reader\");\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"TEST: got reader=\" + r);\n    }\n    IndexSearcher s = new IndexSearcher(r);\n    w.close();\n\n    final List<String> allTermsList = new ArrayList<String>(allTerms);\n    Collections.shuffle(allTermsList, random);\n\n    // verify exact lookup\n    for(String term : allTermsList) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: term=\" + term);\n      }\n      assertEquals(\"term=\" + term, 1, s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testRandomTermLookup().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testRandomTermLookup().mjava","sourceNew":"  public void testRandomTermLookup() throws Exception {\n    Directory dir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random, dir,\n                                                newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", StringField.TYPE_UNSTORED);\n    doc.add(f);\n      \n    final int NUM_TERMS = (int) (1000*RANDOM_MULTIPLIER * (1+random.nextDouble()));\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_TERMS=\" + NUM_TERMS);\n    }\n\n    final Set<String> allTerms = new HashSet<String>();\n    while(allTerms.size() < NUM_TERMS) {\n      allTerms.add(simpleRandomString(random));\n    }\n\n    for(String term : allTerms) {\n      f.setValue(term);\n      w.addDocument(doc);\n    }\n\n    // turn writer into reader:\n    if (VERBOSE) {\n      System.out.println(\"TEST: get reader\");\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"TEST: got reader=\" + r);\n    }\n    IndexSearcher s = new IndexSearcher(r);\n    w.close();\n\n    final List<String> allTermsList = new ArrayList<String>(allTerms);\n    Collections.shuffle(allTermsList, random);\n\n    // verify exact lookup\n    for(String term : allTermsList) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: term=\" + term);\n      }\n      assertEquals(\"term=\" + term, 1, s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomTermLookup() throws Exception {\n    Directory dir = newDirectory();\n\n    RandomIndexWriter w = new RandomIndexWriter(random, dir,\n                                                newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n    Document doc = new Document();\n    Field f = newField(\"field\", \"\", StringField.TYPE_UNSTORED);\n    doc.add(f);\n      \n    final int NUM_TERMS = (int) (1000*RANDOM_MULTIPLIER * (1+random.nextDouble()));\n    if (VERBOSE) {\n      System.out.println(\"TEST: NUM_TERMS=\" + NUM_TERMS);\n    }\n\n    final Set<String> allTerms = new HashSet<String>();\n    while(allTerms.size() < NUM_TERMS) {\n      allTerms.add(simpleRandomString(random));\n    }\n\n    for(String term : allTerms) {\n      f.setValue(term);\n      w.addDocument(doc);\n    }\n\n    // turn writer into reader:\n    if (VERBOSE) {\n      System.out.println(\"TEST: get reader\");\n    }\n    IndexReader r = w.getReader();\n    if (VERBOSE) {\n      System.out.println(\"TEST: got reader=\" + r);\n    }\n    IndexSearcher s = new IndexSearcher(r);\n    w.close();\n\n    final List<String> allTermsList = new ArrayList<String>(allTerms);\n    Collections.shuffle(allTermsList, random);\n\n    // verify exact lookup\n    for(String term : allTermsList) {\n      if (VERBOSE) {\n        System.out.println(\"TEST: term=\" + term);\n      }\n      assertEquals(\"term=\" + term, 1, s.search(new TermQuery(new Term(\"field\", term)), 1).totalHits);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["06584e6e98d592b34e1329b384182f368d2025e8"],"06584e6e98d592b34e1329b384182f368d2025e8":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06584e6e98d592b34e1329b384182f368d2025e8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["06584e6e98d592b34e1329b384182f368d2025e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}