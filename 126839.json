{"path":"solr/core/src/java/org/apache/solr/search/Grouping#searchWithTimeLimiter(Filter,Collector).mjava","commits":[{"id":"a250ecd3e83b1c6595bcae0474f5b258df42021b","date":1330943490,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping#searchWithTimeLimiter(Filter,Collector).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Invokes search with the specified filter and collector.  \n   * If a time limit has been specified, wrap the collector in a TimeLimitingCollector\n   */\n  private void searchWithTimeLimiter(final Filter luceneFilter, Collector collector) throws IOException {\n    if (cmd.getTimeAllowed() > 0) {\n      if (timeLimitingCollector == null) {\n        timeLimitingCollector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), cmd.getTimeAllowed());\n      } else {\n        /*\n         * This is so the same timer can be used for grouping's multiple phases.   \n         * We don't want to create a new TimeLimitingCollector for each phase because that would \n         * reset the timer for each phase.  If time runs out during the first phase, the \n         * second phase should timeout quickly.\n         */\n        timeLimitingCollector.setCollector(collector);\n      }\n      collector = timeLimitingCollector;\n    }\n    try {\n      searcher.search(query, luceneFilter, collector);\n    } catch (TimeLimitingCollector.TimeExceededException x) {\n      logger.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n      qr.setPartialResults(true);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping#searchWithTimeLimiter(Filter,Collector).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Invokes search with the specified filter and collector.  \n   * If a time limit has been specified, wrap the collector in a TimeLimitingCollector\n   */\n  private void searchWithTimeLimiter(final Filter luceneFilter, Collector collector) throws IOException {\n    if (cmd.getTimeAllowed() > 0) {\n      if (timeLimitingCollector == null) {\n        timeLimitingCollector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), cmd.getTimeAllowed());\n      } else {\n        /*\n         * This is so the same timer can be used for grouping's multiple phases.   \n         * We don't want to create a new TimeLimitingCollector for each phase because that would \n         * reset the timer for each phase.  If time runs out during the first phase, the \n         * second phase should timeout quickly.\n         */\n        timeLimitingCollector.setCollector(collector);\n      }\n      collector = timeLimitingCollector;\n    }\n    try {\n      searcher.search(query, luceneFilter, collector);\n    } catch (TimeLimitingCollector.TimeExceededException x) {\n      logger.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n      qr.setPartialResults(true);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping#searchWithTimeLimiter(Filter,Collector).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping#searchWithTimeLimiter(Filter,Collector).mjava","sourceNew":"  /**\n   * Invokes search with the specified filter and collector.  \n   * If a time limit has been specified, wrap the collector in a TimeLimitingCollector\n   */\n  private void searchWithTimeLimiter(final Filter luceneFilter, Collector collector) throws IOException {\n    if (cmd.getTimeAllowed() > 0) {\n      if (timeLimitingCollector == null) {\n        timeLimitingCollector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), cmd.getTimeAllowed());\n      } else {\n        /*\n         * This is so the same timer can be used for grouping's multiple phases.   \n         * We don't want to create a new TimeLimitingCollector for each phase because that would \n         * reset the timer for each phase.  If time runs out during the first phase, the \n         * second phase should timeout quickly.\n         */\n        timeLimitingCollector.setCollector(collector);\n      }\n      collector = timeLimitingCollector;\n    }\n    try {\n      searcher.search(query, luceneFilter, collector);\n    } catch (TimeLimitingCollector.TimeExceededException x) {\n      logger.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n      qr.setPartialResults(true);\n    }\n  }\n\n","sourceOld":"  /**\n   * Invokes search with the specified filter and collector.  \n   * If a time limit has been specified, wrap the collector in a TimeLimitingCollector\n   */\n  private void searchWithTimeLimiter(final Filter luceneFilter, Collector collector) throws IOException {\n    if (cmd.getTimeAllowed() > 0) {\n      if (timeLimitingCollector == null) {\n        timeLimitingCollector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), cmd.getTimeAllowed());\n      } else {\n        /*\n         * This is so the same timer can be used for grouping's multiple phases.   \n         * We don't want to create a new TimeLimitingCollector for each phase because that would \n         * reset the timer for each phase.  If time runs out during the first phase, the \n         * second phase should timeout quickly.\n         */\n        timeLimitingCollector.setCollector(collector);\n      }\n      collector = timeLimitingCollector;\n    }\n    try {\n      searcher.search(query, luceneFilter, collector);\n    } catch (TimeLimitingCollector.TimeExceededException x) {\n      logger.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n      qr.setPartialResults(true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping#searchWithTimeLimiter(Filter,Collector).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping#searchWithTimeLimiter(Filter,Collector).mjava","sourceNew":"  /**\n   * Invokes search with the specified filter and collector.  \n   * If a time limit has been specified, wrap the collector in a TimeLimitingCollector\n   */\n  private void searchWithTimeLimiter(final Filter luceneFilter, Collector collector) throws IOException {\n    if (cmd.getTimeAllowed() > 0) {\n      if (timeLimitingCollector == null) {\n        timeLimitingCollector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), cmd.getTimeAllowed());\n      } else {\n        /*\n         * This is so the same timer can be used for grouping's multiple phases.   \n         * We don't want to create a new TimeLimitingCollector for each phase because that would \n         * reset the timer for each phase.  If time runs out during the first phase, the \n         * second phase should timeout quickly.\n         */\n        timeLimitingCollector.setCollector(collector);\n      }\n      collector = timeLimitingCollector;\n    }\n    try {\n      searcher.search(query, luceneFilter, collector);\n    } catch (TimeLimitingCollector.TimeExceededException x) {\n      logger.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n      qr.setPartialResults(true);\n    }\n  }\n\n","sourceOld":"  /**\n   * Invokes search with the specified filter and collector.  \n   * If a time limit has been specified, wrap the collector in a TimeLimitingCollector\n   */\n  private void searchWithTimeLimiter(final Filter luceneFilter, Collector collector) throws IOException {\n    if (cmd.getTimeAllowed() > 0) {\n      if (timeLimitingCollector == null) {\n        timeLimitingCollector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), cmd.getTimeAllowed());\n      } else {\n        /*\n         * This is so the same timer can be used for grouping's multiple phases.   \n         * We don't want to create a new TimeLimitingCollector for each phase because that would \n         * reset the timer for each phase.  If time runs out during the first phase, the \n         * second phase should timeout quickly.\n         */\n        timeLimitingCollector.setCollector(collector);\n      }\n      collector = timeLimitingCollector;\n    }\n    try {\n      searcher.search(query, luceneFilter, collector);\n    } catch (TimeLimitingCollector.TimeExceededException x) {\n      logger.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n      qr.setPartialResults(true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f001da93ec624cbfbf3655c529836b5b1ec1aa46","date":1412885266,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping#searchWithTimeLimiter(Filter,Collector).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping#searchWithTimeLimiter(Filter,Collector).mjava","sourceNew":"  /**\n   * Invokes search with the specified filter and collector.  \n   * If a time limit has been specified, wrap the collector in a TimeLimitingCollector\n   */\n  private void searchWithTimeLimiter(final Filter luceneFilter, Collector collector) throws IOException {\n    if (cmd.getTimeAllowed() > 0) {\n      if (timeLimitingCollector == null) {\n        timeLimitingCollector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), cmd.getTimeAllowed());\n      } else {\n        /*\n         * This is so the same timer can be used for grouping's multiple phases.   \n         * We don't want to create a new TimeLimitingCollector for each phase because that would \n         * reset the timer for each phase.  If time runs out during the first phase, the \n         * second phase should timeout quickly.\n         */\n        timeLimitingCollector.setCollector(collector);\n      }\n      collector = timeLimitingCollector;\n    }\n    try {\n      searcher.search(query, luceneFilter, collector);\n    } catch (TimeLimitingCollector.TimeExceededException x) {\n      logger.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n      qr.setPartialResults(true);\n    } catch (ExitableDirectoryReader.ExitingReaderException e) {\n      logger.warn( \"Query: \" + query + \"; \" + e.getMessage() );\n      qr.setPartialResults(true);\n    }\n  }\n\n","sourceOld":"  /**\n   * Invokes search with the specified filter and collector.  \n   * If a time limit has been specified, wrap the collector in a TimeLimitingCollector\n   */\n  private void searchWithTimeLimiter(final Filter luceneFilter, Collector collector) throws IOException {\n    if (cmd.getTimeAllowed() > 0) {\n      if (timeLimitingCollector == null) {\n        timeLimitingCollector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), cmd.getTimeAllowed());\n      } else {\n        /*\n         * This is so the same timer can be used for grouping's multiple phases.   \n         * We don't want to create a new TimeLimitingCollector for each phase because that would \n         * reset the timer for each phase.  If time runs out during the first phase, the \n         * second phase should timeout quickly.\n         */\n        timeLimitingCollector.setCollector(collector);\n      }\n      collector = timeLimitingCollector;\n    }\n    try {\n      searcher.search(query, luceneFilter, collector);\n    } catch (TimeLimitingCollector.TimeExceededException x) {\n      logger.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n      qr.setPartialResults(true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping#searchWithTimeLimiter(Filter,Collector).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping#searchWithTimeLimiter(Filter,Collector).mjava","sourceNew":"  /**\n   * Invokes search with the specified filter and collector.  \n   * If a time limit has been specified, wrap the collector in a TimeLimitingCollector\n   */\n  private void searchWithTimeLimiter(final Filter luceneFilter, Collector collector) throws IOException {\n    if (cmd.getTimeAllowed() > 0) {\n      if (timeLimitingCollector == null) {\n        timeLimitingCollector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), cmd.getTimeAllowed());\n      } else {\n        /*\n         * This is so the same timer can be used for grouping's multiple phases.   \n         * We don't want to create a new TimeLimitingCollector for each phase because that would \n         * reset the timer for each phase.  If time runs out during the first phase, the \n         * second phase should timeout quickly.\n         */\n        timeLimitingCollector.setCollector(collector);\n      }\n      collector = timeLimitingCollector;\n    }\n    try {\n      searcher.search(query, luceneFilter, collector);\n    } catch (TimeLimitingCollector.TimeExceededException x) {\n      logger.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n      qr.setPartialResults(true);\n    } catch (ExitableDirectoryReader.ExitingReaderException e) {\n      logger.warn( \"Query: \" + query + \"; \" + e.getMessage() );\n      qr.setPartialResults(true);\n    }\n  }\n\n","sourceOld":"  /**\n   * Invokes search with the specified filter and collector.  \n   * If a time limit has been specified, wrap the collector in a TimeLimitingCollector\n   */\n  private void searchWithTimeLimiter(final Filter luceneFilter, Collector collector) throws IOException {\n    if (cmd.getTimeAllowed() > 0) {\n      if (timeLimitingCollector == null) {\n        timeLimitingCollector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), cmd.getTimeAllowed());\n      } else {\n        /*\n         * This is so the same timer can be used for grouping's multiple phases.   \n         * We don't want to create a new TimeLimitingCollector for each phase because that would \n         * reset the timer for each phase.  If time runs out during the first phase, the \n         * second phase should timeout quickly.\n         */\n        timeLimitingCollector.setCollector(collector);\n      }\n      collector = timeLimitingCollector;\n    }\n    try {\n      searcher.search(query, luceneFilter, collector);\n    } catch (TimeLimitingCollector.TimeExceededException x) {\n      logger.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n      qr.setPartialResults(true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6e1dc1bb4254226c8d7151b596cc1be40671751","date":1421876355,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping#searchWithTimeLimiter(Filter,Collector).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping#searchWithTimeLimiter(Filter,Collector).mjava","sourceNew":"  /**\n   * Invokes search with the specified filter and collector.  \n   * If a time limit has been specified, wrap the collector in a TimeLimitingCollector\n   */\n  private void searchWithTimeLimiter(final Filter luceneFilter, Collector collector) throws IOException {\n    if (cmd.getTimeAllowed() > 0) {\n      if (timeLimitingCollector == null) {\n        timeLimitingCollector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), cmd.getTimeAllowed());\n      } else {\n        /*\n         * This is so the same timer can be used for grouping's multiple phases.   \n         * We don't want to create a new TimeLimitingCollector for each phase because that would \n         * reset the timer for each phase.  If time runs out during the first phase, the \n         * second phase should timeout quickly.\n         */\n        timeLimitingCollector.setCollector(collector);\n      }\n      collector = timeLimitingCollector;\n    }\n    try {\n      searcher.search(query, luceneFilter, collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      logger.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n      qr.setPartialResults(true);\n    }\n  }\n\n","sourceOld":"  /**\n   * Invokes search with the specified filter and collector.  \n   * If a time limit has been specified, wrap the collector in a TimeLimitingCollector\n   */\n  private void searchWithTimeLimiter(final Filter luceneFilter, Collector collector) throws IOException {\n    if (cmd.getTimeAllowed() > 0) {\n      if (timeLimitingCollector == null) {\n        timeLimitingCollector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), cmd.getTimeAllowed());\n      } else {\n        /*\n         * This is so the same timer can be used for grouping's multiple phases.   \n         * We don't want to create a new TimeLimitingCollector for each phase because that would \n         * reset the timer for each phase.  If time runs out during the first phase, the \n         * second phase should timeout quickly.\n         */\n        timeLimitingCollector.setCollector(collector);\n      }\n      collector = timeLimitingCollector;\n    }\n    try {\n      searcher.search(query, luceneFilter, collector);\n    } catch (TimeLimitingCollector.TimeExceededException x) {\n      logger.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n      qr.setPartialResults(true);\n    } catch (ExitableDirectoryReader.ExitingReaderException e) {\n      logger.warn( \"Query: \" + query + \"; \" + e.getMessage() );\n      qr.setPartialResults(true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping#searchWithTimeLimiter(Filter,Collector).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping#searchWithTimeLimiter(Filter,Collector).mjava","sourceNew":"  /**\n   * Invokes search with the specified filter and collector.  \n   * If a time limit has been specified, wrap the collector in a TimeLimitingCollector\n   */\n  private void searchWithTimeLimiter(final Filter luceneFilter, Collector collector) throws IOException {\n    if (cmd.getTimeAllowed() > 0) {\n      if (timeLimitingCollector == null) {\n        timeLimitingCollector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), cmd.getTimeAllowed());\n      } else {\n        /*\n         * This is so the same timer can be used for grouping's multiple phases.   \n         * We don't want to create a new TimeLimitingCollector for each phase because that would \n         * reset the timer for each phase.  If time runs out during the first phase, the \n         * second phase should timeout quickly.\n         */\n        timeLimitingCollector.setCollector(collector);\n      }\n      collector = timeLimitingCollector;\n    }\n    try {\n      Query q = query;\n      if (luceneFilter != null) {\n        q = new FilteredQuery(q, luceneFilter);\n      }\n      searcher.search(q, collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      logger.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n      qr.setPartialResults(true);\n    }\n  }\n\n","sourceOld":"  /**\n   * Invokes search with the specified filter and collector.  \n   * If a time limit has been specified, wrap the collector in a TimeLimitingCollector\n   */\n  private void searchWithTimeLimiter(final Filter luceneFilter, Collector collector) throws IOException {\n    if (cmd.getTimeAllowed() > 0) {\n      if (timeLimitingCollector == null) {\n        timeLimitingCollector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), cmd.getTimeAllowed());\n      } else {\n        /*\n         * This is so the same timer can be used for grouping's multiple phases.   \n         * We don't want to create a new TimeLimitingCollector for each phase because that would \n         * reset the timer for each phase.  If time runs out during the first phase, the \n         * second phase should timeout quickly.\n         */\n        timeLimitingCollector.setCollector(collector);\n      }\n      collector = timeLimitingCollector;\n    }\n    try {\n      searcher.search(query, luceneFilter, collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      logger.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n      qr.setPartialResults(true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping#searchWithTimeLimiter(Filter,Collector).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping#searchWithTimeLimiter(Filter,Collector).mjava","sourceNew":"  /**\n   * Invokes search with the specified filter and collector.  \n   * If a time limit has been specified, wrap the collector in a TimeLimitingCollector\n   */\n  private void searchWithTimeLimiter(final Filter luceneFilter, Collector collector) throws IOException {\n    if (cmd.getTimeAllowed() > 0) {\n      if (timeLimitingCollector == null) {\n        timeLimitingCollector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), cmd.getTimeAllowed());\n      } else {\n        /*\n         * This is so the same timer can be used for grouping's multiple phases.   \n         * We don't want to create a new TimeLimitingCollector for each phase because that would \n         * reset the timer for each phase.  If time runs out during the first phase, the \n         * second phase should timeout quickly.\n         */\n        timeLimitingCollector.setCollector(collector);\n      }\n      collector = timeLimitingCollector;\n    }\n    try {\n      Query q = query;\n      if (luceneFilter != null) {\n        q = new BooleanQuery.Builder()\n            .add(q, Occur.MUST)\n            .add(luceneFilter, Occur.FILTER)\n            .build();\n      }\n      searcher.search(q, collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      logger.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n      qr.setPartialResults(true);\n    }\n  }\n\n","sourceOld":"  /**\n   * Invokes search with the specified filter and collector.  \n   * If a time limit has been specified, wrap the collector in a TimeLimitingCollector\n   */\n  private void searchWithTimeLimiter(final Filter luceneFilter, Collector collector) throws IOException {\n    if (cmd.getTimeAllowed() > 0) {\n      if (timeLimitingCollector == null) {\n        timeLimitingCollector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), cmd.getTimeAllowed());\n      } else {\n        /*\n         * This is so the same timer can be used for grouping's multiple phases.   \n         * We don't want to create a new TimeLimitingCollector for each phase because that would \n         * reset the timer for each phase.  If time runs out during the first phase, the \n         * second phase should timeout quickly.\n         */\n        timeLimitingCollector.setCollector(collector);\n      }\n      collector = timeLimitingCollector;\n    }\n    try {\n      Query q = query;\n      if (luceneFilter != null) {\n        q = new FilteredQuery(q, luceneFilter);\n      }\n      searcher.search(q, collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      logger.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n      qr.setPartialResults(true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c80f6f4fe2e841ba56e6ce200951063ab91196d3","date":1533052731,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping#searchWithTimeLimiter(Filter,Collector).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping#searchWithTimeLimiter(Filter,Collector).mjava","sourceNew":"  /**\n   * Invokes search with the specified filter and collector.  \n   * If a time limit has been specified, wrap the collector in a TimeLimitingCollector\n   */\n  private void searchWithTimeLimiter(final Filter luceneFilter, Collector collector) throws IOException {\n    if (cmd.getTimeAllowed() > 0) {\n      if (timeLimitingCollector == null) {\n        timeLimitingCollector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), cmd.getTimeAllowed());\n      } else {\n        /*\n         * This is so the same timer can be used for grouping's multiple phases.   \n         * We don't want to create a new TimeLimitingCollector for each phase because that would \n         * reset the timer for each phase.  If time runs out during the first phase, the \n         * second phase should timeout quickly.\n         */\n        timeLimitingCollector.setCollector(collector);\n      }\n      collector = timeLimitingCollector;\n    }\n    try {\n      Query q = query;\n      if (luceneFilter != null) {\n        q = new BooleanQuery.Builder()\n            .add(q, Occur.MUST)\n            .add(luceneFilter, Occur.FILTER)\n            .build();\n      }\n      searcher.search(q, collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n      qr.setPartialResults(true);\n    }\n  }\n\n","sourceOld":"  /**\n   * Invokes search with the specified filter and collector.  \n   * If a time limit has been specified, wrap the collector in a TimeLimitingCollector\n   */\n  private void searchWithTimeLimiter(final Filter luceneFilter, Collector collector) throws IOException {\n    if (cmd.getTimeAllowed() > 0) {\n      if (timeLimitingCollector == null) {\n        timeLimitingCollector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), cmd.getTimeAllowed());\n      } else {\n        /*\n         * This is so the same timer can be used for grouping's multiple phases.   \n         * We don't want to create a new TimeLimitingCollector for each phase because that would \n         * reset the timer for each phase.  If time runs out during the first phase, the \n         * second phase should timeout quickly.\n         */\n        timeLimitingCollector.setCollector(collector);\n      }\n      collector = timeLimitingCollector;\n    }\n    try {\n      Query q = query;\n      if (luceneFilter != null) {\n        q = new BooleanQuery.Builder()\n            .add(q, Occur.MUST)\n            .add(luceneFilter, Occur.FILTER)\n            .build();\n      }\n      searcher.search(q, collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      logger.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n      qr.setPartialResults(true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c4d4ec3bca82c8eac712592ab518cd082026f34","date":1585956055,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping#searchWithTimeLimiter(Filter,Collector).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping#searchWithTimeLimiter(Filter,Collector).mjava","sourceNew":"  /**\n   * Invokes search with the specified filter and collector.  \n   * If a time limit has been specified, wrap the collector in a TimeLimitingCollector\n   */\n  private void searchWithTimeLimiter(final Filter luceneFilter, Collector collector) throws IOException {\n    if (cmd.getTimeAllowed() > 0) {\n      if (timeLimitingCollector == null) {\n        timeLimitingCollector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), cmd.getTimeAllowed());\n      } else {\n        /*\n         * This is so the same timer can be used for grouping's multiple phases.   \n         * We don't want to create a new TimeLimitingCollector for each phase because that would \n         * reset the timer for each phase.  If time runs out during the first phase, the \n         * second phase should timeout quickly.\n         */\n        timeLimitingCollector.setCollector(collector);\n      }\n      collector = timeLimitingCollector;\n    }\n    try {\n      Query q = QueryUtils.combineQueryAndFilter(query, luceneFilter);\n      searcher.search(q, collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n      qr.setPartialResults(true);\n    }\n  }\n\n","sourceOld":"  /**\n   * Invokes search with the specified filter and collector.  \n   * If a time limit has been specified, wrap the collector in a TimeLimitingCollector\n   */\n  private void searchWithTimeLimiter(final Filter luceneFilter, Collector collector) throws IOException {\n    if (cmd.getTimeAllowed() > 0) {\n      if (timeLimitingCollector == null) {\n        timeLimitingCollector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), cmd.getTimeAllowed());\n      } else {\n        /*\n         * This is so the same timer can be used for grouping's multiple phases.   \n         * We don't want to create a new TimeLimitingCollector for each phase because that would \n         * reset the timer for each phase.  If time runs out during the first phase, the \n         * second phase should timeout quickly.\n         */\n        timeLimitingCollector.setCollector(collector);\n      }\n      collector = timeLimitingCollector;\n    }\n    try {\n      Query q = query;\n      if (luceneFilter != null) {\n        q = new BooleanQuery.Builder()\n            .add(q, Occur.MUST)\n            .add(luceneFilter, Occur.FILTER)\n            .build();\n      }\n      searcher.search(q, collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n      qr.setPartialResults(true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d8a0350513120be3cf48c0eafd6b8787fcd3ec","date":1586897159,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping#searchWithTimeLimiter(Filter,Collector).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping#searchWithTimeLimiter(Filter,Collector).mjava","sourceNew":"  /**\n   * Invokes search with the specified filter and collector.  \n   * If a time limit has been specified, wrap the collector in a TimeLimitingCollector\n   */\n  private void searchWithTimeLimiter(final Filter luceneFilter, Collector collector) throws IOException {\n    if (cmd.getTimeAllowed() > 0) {\n      if (timeLimitingCollector == null) {\n        timeLimitingCollector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), cmd.getTimeAllowed());\n      } else {\n        /*\n         * This is so the same timer can be used for grouping's multiple phases.   \n         * We don't want to create a new TimeLimitingCollector for each phase because that would \n         * reset the timer for each phase.  If time runs out during the first phase, the \n         * second phase should timeout quickly.\n         */\n        timeLimitingCollector.setCollector(collector);\n      }\n      collector = timeLimitingCollector;\n    }\n    try {\n      searcher.search(QueryUtils.combineQueryAndFilter(query, luceneFilter), collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n      qr.setPartialResults(true);\n    }\n  }\n\n","sourceOld":"  /**\n   * Invokes search with the specified filter and collector.  \n   * If a time limit has been specified, wrap the collector in a TimeLimitingCollector\n   */\n  private void searchWithTimeLimiter(final Filter luceneFilter, Collector collector) throws IOException {\n    if (cmd.getTimeAllowed() > 0) {\n      if (timeLimitingCollector == null) {\n        timeLimitingCollector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), cmd.getTimeAllowed());\n      } else {\n        /*\n         * This is so the same timer can be used for grouping's multiple phases.   \n         * We don't want to create a new TimeLimitingCollector for each phase because that would \n         * reset the timer for each phase.  If time runs out during the first phase, the \n         * second phase should timeout quickly.\n         */\n        timeLimitingCollector.setCollector(collector);\n      }\n      collector = timeLimitingCollector;\n    }\n    try {\n      Query q = QueryUtils.combineQueryAndFilter(query, luceneFilter);\n      searcher.search(q, collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n      qr.setPartialResults(true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping#searchWithTimeLimiter(Filter,Collector).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping#searchWithTimeLimiter(Filter,Collector).mjava","sourceNew":"  /**\n   * Invokes search with the specified filter and collector.  \n   * If a time limit has been specified, wrap the collector in a TimeLimitingCollector\n   */\n  private void searchWithTimeLimiter(final Filter luceneFilter, Collector collector) throws IOException {\n    if (cmd.getTimeAllowed() > 0) {\n      if (timeLimitingCollector == null) {\n        timeLimitingCollector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), cmd.getTimeAllowed());\n      } else {\n        /*\n         * This is so the same timer can be used for grouping's multiple phases.   \n         * We don't want to create a new TimeLimitingCollector for each phase because that would \n         * reset the timer for each phase.  If time runs out during the first phase, the \n         * second phase should timeout quickly.\n         */\n        timeLimitingCollector.setCollector(collector);\n      }\n      collector = timeLimitingCollector;\n    }\n    try {\n      searcher.search(QueryUtils.combineQueryAndFilter(query, luceneFilter), collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      if (log.isWarnEnabled()) {\n        log.warn(\"Query: {}; {}\", query, x.getMessage());\n      }\n      qr.setPartialResults(true);\n    }\n  }\n\n","sourceOld":"  /**\n   * Invokes search with the specified filter and collector.  \n   * If a time limit has been specified, wrap the collector in a TimeLimitingCollector\n   */\n  private void searchWithTimeLimiter(final Filter luceneFilter, Collector collector) throws IOException {\n    if (cmd.getTimeAllowed() > 0) {\n      if (timeLimitingCollector == null) {\n        timeLimitingCollector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), cmd.getTimeAllowed());\n      } else {\n        /*\n         * This is so the same timer can be used for grouping's multiple phases.   \n         * We don't want to create a new TimeLimitingCollector for each phase because that would \n         * reset the timer for each phase.  If time runs out during the first phase, the \n         * second phase should timeout quickly.\n         */\n        timeLimitingCollector.setCollector(collector);\n      }\n      collector = timeLimitingCollector;\n    }\n    try {\n      searcher.search(QueryUtils.combineQueryAndFilter(query, luceneFilter), collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n      qr.setPartialResults(true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping#searchWithTimeLimiter(Filter,Collector).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping#searchWithTimeLimiter(Filter,Collector).mjava","sourceNew":"  /**\n   * Invokes search with the specified filter and collector.  \n   * If a time limit has been specified, wrap the collector in a TimeLimitingCollector\n   */\n  private void searchWithTimeLimiter(final Filter luceneFilter, Collector collector) throws IOException {\n    if (cmd.getTimeAllowed() > 0) {\n      if (timeLimitingCollector == null) {\n        timeLimitingCollector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), cmd.getTimeAllowed());\n      } else {\n        /*\n         * This is so the same timer can be used for grouping's multiple phases.   \n         * We don't want to create a new TimeLimitingCollector for each phase because that would \n         * reset the timer for each phase.  If time runs out during the first phase, the \n         * second phase should timeout quickly.\n         */\n        timeLimitingCollector.setCollector(collector);\n      }\n      collector = timeLimitingCollector;\n    }\n    try {\n      searcher.search(QueryUtils.combineQueryAndFilter(query, luceneFilter), collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      log.warn(\"Query: {}; {}\", query, x.getMessage());\n      qr.setPartialResults(true);\n    }\n  }\n\n","sourceOld":"  /**\n   * Invokes search with the specified filter and collector.  \n   * If a time limit has been specified, wrap the collector in a TimeLimitingCollector\n   */\n  private void searchWithTimeLimiter(final Filter luceneFilter, Collector collector) throws IOException {\n    if (cmd.getTimeAllowed() > 0) {\n      if (timeLimitingCollector == null) {\n        timeLimitingCollector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), cmd.getTimeAllowed());\n      } else {\n        /*\n         * This is so the same timer can be used for grouping's multiple phases.   \n         * We don't want to create a new TimeLimitingCollector for each phase because that would \n         * reset the timer for each phase.  If time runs out during the first phase, the \n         * second phase should timeout quickly.\n         */\n        timeLimitingCollector.setCollector(collector);\n      }\n      collector = timeLimitingCollector;\n    }\n    try {\n      searcher.search(QueryUtils.combineQueryAndFilter(query, luceneFilter), collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      if (log.isWarnEnabled()) {\n        log.warn(\"Query: {}; {}\", query, x.getMessage());\n      }\n      qr.setPartialResults(true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57c238f5fb83803b49b37b3a1a12224a64d47542","date":1593655679,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping#searchWithTimeLimiter(Filter,Collector).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping#searchWithTimeLimiter(Filter,Collector).mjava","sourceNew":"  /**\n   * Invokes search with the specified filter and collector.  \n   * If a time limit has been specified, wrap the collector in a TimeLimitingCollector\n   */\n  private void searchWithTimeLimiter(final Filter luceneFilter, Collector collector) throws IOException {\n    if (cmd.getTimeAllowed() > 0) {\n      if (timeLimitingCollector == null) {\n        timeLimitingCollector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), cmd.getTimeAllowed());\n      } else {\n        /*\n         * This is so the same timer can be used for grouping's multiple phases.   \n         * We don't want to create a new TimeLimitingCollector for each phase because that would \n         * reset the timer for each phase.  If time runs out during the first phase, the \n         * second phase should timeout quickly.\n         */\n        timeLimitingCollector.setCollector(collector);\n      }\n      collector = timeLimitingCollector;\n    }\n    try {\n      searcher.search(QueryUtils.combineQueryAndFilter(query, luceneFilter), collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      log.warn(\"Query: {}; \", query, x);\n      qr.setPartialResults(true);\n    }\n  }\n\n","sourceOld":"  /**\n   * Invokes search with the specified filter and collector.  \n   * If a time limit has been specified, wrap the collector in a TimeLimitingCollector\n   */\n  private void searchWithTimeLimiter(final Filter luceneFilter, Collector collector) throws IOException {\n    if (cmd.getTimeAllowed() > 0) {\n      if (timeLimitingCollector == null) {\n        timeLimitingCollector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), cmd.getTimeAllowed());\n      } else {\n        /*\n         * This is so the same timer can be used for grouping's multiple phases.   \n         * We don't want to create a new TimeLimitingCollector for each phase because that would \n         * reset the timer for each phase.  If time runs out during the first phase, the \n         * second phase should timeout quickly.\n         */\n        timeLimitingCollector.setCollector(collector);\n      }\n      collector = timeLimitingCollector;\n    }\n    try {\n      searcher.search(QueryUtils.combineQueryAndFilter(query, luceneFilter), collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      log.warn(\"Query: {}; {}\", query, x.getMessage());\n      qr.setPartialResults(true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d8a0350513120be3cf48c0eafd6b8787fcd3ec":["5c4d4ec3bca82c8eac712592ab518cd082026f34"],"c6e1dc1bb4254226c8d7151b596cc1be40671751":["f001da93ec624cbfbf3655c529836b5b1ec1aa46"],"55980207f1977bd1463465de1659b821347e2fa8":["19275ba31e621f6da1b83bf13af75233876fd3d4","f001da93ec624cbfbf3655c529836b5b1ec1aa46"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["a250ecd3e83b1c6595bcae0474f5b258df42021b","19275ba31e621f6da1b83bf13af75233876fd3d4"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a250ecd3e83b1c6595bcae0474f5b258df42021b"],"a250ecd3e83b1c6595bcae0474f5b258df42021b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"57c238f5fb83803b49b37b3a1a12224a64d47542":["575e66bd4b2349209027f6801184da7fc3cba13f"],"575e66bd4b2349209027f6801184da7fc3cba13f":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["a250ecd3e83b1c6595bcae0474f5b258df42021b"],"c80f6f4fe2e841ba56e6ce200951063ab91196d3":["1db68e96dd908fcd79ef809095822736aa601d08"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["d4d8a0350513120be3cf48c0eafd6b8787fcd3ec"],"1db68e96dd908fcd79ef809095822736aa601d08":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["c6e1dc1bb4254226c8d7151b596cc1be40671751"],"f001da93ec624cbfbf3655c529836b5b1ec1aa46":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5c4d4ec3bca82c8eac712592ab518cd082026f34":["c80f6f4fe2e841ba56e6ce200951063ab91196d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57c238f5fb83803b49b37b3a1a12224a64d47542"]},"commit2Childs":{"d4d8a0350513120be3cf48c0eafd6b8787fcd3ec":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"c6e1dc1bb4254226c8d7151b596cc1be40671751":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"55980207f1977bd1463465de1659b821347e2fa8":[],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a250ecd3e83b1c6595bcae0474f5b258df42021b":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","19275ba31e621f6da1b83bf13af75233876fd3d4"],"57c238f5fb83803b49b37b3a1a12224a64d47542":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["55980207f1977bd1463465de1659b821347e2fa8","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","f001da93ec624cbfbf3655c529836b5b1ec1aa46"],"575e66bd4b2349209027f6801184da7fc3cba13f":["57c238f5fb83803b49b37b3a1a12224a64d47542"],"c80f6f4fe2e841ba56e6ce200951063ab91196d3":["5c4d4ec3bca82c8eac712592ab518cd082026f34"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["575e66bd4b2349209027f6801184da7fc3cba13f"],"1db68e96dd908fcd79ef809095822736aa601d08":["c80f6f4fe2e841ba56e6ce200951063ab91196d3"],"f001da93ec624cbfbf3655c529836b5b1ec1aa46":["c6e1dc1bb4254226c8d7151b596cc1be40671751","55980207f1977bd1463465de1659b821347e2fa8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a250ecd3e83b1c6595bcae0474f5b258df42021b"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["1db68e96dd908fcd79ef809095822736aa601d08"],"5c4d4ec3bca82c8eac712592ab518cd082026f34":["d4d8a0350513120be3cf48c0eafd6b8787fcd3ec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}