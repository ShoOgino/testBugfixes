{"path":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#canKillIndexer(String).mjava","commits":[{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#canKillIndexer(String).mjava","pathOld":"/dev/null","sourceNew":"  private boolean canKillIndexer(String sliceName) throws KeeperException, InterruptedException {\n    int numIndexersFoundInShard = 0;\n    for (CloudJettyRunner cloudJetty : shardToJetty.get(sliceName)) {\n      \n      // get latest cloud state\n      zkStateReader.forceUpdateCollection(collection);\n      \n      DocCollection docCollection = zkStateReader.getClusterState().getCollection(collection);\n      \n      Slice slice = docCollection.getSlice(sliceName);\n      \n      ZkNodeProps props = slice.getReplicasMap().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + slice.getReplicasMap().keySet());\n      }\n      \n      final Replica.State state = Replica.State.getState(props.getStr(ZkStateReader.STATE_PROP));\n      final Replica.Type replicaType = Replica.Type.valueOf(props.getStr(ZkStateReader.REPLICA_TYPE));\n      final String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      \n      if (cloudJetty.jetty.isRunning()\n          && state == Replica.State.ACTIVE\n          && (replicaType == Replica.Type.TLOG || replicaType == Replica.Type.NRT) \n          && zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        numIndexersFoundInShard++;\n      }\n    }\n    return numIndexersFoundInShard > 1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#canKillIndexer(String).mjava","pathOld":"/dev/null","sourceNew":"  private boolean canKillIndexer(String sliceName) throws KeeperException, InterruptedException {\n    int numIndexersFoundInShard = 0;\n    for (CloudJettyRunner cloudJetty : shardToJetty.get(sliceName)) {\n      \n      // get latest cloud state\n      zkStateReader.forceUpdateCollection(collection);\n      \n      DocCollection docCollection = zkStateReader.getClusterState().getCollection(collection);\n      \n      Slice slice = docCollection.getSlice(sliceName);\n      \n      ZkNodeProps props = slice.getReplicasMap().get(cloudJetty.coreNodeName);\n      if (props == null) {\n        throw new RuntimeException(\"shard name \" + cloudJetty.coreNodeName + \" not found in \" + slice.getReplicasMap().keySet());\n      }\n      \n      final Replica.State state = Replica.State.getState(props.getStr(ZkStateReader.STATE_PROP));\n      final Replica.Type replicaType = Replica.Type.valueOf(props.getStr(ZkStateReader.REPLICA_TYPE));\n      final String nodeName = props.getStr(ZkStateReader.NODE_NAME_PROP);\n      \n      if (cloudJetty.jetty.isRunning()\n          && state == Replica.State.ACTIVE\n          && (replicaType == Replica.Type.TLOG || replicaType == Replica.Type.NRT) \n          && zkStateReader.getClusterState().liveNodesContain(nodeName)) {\n        numIndexersFoundInShard++;\n      }\n    }\n    return numIndexersFoundInShard > 1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","61c45e99cf6676da48f19d7511c73712ad39402b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["61c45e99cf6676da48f19d7511c73712ad39402b"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","61c45e99cf6676da48f19d7511c73712ad39402b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}