{"path":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#JoinQueryWeight(SolrIndexSearcher).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#JoinQueryWeight(SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#JoinQueryWeight(SolrIndexSearcher).mjava","sourceNew":"    public JoinQueryWeight(SolrIndexSearcher searcher) throws IOException {\n      this.fromSearcher = searcher;\n      SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n      if (info != null) {\n        rb = info.getResponseBuilder();\n      }\n\n      if (fromIndex == null) {\n        this.fromSearcher = searcher;\n      } else {\n        if (info == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join must have SolrRequestInfo\");\n        }\n\n        CoreContainer container = searcher.getCore().getCoreDescriptor().getCoreContainer();\n        final SolrCore fromCore = container.getCore(fromIndex);\n\n        if (fromCore == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \");\n        }\n\n        if (info.getReq().getCore() == fromCore) {\n          // if this is the same core, use the searcher passed in... otherwise we could be warming and\n          // get an older searcher from the core.\n          fromSearcher = searcher;\n        } else {\n          // This could block if there is a static warming query with a join in it, and if useColdSearcher is true.\n          // Deadlock could result if two cores both had useColdSearcher and had joins that used eachother.\n          // This would be very predictable though (should happen every time if misconfigured)\n          fromRef = fromCore.getSearcher(false, true, null);\n\n          // be careful not to do anything with this searcher that requires the thread local\n          // SolrRequestInfo in a manner that requires the core in the request to match\n          fromSearcher = fromRef.get();\n        }\n\n        if (fromRef != null) {\n          final RefCounted<SolrIndexSearcher> ref = fromRef;\n          info.addCloseHook(new Closeable() {\n            @Override\n            public void close() throws IOException {\n              ref.decref();\n            }\n          });\n        }\n\n        info.addCloseHook(new Closeable() {\n          @Override\n          public void close() throws IOException {\n            fromCore.close();\n          }\n        });\n\n      }\n      this.toSearcher = searcher;\n    }\n\n","sourceOld":"    public JoinQueryWeight(SolrIndexSearcher searcher) throws IOException {\n      this.fromSearcher = searcher;\n      SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n      if (info != null) {\n        rb = info.getResponseBuilder();\n      }\n\n      if (fromIndex == null) {\n        this.fromSearcher = searcher;\n      } else {\n        if (info == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join must have SolrRequestInfo\");\n        }\n\n        CoreContainer container = searcher.getCore().getCoreDescriptor().getCoreContainer();\n        final SolrCore fromCore = container.getCore(fromIndex);\n\n        if (fromCore == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \");\n        }\n\n        if (info.getReq().getCore() == fromCore) {\n          // if this is the same core, use the searcher passed in... otherwise we could be warming and\n          // get an older searcher from the core.\n          fromSearcher = searcher;\n        } else {\n          // This could block if there is a static warming query with a join in it, and if useColdSearcher is true.\n          // Deadlock could result if two cores both had useColdSearcher and had joins that used eachother.\n          // This would be very predictable though (should happen every time if misconfigured)\n          fromRef = fromCore.getSearcher(false, true, null);\n\n          // be careful not to do anything with this searcher that requires the thread local\n          // SolrRequestInfo in a manner that requires the core in the request to match\n          fromSearcher = fromRef.get();\n        }\n\n        if (fromRef != null) {\n          final RefCounted<SolrIndexSearcher> ref = fromRef;\n          info.addCloseHook(new Closeable() {\n            @Override\n            public void close() throws IOException {\n              ref.decref();\n            }\n          });\n        }\n\n        info.addCloseHook(new Closeable() {\n          @Override\n          public void close() throws IOException {\n            fromCore.close();\n          }\n        });\n\n      }\n      this.toSearcher = searcher;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#JoinQueryWeight(SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#JoinQueryWeight(SolrIndexSearcher).mjava","sourceNew":"    public JoinQueryWeight(SolrIndexSearcher searcher) throws IOException {\n      this.fromSearcher = searcher;\n      SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n      if (info != null) {\n        rb = info.getResponseBuilder();\n      }\n\n      if (fromIndex == null) {\n        this.fromSearcher = searcher;\n      } else {\n        if (info == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join must have SolrRequestInfo\");\n        }\n\n        CoreContainer container = searcher.getCore().getCoreDescriptor().getCoreContainer();\n        final SolrCore fromCore = container.getCore(fromIndex);\n\n        if (fromCore == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \");\n        }\n\n        if (info.getReq().getCore() == fromCore) {\n          // if this is the same core, use the searcher passed in... otherwise we could be warming and\n          // get an older searcher from the core.\n          fromSearcher = searcher;\n        } else {\n          // This could block if there is a static warming query with a join in it, and if useColdSearcher is true.\n          // Deadlock could result if two cores both had useColdSearcher and had joins that used eachother.\n          // This would be very predictable though (should happen every time if misconfigured)\n          fromRef = fromCore.getSearcher(false, true, null);\n\n          // be careful not to do anything with this searcher that requires the thread local\n          // SolrRequestInfo in a manner that requires the core in the request to match\n          fromSearcher = fromRef.get();\n        }\n\n        if (fromRef != null) {\n          final RefCounted<SolrIndexSearcher> ref = fromRef;\n          info.addCloseHook(new Closeable() {\n            @Override\n            public void close() throws IOException {\n              ref.decref();\n            }\n          });\n        }\n\n        info.addCloseHook(new Closeable() {\n          @Override\n          public void close() throws IOException {\n            fromCore.close();\n          }\n        });\n\n      }\n      this.toSearcher = searcher;\n    }\n\n","sourceOld":"    public JoinQueryWeight(SolrIndexSearcher searcher) throws IOException {\n      this.fromSearcher = searcher;\n      SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n      if (info != null) {\n        rb = info.getResponseBuilder();\n      }\n\n      if (fromIndex == null) {\n        this.fromSearcher = searcher;\n      } else {\n        if (info == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join must have SolrRequestInfo\");\n        }\n\n        CoreContainer container = searcher.getCore().getCoreDescriptor().getCoreContainer();\n        final SolrCore fromCore = container.getCore(fromIndex);\n\n        if (fromCore == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \");\n        }\n\n        if (info.getReq().getCore() == fromCore) {\n          // if this is the same core, use the searcher passed in... otherwise we could be warming and\n          // get an older searcher from the core.\n          fromSearcher = searcher;\n        } else {\n          // This could block if there is a static warming query with a join in it, and if useColdSearcher is true.\n          // Deadlock could result if two cores both had useColdSearcher and had joins that used eachother.\n          // This would be very predictable though (should happen every time if misconfigured)\n          fromRef = fromCore.getSearcher(false, true, null);\n\n          // be careful not to do anything with this searcher that requires the thread local\n          // SolrRequestInfo in a manner that requires the core in the request to match\n          fromSearcher = fromRef.get();\n        }\n\n        if (fromRef != null) {\n          final RefCounted<SolrIndexSearcher> ref = fromRef;\n          info.addCloseHook(new Closeable() {\n            @Override\n            public void close() throws IOException {\n              ref.decref();\n            }\n          });\n        }\n\n        info.addCloseHook(new Closeable() {\n          @Override\n          public void close() throws IOException {\n            fromCore.close();\n          }\n        });\n\n      }\n      this.toSearcher = searcher;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#JoinQueryWeight(SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#JoinQueryWeight(SolrIndexSearcher).mjava","sourceNew":"    public JoinQueryWeight(SolrIndexSearcher searcher) throws IOException {\n      this.fromSearcher = searcher;\n      SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n      if (info != null) {\n        rb = info.getResponseBuilder();\n      }\n\n      if (fromIndex == null) {\n        this.fromSearcher = searcher;\n      } else {\n        if (info == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join must have SolrRequestInfo\");\n        }\n\n        CoreContainer container = searcher.getCore().getCoreDescriptor().getCoreContainer();\n        final SolrCore fromCore = container.getCore(fromIndex);\n\n        if (fromCore == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \");\n        }\n\n        if (info.getReq().getCore() == fromCore) {\n          // if this is the same core, use the searcher passed in... otherwise we could be warming and\n          // get an older searcher from the core.\n          fromSearcher = searcher;\n        } else {\n          // This could block if there is a static warming query with a join in it, and if useColdSearcher is true.\n          // Deadlock could result if two cores both had useColdSearcher and had joins that used eachother.\n          // This would be very predictable though (should happen every time if misconfigured)\n          fromRef = fromCore.getSearcher(false, true, null);\n\n          // be careful not to do anything with this searcher that requires the thread local\n          // SolrRequestInfo in a manner that requires the core in the request to match\n          fromSearcher = fromRef.get();\n        }\n\n        if (fromRef != null) {\n          final RefCounted<SolrIndexSearcher> ref = fromRef;\n          info.addCloseHook(new Closeable() {\n            @Override\n            public void close() throws IOException {\n              ref.decref();\n            }\n          });\n        }\n\n        info.addCloseHook(new Closeable() {\n          @Override\n          public void close() throws IOException {\n            fromCore.close();\n          }\n        });\n\n      }\n      this.toSearcher = searcher;\n    }\n\n","sourceOld":"    public JoinQueryWeight(SolrIndexSearcher searcher) throws IOException {\n      this.fromSearcher = searcher;\n      SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n      if (info != null) {\n        rb = info.getResponseBuilder();\n      }\n\n      if (fromIndex == null) {\n        this.fromSearcher = searcher;\n      } else {\n        if (info == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join must have SolrRequestInfo\");\n        }\n\n        CoreContainer container = searcher.getCore().getCoreDescriptor().getCoreContainer();\n        final SolrCore fromCore = container.getCore(fromIndex);\n\n        if (fromCore == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \");\n        }\n\n        if (info.getReq().getCore() == fromCore) {\n          // if this is the same core, use the searcher passed in... otherwise we could be warming and\n          // get an older searcher from the core.\n          fromSearcher = searcher;\n        } else {\n          // This could block if there is a static warming query with a join in it, and if useColdSearcher is true.\n          // Deadlock could result if two cores both had useColdSearcher and had joins that used eachother.\n          // This would be very predictable though (should happen every time if misconfigured)\n          fromRef = fromCore.getSearcher(false, true, null);\n\n          // be careful not to do anything with this searcher that requires the thread local\n          // SolrRequestInfo in a manner that requires the core in the request to match\n          fromSearcher = fromRef.get();\n        }\n\n        if (fromRef != null) {\n          final RefCounted<SolrIndexSearcher> ref = fromRef;\n          info.addCloseHook(new Closeable() {\n            @Override\n            public void close() throws IOException {\n              ref.decref();\n            }\n          });\n        }\n\n        info.addCloseHook(new Closeable() {\n          @Override\n          public void close() throws IOException {\n            fromCore.close();\n          }\n        });\n\n      }\n      this.toSearcher = searcher;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83185943f2dc5f3a0bf6c461c2cbcc284e756d2e","date":1337006761,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#JoinQueryWeight(SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#JoinQueryWeight(SolrIndexSearcher).mjava","sourceNew":"    public JoinQueryWeight(SolrIndexSearcher searcher) throws IOException {\n      this.fromSearcher = searcher;\n      SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n      if (info != null) {\n        rb = info.getResponseBuilder();\n      }\n\n      if (fromIndex == null) {\n        this.fromSearcher = searcher;\n      } else {\n        if (info == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join must have SolrRequestInfo\");\n        }\n\n        CoreContainer container = searcher.getCore().getCoreDescriptor().getCoreContainer();\n        final SolrCore fromCore = container.getCore(fromIndex);\n\n        if (fromCore == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + fromIndex);\n        }\n\n        if (info.getReq().getCore() == fromCore) {\n          // if this is the same core, use the searcher passed in... otherwise we could be warming and\n          // get an older searcher from the core.\n          fromSearcher = searcher;\n        } else {\n          // This could block if there is a static warming query with a join in it, and if useColdSearcher is true.\n          // Deadlock could result if two cores both had useColdSearcher and had joins that used eachother.\n          // This would be very predictable though (should happen every time if misconfigured)\n          fromRef = fromCore.getSearcher(false, true, null);\n\n          // be careful not to do anything with this searcher that requires the thread local\n          // SolrRequestInfo in a manner that requires the core in the request to match\n          fromSearcher = fromRef.get();\n        }\n\n        if (fromRef != null) {\n          final RefCounted<SolrIndexSearcher> ref = fromRef;\n          info.addCloseHook(new Closeable() {\n            @Override\n            public void close() throws IOException {\n              ref.decref();\n            }\n          });\n        }\n\n        info.addCloseHook(new Closeable() {\n          @Override\n          public void close() throws IOException {\n            fromCore.close();\n          }\n        });\n\n      }\n      this.toSearcher = searcher;\n    }\n\n","sourceOld":"    public JoinQueryWeight(SolrIndexSearcher searcher) throws IOException {\n      this.fromSearcher = searcher;\n      SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n      if (info != null) {\n        rb = info.getResponseBuilder();\n      }\n\n      if (fromIndex == null) {\n        this.fromSearcher = searcher;\n      } else {\n        if (info == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join must have SolrRequestInfo\");\n        }\n\n        CoreContainer container = searcher.getCore().getCoreDescriptor().getCoreContainer();\n        final SolrCore fromCore = container.getCore(fromIndex);\n\n        if (fromCore == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \");\n        }\n\n        if (info.getReq().getCore() == fromCore) {\n          // if this is the same core, use the searcher passed in... otherwise we could be warming and\n          // get an older searcher from the core.\n          fromSearcher = searcher;\n        } else {\n          // This could block if there is a static warming query with a join in it, and if useColdSearcher is true.\n          // Deadlock could result if two cores both had useColdSearcher and had joins that used eachother.\n          // This would be very predictable though (should happen every time if misconfigured)\n          fromRef = fromCore.getSearcher(false, true, null);\n\n          // be careful not to do anything with this searcher that requires the thread local\n          // SolrRequestInfo in a manner that requires the core in the request to match\n          fromSearcher = fromRef.get();\n        }\n\n        if (fromRef != null) {\n          final RefCounted<SolrIndexSearcher> ref = fromRef;\n          info.addCloseHook(new Closeable() {\n            @Override\n            public void close() throws IOException {\n              ref.decref();\n            }\n          });\n        }\n\n        info.addCloseHook(new Closeable() {\n          @Override\n          public void close() throws IOException {\n            fromCore.close();\n          }\n        });\n\n      }\n      this.toSearcher = searcher;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#JoinQueryWeight(SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#JoinQueryWeight(SolrIndexSearcher).mjava","sourceNew":"    public JoinQueryWeight(SolrIndexSearcher searcher) {\n      this.fromSearcher = searcher;\n      SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n      if (info != null) {\n        rb = info.getResponseBuilder();\n      }\n\n      if (fromIndex == null) {\n        this.fromSearcher = searcher;\n      } else {\n        if (info == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join must have SolrRequestInfo\");\n        }\n\n        CoreContainer container = searcher.getCore().getCoreDescriptor().getCoreContainer();\n        final SolrCore fromCore = container.getCore(fromIndex);\n\n        if (fromCore == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + fromIndex);\n        }\n\n        if (info.getReq().getCore() == fromCore) {\n          // if this is the same core, use the searcher passed in... otherwise we could be warming and\n          // get an older searcher from the core.\n          fromSearcher = searcher;\n        } else {\n          // This could block if there is a static warming query with a join in it, and if useColdSearcher is true.\n          // Deadlock could result if two cores both had useColdSearcher and had joins that used eachother.\n          // This would be very predictable though (should happen every time if misconfigured)\n          fromRef = fromCore.getSearcher(false, true, null);\n\n          // be careful not to do anything with this searcher that requires the thread local\n          // SolrRequestInfo in a manner that requires the core in the request to match\n          fromSearcher = fromRef.get();\n        }\n\n        if (fromRef != null) {\n          final RefCounted<SolrIndexSearcher> ref = fromRef;\n          info.addCloseHook(new Closeable() {\n            @Override\n            public void close() {\n              ref.decref();\n            }\n          });\n        }\n\n        info.addCloseHook(new Closeable() {\n          @Override\n          public void close() {\n            fromCore.close();\n          }\n        });\n\n      }\n      this.toSearcher = searcher;\n    }\n\n","sourceOld":"    public JoinQueryWeight(SolrIndexSearcher searcher) throws IOException {\n      this.fromSearcher = searcher;\n      SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n      if (info != null) {\n        rb = info.getResponseBuilder();\n      }\n\n      if (fromIndex == null) {\n        this.fromSearcher = searcher;\n      } else {\n        if (info == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join must have SolrRequestInfo\");\n        }\n\n        CoreContainer container = searcher.getCore().getCoreDescriptor().getCoreContainer();\n        final SolrCore fromCore = container.getCore(fromIndex);\n\n        if (fromCore == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + fromIndex);\n        }\n\n        if (info.getReq().getCore() == fromCore) {\n          // if this is the same core, use the searcher passed in... otherwise we could be warming and\n          // get an older searcher from the core.\n          fromSearcher = searcher;\n        } else {\n          // This could block if there is a static warming query with a join in it, and if useColdSearcher is true.\n          // Deadlock could result if two cores both had useColdSearcher and had joins that used eachother.\n          // This would be very predictable though (should happen every time if misconfigured)\n          fromRef = fromCore.getSearcher(false, true, null);\n\n          // be careful not to do anything with this searcher that requires the thread local\n          // SolrRequestInfo in a manner that requires the core in the request to match\n          fromSearcher = fromRef.get();\n        }\n\n        if (fromRef != null) {\n          final RefCounted<SolrIndexSearcher> ref = fromRef;\n          info.addCloseHook(new Closeable() {\n            @Override\n            public void close() throws IOException {\n              ref.decref();\n            }\n          });\n        }\n\n        info.addCloseHook(new Closeable() {\n          @Override\n          public void close() throws IOException {\n            fromCore.close();\n          }\n        });\n\n      }\n      this.toSearcher = searcher;\n    }\n\n","bugFix":["f8f944ac3fe3f9d40d825177507fb381d2b106b3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#JoinQueryWeight(SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#JoinQueryWeight(SolrIndexSearcher).mjava","sourceNew":"    public JoinQueryWeight(SolrIndexSearcher searcher) {\n      this.fromSearcher = searcher;\n      SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n      if (info != null) {\n        rb = info.getResponseBuilder();\n      }\n\n      if (fromIndex == null) {\n        this.fromSearcher = searcher;\n      } else {\n        if (info == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join must have SolrRequestInfo\");\n        }\n\n        CoreContainer container = searcher.getCore().getCoreDescriptor().getCoreContainer();\n        final SolrCore fromCore = container.getCore(fromIndex);\n\n        if (fromCore == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + fromIndex);\n        }\n\n        if (info.getReq().getCore() == fromCore) {\n          // if this is the same core, use the searcher passed in... otherwise we could be warming and\n          // get an older searcher from the core.\n          fromSearcher = searcher;\n        } else {\n          // This could block if there is a static warming query with a join in it, and if useColdSearcher is true.\n          // Deadlock could result if two cores both had useColdSearcher and had joins that used eachother.\n          // This would be very predictable though (should happen every time if misconfigured)\n          fromRef = fromCore.getSearcher(false, true, null);\n\n          // be careful not to do anything with this searcher that requires the thread local\n          // SolrRequestInfo in a manner that requires the core in the request to match\n          fromSearcher = fromRef.get();\n        }\n\n        if (fromRef != null) {\n          final RefCounted<SolrIndexSearcher> ref = fromRef;\n          info.addCloseHook(new Closeable() {\n            @Override\n            public void close() {\n              ref.decref();\n            }\n          });\n        }\n\n        info.addCloseHook(new Closeable() {\n          @Override\n          public void close() {\n            fromCore.close();\n          }\n        });\n\n      }\n      this.toSearcher = searcher;\n    }\n\n","sourceOld":"    public JoinQueryWeight(SolrIndexSearcher searcher) throws IOException {\n      this.fromSearcher = searcher;\n      SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n      if (info != null) {\n        rb = info.getResponseBuilder();\n      }\n\n      if (fromIndex == null) {\n        this.fromSearcher = searcher;\n      } else {\n        if (info == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join must have SolrRequestInfo\");\n        }\n\n        CoreContainer container = searcher.getCore().getCoreDescriptor().getCoreContainer();\n        final SolrCore fromCore = container.getCore(fromIndex);\n\n        if (fromCore == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + fromIndex);\n        }\n\n        if (info.getReq().getCore() == fromCore) {\n          // if this is the same core, use the searcher passed in... otherwise we could be warming and\n          // get an older searcher from the core.\n          fromSearcher = searcher;\n        } else {\n          // This could block if there is a static warming query with a join in it, and if useColdSearcher is true.\n          // Deadlock could result if two cores both had useColdSearcher and had joins that used eachother.\n          // This would be very predictable though (should happen every time if misconfigured)\n          fromRef = fromCore.getSearcher(false, true, null);\n\n          // be careful not to do anything with this searcher that requires the thread local\n          // SolrRequestInfo in a manner that requires the core in the request to match\n          fromSearcher = fromRef.get();\n        }\n\n        if (fromRef != null) {\n          final RefCounted<SolrIndexSearcher> ref = fromRef;\n          info.addCloseHook(new Closeable() {\n            @Override\n            public void close() throws IOException {\n              ref.decref();\n            }\n          });\n        }\n\n        info.addCloseHook(new Closeable() {\n          @Override\n          public void close() throws IOException {\n            fromCore.close();\n          }\n        });\n\n      }\n      this.toSearcher = searcher;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#JoinQueryWeight(SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#JoinQueryWeight(SolrIndexSearcher).mjava","sourceNew":"    public JoinQueryWeight(SolrIndexSearcher searcher) {\n      super(JoinQuery.this);\n      this.fromSearcher = searcher;\n      SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n      if (info != null) {\n        rb = info.getResponseBuilder();\n      }\n\n      if (fromIndex == null) {\n        this.fromSearcher = searcher;\n      } else {\n        if (info == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join must have SolrRequestInfo\");\n        }\n\n        CoreContainer container = searcher.getCore().getCoreDescriptor().getCoreContainer();\n        final SolrCore fromCore = container.getCore(fromIndex);\n\n        if (fromCore == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + fromIndex);\n        }\n\n        if (info.getReq().getCore() == fromCore) {\n          // if this is the same core, use the searcher passed in... otherwise we could be warming and\n          // get an older searcher from the core.\n          fromSearcher = searcher;\n        } else {\n          // This could block if there is a static warming query with a join in it, and if useColdSearcher is true.\n          // Deadlock could result if two cores both had useColdSearcher and had joins that used eachother.\n          // This would be very predictable though (should happen every time if misconfigured)\n          fromRef = fromCore.getSearcher(false, true, null);\n\n          // be careful not to do anything with this searcher that requires the thread local\n          // SolrRequestInfo in a manner that requires the core in the request to match\n          fromSearcher = fromRef.get();\n        }\n\n        if (fromRef != null) {\n          final RefCounted<SolrIndexSearcher> ref = fromRef;\n          info.addCloseHook(new Closeable() {\n            @Override\n            public void close() {\n              ref.decref();\n            }\n          });\n        }\n\n        info.addCloseHook(new Closeable() {\n          @Override\n          public void close() {\n            fromCore.close();\n          }\n        });\n\n      }\n      this.toSearcher = searcher;\n    }\n\n","sourceOld":"    public JoinQueryWeight(SolrIndexSearcher searcher) {\n      this.fromSearcher = searcher;\n      SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n      if (info != null) {\n        rb = info.getResponseBuilder();\n      }\n\n      if (fromIndex == null) {\n        this.fromSearcher = searcher;\n      } else {\n        if (info == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join must have SolrRequestInfo\");\n        }\n\n        CoreContainer container = searcher.getCore().getCoreDescriptor().getCoreContainer();\n        final SolrCore fromCore = container.getCore(fromIndex);\n\n        if (fromCore == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + fromIndex);\n        }\n\n        if (info.getReq().getCore() == fromCore) {\n          // if this is the same core, use the searcher passed in... otherwise we could be warming and\n          // get an older searcher from the core.\n          fromSearcher = searcher;\n        } else {\n          // This could block if there is a static warming query with a join in it, and if useColdSearcher is true.\n          // Deadlock could result if two cores both had useColdSearcher and had joins that used eachother.\n          // This would be very predictable though (should happen every time if misconfigured)\n          fromRef = fromCore.getSearcher(false, true, null);\n\n          // be careful not to do anything with this searcher that requires the thread local\n          // SolrRequestInfo in a manner that requires the core in the request to match\n          fromSearcher = fromRef.get();\n        }\n\n        if (fromRef != null) {\n          final RefCounted<SolrIndexSearcher> ref = fromRef;\n          info.addCloseHook(new Closeable() {\n            @Override\n            public void close() {\n              ref.decref();\n            }\n          });\n        }\n\n        info.addCloseHook(new Closeable() {\n          @Override\n          public void close() {\n            fromCore.close();\n          }\n        });\n\n      }\n      this.toSearcher = searcher;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#JoinQueryWeight(SolrIndexSearcher,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#JoinQueryWeight(SolrIndexSearcher).mjava","sourceNew":"    public JoinQueryWeight(SolrIndexSearcher searcher, float boost) {\n      super(JoinQuery.this, boost);\n      this.fromSearcher = searcher;\n      SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n      if (info != null) {\n        rb = info.getResponseBuilder();\n      }\n\n      if (fromIndex == null) {\n        this.fromSearcher = searcher;\n      } else {\n        if (info == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join must have SolrRequestInfo\");\n        }\n\n        CoreContainer container = searcher.getCore().getCoreDescriptor().getCoreContainer();\n        final SolrCore fromCore = container.getCore(fromIndex);\n\n        if (fromCore == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + fromIndex);\n        }\n\n        if (info.getReq().getCore() == fromCore) {\n          // if this is the same core, use the searcher passed in... otherwise we could be warming and\n          // get an older searcher from the core.\n          fromSearcher = searcher;\n        } else {\n          // This could block if there is a static warming query with a join in it, and if useColdSearcher is true.\n          // Deadlock could result if two cores both had useColdSearcher and had joins that used eachother.\n          // This would be very predictable though (should happen every time if misconfigured)\n          fromRef = fromCore.getSearcher(false, true, null);\n\n          // be careful not to do anything with this searcher that requires the thread local\n          // SolrRequestInfo in a manner that requires the core in the request to match\n          fromSearcher = fromRef.get();\n        }\n\n        if (fromRef != null) {\n          final RefCounted<SolrIndexSearcher> ref = fromRef;\n          info.addCloseHook(new Closeable() {\n            @Override\n            public void close() {\n              ref.decref();\n            }\n          });\n        }\n\n        info.addCloseHook(new Closeable() {\n          @Override\n          public void close() {\n            fromCore.close();\n          }\n        });\n\n      }\n      this.toSearcher = searcher;\n    }\n\n","sourceOld":"    public JoinQueryWeight(SolrIndexSearcher searcher) {\n      super(JoinQuery.this);\n      this.fromSearcher = searcher;\n      SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n      if (info != null) {\n        rb = info.getResponseBuilder();\n      }\n\n      if (fromIndex == null) {\n        this.fromSearcher = searcher;\n      } else {\n        if (info == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join must have SolrRequestInfo\");\n        }\n\n        CoreContainer container = searcher.getCore().getCoreDescriptor().getCoreContainer();\n        final SolrCore fromCore = container.getCore(fromIndex);\n\n        if (fromCore == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + fromIndex);\n        }\n\n        if (info.getReq().getCore() == fromCore) {\n          // if this is the same core, use the searcher passed in... otherwise we could be warming and\n          // get an older searcher from the core.\n          fromSearcher = searcher;\n        } else {\n          // This could block if there is a static warming query with a join in it, and if useColdSearcher is true.\n          // Deadlock could result if two cores both had useColdSearcher and had joins that used eachother.\n          // This would be very predictable though (should happen every time if misconfigured)\n          fromRef = fromCore.getSearcher(false, true, null);\n\n          // be careful not to do anything with this searcher that requires the thread local\n          // SolrRequestInfo in a manner that requires the core in the request to match\n          fromSearcher = fromRef.get();\n        }\n\n        if (fromRef != null) {\n          final RefCounted<SolrIndexSearcher> ref = fromRef;\n          info.addCloseHook(new Closeable() {\n            @Override\n            public void close() {\n              ref.decref();\n            }\n          });\n        }\n\n        info.addCloseHook(new Closeable() {\n          @Override\n          public void close() {\n            fromCore.close();\n          }\n        });\n\n      }\n      this.toSearcher = searcher;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#JoinQueryWeight(SolrIndexSearcher).mjava","sourceNew":null,"sourceOld":"    public JoinQueryWeight(SolrIndexSearcher searcher) {\n      super(JoinQuery.this);\n      this.fromSearcher = searcher;\n      SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n      if (info != null) {\n        rb = info.getResponseBuilder();\n      }\n\n      if (fromIndex == null) {\n        this.fromSearcher = searcher;\n      } else {\n        if (info == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join must have SolrRequestInfo\");\n        }\n\n        CoreContainer container = searcher.getCore().getCoreDescriptor().getCoreContainer();\n        final SolrCore fromCore = container.getCore(fromIndex);\n\n        if (fromCore == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + fromIndex);\n        }\n\n        if (info.getReq().getCore() == fromCore) {\n          // if this is the same core, use the searcher passed in... otherwise we could be warming and\n          // get an older searcher from the core.\n          fromSearcher = searcher;\n        } else {\n          // This could block if there is a static warming query with a join in it, and if useColdSearcher is true.\n          // Deadlock could result if two cores both had useColdSearcher and had joins that used eachother.\n          // This would be very predictable though (should happen every time if misconfigured)\n          fromRef = fromCore.getSearcher(false, true, null);\n\n          // be careful not to do anything with this searcher that requires the thread local\n          // SolrRequestInfo in a manner that requires the core in the request to match\n          fromSearcher = fromRef.get();\n        }\n\n        if (fromRef != null) {\n          final RefCounted<SolrIndexSearcher> ref = fromRef;\n          info.addCloseHook(new Closeable() {\n            @Override\n            public void close() {\n              ref.decref();\n            }\n          });\n        }\n\n        info.addCloseHook(new Closeable() {\n          @Override\n          public void close() {\n            fromCore.close();\n          }\n        });\n\n      }\n      this.toSearcher = searcher;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb17639909a369c1e64866842e5c213440acc17e":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["83185943f2dc5f3a0bf6c461c2cbcc284e756d2e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"83185943f2dc5f3a0bf6c461c2cbcc284e756d2e":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["fb17639909a369c1e64866842e5c213440acc17e"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["83185943f2dc5f3a0bf6c461c2cbcc284e756d2e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["fb17639909a369c1e64866842e5c213440acc17e","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"]},"commit2Childs":{"fb17639909a369c1e64866842e5c213440acc17e":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["83185943f2dc5f3a0bf6c461c2cbcc284e756d2e"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"83185943f2dc5f3a0bf6c461c2cbcc284e756d2e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fb17639909a369c1e64866842e5c213440acc17e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}