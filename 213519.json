{"path":"src/java/org/apache/lucene/search/spans/NearSpans#next().mjava","commits":[{"id":"0bcbf4ed0baed877c8b36d024e17a99bedfdd904","date":1075500600,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/NearSpans#next().mjava","pathOld":"/dev/null","sourceNew":"  public boolean next() throws IOException {\n    if (firstTime) {\n      initList(true);\n      listToQueue();                            // initialize queue\n      firstTime = false;\n    } else {\n      more = last.next();                         // trigger scan\n      queueStale = true;\n    }\n          \n    while (more) {\n\n      if (listStale) {                            // maintain list\n        queueToList();\n        listStale = false;\n      }\n      \n      // skip to doc w/ all clauses\n\n      while (more && first.doc() < last.doc()) { \n        more = first.skipTo(last.doc());          // skip first upto last\n        firstToLast();                            // and move it to the end\n        queueStale = true;\n      }\n\n      if (!more) return false;\n\n      // found doc w/ all clauses\n\n      if (queueStale) {                           // maintain the queue\n        listToQueue();                    \n        queueStale = false;\n      }\n\n      int matchLength = max.end() - min().start();\n      if (((matchLength - totalLength) <= slop)   // check slop\n          && (!inOrder || matchIsOrdered())) {    // check order\n        return true;\n      }\n      \n      more = min().next();                        // trigger further scanning\n\n      if (more) {\n        queue.adjustTop();                        // maintain queue\n        if (min().doc() != max.doc()) {\n          listStale = true;                       // maintain list\n        }\n      }\n    }\n    return false;                                 // no more matches\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af54d2e9e95d08aae526fa69cdd34b66a49b763","date":1075728472,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/NearSpans#next().mjava","pathOld":"src/java/org/apache/lucene/search/spans/NearSpans#next().mjava","sourceNew":"  public boolean next() throws IOException {\n    if (firstTime) {\n      initList(true);\n      listToQueue();                            // initialize queue\n      firstTime = false;\n    } else {\n      more = last.next();                         // trigger scan\n      queueStale = true;\n    }\n\n    while (more) {\n\n      if (listStale) {                            // maintain list\n        queueToList();\n        listStale = false;\n      }\n\n      // skip to doc w/ all clauses\n\n      while (more && first.doc() < last.doc()) {\n        more = first.skipTo(last.doc());          // skip first upto last\n        firstToLast();                            // and move it to the end\n        queueStale = true;\n      }\n\n      if (!more) return false;\n\n      // found doc w/ all clauses\n\n      if (queueStale) {                           // maintain the queue\n        listToQueue();\n        queueStale = false;\n      }\n\n      int matchLength = max.end() - min().start();\n      if (((matchLength - totalLength) <= slop)   // check slop\n          && (!inOrder || matchIsOrdered())) {    // check order\n        return true;\n      }\n\n      more = min().next();                        // trigger further scanning\n\n      if (more) {\n        queue.adjustTop();                        // maintain queue\n        if (min().doc() != max.doc()) {\n          listStale = true;                       // maintain list\n        }\n      }\n    }\n    return false;                                 // no more matches\n  }\n\n","sourceOld":"  public boolean next() throws IOException {\n    if (firstTime) {\n      initList(true);\n      listToQueue();                            // initialize queue\n      firstTime = false;\n    } else {\n      more = last.next();                         // trigger scan\n      queueStale = true;\n    }\n          \n    while (more) {\n\n      if (listStale) {                            // maintain list\n        queueToList();\n        listStale = false;\n      }\n      \n      // skip to doc w/ all clauses\n\n      while (more && first.doc() < last.doc()) { \n        more = first.skipTo(last.doc());          // skip first upto last\n        firstToLast();                            // and move it to the end\n        queueStale = true;\n      }\n\n      if (!more) return false;\n\n      // found doc w/ all clauses\n\n      if (queueStale) {                           // maintain the queue\n        listToQueue();                    \n        queueStale = false;\n      }\n\n      int matchLength = max.end() - min().start();\n      if (((matchLength - totalLength) <= slop)   // check slop\n          && (!inOrder || matchIsOrdered())) {    // check order\n        return true;\n      }\n      \n      more = min().next();                        // trigger further scanning\n\n      if (more) {\n        queue.adjustTop();                        // maintain queue\n        if (min().doc() != max.doc()) {\n          listStale = true;                       // maintain list\n        }\n      }\n    }\n    return false;                                 // no more matches\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"442d84b5daa55f6e5e0ae5bc96d5fb9a1d3718c5","date":1076364222,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/NearSpans#next().mjava","pathOld":"src/java/org/apache/lucene/search/spans/NearSpans#next().mjava","sourceNew":"  public boolean next() throws IOException {\n    if (firstTime) {\n      initList(true);\n      listToQueue();                              // initialize queue\n      firstTime = false;\n    } else if (more) {\n      more = min().next();                        // trigger further scanning\n      if (more)\n        queue.adjustTop();                        // maintain queue\n    }\n\n    while (more) {\n\n      boolean queueStale = false;\n\n      if (min().doc() != max.doc()) {             // maintain list\n        queueToList();\n        queueStale = true;\n      }\n\n      // skip to doc w/ all clauses\n\n      while (more && first.doc() < last.doc()) {\n        more = first.skipTo(last.doc());          // skip first upto last\n        firstToLast();                            // and move it to the end\n        queueStale = true;\n      }\n\n      if (!more) return false;\n\n      // found doc w/ all clauses\n\n      if (queueStale) {                           // maintain the queue\n        listToQueue();\n        queueStale = false;\n      }\n\n      int matchLength = max.end() - min().start();\n      if (((matchLength - totalLength) <= slop)   // check slop\n          && (!inOrder || matchIsOrdered())) {    // check order\n        return true;\n      }\n\n      more = min().next();                        // trigger further scanning\n      if (more)\n        queue.adjustTop();                        // maintain queue\n    }\n    return false;                                 // no more matches\n  }\n\n","sourceOld":"  public boolean next() throws IOException {\n    if (firstTime) {\n      initList(true);\n      listToQueue();                            // initialize queue\n      firstTime = false;\n    } else {\n      more = last.next();                         // trigger scan\n      queueStale = true;\n    }\n\n    while (more) {\n\n      if (listStale) {                            // maintain list\n        queueToList();\n        listStale = false;\n      }\n\n      // skip to doc w/ all clauses\n\n      while (more && first.doc() < last.doc()) {\n        more = first.skipTo(last.doc());          // skip first upto last\n        firstToLast();                            // and move it to the end\n        queueStale = true;\n      }\n\n      if (!more) return false;\n\n      // found doc w/ all clauses\n\n      if (queueStale) {                           // maintain the queue\n        listToQueue();\n        queueStale = false;\n      }\n\n      int matchLength = max.end() - min().start();\n      if (((matchLength - totalLength) <= slop)   // check slop\n          && (!inOrder || matchIsOrdered())) {    // check order\n        return true;\n      }\n\n      more = min().next();                        // trigger further scanning\n\n      if (more) {\n        queue.adjustTop();                        // maintain queue\n        if (min().doc() != max.doc()) {\n          listStale = true;                       // maintain list\n        }\n      }\n    }\n    return false;                                 // no more matches\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e3f7c6f227c99761a334d89dab830930117876b","date":1076365551,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/NearSpans#next().mjava","pathOld":"src/java/org/apache/lucene/search/spans/NearSpans#next().mjava","sourceNew":"  public boolean next() throws IOException {\n    if (firstTime) {\n      initList(true);\n      listToQueue();                              // initialize queue\n      firstTime = false;\n    } else if (more) {\n      more = min().next();                        // trigger further scanning\n      if (more)\n        queue.adjustTop();                        // maintain queue\n    }\n\n    while (more) {\n\n      boolean queueStale = false;\n\n      if (min().doc() != max.doc()) {             // maintain list\n        queueToList();\n        queueStale = true;\n      }\n\n      // skip to doc w/ all clauses\n\n      while (more && first.doc() < last.doc()) {\n        more = first.skipTo(last.doc());          // skip first upto last\n        firstToLast();                            // and move it to the end\n        queueStale = true;\n      }\n\n      if (!more) return false;\n\n      // found doc w/ all clauses\n\n      if (queueStale) {                           // maintain the queue\n        listToQueue();\n        queueStale = false;\n      }\n\n      if (atMatch())\n        return true;\n\n      more = min().next();                        // trigger further scanning\n      if (more)\n        queue.adjustTop();                        // maintain queue\n    }\n    return false;                                 // no more matches\n  }\n\n","sourceOld":"  public boolean next() throws IOException {\n    if (firstTime) {\n      initList(true);\n      listToQueue();                              // initialize queue\n      firstTime = false;\n    } else if (more) {\n      more = min().next();                        // trigger further scanning\n      if (more)\n        queue.adjustTop();                        // maintain queue\n    }\n\n    while (more) {\n\n      boolean queueStale = false;\n\n      if (min().doc() != max.doc()) {             // maintain list\n        queueToList();\n        queueStale = true;\n      }\n\n      // skip to doc w/ all clauses\n\n      while (more && first.doc() < last.doc()) {\n        more = first.skipTo(last.doc());          // skip first upto last\n        firstToLast();                            // and move it to the end\n        queueStale = true;\n      }\n\n      if (!more) return false;\n\n      // found doc w/ all clauses\n\n      if (queueStale) {                           // maintain the queue\n        listToQueue();\n        queueStale = false;\n      }\n\n      int matchLength = max.end() - min().start();\n      if (((matchLength - totalLength) <= slop)   // check slop\n          && (!inOrder || matchIsOrdered())) {    // check order\n        return true;\n      }\n\n      more = min().next();                        // trigger further scanning\n      if (more)\n        queue.adjustTop();                        // maintain queue\n    }\n    return false;                                 // no more matches\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f695d24a4d153a33073fe72ac72a360526a9004","date":1084304183,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/NearSpans#next().mjava","pathOld":"src/java/org/apache/lucene/search/spans/NearSpans#next().mjava","sourceNew":"  public boolean next() throws IOException {\n    if (firstTime) {\n      initList(true);\n      listToQueue();                              // initialize queue\n      firstTime = false;\n    } else if (more) {\n      more = min().next();                        // trigger further scanning\n      if (more)\n        queue.adjustTop();                        // maintain queue\n    }\n\n    while (more) {\n\n      boolean queueStale = false;\n\n      if (min().doc() != max.doc()) {             // maintain list\n        queueToList();\n        queueStale = true;\n      }\n\n      // skip to doc w/ all clauses\n\n      while (more && first.doc() < last.doc()) {\n        more = first.skipTo(last.doc());          // skip first upto last\n        firstToLast();                            // and move it to the end\n        queueStale = true;\n      }\n\n      if (!more) return false;\n\n      // found doc w/ all clauses\n\n      if (queueStale) {                           // maintain the queue\n        listToQueue();\n        queueStale = false;\n      }\n\n      if (atMatch())\n        return true;\n      \n      // trigger further scanning\n      if (inOrder && checkSlop()) {\n        /* There is a non ordered match within slop and an ordered match is needed. */\n        more = firstNonOrderedNextToPartialList();\n        if (more) {\n          partialListToQueue();                            \n        }\n      } else {\n        more = min().next();\n        if (more) {\n          queue.adjustTop();                      // maintain queue\n        }\n      }\n    }\n    return false;                                 // no more matches\n  }\n\n","sourceOld":"  public boolean next() throws IOException {\n    if (firstTime) {\n      initList(true);\n      listToQueue();                              // initialize queue\n      firstTime = false;\n    } else if (more) {\n      more = min().next();                        // trigger further scanning\n      if (more)\n        queue.adjustTop();                        // maintain queue\n    }\n\n    while (more) {\n\n      boolean queueStale = false;\n\n      if (min().doc() != max.doc()) {             // maintain list\n        queueToList();\n        queueStale = true;\n      }\n\n      // skip to doc w/ all clauses\n\n      while (more && first.doc() < last.doc()) {\n        more = first.skipTo(last.doc());          // skip first upto last\n        firstToLast();                            // and move it to the end\n        queueStale = true;\n      }\n\n      if (!more) return false;\n\n      // found doc w/ all clauses\n\n      if (queueStale) {                           // maintain the queue\n        listToQueue();\n        queueStale = false;\n      }\n\n      if (atMatch())\n        return true;\n\n      more = min().next();                        // trigger further scanning\n      if (more)\n        queue.adjustTop();                        // maintain queue\n    }\n    return false;                                 // no more matches\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98bc22650ab0fe51f9c00513397bfa42a64fc663","date":1161986633,"type":5,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/NearSpansUnordered#next().mjava","pathOld":"src/java/org/apache/lucene/search/spans/NearSpans#next().mjava","sourceNew":"  public boolean next() throws IOException {\n    if (firstTime) {\n      initList(true);\n      listToQueue(); // initialize queue\n      firstTime = false;\n    } else if (more) {\n      if (min().next()) { // trigger further scanning\n        queue.adjustTop(); // maintain queue\n      } else {\n        more = false;\n      }\n    }\n\n    while (more) {\n\n      boolean queueStale = false;\n\n      if (min().doc() != max.doc()) {             // maintain list\n        queueToList();\n        queueStale = true;\n      }\n\n      // skip to doc w/ all clauses\n\n      while (more && first.doc() < last.doc()) {\n        more = first.skipTo(last.doc());          // skip first upto last\n        firstToLast();                            // and move it to the end\n        queueStale = true;\n      }\n\n      if (!more) return false;\n\n      // found doc w/ all clauses\n\n      if (queueStale) {                           // maintain the queue\n        listToQueue();\n        queueStale = false;\n      }\n\n      if (atMatch()) {\n        return true;\n      }\n      \n      more = min().next();\n      if (more) {\n        queue.adjustTop();                      // maintain queue\n      }\n    }\n    return false;                                 // no more matches\n  }\n\n","sourceOld":"  public boolean next() throws IOException {\n    if (firstTime) {\n      initList(true);\n      listToQueue();                              // initialize queue\n      firstTime = false;\n    } else if (more) {\n      more = min().next();                        // trigger further scanning\n      if (more)\n        queue.adjustTop();                        // maintain queue\n    }\n\n    while (more) {\n\n      boolean queueStale = false;\n\n      if (min().doc() != max.doc()) {             // maintain list\n        queueToList();\n        queueStale = true;\n      }\n\n      // skip to doc w/ all clauses\n\n      while (more && first.doc() < last.doc()) {\n        more = first.skipTo(last.doc());          // skip first upto last\n        firstToLast();                            // and move it to the end\n        queueStale = true;\n      }\n\n      if (!more) return false;\n\n      // found doc w/ all clauses\n\n      if (queueStale) {                           // maintain the queue\n        listToQueue();\n        queueStale = false;\n      }\n\n      if (atMatch())\n        return true;\n      \n      // trigger further scanning\n      if (inOrder && checkSlop()) {\n        /* There is a non ordered match within slop and an ordered match is needed. */\n        more = firstNonOrderedNextToPartialList();\n        if (more) {\n          partialListToQueue();                            \n        }\n      } else {\n        more = min().next();\n        if (more) {\n          queue.adjustTop();                      // maintain queue\n        }\n      }\n    }\n    return false;                                 // no more matches\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f695d24a4d153a33073fe72ac72a360526a9004":["0e3f7c6f227c99761a334d89dab830930117876b"],"98bc22650ab0fe51f9c00513397bfa42a64fc663":["3f695d24a4d153a33073fe72ac72a360526a9004"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0bcbf4ed0baed877c8b36d024e17a99bedfdd904":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["98bc22650ab0fe51f9c00513397bfa42a64fc663"],"0e3f7c6f227c99761a334d89dab830930117876b":["442d84b5daa55f6e5e0ae5bc96d5fb9a1d3718c5"],"442d84b5daa55f6e5e0ae5bc96d5fb9a1d3718c5":["5af54d2e9e95d08aae526fa69cdd34b66a49b763"],"5af54d2e9e95d08aae526fa69cdd34b66a49b763":["0bcbf4ed0baed877c8b36d024e17a99bedfdd904"]},"commit2Childs":{"3f695d24a4d153a33073fe72ac72a360526a9004":["98bc22650ab0fe51f9c00513397bfa42a64fc663"],"98bc22650ab0fe51f9c00513397bfa42a64fc663":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0bcbf4ed0baed877c8b36d024e17a99bedfdd904"],"0bcbf4ed0baed877c8b36d024e17a99bedfdd904":["5af54d2e9e95d08aae526fa69cdd34b66a49b763"],"0e3f7c6f227c99761a334d89dab830930117876b":["3f695d24a4d153a33073fe72ac72a360526a9004"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"442d84b5daa55f6e5e0ae5bc96d5fb9a1d3718c5":["0e3f7c6f227c99761a334d89dab830930117876b"],"5af54d2e9e95d08aae526fa69cdd34b66a49b763":["442d84b5daa55f6e5e0ae5bc96d5fb9a1d3718c5"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}