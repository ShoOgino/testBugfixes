{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cz/TestCzechStemmer#testMasculineNouns().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cz/TestCzechStemmer#testMasculineNouns().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/cz/TestCzechStemmer#testMasculineNouns().mjava","sourceNew":"  /**\n   * Test showing how masculine noun forms conflate\n   */\n  public void testMasculineNouns() throws IOException {\n    CzechAnalyzer cz = new CzechAnalyzer(TEST_VERSION_CURRENT);\n    \n    /* animate ending with a hard consonant */\n    assertAnalyzesTo(cz, \"pán\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"páni\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánové\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pána\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánů\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánovi\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánům\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pány\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"páne\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánech\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánem\", new String[] { \"pán\" });\n    \n    /* inanimate ending with hard consonant */\n    assertAnalyzesTo(cz, \"hrad\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradu\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hrade\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradem\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hrady\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradech\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradům\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradů\", new String[] { \"hrad\" });\n    \n    /* animate ending with a soft consonant */\n    assertAnalyzesTo(cz, \"muž\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"muži\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"muže\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužů\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužům\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužích\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužem\", new String[] { \"muh\" });\n    \n    /* inanimate ending with a soft consonant */\n    assertAnalyzesTo(cz, \"stroj\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"stroje\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojů\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"stroji\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojům\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojích\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojem\", new String[] { \"stroj\" });\n    \n    /* ending with a */\n    assertAnalyzesTo(cz, \"předseda\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedové\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedy\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedů\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedovi\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedům\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedu\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedo\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedech\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedou\", new String[] { \"předsd\" });\n    \n    /* ending with e */\n    assertAnalyzesTo(cz, \"soudce\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudci\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudců\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcům\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcích\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcem\", new String[] { \"soudk\" });\n  }\n\n","sourceOld":"  /**\n   * Test showing how masculine noun forms conflate\n   */\n  public void testMasculineNouns() throws IOException {\n    CzechAnalyzer cz = new CzechAnalyzer(TEST_VERSION_CURRENT);\n    \n    /* animate ending with a hard consonant */\n    assertAnalyzesTo(cz, \"pán\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"páni\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánové\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pána\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánů\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánovi\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánům\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pány\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"páne\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánech\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánem\", new String[] { \"pán\" });\n    \n    /* inanimate ending with hard consonant */\n    assertAnalyzesTo(cz, \"hrad\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradu\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hrade\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradem\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hrady\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradech\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradům\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradů\", new String[] { \"hrad\" });\n    \n    /* animate ending with a soft consonant */\n    assertAnalyzesTo(cz, \"muž\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"muži\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"muže\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužů\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužům\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužích\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužem\", new String[] { \"muh\" });\n    \n    /* inanimate ending with a soft consonant */\n    assertAnalyzesTo(cz, \"stroj\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"stroje\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojů\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"stroji\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojům\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojích\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojem\", new String[] { \"stroj\" });\n    \n    /* ending with a */\n    assertAnalyzesTo(cz, \"předseda\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedové\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedy\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedů\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedovi\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedům\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedu\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedo\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedech\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedou\", new String[] { \"předsd\" });\n    \n    /* ending with e */\n    assertAnalyzesTo(cz, \"soudce\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudci\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudců\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcům\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcích\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcem\", new String[] { \"soudk\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cz/TestCzechStemmer#testMasculineNouns().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cz/TestCzechStemmer#testMasculineNouns().mjava","sourceNew":"  /**\n   * Test showing how masculine noun forms conflate\n   */\n  public void testMasculineNouns() throws IOException {\n    CzechAnalyzer cz = new CzechAnalyzer();\n    \n    /* animate ending with a hard consonant */\n    assertAnalyzesTo(cz, \"pán\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"páni\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánové\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pána\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánů\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánovi\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánům\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pány\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"páne\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánech\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánem\", new String[] { \"pán\" });\n    \n    /* inanimate ending with hard consonant */\n    assertAnalyzesTo(cz, \"hrad\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradu\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hrade\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradem\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hrady\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradech\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradům\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradů\", new String[] { \"hrad\" });\n    \n    /* animate ending with a soft consonant */\n    assertAnalyzesTo(cz, \"muž\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"muži\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"muže\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužů\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužům\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužích\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužem\", new String[] { \"muh\" });\n    \n    /* inanimate ending with a soft consonant */\n    assertAnalyzesTo(cz, \"stroj\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"stroje\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojů\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"stroji\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojům\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojích\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojem\", new String[] { \"stroj\" });\n    \n    /* ending with a */\n    assertAnalyzesTo(cz, \"předseda\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedové\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedy\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedů\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedovi\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedům\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedu\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedo\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedech\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedou\", new String[] { \"předsd\" });\n    \n    /* ending with e */\n    assertAnalyzesTo(cz, \"soudce\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudci\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudců\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcům\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcích\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcem\", new String[] { \"soudk\" });\n  }\n\n","sourceOld":"  /**\n   * Test showing how masculine noun forms conflate\n   */\n  public void testMasculineNouns() throws IOException {\n    CzechAnalyzer cz = new CzechAnalyzer(TEST_VERSION_CURRENT);\n    \n    /* animate ending with a hard consonant */\n    assertAnalyzesTo(cz, \"pán\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"páni\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánové\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pána\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánů\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánovi\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánům\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pány\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"páne\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánech\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánem\", new String[] { \"pán\" });\n    \n    /* inanimate ending with hard consonant */\n    assertAnalyzesTo(cz, \"hrad\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradu\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hrade\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradem\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hrady\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradech\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradům\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradů\", new String[] { \"hrad\" });\n    \n    /* animate ending with a soft consonant */\n    assertAnalyzesTo(cz, \"muž\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"muži\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"muže\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužů\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužům\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužích\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužem\", new String[] { \"muh\" });\n    \n    /* inanimate ending with a soft consonant */\n    assertAnalyzesTo(cz, \"stroj\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"stroje\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojů\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"stroji\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojům\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojích\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojem\", new String[] { \"stroj\" });\n    \n    /* ending with a */\n    assertAnalyzesTo(cz, \"předseda\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedové\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedy\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedů\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedovi\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedům\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedu\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedo\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedech\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedou\", new String[] { \"předsd\" });\n    \n    /* ending with e */\n    assertAnalyzesTo(cz, \"soudce\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudci\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudců\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcům\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcích\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcem\", new String[] { \"soudk\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cz/TestCzechStemmer#testMasculineNouns().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cz/TestCzechStemmer#testMasculineNouns().mjava","sourceNew":"  /**\n   * Test showing how masculine noun forms conflate\n   */\n  public void testMasculineNouns() throws IOException {\n    CzechAnalyzer cz = new CzechAnalyzer(TEST_VERSION_CURRENT);\n    \n    /* animate ending with a hard consonant */\n    assertAnalyzesTo(cz, \"pán\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"páni\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánové\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pána\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánů\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánovi\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánům\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pány\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"páne\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánech\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánem\", new String[] { \"pán\" });\n    \n    /* inanimate ending with hard consonant */\n    assertAnalyzesTo(cz, \"hrad\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradu\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hrade\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradem\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hrady\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradech\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradům\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradů\", new String[] { \"hrad\" });\n    \n    /* animate ending with a soft consonant */\n    assertAnalyzesTo(cz, \"muž\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"muži\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"muže\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužů\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužům\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužích\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužem\", new String[] { \"muh\" });\n    \n    /* inanimate ending with a soft consonant */\n    assertAnalyzesTo(cz, \"stroj\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"stroje\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojů\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"stroji\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojům\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojích\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojem\", new String[] { \"stroj\" });\n    \n    /* ending with a */\n    assertAnalyzesTo(cz, \"předseda\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedové\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedy\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedů\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedovi\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedům\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedu\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedo\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedech\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedou\", new String[] { \"předsd\" });\n    \n    /* ending with e */\n    assertAnalyzesTo(cz, \"soudce\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudci\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudců\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcům\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcích\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcem\", new String[] { \"soudk\" });\n  }\n\n","sourceOld":"  /**\n   * Test showing how masculine noun forms conflate\n   */\n  public void testMasculineNouns() throws IOException {\n    CzechAnalyzer cz = new CzechAnalyzer();\n    \n    /* animate ending with a hard consonant */\n    assertAnalyzesTo(cz, \"pán\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"páni\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánové\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pána\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánů\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánovi\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánům\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pány\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"páne\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánech\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánem\", new String[] { \"pán\" });\n    \n    /* inanimate ending with hard consonant */\n    assertAnalyzesTo(cz, \"hrad\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradu\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hrade\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradem\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hrady\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradech\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradům\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradů\", new String[] { \"hrad\" });\n    \n    /* animate ending with a soft consonant */\n    assertAnalyzesTo(cz, \"muž\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"muži\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"muže\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužů\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužům\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužích\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužem\", new String[] { \"muh\" });\n    \n    /* inanimate ending with a soft consonant */\n    assertAnalyzesTo(cz, \"stroj\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"stroje\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojů\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"stroji\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojům\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojích\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojem\", new String[] { \"stroj\" });\n    \n    /* ending with a */\n    assertAnalyzesTo(cz, \"předseda\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedové\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedy\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedů\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedovi\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedům\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedu\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedo\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedech\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedou\", new String[] { \"předsd\" });\n    \n    /* ending with e */\n    assertAnalyzesTo(cz, \"soudce\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudci\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudců\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcům\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcích\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcem\", new String[] { \"soudk\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cz/TestCzechStemmer#testMasculineNouns().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cz/TestCzechStemmer#testMasculineNouns().mjava","sourceNew":"  /**\n   * Test showing how masculine noun forms conflate\n   */\n  public void testMasculineNouns() throws IOException {\n    CzechAnalyzer cz = new CzechAnalyzer();\n    \n    /* animate ending with a hard consonant */\n    assertAnalyzesTo(cz, \"pán\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"páni\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánové\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pána\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánů\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánovi\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánům\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pány\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"páne\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánech\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánem\", new String[] { \"pán\" });\n    \n    /* inanimate ending with hard consonant */\n    assertAnalyzesTo(cz, \"hrad\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradu\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hrade\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradem\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hrady\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradech\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradům\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradů\", new String[] { \"hrad\" });\n    \n    /* animate ending with a soft consonant */\n    assertAnalyzesTo(cz, \"muž\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"muži\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"muže\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužů\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužům\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužích\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužem\", new String[] { \"muh\" });\n    \n    /* inanimate ending with a soft consonant */\n    assertAnalyzesTo(cz, \"stroj\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"stroje\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojů\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"stroji\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojům\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojích\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojem\", new String[] { \"stroj\" });\n    \n    /* ending with a */\n    assertAnalyzesTo(cz, \"předseda\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedové\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedy\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedů\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedovi\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedům\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedu\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedo\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedech\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedou\", new String[] { \"předsd\" });\n    \n    /* ending with e */\n    assertAnalyzesTo(cz, \"soudce\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudci\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudců\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcům\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcích\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcem\", new String[] { \"soudk\" });\n  }\n\n","sourceOld":"  /**\n   * Test showing how masculine noun forms conflate\n   */\n  public void testMasculineNouns() throws IOException {\n    CzechAnalyzer cz = new CzechAnalyzer(TEST_VERSION_CURRENT);\n    \n    /* animate ending with a hard consonant */\n    assertAnalyzesTo(cz, \"pán\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"páni\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánové\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pána\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánů\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánovi\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánům\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pány\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"páne\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánech\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánem\", new String[] { \"pán\" });\n    \n    /* inanimate ending with hard consonant */\n    assertAnalyzesTo(cz, \"hrad\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradu\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hrade\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradem\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hrady\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradech\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradům\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradů\", new String[] { \"hrad\" });\n    \n    /* animate ending with a soft consonant */\n    assertAnalyzesTo(cz, \"muž\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"muži\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"muže\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužů\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužům\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužích\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužem\", new String[] { \"muh\" });\n    \n    /* inanimate ending with a soft consonant */\n    assertAnalyzesTo(cz, \"stroj\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"stroje\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojů\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"stroji\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojům\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojích\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojem\", new String[] { \"stroj\" });\n    \n    /* ending with a */\n    assertAnalyzesTo(cz, \"předseda\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedové\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedy\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedů\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedovi\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedům\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedu\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedo\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedech\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedou\", new String[] { \"předsd\" });\n    \n    /* ending with e */\n    assertAnalyzesTo(cz, \"soudce\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudci\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudců\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcům\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcích\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcem\", new String[] { \"soudk\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cz/TestCzechStemmer#testMasculineNouns().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cz/TestCzechStemmer#testMasculineNouns().mjava","sourceNew":"  /**\n   * Test showing how masculine noun forms conflate\n   */\n  public void testMasculineNouns() throws IOException {\n    CzechAnalyzer cz = new CzechAnalyzer();\n    \n    /* animate ending with a hard consonant */\n    assertAnalyzesTo(cz, \"pán\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"páni\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánové\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pána\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánů\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánovi\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánům\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pány\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"páne\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánech\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánem\", new String[] { \"pán\" });\n    \n    /* inanimate ending with hard consonant */\n    assertAnalyzesTo(cz, \"hrad\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradu\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hrade\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradem\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hrady\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradech\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradům\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradů\", new String[] { \"hrad\" });\n    \n    /* animate ending with a soft consonant */\n    assertAnalyzesTo(cz, \"muž\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"muži\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"muže\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužů\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužům\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužích\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužem\", new String[] { \"muh\" });\n    \n    /* inanimate ending with a soft consonant */\n    assertAnalyzesTo(cz, \"stroj\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"stroje\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojů\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"stroji\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojům\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojích\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojem\", new String[] { \"stroj\" });\n    \n    /* ending with a */\n    assertAnalyzesTo(cz, \"předseda\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedové\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedy\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedů\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedovi\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedům\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedu\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedo\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedech\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedou\", new String[] { \"předsd\" });\n    \n    /* ending with e */\n    assertAnalyzesTo(cz, \"soudce\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudci\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudců\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcům\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcích\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcem\", new String[] { \"soudk\" });\n    \n    cz.close();\n  }\n\n","sourceOld":"  /**\n   * Test showing how masculine noun forms conflate\n   */\n  public void testMasculineNouns() throws IOException {\n    CzechAnalyzer cz = new CzechAnalyzer();\n    \n    /* animate ending with a hard consonant */\n    assertAnalyzesTo(cz, \"pán\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"páni\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánové\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pána\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánů\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánovi\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánům\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pány\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"páne\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánech\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánem\", new String[] { \"pán\" });\n    \n    /* inanimate ending with hard consonant */\n    assertAnalyzesTo(cz, \"hrad\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradu\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hrade\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradem\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hrady\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradech\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradům\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradů\", new String[] { \"hrad\" });\n    \n    /* animate ending with a soft consonant */\n    assertAnalyzesTo(cz, \"muž\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"muži\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"muže\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužů\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužům\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužích\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužem\", new String[] { \"muh\" });\n    \n    /* inanimate ending with a soft consonant */\n    assertAnalyzesTo(cz, \"stroj\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"stroje\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojů\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"stroji\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojům\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojích\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojem\", new String[] { \"stroj\" });\n    \n    /* ending with a */\n    assertAnalyzesTo(cz, \"předseda\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedové\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedy\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedů\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedovi\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedům\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedu\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedo\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedech\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedou\", new String[] { \"předsd\" });\n    \n    /* ending with e */\n    assertAnalyzesTo(cz, \"soudce\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudci\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudců\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcům\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcích\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcem\", new String[] { \"soudk\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cz/TestCzechStemmer#testMasculineNouns().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/cz/TestCzechStemmer#testMasculineNouns().mjava","sourceNew":"  /**\n   * Test showing how masculine noun forms conflate\n   */\n  public void testMasculineNouns() throws IOException {\n    CzechAnalyzer cz = new CzechAnalyzer();\n    \n    /* animate ending with a hard consonant */\n    assertAnalyzesTo(cz, \"pán\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"páni\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánové\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pána\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánů\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánovi\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánům\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pány\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"páne\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánech\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánem\", new String[] { \"pán\" });\n    \n    /* inanimate ending with hard consonant */\n    assertAnalyzesTo(cz, \"hrad\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradu\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hrade\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradem\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hrady\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradech\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradům\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradů\", new String[] { \"hrad\" });\n    \n    /* animate ending with a soft consonant */\n    assertAnalyzesTo(cz, \"muž\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"muži\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"muže\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužů\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužům\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužích\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužem\", new String[] { \"muh\" });\n    \n    /* inanimate ending with a soft consonant */\n    assertAnalyzesTo(cz, \"stroj\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"stroje\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojů\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"stroji\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojům\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojích\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojem\", new String[] { \"stroj\" });\n    \n    /* ending with a */\n    assertAnalyzesTo(cz, \"předseda\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedové\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedy\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedů\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedovi\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedům\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedu\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedo\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedech\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedou\", new String[] { \"předsd\" });\n    \n    /* ending with e */\n    assertAnalyzesTo(cz, \"soudce\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudci\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudců\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcům\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcích\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcem\", new String[] { \"soudk\" });\n    \n    cz.close();\n  }\n\n","sourceOld":"  /**\n   * Test showing how masculine noun forms conflate\n   */\n  public void testMasculineNouns() throws IOException {\n    CzechAnalyzer cz = new CzechAnalyzer();\n    \n    /* animate ending with a hard consonant */\n    assertAnalyzesTo(cz, \"pán\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"páni\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánové\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pána\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánů\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánovi\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánům\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pány\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"páne\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánech\", new String[] { \"pán\" });\n    assertAnalyzesTo(cz, \"pánem\", new String[] { \"pán\" });\n    \n    /* inanimate ending with hard consonant */\n    assertAnalyzesTo(cz, \"hrad\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradu\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hrade\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradem\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hrady\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradech\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradům\", new String[] { \"hrad\" });\n    assertAnalyzesTo(cz, \"hradů\", new String[] { \"hrad\" });\n    \n    /* animate ending with a soft consonant */\n    assertAnalyzesTo(cz, \"muž\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"muži\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"muže\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužů\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužům\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužích\", new String[] { \"muh\" });\n    assertAnalyzesTo(cz, \"mužem\", new String[] { \"muh\" });\n    \n    /* inanimate ending with a soft consonant */\n    assertAnalyzesTo(cz, \"stroj\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"stroje\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojů\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"stroji\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojům\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojích\", new String[] { \"stroj\" });\n    assertAnalyzesTo(cz, \"strojem\", new String[] { \"stroj\" });\n    \n    /* ending with a */\n    assertAnalyzesTo(cz, \"předseda\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedové\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedy\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedů\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedovi\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedům\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedu\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedo\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedech\", new String[] { \"předsd\" });\n    assertAnalyzesTo(cz, \"předsedou\", new String[] { \"předsd\" });\n    \n    /* ending with e */\n    assertAnalyzesTo(cz, \"soudce\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudci\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudců\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcům\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcích\", new String[] { \"soudk\" });\n    assertAnalyzesTo(cz, \"soudcem\", new String[] { \"soudk\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["379db3ad24c4f0214f30a122265a6d6be003a99d","a56958d7f71a28824f20031ffbb2e13502a0274e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56958d7f71a28824f20031ffbb2e13502a0274e"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}