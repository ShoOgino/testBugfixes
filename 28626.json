{"path":"lucene/core/src/test/org/apache/lucene/store/TestByteBuffersDataInput#testRandomReadsOnSlices().mjava","commits":[{"id":"fad01f81cc24b33263ccec7dbff3fb907702f91e","date":1535461373,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestByteBuffersDataInput#testRandomReadsOnSlices().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRandomReadsOnSlices() throws Exception {\n    for (int reps = randomIntBetween(1, 200); --reps > 0;) {\n      ByteBuffersDataOutput dst = new ByteBuffersDataOutput();\n  \n      byte [] prefix = new byte [randomIntBetween(0, 1024 * 8)];\n      dst.writeBytes(prefix);\n  \n      long seed = randomLong();\n      int max = 10_000;\n      List<IOConsumer<DataInput>> reply = \n          TestByteBuffersDataOutput.addRandomData(dst, new Xoroshiro128PlusRandom(seed), max);\n  \n      byte [] suffix = new byte [randomIntBetween(0, 1024 * 8)];\n      dst.writeBytes(suffix);\n      \n      ByteBuffersDataInput src = dst.toDataInput().slice(prefix.length, dst.size() - prefix.length - suffix.length);\n  \n      assertEquals(0, src.position());\n      assertEquals(dst.size() - prefix.length - suffix.length, src.size());\n      for (IOConsumer<DataInput> c : reply) {\n        c.accept(src);\n      }\n  \n      LuceneTestCase.expectThrows(EOFException.class, () -> {\n        src.readByte();\n      });\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"617d6d4150e0fb2acef8980ce51e3b8e628fb200","date":1580326292,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestByteBuffersDataInput#testRandomReadsOnSlices().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestByteBuffersDataInput#testRandomReadsOnSlices().mjava","sourceNew":"  @Test\n  public void testRandomReadsOnSlices() throws Exception {\n    for (int reps = randomIntBetween(1, 20); --reps > 0;) {\n      ByteBuffersDataOutput dst = new ByteBuffersDataOutput();\n  \n      byte [] prefix = new byte [randomIntBetween(0, 1024 * 8)];\n      dst.writeBytes(prefix);\n  \n      long seed = randomLong();\n      int max = 10_000;\n      List<IOConsumer<DataInput>> reply = \n          TestByteBuffersDataOutput.addRandomData(dst, new Xoroshiro128PlusRandom(seed), max);\n  \n      byte [] suffix = new byte [randomIntBetween(0, 1024 * 8)];\n      dst.writeBytes(suffix);\n      \n      ByteBuffersDataInput src = dst.toDataInput().slice(prefix.length, dst.size() - prefix.length - suffix.length);\n  \n      assertEquals(0, src.position());\n      assertEquals(dst.size() - prefix.length - suffix.length, src.size());\n      for (IOConsumer<DataInput> c : reply) {\n        c.accept(src);\n      }\n  \n      LuceneTestCase.expectThrows(EOFException.class, () -> {\n        src.readByte();\n      });\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomReadsOnSlices() throws Exception {\n    for (int reps = randomIntBetween(1, 200); --reps > 0;) {\n      ByteBuffersDataOutput dst = new ByteBuffersDataOutput();\n  \n      byte [] prefix = new byte [randomIntBetween(0, 1024 * 8)];\n      dst.writeBytes(prefix);\n  \n      long seed = randomLong();\n      int max = 10_000;\n      List<IOConsumer<DataInput>> reply = \n          TestByteBuffersDataOutput.addRandomData(dst, new Xoroshiro128PlusRandom(seed), max);\n  \n      byte [] suffix = new byte [randomIntBetween(0, 1024 * 8)];\n      dst.writeBytes(suffix);\n      \n      ByteBuffersDataInput src = dst.toDataInput().slice(prefix.length, dst.size() - prefix.length - suffix.length);\n  \n      assertEquals(0, src.position());\n      assertEquals(dst.size() - prefix.length - suffix.length, src.size());\n      for (IOConsumer<DataInput> c : reply) {\n        c.accept(src);\n      }\n  \n      LuceneTestCase.expectThrows(EOFException.class, () -> {\n        src.readByte();\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fad01f81cc24b33263ccec7dbff3fb907702f91e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"617d6d4150e0fb2acef8980ce51e3b8e628fb200":["fad01f81cc24b33263ccec7dbff3fb907702f91e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["617d6d4150e0fb2acef8980ce51e3b8e628fb200"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fad01f81cc24b33263ccec7dbff3fb907702f91e"],"fad01f81cc24b33263ccec7dbff3fb907702f91e":["617d6d4150e0fb2acef8980ce51e3b8e628fb200"],"617d6d4150e0fb2acef8980ce51e3b8e628fb200":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}