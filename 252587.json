{"path":"backwards/src/java/org/apache/lucene/search/spans/SpanFirstQuery#getSpans(IndexReader).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/search/spans/SpanFirstQuery#getSpans(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Spans getSpans(final IndexReader reader) throws IOException {\n    return new Spans() {\n        private Spans spans = match.getSpans(reader);\n\n        @Override\n        public boolean next() throws IOException {\n          while (spans.next()) {                  // scan to next match\n            if (end() <= end)\n              return true;\n          }\n          return false;\n        }\n\n        @Override\n        public boolean skipTo(int target) throws IOException {\n          if (!spans.skipTo(target))\n            return false;\n\n          return spans.end() <= end || next();\n\n        }\n\n        @Override\n        public int doc() { return spans.doc(); }\n        @Override\n        public int start() { return spans.start(); }\n        @Override\n        public int end() { return spans.end(); }\n\n      // TODO: Remove warning after API has been finalized\n      @Override\n      public Collection<byte[]> getPayload() throws IOException {\n        ArrayList<byte[]> result = null;\n        if (spans.isPayloadAvailable()) {\n          result = new ArrayList<byte[]>(spans.getPayload());\n        }\n        return result;//TODO: any way to avoid the new construction?\n      }\n\n      // TODO: Remove warning after API has been finalized\n      @Override\n      public boolean isPayloadAvailable() {\n        return spans.isPayloadAvailable();\n      }\n\n      @Override\n      public String toString() {\n          return \"spans(\" + SpanFirstQuery.this.toString() + \")\";\n        }\n\n      };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/spans/SpanFirstQuery#getSpans(IndexReader).mjava","pathOld":"backwards/src/java/org/apache/lucene/search/spans/SpanFirstQuery#getSpans(IndexReader).mjava","sourceNew":"  @Override\n  public Spans getSpans(final IndexReader reader) throws IOException {\n    return new Spans() {\n        private Spans spans = match.getSpans(reader);\n\n        @Override\n        public boolean next() throws IOException {\n          while (spans.next()) {                  // scan to next match\n            if (end() <= end)\n              return true;\n          }\n          return false;\n        }\n\n        @Override\n        public boolean skipTo(int target) throws IOException {\n          if (!spans.skipTo(target))\n            return false;\n\n          return spans.end() <= end || next();\n\n        }\n\n        @Override\n        public int doc() { return spans.doc(); }\n        @Override\n        public int start() { return spans.start(); }\n        @Override\n        public int end() { return spans.end(); }\n\n      // TODO: Remove warning after API has been finalized\n      @Override\n      public Collection<byte[]> getPayload() throws IOException {\n        ArrayList<byte[]> result = null;\n        if (spans.isPayloadAvailable()) {\n          result = new ArrayList<byte[]>(spans.getPayload());\n        }\n        return result;//TODO: any way to avoid the new construction?\n      }\n\n      // TODO: Remove warning after API has been finalized\n      @Override\n      public boolean isPayloadAvailable() {\n        return spans.isPayloadAvailable();\n      }\n\n      @Override\n      public String toString() {\n          return \"spans(\" + SpanFirstQuery.this.toString() + \")\";\n        }\n\n      };\n  }\n\n","sourceOld":"  @Override\n  public Spans getSpans(final IndexReader reader) throws IOException {\n    return new Spans() {\n        private Spans spans = match.getSpans(reader);\n\n        @Override\n        public boolean next() throws IOException {\n          while (spans.next()) {                  // scan to next match\n            if (end() <= end)\n              return true;\n          }\n          return false;\n        }\n\n        @Override\n        public boolean skipTo(int target) throws IOException {\n          if (!spans.skipTo(target))\n            return false;\n\n          return spans.end() <= end || next();\n\n        }\n\n        @Override\n        public int doc() { return spans.doc(); }\n        @Override\n        public int start() { return spans.start(); }\n        @Override\n        public int end() { return spans.end(); }\n\n      // TODO: Remove warning after API has been finalized\n      @Override\n      public Collection<byte[]> getPayload() throws IOException {\n        ArrayList<byte[]> result = null;\n        if (spans.isPayloadAvailable()) {\n          result = new ArrayList<byte[]>(spans.getPayload());\n        }\n        return result;//TODO: any way to avoid the new construction?\n      }\n\n      // TODO: Remove warning after API has been finalized\n      @Override\n      public boolean isPayloadAvailable() {\n        return spans.isPayloadAvailable();\n      }\n\n      @Override\n      public String toString() {\n          return \"spans(\" + SpanFirstQuery.this.toString() + \")\";\n        }\n\n      };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}