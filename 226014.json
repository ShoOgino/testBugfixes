{"path":"solr/core/src/test/org/apache/solr/analytics/util/valuesource/FunctionTest#beforeClass().mjava","commits":[{"id":"ff403346522eaa9de75403763e297e83a3ea585c","date":1384904731,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analytics/util/valuesource/FunctionTest#beforeClass().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-basic.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT+1;\n      long l = j%LONG+1;\n      float f = j%FLOAT+1;\n      double d = j%DOUBLE+1;\n      double d0 = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-06-30T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n\n      double add_if = (double)i+f;\n      double add_ldf = (double)l+d+f;\n      double mult_if = (double)i*f;\n      double mult_ldf = (double)l*d*f;\n      double div_if = (double)i/f;\n      double div_ld = (double)l/d;\n      double pow_if = Math.pow(i,f);\n      double pow_ld = Math.pow(l,d);\n      double neg_i = (double)i*-1;\n      double neg_l = (double)l*-1;\n      String dm_2y = (1802+j%DATE) + \"-06-30T23:59:59Z\";\n      String dm_2m = (1800+j%DATE) + \"-08-30T23:59:59Z\";\n      String concat_first = \"this is the first\"+s;\n      String concat_second = \"this is the second\"+s;\n      String rev = new StringBuilder(s).reverse().toString();\n      \n      assertU(adoc(AbstractAnalyticsFacetTest.filter(\"id\", \"1000\" + j, \"int_id\", \"\" + i, \"long_ld\", \"\" + l, \"float_fd\", \"\" + f, \n            \"double_dd\", \"\" + d,  \"date_dtd\", dt, \"string_sd\", s,\n            \"add_if_dd\", \"\"+add_if, \"add_ldf_dd\", \"\"+add_ldf, \"mult_if_dd\", \"\"+mult_if, \"mult_ldf_dd\", \"\"+mult_ldf,\n            \"div_if_dd\", \"\"+div_if, \"div_ld_dd\", \"\"+div_ld, \"pow_if_dd\", \"\"+pow_if, \"pow_ld_dd\", \"\"+pow_ld,\n            \"neg_i_dd\", \"\"+neg_i, \"neg_l_dd\", \"\"+neg_l, \"const_8_dd\", \"8\", \"const_10_dd\", \"10\", \"dm_2y_dtd\", dm_2y, \"dm_2m_dtd\", dm_2m,\n            \"const_00_dtd\", \"1800-06-30T23:59:59Z\", \"const_04_dtd\", \"1804-06-30T23:59:59Z\", \"const_first_sd\", \"this is the first\", \"const_second_sd\", \"this is the second\",\n            \"concat_first_sd\", concat_first, \"concat_second_sd\", concat_second, \"rev_sd\", rev, \"miss_dd\", \"\"+d0 )));\n      \n      \n      if (usually()) {\n        commit(); // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    response = h.query(request(fileToStringArr(fileName)));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2408d2a60b59b9f5d910383ce065127078892c04","date":1385328825,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analytics/util/valuesource/FunctionTest#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/analytics/util/valuesource/FunctionTest#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-basic.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT+1;\n      long l = j%LONG+1;\n      float f = j%FLOAT+1;\n      double d = j%DOUBLE+1;\n      double d0 = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-06-30T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n\n      double add_if = (double)i+f;\n      double add_ldf = (double)l+d+f;\n      double mult_if = (double)i*f;\n      double mult_ldf = (double)l*d*f;\n      double div_if = (double)i/f;\n      double div_ld = (double)l/d;\n      double pow_if = Math.pow(i,f);\n      double pow_ld = Math.pow(l,d);\n      double neg_i = (double)i*-1;\n      double neg_l = (double)l*-1;\n      String dm_2y = (1802+j%DATE) + \"-06-30T23:59:59Z\";\n      String dm_2m = (1800+j%DATE) + \"-08-30T23:59:59Z\";\n      String concat_first = \"this is the first\"+s;\n      String concat_second = \"this is the second\"+s;\n      String rev = new StringBuilder(s).reverse().toString();\n      \n      assertU(adoc(AbstractAnalyticsFacetTest.filter(\"id\", \"1000\" + j, \"int_id\", \"\" + i, \"long_ld\", \"\" + l, \"float_fd\", \"\" + f, \n            \"double_dd\", \"\" + d,  \"date_dtd\", dt, \"string_sd\", s,\n            \"add_if_dd\", \"\"+add_if, \"add_ldf_dd\", \"\"+add_ldf, \"mult_if_dd\", \"\"+mult_if, \"mult_ldf_dd\", \"\"+mult_ldf,\n            \"div_if_dd\", \"\"+div_if, \"div_ld_dd\", \"\"+div_ld, \"pow_if_dd\", \"\"+pow_if, \"pow_ld_dd\", \"\"+pow_ld,\n            \"neg_i_dd\", \"\"+neg_i, \"neg_l_dd\", \"\"+neg_l, \"const_8_dd\", \"8\", \"const_10_dd\", \"10\", \"dm_2y_dtd\", dm_2y, \"dm_2m_dtd\", dm_2m,\n            \"const_00_dtd\", \"1800-06-30T23:59:59Z\", \"const_04_dtd\", \"1804-06-30T23:59:59Z\", \"const_first_sd\", \"this is the first\", \"const_second_sd\", \"this is the second\",\n            \"concat_first_sd\", concat_first, \"concat_second_sd\", concat_second, \"rev_sd\", rev, \"miss_dd\", \"\"+d0 )));\n      \n      \n      if (usually()) {\n        commit(); // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    setResponse(h.query(request(fileToStringArr(fileName))));\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-basic.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT+1;\n      long l = j%LONG+1;\n      float f = j%FLOAT+1;\n      double d = j%DOUBLE+1;\n      double d0 = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-06-30T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n\n      double add_if = (double)i+f;\n      double add_ldf = (double)l+d+f;\n      double mult_if = (double)i*f;\n      double mult_ldf = (double)l*d*f;\n      double div_if = (double)i/f;\n      double div_ld = (double)l/d;\n      double pow_if = Math.pow(i,f);\n      double pow_ld = Math.pow(l,d);\n      double neg_i = (double)i*-1;\n      double neg_l = (double)l*-1;\n      String dm_2y = (1802+j%DATE) + \"-06-30T23:59:59Z\";\n      String dm_2m = (1800+j%DATE) + \"-08-30T23:59:59Z\";\n      String concat_first = \"this is the first\"+s;\n      String concat_second = \"this is the second\"+s;\n      String rev = new StringBuilder(s).reverse().toString();\n      \n      assertU(adoc(AbstractAnalyticsFacetTest.filter(\"id\", \"1000\" + j, \"int_id\", \"\" + i, \"long_ld\", \"\" + l, \"float_fd\", \"\" + f, \n            \"double_dd\", \"\" + d,  \"date_dtd\", dt, \"string_sd\", s,\n            \"add_if_dd\", \"\"+add_if, \"add_ldf_dd\", \"\"+add_ldf, \"mult_if_dd\", \"\"+mult_if, \"mult_ldf_dd\", \"\"+mult_ldf,\n            \"div_if_dd\", \"\"+div_if, \"div_ld_dd\", \"\"+div_ld, \"pow_if_dd\", \"\"+pow_if, \"pow_ld_dd\", \"\"+pow_ld,\n            \"neg_i_dd\", \"\"+neg_i, \"neg_l_dd\", \"\"+neg_l, \"const_8_dd\", \"8\", \"const_10_dd\", \"10\", \"dm_2y_dtd\", dm_2y, \"dm_2m_dtd\", dm_2m,\n            \"const_00_dtd\", \"1800-06-30T23:59:59Z\", \"const_04_dtd\", \"1804-06-30T23:59:59Z\", \"const_first_sd\", \"this is the first\", \"const_second_sd\", \"this is the second\",\n            \"concat_first_sd\", concat_first, \"concat_second_sd\", concat_second, \"rev_sd\", rev, \"miss_dd\", \"\"+d0 )));\n      \n      \n      if (usually()) {\n        commit(); // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    response = h.query(request(fileToStringArr(fileName)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analytics/util/valuesource/FunctionTest#beforeClass().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-basic.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT+1;\n      long l = j%LONG+1;\n      float f = j%FLOAT+1;\n      double d = j%DOUBLE+1;\n      double d0 = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-06-30T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n\n      double add_if = (double)i+f;\n      double add_ldf = (double)l+d+f;\n      double mult_if = (double)i*f;\n      double mult_ldf = (double)l*d*f;\n      double div_if = (double)i/f;\n      double div_ld = (double)l/d;\n      double pow_if = Math.pow(i,f);\n      double pow_ld = Math.pow(l,d);\n      double neg_i = (double)i*-1;\n      double neg_l = (double)l*-1;\n      String dm_2y = (1802+j%DATE) + \"-06-30T23:59:59Z\";\n      String dm_2m = (1800+j%DATE) + \"-08-30T23:59:59Z\";\n      String concat_first = \"this is the first\"+s;\n      String concat_second = \"this is the second\"+s;\n      String rev = new StringBuilder(s).reverse().toString();\n      \n      assertU(adoc(AbstractAnalyticsFacetTest.filter(\"id\", \"1000\" + j, \"int_id\", \"\" + i, \"long_ld\", \"\" + l, \"float_fd\", \"\" + f, \n            \"double_dd\", \"\" + d,  \"date_dtd\", dt, \"string_sd\", s,\n            \"add_if_dd\", \"\"+add_if, \"add_ldf_dd\", \"\"+add_ldf, \"mult_if_dd\", \"\"+mult_if, \"mult_ldf_dd\", \"\"+mult_ldf,\n            \"div_if_dd\", \"\"+div_if, \"div_ld_dd\", \"\"+div_ld, \"pow_if_dd\", \"\"+pow_if, \"pow_ld_dd\", \"\"+pow_ld,\n            \"neg_i_dd\", \"\"+neg_i, \"neg_l_dd\", \"\"+neg_l, \"const_8_dd\", \"8\", \"const_10_dd\", \"10\", \"dm_2y_dtd\", dm_2y, \"dm_2m_dtd\", dm_2m,\n            \"const_00_dtd\", \"1800-06-30T23:59:59Z\", \"const_04_dtd\", \"1804-06-30T23:59:59Z\", \"const_first_sd\", \"this is the first\", \"const_second_sd\", \"this is the second\",\n            \"concat_first_sd\", concat_first, \"concat_second_sd\", concat_second, \"rev_sd\", rev, \"miss_dd\", \"\"+d0 )));\n      \n      \n      if (usually()) {\n        commit(); // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    setResponse(h.query(request(fileToStringArr(fileName))));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"404b171beda23ddce9e45366a3dbd6444d8d029c","date":1391180301,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analytics/util/valuesource/FunctionTest#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/analytics/util/valuesource/FunctionTest#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-basic.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT+1;\n      long l = j%LONG+1;\n      float f = j%FLOAT+1;\n      double d = j%DOUBLE+1;\n      double d0 = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-06-30T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n\n      double add_if = (double)i+f;\n      double add_ldf = (double)l+d+f;\n      double mult_if = (double)i*f;\n      double mult_ldf = (double)l*d*f;\n      double div_if = (double)i/f;\n      double div_ld = (double)l/d;\n      double pow_if = Math.pow(i,f);\n      double pow_ld = Math.pow(l,d);\n      double neg_i = (double)i*-1;\n      double neg_l = (double)l*-1;\n      String dm_2y = (1802+j%DATE) + \"-06-30T23:59:59Z\";\n      String dm_2m = (1800+j%DATE) + \"-08-30T23:59:59Z\";\n      String concat_first = \"this is the first\"+s;\n      String concat_second = \"this is the second\"+s;\n      String rev = new StringBuilder(s).reverse().toString();\n      \n      assertU(adoc(AbstractAnalyticsFacetTest.filter(\"id\", \"1000\" + j, \"int_id\", \"\" + i, \"long_ld\", \"\" + l, \"float_fd\", \"\" + f, \n            \"double_dd\", \"\" + d,  \"date_dtd\", dt, \"string_sd\", s,\n            \"add_if_dd\", \"\"+add_if, \"add_ldf_dd\", \"\"+add_ldf, \"mult_if_dd\", \"\"+mult_if, \"mult_ldf_dd\", \"\"+mult_ldf,\n            \"div_if_dd\", \"\"+div_if, \"div_ld_dd\", \"\"+div_ld, \"pow_if_dd\", \"\"+pow_if, \"pow_ld_dd\", \"\"+pow_ld,\n            \"neg_i_dd\", \"\"+neg_i, \"neg_l_dd\", \"\"+neg_l, \"const_8_dd\", \"8\", \"const_10_dd\", \"10\", \"dm_2y_dtd\", dm_2y, \"dm_2m_dtd\", dm_2m,\n            \"const_00_dtd\", \"1800-06-30T23:59:59Z\", \"const_04_dtd\", \"1804-06-30T23:59:59Z\", \"const_first_sd\", \"this is the first\", \"const_second_sd\", \"this is the second\",\n            \"concat_first_sd\", concat_first, \"concat_second_sd\", concat_second, \"rev_sd\", rev, \"miss_dd\", \"\"+d0 )));\n      \n      \n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    setResponse(h.query(request(fileToStringArr(fileName))));\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-basic.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT+1;\n      long l = j%LONG+1;\n      float f = j%FLOAT+1;\n      double d = j%DOUBLE+1;\n      double d0 = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-06-30T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n\n      double add_if = (double)i+f;\n      double add_ldf = (double)l+d+f;\n      double mult_if = (double)i*f;\n      double mult_ldf = (double)l*d*f;\n      double div_if = (double)i/f;\n      double div_ld = (double)l/d;\n      double pow_if = Math.pow(i,f);\n      double pow_ld = Math.pow(l,d);\n      double neg_i = (double)i*-1;\n      double neg_l = (double)l*-1;\n      String dm_2y = (1802+j%DATE) + \"-06-30T23:59:59Z\";\n      String dm_2m = (1800+j%DATE) + \"-08-30T23:59:59Z\";\n      String concat_first = \"this is the first\"+s;\n      String concat_second = \"this is the second\"+s;\n      String rev = new StringBuilder(s).reverse().toString();\n      \n      assertU(adoc(AbstractAnalyticsFacetTest.filter(\"id\", \"1000\" + j, \"int_id\", \"\" + i, \"long_ld\", \"\" + l, \"float_fd\", \"\" + f, \n            \"double_dd\", \"\" + d,  \"date_dtd\", dt, \"string_sd\", s,\n            \"add_if_dd\", \"\"+add_if, \"add_ldf_dd\", \"\"+add_ldf, \"mult_if_dd\", \"\"+mult_if, \"mult_ldf_dd\", \"\"+mult_ldf,\n            \"div_if_dd\", \"\"+div_if, \"div_ld_dd\", \"\"+div_ld, \"pow_if_dd\", \"\"+pow_if, \"pow_ld_dd\", \"\"+pow_ld,\n            \"neg_i_dd\", \"\"+neg_i, \"neg_l_dd\", \"\"+neg_l, \"const_8_dd\", \"8\", \"const_10_dd\", \"10\", \"dm_2y_dtd\", dm_2y, \"dm_2m_dtd\", dm_2m,\n            \"const_00_dtd\", \"1800-06-30T23:59:59Z\", \"const_04_dtd\", \"1804-06-30T23:59:59Z\", \"const_first_sd\", \"this is the first\", \"const_second_sd\", \"this is the second\",\n            \"concat_first_sd\", concat_first, \"concat_second_sd\", concat_second, \"rev_sd\", rev, \"miss_dd\", \"\"+d0 )));\n      \n      \n      if (usually()) {\n        commit(); // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    setResponse(h.query(request(fileToStringArr(fileName))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a475a1c165e02515bff766b3b7be0c42edf1870c","date":1393099333,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analytics/util/valuesource/FunctionTest#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/analytics/util/valuesource/FunctionTest#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-basic.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT+1;\n      long l = j%LONG+1;\n      float f = j%FLOAT+1;\n      double d = j%DOUBLE+1;\n      double d0 = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-06-30T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n\n      double add_if = (double)i+f;\n      double add_ldf = (double)l+d+f;\n      double mult_if = (double)i*f;\n      double mult_ldf = (double)l*d*f;\n      double div_if = (double)i/f;\n      double div_ld = (double)l/d;\n      double pow_if = Math.pow(i,f);\n      double pow_ld = Math.pow(l,d);\n      double neg_i = (double)i*-1;\n      double neg_l = (double)l*-1;\n      String dm_2y = (1802+j%DATE) + \"-06-30T23:59:59Z\";\n      String dm_2m = (1800+j%DATE) + \"-08-30T23:59:59Z\";\n      String concat_first = \"this is the first\"+s;\n      String concat_second = \"this is the second\"+s;\n      String rev = new StringBuilder(s).reverse().toString();\n      \n      assertU(adoc(AbstractAnalyticsFacetTest.filter(\"id\", \"1000\" + j, \"int_id\", \"\" + i, \"long_ld\", \"\" + l, \"float_fd\", \"\" + f, \n            \"double_dd\", \"\" + d,  \"date_dtd\", dt, \"string_sd\", s,\n            \"add_if_dd\", \"\"+add_if, \"add_ldf_dd\", \"\"+add_ldf, \"mult_if_dd\", \"\"+mult_if, \"mult_ldf_dd\", \"\"+mult_ldf,\n            \"div_if_dd\", \"\"+div_if, \"div_ld_dd\", \"\"+div_ld, \"pow_if_dd\", \"\"+pow_if, \"pow_ld_dd\", \"\"+pow_ld,\n            \"neg_i_dd\", \"\"+neg_i, \"neg_l_dd\", \"\"+neg_l, \"const_8_dd\", \"8\", \"const_10_dd\", \"10\", \"dm_2y_dtd\", dm_2y, \"dm_2m_dtd\", dm_2m,\n            \"const_00_dtd\", \"1800-06-30T23:59:59Z\", \"const_04_dtd\", \"1804-06-30T23:59:59Z\", \"const_first_sd\", \"this is the first\", \"const_second_sd\", \"this is the second\",\n            \"concat_first_sd\", concat_first, \"concat_second_sd\", concat_second, \"rev_sd\", rev, \"miss_dd\", \"\"+d0 )));\n      \n      \n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    setResponse(h.query(request(fileToStringArr(FunctionTest.class, fileName))));\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-basic.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT+1;\n      long l = j%LONG+1;\n      float f = j%FLOAT+1;\n      double d = j%DOUBLE+1;\n      double d0 = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-06-30T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n\n      double add_if = (double)i+f;\n      double add_ldf = (double)l+d+f;\n      double mult_if = (double)i*f;\n      double mult_ldf = (double)l*d*f;\n      double div_if = (double)i/f;\n      double div_ld = (double)l/d;\n      double pow_if = Math.pow(i,f);\n      double pow_ld = Math.pow(l,d);\n      double neg_i = (double)i*-1;\n      double neg_l = (double)l*-1;\n      String dm_2y = (1802+j%DATE) + \"-06-30T23:59:59Z\";\n      String dm_2m = (1800+j%DATE) + \"-08-30T23:59:59Z\";\n      String concat_first = \"this is the first\"+s;\n      String concat_second = \"this is the second\"+s;\n      String rev = new StringBuilder(s).reverse().toString();\n      \n      assertU(adoc(AbstractAnalyticsFacetTest.filter(\"id\", \"1000\" + j, \"int_id\", \"\" + i, \"long_ld\", \"\" + l, \"float_fd\", \"\" + f, \n            \"double_dd\", \"\" + d,  \"date_dtd\", dt, \"string_sd\", s,\n            \"add_if_dd\", \"\"+add_if, \"add_ldf_dd\", \"\"+add_ldf, \"mult_if_dd\", \"\"+mult_if, \"mult_ldf_dd\", \"\"+mult_ldf,\n            \"div_if_dd\", \"\"+div_if, \"div_ld_dd\", \"\"+div_ld, \"pow_if_dd\", \"\"+pow_if, \"pow_ld_dd\", \"\"+pow_ld,\n            \"neg_i_dd\", \"\"+neg_i, \"neg_l_dd\", \"\"+neg_l, \"const_8_dd\", \"8\", \"const_10_dd\", \"10\", \"dm_2y_dtd\", dm_2y, \"dm_2m_dtd\", dm_2m,\n            \"const_00_dtd\", \"1800-06-30T23:59:59Z\", \"const_04_dtd\", \"1804-06-30T23:59:59Z\", \"const_first_sd\", \"this is the first\", \"const_second_sd\", \"this is the second\",\n            \"concat_first_sd\", concat_first, \"concat_second_sd\", concat_second, \"rev_sd\", rev, \"miss_dd\", \"\"+d0 )));\n      \n      \n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    setResponse(h.query(request(fileToStringArr(fileName))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/util/valuesource/FunctionTest#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/analytics/util/valuesource/FunctionTest#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-basic.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT+1;\n      long l = j%LONG+1;\n      float f = j%FLOAT+1;\n      double d = j%DOUBLE+1;\n      double d0 = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-06-30T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n\n      double add_if = (double)i+f;\n      double add_ldf = (double)l+d+f;\n      double mult_if = (double)i*f;\n      double mult_ldf = (double)l*d*f;\n      double div_if = (double)i/f;\n      double div_ld = (double)l/d;\n      double pow_if = Math.pow(i,f);\n      double pow_ld = Math.pow(l,d);\n      double neg_i = (double)i*-1;\n      double neg_l = (double)l*-1;\n      String dm_2y = (1802+j%DATE) + \"-06-30T23:59:59Z\";\n      String dm_2m = (1800+j%DATE) + \"-08-30T23:59:59Z\";\n      String concat_first = \"this is the first\"+s;\n      String concat_second = \"this is the second\"+s;\n      String rev = new StringBuilder(s).reverse().toString();\n      \n      assertU(adoc(AbstractAnalyticsFacetTest.filter(\"id\", \"1000\" + j, \"int_id\", \"\" + i, \"long_ld\", \"\" + l, \"float_fd\", \"\" + f, \n            \"double_dd\", \"\" + d,  \"date_dtd\", dt, \"string_sd\", s,\n            \"add_if_dd\", \"\"+add_if, \"add_ldf_dd\", \"\"+add_ldf, \"mult_if_dd\", \"\"+mult_if, \"mult_ldf_dd\", \"\"+mult_ldf,\n            \"div_if_dd\", \"\"+div_if, \"div_ld_dd\", \"\"+div_ld, \"pow_if_dd\", \"\"+pow_if, \"pow_ld_dd\", \"\"+pow_ld,\n            \"neg_i_dd\", \"\"+neg_i, \"neg_l_dd\", \"\"+neg_l, \"const_8_dd\", \"8\", \"const_10_dd\", \"10\", \"dm_2y_dtd\", dm_2y, \"dm_2m_dtd\", dm_2m,\n            \"const_00_dtd\", \"1800-06-30T23:59:59Z\", \"const_04_dtd\", \"1804-06-30T23:59:59Z\", \"const_first_sd\", \"this is the first\", \"const_second_sd\", \"this is the second\",\n            \"concat_first_sd\", concat_first, \"concat_second_sd\", concat_second, \"rev_sd\", rev, \"miss_dd\", \"\"+d0 )));\n      \n      \n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    setResponse(h.query(request(fileToStringArr(FunctionTest.class, fileName))));\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-basic.xml\",\"schema-analytics.xml\");\n    h.update(\"<delete><query>*:*</query></delete>\");\n    \n    for (int j = 0; j < NUM_LOOPS; ++j) {\n      int i = j%INT+1;\n      long l = j%LONG+1;\n      float f = j%FLOAT+1;\n      double d = j%DOUBLE+1;\n      double d0 = j%DOUBLE;\n      String dt = (1800+j%DATE) + \"-06-30T23:59:59Z\";\n      String s = \"str\" + (j%STRING);\n\n      double add_if = (double)i+f;\n      double add_ldf = (double)l+d+f;\n      double mult_if = (double)i*f;\n      double mult_ldf = (double)l*d*f;\n      double div_if = (double)i/f;\n      double div_ld = (double)l/d;\n      double pow_if = Math.pow(i,f);\n      double pow_ld = Math.pow(l,d);\n      double neg_i = (double)i*-1;\n      double neg_l = (double)l*-1;\n      String dm_2y = (1802+j%DATE) + \"-06-30T23:59:59Z\";\n      String dm_2m = (1800+j%DATE) + \"-08-30T23:59:59Z\";\n      String concat_first = \"this is the first\"+s;\n      String concat_second = \"this is the second\"+s;\n      String rev = new StringBuilder(s).reverse().toString();\n      \n      assertU(adoc(AbstractAnalyticsFacetTest.filter(\"id\", \"1000\" + j, \"int_id\", \"\" + i, \"long_ld\", \"\" + l, \"float_fd\", \"\" + f, \n            \"double_dd\", \"\" + d,  \"date_dtd\", dt, \"string_sd\", s,\n            \"add_if_dd\", \"\"+add_if, \"add_ldf_dd\", \"\"+add_ldf, \"mult_if_dd\", \"\"+mult_if, \"mult_ldf_dd\", \"\"+mult_ldf,\n            \"div_if_dd\", \"\"+div_if, \"div_ld_dd\", \"\"+div_ld, \"pow_if_dd\", \"\"+pow_if, \"pow_ld_dd\", \"\"+pow_ld,\n            \"neg_i_dd\", \"\"+neg_i, \"neg_l_dd\", \"\"+neg_l, \"const_8_dd\", \"8\", \"const_10_dd\", \"10\", \"dm_2y_dtd\", dm_2y, \"dm_2m_dtd\", dm_2m,\n            \"const_00_dtd\", \"1800-06-30T23:59:59Z\", \"const_04_dtd\", \"1804-06-30T23:59:59Z\", \"const_first_sd\", \"this is the first\", \"const_second_sd\", \"this is the second\",\n            \"concat_first_sd\", concat_first, \"concat_second_sd\", concat_second, \"rev_sd\", rev, \"miss_dd\", \"\"+d0 )));\n      \n      \n      if (usually()) {\n        assertU(commit()); // to have several segments\n      }\n    }\n    \n    assertU(commit()); \n    \n    setResponse(h.query(request(fileToStringArr(FunctionTest.class, fileName))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a475a1c165e02515bff766b3b7be0c42edf1870c":["404b171beda23ddce9e45366a3dbd6444d8d029c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2408d2a60b59b9f5d910383ce065127078892c04"],"2408d2a60b59b9f5d910383ce065127078892c04":["ff403346522eaa9de75403763e297e83a3ea585c"],"ff403346522eaa9de75403763e297e83a3ea585c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"404b171beda23ddce9e45366a3dbd6444d8d029c":["2408d2a60b59b9f5d910383ce065127078892c04"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["a475a1c165e02515bff766b3b7be0c42edf1870c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f719faa74f7213d4a395510dbc1f1b7cb178484"]},"commit2Childs":{"a475a1c165e02515bff766b3b7be0c42edf1870c":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","ff403346522eaa9de75403763e297e83a3ea585c"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"2408d2a60b59b9f5d910383ce065127078892c04":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","404b171beda23ddce9e45366a3dbd6444d8d029c"],"ff403346522eaa9de75403763e297e83a3ea585c":["2408d2a60b59b9f5d910383ce065127078892c04"],"404b171beda23ddce9e45366a3dbd6444d8d029c":["a475a1c165e02515bff766b3b7be0c42edf1870c"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}