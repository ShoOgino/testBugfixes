{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testCreateAndDeleteCollection().mjava","commits":[{"id":"cd01cddc46c498fba02505e77f225300f83242db","date":1419298241,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testCreateAndDeleteCollection().mjava","pathOld":"/dev/null","sourceNew":"  protected void testCreateAndDeleteCollection() throws Exception {\n    String collectionName = \"solrj_test\";\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(collectionName);\n    createCollectionRequest.setNumShards(2);\n    createCollectionRequest.setReplicationFactor(2);\n    createCollectionRequest.setConfigName(\"conf1\");\n    createCollectionRequest.setRouterField(\"myOwnField\");\n    CollectionAdminResponse response = createCollectionRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(collectionName + \"_shard\" + (i/2+1) + \"_replica\" + (i%2+1));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    cloudClient.setDefaultCollection(collectionName);\n    CollectionAdminRequest.Delete deleteCollectionRequest = new CollectionAdminRequest.Delete();\n    deleteCollectionRequest.setCollectionName(collectionName);\n    response = deleteCollectionRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String,NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertNull(\"Deleted collection \" + collectionName + \"still exists\",\n        cloudClient.getZkStateReader().getClusterState().getCollectionOrNull(collectionName));\n    assertEquals(4, nodesStatus.size());\n    \n    // Test Creating a collection with new stateformat.\n    collectionName = \"solrj_newstateformat\";\n    createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(collectionName);\n    createCollectionRequest.setNumShards(2);\n    createCollectionRequest.setConfigName(\"conf1\");\n    createCollectionRequest.setStateFormat(2);\n\n    response = createCollectionRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForRecoveriesToFinish(collectionName, false);\n    assertTrue(\"Collection state does not exist\",\n        cloudClient.getZkStateReader().getZkClient()\n            .exists(ZkStateReader.getCollectionPath(collectionName), true));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56","5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"182acd29cf4cb1644a02b8517f3a5b867c0d7cce","date":1432665213,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testCreateAndDeleteCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testCreateAndDeleteCollection().mjava","sourceNew":"  protected void testCreateAndDeleteCollection() throws Exception {\n    String collectionName = \"solrj_test\";\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setNumShards(2)\n            .setReplicationFactor(2)\n            .setConfigName(\"conf1\")\n            .setRouterField(\"myOwnField\")\n            .setStateFormat(1);\n    CollectionAdminResponse response = createCollectionRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(collectionName + \"_shard\" + (i/2+1) + \"_replica\" + (i%2+1));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    cloudClient.setDefaultCollection(collectionName);\n    CollectionAdminRequest.Delete deleteCollectionRequest = new CollectionAdminRequest.Delete()\n            .setCollectionName(collectionName);\n    response = deleteCollectionRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String,NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertNull(\"Deleted collection \" + collectionName + \"still exists\",\n        cloudClient.getZkStateReader().getClusterState().getCollectionOrNull(collectionName));\n    assertEquals(4, nodesStatus.size());\n    \n    // Test Creating a collection with new stateformat.\n    collectionName = \"solrj_newstateformat\";\n    createCollectionRequest = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setNumShards(2)\n            .setConfigName(\"conf1\")\n            .setStateFormat(2);\n\n    response = createCollectionRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForRecoveriesToFinish(collectionName, false);\n    assertTrue(\"Collection state does not exist\",\n        cloudClient.getZkStateReader().getZkClient()\n            .exists(ZkStateReader.getCollectionPath(collectionName), true));\n\n  }\n\n","sourceOld":"  protected void testCreateAndDeleteCollection() throws Exception {\n    String collectionName = \"solrj_test\";\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(collectionName);\n    createCollectionRequest.setNumShards(2);\n    createCollectionRequest.setReplicationFactor(2);\n    createCollectionRequest.setConfigName(\"conf1\");\n    createCollectionRequest.setRouterField(\"myOwnField\");\n    CollectionAdminResponse response = createCollectionRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(collectionName + \"_shard\" + (i/2+1) + \"_replica\" + (i%2+1));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    cloudClient.setDefaultCollection(collectionName);\n    CollectionAdminRequest.Delete deleteCollectionRequest = new CollectionAdminRequest.Delete();\n    deleteCollectionRequest.setCollectionName(collectionName);\n    response = deleteCollectionRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String,NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertNull(\"Deleted collection \" + collectionName + \"still exists\",\n        cloudClient.getZkStateReader().getClusterState().getCollectionOrNull(collectionName));\n    assertEquals(4, nodesStatus.size());\n    \n    // Test Creating a collection with new stateformat.\n    collectionName = \"solrj_newstateformat\";\n    createCollectionRequest = new CollectionAdminRequest.Create();\n    createCollectionRequest.setCollectionName(collectionName);\n    createCollectionRequest.setNumShards(2);\n    createCollectionRequest.setConfigName(\"conf1\");\n    createCollectionRequest.setStateFormat(2);\n\n    response = createCollectionRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForRecoveriesToFinish(collectionName, false);\n    assertTrue(\"Collection state does not exist\",\n        cloudClient.getZkStateReader().getZkClient()\n            .exists(ZkStateReader.getCollectionPath(collectionName), true));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"30f9ea0e61a3df8b29a67bce1ea06c83201ad871","date":1457138084,"type":5,"author":"anshum","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateAndDeleteCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testCreateAndDeleteCollection().mjava","sourceNew":"  protected void testCreateAndDeleteCollection() throws Exception {\n    String collectionName = \"solrj_test\";\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setNumShards(2)\n            .setReplicationFactor(2)\n            .setConfigName(\"conf1\")\n            .setRouterField(\"myOwnField\")\n            .setStateFormat(1);\n    CollectionAdminResponse response = createCollectionRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(collectionName + \"_shard\" + (i/2+1) + \"_replica\" + (i%2+1));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    cloudClient.setDefaultCollection(collectionName);\n    CollectionAdminRequest.Delete deleteCollectionRequest = new CollectionAdminRequest.Delete()\n            .setCollectionName(collectionName);\n    response = deleteCollectionRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String,NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertNull(\"Deleted collection \" + collectionName + \"still exists\",\n        cloudClient.getZkStateReader().getClusterState().getCollectionOrNull(collectionName));\n    assertEquals(4, nodesStatus.size());\n    \n    // Test Creating a collection with new stateformat.\n    collectionName = \"solrj_newstateformat\";\n    createCollectionRequest = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setNumShards(2)\n            .setConfigName(\"conf1\")\n            .setStateFormat(2);\n\n    response = createCollectionRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForRecoveriesToFinish(collectionName, false);\n    assertTrue(\"Collection state does not exist\",\n        cloudClient.getZkStateReader().getZkClient()\n            .exists(ZkStateReader.getCollectionPath(collectionName), true));\n\n  }\n\n","sourceOld":"  protected void testCreateAndDeleteCollection() throws Exception {\n    String collectionName = \"solrj_test\";\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setNumShards(2)\n            .setReplicationFactor(2)\n            .setConfigName(\"conf1\")\n            .setRouterField(\"myOwnField\")\n            .setStateFormat(1);\n    CollectionAdminResponse response = createCollectionRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(collectionName + \"_shard\" + (i/2+1) + \"_replica\" + (i%2+1));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    cloudClient.setDefaultCollection(collectionName);\n    CollectionAdminRequest.Delete deleteCollectionRequest = new CollectionAdminRequest.Delete()\n            .setCollectionName(collectionName);\n    response = deleteCollectionRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String,NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertNull(\"Deleted collection \" + collectionName + \"still exists\",\n        cloudClient.getZkStateReader().getClusterState().getCollectionOrNull(collectionName));\n    assertEquals(4, nodesStatus.size());\n    \n    // Test Creating a collection with new stateformat.\n    collectionName = \"solrj_newstateformat\";\n    createCollectionRequest = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setNumShards(2)\n            .setConfigName(\"conf1\")\n            .setStateFormat(2);\n\n    response = createCollectionRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForRecoveriesToFinish(collectionName, false);\n    assertTrue(\"Collection state does not exist\",\n        cloudClient.getZkStateReader().getZkClient()\n            .exists(ZkStateReader.getCollectionPath(collectionName), true));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"922ddd897402a6df25c766ea8300443be5e82b3d","date":1457157606,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testCreateAndDeleteCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testCreateAndDeleteCollection().mjava","sourceNew":"  protected void testCreateAndDeleteCollection() throws Exception {\n    String collectionName = \"solrj_test\";\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setNumShards(2)\n            .setReplicationFactor(2)\n            .setConfigName(\"conf1\")\n            .setRouterField(\"myOwnField\")\n            .setStateFormat(1);\n    CollectionAdminResponse response = createCollectionRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(collectionName + \"_shard\" + (i/2+1) + \"_replica\" + (i%2+1));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    cloudClient.setDefaultCollection(collectionName);\n    CollectionAdminRequest.Delete deleteCollectionRequest = new CollectionAdminRequest.Delete()\n            .setCollectionName(collectionName);\n    response = deleteCollectionRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String,NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertNull(\"Deleted collection \" + collectionName + \"still exists\",\n        cloudClient.getZkStateReader().getClusterState().getCollectionOrNull(collectionName));\n    assertEquals(4, nodesStatus.size());\n    \n    // Test Creating a collection with new stateformat.\n    collectionName = \"solrj_newstateformat\";\n    createCollectionRequest = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setNumShards(2)\n            .setConfigName(\"conf1\")\n            .setStateFormat(2);\n\n    response = createCollectionRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForRecoveriesToFinish(collectionName, false);\n    assertTrue(\"Collection state does not exist\",\n        cloudClient.getZkStateReader().getZkClient()\n            .exists(ZkStateReader.getCollectionPath(collectionName), true));\n\n  }\n\n","sourceOld":"  protected void testCreateAndDeleteCollection() throws Exception {\n    String collectionName = \"solrj_test\";\n    CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setNumShards(2)\n            .setReplicationFactor(2)\n            .setConfigName(\"conf1\")\n            .setRouterField(\"myOwnField\")\n            .setStateFormat(1);\n    CollectionAdminResponse response = createCollectionRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String, NamedList<Integer>> coresStatus = response.getCollectionCoresStatus();\n    assertEquals(4, coresStatus.size());\n    for (int i=0; i<4; i++) {\n      NamedList<Integer> status = coresStatus.get(collectionName + \"_shard\" + (i/2+1) + \"_replica\" + (i%2+1));\n      assertEquals(0, (int)status.get(\"status\"));\n      assertTrue(status.get(\"QTime\") > 0);\n    }\n\n    cloudClient.setDefaultCollection(collectionName);\n    CollectionAdminRequest.Delete deleteCollectionRequest = new CollectionAdminRequest.Delete()\n            .setCollectionName(collectionName);\n    response = deleteCollectionRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n    Map<String,NamedList<Integer>> nodesStatus = response.getCollectionNodesStatus();\n    assertNull(\"Deleted collection \" + collectionName + \"still exists\",\n        cloudClient.getZkStateReader().getClusterState().getCollectionOrNull(collectionName));\n    assertEquals(4, nodesStatus.size());\n    \n    // Test Creating a collection with new stateformat.\n    collectionName = \"solrj_newstateformat\";\n    createCollectionRequest = new CollectionAdminRequest.Create()\n            .setCollectionName(collectionName)\n            .setNumShards(2)\n            .setConfigName(\"conf1\")\n            .setStateFormat(2);\n\n    response = createCollectionRequest.process(cloudClient);\n    assertEquals(0, response.getStatus());\n    assertTrue(response.isSuccess());\n\n    waitForRecoveriesToFinish(collectionName, false);\n    assertTrue(\"Collection state does not exist\",\n        cloudClient.getZkStateReader().getZkClient()\n            .exists(ZkStateReader.getCollectionPath(collectionName), true));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"cd01cddc46c498fba02505e77f225300f83242db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"922ddd897402a6df25c766ea8300443be5e82b3d":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce","30f9ea0e61a3df8b29a67bce1ea06c83201ad871"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30f9ea0e61a3df8b29a67bce1ea06c83201ad871":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce"],"182acd29cf4cb1644a02b8517f3a5b867c0d7cce":["cd01cddc46c498fba02505e77f225300f83242db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["922ddd897402a6df25c766ea8300443be5e82b3d"]},"commit2Childs":{"cd01cddc46c498fba02505e77f225300f83242db":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce"],"922ddd897402a6df25c766ea8300443be5e82b3d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd01cddc46c498fba02505e77f225300f83242db"],"30f9ea0e61a3df8b29a67bce1ea06c83201ad871":["922ddd897402a6df25c766ea8300443be5e82b3d"],"182acd29cf4cb1644a02b8517f3a5b867c0d7cce":["922ddd897402a6df25c766ea8300443be5e82b3d","30f9ea0e61a3df8b29a67bce1ea06c83201ad871"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}