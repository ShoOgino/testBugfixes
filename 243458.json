{"path":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testCustomFieldValueSource().mjava","commits":[{"id":"4d8affc7eee92d19bf9869be92b1037e3d86b60f","date":1363641611,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testCustomFieldValueSource().mjava","pathOld":"/dev/null","sourceNew":"  public void testCustomFieldValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    Document doc = new Document();\n\n    FieldType offsetsType = new FieldType(TextField.TYPE_NOT_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    final String text = \"This is a test.  Just highlighting from postings. This is also a much sillier test.  Feel free to test test test test test test test.\";\n    Field body = new Field(\"body\", text, offsetsType);\n    doc.add(body);\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000, null, new PassageScorer(), new PassageFormatter()) {\n        @Override\n        protected String[][] loadFieldValues(IndexSearcher searcher, String[] fields, int[] docids, int maxLength) throws IOException {\n          assert fields.length == 1;\n          assert docids.length == 1;\n          String[][] contents = new String[1][1];\n          contents[0][0] = text;\n          return contents;\n        }\n      };\n\n    Query query = new TermQuery(new Term(\"body\", \"test\"));\n    TopDocs topDocs = searcher.search(query, null, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, topDocs, 2);\n    assertEquals(1, snippets.length);\n    assertEquals(\"This is a <b>test</b>.  Just highlighting from postings. This is also a much sillier <b>test</b>.  Feel free to <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b>.\", snippets[0]);\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4831dd345148fcd7c33877b449ade21fc45459d8","date":1363963811,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testCustomFieldValueSource().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testCustomFieldValueSource().mjava","sourceNew":"  public void testCustomFieldValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    Document doc = new Document();\n\n    FieldType offsetsType = new FieldType(TextField.TYPE_NOT_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    final String text = \"This is a test.  Just highlighting from postings. This is also a much sillier test.  Feel free to test test test test test test test.\";\n    Field body = new Field(\"body\", text, offsetsType);\n    doc.add(body);\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000, null) {\n        @Override\n        protected String[][] loadFieldValues(IndexSearcher searcher, String[] fields, int[] docids, int maxLength) throws IOException {\n          assert fields.length == 1;\n          assert docids.length == 1;\n          String[][] contents = new String[1][1];\n          contents[0][0] = text;\n          return contents;\n        }\n      };\n\n    Query query = new TermQuery(new Term(\"body\", \"test\"));\n    TopDocs topDocs = searcher.search(query, null, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, topDocs, 2);\n    assertEquals(1, snippets.length);\n    assertEquals(\"This is a <b>test</b>.  Just highlighting from postings. This is also a much sillier <b>test</b>.  Feel free to <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b>.\", snippets[0]);\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCustomFieldValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    Document doc = new Document();\n\n    FieldType offsetsType = new FieldType(TextField.TYPE_NOT_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    final String text = \"This is a test.  Just highlighting from postings. This is also a much sillier test.  Feel free to test test test test test test test.\";\n    Field body = new Field(\"body\", text, offsetsType);\n    doc.add(body);\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000, null, new PassageScorer(), new PassageFormatter()) {\n        @Override\n        protected String[][] loadFieldValues(IndexSearcher searcher, String[] fields, int[] docids, int maxLength) throws IOException {\n          assert fields.length == 1;\n          assert docids.length == 1;\n          String[][] contents = new String[1][1];\n          contents[0][0] = text;\n          return contents;\n        }\n      };\n\n    Query query = new TermQuery(new Term(\"body\", \"test\"));\n    TopDocs topDocs = searcher.search(query, null, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, topDocs, 2);\n    assertEquals(1, snippets.length);\n    assertEquals(\"This is a <b>test</b>.  Just highlighting from postings. This is also a much sillier <b>test</b>.  Feel free to <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b>.\", snippets[0]);\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"157d49068cfc35be5fed366f40bc20cbcddea695","date":1364791189,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testCustomFieldValueSource().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testCustomFieldValueSource().mjava","sourceNew":"  public void testCustomFieldValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    Document doc = new Document();\n\n    FieldType offsetsType = new FieldType(TextField.TYPE_NOT_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    final String text = \"This is a test.  Just highlighting from postings. This is also a much sillier test.  Feel free to test test test test test test test.\";\n    Field body = new Field(\"body\", text, offsetsType);\n    doc.add(body);\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000) {\n        @Override\n        protected String[][] loadFieldValues(IndexSearcher searcher, String[] fields, int[] docids, int maxLength) throws IOException {\n          assert fields.length == 1;\n          assert docids.length == 1;\n          String[][] contents = new String[1][1];\n          contents[0][0] = text;\n          return contents;\n        }\n\n        @Override\n        protected BreakIterator getBreakIterator(String field) {\n          return new WholeBreakIterator();\n        }\n      };\n\n    Query query = new TermQuery(new Term(\"body\", \"test\"));\n    TopDocs topDocs = searcher.search(query, null, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, topDocs, 2);\n    assertEquals(1, snippets.length);\n    assertEquals(\"This is a <b>test</b>.  Just highlighting from postings. This is also a much sillier <b>test</b>.  Feel free to <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b>.\", snippets[0]);\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCustomFieldValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    Document doc = new Document();\n\n    FieldType offsetsType = new FieldType(TextField.TYPE_NOT_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    final String text = \"This is a test.  Just highlighting from postings. This is also a much sillier test.  Feel free to test test test test test test test.\";\n    Field body = new Field(\"body\", text, offsetsType);\n    doc.add(body);\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000, null) {\n        @Override\n        protected String[][] loadFieldValues(IndexSearcher searcher, String[] fields, int[] docids, int maxLength) throws IOException {\n          assert fields.length == 1;\n          assert docids.length == 1;\n          String[][] contents = new String[1][1];\n          contents[0][0] = text;\n          return contents;\n        }\n      };\n\n    Query query = new TermQuery(new Term(\"body\", \"test\"));\n    TopDocs topDocs = searcher.search(query, null, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, topDocs, 2);\n    assertEquals(1, snippets.length);\n    assertEquals(\"This is a <b>test</b>.  Just highlighting from postings. This is also a much sillier <b>test</b>.  Feel free to <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b>.\", snippets[0]);\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testCustomFieldValueSource().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testCustomFieldValueSource().mjava","sourceNew":"  public void testCustomFieldValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    Document doc = new Document();\n\n    FieldType offsetsType = new FieldType(TextField.TYPE_NOT_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    final String text = \"This is a test.  Just highlighting from postings. This is also a much sillier test.  Feel free to test test test test test test test.\";\n    Field body = new Field(\"body\", text, offsetsType);\n    doc.add(body);\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000) {\n        @Override\n        protected String[][] loadFieldValues(IndexSearcher searcher, String[] fields, int[] docids, int maxLength) throws IOException {\n          assert fields.length == 1;\n          assert docids.length == 1;\n          String[][] contents = new String[1][1];\n          contents[0][0] = text;\n          return contents;\n        }\n\n        @Override\n        protected BreakIterator getBreakIterator(String field) {\n          return new WholeBreakIterator();\n        }\n      };\n\n    Query query = new TermQuery(new Term(\"body\", \"test\"));\n    TopDocs topDocs = searcher.search(query, null, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, topDocs, 2);\n    assertEquals(1, snippets.length);\n    assertEquals(\"This is a <b>test</b>.  Just highlighting from postings. This is also a much sillier <b>test</b>.  Feel free to <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b>.\", snippets[0]);\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCustomFieldValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    Document doc = new Document();\n\n    FieldType offsetsType = new FieldType(TextField.TYPE_NOT_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    final String text = \"This is a test.  Just highlighting from postings. This is also a much sillier test.  Feel free to test test test test test test test.\";\n    Field body = new Field(\"body\", text, offsetsType);\n    doc.add(body);\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000) {\n        @Override\n        protected String[][] loadFieldValues(IndexSearcher searcher, String[] fields, int[] docids, int maxLength) throws IOException {\n          assert fields.length == 1;\n          assert docids.length == 1;\n          String[][] contents = new String[1][1];\n          contents[0][0] = text;\n          return contents;\n        }\n\n        @Override\n        protected BreakIterator getBreakIterator(String field) {\n          return new WholeBreakIterator();\n        }\n      };\n\n    Query query = new TermQuery(new Term(\"body\", \"test\"));\n    TopDocs topDocs = searcher.search(query, null, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, topDocs, 2);\n    assertEquals(1, snippets.length);\n    assertEquals(\"This is a <b>test</b>.  Just highlighting from postings. This is also a much sillier <b>test</b>.  Feel free to <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b>.\", snippets[0]);\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testCustomFieldValueSource().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testCustomFieldValueSource().mjava","sourceNew":"  public void testCustomFieldValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    Document doc = new Document();\n\n    FieldType offsetsType = new FieldType(TextField.TYPE_NOT_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    final String text = \"This is a test.  Just highlighting from postings. This is also a much sillier test.  Feel free to test test test test test test test.\";\n    Field body = new Field(\"body\", text, offsetsType);\n    doc.add(body);\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000) {\n        @Override\n        protected String[][] loadFieldValues(IndexSearcher searcher, String[] fields, int[] docids, int maxLength) throws IOException {\n          assert fields.length == 1;\n          assert docids.length == 1;\n          String[][] contents = new String[1][1];\n          contents[0][0] = text;\n          return contents;\n        }\n\n        @Override\n        protected BreakIterator getBreakIterator(String field) {\n          return new WholeBreakIterator();\n        }\n      };\n\n    Query query = new TermQuery(new Term(\"body\", \"test\"));\n    TopDocs topDocs = searcher.search(query, null, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, topDocs, 2);\n    assertEquals(1, snippets.length);\n    assertEquals(\"This is a <b>test</b>.  Just highlighting from postings. This is also a much sillier <b>test</b>.  Feel free to <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b>.\", snippets[0]);\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCustomFieldValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    Document doc = new Document();\n\n    FieldType offsetsType = new FieldType(TextField.TYPE_NOT_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    final String text = \"This is a test.  Just highlighting from postings. This is also a much sillier test.  Feel free to test test test test test test test.\";\n    Field body = new Field(\"body\", text, offsetsType);\n    doc.add(body);\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000) {\n        @Override\n        protected String[][] loadFieldValues(IndexSearcher searcher, String[] fields, int[] docids, int maxLength) throws IOException {\n          assert fields.length == 1;\n          assert docids.length == 1;\n          String[][] contents = new String[1][1];\n          contents[0][0] = text;\n          return contents;\n        }\n\n        @Override\n        protected BreakIterator getBreakIterator(String field) {\n          return new WholeBreakIterator();\n        }\n      };\n\n    Query query = new TermQuery(new Term(\"body\", \"test\"));\n    TopDocs topDocs = searcher.search(query, null, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, topDocs, 2);\n    assertEquals(1, snippets.length);\n    assertEquals(\"This is a <b>test</b>.  Just highlighting from postings. This is also a much sillier <b>test</b>.  Feel free to <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b>.\", snippets[0]);\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testCustomFieldValueSource().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testCustomFieldValueSource().mjava","sourceNew":"  public void testCustomFieldValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    Document doc = new Document();\n\n    FieldType offsetsType = new FieldType(TextField.TYPE_NOT_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    final String text = \"This is a test.  Just highlighting from postings. This is also a much sillier test.  Feel free to test test test test test test test.\";\n    Field body = new Field(\"body\", text, offsetsType);\n    doc.add(body);\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000) {\n        @Override\n        protected String[][] loadFieldValues(IndexSearcher searcher, String[] fields, int[] docids, int maxLength) throws IOException {\n          assert fields.length == 1;\n          assert docids.length == 1;\n          String[][] contents = new String[1][1];\n          contents[0][0] = text;\n          return contents;\n        }\n\n        @Override\n        protected BreakIterator getBreakIterator(String field) {\n          return new WholeBreakIterator();\n        }\n      };\n\n    Query query = new TermQuery(new Term(\"body\", \"test\"));\n    TopDocs topDocs = searcher.search(query, null, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, topDocs, 2);\n    assertEquals(1, snippets.length);\n    assertEquals(\"This is a <b>test</b>.  Just highlighting from postings. This is also a much sillier <b>test</b>.  Feel free to <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b>.\", snippets[0]);\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCustomFieldValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    Document doc = new Document();\n\n    FieldType offsetsType = new FieldType(TextField.TYPE_NOT_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    final String text = \"This is a test.  Just highlighting from postings. This is also a much sillier test.  Feel free to test test test test test test test.\";\n    Field body = new Field(\"body\", text, offsetsType);\n    doc.add(body);\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000) {\n        @Override\n        protected String[][] loadFieldValues(IndexSearcher searcher, String[] fields, int[] docids, int maxLength) throws IOException {\n          assert fields.length == 1;\n          assert docids.length == 1;\n          String[][] contents = new String[1][1];\n          contents[0][0] = text;\n          return contents;\n        }\n\n        @Override\n        protected BreakIterator getBreakIterator(String field) {\n          return new WholeBreakIterator();\n        }\n      };\n\n    Query query = new TermQuery(new Term(\"body\", \"test\"));\n    TopDocs topDocs = searcher.search(query, null, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, topDocs, 2);\n    assertEquals(1, snippets.length);\n    assertEquals(\"This is a <b>test</b>.  Just highlighting from postings. This is also a much sillier <b>test</b>.  Feel free to <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b>.\", snippets[0]);\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testCustomFieldValueSource().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testCustomFieldValueSource().mjava","sourceNew":"  public void testCustomFieldValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    Document doc = new Document();\n\n    FieldType offsetsType = new FieldType(TextField.TYPE_NOT_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    final String text = \"This is a test.  Just highlighting from postings. This is also a much sillier test.  Feel free to test test test test test test test.\";\n    Field body = new Field(\"body\", text, offsetsType);\n    doc.add(body);\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000) {\n        @Override\n        protected String[][] loadFieldValues(IndexSearcher searcher, String[] fields, int[] docids, int maxLength) throws IOException {\n          assert fields.length == 1;\n          assert docids.length == 1;\n          String[][] contents = new String[1][1];\n          contents[0][0] = text;\n          return contents;\n        }\n\n        @Override\n        protected BreakIterator getBreakIterator(String field) {\n          return new WholeBreakIterator();\n        }\n      };\n\n    Query query = new TermQuery(new Term(\"body\", \"test\"));\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, topDocs, 2);\n    assertEquals(1, snippets.length);\n    assertEquals(\"This is a <b>test</b>.  Just highlighting from postings. This is also a much sillier <b>test</b>.  Feel free to <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b>.\", snippets[0]);\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCustomFieldValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    Document doc = new Document();\n\n    FieldType offsetsType = new FieldType(TextField.TYPE_NOT_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    final String text = \"This is a test.  Just highlighting from postings. This is also a much sillier test.  Feel free to test test test test test test test.\";\n    Field body = new Field(\"body\", text, offsetsType);\n    doc.add(body);\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000) {\n        @Override\n        protected String[][] loadFieldValues(IndexSearcher searcher, String[] fields, int[] docids, int maxLength) throws IOException {\n          assert fields.length == 1;\n          assert docids.length == 1;\n          String[][] contents = new String[1][1];\n          contents[0][0] = text;\n          return contents;\n        }\n\n        @Override\n        protected BreakIterator getBreakIterator(String field) {\n          return new WholeBreakIterator();\n        }\n      };\n\n    Query query = new TermQuery(new Term(\"body\", \"test\"));\n    TopDocs topDocs = searcher.search(query, null, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, topDocs, 2);\n    assertEquals(1, snippets.length);\n    assertEquals(\"This is a <b>test</b>.  Just highlighting from postings. This is also a much sillier <b>test</b>.  Feel free to <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b>.\", snippets[0]);\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"381618eac2691bb34ab9a3fca76ad55c6274517e","date":1495564791,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testCustomFieldValueSource().mjava","sourceNew":null,"sourceOld":"  public void testCustomFieldValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    Document doc = new Document();\n\n    FieldType offsetsType = new FieldType(TextField.TYPE_NOT_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    final String text = \"This is a test.  Just highlighting from postings. This is also a much sillier test.  Feel free to test test test test test test test.\";\n    Field body = new Field(\"body\", text, offsetsType);\n    doc.add(body);\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000) {\n        @Override\n        protected String[][] loadFieldValues(IndexSearcher searcher, String[] fields, int[] docids, int maxLength) throws IOException {\n          assert fields.length == 1;\n          assert docids.length == 1;\n          String[][] contents = new String[1][1];\n          contents[0][0] = text;\n          return contents;\n        }\n\n        @Override\n        protected BreakIterator getBreakIterator(String field) {\n          return new WholeBreakIterator();\n        }\n      };\n\n    Query query = new TermQuery(new Term(\"body\", \"test\"));\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, topDocs, 2);\n    assertEquals(1, snippets.length);\n    assertEquals(\"This is a <b>test</b>.  Just highlighting from postings. This is also a much sillier <b>test</b>.  Feel free to <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b>.\", snippets[0]);\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testCustomFieldValueSource().mjava","sourceNew":null,"sourceOld":"  public void testCustomFieldValueSource() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    Document doc = new Document();\n\n    FieldType offsetsType = new FieldType(TextField.TYPE_NOT_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    final String text = \"This is a test.  Just highlighting from postings. This is also a much sillier test.  Feel free to test test test test test test test.\";\n    Field body = new Field(\"body\", text, offsetsType);\n    doc.add(body);\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000) {\n        @Override\n        protected String[][] loadFieldValues(IndexSearcher searcher, String[] fields, int[] docids, int maxLength) throws IOException {\n          assert fields.length == 1;\n          assert docids.length == 1;\n          String[][] contents = new String[1][1];\n          contents[0][0] = text;\n          return contents;\n        }\n\n        @Override\n        protected BreakIterator getBreakIterator(String field) {\n          return new WholeBreakIterator();\n        }\n      };\n\n    Query query = new TermQuery(new Term(\"body\", \"test\"));\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    assertEquals(1, topDocs.totalHits);\n    String snippets[] = highlighter.highlight(\"body\", query, searcher, topDocs, 2);\n    assertEquals(1, snippets.length);\n    assertEquals(\"This is a <b>test</b>.  Just highlighting from postings. This is also a much sillier <b>test</b>.  Feel free to <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b> <b>test</b>.\", snippets[0]);\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"381618eac2691bb34ab9a3fca76ad55c6274517e":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","381618eac2691bb34ab9a3fca76ad55c6274517e"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"4831dd345148fcd7c33877b449ade21fc45459d8":["4d8affc7eee92d19bf9869be92b1037e3d86b60f"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"4d8affc7eee92d19bf9869be92b1037e3d86b60f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["157d49068cfc35be5fed366f40bc20cbcddea695"],"157d49068cfc35be5fed366f40bc20cbcddea695":["4831dd345148fcd7c33877b449ade21fc45459d8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["381618eac2691bb34ab9a3fca76ad55c6274517e"]},"commit2Childs":{"381618eac2691bb34ab9a3fca76ad55c6274517e":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"4831dd345148fcd7c33877b449ade21fc45459d8":["157d49068cfc35be5fed366f40bc20cbcddea695"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["381618eac2691bb34ab9a3fca76ad55c6274517e","e9017cf144952056066919f1ebc7897ff9bd71b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d8affc7eee92d19bf9869be92b1037e3d86b60f"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"4d8affc7eee92d19bf9869be92b1037e3d86b60f":["4831dd345148fcd7c33877b449ade21fc45459d8"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"157d49068cfc35be5fed366f40bc20cbcddea695":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}