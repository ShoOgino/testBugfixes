{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dRptTest#randomQueryShape().mjava","commits":[{"id":"851e4197476b684154a7b65f996f535522e67400","date":1428926498,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dRptTest#randomQueryShape().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected Shape randomQueryShape() {\n    //random triangle\n    final List<GeoPoint> geoPoints = new ArrayList<>();\n    while (geoPoints.size() < 3) {\n      final Point point = randomPoint();\n      final GeoPoint gPt = new GeoPoint(point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n      if (geoPoints.contains(gPt) == false) {\n        geoPoints.add(gPt);\n      }\n    }\n    final int convexPointIndex = random().nextInt(3);\n    final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(geoPoints, convexPointIndex);\n    return new Geo3dShape(shape, ctx);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab7d51740456adc459ec788c8fe27746bdc60a55","date":1429185101,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dRptTest#randomQueryShape().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dRptTest#randomQueryShape().mjava","sourceNew":"  @Override\n  protected Shape randomQueryShape() {\n    final int shapeType = random().nextInt(4);\n    switch (shapeType) {\n    case 0: {\n        // Polygons\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPoint();\n            final GeoPoint gPt = new GeoPoint(point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount);       //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(geoPoints, convexPointIndex);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 1: {\n        // Circles\n        while (true) {\n          final int circleRadius = random().nextInt(180);\n          final Point point = randomPoint();\n          try {\n            final GeoShape shape = new GeoCircle(point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS,\n              circleRadius * DEGREES_TO_RADIANS);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 2: {\n        // Rectangles\n        while (true) {\n          final Point ulhcPoint = randomPoint();\n          final Point lrhcPoint = randomPoint();\n          try {\n            final GeoShape shape = GeoBBoxFactory.makeGeoBBox(ulhcPoint.getY() * DEGREES_TO_RADIANS,\n              lrhcPoint.getY() * DEGREES_TO_RADIANS,\n              ulhcPoint.getX() * DEGREES_TO_RADIANS,\n              lrhcPoint.getX() * DEGREES_TO_RADIANS);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 3: {\n        // Paths\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = random().nextInt(90) * DEGREES_TO_RADIANS;\n        while (true) {\n          try {\n            final GeoPath path = new GeoPath(width);\n            for (int i = 0; i < pointCount; i++) {\n              final Point nextPoint = randomPoint();\n              path.addPoint(nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n            }\n            path.done();\n            return new Geo3dShape(path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    default:\n      throw new IllegalStateException(\"Unexpected shape type\");\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Shape randomQueryShape() {\n    //random triangle\n    final List<GeoPoint> geoPoints = new ArrayList<>();\n    while (geoPoints.size() < 3) {\n      final Point point = randomPoint();\n      final GeoPoint gPt = new GeoPoint(point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n      if (geoPoints.contains(gPt) == false) {\n        geoPoints.add(gPt);\n      }\n    }\n    final int convexPointIndex = random().nextInt(3);\n    final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(geoPoints, convexPointIndex);\n    return new Geo3dShape(shape, ctx);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0fb9dbed1415914caa27460f8abb7afadaa61451","date":1429504289,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dRptTest#randomQueryShape().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dRptTest#randomQueryShape().mjava","sourceNew":"  @Override\n  protected Shape randomQueryShape() {\n    final int shapeType = random().nextInt(4);\n    switch (shapeType) {\n    case 0: {\n        // Polygons\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPoint();\n            final GeoPoint gPt = new GeoPoint(point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount);       //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(geoPoints, convexPointIndex);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 1: {\n        // Circles\n        while (true) {\n          final int circleRadius = random().nextInt(180);\n          final Point point = randomPoint();\n          try {\n            final GeoShape shape = new GeoCircle(point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS,\n              circleRadius * DEGREES_TO_RADIANS);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 2: {\n        // Rectangles\n        while (true) {\n          Point ulhcPoint = randomPoint();\n          Point lrhcPoint = randomPoint();\n          if (ulhcPoint.getY() < lrhcPoint.getY()) {\n            //swap\n            Point temp = ulhcPoint;\n            ulhcPoint = lrhcPoint;\n            lrhcPoint = temp;\n          }\n          try {\n            final GeoShape shape = GeoBBoxFactory.makeGeoBBox(ulhcPoint.getY() * DEGREES_TO_RADIANS,\n              lrhcPoint.getY() * DEGREES_TO_RADIANS,\n              ulhcPoint.getX() * DEGREES_TO_RADIANS,\n              lrhcPoint.getX() * DEGREES_TO_RADIANS);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 3: {\n        // Paths\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        while (true) {\n          try {\n            final GeoPath path = new GeoPath(width);\n            for (int i = 0; i < pointCount; i++) {\n              final Point nextPoint = randomPoint();\n              path.addPoint(nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n            }\n            path.done();\n            return new Geo3dShape(path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    default:\n      throw new IllegalStateException(\"Unexpected shape type\");\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Shape randomQueryShape() {\n    final int shapeType = random().nextInt(4);\n    switch (shapeType) {\n    case 0: {\n        // Polygons\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPoint();\n            final GeoPoint gPt = new GeoPoint(point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount);       //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(geoPoints, convexPointIndex);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 1: {\n        // Circles\n        while (true) {\n          final int circleRadius = random().nextInt(180);\n          final Point point = randomPoint();\n          try {\n            final GeoShape shape = new GeoCircle(point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS,\n              circleRadius * DEGREES_TO_RADIANS);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 2: {\n        // Rectangles\n        while (true) {\n          final Point ulhcPoint = randomPoint();\n          final Point lrhcPoint = randomPoint();\n          try {\n            final GeoShape shape = GeoBBoxFactory.makeGeoBBox(ulhcPoint.getY() * DEGREES_TO_RADIANS,\n              lrhcPoint.getY() * DEGREES_TO_RADIANS,\n              ulhcPoint.getX() * DEGREES_TO_RADIANS,\n              lrhcPoint.getX() * DEGREES_TO_RADIANS);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 3: {\n        // Paths\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = random().nextInt(90) * DEGREES_TO_RADIANS;\n        while (true) {\n          try {\n            final GeoPath path = new GeoPath(width);\n            for (int i = 0; i < pointCount; i++) {\n              final Point nextPoint = randomPoint();\n              path.addPoint(nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n            }\n            path.done();\n            return new Geo3dShape(path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    default:\n      throw new IllegalStateException(\"Unexpected shape type\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7aca5c321bc9760dbfc9cefcc9d648e946b4615e","date":1429714020,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dRptTest#randomQueryShape().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dRptTest#randomQueryShape().mjava","sourceNew":"  @Override\n  protected Shape randomQueryShape() {\n    final int shapeType = random().nextInt(4);\n    switch (shapeType) {\n    case 0: {\n        // Polygons\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPoint();\n            final GeoPoint gPt = new GeoPoint(point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount);       //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(geoPoints, convexPointIndex);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 1: {\n        // Circles\n        while (true) {\n          final int circleRadius = random().nextInt(179) + 1;\n          final Point point = randomPoint();\n          try {\n            final GeoShape shape = new GeoCircle(point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS,\n              circleRadius * DEGREES_TO_RADIANS);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 2: {\n        // Rectangles\n        while (true) {\n          Point ulhcPoint = randomPoint();\n          Point lrhcPoint = randomPoint();\n          if (ulhcPoint.getY() < lrhcPoint.getY()) {\n            //swap\n            Point temp = ulhcPoint;\n            ulhcPoint = lrhcPoint;\n            lrhcPoint = temp;\n          }\n          try {\n            final GeoShape shape = GeoBBoxFactory.makeGeoBBox(ulhcPoint.getY() * DEGREES_TO_RADIANS,\n              lrhcPoint.getY() * DEGREES_TO_RADIANS,\n              ulhcPoint.getX() * DEGREES_TO_RADIANS,\n              lrhcPoint.getX() * DEGREES_TO_RADIANS);\n            //System.err.println(\"Trial rectangle shape: \"+shape);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 3: {\n        // Paths\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        while (true) {\n          try {\n            final GeoPath path = new GeoPath(width);\n            for (int i = 0; i < pointCount; i++) {\n              final Point nextPoint = randomPoint();\n              path.addPoint(nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n            }\n            path.done();\n            return new Geo3dShape(path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    default:\n      throw new IllegalStateException(\"Unexpected shape type\");\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Shape randomQueryShape() {\n    final int shapeType = random().nextInt(4);\n    switch (shapeType) {\n    case 0: {\n        // Polygons\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPoint();\n            final GeoPoint gPt = new GeoPoint(point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount);       //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(geoPoints, convexPointIndex);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 1: {\n        // Circles\n        while (true) {\n          final int circleRadius = random().nextInt(180);\n          final Point point = randomPoint();\n          try {\n            final GeoShape shape = new GeoCircle(point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS,\n              circleRadius * DEGREES_TO_RADIANS);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 2: {\n        // Rectangles\n        while (true) {\n          Point ulhcPoint = randomPoint();\n          Point lrhcPoint = randomPoint();\n          if (ulhcPoint.getY() < lrhcPoint.getY()) {\n            //swap\n            Point temp = ulhcPoint;\n            ulhcPoint = lrhcPoint;\n            lrhcPoint = temp;\n          }\n          try {\n            final GeoShape shape = GeoBBoxFactory.makeGeoBBox(ulhcPoint.getY() * DEGREES_TO_RADIANS,\n              lrhcPoint.getY() * DEGREES_TO_RADIANS,\n              ulhcPoint.getX() * DEGREES_TO_RADIANS,\n              lrhcPoint.getX() * DEGREES_TO_RADIANS);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 3: {\n        // Paths\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        while (true) {\n          try {\n            final GeoPath path = new GeoPath(width);\n            for (int i = 0; i < pointCount; i++) {\n              final Point nextPoint = randomPoint();\n              path.addPoint(nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n            }\n            path.done();\n            return new Geo3dShape(path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    default:\n      throw new IllegalStateException(\"Unexpected shape type\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c921d81476f94b6686d3f216daa1f6b076b4a6c0","date":1430922284,"type":0,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dRptTest#randomQueryShape().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected Shape randomQueryShape() {\n    final int shapeType = random().nextInt(4);\n    switch (shapeType) {\n    case 0: {\n        // Polygons\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPoint();\n            final GeoPoint gPt = new GeoPoint(point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount);       //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(geoPoints, convexPointIndex);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 1: {\n        // Circles\n        while (true) {\n          final int circleRadius = random().nextInt(179) + 1;\n          final Point point = randomPoint();\n          try {\n            final GeoShape shape = new GeoCircle(point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS,\n              circleRadius * DEGREES_TO_RADIANS);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 2: {\n        // Rectangles\n        while (true) {\n          Point ulhcPoint = randomPoint();\n          Point lrhcPoint = randomPoint();\n          if (ulhcPoint.getY() < lrhcPoint.getY()) {\n            //swap\n            Point temp = ulhcPoint;\n            ulhcPoint = lrhcPoint;\n            lrhcPoint = temp;\n          }\n          try {\n            final GeoShape shape = GeoBBoxFactory.makeGeoBBox(ulhcPoint.getY() * DEGREES_TO_RADIANS,\n              lrhcPoint.getY() * DEGREES_TO_RADIANS,\n              ulhcPoint.getX() * DEGREES_TO_RADIANS,\n              lrhcPoint.getX() * DEGREES_TO_RADIANS);\n            //System.err.println(\"Trial rectangle shape: \"+shape);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 3: {\n        // Paths\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        while (true) {\n          try {\n            final GeoPath path = new GeoPath(width);\n            for (int i = 0; i < pointCount; i++) {\n              final Point nextPoint = randomPoint();\n              path.addPoint(nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n            }\n            path.done();\n            return new Geo3dShape(path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    default:\n      throw new IllegalStateException(\"Unexpected shape type\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9f97ca977ad649f14b4f60a888adef2edd7a64e","date":1432702490,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dRptTest#randomQueryShape().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dRptTest#randomQueryShape().mjava","sourceNew":"  @Override\n  protected Shape randomQueryShape() {\n    final int shapeType = random().nextInt(4);\n    switch (shapeType) {\n    case 0: {\n        // Polygons\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPoint();\n            final GeoPoint gPt = new GeoPoint(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount);       //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, geoPoints, convexPointIndex);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 1: {\n        // Circles\n        while (true) {\n          final int circleRadius = random().nextInt(179) + 1;\n          final Point point = randomPoint();\n          try {\n            final GeoShape shape = new GeoCircle(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS,\n              circleRadius * DEGREES_TO_RADIANS);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 2: {\n        // Rectangles\n        while (true) {\n          Point ulhcPoint = randomPoint();\n          Point lrhcPoint = randomPoint();\n          if (ulhcPoint.getY() < lrhcPoint.getY()) {\n            //swap\n            Point temp = ulhcPoint;\n            ulhcPoint = lrhcPoint;\n            lrhcPoint = temp;\n          }\n          try {\n            final GeoShape shape = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, ulhcPoint.getY() * DEGREES_TO_RADIANS,\n              lrhcPoint.getY() * DEGREES_TO_RADIANS,\n              ulhcPoint.getX() * DEGREES_TO_RADIANS,\n              lrhcPoint.getX() * DEGREES_TO_RADIANS);\n            //System.err.println(\"Trial rectangle shape: \"+shape);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 3: {\n        // Paths\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        while (true) {\n          try {\n            final GeoPath path = new GeoPath(PlanetModel.SPHERE, width);\n            for (int i = 0; i < pointCount; i++) {\n              final Point nextPoint = randomPoint();\n              path.addPoint(nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n            }\n            path.done();\n            return new Geo3dShape(path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    default:\n      throw new IllegalStateException(\"Unexpected shape type\");\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Shape randomQueryShape() {\n    final int shapeType = random().nextInt(4);\n    switch (shapeType) {\n    case 0: {\n        // Polygons\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPoint();\n            final GeoPoint gPt = new GeoPoint(point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount);       //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(geoPoints, convexPointIndex);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 1: {\n        // Circles\n        while (true) {\n          final int circleRadius = random().nextInt(179) + 1;\n          final Point point = randomPoint();\n          try {\n            final GeoShape shape = new GeoCircle(point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS,\n              circleRadius * DEGREES_TO_RADIANS);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 2: {\n        // Rectangles\n        while (true) {\n          Point ulhcPoint = randomPoint();\n          Point lrhcPoint = randomPoint();\n          if (ulhcPoint.getY() < lrhcPoint.getY()) {\n            //swap\n            Point temp = ulhcPoint;\n            ulhcPoint = lrhcPoint;\n            lrhcPoint = temp;\n          }\n          try {\n            final GeoShape shape = GeoBBoxFactory.makeGeoBBox(ulhcPoint.getY() * DEGREES_TO_RADIANS,\n              lrhcPoint.getY() * DEGREES_TO_RADIANS,\n              ulhcPoint.getX() * DEGREES_TO_RADIANS,\n              lrhcPoint.getX() * DEGREES_TO_RADIANS);\n            //System.err.println(\"Trial rectangle shape: \"+shape);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 3: {\n        // Paths\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        while (true) {\n          try {\n            final GeoPath path = new GeoPath(width);\n            for (int i = 0; i < pointCount; i++) {\n              final Point nextPoint = randomPoint();\n              path.addPoint(nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n            }\n            path.done();\n            return new Geo3dShape(path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    default:\n      throw new IllegalStateException(\"Unexpected shape type\");\n    }\n  }\n\n","bugFix":null,"bugIntro":["9891fa1f5a5571b36fbd8a69ccc12f24f5201e48"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fec06d6753751ae302c7d35866763e6cb414112d","date":1433250698,"type":3,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dRptTest#randomQueryShape().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dRptTest#randomQueryShape().mjava","sourceNew":"  @Override\n  protected Shape randomQueryShape() {\n    final int shapeType = random().nextInt(4);\n    switch (shapeType) {\n    case 0: {\n        // Polygons\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPoint();\n            final GeoPoint gPt = new GeoPoint(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount);       //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, geoPoints, convexPointIndex);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 1: {\n        // Circles\n        while (true) {\n          final int circleRadius = random().nextInt(179) + 1;\n          final Point point = randomPoint();\n          try {\n            final GeoShape shape = new GeoCircle(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS,\n              circleRadius * DEGREES_TO_RADIANS);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 2: {\n        // Rectangles\n        while (true) {\n          Point ulhcPoint = randomPoint();\n          Point lrhcPoint = randomPoint();\n          if (ulhcPoint.getY() < lrhcPoint.getY()) {\n            //swap\n            Point temp = ulhcPoint;\n            ulhcPoint = lrhcPoint;\n            lrhcPoint = temp;\n          }\n          try {\n            final GeoShape shape = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, ulhcPoint.getY() * DEGREES_TO_RADIANS,\n              lrhcPoint.getY() * DEGREES_TO_RADIANS,\n              ulhcPoint.getX() * DEGREES_TO_RADIANS,\n              lrhcPoint.getX() * DEGREES_TO_RADIANS);\n            //System.err.println(\"Trial rectangle shape: \"+shape);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 3: {\n        // Paths\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        while (true) {\n          try {\n            final GeoPath path = new GeoPath(PlanetModel.SPHERE, width);\n            for (int i = 0; i < pointCount; i++) {\n              final Point nextPoint = randomPoint();\n              path.addPoint(nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n            }\n            path.done();\n            return new Geo3dShape(path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    default:\n      throw new IllegalStateException(\"Unexpected shape type\");\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Shape randomQueryShape() {\n    final int shapeType = random().nextInt(4);\n    switch (shapeType) {\n    case 0: {\n        // Polygons\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPoint();\n            final GeoPoint gPt = new GeoPoint(point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount);       //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(geoPoints, convexPointIndex);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 1: {\n        // Circles\n        while (true) {\n          final int circleRadius = random().nextInt(179) + 1;\n          final Point point = randomPoint();\n          try {\n            final GeoShape shape = new GeoCircle(point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS,\n              circleRadius * DEGREES_TO_RADIANS);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 2: {\n        // Rectangles\n        while (true) {\n          Point ulhcPoint = randomPoint();\n          Point lrhcPoint = randomPoint();\n          if (ulhcPoint.getY() < lrhcPoint.getY()) {\n            //swap\n            Point temp = ulhcPoint;\n            ulhcPoint = lrhcPoint;\n            lrhcPoint = temp;\n          }\n          try {\n            final GeoShape shape = GeoBBoxFactory.makeGeoBBox(ulhcPoint.getY() * DEGREES_TO_RADIANS,\n              lrhcPoint.getY() * DEGREES_TO_RADIANS,\n              ulhcPoint.getX() * DEGREES_TO_RADIANS,\n              lrhcPoint.getX() * DEGREES_TO_RADIANS);\n            //System.err.println(\"Trial rectangle shape: \"+shape);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 3: {\n        // Paths\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        while (true) {\n          try {\n            final GeoPath path = new GeoPath(width);\n            for (int i = 0; i < pointCount; i++) {\n              final Point nextPoint = randomPoint();\n              path.addPoint(nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n            }\n            path.done();\n            return new Geo3dShape(path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    default:\n      throw new IllegalStateException(\"Unexpected shape type\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9891fa1f5a5571b36fbd8a69ccc12f24f5201e48","date":1441921550,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dRptTest#randomQueryShape().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dRptTest#randomQueryShape().mjava","sourceNew":"  @Override\n  protected Shape randomQueryShape() {\n    final int shapeType = random().nextInt(4);\n    switch (shapeType) {\n    case 0: {\n        // Polygons\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPoint();\n            final GeoPoint gPt = new GeoPoint(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount);       //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, geoPoints, convexPointIndex);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 1: {\n        // Circles\n        while (true) {\n          final int circleRadius = random().nextInt(179) + 1;\n          final Point point = randomPoint();\n          try {\n            final GeoShape shape = new GeoStandardCircle(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS,\n              circleRadius * DEGREES_TO_RADIANS);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 2: {\n        // Rectangles\n        while (true) {\n          Point ulhcPoint = randomPoint();\n          Point lrhcPoint = randomPoint();\n          if (ulhcPoint.getY() < lrhcPoint.getY()) {\n            //swap\n            Point temp = ulhcPoint;\n            ulhcPoint = lrhcPoint;\n            lrhcPoint = temp;\n          }\n          try {\n            final GeoShape shape = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, ulhcPoint.getY() * DEGREES_TO_RADIANS,\n              lrhcPoint.getY() * DEGREES_TO_RADIANS,\n              ulhcPoint.getX() * DEGREES_TO_RADIANS,\n              lrhcPoint.getX() * DEGREES_TO_RADIANS);\n            //System.err.println(\"Trial rectangle shape: \"+shape);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 3: {\n        // Paths\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        while (true) {\n          try {\n            final GeoPath path = new GeoPath(PlanetModel.SPHERE, width);\n            for (int i = 0; i < pointCount; i++) {\n              final Point nextPoint = randomPoint();\n              path.addPoint(nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n            }\n            path.done();\n            return new Geo3dShape(path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    default:\n      throw new IllegalStateException(\"Unexpected shape type\");\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Shape randomQueryShape() {\n    final int shapeType = random().nextInt(4);\n    switch (shapeType) {\n    case 0: {\n        // Polygons\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPoint();\n            final GeoPoint gPt = new GeoPoint(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount);       //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, geoPoints, convexPointIndex);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 1: {\n        // Circles\n        while (true) {\n          final int circleRadius = random().nextInt(179) + 1;\n          final Point point = randomPoint();\n          try {\n            final GeoShape shape = new GeoCircle(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS,\n              circleRadius * DEGREES_TO_RADIANS);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 2: {\n        // Rectangles\n        while (true) {\n          Point ulhcPoint = randomPoint();\n          Point lrhcPoint = randomPoint();\n          if (ulhcPoint.getY() < lrhcPoint.getY()) {\n            //swap\n            Point temp = ulhcPoint;\n            ulhcPoint = lrhcPoint;\n            lrhcPoint = temp;\n          }\n          try {\n            final GeoShape shape = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, ulhcPoint.getY() * DEGREES_TO_RADIANS,\n              lrhcPoint.getY() * DEGREES_TO_RADIANS,\n              ulhcPoint.getX() * DEGREES_TO_RADIANS,\n              lrhcPoint.getX() * DEGREES_TO_RADIANS);\n            //System.err.println(\"Trial rectangle shape: \"+shape);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 3: {\n        // Paths\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        while (true) {\n          try {\n            final GeoPath path = new GeoPath(PlanetModel.SPHERE, width);\n            for (int i = 0; i < pointCount; i++) {\n              final Point nextPoint = randomPoint();\n              path.addPoint(nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n            }\n            path.done();\n            return new Geo3dShape(path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    default:\n      throw new IllegalStateException(\"Unexpected shape type\");\n    }\n  }\n\n","bugFix":["f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dRptTest#randomQueryShape().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dRptTest#randomQueryShape().mjava","sourceNew":"  @Override\n  protected Shape randomQueryShape() {\n    final int shapeType = random().nextInt(4);\n    switch (shapeType) {\n    case 0: {\n        // Polygons\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPoint();\n            final GeoPoint gPt = new GeoPoint(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount);       //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, geoPoints, convexPointIndex);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 1: {\n        // Circles\n        while (true) {\n          final int circleRadius = random().nextInt(179) + 1;\n          final Point point = randomPoint();\n          try {\n            final GeoShape shape = new GeoStandardCircle(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS,\n              circleRadius * DEGREES_TO_RADIANS);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 2: {\n        // Rectangles\n        while (true) {\n          Point ulhcPoint = randomPoint();\n          Point lrhcPoint = randomPoint();\n          if (ulhcPoint.getY() < lrhcPoint.getY()) {\n            //swap\n            Point temp = ulhcPoint;\n            ulhcPoint = lrhcPoint;\n            lrhcPoint = temp;\n          }\n          try {\n            final GeoShape shape = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, ulhcPoint.getY() * DEGREES_TO_RADIANS,\n              lrhcPoint.getY() * DEGREES_TO_RADIANS,\n              ulhcPoint.getX() * DEGREES_TO_RADIANS,\n              lrhcPoint.getX() * DEGREES_TO_RADIANS);\n            //System.err.println(\"Trial rectangle shape: \"+shape);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 3: {\n        // Paths\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        while (true) {\n          try {\n            final GeoPath path = new GeoPath(PlanetModel.SPHERE, width);\n            for (int i = 0; i < pointCount; i++) {\n              final Point nextPoint = randomPoint();\n              path.addPoint(nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n            }\n            path.done();\n            return new Geo3dShape(path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    default:\n      throw new IllegalStateException(\"Unexpected shape type\");\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Shape randomQueryShape() {\n    final int shapeType = random().nextInt(4);\n    switch (shapeType) {\n    case 0: {\n        // Polygons\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPoint();\n            final GeoPoint gPt = new GeoPoint(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount);       //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, geoPoints, convexPointIndex);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 1: {\n        // Circles\n        while (true) {\n          final int circleRadius = random().nextInt(179) + 1;\n          final Point point = randomPoint();\n          try {\n            final GeoShape shape = new GeoStandardCircle(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS,\n              circleRadius * DEGREES_TO_RADIANS);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 2: {\n        // Rectangles\n        while (true) {\n          Point ulhcPoint = randomPoint();\n          Point lrhcPoint = randomPoint();\n          if (ulhcPoint.getY() < lrhcPoint.getY()) {\n            //swap\n            Point temp = ulhcPoint;\n            ulhcPoint = lrhcPoint;\n            lrhcPoint = temp;\n          }\n          try {\n            final GeoShape shape = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, ulhcPoint.getY() * DEGREES_TO_RADIANS,\n              lrhcPoint.getY() * DEGREES_TO_RADIANS,\n              ulhcPoint.getX() * DEGREES_TO_RADIANS,\n              lrhcPoint.getX() * DEGREES_TO_RADIANS);\n            //System.err.println(\"Trial rectangle shape: \"+shape);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 3: {\n        // Paths\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        while (true) {\n          try {\n            final GeoPath path = new GeoPath(PlanetModel.SPHERE, width);\n            for (int i = 0; i < pointCount; i++) {\n              final Point nextPoint = randomPoint();\n              path.addPoint(nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n            }\n            path.done();\n            return new Geo3dShape(path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    default:\n      throw new IllegalStateException(\"Unexpected shape type\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dRptTest#randomQueryShape().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dRptTest#randomQueryShape().mjava","sourceNew":"  @Override\n  protected Shape randomQueryShape() {\n    final int shapeType = random().nextInt(4);\n    switch (shapeType) {\n    case 0: {\n        // Polygons\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPoint();\n            final GeoPoint gPt = new GeoPoint(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount);       //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, geoPoints, convexPointIndex);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 1: {\n        // Circles\n        while (true) {\n          final int circleRadius = random().nextInt(179) + 1;\n          final Point point = randomPoint();\n          try {\n            final GeoShape shape = new GeoStandardCircle(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS,\n              circleRadius * DEGREES_TO_RADIANS);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 2: {\n        // Rectangles\n        while (true) {\n          Point ulhcPoint = randomPoint();\n          Point lrhcPoint = randomPoint();\n          if (ulhcPoint.getY() < lrhcPoint.getY()) {\n            //swap\n            Point temp = ulhcPoint;\n            ulhcPoint = lrhcPoint;\n            lrhcPoint = temp;\n          }\n          try {\n            final GeoShape shape = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, ulhcPoint.getY() * DEGREES_TO_RADIANS,\n              lrhcPoint.getY() * DEGREES_TO_RADIANS,\n              ulhcPoint.getX() * DEGREES_TO_RADIANS,\n              lrhcPoint.getX() * DEGREES_TO_RADIANS);\n            //System.err.println(\"Trial rectangle shape: \"+shape);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 3: {\n        // Paths\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        while (true) {\n          try {\n            final GeoPath path = new GeoPath(PlanetModel.SPHERE, width);\n            for (int i = 0; i < pointCount; i++) {\n              final Point nextPoint = randomPoint();\n              path.addPoint(nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n            }\n            path.done();\n            return new Geo3dShape(path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    default:\n      throw new IllegalStateException(\"Unexpected shape type\");\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Shape randomQueryShape() {\n    final int shapeType = random().nextInt(4);\n    switch (shapeType) {\n    case 0: {\n        // Polygons\n        final int vertexCount = random().nextInt(3) + 3;\n        while (true) {\n          final List<GeoPoint> geoPoints = new ArrayList<>();\n          while (geoPoints.size() < vertexCount) {\n            final Point point = randomPoint();\n            final GeoPoint gPt = new GeoPoint(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS);\n            geoPoints.add(gPt);\n          }\n          final int convexPointIndex = random().nextInt(vertexCount);       //If we get this wrong, hopefully we get IllegalArgumentException\n          try {\n            final GeoShape shape = GeoPolygonFactory.makeGeoPolygon(PlanetModel.SPHERE, geoPoints, convexPointIndex);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 1: {\n        // Circles\n        while (true) {\n          final int circleRadius = random().nextInt(179) + 1;\n          final Point point = randomPoint();\n          try {\n            final GeoShape shape = new GeoStandardCircle(PlanetModel.SPHERE, point.getY() * DEGREES_TO_RADIANS, point.getX() * DEGREES_TO_RADIANS,\n              circleRadius * DEGREES_TO_RADIANS);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 2: {\n        // Rectangles\n        while (true) {\n          Point ulhcPoint = randomPoint();\n          Point lrhcPoint = randomPoint();\n          if (ulhcPoint.getY() < lrhcPoint.getY()) {\n            //swap\n            Point temp = ulhcPoint;\n            ulhcPoint = lrhcPoint;\n            lrhcPoint = temp;\n          }\n          try {\n            final GeoShape shape = GeoBBoxFactory.makeGeoBBox(PlanetModel.SPHERE, ulhcPoint.getY() * DEGREES_TO_RADIANS,\n              lrhcPoint.getY() * DEGREES_TO_RADIANS,\n              ulhcPoint.getX() * DEGREES_TO_RADIANS,\n              lrhcPoint.getX() * DEGREES_TO_RADIANS);\n            //System.err.println(\"Trial rectangle shape: \"+shape);\n            return new Geo3dShape(shape, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    case 3: {\n        // Paths\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        while (true) {\n          try {\n            final GeoPath path = new GeoPath(PlanetModel.SPHERE, width);\n            for (int i = 0; i < pointCount; i++) {\n              final Point nextPoint = randomPoint();\n              path.addPoint(nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n            }\n            path.done();\n            return new Geo3dShape(path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n    default:\n      throw new IllegalStateException(\"Unexpected shape type\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["9891fa1f5a5571b36fbd8a69ccc12f24f5201e48","112d77ac8d3e10a362516ad834c9a11d35c94234"],"0fb9dbed1415914caa27460f8abb7afadaa61451":["ab7d51740456adc459ec788c8fe27746bdc60a55"],"ab7d51740456adc459ec788c8fe27746bdc60a55":["851e4197476b684154a7b65f996f535522e67400"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fec06d6753751ae302c7d35866763e6cb414112d":["c921d81476f94b6686d3f216daa1f6b076b4a6c0","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["9891fa1f5a5571b36fbd8a69ccc12f24f5201e48"],"9891fa1f5a5571b36fbd8a69ccc12f24f5201e48":["fec06d6753751ae302c7d35866763e6cb414112d"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7aca5c321bc9760dbfc9cefcc9d648e946b4615e"],"851e4197476b684154a7b65f996f535522e67400":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7aca5c321bc9760dbfc9cefcc9d648e946b4615e":["0fb9dbed1415914caa27460f8abb7afadaa61451"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0fb9dbed1415914caa27460f8abb7afadaa61451":["7aca5c321bc9760dbfc9cefcc9d648e946b4615e"],"ab7d51740456adc459ec788c8fe27746bdc60a55":["0fb9dbed1415914caa27460f8abb7afadaa61451"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c921d81476f94b6686d3f216daa1f6b076b4a6c0","851e4197476b684154a7b65f996f535522e67400"],"fec06d6753751ae302c7d35866763e6cb414112d":["9891fa1f5a5571b36fbd8a69ccc12f24f5201e48"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"9891fa1f5a5571b36fbd8a69ccc12f24f5201e48":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"851e4197476b684154a7b65f996f535522e67400":["ab7d51740456adc459ec788c8fe27746bdc60a55"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["fec06d6753751ae302c7d35866763e6cb414112d","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["fec06d6753751ae302c7d35866763e6cb414112d"],"7aca5c321bc9760dbfc9cefcc9d648e946b4615e":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}