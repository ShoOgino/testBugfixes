{"path":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#ppTermsBitSets(PhrasePositions[],HashMap[Term,Integer]).mjava","commits":[{"id":"2eaa5d4d2618a012373ae4574ebb6563933aa9f6","date":1331337973,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#ppTermsBitSets(PhrasePositions[],HashMap[Term,Integer]).mjava","pathOld":"/dev/null","sourceNew":"  /** bit-sets - for each repeating pp, for each of its repeating terms, the term ordinal values is set */\n  private ArrayList<OpenBitSet> ppTermsBitSets(PhrasePositions[] rpp, HashMap<Term,Integer> tord) {\n    ArrayList<OpenBitSet> bb = new ArrayList<OpenBitSet>(rpp.length);\n    for (PhrasePositions pp : rpp) {\n      OpenBitSet b = new OpenBitSet(tord.size());\n      Integer ord;\n      for (Term t: pp.terms) {\n        if ((ord=tord.get(t))!=null) {\n          b.set(ord);\n        }\n      }\n      bb.add(b);\n    }\n    return bb;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#ppTermsBitSets(PhrasePositions[],HashMap[Term,Integer]).mjava","pathOld":"/dev/null","sourceNew":"  /** bit-sets - for each repeating pp, for each of its repeating terms, the term ordinal values is set */\n  private ArrayList<OpenBitSet> ppTermsBitSets(PhrasePositions[] rpp, HashMap<Term,Integer> tord) {\n    ArrayList<OpenBitSet> bb = new ArrayList<OpenBitSet>(rpp.length);\n    for (PhrasePositions pp : rpp) {\n      OpenBitSet b = new OpenBitSet(tord.size());\n      Integer ord;\n      for (Term t: pp.terms) {\n        if ((ord=tord.get(t))!=null) {\n          b.set(ord);\n        }\n      }\n      bb.add(b);\n    }\n    return bb;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3995f83351082af8ae83bb017e63c56818fc1568","date":1392047063,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#ppTermsBitSets(PhrasePositions[],HashMap[Term,Integer]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#ppTermsBitSets(PhrasePositions[],HashMap[Term,Integer]).mjava","sourceNew":"  /** bit-sets - for each repeating pp, for each of its repeating terms, the term ordinal values is set */\n  private ArrayList<FixedBitSet> ppTermsBitSets(PhrasePositions[] rpp, HashMap<Term,Integer> tord) {\n    ArrayList<FixedBitSet> bb = new ArrayList<FixedBitSet>(rpp.length);\n    for (PhrasePositions pp : rpp) {\n      FixedBitSet b = new FixedBitSet(tord.size());\n      Integer ord;\n      for (Term t: pp.terms) {\n        if ((ord=tord.get(t))!=null) {\n          b.set(ord);\n        }\n      }\n      bb.add(b);\n    }\n    return bb;\n  }\n\n","sourceOld":"  /** bit-sets - for each repeating pp, for each of its repeating terms, the term ordinal values is set */\n  private ArrayList<OpenBitSet> ppTermsBitSets(PhrasePositions[] rpp, HashMap<Term,Integer> tord) {\n    ArrayList<OpenBitSet> bb = new ArrayList<OpenBitSet>(rpp.length);\n    for (PhrasePositions pp : rpp) {\n      OpenBitSet b = new OpenBitSet(tord.size());\n      Integer ord;\n      for (Term t: pp.terms) {\n        if ((ord=tord.get(t))!=null) {\n          b.set(ord);\n        }\n      }\n      bb.add(b);\n    }\n    return bb;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#ppTermsBitSets(PhrasePositions[],HashMap[Term,Integer]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#ppTermsBitSets(PhrasePositions[],HashMap[Term,Integer]).mjava","sourceNew":"  /** bit-sets - for each repeating pp, for each of its repeating terms, the term ordinal values is set */\n  private ArrayList<FixedBitSet> ppTermsBitSets(PhrasePositions[] rpp, HashMap<Term,Integer> tord) {\n    ArrayList<FixedBitSet> bb = new ArrayList<>(rpp.length);\n    for (PhrasePositions pp : rpp) {\n      FixedBitSet b = new FixedBitSet(tord.size());\n      Integer ord;\n      for (Term t: pp.terms) {\n        if ((ord=tord.get(t))!=null) {\n          b.set(ord);\n        }\n      }\n      bb.add(b);\n    }\n    return bb;\n  }\n\n","sourceOld":"  /** bit-sets - for each repeating pp, for each of its repeating terms, the term ordinal values is set */\n  private ArrayList<FixedBitSet> ppTermsBitSets(PhrasePositions[] rpp, HashMap<Term,Integer> tord) {\n    ArrayList<FixedBitSet> bb = new ArrayList<FixedBitSet>(rpp.length);\n    for (PhrasePositions pp : rpp) {\n      FixedBitSet b = new FixedBitSet(tord.size());\n      Integer ord;\n      for (Term t: pp.terms) {\n        if ((ord=tord.get(t))!=null) {\n          b.set(ord);\n        }\n      }\n      bb.add(b);\n    }\n    return bb;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b11b9d5eaf9707760ca5151530830a825197023","date":1525941319,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseMatcher#ppTermsBitSets(PhrasePositions[],HashMap[Term,Integer]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SloppyPhraseScorer#ppTermsBitSets(PhrasePositions[],HashMap[Term,Integer]).mjava","sourceNew":"  /** bit-sets - for each repeating pp, for each of its repeating terms, the term ordinal values is set */\n  private ArrayList<FixedBitSet> ppTermsBitSets(PhrasePositions[] rpp, HashMap<Term,Integer> tord) {\n    ArrayList<FixedBitSet> bb = new ArrayList<>(rpp.length);\n    for (PhrasePositions pp : rpp) {\n      FixedBitSet b = new FixedBitSet(tord.size());\n      Integer ord;\n      for (Term t: pp.terms) {\n        if ((ord=tord.get(t))!=null) {\n          b.set(ord);\n        }\n      }\n      bb.add(b);\n    }\n    return bb;\n  }\n\n","sourceOld":"  /** bit-sets - for each repeating pp, for each of its repeating terms, the term ordinal values is set */\n  private ArrayList<FixedBitSet> ppTermsBitSets(PhrasePositions[] rpp, HashMap<Term,Integer> tord) {\n    ArrayList<FixedBitSet> bb = new ArrayList<>(rpp.length);\n    for (PhrasePositions pp : rpp) {\n      FixedBitSet b = new FixedBitSet(tord.size());\n      Integer ord;\n      for (Term t: pp.terms) {\n        if ((ord=tord.get(t))!=null) {\n          b.set(ord);\n        }\n      }\n      bb.add(b);\n    }\n    return bb;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2eaa5d4d2618a012373ae4574ebb6563933aa9f6"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3995f83351082af8ae83bb017e63c56818fc1568"],"2eaa5d4d2618a012373ae4574ebb6563933aa9f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3b11b9d5eaf9707760ca5151530830a825197023":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3995f83351082af8ae83bb017e63c56818fc1568":["2eaa5d4d2618a012373ae4574ebb6563933aa9f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b11b9d5eaf9707760ca5151530830a825197023"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3b11b9d5eaf9707760ca5151530830a825197023"],"2eaa5d4d2618a012373ae4574ebb6563933aa9f6":["38e3b736c7ca086d61b7dbb841c905ee115490da","3995f83351082af8ae83bb017e63c56818fc1568"],"3b11b9d5eaf9707760ca5151530830a825197023":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","2eaa5d4d2618a012373ae4574ebb6563933aa9f6"],"3995f83351082af8ae83bb017e63c56818fc1568":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}