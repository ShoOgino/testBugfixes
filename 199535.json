{"path":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#newPolygonQuery(String,double[],double[]).mjava","commits":[{"id":"609ba4ce51a7095e9815d4fb2666ec85714f8f54","date":1456320705,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#newPolygonQuery(String,double[],double[]).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Create a query for matching a polygon.\n   * <p>\n   * The supplied {@code polyLats}/{@code polyLons} must be clockwise or counter-clockwise.\n   */\n  public static Query newPolygonQuery(String field, double[] polyLats, double[] polyLons) {\n    return new PointInPolygonQuery(field, polyLats, polyLons);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6","date":1456321728,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#newPolygonQuery(String,double[],double[]).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Create a query for matching a polygon.\n   * <p>\n   * The supplied {@code polyLats}/{@code polyLons} must be clockwise or counter-clockwise.\n   */\n  public static Query newPolygonQuery(String field, double[] polyLats, double[] polyLons) {\n    return new PointInPolygonQuery(field, polyLats, polyLons);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94ee361295fb38310ac4d53cb4773d1622423d68","date":1456833885,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#newPolygonQuery(String,double[],double[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#newPolygonQuery(String,double[],double[]).mjava","sourceNew":"  /** \n   * Create a query for matching a polygon.\n   * <p>\n   * The supplied {@code polyLats}/{@code polyLons} must be clockwise or counter-clockwise.\n   * @param field field name. cannot be null.\n   * @param polyLats latitude values for points of the polygon: must be within standard +/-90 coordinate bounds.\n   * @param polyLons longitude values for points of the polygon: must be within standard +/-180 coordinate bounds.\n   * @return query matching points within this polygon\n   * @throws IllegalArgumentException if {@code field} is null, {@code polyLats} is null or has invalid coordinates, \n   *                                  {@code polyLons} is null or has invalid coordinates, if {@code polyLats} has a different\n   *                                  length than {@code polyLons}, if the polygon has less than 4 points, or if polygon is \n   *                                  not closed (first and last points should be the same)\n   */\n  public static Query newPolygonQuery(String field, double[] polyLats, double[] polyLons) {\n    return new LatLonPointInPolygonQuery(field, polyLats, polyLons);\n  }\n\n","sourceOld":"  /** \n   * Create a query for matching a polygon.\n   * <p>\n   * The supplied {@code polyLats}/{@code polyLons} must be clockwise or counter-clockwise.\n   */\n  public static Query newPolygonQuery(String field, double[] polyLats, double[] polyLons) {\n    return new PointInPolygonQuery(field, polyLats, polyLons);\n  }\n\n","bugFix":null,"bugIntro":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#newPolygonQuery(String,double[],double[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#newPolygonQuery(String,double[],double[]).mjava","sourceNew":"  /** \n   * Create a query for matching a polygon.\n   * <p>\n   * The supplied {@code polyLats}/{@code polyLons} must be clockwise or counter-clockwise.\n   * @param field field name. cannot be null.\n   * @param polyLats latitude values for points of the polygon: must be within standard +/-90 coordinate bounds.\n   * @param polyLons longitude values for points of the polygon: must be within standard +/-180 coordinate bounds.\n   * @return query matching points within this polygon\n   * @throws IllegalArgumentException if {@code field} is null, {@code polyLats} is null or has invalid coordinates, \n   *                                  {@code polyLons} is null or has invalid coordinates, if {@code polyLats} has a different\n   *                                  length than {@code polyLons}, if the polygon has less than 4 points, or if polygon is \n   *                                  not closed (first and last points should be the same)\n   */\n  public static Query newPolygonQuery(String field, double[] polyLats, double[] polyLons) {\n    return new LatLonPointInPolygonQuery(field, polyLats, polyLons);\n  }\n\n","sourceOld":"  /** \n   * Create a query for matching a polygon.\n   * <p>\n   * The supplied {@code polyLats}/{@code polyLons} must be clockwise or counter-clockwise.\n   */\n  public static Query newPolygonQuery(String field, double[] polyLats, double[] polyLons) {\n    return new PointInPolygonQuery(field, polyLats, polyLons);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad0d09e969f4763b0df4230f8e3f74357872a4e4","date":1459188769,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#newPolygonQuery(String,double[],double[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#newPolygonQuery(String,double[],double[]).mjava","sourceNew":"  /** \n   * Create a query for matching a polygon.\n   * <p>\n   * The supplied {@code polyLats}/{@code polyLons} must be clockwise or counter-clockwise.\n   * @param field field name. must not be null.\n   * @param polyLats latitude values for points of the polygon: must be within standard +/-90 coordinate bounds.\n   * @param polyLons longitude values for points of the polygon: must be within standard +/-180 coordinate bounds.\n   * @return query matching points within this polygon\n   * @throws IllegalArgumentException if {@code field} is null, {@code polyLats} is null or has invalid coordinates, \n   *                                  {@code polyLons} is null or has invalid coordinates, if {@code polyLats} has a different\n   *                                  length than {@code polyLons}, if the polygon has less than 4 points, or if polygon is \n   *                                  not closed (first and last points should be the same)\n   */\n  public static Query newPolygonQuery(String field, double[] polyLats, double[] polyLons) {\n    return new LatLonPointInPolygonQuery(field, polyLats, polyLons);\n  }\n\n","sourceOld":"  /** \n   * Create a query for matching a polygon.\n   * <p>\n   * The supplied {@code polyLats}/{@code polyLons} must be clockwise or counter-clockwise.\n   * @param field field name. cannot be null.\n   * @param polyLats latitude values for points of the polygon: must be within standard +/-90 coordinate bounds.\n   * @param polyLons longitude values for points of the polygon: must be within standard +/-180 coordinate bounds.\n   * @return query matching points within this polygon\n   * @throws IllegalArgumentException if {@code field} is null, {@code polyLats} is null or has invalid coordinates, \n   *                                  {@code polyLons} is null or has invalid coordinates, if {@code polyLats} has a different\n   *                                  length than {@code polyLons}, if the polygon has less than 4 points, or if polygon is \n   *                                  not closed (first and last points should be the same)\n   */\n  public static Query newPolygonQuery(String field, double[] polyLats, double[] polyLons) {\n    return new LatLonPointInPolygonQuery(field, polyLats, polyLons);\n  }\n\n","bugFix":["94ee361295fb38310ac4d53cb4773d1622423d68"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95ddcac9ac08381985af6eac8f8b77ba881d4ad8","date":1459477726,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#newPolygonQuery(String,double[],double[]).mjava","sourceNew":null,"sourceOld":"  /** \n   * Create a query for matching a polygon.\n   * <p>\n   * The supplied {@code polyLats}/{@code polyLons} must be clockwise or counter-clockwise.\n   * @param field field name. must not be null.\n   * @param polyLats latitude values for points of the polygon: must be within standard +/-90 coordinate bounds.\n   * @param polyLons longitude values for points of the polygon: must be within standard +/-180 coordinate bounds.\n   * @return query matching points within this polygon\n   * @throws IllegalArgumentException if {@code field} is null, {@code polyLats} is null or has invalid coordinates, \n   *                                  {@code polyLons} is null or has invalid coordinates, if {@code polyLats} has a different\n   *                                  length than {@code polyLons}, if the polygon has less than 4 points, or if polygon is \n   *                                  not closed (first and last points should be the same)\n   */\n  public static Query newPolygonQuery(String field, double[] polyLats, double[] polyLons) {\n    return new LatLonPointInPolygonQuery(field, polyLats, polyLons);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"95ddcac9ac08381985af6eac8f8b77ba881d4ad8":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"609ba4ce51a7095e9815d4fb2666ec85714f8f54":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"94ee361295fb38310ac4d53cb4773d1622423d68":["609ba4ce51a7095e9815d4fb2666ec85714f8f54"],"ad0d09e969f4763b0df4230f8e3f74357872a4e4":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["609ba4ce51a7095e9815d4fb2666ec85714f8f54","94ee361295fb38310ac4d53cb4773d1622423d68"],"1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","609ba4ce51a7095e9815d4fb2666ec85714f8f54"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["95ddcac9ac08381985af6eac8f8b77ba881d4ad8"]},"commit2Childs":{"95ddcac9ac08381985af6eac8f8b77ba881d4ad8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"609ba4ce51a7095e9815d4fb2666ec85714f8f54":["94ee361295fb38310ac4d53cb4773d1622423d68","cf1a614098b46c9c22afebd7b898ae4d1d2fc273","1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["609ba4ce51a7095e9815d4fb2666ec85714f8f54","1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6"],"94ee361295fb38310ac4d53cb4773d1622423d68":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"ad0d09e969f4763b0df4230f8e3f74357872a4e4":["95ddcac9ac08381985af6eac8f8b77ba881d4ad8"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}