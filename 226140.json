{"path":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsProducer(SegmentReadState).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // We wrap StandardPostingsReaderImpl, but any StandardPostingsReader\n    // will work:\n    StandardPostingsReader docsReader = new StandardPostingsReaderImpl(state.dir, state.segmentInfo, state.readBufferSize);\n    StandardPostingsReader pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n    // Terms dict index reader\n    StandardTermsIndexReader indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new SimpleStandardTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUTF16Comparator());\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingReader.close();\n      }\n    }\n\n    // Terms dict reader\n    success = false;\n    try {\n      FieldsProducer ret = new StandardTermsDictReader(indexReader,\n                                                       state.dir, state.fieldInfos, state.segmentInfo.name,\n                                                       pulsingReader,\n                                                       state.readBufferSize,\n                                                       BytesRef.getUTF8SortedAsUTF16Comparator(),\n                                                       StandardCodec.TERMS_CACHE_SIZE);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08932c793647a36953d1816b1060121f48820d3f","date":1277386540,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // We wrap StandardPostingsReaderImpl, but any StandardPostingsReader\n    // will work:\n    StandardPostingsReader docsReader = new StandardPostingsReaderImpl(state.dir, state.segmentInfo, state.readBufferSize);\n    StandardPostingsReader pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n    // Terms dict index reader\n    StandardTermsIndexReader indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new SimpleStandardTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingReader.close();\n      }\n    }\n\n    // Terms dict reader\n    success = false;\n    try {\n      FieldsProducer ret = new StandardTermsDictReader(indexReader,\n                                                       state.dir, state.fieldInfos, state.segmentInfo.name,\n                                                       pulsingReader,\n                                                       state.readBufferSize,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       StandardCodec.TERMS_CACHE_SIZE);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // We wrap StandardPostingsReaderImpl, but any StandardPostingsReader\n    // will work:\n    StandardPostingsReader docsReader = new StandardPostingsReaderImpl(state.dir, state.segmentInfo, state.readBufferSize);\n    StandardPostingsReader pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n    // Terms dict index reader\n    StandardTermsIndexReader indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new SimpleStandardTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUTF16Comparator());\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingReader.close();\n      }\n    }\n\n    // Terms dict reader\n    success = false;\n    try {\n      FieldsProducer ret = new StandardTermsDictReader(indexReader,\n                                                       state.dir, state.fieldInfos, state.segmentInfo.name,\n                                                       pulsingReader,\n                                                       state.readBufferSize,\n                                                       BytesRef.getUTF8SortedAsUTF16Comparator(),\n                                                       StandardCodec.TERMS_CACHE_SIZE);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // We wrap StandardPostingsReaderImpl, but any StandardPostingsReader\n    // will work:\n    StandardPostingsReader docsReader = new StandardPostingsReaderImpl(state.dir, state.segmentInfo, state.readBufferSize);\n    StandardPostingsReader pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n    // Terms dict index reader\n    StandardTermsIndexReader indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new SimpleStandardTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingReader.close();\n      }\n    }\n\n    // Terms dict reader\n    success = false;\n    try {\n      FieldsProducer ret = new StandardTermsDictReader(indexReader,\n                                                       state.dir, state.fieldInfos, state.segmentInfo.name,\n                                                       pulsingReader,\n                                                       state.readBufferSize,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       StandardCodec.TERMS_CACHE_SIZE);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // We wrap StandardPostingsReaderImpl, but any StandardPostingsReader\n    // will work:\n    StandardPostingsReader docsReader = new StandardPostingsReaderImpl(state.dir, state.segmentInfo, state.readBufferSize);\n    StandardPostingsReader pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n    // Terms dict index reader\n    StandardTermsIndexReader indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new SimpleStandardTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUTF16Comparator());\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingReader.close();\n      }\n    }\n\n    // Terms dict reader\n    success = false;\n    try {\n      FieldsProducer ret = new StandardTermsDictReader(indexReader,\n                                                       state.dir, state.fieldInfos, state.segmentInfo.name,\n                                                       pulsingReader,\n                                                       state.readBufferSize,\n                                                       BytesRef.getUTF8SortedAsUTF16Comparator(),\n                                                       StandardCodec.TERMS_CACHE_SIZE);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99cf56f3a650b908f7017a72f9d23940418f8a52","date":1284891529,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // We wrap StandardPostingsReader, but any StandardPostingsReader\n    // will work:\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize);\n    PostingsReaderBase pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n    // Terms dict index reader\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingReader.close();\n      }\n    }\n\n    // Terms dict reader\n    success = false;\n    try {\n      FieldsProducer ret = new PrefixCodedTermsReader(indexReader,\n                                                       state.dir, state.fieldInfos, state.segmentInfo.name,\n                                                       pulsingReader,\n                                                       state.readBufferSize,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       StandardCodec.TERMS_CACHE_SIZE);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // We wrap StandardPostingsReaderImpl, but any StandardPostingsReader\n    // will work:\n    StandardPostingsReader docsReader = new StandardPostingsReaderImpl(state.dir, state.segmentInfo, state.readBufferSize);\n    StandardPostingsReader pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n    // Terms dict index reader\n    StandardTermsIndexReader indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new SimpleStandardTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingReader.close();\n      }\n    }\n\n    // Terms dict reader\n    success = false;\n    try {\n      FieldsProducer ret = new StandardTermsDictReader(indexReader,\n                                                       state.dir, state.fieldInfos, state.segmentInfo.name,\n                                                       pulsingReader,\n                                                       state.readBufferSize,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       StandardCodec.TERMS_CACHE_SIZE);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16c697f6ca5cdc82f918f753317a4ac9c70d259f","date":1289840486,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // We wrap StandardPostingsReader, but any StandardPostingsReader\n    // will work:\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    PostingsReaderBase pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n    // Terms dict index reader\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingReader.close();\n      }\n    }\n\n    // Terms dict reader\n    success = false;\n    try {\n      FieldsProducer ret = new PrefixCodedTermsReader(indexReader,\n                                                       state.dir, state.fieldInfos, state.segmentInfo.name,\n                                                       pulsingReader,\n                                                       state.readBufferSize,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       StandardCodec.TERMS_CACHE_SIZE,\n                                                       state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // We wrap StandardPostingsReader, but any StandardPostingsReader\n    // will work:\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize);\n    PostingsReaderBase pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n    // Terms dict index reader\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingReader.close();\n      }\n    }\n\n    // Terms dict reader\n    success = false;\n    try {\n      FieldsProducer ret = new PrefixCodedTermsReader(indexReader,\n                                                       state.dir, state.fieldInfos, state.segmentInfo.name,\n                                                       pulsingReader,\n                                                       state.readBufferSize,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       StandardCodec.TERMS_CACHE_SIZE);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // We wrap StandardPostingsReader, but any StandardPostingsReader\n    // will work:\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    PostingsReaderBase pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n    // Terms dict index reader\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingReader.close();\n      }\n    }\n\n    // Terms dict reader\n    success = false;\n    try {\n      FieldsProducer ret = new PrefixCodedTermsReader(indexReader,\n                                                       state.dir, state.fieldInfos, state.segmentInfo.name,\n                                                       pulsingReader,\n                                                       state.readBufferSize,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       StandardCodec.TERMS_CACHE_SIZE,\n                                                       state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // We wrap StandardPostingsReader, but any StandardPostingsReader\n    // will work:\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize);\n    PostingsReaderBase pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n    // Terms dict index reader\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingReader.close();\n      }\n    }\n\n    // Terms dict reader\n    success = false;\n    try {\n      FieldsProducer ret = new PrefixCodedTermsReader(indexReader,\n                                                       state.dir, state.fieldInfos, state.segmentInfo.name,\n                                                       pulsingReader,\n                                                       state.readBufferSize,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       StandardCodec.TERMS_CACHE_SIZE);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // We wrap StandardPostingsReader, but any StandardPostingsReader\n    // will work:\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    PostingsReaderBase pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n    // Terms dict index reader\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingReader.close();\n      }\n    }\n\n    // Terms dict reader\n    success = false;\n    try {\n      FieldsProducer ret = new PrefixCodedTermsReader(indexReader,\n                                                       state.dir, state.fieldInfos, state.segmentInfo.name,\n                                                       pulsingReader,\n                                                       state.readBufferSize,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       StandardCodec.TERMS_CACHE_SIZE,\n                                                       state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // We wrap StandardPostingsReaderImpl, but any StandardPostingsReader\n    // will work:\n    StandardPostingsReader docsReader = new StandardPostingsReaderImpl(state.dir, state.segmentInfo, state.readBufferSize);\n    StandardPostingsReader pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n    // Terms dict index reader\n    StandardTermsIndexReader indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new SimpleStandardTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator());\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingReader.close();\n      }\n    }\n\n    // Terms dict reader\n    success = false;\n    try {\n      FieldsProducer ret = new StandardTermsDictReader(indexReader,\n                                                       state.dir, state.fieldInfos, state.segmentInfo.name,\n                                                       pulsingReader,\n                                                       state.readBufferSize,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       StandardCodec.TERMS_CACHE_SIZE);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1add9ddc0005b07550d4350720aac22dc9886b3","date":1295549635,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // We wrap StandardPostingsReader, but any StandardPostingsReader\n    // will work:\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    PostingsReaderBase pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n    // Terms dict index reader\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingReader.close();\n      }\n    }\n\n    // Terms dict reader\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir, state.fieldInfos, state.segmentInfo.name,\n                                                pulsingReader,\n                                                state.readBufferSize,\n                                                BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                StandardCodec.TERMS_CACHE_SIZE,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // We wrap StandardPostingsReader, but any StandardPostingsReader\n    // will work:\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    PostingsReaderBase pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n    // Terms dict index reader\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingReader.close();\n      }\n    }\n\n    // Terms dict reader\n    success = false;\n    try {\n      FieldsProducer ret = new PrefixCodedTermsReader(indexReader,\n                                                       state.dir, state.fieldInfos, state.segmentInfo.name,\n                                                       pulsingReader,\n                                                       state.readBufferSize,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       StandardCodec.TERMS_CACHE_SIZE,\n                                                       state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // We wrap StandardPostingsReader, but any StandardPostingsReader\n    // will work:\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    PostingsReaderBase pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n    // Terms dict index reader\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingReader.close();\n      }\n    }\n\n    // Terms dict reader\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir, state.fieldInfos, state.segmentInfo.name,\n                                                pulsingReader,\n                                                state.readBufferSize,\n                                                BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                StandardCodec.TERMS_CACHE_SIZE,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // We wrap StandardPostingsReader, but any StandardPostingsReader\n    // will work:\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    PostingsReaderBase pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n    // Terms dict index reader\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingReader.close();\n      }\n    }\n\n    // Terms dict reader\n    success = false;\n    try {\n      FieldsProducer ret = new PrefixCodedTermsReader(indexReader,\n                                                       state.dir, state.fieldInfos, state.segmentInfo.name,\n                                                       pulsingReader,\n                                                       state.readBufferSize,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       StandardCodec.TERMS_CACHE_SIZE,\n                                                       state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // We wrap StandardPostingsReader, but any StandardPostingsReader\n    // will work:\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    PostingsReaderBase pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n    // Terms dict index reader\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingReader.close();\n      }\n    }\n\n    // Terms dict reader\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir, state.fieldInfos, state.segmentInfo.name,\n                                                pulsingReader,\n                                                state.readBufferSize,\n                                                BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                StandardCodec.TERMS_CACHE_SIZE,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // We wrap StandardPostingsReader, but any StandardPostingsReader\n    // will work:\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    PostingsReaderBase pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n    // Terms dict index reader\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingReader.close();\n      }\n    }\n\n    // Terms dict reader\n    success = false;\n    try {\n      FieldsProducer ret = new PrefixCodedTermsReader(indexReader,\n                                                       state.dir, state.fieldInfos, state.segmentInfo.name,\n                                                       pulsingReader,\n                                                       state.readBufferSize,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       StandardCodec.TERMS_CACHE_SIZE,\n                                                       state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762","date":1297938719,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // We wrap StandardPostingsReader, but any StandardPostingsReader\n    // will work:\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    PostingsReaderBase pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n    // Terms dict index reader\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingReader.close();\n      }\n    }\n\n    // Terms dict reader\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir, state.fieldInfos, state.segmentInfo.name,\n                                                pulsingReader,\n                                                state.readBufferSize,\n                                                StandardCodec.TERMS_CACHE_SIZE,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // We wrap StandardPostingsReader, but any StandardPostingsReader\n    // will work:\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    PostingsReaderBase pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n    // Terms dict index reader\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingReader.close();\n      }\n    }\n\n    // Terms dict reader\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir, state.fieldInfos, state.segmentInfo.name,\n                                                pulsingReader,\n                                                state.readBufferSize,\n                                                BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                StandardCodec.TERMS_CACHE_SIZE,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // We wrap StandardPostingsReader, but any StandardPostingsReader\n    // will work:\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    PostingsReaderBase pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n    // Terms dict index reader\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingReader.close();\n      }\n    }\n\n    // Terms dict reader\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir, state.fieldInfos, state.segmentInfo.name,\n                                                pulsingReader,\n                                                state.readBufferSize,\n                                                StandardCodec.TERMS_CACHE_SIZE,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // We wrap StandardPostingsReader, but any StandardPostingsReader\n    // will work:\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    PostingsReaderBase pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n    // Terms dict index reader\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingReader.close();\n      }\n    }\n\n    // Terms dict reader\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir, state.fieldInfos, state.segmentInfo.name,\n                                                pulsingReader,\n                                                state.readBufferSize,\n                                                BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                StandardCodec.TERMS_CACHE_SIZE,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // We wrap StandardPostingsReader, but any StandardPostingsReader\n    // will work:\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    PostingsReaderBase pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n    // Terms dict index reader\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingReader.close();\n      }\n    }\n\n    // Terms dict reader\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir, state.fieldInfos, state.segmentInfo.name,\n                                                pulsingReader,\n                                                state.readBufferSize,\n                                                StandardCodec.TERMS_CACHE_SIZE,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // We wrap StandardPostingsReader, but any StandardPostingsReader\n    // will work:\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    PostingsReaderBase pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n    // Terms dict index reader\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingReader.close();\n      }\n    }\n\n    // Terms dict reader\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir, state.fieldInfos, state.segmentInfo.name,\n                                                pulsingReader,\n                                                state.readBufferSize,\n                                                BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                StandardCodec.TERMS_CACHE_SIZE,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c18f18acd178df9b067d805c52fe16882828aa0","date":1298739952,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // We wrap StandardPostingsReader, but any StandardPostingsReader\n    // will work:\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    PostingsReaderBase pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n    // Terms dict index reader\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                    state.fieldInfos,\n                                                    state.segmentInfo.name,\n                                                    state.termsIndexDivisor,\n                                                    state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingReader.close();\n      }\n    }\n\n    // Terms dict reader\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir, state.fieldInfos, state.segmentInfo.name,\n                                                pulsingReader,\n                                                state.readBufferSize,\n                                                StandardCodec.TERMS_CACHE_SIZE,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // We wrap StandardPostingsReader, but any StandardPostingsReader\n    // will work:\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    PostingsReaderBase pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n    // Terms dict index reader\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingReader.close();\n      }\n    }\n\n    // Terms dict reader\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir, state.fieldInfos, state.segmentInfo.name,\n                                                pulsingReader,\n                                                state.readBufferSize,\n                                                StandardCodec.TERMS_CACHE_SIZE,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // We wrap StandardPostingsReader, but any StandardPostingsReader\n    // will work:\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    PostingsReaderBase pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n    // Terms dict index reader\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                    state.fieldInfos,\n                                                    state.segmentInfo.name,\n                                                    state.termsIndexDivisor,\n                                                    state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingReader.close();\n      }\n    }\n\n    // Terms dict reader\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir, state.fieldInfos, state.segmentInfo.name,\n                                                pulsingReader,\n                                                state.readBufferSize,\n                                                StandardCodec.TERMS_CACHE_SIZE,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // We wrap StandardPostingsReader, but any StandardPostingsReader\n    // will work:\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    PostingsReaderBase pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n    // Terms dict index reader\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingReader.close();\n      }\n    }\n\n    // Terms dict reader\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir, state.fieldInfos, state.segmentInfo.name,\n                                                pulsingReader,\n                                                state.readBufferSize,\n                                                StandardCodec.TERMS_CACHE_SIZE,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // We wrap StandardPostingsReader, but any StandardPostingsReader\n    // will work:\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    PostingsReaderBase pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n    // Terms dict index reader\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                    state.fieldInfos,\n                                                    state.segmentInfo.name,\n                                                    state.termsIndexDivisor,\n                                                    state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingReader.close();\n      }\n    }\n\n    // Terms dict reader\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir, state.fieldInfos, state.segmentInfo.name,\n                                                pulsingReader,\n                                                state.readBufferSize,\n                                                StandardCodec.TERMS_CACHE_SIZE,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // We wrap StandardPostingsReader, but any StandardPostingsReader\n    // will work:\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    PostingsReaderBase pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n    // Terms dict index reader\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new FixedGapTermsIndexReader(state.dir,\n                                                       state.fieldInfos,\n                                                       state.segmentInfo.name,\n                                                       state.termsIndexDivisor,\n                                                       BytesRef.getUTF8SortedAsUnicodeComparator(),\n                                                       state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingReader.close();\n      }\n    }\n\n    // Terms dict reader\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir, state.fieldInfos, state.segmentInfo.name,\n                                                pulsingReader,\n                                                state.readBufferSize,\n                                                StandardCodec.TERMS_CACHE_SIZE,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // We wrap StandardPostingsReader, but any StandardPostingsReader\n    // will work:\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.context, state.codecId);\n    PostingsReaderBase pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n    // Terms dict index reader\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                    state.fieldInfos,\n                                                    state.segmentInfo.name,\n                                                    state.termsIndexDivisor,\n                                                    state.codecId, state.context);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingReader.close();\n      }\n    }\n\n    // Terms dict reader\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir, state.fieldInfos, state.segmentInfo.name,\n                                                pulsingReader,\n                                                state.context,\n                                                StandardCodec.TERMS_CACHE_SIZE,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // We wrap StandardPostingsReader, but any StandardPostingsReader\n    // will work:\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    PostingsReaderBase pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n    // Terms dict index reader\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                    state.fieldInfos,\n                                                    state.segmentInfo.name,\n                                                    state.termsIndexDivisor,\n                                                    state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingReader.close();\n      }\n    }\n\n    // Terms dict reader\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir, state.fieldInfos, state.segmentInfo.name,\n                                                pulsingReader,\n                                                state.readBufferSize,\n                                                StandardCodec.TERMS_CACHE_SIZE,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // We wrap StandardPostingsReader, but any StandardPostingsReader\n    // will work:\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.context, state.codecId);\n    PostingsReaderBase pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n    // Terms dict index reader\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                    state.fieldInfos,\n                                                    state.segmentInfo.name,\n                                                    state.termsIndexDivisor,\n                                                    state.codecId, state.context);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingReader.close();\n      }\n    }\n\n    // Terms dict reader\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir, state.fieldInfos, state.segmentInfo.name,\n                                                pulsingReader,\n                                                state.context,\n                                                StandardCodec.TERMS_CACHE_SIZE,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // We wrap StandardPostingsReader, but any StandardPostingsReader\n    // will work:\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    PostingsReaderBase pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n    // Terms dict index reader\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                    state.fieldInfos,\n                                                    state.segmentInfo.name,\n                                                    state.termsIndexDivisor,\n                                                    state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingReader.close();\n      }\n    }\n\n    // Terms dict reader\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir, state.fieldInfos, state.segmentInfo.name,\n                                                pulsingReader,\n                                                state.readBufferSize,\n                                                StandardCodec.TERMS_CACHE_SIZE,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // We wrap StandardPostingsReader, but any StandardPostingsReader\n    // will work:\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.context, state.codecId);\n    PostingsReaderBase pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n    // Terms dict index reader\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                    state.fieldInfos,\n                                                    state.segmentInfo.name,\n                                                    state.termsIndexDivisor,\n                                                    state.codecId, state.context);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingReader.close();\n      }\n    }\n\n    // Terms dict reader\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir, state.fieldInfos, state.segmentInfo.name,\n                                                pulsingReader,\n                                                state.context,\n                                                StandardCodec.TERMS_CACHE_SIZE,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // We wrap StandardPostingsReader, but any StandardPostingsReader\n    // will work:\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.readBufferSize, state.codecId);\n    PostingsReaderBase pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n    // Terms dict index reader\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                    state.fieldInfos,\n                                                    state.segmentInfo.name,\n                                                    state.termsIndexDivisor,\n                                                    state.codecId);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingReader.close();\n      }\n    }\n\n    // Terms dict reader\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir, state.fieldInfos, state.segmentInfo.name,\n                                                pulsingReader,\n                                                state.readBufferSize,\n                                                StandardCodec.TERMS_CACHE_SIZE,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // We wrap StandardPostingsReader, but any StandardPostingsReader\n    // will work:\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.context, state.codecId);\n    PostingsReaderBase pulsingReader = new PulsingPostingsReader(docsReader);\n\n    boolean success = false;\n    try {\n      FieldsProducer ret = new BlockTreeTermsReader(\n                                                    state.dir, state.fieldInfos, state.segmentInfo.name,\n                                                    pulsingReader,\n                                                    state.context,\n                                                    state.codecId,\n                                                    state.termsIndexDivisor);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        pulsingReader.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // We wrap StandardPostingsReader, but any StandardPostingsReader\n    // will work:\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.context, state.codecId);\n    PostingsReaderBase pulsingReader = new PulsingPostingsReaderImpl(docsReader);\n\n    // Terms dict index reader\n    TermsIndexReaderBase indexReader;\n\n    boolean success = false;\n    try {\n      indexReader = new VariableGapTermsIndexReader(state.dir,\n                                                    state.fieldInfos,\n                                                    state.segmentInfo.name,\n                                                    state.termsIndexDivisor,\n                                                    state.codecId, state.context);\n      success = true;\n    } finally {\n      if (!success) {\n        pulsingReader.close();\n      }\n    }\n\n    // Terms dict reader\n    success = false;\n    try {\n      FieldsProducer ret = new BlockTermsReader(indexReader,\n                                                state.dir, state.fieldInfos, state.segmentInfo.name,\n                                                pulsingReader,\n                                                state.context,\n                                                StandardCodec.TERMS_CACHE_SIZE,\n                                                state.codecId);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        try {\n          pulsingReader.close();\n        } finally {\n          indexReader.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    PostingsReaderBase docsReader = wrappedPostingsBaseFormat.postingsReaderBase(state);\n    PostingsReaderBase pulsingReader = new PulsingPostingsReader(docsReader);\n\n    boolean success = false;\n    try {\n      FieldsProducer ret = new BlockTreeTermsReader(\n                                                    state.dir, state.fieldInfos, state.segmentInfo.name,\n                                                    pulsingReader,\n                                                    state.context,\n                                                    state.segmentSuffix,\n                                                    state.termsIndexDivisor);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        pulsingReader.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // We wrap StandardPostingsReader, but any StandardPostingsReader\n    // will work:\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.context, state.codecId);\n    PostingsReaderBase pulsingReader = new PulsingPostingsReader(docsReader);\n\n    boolean success = false;\n    try {\n      FieldsProducer ret = new BlockTreeTermsReader(\n                                                    state.dir, state.fieldInfos, state.segmentInfo.name,\n                                                    pulsingReader,\n                                                    state.context,\n                                                    state.codecId,\n                                                    state.termsIndexDivisor);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        pulsingReader.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["dd5dd283c3d9f22e186699bf823c9d1e67f49152","dd5dd283c3d9f22e186699bf823c9d1e67f49152"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":6,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/index/codecs/nestedpulsing/NestedPulsingPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingCodec#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase docsReader = new Lucene40PostingsReader(state.dir, state.segmentInfo, state.context, state.segmentSuffix);\n    PostingsReaderBase pulsingReaderInner = new PulsingPostingsReader(docsReader);\n    PostingsReaderBase pulsingReader = new PulsingPostingsReader(pulsingReaderInner);\n    boolean success = false;\n    try {\n      FieldsProducer ret = new BlockTreeTermsReader(\n                                                    state.dir, state.fieldInfos, state.segmentInfo.name,\n                                                    pulsingReader,\n                                                    state.context,\n                                                    state.segmentSuffix,\n                                                    state.termsIndexDivisor);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        pulsingReader.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n\n    // We wrap StandardPostingsReader, but any StandardPostingsReader\n    // will work:\n    PostingsReaderBase docsReader = new StandardPostingsReader(state.dir, state.segmentInfo, state.context, state.codecId);\n    PostingsReaderBase pulsingReader = new PulsingPostingsReader(docsReader);\n\n    boolean success = false;\n    try {\n      FieldsProducer ret = new BlockTreeTermsReader(\n                                                    state.dir, state.fieldInfos, state.segmentInfo.name,\n                                                    pulsingReader,\n                                                    state.context,\n                                                    state.codecId,\n                                                    state.termsIndexDivisor);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        pulsingReader.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["dd5dd283c3d9f22e186699bf823c9d1e67f49152","dd5dd283c3d9f22e186699bf823c9d1e67f49152"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":["29ef99d61cda9641b6250bf9567329a6e65f901d","4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"16c697f6ca5cdc82f918f753317a4ac9c70d259f":["99cf56f3a650b908f7017a72f9d23940418f8a52"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["99cf56f3a650b908f7017a72f9d23940418f8a52","16c697f6ca5cdc82f918f753317a4ac9c70d259f"],"4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762":["b1add9ddc0005b07550d4350720aac22dc9886b3"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["9c18f18acd178df9b067d805c52fe16882828aa0"],"5f4e87790277826a2aea119328600dfb07761f32":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","08932c793647a36953d1816b1060121f48820d3f"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["16c697f6ca5cdc82f918f753317a4ac9c70d259f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","16c697f6ca5cdc82f918f753317a4ac9c70d259f"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b1add9ddc0005b07550d4350720aac22dc9886b3"],"60ba444201d2570214b6fcf1d15600dc1a01f548":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"7b91922b55d15444d554721b352861d028eb8278":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"08932c793647a36953d1816b1060121f48820d3f":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bde51b089eb7f86171eb3406e38a274743f9b7ac","9c18f18acd178df9b067d805c52fe16882828aa0"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["f1bdbf92da222965b46c0a942c3857ba56e5c638","9c18f18acd178df9b067d805c52fe16882828aa0"],"9c18f18acd178df9b067d805c52fe16882828aa0":["4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","b1add9ddc0005b07550d4350720aac22dc9886b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["9c18f18acd178df9b067d805c52fe16882828aa0","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["9c18f18acd178df9b067d805c52fe16882828aa0","639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["08932c793647a36953d1816b1060121f48820d3f"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["e79a6d080bdd5b2a8f56342cf571b5476de04180","4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"16c697f6ca5cdc82f918f753317a4ac9c70d259f":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","b1add9ddc0005b07550d4350720aac22dc9886b3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762":["f1bdbf92da222965b46c0a942c3857ba56e5c638","9c18f18acd178df9b067d805c52fe16882828aa0","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5f4e87790277826a2aea119328600dfb07761f32","08932c793647a36953d1816b1060121f48820d3f"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762","e79a6d080bdd5b2a8f56342cf571b5476de04180","29ef99d61cda9641b6250bf9567329a6e65f901d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"60ba444201d2570214b6fcf1d15600dc1a01f548":["7b91922b55d15444d554721b352861d028eb8278"],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"08932c793647a36953d1816b1060121f48820d3f":["5f4e87790277826a2aea119328600dfb07761f32","99cf56f3a650b908f7017a72f9d23940418f8a52"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"9c18f18acd178df9b067d805c52fe16882828aa0":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","5d004d0e0b3f65bb40da76d476d659d7888270e8","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["60ba444201d2570214b6fcf1d15600dc1a01f548","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["16c697f6ca5cdc82f918f753317a4ac9c70d259f","9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}