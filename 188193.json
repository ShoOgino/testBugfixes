{"path":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestDrillDownQuery#beforeClassDrillDownQueryTest().mjava","commits":[{"id":"ca39562b2d7687143fdb601d5de1b8f7b778f1db","date":1385299806,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestDrillDownQuery#beforeClassDrillDownQueryTest().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownQueryTest#beforeClassDrillDownQueryTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassDrillDownQueryTest() throws Exception {\n    dir = newDirectory();\n    Random r = random();\n    RandomIndexWriter writer = new RandomIndexWriter(r, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(r, MockTokenizer.KEYWORD, false)));\n    \n    taxoDir = newDirectory();\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    config = new FacetsConfig(taxoWriter);\n\n    // Randomize the per-dim config:\n    config.setHierarchical(\"a\", random().nextBoolean());\n    config.setMultiValued(\"a\", random().nextBoolean());\n    if (random().nextBoolean()) {\n      config.setIndexFieldName(\"a\", \"$a\");\n    }\n    config.setRequireDimCount(\"a\", true);\n\n    config.setHierarchical(\"b\", random().nextBoolean());\n    config.setMultiValued(\"b\", random().nextBoolean());\n    if (random().nextBoolean()) {\n      config.setIndexFieldName(\"b\", \"$b\");\n    }\n    config.setRequireDimCount(\"b\", true);\n\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      if (i % 2 == 0) { // 50\n        doc.add(new TextField(\"content\", \"foo\", Field.Store.NO));\n      }\n      if (i % 3 == 0) { // 33\n        doc.add(new TextField(\"content\", \"bar\", Field.Store.NO));\n      }\n      if (i % 4 == 0) { // 25\n        if (r.nextBoolean()) {\n          doc.add(new FacetField(\"a\", \"1\"));\n        } else {\n          doc.add(new FacetField(\"a\", \"2\"));\n        }\n      }\n      if (i % 5 == 0) { // 20\n        doc.add(new FacetField(\"b\", \"1\"));\n      }\n      writer.addDocument(config.build(doc));\n    }\n    \n    taxoWriter.close();\n    reader = writer.getReader();\n    writer.close();\n    \n    taxo = new DirectoryTaxonomyReader(taxoDir);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassDrillDownQueryTest() throws Exception {\n    dir = newDirectory();\n    Random r = random();\n    RandomIndexWriter writer = new RandomIndexWriter(r, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(r, MockTokenizer.KEYWORD, false)));\n    \n    taxoDir = newDirectory();\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    \n    for (int i = 0; i < 100; i++) {\n      ArrayList<FacetLabel> paths = new ArrayList<FacetLabel>();\n      Document doc = new Document();\n      if (i % 2 == 0) { // 50\n        doc.add(new TextField(\"content\", \"foo\", Field.Store.NO));\n      }\n      if (i % 3 == 0) { // 33\n        doc.add(new TextField(\"content\", \"bar\", Field.Store.NO));\n      }\n      if (i % 4 == 0) { // 25\n        if (r.nextBoolean()) {\n          paths.add(new FacetLabel(\"a/1\", '/'));\n        } else {\n          paths.add(new FacetLabel(\"a/2\", '/'));\n        }\n      }\n      if (i % 5 == 0) { // 20\n        paths.add(new FacetLabel(\"b\"));\n      }\n      FacetFields facetFields = new FacetFields(taxoWriter);\n      if (paths.size() > 0) {\n        facetFields.addFields(doc, paths);\n      }\n      writer.addDocument(doc);\n    }\n    \n    taxoWriter.close();\n    reader = writer.getReader();\n    writer.close();\n    \n    taxo = new DirectoryTaxonomyReader(taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillDownQuery#beforeClassDrillDownQueryTest().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestDrillDownQuery#beforeClassDrillDownQueryTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassDrillDownQueryTest() throws Exception {\n    dir = newDirectory();\n    Random r = random();\n    RandomIndexWriter writer = new RandomIndexWriter(r, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(r, MockTokenizer.KEYWORD, false)));\n    \n    taxoDir = newDirectory();\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    config = new FacetsConfig(taxoWriter);\n\n    // Randomize the per-dim config:\n    config.setHierarchical(\"a\", random().nextBoolean());\n    config.setMultiValued(\"a\", random().nextBoolean());\n    if (random().nextBoolean()) {\n      config.setIndexFieldName(\"a\", \"$a\");\n    }\n    config.setRequireDimCount(\"a\", true);\n\n    config.setHierarchical(\"b\", random().nextBoolean());\n    config.setMultiValued(\"b\", random().nextBoolean());\n    if (random().nextBoolean()) {\n      config.setIndexFieldName(\"b\", \"$b\");\n    }\n    config.setRequireDimCount(\"b\", true);\n\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      if (i % 2 == 0) { // 50\n        doc.add(new TextField(\"content\", \"foo\", Field.Store.NO));\n      }\n      if (i % 3 == 0) { // 33\n        doc.add(new TextField(\"content\", \"bar\", Field.Store.NO));\n      }\n      if (i % 4 == 0) { // 25\n        if (r.nextBoolean()) {\n          doc.add(new FacetField(\"a\", \"1\"));\n        } else {\n          doc.add(new FacetField(\"a\", \"2\"));\n        }\n      }\n      if (i % 5 == 0) { // 20\n        doc.add(new FacetField(\"b\", \"1\"));\n      }\n      writer.addDocument(config.build(doc));\n    }\n    \n    taxoWriter.close();\n    reader = writer.getReader();\n    writer.close();\n    \n    taxo = new DirectoryTaxonomyReader(taxoDir);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassDrillDownQueryTest() throws Exception {\n    dir = newDirectory();\n    Random r = random();\n    RandomIndexWriter writer = new RandomIndexWriter(r, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(r, MockTokenizer.KEYWORD, false)));\n    \n    taxoDir = newDirectory();\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    config = new FacetsConfig(taxoWriter);\n\n    // Randomize the per-dim config:\n    config.setHierarchical(\"a\", random().nextBoolean());\n    config.setMultiValued(\"a\", random().nextBoolean());\n    if (random().nextBoolean()) {\n      config.setIndexFieldName(\"a\", \"$a\");\n    }\n    config.setRequireDimCount(\"a\", true);\n\n    config.setHierarchical(\"b\", random().nextBoolean());\n    config.setMultiValued(\"b\", random().nextBoolean());\n    if (random().nextBoolean()) {\n      config.setIndexFieldName(\"b\", \"$b\");\n    }\n    config.setRequireDimCount(\"b\", true);\n\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      if (i % 2 == 0) { // 50\n        doc.add(new TextField(\"content\", \"foo\", Field.Store.NO));\n      }\n      if (i % 3 == 0) { // 33\n        doc.add(new TextField(\"content\", \"bar\", Field.Store.NO));\n      }\n      if (i % 4 == 0) { // 25\n        if (r.nextBoolean()) {\n          doc.add(new FacetField(\"a\", \"1\"));\n        } else {\n          doc.add(new FacetField(\"a\", \"2\"));\n        }\n      }\n      if (i % 5 == 0) { // 20\n        doc.add(new FacetField(\"b\", \"1\"));\n      }\n      writer.addDocument(config.build(doc));\n    }\n    \n    taxoWriter.close();\n    reader = writer.getReader();\n    writer.close();\n    \n    taxo = new DirectoryTaxonomyReader(taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21d36d0db865f7b84026b447bec653469a6e66df":["ca39562b2d7687143fdb601d5de1b8f7b778f1db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ca39562b2d7687143fdb601d5de1b8f7b778f1db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","ca39562b2d7687143fdb601d5de1b8f7b778f1db"],"21d36d0db865f7b84026b447bec653469a6e66df":[],"ca39562b2d7687143fdb601d5de1b8f7b778f1db":["21d36d0db865f7b84026b447bec653469a6e66df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["21d36d0db865f7b84026b447bec653469a6e66df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}