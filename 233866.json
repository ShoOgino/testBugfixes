{"path":"solr/core/src/java/org/apache/solr/schema/IndexSchema#loadCopyFields(Document,XPath).mjava","commits":[{"id":"24b51843dd98041bc40be26a47e44d7cb49bef72","date":1403043869,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#loadCopyFields(Document,XPath).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Loads the copy fields\n   */\n  protected synchronized void loadCopyFields(Document document, XPath xpath) throws XPathExpressionException {\n    String expression = \"//\" + COPY_FIELD;\n    NodeList nodes = (NodeList)xpath.evaluate(expression, document, XPathConstants.NODESET);\n\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      NamedNodeMap attrs = node.getAttributes();\n\n      String source = DOMUtil.getAttr(attrs, SOURCE, COPY_FIELD + \" definition\");\n      String dest   = DOMUtil.getAttr(attrs, DESTINATION,  COPY_FIELD + \" definition\");\n      String maxChars = DOMUtil.getAttr(attrs, MAX_CHARS);\n\n      int maxCharsInt = CopyField.UNLIMITED;\n      if (maxChars != null) {\n        try {\n          maxCharsInt = Integer.parseInt(maxChars);\n        } catch (NumberFormatException e) {\n          log.warn(\"Couldn't parse \" + MAX_CHARS + \" attribute for \" + COPY_FIELD + \" from \"\n                  + source + \" to \" + dest + \" as integer. The whole field will be copied.\");\n        }\n      }\n\n      if (dest.equals(uniqueKeyFieldName)) {\n        String msg = UNIQUE_KEY + \" field (\"+uniqueKeyFieldName+\n          \") can not be the \" + DESTINATION + \" of a \" + COPY_FIELD + \"(\" + SOURCE + \"=\" +source+\")\";\n        log.error(msg);\n        throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n      }\n      \n      registerCopyField(source, dest, maxCharsInt);\n    }\n      \n    for (Map.Entry<SchemaField, Integer> entry : copyFieldTargetCounts.entrySet()) {\n      if (entry.getValue() > 1 && !entry.getKey().multiValued())  {\n        log.warn(\"Field \" + entry.getKey().name + \" is not multivalued \"+\n            \"and destination for multiple \" + COPY_FIELDS + \" (\"+\n            entry.getValue()+\")\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e57c73924f3b8c19defa62e96bfa34a4922d49c2","date":1403106358,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#loadCopyFields(Document,XPath).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Loads the copy fields\n   */\n  protected synchronized void loadCopyFields(Document document, XPath xpath) throws XPathExpressionException {\n    String expression = \"//\" + COPY_FIELD;\n    NodeList nodes = (NodeList)xpath.evaluate(expression, document, XPathConstants.NODESET);\n\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      NamedNodeMap attrs = node.getAttributes();\n\n      String source = DOMUtil.getAttr(attrs, SOURCE, COPY_FIELD + \" definition\");\n      String dest   = DOMUtil.getAttr(attrs, DESTINATION,  COPY_FIELD + \" definition\");\n      String maxChars = DOMUtil.getAttr(attrs, MAX_CHARS);\n\n      int maxCharsInt = CopyField.UNLIMITED;\n      if (maxChars != null) {\n        try {\n          maxCharsInt = Integer.parseInt(maxChars);\n        } catch (NumberFormatException e) {\n          log.warn(\"Couldn't parse \" + MAX_CHARS + \" attribute for \" + COPY_FIELD + \" from \"\n                  + source + \" to \" + dest + \" as integer. The whole field will be copied.\");\n        }\n      }\n\n      if (dest.equals(uniqueKeyFieldName)) {\n        String msg = UNIQUE_KEY + \" field (\"+uniqueKeyFieldName+\n          \") can not be the \" + DESTINATION + \" of a \" + COPY_FIELD + \"(\" + SOURCE + \"=\" +source+\")\";\n        log.error(msg);\n        throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n      }\n      \n      registerCopyField(source, dest, maxCharsInt);\n    }\n      \n    for (Map.Entry<SchemaField, Integer> entry : copyFieldTargetCounts.entrySet()) {\n      if (entry.getValue() > 1 && !entry.getKey().multiValued())  {\n        log.warn(\"Field \" + entry.getKey().name + \" is not multivalued \"+\n            \"and destination for multiple \" + COPY_FIELDS + \" (\"+\n            entry.getValue()+\")\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9df8125ba9193a2e2e285ed92157810b1952a244","date":1587326330,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#loadCopyFields(Document,XPath).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchema#loadCopyFields(Document,XPath).mjava","sourceNew":"  /**\n   * Loads the copy fields\n   */\n  protected synchronized void loadCopyFields(Document document, XPath xpath) throws XPathExpressionException {\n    String expression = \"//\" + COPY_FIELD;\n    NodeList nodes = (NodeList)xpath.evaluate(expression, document, XPathConstants.NODESET);\n\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      NamedNodeMap attrs = node.getAttributes();\n\n      String source = DOMUtil.getAttr(attrs, SOURCE, COPY_FIELD + \" definition\");\n      String dest   = DOMUtil.getAttr(attrs, DESTINATION,  COPY_FIELD + \" definition\");\n      String maxChars = DOMUtil.getAttr(attrs, MAX_CHARS);\n\n      int maxCharsInt = CopyField.UNLIMITED;\n      if (maxChars != null) {\n        try {\n          maxCharsInt = Integer.parseInt(maxChars);\n        } catch (NumberFormatException e) {\n          log.warn(\"Couldn't parse {} attribute for '{}' from '{}' to '{}' as integer. The whole field will be copied.\"\n              , MAX_CHARS, COPY_FIELD, source, dest);\n        }\n      }\n\n      if (dest.equals(uniqueKeyFieldName)) {\n        String msg = UNIQUE_KEY + \" field (\"+uniqueKeyFieldName+\n          \") can not be the \" + DESTINATION + \" of a \" + COPY_FIELD + \"(\" + SOURCE + \"=\" +source+\")\";\n        log.error(msg);\n        throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n      }\n      \n      registerCopyField(source, dest, maxCharsInt);\n    }\n      \n    for (Map.Entry<SchemaField, Integer> entry : copyFieldTargetCounts.entrySet()) {\n      if (entry.getValue() > 1 && !entry.getKey().multiValued())  {\n        if (log.isWarnEnabled()) {\n          log.warn(\"Field {} is not multivalued and destination for multiople {} ({})\"\n              , entry.getKey().name, COPY_FIELDS, entry.getValue());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Loads the copy fields\n   */\n  protected synchronized void loadCopyFields(Document document, XPath xpath) throws XPathExpressionException {\n    String expression = \"//\" + COPY_FIELD;\n    NodeList nodes = (NodeList)xpath.evaluate(expression, document, XPathConstants.NODESET);\n\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      NamedNodeMap attrs = node.getAttributes();\n\n      String source = DOMUtil.getAttr(attrs, SOURCE, COPY_FIELD + \" definition\");\n      String dest   = DOMUtil.getAttr(attrs, DESTINATION,  COPY_FIELD + \" definition\");\n      String maxChars = DOMUtil.getAttr(attrs, MAX_CHARS);\n\n      int maxCharsInt = CopyField.UNLIMITED;\n      if (maxChars != null) {\n        try {\n          maxCharsInt = Integer.parseInt(maxChars);\n        } catch (NumberFormatException e) {\n          log.warn(\"Couldn't parse \" + MAX_CHARS + \" attribute for \" + COPY_FIELD + \" from \"\n                  + source + \" to \" + dest + \" as integer. The whole field will be copied.\");\n        }\n      }\n\n      if (dest.equals(uniqueKeyFieldName)) {\n        String msg = UNIQUE_KEY + \" field (\"+uniqueKeyFieldName+\n          \") can not be the \" + DESTINATION + \" of a \" + COPY_FIELD + \"(\" + SOURCE + \"=\" +source+\")\";\n        log.error(msg);\n        throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n      }\n      \n      registerCopyField(source, dest, maxCharsInt);\n    }\n      \n    for (Map.Entry<SchemaField, Integer> entry : copyFieldTargetCounts.entrySet()) {\n      if (entry.getValue() > 1 && !entry.getKey().multiValued())  {\n        log.warn(\"Field \" + entry.getKey().name + \" is not multivalued \"+\n            \"and destination for multiple \" + COPY_FIELDS + \" (\"+\n            entry.getValue()+\")\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#loadCopyFields(Document,XPath).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchema#loadCopyFields(Document,XPath).mjava","sourceNew":"  /**\n   * Loads the copy fields\n   */\n  protected synchronized void loadCopyFields(Document document, XPath xpath) throws XPathExpressionException {\n    String expression = \"//\" + COPY_FIELD;\n    NodeList nodes = (NodeList)xpath.evaluate(expression, document, XPathConstants.NODESET);\n\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      NamedNodeMap attrs = node.getAttributes();\n\n      String source = DOMUtil.getAttr(attrs, SOURCE, COPY_FIELD + \" definition\");\n      String dest   = DOMUtil.getAttr(attrs, DESTINATION,  COPY_FIELD + \" definition\");\n      String maxChars = DOMUtil.getAttr(attrs, MAX_CHARS);\n\n      int maxCharsInt = CopyField.UNLIMITED;\n      if (maxChars != null) {\n        try {\n          maxCharsInt = Integer.parseInt(maxChars);\n        } catch (NumberFormatException e) {\n          log.warn(\"Couldn't parse {} attribute for '{}' from '{}' to '{}' as integer. The whole field will be copied.\"\n              , MAX_CHARS, COPY_FIELD, source, dest);\n        }\n      }\n\n      if (dest.equals(uniqueKeyFieldName)) {\n        String msg = UNIQUE_KEY + \" field (\"+uniqueKeyFieldName+\n          \") can not be the \" + DESTINATION + \" of a \" + COPY_FIELD + \"(\" + SOURCE + \"=\" +source+\")\";\n        log.error(msg);\n        throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n      }\n      \n      registerCopyField(source, dest, maxCharsInt);\n    }\n      \n    for (Map.Entry<SchemaField, Integer> entry : copyFieldTargetCounts.entrySet()) {\n      if (entry.getValue() > 1 && !entry.getKey().multiValued())  {\n        log.warn(\"Field {} is not multivalued and destination for multiople {} ({})\"\n            , entry.getKey().name, COPY_FIELDS, entry.getValue());\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Loads the copy fields\n   */\n  protected synchronized void loadCopyFields(Document document, XPath xpath) throws XPathExpressionException {\n    String expression = \"//\" + COPY_FIELD;\n    NodeList nodes = (NodeList)xpath.evaluate(expression, document, XPathConstants.NODESET);\n\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      NamedNodeMap attrs = node.getAttributes();\n\n      String source = DOMUtil.getAttr(attrs, SOURCE, COPY_FIELD + \" definition\");\n      String dest   = DOMUtil.getAttr(attrs, DESTINATION,  COPY_FIELD + \" definition\");\n      String maxChars = DOMUtil.getAttr(attrs, MAX_CHARS);\n\n      int maxCharsInt = CopyField.UNLIMITED;\n      if (maxChars != null) {\n        try {\n          maxCharsInt = Integer.parseInt(maxChars);\n        } catch (NumberFormatException e) {\n          log.warn(\"Couldn't parse {} attribute for '{}' from '{}' to '{}' as integer. The whole field will be copied.\"\n              , MAX_CHARS, COPY_FIELD, source, dest);\n        }\n      }\n\n      if (dest.equals(uniqueKeyFieldName)) {\n        String msg = UNIQUE_KEY + \" field (\"+uniqueKeyFieldName+\n          \") can not be the \" + DESTINATION + \" of a \" + COPY_FIELD + \"(\" + SOURCE + \"=\" +source+\")\";\n        log.error(msg);\n        throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n      }\n      \n      registerCopyField(source, dest, maxCharsInt);\n    }\n      \n    for (Map.Entry<SchemaField, Integer> entry : copyFieldTargetCounts.entrySet()) {\n      if (entry.getValue() > 1 && !entry.getKey().multiValued())  {\n        if (log.isWarnEnabled()) {\n          log.warn(\"Field {} is not multivalued and destination for multiople {} ({})\"\n              , entry.getKey().name, COPY_FIELDS, entry.getValue());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2ed9b72e5fa27a7bd4857f222ca815341979d4a","date":1594879524,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#loadCopyFields(Document,XPath).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchema#loadCopyFields(Document,XPath).mjava","sourceNew":"  /**\n   * Loads the copy fields\n   */\n  protected synchronized void loadCopyFields(Document document, XPath xpath) throws XPathExpressionException {\n    String expression = \"//\" + COPY_FIELD;\n    NodeList nodes = (NodeList)xpath.evaluate(expression, document, XPathConstants.NODESET);\n\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      NamedNodeMap attrs = node.getAttributes();\n\n      String source = DOMUtil.getAttr(attrs, SOURCE, COPY_FIELD + \" definition\");\n      String dest   = DOMUtil.getAttr(attrs, DESTINATION,  COPY_FIELD + \" definition\");\n      String maxChars = DOMUtil.getAttr(attrs, MAX_CHARS);\n\n      int maxCharsInt = CopyField.UNLIMITED;\n      if (maxChars != null) {\n        try {\n          maxCharsInt = Integer.parseInt(maxChars);\n        } catch (NumberFormatException e) {\n          log.warn(\"Couldn't parse {} attribute for '{}' from '{}' to '{}' as integer. The whole field will be copied.\"\n              , MAX_CHARS, COPY_FIELD, source, dest);\n        }\n      }\n\n      if (dest.equals(uniqueKeyFieldName)) {\n        String msg = UNIQUE_KEY + \" field (\"+uniqueKeyFieldName+\n          \") can not be the \" + DESTINATION + \" of a \" + COPY_FIELD + \"(\" + SOURCE + \"=\" +source+\")\";\n        log.error(msg);\n        throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n      }\n\n      registerCopyField(source, dest, maxCharsInt);\n    }\n\n    for (Map.Entry<SchemaField, Integer> entry : copyFieldTargetCounts.entrySet()) {\n      if (entry.getValue() > 1 && !entry.getKey().multiValued())  {\n        log.warn(\"Field {} is not multivalued and destination for multiople {} ({})\"\n            , entry.getKey().name, COPY_FIELDS, entry.getValue());\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Loads the copy fields\n   */\n  protected synchronized void loadCopyFields(Document document, XPath xpath) throws XPathExpressionException {\n    String expression = \"//\" + COPY_FIELD;\n    NodeList nodes = (NodeList)xpath.evaluate(expression, document, XPathConstants.NODESET);\n\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      NamedNodeMap attrs = node.getAttributes();\n\n      String source = DOMUtil.getAttr(attrs, SOURCE, COPY_FIELD + \" definition\");\n      String dest   = DOMUtil.getAttr(attrs, DESTINATION,  COPY_FIELD + \" definition\");\n      String maxChars = DOMUtil.getAttr(attrs, MAX_CHARS);\n\n      int maxCharsInt = CopyField.UNLIMITED;\n      if (maxChars != null) {\n        try {\n          maxCharsInt = Integer.parseInt(maxChars);\n        } catch (NumberFormatException e) {\n          log.warn(\"Couldn't parse {} attribute for '{}' from '{}' to '{}' as integer. The whole field will be copied.\"\n              , MAX_CHARS, COPY_FIELD, source, dest);\n        }\n      }\n\n      if (dest.equals(uniqueKeyFieldName)) {\n        String msg = UNIQUE_KEY + \" field (\"+uniqueKeyFieldName+\n          \") can not be the \" + DESTINATION + \" of a \" + COPY_FIELD + \"(\" + SOURCE + \"=\" +source+\")\";\n        log.error(msg);\n        throw new SolrException(ErrorCode.SERVER_ERROR, msg);\n      }\n      \n      registerCopyField(source, dest, maxCharsInt);\n    }\n      \n    for (Map.Entry<SchemaField, Integer> entry : copyFieldTargetCounts.entrySet()) {\n      if (entry.getValue() > 1 && !entry.getKey().multiValued())  {\n        log.warn(\"Field {} is not multivalued and destination for multiople {} ({})\"\n            , entry.getKey().name, COPY_FIELDS, entry.getValue());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b2ed9b72e5fa27a7bd4857f222ca815341979d4a":["575e66bd4b2349209027f6801184da7fc3cba13f"],"24b51843dd98041bc40be26a47e44d7cb49bef72":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","24b51843dd98041bc40be26a47e44d7cb49bef72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"575e66bd4b2349209027f6801184da7fc3cba13f":["9df8125ba9193a2e2e285ed92157810b1952a244"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b2ed9b72e5fa27a7bd4857f222ca815341979d4a"],"9df8125ba9193a2e2e285ed92157810b1952a244":["24b51843dd98041bc40be26a47e44d7cb49bef72"]},"commit2Childs":{"b2ed9b72e5fa27a7bd4857f222ca815341979d4a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"24b51843dd98041bc40be26a47e44d7cb49bef72":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","9df8125ba9193a2e2e285ed92157810b1952a244"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["24b51843dd98041bc40be26a47e44d7cb49bef72","e57c73924f3b8c19defa62e96bfa34a4922d49c2"],"575e66bd4b2349209027f6801184da7fc3cba13f":["b2ed9b72e5fa27a7bd4857f222ca815341979d4a"],"9df8125ba9193a2e2e285ed92157810b1952a244":["575e66bd4b2349209027f6801184da7fc3cba13f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e57c73924f3b8c19defa62e96bfa34a4922d49c2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}