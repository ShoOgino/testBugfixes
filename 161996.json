{"path":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#addRoutingRule(ClusterState,ZkNodeProps).mjava","commits":[{"id":"24a5da2a0d397ff29f3de8f6cf451d3412c2509a","date":1417276391,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#addRoutingRule(ClusterState,ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"  public ZkWriteCommand addRoutingRule(final ClusterState clusterState, ZkNodeProps message) {\n    String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shard = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String routeKey = message.getStr(\"routeKey\");\n    String range = message.getStr(\"range\");\n    String targetCollection = message.getStr(\"targetCollection\");\n    String targetShard = message.getStr(\"targetShard\");\n    String expireAt = message.getStr(\"expireAt\");\n\n    Slice slice = clusterState.getSlice(collection, shard);\n    if (slice == null) {\n      throw new RuntimeException(\"Overseer.addRoutingRule unknown collection: \" + collection + \" slice:\" + shard);\n    }\n\n    Map<String, RoutingRule> routingRules = slice.getRoutingRules();\n    if (routingRules == null)\n      routingRules = new HashMap<>();\n    RoutingRule r = routingRules.get(routeKey);\n    if (r == null) {\n      Map<String, Object> map = new HashMap<>();\n      map.put(\"routeRanges\", range);\n      map.put(\"targetCollection\", targetCollection);\n      map.put(\"expireAt\", expireAt);\n      RoutingRule rule = new RoutingRule(routeKey, map);\n      routingRules.put(routeKey, rule);\n    } else {\n      // add this range\n      Map<String, Object> map = r.shallowCopy();\n      map.put(\"routeRanges\", map.get(\"routeRanges\") + \",\" + range);\n      map.put(\"expireAt\", expireAt);\n      routingRules.put(routeKey, new RoutingRule(routeKey, map));\n    }\n\n    Map<String, Object> props = slice.shallowCopy();\n    props.put(\"routingRules\", routingRules);\n\n    Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n    return new ZkWriteCommand(collection,\n        CollectionMutator.updateSlice(collection, clusterState.getCollection(collection), newSlice));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04c8df3f10a676c3de5dbf390f17a2de2d45cacd","date":1461615626,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#addRoutingRule(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#addRoutingRule(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand addRoutingRule(final ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shard = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String routeKey = message.getStr(\"routeKey\");\n    String range = message.getStr(\"range\");\n    String targetCollection = message.getStr(\"targetCollection\");\n    String targetShard = message.getStr(\"targetShard\");\n    String expireAt = message.getStr(\"expireAt\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(shard);\n    if (slice == null) {\n      throw new RuntimeException(\"Overseer.addRoutingRule unknown collection: \" + collectionName + \" slice:\" + shard);\n    }\n\n    Map<String, RoutingRule> routingRules = slice.getRoutingRules();\n    if (routingRules == null)\n      routingRules = new HashMap<>();\n    RoutingRule r = routingRules.get(routeKey);\n    if (r == null) {\n      Map<String, Object> map = new HashMap<>();\n      map.put(\"routeRanges\", range);\n      map.put(\"targetCollection\", targetCollection);\n      map.put(\"expireAt\", expireAt);\n      RoutingRule rule = new RoutingRule(routeKey, map);\n      routingRules.put(routeKey, rule);\n    } else {\n      // add this range\n      Map<String, Object> map = r.shallowCopy();\n      map.put(\"routeRanges\", map.get(\"routeRanges\") + \",\" + range);\n      map.put(\"expireAt\", expireAt);\n      routingRules.put(routeKey, new RoutingRule(routeKey, map));\n    }\n\n    Map<String, Object> props = slice.shallowCopy();\n    props.put(\"routingRules\", routingRules);\n\n    Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n    return new ZkWriteCommand(collectionName,\n        CollectionMutator.updateSlice(collectionName, collection, newSlice));\n  }\n\n","sourceOld":"  public ZkWriteCommand addRoutingRule(final ClusterState clusterState, ZkNodeProps message) {\n    String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shard = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String routeKey = message.getStr(\"routeKey\");\n    String range = message.getStr(\"range\");\n    String targetCollection = message.getStr(\"targetCollection\");\n    String targetShard = message.getStr(\"targetShard\");\n    String expireAt = message.getStr(\"expireAt\");\n\n    Slice slice = clusterState.getSlice(collection, shard);\n    if (slice == null) {\n      throw new RuntimeException(\"Overseer.addRoutingRule unknown collection: \" + collection + \" slice:\" + shard);\n    }\n\n    Map<String, RoutingRule> routingRules = slice.getRoutingRules();\n    if (routingRules == null)\n      routingRules = new HashMap<>();\n    RoutingRule r = routingRules.get(routeKey);\n    if (r == null) {\n      Map<String, Object> map = new HashMap<>();\n      map.put(\"routeRanges\", range);\n      map.put(\"targetCollection\", targetCollection);\n      map.put(\"expireAt\", expireAt);\n      RoutingRule rule = new RoutingRule(routeKey, map);\n      routingRules.put(routeKey, rule);\n    } else {\n      // add this range\n      Map<String, Object> map = r.shallowCopy();\n      map.put(\"routeRanges\", map.get(\"routeRanges\") + \",\" + range);\n      map.put(\"expireAt\", expireAt);\n      routingRules.put(routeKey, new RoutingRule(routeKey, map));\n    }\n\n    Map<String, Object> props = slice.shallowCopy();\n    props.put(\"routingRules\", routingRules);\n\n    Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n    return new ZkWriteCommand(collection,\n        CollectionMutator.updateSlice(collection, clusterState.getCollection(collection), newSlice));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#addRoutingRule(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#addRoutingRule(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand addRoutingRule(final ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shard = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String routeKey = message.getStr(\"routeKey\");\n    String range = message.getStr(\"range\");\n    String targetCollection = message.getStr(\"targetCollection\");\n    String targetShard = message.getStr(\"targetShard\");\n    String expireAt = message.getStr(\"expireAt\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(shard);\n    if (slice == null) {\n      throw new RuntimeException(\"Overseer.addRoutingRule unknown collection: \" + collectionName + \" slice:\" + shard);\n    }\n\n    Map<String, RoutingRule> routingRules = slice.getRoutingRules();\n    if (routingRules == null)\n      routingRules = new HashMap<>();\n    RoutingRule r = routingRules.get(routeKey);\n    if (r == null) {\n      Map<String, Object> map = new HashMap<>();\n      map.put(\"routeRanges\", range);\n      map.put(\"targetCollection\", targetCollection);\n      map.put(\"expireAt\", expireAt);\n      RoutingRule rule = new RoutingRule(routeKey, map);\n      routingRules.put(routeKey, rule);\n    } else {\n      // add this range\n      Map<String, Object> map = r.shallowCopy();\n      map.put(\"routeRanges\", map.get(\"routeRanges\") + \",\" + range);\n      map.put(\"expireAt\", expireAt);\n      routingRules.put(routeKey, new RoutingRule(routeKey, map));\n    }\n\n    Map<String, Object> props = slice.shallowCopy();\n    props.put(\"routingRules\", routingRules);\n\n    Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n    return new ZkWriteCommand(collectionName,\n        CollectionMutator.updateSlice(collectionName, collection, newSlice));\n  }\n\n","sourceOld":"  public ZkWriteCommand addRoutingRule(final ClusterState clusterState, ZkNodeProps message) {\n    String collection = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shard = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String routeKey = message.getStr(\"routeKey\");\n    String range = message.getStr(\"range\");\n    String targetCollection = message.getStr(\"targetCollection\");\n    String targetShard = message.getStr(\"targetShard\");\n    String expireAt = message.getStr(\"expireAt\");\n\n    Slice slice = clusterState.getSlice(collection, shard);\n    if (slice == null) {\n      throw new RuntimeException(\"Overseer.addRoutingRule unknown collection: \" + collection + \" slice:\" + shard);\n    }\n\n    Map<String, RoutingRule> routingRules = slice.getRoutingRules();\n    if (routingRules == null)\n      routingRules = new HashMap<>();\n    RoutingRule r = routingRules.get(routeKey);\n    if (r == null) {\n      Map<String, Object> map = new HashMap<>();\n      map.put(\"routeRanges\", range);\n      map.put(\"targetCollection\", targetCollection);\n      map.put(\"expireAt\", expireAt);\n      RoutingRule rule = new RoutingRule(routeKey, map);\n      routingRules.put(routeKey, rule);\n    } else {\n      // add this range\n      Map<String, Object> map = r.shallowCopy();\n      map.put(\"routeRanges\", map.get(\"routeRanges\") + \",\" + range);\n      map.put(\"expireAt\", expireAt);\n      routingRules.put(routeKey, new RoutingRule(routeKey, map));\n    }\n\n    Map<String, Object> props = slice.shallowCopy();\n    props.put(\"routingRules\", routingRules);\n\n    Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n    return new ZkWriteCommand(collection,\n        CollectionMutator.updateSlice(collection, clusterState.getCollection(collection), newSlice));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4aa218f041fb7159a3dcf4736f46245d60d9f581","date":1474975102,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#addRoutingRule(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#addRoutingRule(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand addRoutingRule(final ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shard = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String routeKey = message.getStr(\"routeKey\");\n    String range = message.getStr(\"range\");\n    String targetCollection = message.getStr(\"targetCollection\");\n    String expireAt = message.getStr(\"expireAt\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(shard);\n    if (slice == null) {\n      throw new RuntimeException(\"Overseer.addRoutingRule unknown collection: \" + collectionName + \" slice:\" + shard);\n    }\n\n    Map<String, RoutingRule> routingRules = slice.getRoutingRules();\n    if (routingRules == null)\n      routingRules = new HashMap<>();\n    RoutingRule r = routingRules.get(routeKey);\n    if (r == null) {\n      Map<String, Object> map = new HashMap<>();\n      map.put(\"routeRanges\", range);\n      map.put(\"targetCollection\", targetCollection);\n      map.put(\"expireAt\", expireAt);\n      RoutingRule rule = new RoutingRule(routeKey, map);\n      routingRules.put(routeKey, rule);\n    } else {\n      // add this range\n      Map<String, Object> map = r.shallowCopy();\n      map.put(\"routeRanges\", map.get(\"routeRanges\") + \",\" + range);\n      map.put(\"expireAt\", expireAt);\n      routingRules.put(routeKey, new RoutingRule(routeKey, map));\n    }\n\n    Map<String, Object> props = slice.shallowCopy();\n    props.put(\"routingRules\", routingRules);\n\n    Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n    return new ZkWriteCommand(collectionName,\n        CollectionMutator.updateSlice(collectionName, collection, newSlice));\n  }\n\n","sourceOld":"  public ZkWriteCommand addRoutingRule(final ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shard = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String routeKey = message.getStr(\"routeKey\");\n    String range = message.getStr(\"range\");\n    String targetCollection = message.getStr(\"targetCollection\");\n    String targetShard = message.getStr(\"targetShard\");\n    String expireAt = message.getStr(\"expireAt\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(shard);\n    if (slice == null) {\n      throw new RuntimeException(\"Overseer.addRoutingRule unknown collection: \" + collectionName + \" slice:\" + shard);\n    }\n\n    Map<String, RoutingRule> routingRules = slice.getRoutingRules();\n    if (routingRules == null)\n      routingRules = new HashMap<>();\n    RoutingRule r = routingRules.get(routeKey);\n    if (r == null) {\n      Map<String, Object> map = new HashMap<>();\n      map.put(\"routeRanges\", range);\n      map.put(\"targetCollection\", targetCollection);\n      map.put(\"expireAt\", expireAt);\n      RoutingRule rule = new RoutingRule(routeKey, map);\n      routingRules.put(routeKey, rule);\n    } else {\n      // add this range\n      Map<String, Object> map = r.shallowCopy();\n      map.put(\"routeRanges\", map.get(\"routeRanges\") + \",\" + range);\n      map.put(\"expireAt\", expireAt);\n      routingRules.put(routeKey, new RoutingRule(routeKey, map));\n    }\n\n    Map<String, Object> props = slice.shallowCopy();\n    props.put(\"routingRules\", routingRules);\n\n    Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n    return new ZkWriteCommand(collectionName,\n        CollectionMutator.updateSlice(collectionName, collection, newSlice));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#addRoutingRule(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#addRoutingRule(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand addRoutingRule(final ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shard = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String routeKey = message.getStr(\"routeKey\");\n    String range = message.getStr(\"range\");\n    String targetCollection = message.getStr(\"targetCollection\");\n    String expireAt = message.getStr(\"expireAt\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(shard);\n    if (slice == null) {\n      throw new RuntimeException(\"Overseer.addRoutingRule unknown collection: \" + collectionName + \" slice:\" + shard);\n    }\n\n    Map<String, RoutingRule> routingRules = slice.getRoutingRules();\n    if (routingRules == null)\n      routingRules = new HashMap<>();\n    RoutingRule r = routingRules.get(routeKey);\n    if (r == null) {\n      Map<String, Object> map = new HashMap<>();\n      map.put(\"routeRanges\", range);\n      map.put(\"targetCollection\", targetCollection);\n      map.put(\"expireAt\", expireAt);\n      RoutingRule rule = new RoutingRule(routeKey, map);\n      routingRules.put(routeKey, rule);\n    } else {\n      // add this range\n      Map<String, Object> map = r.shallowCopy();\n      map.put(\"routeRanges\", map.get(\"routeRanges\") + \",\" + range);\n      map.put(\"expireAt\", expireAt);\n      routingRules.put(routeKey, new RoutingRule(routeKey, map));\n    }\n\n    Map<String, Object> props = slice.shallowCopy();\n    props.put(\"routingRules\", routingRules);\n\n    Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n    return new ZkWriteCommand(collectionName,\n        CollectionMutator.updateSlice(collectionName, collection, newSlice));\n  }\n\n","sourceOld":"  public ZkWriteCommand addRoutingRule(final ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shard = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String routeKey = message.getStr(\"routeKey\");\n    String range = message.getStr(\"range\");\n    String targetCollection = message.getStr(\"targetCollection\");\n    String targetShard = message.getStr(\"targetShard\");\n    String expireAt = message.getStr(\"expireAt\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(shard);\n    if (slice == null) {\n      throw new RuntimeException(\"Overseer.addRoutingRule unknown collection: \" + collectionName + \" slice:\" + shard);\n    }\n\n    Map<String, RoutingRule> routingRules = slice.getRoutingRules();\n    if (routingRules == null)\n      routingRules = new HashMap<>();\n    RoutingRule r = routingRules.get(routeKey);\n    if (r == null) {\n      Map<String, Object> map = new HashMap<>();\n      map.put(\"routeRanges\", range);\n      map.put(\"targetCollection\", targetCollection);\n      map.put(\"expireAt\", expireAt);\n      RoutingRule rule = new RoutingRule(routeKey, map);\n      routingRules.put(routeKey, rule);\n    } else {\n      // add this range\n      Map<String, Object> map = r.shallowCopy();\n      map.put(\"routeRanges\", map.get(\"routeRanges\") + \",\" + range);\n      map.put(\"expireAt\", expireAt);\n      routingRules.put(routeKey, new RoutingRule(routeKey, map));\n    }\n\n    Map<String, Object> props = slice.shallowCopy();\n    props.put(\"routingRules\", routingRules);\n\n    Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n    return new ZkWriteCommand(collectionName,\n        CollectionMutator.updateSlice(collectionName, collection, newSlice));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#addRoutingRule(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#addRoutingRule(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand addRoutingRule(final ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shard = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String routeKey = message.getStr(\"routeKey\");\n    String range = message.getStr(\"range\");\n    String targetCollection = message.getStr(\"targetCollection\");\n    String expireAt = message.getStr(\"expireAt\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(shard);\n    if (slice == null) {\n      throw new RuntimeException(\"Overseer.addRoutingRule unknown collection: \" + collectionName + \" slice:\" + shard);\n    }\n\n    Map<String, RoutingRule> routingRules = slice.getRoutingRules();\n    if (routingRules == null)\n      routingRules = new HashMap<>();\n    RoutingRule r = routingRules.get(routeKey);\n    if (r == null) {\n      Map<String, Object> map = new HashMap<>();\n      map.put(\"routeRanges\", range);\n      map.put(\"targetCollection\", targetCollection);\n      map.put(\"expireAt\", expireAt);\n      RoutingRule rule = new RoutingRule(routeKey, map);\n      routingRules.put(routeKey, rule);\n    } else {\n      // add this range\n      Map<String, Object> map = r.shallowCopy();\n      map.put(\"routeRanges\", map.get(\"routeRanges\") + \",\" + range);\n      map.put(\"expireAt\", expireAt);\n      routingRules.put(routeKey, new RoutingRule(routeKey, map));\n    }\n\n    Map<String, Object> props = slice.shallowCopy();\n    props.put(\"routingRules\", routingRules);\n\n    Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n    return new ZkWriteCommand(collectionName,\n        CollectionMutator.updateSlice(collectionName, collection, newSlice));\n  }\n\n","sourceOld":"  public ZkWriteCommand addRoutingRule(final ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shard = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String routeKey = message.getStr(\"routeKey\");\n    String range = message.getStr(\"range\");\n    String targetCollection = message.getStr(\"targetCollection\");\n    String targetShard = message.getStr(\"targetShard\");\n    String expireAt = message.getStr(\"expireAt\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(shard);\n    if (slice == null) {\n      throw new RuntimeException(\"Overseer.addRoutingRule unknown collection: \" + collectionName + \" slice:\" + shard);\n    }\n\n    Map<String, RoutingRule> routingRules = slice.getRoutingRules();\n    if (routingRules == null)\n      routingRules = new HashMap<>();\n    RoutingRule r = routingRules.get(routeKey);\n    if (r == null) {\n      Map<String, Object> map = new HashMap<>();\n      map.put(\"routeRanges\", range);\n      map.put(\"targetCollection\", targetCollection);\n      map.put(\"expireAt\", expireAt);\n      RoutingRule rule = new RoutingRule(routeKey, map);\n      routingRules.put(routeKey, rule);\n    } else {\n      // add this range\n      Map<String, Object> map = r.shallowCopy();\n      map.put(\"routeRanges\", map.get(\"routeRanges\") + \",\" + range);\n      map.put(\"expireAt\", expireAt);\n      routingRules.put(routeKey, new RoutingRule(routeKey, map));\n    }\n\n    Map<String, Object> props = slice.shallowCopy();\n    props.put(\"routingRules\", routingRules);\n\n    Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n    return new ZkWriteCommand(collectionName,\n        CollectionMutator.updateSlice(collectionName, collection, newSlice));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6681d02f2302c363be938426e68f8dfd090cc1bf","date":1575339019,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#addRoutingRule(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#addRoutingRule(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand addRoutingRule(final ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shard = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String routeKey = message.getStr(\"routeKey\");\n    String range = message.getStr(\"range\");\n    String targetCollection = message.getStr(\"targetCollection\");\n    String expireAt = message.getStr(\"expireAt\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(shard);\n    if (slice == null) {\n      throw new RuntimeException(\"Overseer.addRoutingRule unknown collection: \" + collectionName + \" slice:\" + shard);\n    }\n\n    Map<String, RoutingRule> routingRules = slice.getRoutingRules();\n    if (routingRules == null)\n      routingRules = new HashMap<>();\n    RoutingRule r = routingRules.get(routeKey);\n    if (r == null) {\n      Map<String, Object> map = new HashMap<>();\n      map.put(\"routeRanges\", range);\n      map.put(\"targetCollection\", targetCollection);\n      map.put(\"expireAt\", expireAt);\n      RoutingRule rule = new RoutingRule(routeKey, map);\n      routingRules.put(routeKey, rule);\n    } else {\n      // add this range\n      Map<String, Object> map = r.shallowCopy();\n      map.put(\"routeRanges\", map.get(\"routeRanges\") + \",\" + range);\n      map.put(\"expireAt\", expireAt);\n      routingRules.put(routeKey, new RoutingRule(routeKey, map));\n    }\n\n    Map<String, Object> props = slice.shallowCopy();\n    props.put(\"routingRules\", routingRules);\n\n    Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props,collectionName);\n    return new ZkWriteCommand(collectionName,\n        CollectionMutator.updateSlice(collectionName, collection, newSlice));\n  }\n\n","sourceOld":"  public ZkWriteCommand addRoutingRule(final ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shard = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String routeKey = message.getStr(\"routeKey\");\n    String range = message.getStr(\"range\");\n    String targetCollection = message.getStr(\"targetCollection\");\n    String expireAt = message.getStr(\"expireAt\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(shard);\n    if (slice == null) {\n      throw new RuntimeException(\"Overseer.addRoutingRule unknown collection: \" + collectionName + \" slice:\" + shard);\n    }\n\n    Map<String, RoutingRule> routingRules = slice.getRoutingRules();\n    if (routingRules == null)\n      routingRules = new HashMap<>();\n    RoutingRule r = routingRules.get(routeKey);\n    if (r == null) {\n      Map<String, Object> map = new HashMap<>();\n      map.put(\"routeRanges\", range);\n      map.put(\"targetCollection\", targetCollection);\n      map.put(\"expireAt\", expireAt);\n      RoutingRule rule = new RoutingRule(routeKey, map);\n      routingRules.put(routeKey, rule);\n    } else {\n      // add this range\n      Map<String, Object> map = r.shallowCopy();\n      map.put(\"routeRanges\", map.get(\"routeRanges\") + \",\" + range);\n      map.put(\"expireAt\", expireAt);\n      routingRules.put(routeKey, new RoutingRule(routeKey, map));\n    }\n\n    Map<String, Object> props = slice.shallowCopy();\n    props.put(\"routingRules\", routingRules);\n\n    Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n    return new ZkWriteCommand(collectionName,\n        CollectionMutator.updateSlice(collectionName, collection, newSlice));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3aa683bba99315838c968fefedf3d74f44aa993","date":1575395112,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#addRoutingRule(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/SliceMutator#addRoutingRule(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand addRoutingRule(final ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shard = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String routeKey = message.getStr(\"routeKey\");\n    String range = message.getStr(\"range\");\n    String targetCollection = message.getStr(\"targetCollection\");\n    String expireAt = message.getStr(\"expireAt\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(shard);\n    if (slice == null) {\n      throw new RuntimeException(\"Overseer.addRoutingRule unknown collection: \" + collectionName + \" slice:\" + shard);\n    }\n\n    Map<String, RoutingRule> routingRules = slice.getRoutingRules();\n    if (routingRules == null)\n      routingRules = new HashMap<>();\n    RoutingRule r = routingRules.get(routeKey);\n    if (r == null) {\n      Map<String, Object> map = new HashMap<>();\n      map.put(\"routeRanges\", range);\n      map.put(\"targetCollection\", targetCollection);\n      map.put(\"expireAt\", expireAt);\n      RoutingRule rule = new RoutingRule(routeKey, map);\n      routingRules.put(routeKey, rule);\n    } else {\n      // add this range\n      Map<String, Object> map = r.shallowCopy();\n      map.put(\"routeRanges\", map.get(\"routeRanges\") + \",\" + range);\n      map.put(\"expireAt\", expireAt);\n      routingRules.put(routeKey, new RoutingRule(routeKey, map));\n    }\n\n    Map<String, Object> props = slice.shallowCopy();\n    props.put(\"routingRules\", routingRules);\n\n    Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props,collectionName);\n    return new ZkWriteCommand(collectionName,\n        CollectionMutator.updateSlice(collectionName, collection, newSlice));\n  }\n\n","sourceOld":"  public ZkWriteCommand addRoutingRule(final ClusterState clusterState, ZkNodeProps message) {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    String shard = message.getStr(ZkStateReader.SHARD_ID_PROP);\n    String routeKey = message.getStr(\"routeKey\");\n    String range = message.getStr(\"range\");\n    String targetCollection = message.getStr(\"targetCollection\");\n    String expireAt = message.getStr(\"expireAt\");\n\n    DocCollection collection = clusterState.getCollection(collectionName);\n    Slice slice = collection.getSlice(shard);\n    if (slice == null) {\n      throw new RuntimeException(\"Overseer.addRoutingRule unknown collection: \" + collectionName + \" slice:\" + shard);\n    }\n\n    Map<String, RoutingRule> routingRules = slice.getRoutingRules();\n    if (routingRules == null)\n      routingRules = new HashMap<>();\n    RoutingRule r = routingRules.get(routeKey);\n    if (r == null) {\n      Map<String, Object> map = new HashMap<>();\n      map.put(\"routeRanges\", range);\n      map.put(\"targetCollection\", targetCollection);\n      map.put(\"expireAt\", expireAt);\n      RoutingRule rule = new RoutingRule(routeKey, map);\n      routingRules.put(routeKey, rule);\n    } else {\n      // add this range\n      Map<String, Object> map = r.shallowCopy();\n      map.put(\"routeRanges\", map.get(\"routeRanges\") + \",\" + range);\n      map.put(\"expireAt\", expireAt);\n      routingRules.put(routeKey, new RoutingRule(routeKey, map));\n    }\n\n    Map<String, Object> props = slice.shallowCopy();\n    props.put(\"routingRules\", routingRules);\n\n    Slice newSlice = new Slice(slice.getName(), slice.getReplicasCopy(), props);\n    return new ZkWriteCommand(collectionName,\n        CollectionMutator.updateSlice(collectionName, collection, newSlice));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4aa218f041fb7159a3dcf4736f46245d60d9f581":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"d3aa683bba99315838c968fefedf3d74f44aa993":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6681d02f2302c363be938426e68f8dfd090cc1bf"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a","04c8df3f10a676c3de5dbf390f17a2de2d45cacd"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","4aa218f041fb7159a3dcf4736f46245d60d9f581"],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6681d02f2302c363be938426e68f8dfd090cc1bf"],"6681d02f2302c363be938426e68f8dfd090cc1bf":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"4aa218f041fb7159a3dcf4736f46245d60d9f581":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d3aa683bba99315838c968fefedf3d74f44aa993":[],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","04c8df3f10a676c3de5dbf390f17a2de2d45cacd"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["4aa218f041fb7159a3dcf4736f46245d60d9f581","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d3aa683bba99315838c968fefedf3d74f44aa993","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","6681d02f2302c363be938426e68f8dfd090cc1bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"6681d02f2302c363be938426e68f8dfd090cc1bf":["d3aa683bba99315838c968fefedf3d74f44aa993","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3aa683bba99315838c968fefedf3d74f44aa993","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}