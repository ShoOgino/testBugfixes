{"path":"solr/src/test/org/apache/solr/schema/PolyFieldTest#testCartesian().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/schema/PolyFieldTest#testCartesian().mjava","pathOld":"/dev/null","sourceNew":"  public void testCartesian() throws Exception {\n    for (int i = 40; i < 50; i++) {\n      for (int j = -85; j < -79; j++) {\n        assertU(adoc(\"id\", \"\" + i, \"home_tier\",\n                i + \",\" + j));\n      }\n    }\n    assertU(commit());\n    CartesianPolyFilterBuilder cpfb = new CartesianPolyFilterBuilder(\"\");\n    //Get the box based on this point and our distance\n    final Shape shape = cpfb.getBoxShape(45, -80, 10);//There's a bit of a bug in here that requires a small tier filter here.\n    final List<Double> boxIds = shape.getArea();\n    //do a box id search\n    StringBuilder qry = new StringBuilder();\n    boolean first = true;\n    for (Double boxId : boxIds) {\n      if (first == true){\n        first = false;\n      } else {\n        qry.append(\" OR \");\n      }\n      qry.append(\"home_tier:\");\n      if (boxId < 0) {\n        qry.append('\\\\').append(boxId);\n      } else {\n        qry.append(boxId);\n      }\n    }\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", qry.toString()),\n            \"//*[@numFound='1']\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/schema/PolyFieldTest#testCartesian().mjava","sourceNew":null,"sourceOld":"  public void testCartesian() throws Exception {\n    for (int i = 40; i < 50; i++) {\n      for (int j = -85; j < -79; j++) {\n        assertU(adoc(\"id\", \"\" + i, \"home_tier\",\n                i + \",\" + j));\n      }\n    }\n    assertU(commit());\n    CartesianPolyFilterBuilder cpfb = new CartesianPolyFilterBuilder(\"\");\n    //Get the box based on this point and our distance\n    final Shape shape = cpfb.getBoxShape(45, -80, 10);//There's a bit of a bug in here that requires a small tier filter here.\n    final List<Double> boxIds = shape.getArea();\n    //do a box id search\n    StringBuilder qry = new StringBuilder();\n    boolean first = true;\n    for (Double boxId : boxIds) {\n      if (first == true){\n        first = false;\n      } else {\n        qry.append(\" OR \");\n      }\n      qry.append(\"home_tier:\");\n      if (boxId < 0) {\n        qry.append('\\\\').append(boxId);\n      } else {\n        qry.append(boxId);\n      }\n    }\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", qry.toString()),\n            \"//*[@numFound='1']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/schema/PolyFieldTest#testCartesian().mjava","pathOld":"src/test/org/apache/solr/schema/PolyFieldTest#testCartesian().mjava","sourceNew":"  public void testCartesian() throws Exception {\n    for (int i = 40; i < 50; i++) {\n      for (int j = -85; j < -79; j++) {\n        assertU(adoc(\"id\", \"\" + i, \"home_tier\",\n                i + \",\" + j));\n      }\n    }\n    assertU(commit());\n    CartesianPolyFilterBuilder cpfb = new CartesianPolyFilterBuilder(\"\");\n    //Get the box based on this point and our distance\n    final Shape shape = cpfb.getBoxShape(45, -80, 10);//There's a bit of a bug in here that requires a small tier filter here.\n    final List<Double> boxIds = shape.getArea();\n    //do a box id search\n    StringBuilder qry = new StringBuilder();\n    boolean first = true;\n    for (Double boxId : boxIds) {\n      if (first == true){\n        first = false;\n      } else {\n        qry.append(\" OR \");\n      }\n      qry.append(\"home_tier:\");\n      if (boxId < 0) {\n        qry.append('\\\\').append(boxId);\n      } else {\n        qry.append(boxId);\n      }\n    }\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", qry.toString()),\n            \"//*[@numFound='1']\");\n\n  }\n\n","sourceOld":"  public void testCartesian() throws Exception {\n    for (int i = 40; i < 50; i++) {\n      for (int j = -85; j < -79; j++) {\n        assertU(adoc(\"id\", \"\" + i, \"home_tier\",\n                i + \",\" + j));\n      }\n    }\n    assertU(commit());\n    CartesianPolyFilterBuilder cpfb = new CartesianPolyFilterBuilder(\"\");\n    //Get the box based on this point and our distance\n    final Shape shape = cpfb.getBoxShape(45, -80, 10);//There's a bit of a bug in here that requires a small tier filter here.\n    final List<Double> boxIds = shape.getArea();\n    //do a box id search\n    StringBuilder qry = new StringBuilder();\n    boolean first = true;\n    for (Double boxId : boxIds) {\n      if (first == true){\n        first = false;\n      } else {\n        qry.append(\" OR \");\n      }\n      qry.append(\"home_tier:\");\n      if (boxId < 0) {\n        qry.append('\\\\').append(boxId);\n      } else {\n        qry.append(boxId);\n      }\n    }\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", qry.toString()),\n            \"//*[@numFound='1']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/schema/PolyFieldTest#testCartesian().mjava","pathOld":"/dev/null","sourceNew":"  public void testCartesian() throws Exception {\n    for (int i = 40; i < 50; i++) {\n      for (int j = -85; j < -79; j++) {\n        assertU(adoc(\"id\", \"\" + i, \"home_tier\",\n                i + \",\" + j));\n      }\n    }\n    assertU(commit());\n    CartesianPolyFilterBuilder cpfb = new CartesianPolyFilterBuilder(\"\");\n    //Get the box based on this point and our distance\n    final Shape shape = cpfb.getBoxShape(45, -80, 10);//There's a bit of a bug in here that requires a small tier filter here.\n    final List<Double> boxIds = shape.getArea();\n    //do a box id search\n    StringBuilder qry = new StringBuilder();\n    boolean first = true;\n    for (Double boxId : boxIds) {\n      if (first == true){\n        first = false;\n      } else {\n        qry.append(\" OR \");\n      }\n      qry.append(\"home_tier:\");\n      if (boxId < 0) {\n        qry.append('\\\\').append(boxId);\n      } else {\n        qry.append(boxId);\n      }\n    }\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", qry.toString()),\n            \"//*[@numFound='1']\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"afeb033b2bd36d8ce9d82142b197da4dde13068b","date":1269115863,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/schema/PolyFieldTest#testCartesian().mjava","pathOld":"solr/src/test/org/apache/solr/schema/PolyFieldTest#testCartesian().mjava","sourceNew":"  @Test\n  public void testCartesian() throws Exception {\n    for (int i = 40; i < 50; i++) {\n      for (int j = -85; j < -79; j++) {\n        assertU(adoc(\"id\", \"\" + i, \"home_tier\",\n                i + \",\" + j));\n      }\n    }\n    assertU(commit());\n    CartesianPolyFilterBuilder cpfb = new CartesianPolyFilterBuilder(\"\");\n    //Get the box based on this point and our distance\n    final Shape shape = cpfb.getBoxShape(45, -80, 10);//There's a bit of a bug in here that requires a small tier filter here.\n    final List<Double> boxIds = shape.getArea();\n    //do a box id search\n    StringBuilder qry = new StringBuilder();\n    boolean first = true;\n    for (Double boxId : boxIds) {\n      if (first == true){\n        first = false;\n      } else {\n        qry.append(\" OR \");\n      }\n      qry.append(\"home_tier:\");\n      if (boxId < 0) {\n        qry.append('\\\\').append(boxId);\n      } else {\n        qry.append(boxId);\n      }\n    }\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", qry.toString()),\n            \"//*[@numFound='1']\");\n    clearIndex();\n  }\n\n","sourceOld":"  public void testCartesian() throws Exception {\n    for (int i = 40; i < 50; i++) {\n      for (int j = -85; j < -79; j++) {\n        assertU(adoc(\"id\", \"\" + i, \"home_tier\",\n                i + \",\" + j));\n      }\n    }\n    assertU(commit());\n    CartesianPolyFilterBuilder cpfb = new CartesianPolyFilterBuilder(\"\");\n    //Get the box based on this point and our distance\n    final Shape shape = cpfb.getBoxShape(45, -80, 10);//There's a bit of a bug in here that requires a small tier filter here.\n    final List<Double> boxIds = shape.getArea();\n    //do a box id search\n    StringBuilder qry = new StringBuilder();\n    boolean first = true;\n    for (Double boxId : boxIds) {\n      if (first == true){\n        first = false;\n      } else {\n        qry.append(\" OR \");\n      }\n      qry.append(\"home_tier:\");\n      if (boxId < 0) {\n        qry.append('\\\\').append(boxId);\n      } else {\n        qry.append(boxId);\n      }\n    }\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", qry.toString()),\n            \"//*[@numFound='1']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ceae7facd632c214a8166fe971c32877733e421","date":1269888993,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/schema/PolyFieldTest#testCartesian().mjava","pathOld":"solr/src/test/org/apache/solr/schema/PolyFieldTest#testCartesian().mjava","sourceNew":"  @Test\n  public void testCartesian() throws Exception {\n    for (int i = 40; i < 50; i++) {\n      for (int j = -85; j < -79; j++) {\n        assertU(adoc(\"id\", \"\" + i, \"home_tier\",\n                i + \",\" + j));\n      }\n    }\n    assertU(commit());\n    CartesianPolyFilterBuilder cpfb = new CartesianPolyFilterBuilder(\"\", 4, 15);\n    //Get the box based on this point and our distance\n    final Shape shape = cpfb.getBoxShape(45, -80, 10);//There's a bit of a bug in here that requires a small tier filter here.\n    final List<Double> boxIds = shape.getArea();\n    //do a box id search\n    StringBuilder qry = new StringBuilder();\n    boolean first = true;\n    for (Double boxId : boxIds) {\n      if (first == true){\n        first = false;\n      } else {\n        qry.append(\" OR \");\n      }\n      qry.append(\"home_tier:\");\n      if (boxId < 0) {\n        qry.append('\\\\').append(boxId);\n      } else {\n        qry.append(boxId);\n      }\n    }\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", qry.toString()),\n            \"//*[@numFound='1']\");\n    clearIndex();\n  }\n\n","sourceOld":"  @Test\n  public void testCartesian() throws Exception {\n    for (int i = 40; i < 50; i++) {\n      for (int j = -85; j < -79; j++) {\n        assertU(adoc(\"id\", \"\" + i, \"home_tier\",\n                i + \",\" + j));\n      }\n    }\n    assertU(commit());\n    CartesianPolyFilterBuilder cpfb = new CartesianPolyFilterBuilder(\"\");\n    //Get the box based on this point and our distance\n    final Shape shape = cpfb.getBoxShape(45, -80, 10);//There's a bit of a bug in here that requires a small tier filter here.\n    final List<Double> boxIds = shape.getArea();\n    //do a box id search\n    StringBuilder qry = new StringBuilder();\n    boolean first = true;\n    for (Double boxId : boxIds) {\n      if (first == true){\n        first = false;\n      } else {\n        qry.append(\" OR \");\n      }\n      qry.append(\"home_tier:\");\n      if (boxId < 0) {\n        qry.append('\\\\').append(boxId);\n      } else {\n        qry.append(boxId);\n      }\n    }\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", qry.toString()),\n            \"//*[@numFound='1']\");\n    clearIndex();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae346e1b9114f24145c75e8edf720c1e2db5b448","date":1271251510,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/schema/PolyFieldTest#testCartesian().mjava","pathOld":"solr/src/test/org/apache/solr/schema/PolyFieldTest#testCartesian().mjava","sourceNew":"  @Test\n  public void testCartesian() throws Exception {\n    for (int i = 40; i < 50; i++) {\n      for (int j = -85; j < -79; j++) {\n        assertU(adoc(\"id\", \"\" + i, \"home_tier\",\n                i + \",\" + j));\n      }\n    }\n    assertU(commit());\n    CartesianPolyFilterBuilder cpfb = new CartesianPolyFilterBuilder(\"\", 4, 15);\n    //Get the box based on this point and our distance\n    final Shape shape = cpfb.getBoxShape(45, -80, 10);//There's a bit of a bug in here that requires a small tier filter here.\n    final List<Double> boxIds = shape.getArea();\n    //do a box id search\n    StringBuilder qry = new StringBuilder();\n    boolean first = true;\n    for (Double boxId : boxIds) {\n      if (first == true){\n        first = false;\n      } else {\n        qry.append(\" OR \");\n      }\n      qry.append(\"home_tier:\");\n      if (boxId < 0) {\n        qry.append('\\\\').append(boxId);\n      } else {\n        qry.append(boxId);\n      }\n    }\n\n    assertQ(req(\"fl\", \"*,score\", \"indent\", \"true\", \"q\", qry.toString()),\n            \"//*[@numFound='1']\");\n    clearIndex();\n  }\n\n","sourceOld":"  @Test\n  public void testCartesian() throws Exception {\n    for (int i = 40; i < 50; i++) {\n      for (int j = -85; j < -79; j++) {\n        assertU(adoc(\"id\", \"\" + i, \"home_tier\",\n                i + \",\" + j));\n      }\n    }\n    assertU(commit());\n    CartesianPolyFilterBuilder cpfb = new CartesianPolyFilterBuilder(\"\", 4, 15);\n    //Get the box based on this point and our distance\n    final Shape shape = cpfb.getBoxShape(45, -80, 10);//There's a bit of a bug in here that requires a small tier filter here.\n    final List<Double> boxIds = shape.getArea();\n    //do a box id search\n    StringBuilder qry = new StringBuilder();\n    boolean first = true;\n    for (Double boxId : boxIds) {\n      if (first == true){\n        first = false;\n      } else {\n        qry.append(\" OR \");\n      }\n      qry.append(\"home_tier:\");\n      if (boxId < 0) {\n        qry.append('\\\\').append(boxId);\n      } else {\n        qry.append(boxId);\n      }\n    }\n\n    assertQ(req(\"fl\", \"*,score\", \"q\", qry.toString()),\n            \"//*[@numFound='1']\");\n    clearIndex();\n  }\n\n","bugFix":["7a92f9b3c2bb83d99d2158d54da6c23bf5d7e564"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f900d5ce814fc22ea498d3303d1f833f5bf320c","date":1278720761,"type":4,"author":"Grant Ingersoll","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/schema/PolyFieldTest#testCartesian().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testCartesian() throws Exception {\n    for (int i = 40; i < 50; i++) {\n      for (int j = -85; j < -79; j++) {\n        assertU(adoc(\"id\", \"\" + i, \"home_tier\",\n                i + \",\" + j));\n      }\n    }\n    assertU(commit());\n    CartesianPolyFilterBuilder cpfb = new CartesianPolyFilterBuilder(\"\", 4, 15);\n    //Get the box based on this point and our distance\n    final Shape shape = cpfb.getBoxShape(45, -80, 10);//There's a bit of a bug in here that requires a small tier filter here.\n    final List<Double> boxIds = shape.getArea();\n    //do a box id search\n    StringBuilder qry = new StringBuilder();\n    boolean first = true;\n    for (Double boxId : boxIds) {\n      if (first == true){\n        first = false;\n      } else {\n        qry.append(\" OR \");\n      }\n      qry.append(\"home_tier:\");\n      if (boxId < 0) {\n        qry.append('\\\\').append(boxId);\n      } else {\n        qry.append(boxId);\n      }\n    }\n\n    assertQ(req(\"fl\", \"*,score\", \"indent\", \"true\", \"q\", qry.toString()),\n            \"//*[@numFound='1']\");\n    clearIndex();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/schema/PolyFieldTest#testCartesian().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testCartesian() throws Exception {\n    for (int i = 40; i < 50; i++) {\n      for (int j = -85; j < -79; j++) {\n        assertU(adoc(\"id\", \"\" + i, \"home_tier\",\n                i + \",\" + j));\n      }\n    }\n    assertU(commit());\n    CartesianPolyFilterBuilder cpfb = new CartesianPolyFilterBuilder(\"\", 4, 15);\n    //Get the box based on this point and our distance\n    final Shape shape = cpfb.getBoxShape(45, -80, 10);//There's a bit of a bug in here that requires a small tier filter here.\n    final List<Double> boxIds = shape.getArea();\n    //do a box id search\n    StringBuilder qry = new StringBuilder();\n    boolean first = true;\n    for (Double boxId : boxIds) {\n      if (first == true){\n        first = false;\n      } else {\n        qry.append(\" OR \");\n      }\n      qry.append(\"home_tier:\");\n      if (boxId < 0) {\n        qry.append('\\\\').append(boxId);\n      } else {\n        qry.append(boxId);\n      }\n    }\n\n    assertQ(req(\"fl\", \"*,score\", \"indent\", \"true\", \"q\", qry.toString()),\n            \"//*[@numFound='1']\");\n    clearIndex();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5f900d5ce814fc22ea498d3303d1f833f5bf320c":["ae346e1b9114f24145c75e8edf720c1e2db5b448"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9ceae7facd632c214a8166fe971c32877733e421":["afeb033b2bd36d8ce9d82142b197da4dde13068b"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"afeb033b2bd36d8ce9d82142b197da4dde13068b":["1da8d55113b689b06716246649de6f62430f15c0"],"5f4e87790277826a2aea119328600dfb07761f32":["ae346e1b9114f24145c75e8edf720c1e2db5b448","5f900d5ce814fc22ea498d3303d1f833f5bf320c"],"ae346e1b9114f24145c75e8edf720c1e2db5b448":["9ceae7facd632c214a8166fe971c32877733e421"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5f900d5ce814fc22ea498d3303d1f833f5bf320c"]},"commit2Childs":{"5f900d5ce814fc22ea498d3303d1f833f5bf320c":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1da8d55113b689b06716246649de6f62430f15c0":["afeb033b2bd36d8ce9d82142b197da4dde13068b"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"9ceae7facd632c214a8166fe971c32877733e421":["ae346e1b9114f24145c75e8edf720c1e2db5b448"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"afeb033b2bd36d8ce9d82142b197da4dde13068b":["9ceae7facd632c214a8166fe971c32877733e421"],"5f4e87790277826a2aea119328600dfb07761f32":[],"ae346e1b9114f24145c75e8edf720c1e2db5b448":["5f900d5ce814fc22ea498d3303d1f833f5bf320c","5f4e87790277826a2aea119328600dfb07761f32"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}