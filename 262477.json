{"path":"src/java/org/apache/lucene/search/ConstantScoreRangeQuery#hashCode().mjava","commits":[{"id":"c5f8e44d5e9627993851287f67e8360a36cb302a","date":1132032532,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ConstantScoreRangeQuery#hashCode().mjava","pathOld":"/dev/null","sourceNew":"    /** Returns a hash code value for this object.*/\r\n    public int hashCode() {\r\n      int h = Float.floatToIntBits(getBoost()) ^ fieldName.hashCode();\r\n      // hashCode of \"\" is 0, so don't use that for null...\r\n      h ^= lowerVal != null ? lowerVal.hashCode() : 0x965a965a;\r\n      // don't just XOR upperVal with out mixing either it or h, as it will cancel\r\n      // out lowerVal if they are equal.\r\n      h ^= (h << 17) | (h >>> 16);  // a reversible (one to one) 32 bit mapping mix\r\n      h ^= (upperVal != null ? (upperVal.hashCode()) : 0x5a695a69);\r\n      h ^= (includeLower ? 0x665599aa : 0)\r\n         ^ (includeUpper ? 0x99aa5566 : 0);\r\n      return h;\r\n    }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6616a9b902d52a1d7831e2ad621d234ef3b540e6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6616a9b902d52a1d7831e2ad621d234ef3b540e6","date":1141872133,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ConstantScoreRangeQuery#hashCode().mjava","pathOld":"src/java/org/apache/lucene/search/ConstantScoreRangeQuery#hashCode().mjava","sourceNew":"    /** Returns a hash code value for this object.*/\n    public int hashCode() {\n      int h = Float.floatToIntBits(getBoost()) ^ fieldName.hashCode();\n      // hashCode of \"\" is 0, so don't use that for null...\n      h ^= lowerVal != null ? lowerVal.hashCode() : 0x965a965a;\n      // don't just XOR upperVal with out mixing either it or h, as it will cancel\n      // out lowerVal if they are equal.\n      h ^= (h << 17) | (h >>> 16);  // a reversible (one to one) 32 bit mapping mix\n      h ^= (upperVal != null ? (upperVal.hashCode()) : 0x5a695a69);\n      h ^= (includeLower ? 0x665599aa : 0)\n         ^ (includeUpper ? 0x99aa5566 : 0);\n      return h;\n    }\n\n","sourceOld":"    /** Returns a hash code value for this object.*/\r\n    public int hashCode() {\r\n      int h = Float.floatToIntBits(getBoost()) ^ fieldName.hashCode();\r\n      // hashCode of \"\" is 0, so don't use that for null...\r\n      h ^= lowerVal != null ? lowerVal.hashCode() : 0x965a965a;\r\n      // don't just XOR upperVal with out mixing either it or h, as it will cancel\r\n      // out lowerVal if they are equal.\r\n      h ^= (h << 17) | (h >>> 16);  // a reversible (one to one) 32 bit mapping mix\r\n      h ^= (upperVal != null ? (upperVal.hashCode()) : 0x5a695a69);\r\n      h ^= (includeLower ? 0x665599aa : 0)\r\n         ^ (includeUpper ? 0x99aa5566 : 0);\r\n      return h;\r\n    }\r\n\n","bugFix":["c5f8e44d5e9627993851287f67e8360a36cb302a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b33dc4652df2747e38f9782fde82bd426b77c538","date":1221599001,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/ConstantScoreRangeQuery#hashCode().mjava","pathOld":"src/java/org/apache/lucene/search/ConstantScoreRangeQuery#hashCode().mjava","sourceNew":"    /** Returns a hash code value for this object.*/\n    public int hashCode() {\n      int h = Float.floatToIntBits(getBoost()) ^ fieldName.hashCode();\n      // hashCode of \"\" is 0, so don't use that for null...\n      h ^= lowerVal != null ? lowerVal.hashCode() : 0x965a965a;\n      // don't just XOR upperVal with out mixing either it or h, as it will cancel\n      // out lowerVal if they are equal.\n      h ^= (h << 17) | (h >>> 16);  // a reversible (one to one) 32 bit mapping mix\n      h ^= (upperVal != null ? (upperVal.hashCode()) : 0x5a695a69);\n      h ^= (includeLower ? 0x665599aa : 0)\n         ^ (includeUpper ? 0x99aa5566 : 0);\n      h ^= collator != null ? collator.hashCode() : 0;\n      return h;\n    }\n\n","sourceOld":"    /** Returns a hash code value for this object.*/\n    public int hashCode() {\n      int h = Float.floatToIntBits(getBoost()) ^ fieldName.hashCode();\n      // hashCode of \"\" is 0, so don't use that for null...\n      h ^= lowerVal != null ? lowerVal.hashCode() : 0x965a965a;\n      // don't just XOR upperVal with out mixing either it or h, as it will cancel\n      // out lowerVal if they are equal.\n      h ^= (h << 17) | (h >>> 16);  // a reversible (one to one) 32 bit mapping mix\n      h ^= (upperVal != null ? (upperVal.hashCode()) : 0x5a695a69);\n      h ^= (includeLower ? 0x665599aa : 0)\n         ^ (includeUpper ? 0x99aa5566 : 0);\n      return h;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f7a11eba51d213f09b96054111cf56a1e5796a3","date":1226364000,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/ConstantScoreRangeQuery#hashCode().mjava","sourceNew":null,"sourceOld":"    /** Returns a hash code value for this object.*/\n    public int hashCode() {\n      int h = Float.floatToIntBits(getBoost()) ^ fieldName.hashCode();\n      // hashCode of \"\" is 0, so don't use that for null...\n      h ^= lowerVal != null ? lowerVal.hashCode() : 0x965a965a;\n      // don't just XOR upperVal with out mixing either it or h, as it will cancel\n      // out lowerVal if they are equal.\n      h ^= (h << 17) | (h >>> 16);  // a reversible (one to one) 32 bit mapping mix\n      h ^= (upperVal != null ? (upperVal.hashCode()) : 0x5a695a69);\n      h ^= (includeLower ? 0x665599aa : 0)\n         ^ (includeUpper ? 0x99aa5566 : 0);\n      h ^= collator != null ? collator.hashCode() : 0;\n      return h;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6616a9b902d52a1d7831e2ad621d234ef3b540e6":["c5f8e44d5e9627993851287f67e8360a36cb302a"],"b33dc4652df2747e38f9782fde82bd426b77c538":["6616a9b902d52a1d7831e2ad621d234ef3b540e6"],"c5f8e44d5e9627993851287f67e8360a36cb302a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["b33dc4652df2747e38f9782fde82bd426b77c538"]},"commit2Childs":{"6616a9b902d52a1d7831e2ad621d234ef3b540e6":["b33dc4652df2747e38f9782fde82bd426b77c538"],"b33dc4652df2747e38f9782fde82bd426b77c538":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"c5f8e44d5e9627993851287f67e8360a36cb302a":["6616a9b902d52a1d7831e2ad621d234ef3b540e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c5f8e44d5e9627993851287f67e8360a36cb302a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}