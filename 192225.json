{"path":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","commits":[{"id":"ccc08aa684aee4964baee0644a6ba047bfd70829","date":1316263707,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    Map<String, Object> result = new HashMap<String, Object>();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Integer totalHits = (Integer) commandResult.get(\"totalHits\");\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];\n        int j = 0;\n        for (NamedList<Object> document : documents) {\n          Object uniqueId = document.get(\"id\").toString();\n          Float score = (Float) document.get(\"score\");\n          if (score == null) {\n            score = Float.NaN;\n          }\n          Object[] sortValues = ((List) document.get(\"sortValues\")).toArray();\n          scoreDocs[j++] = new ShardDoc(score, sortValues, uniqueId, shard);\n        }\n        result.put(key, new QueryCommandResult(new TopDocs(totalHits, scoreDocs, maxScore), matches));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n      Integer totalGroupCount = (Integer) commandResult.get(\"totalGroupCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<GroupDocs<BytesRef>>();\n      for (int i = totalGroupCount == null ? 2 : 3; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Integer totalGroupHits = (Integer) groupResult.get(\"totalHits\");\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];\n        int j = 0;\n        for (NamedList<Object> document : documents) {\n          Object uniqueId = document.get(\"id\").toString();\n          Float score = (Float) document.get(\"score\");\n          if (score == null) {\n            score = Float.NaN;\n          }\n          Object[] sortValues = ((List) document.get(\"sortValues\")).toArray();\n          scoreDocs[j++] = new ShardDoc(score, sortValues, uniqueId, shard);\n        }\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<BytesRef>(maxScore, totalGroupHits, scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<BytesRef>(\n        groupSort.getSort(), sortWithinGroup.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr\n      );\n      if (totalGroupCount != null) {\n        topGroups = new TopGroups<BytesRef>(topGroups, totalGroupCount);\n      }\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["85d41890f2bad879e6a04c6dd7d2cf276f973994","f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6","af20870f6eab3807c968eec0b24e0c4358d0c1e5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"af20870f6eab3807c968eec0b24e0c4358d0c1e5","date":1337002937,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    Map<String, Object> result = new HashMap<String, Object>();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Integer totalHits = (Integer) commandResult.get(\"totalHits\");\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];\n        int j = 0;\n        for (NamedList<Object> document : documents) {\n          Object uniqueId = document.get(\"id\").toString();\n          Float score = (Float) document.get(\"score\");\n          if (score == null) {\n            score = Float.NaN;\n          }\n          Object[] sortValues = ((List) document.get(\"sortValues\")).toArray();\n          scoreDocs[j++] = new ShardDoc(score, sortValues, uniqueId, shard);\n        }\n        result.put(key, new QueryCommandResult(new TopDocs(totalHits, scoreDocs, maxScore), matches));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<GroupDocs<BytesRef>>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Integer totalGroupHits = (Integer) groupResult.get(\"totalHits\");\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];\n        int j = 0;\n        for (NamedList<Object> document : documents) {\n          Object uniqueId = document.get(\"id\").toString();\n          Float score = (Float) document.get(\"score\");\n          if (score == null) {\n            score = Float.NaN;\n          }\n          Object[] sortValues = ((List) document.get(\"sortValues\")).toArray();\n          scoreDocs[j++] = new ShardDoc(score, sortValues, uniqueId, shard);\n        }\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<BytesRef>(maxScore, totalGroupHits, scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<BytesRef>(\n        groupSort.getSort(), sortWithinGroup.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    Map<String, Object> result = new HashMap<String, Object>();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Integer totalHits = (Integer) commandResult.get(\"totalHits\");\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];\n        int j = 0;\n        for (NamedList<Object> document : documents) {\n          Object uniqueId = document.get(\"id\").toString();\n          Float score = (Float) document.get(\"score\");\n          if (score == null) {\n            score = Float.NaN;\n          }\n          Object[] sortValues = ((List) document.get(\"sortValues\")).toArray();\n          scoreDocs[j++] = new ShardDoc(score, sortValues, uniqueId, shard);\n        }\n        result.put(key, new QueryCommandResult(new TopDocs(totalHits, scoreDocs, maxScore), matches));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n      Integer totalGroupCount = (Integer) commandResult.get(\"totalGroupCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<GroupDocs<BytesRef>>();\n      for (int i = totalGroupCount == null ? 2 : 3; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Integer totalGroupHits = (Integer) groupResult.get(\"totalHits\");\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];\n        int j = 0;\n        for (NamedList<Object> document : documents) {\n          Object uniqueId = document.get(\"id\").toString();\n          Float score = (Float) document.get(\"score\");\n          if (score == null) {\n            score = Float.NaN;\n          }\n          Object[] sortValues = ((List) document.get(\"sortValues\")).toArray();\n          scoreDocs[j++] = new ShardDoc(score, sortValues, uniqueId, shard);\n        }\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<BytesRef>(maxScore, totalGroupHits, scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<BytesRef>(\n        groupSort.getSort(), sortWithinGroup.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr\n      );\n      if (totalGroupCount != null) {\n        topGroups = new TopGroups<BytesRef>(topGroups, totalGroupCount);\n      }\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","bugFix":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85d41890f2bad879e6a04c6dd7d2cf276f973994","date":1338488367,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    Map<String, Object> result = new HashMap<String, Object>();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Integer totalHits = (Integer) commandResult.get(\"totalHits\");\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];\n        int j = 0;\n        for (NamedList<Object> document : documents) {\n          Object uniqueId = document.get(\"id\").toString();\n          Float score = (Float) document.get(\"score\");\n          if (score == null) {\n            score = Float.NaN;\n          }\n          Object[] sortValues = ((List) document.get(\"sortValues\")).toArray();\n          scoreDocs[j++] = new ShardDoc(score, sortValues, uniqueId, shard);\n        }\n        result.put(key, new QueryCommandResult(new TopDocs(totalHits, scoreDocs, maxScore), matches));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<GroupDocs<BytesRef>>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Integer totalGroupHits = (Integer) groupResult.get(\"totalHits\");\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];\n        int j = 0;\n        for (NamedList<Object> document : documents) {\n          Object uniqueId = document.get(\"id\").toString();\n          Float score = (Float) document.get(\"score\");\n          if (score == null) {\n            score = Float.NaN;\n          }\n          Object[] sortValues = ((List) document.get(\"sortValues\")).toArray();\n          scoreDocs[j++] = new ShardDoc(score, sortValues, uniqueId, shard);\n        }\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<BytesRef>(Float.NaN, maxScore, totalGroupHits, scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<BytesRef>(\n           groupSort.getSort(), sortWithinGroup.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    Map<String, Object> result = new HashMap<String, Object>();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Integer totalHits = (Integer) commandResult.get(\"totalHits\");\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];\n        int j = 0;\n        for (NamedList<Object> document : documents) {\n          Object uniqueId = document.get(\"id\").toString();\n          Float score = (Float) document.get(\"score\");\n          if (score == null) {\n            score = Float.NaN;\n          }\n          Object[] sortValues = ((List) document.get(\"sortValues\")).toArray();\n          scoreDocs[j++] = new ShardDoc(score, sortValues, uniqueId, shard);\n        }\n        result.put(key, new QueryCommandResult(new TopDocs(totalHits, scoreDocs, maxScore), matches));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<GroupDocs<BytesRef>>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Integer totalGroupHits = (Integer) groupResult.get(\"totalHits\");\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];\n        int j = 0;\n        for (NamedList<Object> document : documents) {\n          Object uniqueId = document.get(\"id\").toString();\n          Float score = (Float) document.get(\"score\");\n          if (score == null) {\n            score = Float.NaN;\n          }\n          Object[] sortValues = ((List) document.get(\"sortValues\")).toArray();\n          scoreDocs[j++] = new ShardDoc(score, sortValues, uniqueId, shard);\n        }\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<BytesRef>(maxScore, totalGroupHits, scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<BytesRef>(\n        groupSort.getSort(), sortWithinGroup.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","bugFix":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    Map<String, Object> result = new HashMap<String, Object>();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Integer totalHits = (Integer) commandResult.get(\"totalHits\");\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];\n        int j = 0;\n        for (NamedList<Object> document : documents) {\n          Object uniqueId = document.get(\"id\").toString();\n          Float score = (Float) document.get(\"score\");\n          if (score == null) {\n            score = Float.NaN;\n          }\n          Object[] sortValues = ((List) document.get(\"sortValues\")).toArray();\n          scoreDocs[j++] = new ShardDoc(score, sortValues, uniqueId, shard);\n        }\n        result.put(key, new QueryCommandResult(new TopDocs(totalHits, scoreDocs, maxScore), matches));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<GroupDocs<BytesRef>>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Integer totalGroupHits = (Integer) groupResult.get(\"totalHits\");\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];\n        int j = 0;\n        for (NamedList<Object> document : documents) {\n          Object uniqueId = document.get(\"id\").toString();\n          Float score = (Float) document.get(\"score\");\n          if (score == null) {\n            score = Float.NaN;\n          }\n          Object[] sortValues = ((List) document.get(\"sortValues\")).toArray();\n          scoreDocs[j++] = new ShardDoc(score, sortValues, uniqueId, shard);\n        }\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<BytesRef>(Float.NaN, maxScore, totalGroupHits, scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<BytesRef>(\n           groupSort.getSort(), sortWithinGroup.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    Map<String, Object> result = new HashMap<String, Object>();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Integer totalHits = (Integer) commandResult.get(\"totalHits\");\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];\n        int j = 0;\n        for (NamedList<Object> document : documents) {\n          Object uniqueId = document.get(\"id\").toString();\n          Float score = (Float) document.get(\"score\");\n          if (score == null) {\n            score = Float.NaN;\n          }\n          Object[] sortValues = ((List) document.get(\"sortValues\")).toArray();\n          scoreDocs[j++] = new ShardDoc(score, sortValues, uniqueId, shard);\n        }\n        result.put(key, new QueryCommandResult(new TopDocs(totalHits, scoreDocs, maxScore), matches));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<GroupDocs<BytesRef>>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Integer totalGroupHits = (Integer) groupResult.get(\"totalHits\");\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];\n        int j = 0;\n        for (NamedList<Object> document : documents) {\n          Object uniqueId = document.get(\"id\").toString();\n          Float score = (Float) document.get(\"score\");\n          if (score == null) {\n            score = Float.NaN;\n          }\n          Object[] sortValues = ((List) document.get(\"sortValues\")).toArray();\n          scoreDocs[j++] = new ShardDoc(score, sortValues, uniqueId, shard);\n        }\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<BytesRef>(Float.NaN, maxScore, totalGroupHits, scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<BytesRef>(\n           groupSort.getSort(), sortWithinGroup.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e34571ed12dcd55add872aeae020605f84b2ee7","date":1355390669,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    Map<String, Object> result = new HashMap<String, Object>();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Integer totalHits = (Integer) commandResult.get(\"totalHits\");\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];\n        int j = 0;\n        for (NamedList<Object> document : documents) {\n          Object docId = document.get(\"id\");\n          Object uniqueId = null;\n          if (docId != null)\n            uniqueId = docId.toString();\n          else\n            log.warn(\"doc {} has null 'id'\", document);\n          Float score = (Float) document.get(\"score\");\n          if (score == null) {\n            score = Float.NaN;\n          }\n          Object[] sortValues = null;\n          Object sortValuesVal = document.get(\"sortValues\");\n          if (sortValuesVal != null) {\n            sortValues = ((List) sortValuesVal).toArray();\n          }\n          else {\n            log.warn(\"doc {} has null 'sortValues'\", document);\n          }\n          scoreDocs[j++] = new ShardDoc(score, sortValues, uniqueId, shard);\n        }\n        result.put(key, new QueryCommandResult(new TopDocs(totalHits, scoreDocs, maxScore), matches));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<GroupDocs<BytesRef>>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Integer totalGroupHits = (Integer) groupResult.get(\"totalHits\");\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];\n        int j = 0;\n        for (NamedList<Object> document : documents) {\n          Object uniqueId = document.get(\"id\").toString();\n          Float score = (Float) document.get(\"score\");\n          if (score == null) {\n            score = Float.NaN;\n          }\n          Object[] sortValues = ((List) document.get(\"sortValues\")).toArray();\n          scoreDocs[j++] = new ShardDoc(score, sortValues, uniqueId, shard);\n        }\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<BytesRef>(Float.NaN, maxScore, totalGroupHits, scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<BytesRef>(\n           groupSort.getSort(), sortWithinGroup.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    Map<String, Object> result = new HashMap<String, Object>();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Integer totalHits = (Integer) commandResult.get(\"totalHits\");\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];\n        int j = 0;\n        for (NamedList<Object> document : documents) {\n          Object uniqueId = document.get(\"id\").toString();\n          Float score = (Float) document.get(\"score\");\n          if (score == null) {\n            score = Float.NaN;\n          }\n          Object[] sortValues = ((List) document.get(\"sortValues\")).toArray();\n          scoreDocs[j++] = new ShardDoc(score, sortValues, uniqueId, shard);\n        }\n        result.put(key, new QueryCommandResult(new TopDocs(totalHits, scoreDocs, maxScore), matches));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<GroupDocs<BytesRef>>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Integer totalGroupHits = (Integer) groupResult.get(\"totalHits\");\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];\n        int j = 0;\n        for (NamedList<Object> document : documents) {\n          Object uniqueId = document.get(\"id\").toString();\n          Float score = (Float) document.get(\"score\");\n          if (score == null) {\n            score = Float.NaN;\n          }\n          Object[] sortValues = ((List) document.get(\"sortValues\")).toArray();\n          scoreDocs[j++] = new ShardDoc(score, sortValues, uniqueId, shard);\n        }\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<BytesRef>(Float.NaN, maxScore, totalGroupHits, scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<BytesRef>(\n           groupSort.getSort(), sortWithinGroup.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    Map<String, Object> result = new HashMap<String, Object>();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Integer totalHits = (Integer) commandResult.get(\"totalHits\");\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];\n        int j = 0;\n        for (NamedList<Object> document : documents) {\n          Object docId = document.get(\"id\");\n          Object uniqueId = null;\n          if (docId != null)\n            uniqueId = docId.toString();\n          else\n            log.warn(\"doc {} has null 'id'\", document);\n          Float score = (Float) document.get(\"score\");\n          if (score == null) {\n            score = Float.NaN;\n          }\n          Object[] sortValues = null;\n          Object sortValuesVal = document.get(\"sortValues\");\n          if (sortValuesVal != null) {\n            sortValues = ((List) sortValuesVal).toArray();\n          }\n          else {\n            log.warn(\"doc {} has null 'sortValues'\", document);\n          }\n          scoreDocs[j++] = new ShardDoc(score, sortValues, uniqueId, shard);\n        }\n        result.put(key, new QueryCommandResult(new TopDocs(totalHits, scoreDocs, maxScore), matches));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<GroupDocs<BytesRef>>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Integer totalGroupHits = (Integer) groupResult.get(\"totalHits\");\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];\n        int j = 0;\n        for (NamedList<Object> document : documents) {\n          Object uniqueId = document.get(\"id\").toString();\n          Float score = (Float) document.get(\"score\");\n          if (score == null) {\n            score = Float.NaN;\n          }\n          Object[] sortValues = ((List) document.get(\"sortValues\")).toArray();\n          scoreDocs[j++] = new ShardDoc(score, sortValues, uniqueId, shard);\n        }\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<BytesRef>(Float.NaN, maxScore, totalGroupHits, scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<BytesRef>(\n           groupSort.getSort(), sortWithinGroup.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    Map<String, Object> result = new HashMap<String, Object>();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Integer totalHits = (Integer) commandResult.get(\"totalHits\");\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];\n        int j = 0;\n        for (NamedList<Object> document : documents) {\n          Object uniqueId = document.get(\"id\").toString();\n          Float score = (Float) document.get(\"score\");\n          if (score == null) {\n            score = Float.NaN;\n          }\n          Object[] sortValues = ((List) document.get(\"sortValues\")).toArray();\n          scoreDocs[j++] = new ShardDoc(score, sortValues, uniqueId, shard);\n        }\n        result.put(key, new QueryCommandResult(new TopDocs(totalHits, scoreDocs, maxScore), matches));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<GroupDocs<BytesRef>>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Integer totalGroupHits = (Integer) groupResult.get(\"totalHits\");\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];\n        int j = 0;\n        for (NamedList<Object> document : documents) {\n          Object uniqueId = document.get(\"id\").toString();\n          Float score = (Float) document.get(\"score\");\n          if (score == null) {\n            score = Float.NaN;\n          }\n          Object[] sortValues = ((List) document.get(\"sortValues\")).toArray();\n          scoreDocs[j++] = new ShardDoc(score, sortValues, uniqueId, shard);\n        }\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<BytesRef>(Float.NaN, maxScore, totalGroupHits, scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<BytesRef>(\n           groupSort.getSort(), sortWithinGroup.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a485770e19d1ea7a458aa6b08bd2ff0c4b5bec25","date":1389830331,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    Map<String, Object> result = new HashMap<String, Object>();\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Integer totalHits = (Integer) commandResult.get(\"totalHits\");\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];\n        int j = 0;\n        for (NamedList<Object> document : documents) {\n          Object docId = document.get(\"id\");\n          Object uniqueId = null;\n          if (docId != null)\n            uniqueId = docId.toString();\n          else\n            log.warn(\"doc {} has null 'id'\", document);\n          Float score = (Float) document.get(\"score\");\n          if (score == null) {\n            score = Float.NaN;\n          }\n          Object[] sortValues = null;\n          Object sortValuesVal = document.get(\"sortValues\");\n          if (sortValuesVal != null) {\n            sortValues = ((List) sortValuesVal).toArray();\n            for (int k = 0; k < sortValues.length; k++) {\n              SchemaField field = groupSort.getSort()[k].getField() != null ? schema.getFieldOrNull(groupSort.getSort()[k].getField()) : null;\n              if (field != null) {\n                FieldType fieldType = field.getType();\n                if (sortValues[k] != null) {\n                  sortValues[k] = fieldType.unmarshalSortValue(sortValues[k]);\n                }\n              }\n            }\n          }\n          else {\n            log.warn(\"doc {} has null 'sortValues'\", document);\n          }\n          scoreDocs[j++] = new ShardDoc(score, sortValues, uniqueId, shard);\n        }\n        result.put(key, new QueryCommandResult(new TopDocs(totalHits, scoreDocs, maxScore), matches));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<GroupDocs<BytesRef>>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Integer totalGroupHits = (Integer) groupResult.get(\"totalHits\");\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];\n        int j = 0;\n        for (NamedList<Object> document : documents) {\n          Object uniqueId = document.get(\"id\").toString();\n          Float score = (Float) document.get(\"score\");\n          if (score == null) {\n            score = Float.NaN;\n          }\n          Object[] sortValues = ((List) document.get(\"sortValues\")).toArray();\n          for (int k = 0; k < sortValues.length; k++) {\n            SchemaField field = sortWithinGroup.getSort()[k].getField() != null ? schema.getFieldOrNull(sortWithinGroup.getSort()[k].getField()) : null;\n            if (field != null) {\n              FieldType fieldType = field.getType();\n              if (sortValues[k] != null) {\n                sortValues[k] = fieldType.unmarshalSortValue(sortValues[k]);\n              }\n            }\n          }\n          scoreDocs[j++] = new ShardDoc(score, sortValues, uniqueId, shard);\n        }\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<BytesRef>(Float.NaN, maxScore, totalGroupHits, scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<BytesRef>(\n           groupSort.getSort(), sortWithinGroup.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    Map<String, Object> result = new HashMap<String, Object>();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Integer totalHits = (Integer) commandResult.get(\"totalHits\");\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];\n        int j = 0;\n        for (NamedList<Object> document : documents) {\n          Object docId = document.get(\"id\");\n          Object uniqueId = null;\n          if (docId != null)\n            uniqueId = docId.toString();\n          else\n            log.warn(\"doc {} has null 'id'\", document);\n          Float score = (Float) document.get(\"score\");\n          if (score == null) {\n            score = Float.NaN;\n          }\n          Object[] sortValues = null;\n          Object sortValuesVal = document.get(\"sortValues\");\n          if (sortValuesVal != null) {\n            sortValues = ((List) sortValuesVal).toArray();\n          }\n          else {\n            log.warn(\"doc {} has null 'sortValues'\", document);\n          }\n          scoreDocs[j++] = new ShardDoc(score, sortValues, uniqueId, shard);\n        }\n        result.put(key, new QueryCommandResult(new TopDocs(totalHits, scoreDocs, maxScore), matches));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<GroupDocs<BytesRef>>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Integer totalGroupHits = (Integer) groupResult.get(\"totalHits\");\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];\n        int j = 0;\n        for (NamedList<Object> document : documents) {\n          Object uniqueId = document.get(\"id\").toString();\n          Float score = (Float) document.get(\"score\");\n          if (score == null) {\n            score = Float.NaN;\n          }\n          Object[] sortValues = ((List) document.get(\"sortValues\")).toArray();\n          scoreDocs[j++] = new ShardDoc(score, sortValues, uniqueId, shard);\n        }\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<BytesRef>(Float.NaN, maxScore, totalGroupHits, scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<BytesRef>(\n           groupSort.getSort(), sortWithinGroup.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"27ab7b234eab0cbc020836989b96ed430e1065bb","date":1389894025,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    Map<String, Object> result = new HashMap<String, Object>();\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Integer totalHits = (Integer) commandResult.get(\"totalHits\");\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];\n        int j = 0;\n        for (NamedList<Object> document : documents) {\n          Object docId = document.get(\"id\");\n          Object uniqueId = null;\n          if (docId != null)\n            uniqueId = docId.toString();\n          else\n            log.warn(\"doc {} has null 'id'\", document);\n          Float score = (Float) document.get(\"score\");\n          if (score == null) {\n            score = Float.NaN;\n          }\n          Object[] sortValues = null;\n          Object sortValuesVal = document.get(\"sortValues\");\n          if (sortValuesVal != null) {\n            sortValues = ((List) sortValuesVal).toArray();\n            for (int k = 0; k < sortValues.length; k++) {\n              SchemaField field = groupSort.getSort()[k].getField() != null ? schema.getFieldOrNull(groupSort.getSort()[k].getField()) : null;\n              if (field != null) {\n                FieldType fieldType = field.getType();\n                if (sortValues[k] != null) {\n                  sortValues[k] = fieldType.unmarshalSortValue(sortValues[k]);\n                }\n              }\n            }\n          }\n          else {\n            log.warn(\"doc {} has null 'sortValues'\", document);\n          }\n          scoreDocs[j++] = new ShardDoc(score, sortValues, uniqueId, shard);\n        }\n        result.put(key, new QueryCommandResult(new TopDocs(totalHits, scoreDocs, maxScore), matches));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<GroupDocs<BytesRef>>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Integer totalGroupHits = (Integer) groupResult.get(\"totalHits\");\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];\n        int j = 0;\n        for (NamedList<Object> document : documents) {\n          Object uniqueId = document.get(\"id\").toString();\n          Float score = (Float) document.get(\"score\");\n          if (score == null) {\n            score = Float.NaN;\n          }\n          Object[] sortValues = ((List) document.get(\"sortValues\")).toArray();\n          for (int k = 0; k < sortValues.length; k++) {\n            SchemaField field = sortWithinGroup.getSort()[k].getField() != null ? schema.getFieldOrNull(sortWithinGroup.getSort()[k].getField()) : null;\n            if (field != null) {\n              FieldType fieldType = field.getType();\n              if (sortValues[k] != null) {\n                sortValues[k] = fieldType.unmarshalSortValue(sortValues[k]);\n              }\n            }\n          }\n          scoreDocs[j++] = new ShardDoc(score, sortValues, uniqueId, shard);\n        }\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<BytesRef>(Float.NaN, maxScore, totalGroupHits, scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<BytesRef>(\n           groupSort.getSort(), sortWithinGroup.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    Map<String, Object> result = new HashMap<String, Object>();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Integer totalHits = (Integer) commandResult.get(\"totalHits\");\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];\n        int j = 0;\n        for (NamedList<Object> document : documents) {\n          Object docId = document.get(\"id\");\n          Object uniqueId = null;\n          if (docId != null)\n            uniqueId = docId.toString();\n          else\n            log.warn(\"doc {} has null 'id'\", document);\n          Float score = (Float) document.get(\"score\");\n          if (score == null) {\n            score = Float.NaN;\n          }\n          Object[] sortValues = null;\n          Object sortValuesVal = document.get(\"sortValues\");\n          if (sortValuesVal != null) {\n            sortValues = ((List) sortValuesVal).toArray();\n          }\n          else {\n            log.warn(\"doc {} has null 'sortValues'\", document);\n          }\n          scoreDocs[j++] = new ShardDoc(score, sortValues, uniqueId, shard);\n        }\n        result.put(key, new QueryCommandResult(new TopDocs(totalHits, scoreDocs, maxScore), matches));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<GroupDocs<BytesRef>>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Integer totalGroupHits = (Integer) groupResult.get(\"totalHits\");\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];\n        int j = 0;\n        for (NamedList<Object> document : documents) {\n          Object uniqueId = document.get(\"id\").toString();\n          Float score = (Float) document.get(\"score\");\n          if (score == null) {\n            score = Float.NaN;\n          }\n          Object[] sortValues = ((List) document.get(\"sortValues\")).toArray();\n          scoreDocs[j++] = new ShardDoc(score, sortValues, uniqueId, shard);\n        }\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<BytesRef>(Float.NaN, maxScore, totalGroupHits, scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<BytesRef>(\n           groupSort.getSort(), sortWithinGroup.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    Map<String, Object> result = new HashMap<>();\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Integer totalHits = (Integer) commandResult.get(\"totalHits\");\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];\n        int j = 0;\n        for (NamedList<Object> document : documents) {\n          Object docId = document.get(\"id\");\n          Object uniqueId = null;\n          if (docId != null)\n            uniqueId = docId.toString();\n          else\n            log.warn(\"doc {} has null 'id'\", document);\n          Float score = (Float) document.get(\"score\");\n          if (score == null) {\n            score = Float.NaN;\n          }\n          Object[] sortValues = null;\n          Object sortValuesVal = document.get(\"sortValues\");\n          if (sortValuesVal != null) {\n            sortValues = ((List) sortValuesVal).toArray();\n            for (int k = 0; k < sortValues.length; k++) {\n              SchemaField field = groupSort.getSort()[k].getField() != null ? schema.getFieldOrNull(groupSort.getSort()[k].getField()) : null;\n              if (field != null) {\n                FieldType fieldType = field.getType();\n                if (sortValues[k] != null) {\n                  sortValues[k] = fieldType.unmarshalSortValue(sortValues[k]);\n                }\n              }\n            }\n          }\n          else {\n            log.warn(\"doc {} has null 'sortValues'\", document);\n          }\n          scoreDocs[j++] = new ShardDoc(score, sortValues, uniqueId, shard);\n        }\n        result.put(key, new QueryCommandResult(new TopDocs(totalHits, scoreDocs, maxScore), matches));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Integer totalGroupHits = (Integer) groupResult.get(\"totalHits\");\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];\n        int j = 0;\n        for (NamedList<Object> document : documents) {\n          Object uniqueId = document.get(\"id\").toString();\n          Float score = (Float) document.get(\"score\");\n          if (score == null) {\n            score = Float.NaN;\n          }\n          Object[] sortValues = ((List) document.get(\"sortValues\")).toArray();\n          for (int k = 0; k < sortValues.length; k++) {\n            SchemaField field = sortWithinGroup.getSort()[k].getField() != null ? schema.getFieldOrNull(sortWithinGroup.getSort()[k].getField()) : null;\n            if (field != null) {\n              FieldType fieldType = field.getType();\n              if (sortValues[k] != null) {\n                sortValues[k] = fieldType.unmarshalSortValue(sortValues[k]);\n              }\n            }\n          }\n          scoreDocs[j++] = new ShardDoc(score, sortValues, uniqueId, shard);\n        }\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<>(Float.NaN, maxScore, totalGroupHits, scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<>(\n           groupSort.getSort(), sortWithinGroup.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    Map<String, Object> result = new HashMap<String, Object>();\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Integer totalHits = (Integer) commandResult.get(\"totalHits\");\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];\n        int j = 0;\n        for (NamedList<Object> document : documents) {\n          Object docId = document.get(\"id\");\n          Object uniqueId = null;\n          if (docId != null)\n            uniqueId = docId.toString();\n          else\n            log.warn(\"doc {} has null 'id'\", document);\n          Float score = (Float) document.get(\"score\");\n          if (score == null) {\n            score = Float.NaN;\n          }\n          Object[] sortValues = null;\n          Object sortValuesVal = document.get(\"sortValues\");\n          if (sortValuesVal != null) {\n            sortValues = ((List) sortValuesVal).toArray();\n            for (int k = 0; k < sortValues.length; k++) {\n              SchemaField field = groupSort.getSort()[k].getField() != null ? schema.getFieldOrNull(groupSort.getSort()[k].getField()) : null;\n              if (field != null) {\n                FieldType fieldType = field.getType();\n                if (sortValues[k] != null) {\n                  sortValues[k] = fieldType.unmarshalSortValue(sortValues[k]);\n                }\n              }\n            }\n          }\n          else {\n            log.warn(\"doc {} has null 'sortValues'\", document);\n          }\n          scoreDocs[j++] = new ShardDoc(score, sortValues, uniqueId, shard);\n        }\n        result.put(key, new QueryCommandResult(new TopDocs(totalHits, scoreDocs, maxScore), matches));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<GroupDocs<BytesRef>>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Integer totalGroupHits = (Integer) groupResult.get(\"totalHits\");\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];\n        int j = 0;\n        for (NamedList<Object> document : documents) {\n          Object uniqueId = document.get(\"id\").toString();\n          Float score = (Float) document.get(\"score\");\n          if (score == null) {\n            score = Float.NaN;\n          }\n          Object[] sortValues = ((List) document.get(\"sortValues\")).toArray();\n          for (int k = 0; k < sortValues.length; k++) {\n            SchemaField field = sortWithinGroup.getSort()[k].getField() != null ? schema.getFieldOrNull(sortWithinGroup.getSort()[k].getField()) : null;\n            if (field != null) {\n              FieldType fieldType = field.getType();\n              if (sortValues[k] != null) {\n                sortValues[k] = fieldType.unmarshalSortValue(sortValues[k]);\n              }\n            }\n          }\n          scoreDocs[j++] = new ShardDoc(score, sortValues, uniqueId, shard);\n        }\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<BytesRef>(Float.NaN, maxScore, totalGroupHits, scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<BytesRef>(\n           groupSort.getSort(), sortWithinGroup.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":["f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6d9f51b2e3d1edc63fd6d1172bb959a4b9c02dea","date":1423248740,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    Map<String, Object> result = new HashMap<>();\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Integer totalHits = (Integer) commandResult.get(\"totalHits\");\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];\n        int j = 0;\n        for (NamedList<Object> document : documents) {\n          Object docId = document.get(\"id\");\n          Object uniqueId = null;\n          if (docId != null)\n            uniqueId = docId.toString();\n          else\n            log.warn(\"doc {} has null 'id'\", document);\n          Float score = (Float) document.get(\"score\");\n          if (score == null) {\n            score = Float.NaN;\n          }\n          Object[] sortValues = null;\n          Object sortValuesVal = document.get(\"sortValues\");\n          if (sortValuesVal != null) {\n            sortValues = ((List) sortValuesVal).toArray();\n            for (int k = 0; k < sortValues.length; k++) {\n              SchemaField field = groupSort.getSort()[k].getField() != null ? schema.getFieldOrNull(groupSort.getSort()[k].getField()) : null;\n              if (field != null) {\n                FieldType fieldType = field.getType();\n                if (sortValues[k] != null) {\n                  sortValues[k] = fieldType.unmarshalSortValue(sortValues[k]);\n                }\n              }\n            }\n          }\n          else {\n            log.warn(\"doc {} has null 'sortValues'\", document);\n          }\n          scoreDocs[j++] = new ShardDoc(score, sortValues, uniqueId, shard);\n        }\n        final TopDocs topDocs;\n        if (sortWithinGroup == null) {\n          topDocs = new TopDocs(totalHits, scoreDocs, maxScore);\n        } else {\n          topDocs = new TopFieldDocs(totalHits, scoreDocs, sortWithinGroup.getSort(), maxScore);\n        }\n        result.put(key, new QueryCommandResult(topDocs, matches));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Integer totalGroupHits = (Integer) groupResult.get(\"totalHits\");\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];\n        int j = 0;\n        for (NamedList<Object> document : documents) {\n          Object uniqueId = document.get(\"id\").toString();\n          Float score = (Float) document.get(\"score\");\n          if (score == null) {\n            score = Float.NaN;\n          }\n          Object[] sortValues = ((List) document.get(\"sortValues\")).toArray();\n          for (int k = 0; k < sortValues.length; k++) {\n            SchemaField field = sortWithinGroup.getSort()[k].getField() != null ? schema.getFieldOrNull(sortWithinGroup.getSort()[k].getField()) : null;\n            if (field != null) {\n              FieldType fieldType = field.getType();\n              if (sortValues[k] != null) {\n                sortValues[k] = fieldType.unmarshalSortValue(sortValues[k]);\n              }\n            }\n          }\n          scoreDocs[j++] = new ShardDoc(score, sortValues, uniqueId, shard);\n        }\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<>(Float.NaN, maxScore, totalGroupHits, scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<>(\n           groupSort.getSort(), sortWithinGroup.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    Map<String, Object> result = new HashMap<>();\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Integer totalHits = (Integer) commandResult.get(\"totalHits\");\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];\n        int j = 0;\n        for (NamedList<Object> document : documents) {\n          Object docId = document.get(\"id\");\n          Object uniqueId = null;\n          if (docId != null)\n            uniqueId = docId.toString();\n          else\n            log.warn(\"doc {} has null 'id'\", document);\n          Float score = (Float) document.get(\"score\");\n          if (score == null) {\n            score = Float.NaN;\n          }\n          Object[] sortValues = null;\n          Object sortValuesVal = document.get(\"sortValues\");\n          if (sortValuesVal != null) {\n            sortValues = ((List) sortValuesVal).toArray();\n            for (int k = 0; k < sortValues.length; k++) {\n              SchemaField field = groupSort.getSort()[k].getField() != null ? schema.getFieldOrNull(groupSort.getSort()[k].getField()) : null;\n              if (field != null) {\n                FieldType fieldType = field.getType();\n                if (sortValues[k] != null) {\n                  sortValues[k] = fieldType.unmarshalSortValue(sortValues[k]);\n                }\n              }\n            }\n          }\n          else {\n            log.warn(\"doc {} has null 'sortValues'\", document);\n          }\n          scoreDocs[j++] = new ShardDoc(score, sortValues, uniqueId, shard);\n        }\n        result.put(key, new QueryCommandResult(new TopDocs(totalHits, scoreDocs, maxScore), matches));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Integer totalGroupHits = (Integer) groupResult.get(\"totalHits\");\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];\n        int j = 0;\n        for (NamedList<Object> document : documents) {\n          Object uniqueId = document.get(\"id\").toString();\n          Float score = (Float) document.get(\"score\");\n          if (score == null) {\n            score = Float.NaN;\n          }\n          Object[] sortValues = ((List) document.get(\"sortValues\")).toArray();\n          for (int k = 0; k < sortValues.length; k++) {\n            SchemaField field = sortWithinGroup.getSort()[k].getField() != null ? schema.getFieldOrNull(sortWithinGroup.getSort()[k].getField()) : null;\n            if (field != null) {\n              FieldType fieldType = field.getType();\n              if (sortValues[k] != null) {\n                sortValues[k] = fieldType.unmarshalSortValue(sortValues[k]);\n              }\n            }\n          }\n          scoreDocs[j++] = new ShardDoc(score, sortValues, uniqueId, shard);\n        }\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<>(Float.NaN, maxScore, totalGroupHits, scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<>(\n           groupSort.getSort(), sortWithinGroup.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":["f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2","date":1448513807,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    Map<String, Object> result = new HashMap<>();\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Integer totalHits = (Integer) commandResult.get(\"totalHits\");\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, groupSort, shard, schema);\n        final TopDocs topDocs;\n        if (sortWithinGroup.equals(Sort.RELEVANCE)) {\n          topDocs = new TopDocs(totalHits, scoreDocs, maxScore);\n        } else {\n          topDocs = new TopFieldDocs(totalHits, scoreDocs, sortWithinGroup.getSort(), maxScore);\n        }\n        result.put(key, new QueryCommandResult(topDocs, matches));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Integer totalGroupHits = (Integer) groupResult.get(\"totalHits\");\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, groupSort, shard, schema);\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<>(Float.NaN, maxScore, totalGroupHits, scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<>(\n           groupSort.getSort(), sortWithinGroup.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    Map<String, Object> result = new HashMap<>();\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Integer totalHits = (Integer) commandResult.get(\"totalHits\");\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];\n        int j = 0;\n        for (NamedList<Object> document : documents) {\n          Object docId = document.get(\"id\");\n          Object uniqueId = null;\n          if (docId != null)\n            uniqueId = docId.toString();\n          else\n            log.warn(\"doc {} has null 'id'\", document);\n          Float score = (Float) document.get(\"score\");\n          if (score == null) {\n            score = Float.NaN;\n          }\n          Object[] sortValues = null;\n          Object sortValuesVal = document.get(\"sortValues\");\n          if (sortValuesVal != null) {\n            sortValues = ((List) sortValuesVal).toArray();\n            for (int k = 0; k < sortValues.length; k++) {\n              SchemaField field = groupSort.getSort()[k].getField() != null ? schema.getFieldOrNull(groupSort.getSort()[k].getField()) : null;\n              if (field != null) {\n                FieldType fieldType = field.getType();\n                if (sortValues[k] != null) {\n                  sortValues[k] = fieldType.unmarshalSortValue(sortValues[k]);\n                }\n              }\n            }\n          }\n          else {\n            log.warn(\"doc {} has null 'sortValues'\", document);\n          }\n          scoreDocs[j++] = new ShardDoc(score, sortValues, uniqueId, shard);\n        }\n        final TopDocs topDocs;\n        if (sortWithinGroup == null) {\n          topDocs = new TopDocs(totalHits, scoreDocs, maxScore);\n        } else {\n          topDocs = new TopFieldDocs(totalHits, scoreDocs, sortWithinGroup.getSort(), maxScore);\n        }\n        result.put(key, new QueryCommandResult(topDocs, matches));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Integer totalGroupHits = (Integer) groupResult.get(\"totalHits\");\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = new ScoreDoc[documents.size()];\n        int j = 0;\n        for (NamedList<Object> document : documents) {\n          Object uniqueId = document.get(\"id\").toString();\n          Float score = (Float) document.get(\"score\");\n          if (score == null) {\n            score = Float.NaN;\n          }\n          Object[] sortValues = ((List) document.get(\"sortValues\")).toArray();\n          for (int k = 0; k < sortValues.length; k++) {\n            SchemaField field = sortWithinGroup.getSort()[k].getField() != null ? schema.getFieldOrNull(sortWithinGroup.getSort()[k].getField()) : null;\n            if (field != null) {\n              FieldType fieldType = field.getType();\n              if (sortValues[k] != null) {\n                sortValues[k] = fieldType.unmarshalSortValue(sortValues[k]);\n              }\n            }\n          }\n          scoreDocs[j++] = new ShardDoc(score, sortValues, uniqueId, shard);\n        }\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<>(Float.NaN, maxScore, totalGroupHits, scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<>(\n           groupSort.getSort(), sortWithinGroup.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":["8caae639c4263eb96d3c071f3b1b3b4cf6a7a25e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8caae639c4263eb96d3c071f3b1b3b4cf6a7a25e","date":1464736344,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    Map<String, Object> result = new HashMap<>();\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Integer totalHits = (Integer) commandResult.get(\"totalHits\");\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, groupSort, shard, schema);\n        final TopDocs topDocs;\n        if (sortWithinGroup.equals(Sort.RELEVANCE)) {\n          topDocs = new TopDocs(totalHits, scoreDocs, maxScore);\n        } else {\n          topDocs = new TopFieldDocs(totalHits, scoreDocs, sortWithinGroup.getSort(), maxScore);\n        }\n        result.put(key, new QueryCommandResult(topDocs, matches));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Integer totalGroupHits = (Integer) groupResult.get(\"totalHits\");\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, sortWithinGroup, shard, schema);\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<>(Float.NaN, maxScore, totalGroupHits, scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<>(\n           groupSort.getSort(), sortWithinGroup.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    Map<String, Object> result = new HashMap<>();\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Integer totalHits = (Integer) commandResult.get(\"totalHits\");\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, groupSort, shard, schema);\n        final TopDocs topDocs;\n        if (sortWithinGroup.equals(Sort.RELEVANCE)) {\n          topDocs = new TopDocs(totalHits, scoreDocs, maxScore);\n        } else {\n          topDocs = new TopFieldDocs(totalHits, scoreDocs, sortWithinGroup.getSort(), maxScore);\n        }\n        result.put(key, new QueryCommandResult(topDocs, matches));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Integer totalGroupHits = (Integer) groupResult.get(\"totalHits\");\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, groupSort, shard, schema);\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<>(Float.NaN, maxScore, totalGroupHits, scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<>(\n           groupSort.getSort(), sortWithinGroup.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","bugFix":["5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5b8ee93140fd0efef7e101786e3ed5160a700b5f","date":1464820111,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    Map<String, Object> result = new HashMap<>();\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Integer totalHits = (Integer) commandResult.get(\"totalHits\");\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, groupSort, shard, schema);\n        final TopDocs topDocs;\n        if (sortWithinGroup.equals(Sort.RELEVANCE)) {\n          topDocs = new TopDocs(totalHits, scoreDocs, maxScore);\n        } else {\n          topDocs = new TopFieldDocs(totalHits, scoreDocs, sortWithinGroup.getSort(), maxScore);\n        }\n        result.put(key, new QueryCommandResult(topDocs, matches));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Integer totalGroupHits = (Integer) groupResult.get(\"totalHits\");\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, sortWithinGroup, shard, schema);\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<>(Float.NaN, maxScore, totalGroupHits, scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<>(\n           groupSort.getSort(), sortWithinGroup.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    Map<String, Object> result = new HashMap<>();\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Integer totalHits = (Integer) commandResult.get(\"totalHits\");\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, groupSort, shard, schema);\n        final TopDocs topDocs;\n        if (sortWithinGroup.equals(Sort.RELEVANCE)) {\n          topDocs = new TopDocs(totalHits, scoreDocs, maxScore);\n        } else {\n          topDocs = new TopFieldDocs(totalHits, scoreDocs, sortWithinGroup.getSort(), maxScore);\n        }\n        result.put(key, new QueryCommandResult(topDocs, matches));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Integer totalGroupHits = (Integer) groupResult.get(\"totalHits\");\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, groupSort, shard, schema);\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<>(Float.NaN, maxScore, totalGroupHits, scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<>(\n           groupSort.getSort(), sortWithinGroup.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","date":1464821470,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    Map<String, Object> result = new HashMap<>();\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Integer totalHits = (Integer) commandResult.get(\"totalHits\");\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, groupSort, shard, schema);\n        final TopDocs topDocs;\n        if (sortWithinGroup.equals(Sort.RELEVANCE)) {\n          topDocs = new TopDocs(totalHits, scoreDocs, maxScore);\n        } else {\n          topDocs = new TopFieldDocs(totalHits, scoreDocs, sortWithinGroup.getSort(), maxScore);\n        }\n        result.put(key, new QueryCommandResult(topDocs, matches));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Integer totalGroupHits = (Integer) groupResult.get(\"totalHits\");\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, sortWithinGroup, shard, schema);\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<>(Float.NaN, maxScore, totalGroupHits, scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<>(\n           groupSort.getSort(), sortWithinGroup.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    Map<String, Object> result = new HashMap<>();\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Integer totalHits = (Integer) commandResult.get(\"totalHits\");\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, groupSort, shard, schema);\n        final TopDocs topDocs;\n        if (sortWithinGroup.equals(Sort.RELEVANCE)) {\n          topDocs = new TopDocs(totalHits, scoreDocs, maxScore);\n        } else {\n          topDocs = new TopFieldDocs(totalHits, scoreDocs, sortWithinGroup.getSort(), maxScore);\n        }\n        result.put(key, new QueryCommandResult(topDocs, matches));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Integer totalGroupHits = (Integer) groupResult.get(\"totalHits\");\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, groupSort, shard, schema);\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<>(Float.NaN, maxScore, totalGroupHits, scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<>(\n           groupSort.getSort(), sortWithinGroup.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    Map<String, Object> result = new HashMap<>();\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Integer totalHits = (Integer) commandResult.get(\"totalHits\");\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, groupSort, shard, schema);\n        final TopDocs topDocs;\n        if (sortWithinGroup.equals(Sort.RELEVANCE)) {\n          topDocs = new TopDocs(totalHits, scoreDocs, maxScore);\n        } else {\n          topDocs = new TopFieldDocs(totalHits, scoreDocs, sortWithinGroup.getSort(), maxScore);\n        }\n        result.put(key, new QueryCommandResult(topDocs, matches));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Integer totalGroupHits = (Integer) groupResult.get(\"totalHits\");\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, sortWithinGroup, shard, schema);\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<>(Float.NaN, maxScore, totalGroupHits, scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<>(\n           groupSort.getSort(), sortWithinGroup.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    Map<String, Object> result = new HashMap<>();\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Integer totalHits = (Integer) commandResult.get(\"totalHits\");\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, groupSort, shard, schema);\n        final TopDocs topDocs;\n        if (sortWithinGroup.equals(Sort.RELEVANCE)) {\n          topDocs = new TopDocs(totalHits, scoreDocs, maxScore);\n        } else {\n          topDocs = new TopFieldDocs(totalHits, scoreDocs, sortWithinGroup.getSort(), maxScore);\n        }\n        result.put(key, new QueryCommandResult(topDocs, matches));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Integer totalGroupHits = (Integer) groupResult.get(\"totalHits\");\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, groupSort, shard, schema);\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<>(Float.NaN, maxScore, totalGroupHits, scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<>(\n           groupSort.getSort(), sortWithinGroup.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f7a37353edeecde86a45f4895ef74901a0158b","date":1492601294,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort withinGroupSort, String shard) {\n    Map<String, Object> result = new HashMap<>();\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Integer totalHits = (Integer) commandResult.get(\"totalHits\");\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, groupSort, shard, schema);\n        final TopDocs topDocs;\n        if (withinGroupSort.equals(Sort.RELEVANCE)) {\n          topDocs = new TopDocs(totalHits, scoreDocs, maxScore);\n        } else {\n          topDocs = new TopFieldDocs(totalHits, scoreDocs, withinGroupSort.getSort(), maxScore);\n        }\n        result.put(key, new QueryCommandResult(topDocs, matches));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Integer totalGroupHits = (Integer) groupResult.get(\"totalHits\");\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, withinGroupSort, shard, schema);\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<>(Float.NaN, maxScore, totalGroupHits, scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<>(\n           groupSort.getSort(), withinGroupSort.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    Map<String, Object> result = new HashMap<>();\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Integer totalHits = (Integer) commandResult.get(\"totalHits\");\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, groupSort, shard, schema);\n        final TopDocs topDocs;\n        if (sortWithinGroup.equals(Sort.RELEVANCE)) {\n          topDocs = new TopDocs(totalHits, scoreDocs, maxScore);\n        } else {\n          topDocs = new TopFieldDocs(totalHits, scoreDocs, sortWithinGroup.getSort(), maxScore);\n        }\n        result.put(key, new QueryCommandResult(topDocs, matches));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Integer totalGroupHits = (Integer) groupResult.get(\"totalHits\");\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, sortWithinGroup, shard, schema);\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<>(Float.NaN, maxScore, totalGroupHits, scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<>(\n           groupSort.getSort(), sortWithinGroup.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":["f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort withinGroupSort, String shard) {\n    Map<String, Object> result = new HashMap<>();\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Integer totalHits = (Integer) commandResult.get(\"totalHits\");\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, groupSort, shard, schema);\n        final TopDocs topDocs;\n        if (withinGroupSort.equals(Sort.RELEVANCE)) {\n          topDocs = new TopDocs(totalHits, scoreDocs, maxScore);\n        } else {\n          topDocs = new TopFieldDocs(totalHits, scoreDocs, withinGroupSort.getSort(), maxScore);\n        }\n        result.put(key, new QueryCommandResult(topDocs, matches));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Integer totalGroupHits = (Integer) groupResult.get(\"totalHits\");\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, withinGroupSort, shard, schema);\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<>(Float.NaN, maxScore, totalGroupHits, scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<>(\n           groupSort.getSort(), withinGroupSort.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    Map<String, Object> result = new HashMap<>();\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Integer totalHits = (Integer) commandResult.get(\"totalHits\");\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, groupSort, shard, schema);\n        final TopDocs topDocs;\n        if (sortWithinGroup.equals(Sort.RELEVANCE)) {\n          topDocs = new TopDocs(totalHits, scoreDocs, maxScore);\n        } else {\n          topDocs = new TopFieldDocs(totalHits, scoreDocs, sortWithinGroup.getSort(), maxScore);\n        }\n        result.put(key, new QueryCommandResult(topDocs, matches));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Integer totalGroupHits = (Integer) groupResult.get(\"totalHits\");\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, sortWithinGroup, shard, schema);\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<>(Float.NaN, maxScore, totalGroupHits, scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<>(\n           groupSort.getSort(), sortWithinGroup.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6","date":1498031702,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort withinGroupSort, String shard) {\n    Map<String, Object> result = new HashMap<>();\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Number totalHits = (Number) commandResult.get(\"totalHits\"); // previously Integer now Long\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, groupSort, shard, schema);\n        final TopDocs topDocs;\n        if (withinGroupSort.equals(Sort.RELEVANCE)) {\n          topDocs = new TopDocs(totalHits.longValue(), scoreDocs, maxScore);\n        } else {\n          topDocs = new TopFieldDocs(totalHits.longValue(), scoreDocs, withinGroupSort.getSort(), maxScore);\n        }\n        result.put(key, new QueryCommandResult(topDocs, matches));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Number totalGroupHits = (Number) groupResult.get(\"totalHits\"); // // previously Integer now Long\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, withinGroupSort, shard, schema);\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<>(Float.NaN, maxScore, totalGroupHits.longValue(), scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<>(\n           groupSort.getSort(), withinGroupSort.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort withinGroupSort, String shard) {\n    Map<String, Object> result = new HashMap<>();\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Integer totalHits = (Integer) commandResult.get(\"totalHits\");\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, groupSort, shard, schema);\n        final TopDocs topDocs;\n        if (withinGroupSort.equals(Sort.RELEVANCE)) {\n          topDocs = new TopDocs(totalHits, scoreDocs, maxScore);\n        } else {\n          topDocs = new TopFieldDocs(totalHits, scoreDocs, withinGroupSort.getSort(), maxScore);\n        }\n        result.put(key, new QueryCommandResult(topDocs, matches));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Integer totalGroupHits = (Integer) groupResult.get(\"totalHits\");\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, withinGroupSort, shard, schema);\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<>(Float.NaN, maxScore, totalGroupHits, scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<>(\n           groupSort.getSort(), withinGroupSort.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","bugFix":["55f7a37353edeecde86a45f4895ef74901a0158b","634f330c54fd3f9f491d52036dc3f40b4f4d8934","6d9f51b2e3d1edc63fd6d1172bb959a4b9c02dea","ccc08aa684aee4964baee0644a6ba047bfd70829"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort withinGroupSort, String shard) {\n    Map<String, Object> result = new HashMap<>();\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Number totalHits = (Number) commandResult.get(\"totalHits\"); // previously Integer now Long\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, groupSort, shard, schema);\n        final TopDocs topDocs;\n        if (withinGroupSort.equals(Sort.RELEVANCE)) {\n          topDocs = new TopDocs(totalHits.longValue(), scoreDocs, maxScore);\n        } else {\n          topDocs = new TopFieldDocs(totalHits.longValue(), scoreDocs, withinGroupSort.getSort(), maxScore);\n        }\n        result.put(key, new QueryCommandResult(topDocs, matches));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Number totalGroupHits = (Number) groupResult.get(\"totalHits\"); // // previously Integer now Long\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, withinGroupSort, shard, schema);\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<>(Float.NaN, maxScore, totalGroupHits.longValue(), scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<>(\n           groupSort.getSort(), withinGroupSort.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort withinGroupSort, String shard) {\n    Map<String, Object> result = new HashMap<>();\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Integer totalHits = (Integer) commandResult.get(\"totalHits\");\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, groupSort, shard, schema);\n        final TopDocs topDocs;\n        if (withinGroupSort.equals(Sort.RELEVANCE)) {\n          topDocs = new TopDocs(totalHits, scoreDocs, maxScore);\n        } else {\n          topDocs = new TopFieldDocs(totalHits, scoreDocs, withinGroupSort.getSort(), maxScore);\n        }\n        result.put(key, new QueryCommandResult(topDocs, matches));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Integer totalGroupHits = (Integer) groupResult.get(\"totalHits\");\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, withinGroupSort, shard, schema);\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<>(Float.NaN, maxScore, totalGroupHits, scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<>(\n           groupSort.getSort(), withinGroupSort.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort withinGroupSort, String shard) {\n    Map<String, Object> result = new HashMap<>();\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Number totalHits = (Number) commandResult.get(\"totalHits\"); // previously Integer now Long\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, groupSort, shard, schema);\n        final TopDocs topDocs;\n        if (withinGroupSort.equals(Sort.RELEVANCE)) {\n          topDocs = new TopDocs(totalHits.longValue(), scoreDocs, maxScore);\n        } else {\n          topDocs = new TopFieldDocs(totalHits.longValue(), scoreDocs, withinGroupSort.getSort(), maxScore);\n        }\n        result.put(key, new QueryCommandResult(topDocs, matches));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Number totalGroupHits = (Number) groupResult.get(\"totalHits\"); // // previously Integer now Long\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, withinGroupSort, shard, schema);\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<>(Float.NaN, maxScore, totalGroupHits.longValue(), scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<>(\n           groupSort.getSort(), withinGroupSort.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort withinGroupSort, String shard) {\n    Map<String, Object> result = new HashMap<>();\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Integer totalHits = (Integer) commandResult.get(\"totalHits\");\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, groupSort, shard, schema);\n        final TopDocs topDocs;\n        if (withinGroupSort.equals(Sort.RELEVANCE)) {\n          topDocs = new TopDocs(totalHits, scoreDocs, maxScore);\n        } else {\n          topDocs = new TopFieldDocs(totalHits, scoreDocs, withinGroupSort.getSort(), maxScore);\n        }\n        result.put(key, new QueryCommandResult(topDocs, matches));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Integer totalGroupHits = (Integer) groupResult.get(\"totalHits\");\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, withinGroupSort, shard, schema);\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<>(Float.NaN, maxScore, totalGroupHits, scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<>(\n           groupSort.getSort(), withinGroupSort.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a80a37ae73034270b57bfd57a44f8fcadc952fa0","date":1515440719,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","sourceNew":"  @Override\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort withinGroupSort, String shard) {\n    Map<String, Object> result = new HashMap<>();\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Number totalHits = (Number) commandResult.get(\"totalHits\"); // previously Integer now Long\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, groupSort, shard, schema);\n        final TopDocs topDocs;\n        if (withinGroupSort.equals(Sort.RELEVANCE)) {\n          topDocs = new TopDocs(totalHits.longValue(), scoreDocs, maxScore);\n        } else {\n          topDocs = new TopFieldDocs(totalHits.longValue(), scoreDocs, withinGroupSort.getSort(), maxScore);\n        }\n        result.put(key, new QueryCommandResult(topDocs, matches));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Number totalGroupHits = (Number) groupResult.get(\"totalHits\"); // // previously Integer now Long\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, withinGroupSort, shard, schema);\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<>(Float.NaN, maxScore, totalGroupHits.longValue(), scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<>(\n           groupSort.getSort(), withinGroupSort.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort withinGroupSort, String shard) {\n    Map<String, Object> result = new HashMap<>();\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Number totalHits = (Number) commandResult.get(\"totalHits\"); // previously Integer now Long\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, groupSort, shard, schema);\n        final TopDocs topDocs;\n        if (withinGroupSort.equals(Sort.RELEVANCE)) {\n          topDocs = new TopDocs(totalHits.longValue(), scoreDocs, maxScore);\n        } else {\n          topDocs = new TopFieldDocs(totalHits.longValue(), scoreDocs, withinGroupSort.getSort(), maxScore);\n        }\n        result.put(key, new QueryCommandResult(topDocs, matches));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Number totalGroupHits = (Number) groupResult.get(\"totalHits\"); // // previously Integer now Long\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, withinGroupSort, shard, schema);\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<>(Float.NaN, maxScore, totalGroupHits.longValue(), scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<>(\n           groupSort.getSort(), withinGroupSort.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","sourceNew":"  @Override\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort withinGroupSort, String shard) {\n    Map<String, Object> result = new HashMap<>();\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Number totalHits = (Number) commandResult.get(\"totalHits\"); // previously Integer now Long\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, groupSort, shard, schema);\n        final TopDocs topDocs;\n        if (withinGroupSort.equals(Sort.RELEVANCE)) {\n          topDocs = new TopDocs(totalHits.longValue(), scoreDocs, maxScore);\n        } else {\n          topDocs = new TopFieldDocs(totalHits.longValue(), scoreDocs, withinGroupSort.getSort(), maxScore);\n        }\n        result.put(key, new QueryCommandResult(topDocs, matches));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Number totalGroupHits = (Number) groupResult.get(\"totalHits\"); // // previously Integer now Long\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, withinGroupSort, shard, schema);\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<>(Float.NaN, maxScore, totalGroupHits.longValue(), scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<>(\n           groupSort.getSort(), withinGroupSort.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort withinGroupSort, String shard) {\n    Map<String, Object> result = new HashMap<>();\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Number totalHits = (Number) commandResult.get(\"totalHits\"); // previously Integer now Long\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, groupSort, shard, schema);\n        final TopDocs topDocs;\n        if (withinGroupSort.equals(Sort.RELEVANCE)) {\n          topDocs = new TopDocs(totalHits.longValue(), scoreDocs, maxScore);\n        } else {\n          topDocs = new TopFieldDocs(totalHits.longValue(), scoreDocs, withinGroupSort.getSort(), maxScore);\n        }\n        result.put(key, new QueryCommandResult(topDocs, matches));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Number totalGroupHits = (Number) groupResult.get(\"totalHits\"); // // previously Integer now Long\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, withinGroupSort, shard, schema);\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<>(Float.NaN, maxScore, totalGroupHits.longValue(), scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<>(\n           groupSort.getSort(), withinGroupSort.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81fff83bdb893c1471efd78f6a9a3ce4f98120b9","date":1531895937,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","sourceNew":"  @Override\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort withinGroupSort, String shard) {\n    Map<String, Object> result = new HashMap<>();\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Number totalHits = (Number) commandResult.get(\"totalHits\"); // previously Integer now Long\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, groupSort, shard, schema);\n        final TopDocs topDocs;\n        if (withinGroupSort.equals(Sort.RELEVANCE)) {\n          topDocs = new TopDocs(totalHits.longValue(), scoreDocs);\n        } else {\n          topDocs = new TopFieldDocs(totalHits.longValue(), scoreDocs, withinGroupSort.getSort());\n        }\n        result.put(key, new QueryCommandResult(topDocs, matches, maxScore));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Number totalGroupHits = (Number) groupResult.get(\"totalHits\"); // // previously Integer now Long\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, withinGroupSort, shard, schema);\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<>(Float.NaN, maxScore, totalGroupHits.longValue(), scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<>(\n           groupSort.getSort(), withinGroupSort.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort withinGroupSort, String shard) {\n    Map<String, Object> result = new HashMap<>();\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Number totalHits = (Number) commandResult.get(\"totalHits\"); // previously Integer now Long\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, groupSort, shard, schema);\n        final TopDocs topDocs;\n        if (withinGroupSort.equals(Sort.RELEVANCE)) {\n          topDocs = new TopDocs(totalHits.longValue(), scoreDocs, maxScore);\n        } else {\n          topDocs = new TopFieldDocs(totalHits.longValue(), scoreDocs, withinGroupSort.getSort(), maxScore);\n        }\n        result.put(key, new QueryCommandResult(topDocs, matches));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Number totalGroupHits = (Number) groupResult.get(\"totalHits\"); // // previously Integer now Long\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, withinGroupSort, shard, schema);\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<>(Float.NaN, maxScore, totalGroupHits.longValue(), scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<>(\n           groupSort.getSort(), withinGroupSort.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","sourceNew":"  @Override\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort withinGroupSort, String shard) {\n    Map<String, Object> result = new HashMap<>();\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Number totalHits = (Number) commandResult.get(\"totalHits\"); // previously Integer now Long\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, groupSort, shard, schema);\n        final TopDocs topDocs;\n        if (withinGroupSort.equals(Sort.RELEVANCE)) {\n          topDocs = new TopDocs(totalHits.longValue(), scoreDocs);\n        } else {\n          topDocs = new TopFieldDocs(totalHits.longValue(), scoreDocs, withinGroupSort.getSort());\n        }\n        result.put(key, new QueryCommandResult(topDocs, matches, maxScore));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Number totalGroupHits = (Number) groupResult.get(\"totalHits\"); // // previously Integer now Long\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, withinGroupSort, shard, schema);\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<>(Float.NaN, maxScore, totalGroupHits.longValue(), scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<>(\n           groupSort.getSort(), withinGroupSort.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort withinGroupSort, String shard) {\n    Map<String, Object> result = new HashMap<>();\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Number totalHits = (Number) commandResult.get(\"totalHits\"); // previously Integer now Long\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, groupSort, shard, schema);\n        final TopDocs topDocs;\n        if (withinGroupSort.equals(Sort.RELEVANCE)) {\n          topDocs = new TopDocs(totalHits.longValue(), scoreDocs, maxScore);\n        } else {\n          topDocs = new TopFieldDocs(totalHits.longValue(), scoreDocs, withinGroupSort.getSort(), maxScore);\n        }\n        result.put(key, new QueryCommandResult(topDocs, matches));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Number totalGroupHits = (Number) groupResult.get(\"totalHits\"); // // previously Integer now Long\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, withinGroupSort, shard, schema);\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<>(Float.NaN, maxScore, totalGroupHits.longValue(), scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<>(\n           groupSort.getSort(), withinGroupSort.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","sourceNew":"  @Override\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort withinGroupSort, String shard) {\n    Map<String, Object> result = new HashMap<>();\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Number totalHits = (Number) commandResult.get(\"totalHits\"); // previously Integer now Long\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, groupSort, shard, schema);\n        final TopDocs topDocs;\n        if (withinGroupSort.equals(Sort.RELEVANCE)) {\n          topDocs = new TopDocs(new TotalHits(totalHits.longValue(), TotalHits.Relation.EQUAL_TO), scoreDocs);\n        } else {\n          topDocs = new TopFieldDocs(new TotalHits(totalHits.longValue(), TotalHits.Relation.EQUAL_TO), scoreDocs, withinGroupSort.getSort());\n        }\n        result.put(key, new QueryCommandResult(topDocs, matches, maxScore));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Number totalGroupHits = (Number) groupResult.get(\"totalHits\"); // // previously Integer now Long\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, withinGroupSort, shard, schema);\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<>(Float.NaN, maxScore, new TotalHits(totalGroupHits.longValue(), TotalHits.Relation.EQUAL_TO), scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<>(\n           groupSort.getSort(), withinGroupSort.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort withinGroupSort, String shard) {\n    Map<String, Object> result = new HashMap<>();\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Number totalHits = (Number) commandResult.get(\"totalHits\"); // previously Integer now Long\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, groupSort, shard, schema);\n        final TopDocs topDocs;\n        if (withinGroupSort.equals(Sort.RELEVANCE)) {\n          topDocs = new TopDocs(totalHits.longValue(), scoreDocs);\n        } else {\n          topDocs = new TopFieldDocs(totalHits.longValue(), scoreDocs, withinGroupSort.getSort());\n        }\n        result.put(key, new QueryCommandResult(topDocs, matches, maxScore));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Number totalGroupHits = (Number) groupResult.get(\"totalHits\"); // // previously Integer now Long\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, withinGroupSort, shard, schema);\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<>(Float.NaN, maxScore, totalGroupHits.longValue(), scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<>(\n           groupSort.getSort(), withinGroupSort.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50dfd19525c8d73e856dca6edb64b7aea074037f","date":1591579225,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","sourceNew":"  @Override\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort withinGroupSort, String shard) {\n    Map<String, Object> result = new HashMap<>();\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Number totalHits = (Number) commandResult.get(\"totalHits\"); // previously Integer now Long\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, groupSort, shard, schema);\n        final TopDocs topDocs;\n        if (withinGroupSort.equals(Sort.RELEVANCE)) {\n          topDocs = new TopDocs(new TotalHits(totalHits.longValue(), TotalHits.Relation.EQUAL_TO), scoreDocs);\n        } else {\n          topDocs = new TopFieldDocs(new TotalHits(totalHits.longValue(), TotalHits.Relation.EQUAL_TO), scoreDocs, withinGroupSort.getSort());\n        }\n        result.put(key, new QueryCommandResult(topDocs, matches, maxScore));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Number totalGroupHits = (Number) groupResult.get(\"totalHits\"); // // previously Integer now Long\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, withinGroupSort, shard, schema);\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<>(Float.NaN, maxScore, new TotalHits(totalGroupHits.longValue(), TotalHits.Relation.EQUAL_TO), scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings({\"unchecked\"})\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<>(\n           groupSort.getSort(), withinGroupSort.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, ?> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort withinGroupSort, String shard) {\n    Map<String, Object> result = new HashMap<>();\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n\n    for (Map.Entry<String, NamedList> entry : shardResponse) {\n      String key = entry.getKey();\n      NamedList commandResult = entry.getValue();\n      Integer totalGroupedHitCount = (Integer) commandResult.get(\"totalGroupedHitCount\");\n      Number totalHits = (Number) commandResult.get(\"totalHits\"); // previously Integer now Long\n      if (totalHits != null) {\n        Integer matches = (Integer) commandResult.get(\"matches\");\n        Float maxScore = (Float) commandResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) commandResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, groupSort, shard, schema);\n        final TopDocs topDocs;\n        if (withinGroupSort.equals(Sort.RELEVANCE)) {\n          topDocs = new TopDocs(new TotalHits(totalHits.longValue(), TotalHits.Relation.EQUAL_TO), scoreDocs);\n        } else {\n          topDocs = new TopFieldDocs(new TotalHits(totalHits.longValue(), TotalHits.Relation.EQUAL_TO), scoreDocs, withinGroupSort.getSort());\n        }\n        result.put(key, new QueryCommandResult(topDocs, matches, maxScore));\n        continue;\n      }\n\n      Integer totalHitCount = (Integer) commandResult.get(\"totalHitCount\");\n\n      List<GroupDocs<BytesRef>> groupDocs = new ArrayList<>();\n      for (int i = 2; i < commandResult.size(); i++) {\n        String groupValue = commandResult.getName(i);\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);\n        Number totalGroupHits = (Number) groupResult.get(\"totalHits\"); // // previously Integer now Long\n        Float maxScore = (Float) groupResult.get(\"maxScore\");\n        if (maxScore == null) {\n          maxScore = Float.NaN;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<NamedList<Object>> documents = (List<NamedList<Object>>) groupResult.get(\"documents\");\n        ScoreDoc[] scoreDocs = transformToNativeShardDoc(documents, withinGroupSort, shard, schema);\n\n        BytesRef groupValueRef = groupValue != null ? new BytesRef(groupValue) : null;\n        groupDocs.add(new GroupDocs<>(Float.NaN, maxScore, new TotalHits(totalGroupHits.longValue(), TotalHits.Relation.EQUAL_TO), scoreDocs, groupValueRef, null));\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      GroupDocs<BytesRef>[] groupDocsArr = groupDocs.toArray(new GroupDocs[groupDocs.size()]);\n      TopGroups<BytesRef> topGroups = new TopGroups<>(\n           groupSort.getSort(), withinGroupSort.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr, Float.NaN\n      );\n\n      result.put(key, topGroups);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["8caae639c4263eb96d3c071f3b1b3b4cf6a7a25e"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["85d41890f2bad879e6a04c6dd7d2cf276f973994","4e34571ed12dcd55add872aeae020605f84b2ee7"],"b94236357aaa22b76c10629851fe4e376e0cea82":["28288370235ed02234a64753cdbf0c6ec096304a","a80a37ae73034270b57bfd57a44f8fcadc952fa0"],"8caae639c4263eb96d3c071f3b1b3b4cf6a7a25e":["5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2"],"27ab7b234eab0cbc020836989b96ed430e1065bb":["4e34571ed12dcd55add872aeae020605f84b2ee7","a485770e19d1ea7a458aa6b08bd2ff0c4b5bec25"],"ccc08aa684aee4964baee0644a6ba047bfd70829":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6":["55f7a37353edeecde86a45f4895ef74901a0158b"],"a80a37ae73034270b57bfd57a44f8fcadc952fa0":["28288370235ed02234a64753cdbf0c6ec096304a"],"5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2":["6d9f51b2e3d1edc63fd6d1172bb959a4b9c02dea"],"55f7a37353edeecde86a45f4895ef74901a0158b":["8caae639c4263eb96d3c071f3b1b3b4cf6a7a25e"],"85d41890f2bad879e6a04c6dd7d2cf276f973994":["af20870f6eab3807c968eec0b24e0c4358d0c1e5"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["b94236357aaa22b76c10629851fe4e376e0cea82","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"af20870f6eab3807c968eec0b24e0c4358d0c1e5":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["27ab7b234eab0cbc020836989b96ed430e1065bb"],"4e34571ed12dcd55add872aeae020605f84b2ee7":["7530de27b87b961b51f01bd1299b7004d46e8823"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2","8caae639c4263eb96d3c071f3b1b3b4cf6a7a25e"],"a485770e19d1ea7a458aa6b08bd2ff0c4b5bec25":["4e34571ed12dcd55add872aeae020605f84b2ee7"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6"],"28288370235ed02234a64753cdbf0c6ec096304a":["55f7a37353edeecde86a45f4895ef74901a0158b","f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2","8caae639c4263eb96d3c071f3b1b3b4cf6a7a25e"],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":["5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2","5b8ee93140fd0efef7e101786e3ed5160a700b5f"],"50dfd19525c8d73e856dca6edb64b7aea074037f":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"6d9f51b2e3d1edc63fd6d1172bb959a4b9c02dea":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["b94236357aaa22b76c10629851fe4e376e0cea82"],"7530de27b87b961b51f01bd1299b7004d46e8823":["85d41890f2bad879e6a04c6dd7d2cf276f973994"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["50dfd19525c8d73e856dca6edb64b7aea074037f"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b94236357aaa22b76c10629851fe4e376e0cea82":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"8caae639c4263eb96d3c071f3b1b3b4cf6a7a25e":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","55f7a37353edeecde86a45f4895ef74901a0158b","5b8ee93140fd0efef7e101786e3ed5160a700b5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"27ab7b234eab0cbc020836989b96ed430e1065bb":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a80a37ae73034270b57bfd57a44f8fcadc952fa0":["b94236357aaa22b76c10629851fe4e376e0cea82"],"ccc08aa684aee4964baee0644a6ba047bfd70829":["af20870f6eab3807c968eec0b24e0c4358d0c1e5"],"f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2":["8caae639c4263eb96d3c071f3b1b3b4cf6a7a25e","5b8ee93140fd0efef7e101786e3ed5160a700b5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"55f7a37353edeecde86a45f4895ef74901a0158b":["f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6","28288370235ed02234a64753cdbf0c6ec096304a"],"85d41890f2bad879e6a04c6dd7d2cf276f973994":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"af20870f6eab3807c968eec0b24e0c4358d0c1e5":["85d41890f2bad879e6a04c6dd7d2cf276f973994"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["50dfd19525c8d73e856dca6edb64b7aea074037f"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6d9f51b2e3d1edc63fd6d1172bb959a4b9c02dea"],"4e34571ed12dcd55add872aeae020605f84b2ee7":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","27ab7b234eab0cbc020836989b96ed430e1065bb","a485770e19d1ea7a458aa6b08bd2ff0c4b5bec25"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"a485770e19d1ea7a458aa6b08bd2ff0c4b5bec25":["27ab7b234eab0cbc020836989b96ed430e1065bb"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["b94236357aaa22b76c10629851fe4e376e0cea82","a80a37ae73034270b57bfd57a44f8fcadc952fa0"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":[],"50dfd19525c8d73e856dca6edb64b7aea074037f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6d9f51b2e3d1edc63fd6d1172bb959a4b9c02dea":["5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","83788ad129a5154d5c6562c4e8ce3db48793aada"],"7530de27b87b961b51f01bd1299b7004d46e8823":["4e34571ed12dcd55add872aeae020605f84b2ee7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}