{"path":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testWrongStreamType().mjava","commits":[{"id":"db36cab313d5b26c5e9f23f828d863efc8b0281b","date":1327501086,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testWrongStreamType().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testWrongStreamType() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    try{\n      // Load plain text specifying another mime type, should fail\n      loadLocal(\"extraction/version_control.txt\", \n              \"literal.id\", \"one\",\n              ExtractingParams.STREAM_TYPE, \"application/pdf\"\n      );\n      fail(\"SolrException is expected because wrong parser specified for the file type\");\n    }\n    catch(Exception expected){}\n\n    try{\n      // Load plain text specifying non existing mimetype, should fail\n      loadLocal(\"extraction/version_control.txt\", \n              \"literal.id\", \"one\",\n              ExtractingParams.STREAM_TYPE, \"foo/bar\"\n      );\n      fail(\"SolrException is expected because nonexsisting parser specified\");\n    }\n    catch(Exception expected){}\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testWrongStreamType().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testWrongStreamType() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    try{\n      // Load plain text specifying another mime type, should fail\n      loadLocal(\"extraction/version_control.txt\", \n              \"literal.id\", \"one\",\n              ExtractingParams.STREAM_TYPE, \"application/pdf\"\n      );\n      fail(\"SolrException is expected because wrong parser specified for the file type\");\n    }\n    catch(Exception expected){}\n\n    try{\n      // Load plain text specifying non existing mimetype, should fail\n      loadLocal(\"extraction/version_control.txt\", \n              \"literal.id\", \"one\",\n              ExtractingParams.STREAM_TYPE, \"foo/bar\"\n      );\n      fail(\"SolrException is expected because nonexsisting parser specified\");\n    }\n    catch(Exception expected){}\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testWrongStreamType().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testWrongStreamType() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    try{\n      // Load plain text specifying another mime type, should fail\n      loadLocal(\"extraction/version_control.txt\", \n              \"literal.id\", \"one\",\n              ExtractingParams.STREAM_TYPE, \"application/pdf\"\n      );\n      fail(\"SolrException is expected because wrong parser specified for the file type\");\n    }\n    catch(Exception expected){}\n\n    try{\n      // Load plain text specifying non existing mimetype, should fail\n      loadLocal(\"extraction/version_control.txt\", \n              \"literal.id\", \"one\",\n              ExtractingParams.STREAM_TYPE, \"foo/bar\"\n      );\n      fail(\"SolrException is expected because nonexsisting parser specified\");\n    }\n    catch(Exception expected){}\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testWrongStreamType().mjava","pathOld":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testWrongStreamType().mjava","sourceNew":"  @Test\n  public void testWrongStreamType() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    expectThrows(Exception.class, () -> {\n      // Load plain text specifying another mime type, should fail\n      loadLocal(\"extraction/version_control.txt\",\n          \"literal.id\", \"one\",\n          ExtractingParams.STREAM_TYPE, \"application/pdf\"\n      );\n    });\n\n    expectThrows(Exception.class, () -> {\n      // Load plain text specifying non existing mimetype, should fail\n      loadLocal(\"extraction/version_control.txt\",\n          \"literal.id\", \"one\",\n          ExtractingParams.STREAM_TYPE, \"foo/bar\"\n      );\n    });\n  }\n\n","sourceOld":"  @Test\n  public void testWrongStreamType() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    try{\n      // Load plain text specifying another mime type, should fail\n      loadLocal(\"extraction/version_control.txt\", \n              \"literal.id\", \"one\",\n              ExtractingParams.STREAM_TYPE, \"application/pdf\"\n      );\n      fail(\"SolrException is expected because wrong parser specified for the file type\");\n    }\n    catch(Exception expected){}\n\n    try{\n      // Load plain text specifying non existing mimetype, should fail\n      loadLocal(\"extraction/version_control.txt\", \n              \"literal.id\", \"one\",\n              ExtractingParams.STREAM_TYPE, \"foo/bar\"\n      );\n      fail(\"SolrException is expected because nonexsisting parser specified\");\n    }\n    catch(Exception expected){}\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testWrongStreamType().mjava","pathOld":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testWrongStreamType().mjava","sourceNew":"  @Test\n  public void testWrongStreamType() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    expectThrows(Exception.class, () -> {\n      // Load plain text specifying another mime type, should fail\n      loadLocal(\"extraction/version_control.txt\",\n          \"literal.id\", \"one\",\n          ExtractingParams.STREAM_TYPE, \"application/pdf\"\n      );\n    });\n\n    expectThrows(Exception.class, () -> {\n      // Load plain text specifying non existing mimetype, should fail\n      loadLocal(\"extraction/version_control.txt\",\n          \"literal.id\", \"one\",\n          ExtractingParams.STREAM_TYPE, \"foo/bar\"\n      );\n    });\n  }\n\n","sourceOld":"  @Test\n  public void testWrongStreamType() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    try{\n      // Load plain text specifying another mime type, should fail\n      loadLocal(\"extraction/version_control.txt\", \n              \"literal.id\", \"one\",\n              ExtractingParams.STREAM_TYPE, \"application/pdf\"\n      );\n      fail(\"SolrException is expected because wrong parser specified for the file type\");\n    }\n    catch(Exception expected){}\n\n    try{\n      // Load plain text specifying non existing mimetype, should fail\n      loadLocal(\"extraction/version_control.txt\", \n              \"literal.id\", \"one\",\n              ExtractingParams.STREAM_TYPE, \"foo/bar\"\n      );\n      fail(\"SolrException is expected because nonexsisting parser specified\");\n    }\n    catch(Exception expected){}\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testWrongStreamType().mjava","pathOld":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/ExtractingRequestHandlerTest#testWrongStreamType().mjava","sourceNew":"  @Test\n  public void testWrongStreamType() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    expectThrows(Exception.class, () -> {\n      // Load plain text specifying another mime type, should fail\n      loadLocal(\"extraction/version_control.txt\",\n          \"literal.id\", \"one\",\n          ExtractingParams.STREAM_TYPE, \"application/pdf\"\n      );\n    });\n\n    expectThrows(Exception.class, () -> {\n      // Load plain text specifying non existing mimetype, should fail\n      loadLocal(\"extraction/version_control.txt\",\n          \"literal.id\", \"one\",\n          ExtractingParams.STREAM_TYPE, \"foo/bar\"\n      );\n    });\n  }\n\n","sourceOld":"  @Test\n  public void testWrongStreamType() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n\n    try{\n      // Load plain text specifying another mime type, should fail\n      loadLocal(\"extraction/version_control.txt\", \n              \"literal.id\", \"one\",\n              ExtractingParams.STREAM_TYPE, \"application/pdf\"\n      );\n      fail(\"SolrException is expected because wrong parser specified for the file type\");\n    }\n    catch(Exception expected){}\n\n    try{\n      // Load plain text specifying non existing mimetype, should fail\n      loadLocal(\"extraction/version_control.txt\", \n              \"literal.id\", \"one\",\n              ExtractingParams.STREAM_TYPE, \"foo/bar\"\n      );\n      fail(\"SolrException is expected because nonexsisting parser specified\");\n    }\n    catch(Exception expected){}\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","db36cab313d5b26c5e9f23f828d863efc8b0281b"],"db36cab313d5b26c5e9f23f828d863efc8b0281b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","db36cab313d5b26c5e9f23f828d863efc8b0281b"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["db36cab313d5b26c5e9f23f828d863efc8b0281b"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["db36cab313d5b26c5e9f23f828d863efc8b0281b","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"f8061ddd97f3352007d927dae445884a6f3d857b":["db36cab313d5b26c5e9f23f828d863efc8b0281b","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1a307447328c95a00248512b40d7a5ff12ecd6a"]},"commit2Childs":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"db36cab313d5b26c5e9f23f828d863efc8b0281b":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","db36cab313d5b26c5e9f23f828d863efc8b0281b","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}