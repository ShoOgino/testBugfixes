{"path":"lucene/src/java/org/apache/lucene/index/TermsHashPerField#quickSort(RawPostingList[],int,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermsHashPerField#quickSort(RawPostingList[],int,int).mjava","pathOld":"src/java/org/apache/lucene/index/TermsHashPerField#quickSort(RawPostingList[],int,int).mjava","sourceNew":"  void quickSort(RawPostingList[] postings, int lo, int hi) {\n    if (lo >= hi)\n      return;\n    else if (hi == 1+lo) {\n      if (comparePostings(postings[lo], postings[hi]) > 0) {\n        final RawPostingList tmp = postings[lo];\n        postings[lo] = postings[hi];\n        postings[hi] = tmp;\n      }\n      return;\n    }\n\n    int mid = (lo + hi) >>> 1;\n\n    if (comparePostings(postings[lo], postings[mid]) > 0) {\n      RawPostingList tmp = postings[lo];\n      postings[lo] = postings[mid];\n      postings[mid] = tmp;\n    }\n\n    if (comparePostings(postings[mid], postings[hi]) > 0) {\n      RawPostingList tmp = postings[mid];\n      postings[mid] = postings[hi];\n      postings[hi] = tmp;\n\n      if (comparePostings(postings[lo], postings[mid]) > 0) {\n        RawPostingList tmp2 = postings[lo];\n        postings[lo] = postings[mid];\n        postings[mid] = tmp2;\n      }\n    }\n\n    int left = lo + 1;\n    int right = hi - 1;\n\n    if (left >= right)\n      return;\n\n    RawPostingList partition = postings[mid];\n\n    for (; ;) {\n      while (comparePostings(postings[right], partition) > 0)\n        --right;\n\n      while (left < right && comparePostings(postings[left], partition) <= 0)\n        ++left;\n\n      if (left < right) {\n        RawPostingList tmp = postings[left];\n        postings[left] = postings[right];\n        postings[right] = tmp;\n        --right;\n      } else {\n        break;\n      }\n    }\n\n    quickSort(postings, lo, left);\n    quickSort(postings, left + 1, hi);\n  }\n\n","sourceOld":"  void quickSort(RawPostingList[] postings, int lo, int hi) {\n    if (lo >= hi)\n      return;\n    else if (hi == 1+lo) {\n      if (comparePostings(postings[lo], postings[hi]) > 0) {\n        final RawPostingList tmp = postings[lo];\n        postings[lo] = postings[hi];\n        postings[hi] = tmp;\n      }\n      return;\n    }\n\n    int mid = (lo + hi) >>> 1;\n\n    if (comparePostings(postings[lo], postings[mid]) > 0) {\n      RawPostingList tmp = postings[lo];\n      postings[lo] = postings[mid];\n      postings[mid] = tmp;\n    }\n\n    if (comparePostings(postings[mid], postings[hi]) > 0) {\n      RawPostingList tmp = postings[mid];\n      postings[mid] = postings[hi];\n      postings[hi] = tmp;\n\n      if (comparePostings(postings[lo], postings[mid]) > 0) {\n        RawPostingList tmp2 = postings[lo];\n        postings[lo] = postings[mid];\n        postings[mid] = tmp2;\n      }\n    }\n\n    int left = lo + 1;\n    int right = hi - 1;\n\n    if (left >= right)\n      return;\n\n    RawPostingList partition = postings[mid];\n\n    for (; ;) {\n      while (comparePostings(postings[right], partition) > 0)\n        --right;\n\n      while (left < right && comparePostings(postings[left], partition) <= 0)\n        ++left;\n\n      if (left < right) {\n        RawPostingList tmp = postings[left];\n        postings[left] = postings[right];\n        postings[right] = tmp;\n        --right;\n      } else {\n        break;\n      }\n    }\n\n    quickSort(postings, lo, left);\n    quickSort(postings, left + 1, hi);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9","date":1269379515,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/TermsHashPerField#quickSort(RawPostingList[],int,int).mjava","sourceNew":null,"sourceOld":"  void quickSort(RawPostingList[] postings, int lo, int hi) {\n    if (lo >= hi)\n      return;\n    else if (hi == 1+lo) {\n      if (comparePostings(postings[lo], postings[hi]) > 0) {\n        final RawPostingList tmp = postings[lo];\n        postings[lo] = postings[hi];\n        postings[hi] = tmp;\n      }\n      return;\n    }\n\n    int mid = (lo + hi) >>> 1;\n\n    if (comparePostings(postings[lo], postings[mid]) > 0) {\n      RawPostingList tmp = postings[lo];\n      postings[lo] = postings[mid];\n      postings[mid] = tmp;\n    }\n\n    if (comparePostings(postings[mid], postings[hi]) > 0) {\n      RawPostingList tmp = postings[mid];\n      postings[mid] = postings[hi];\n      postings[hi] = tmp;\n\n      if (comparePostings(postings[lo], postings[mid]) > 0) {\n        RawPostingList tmp2 = postings[lo];\n        postings[lo] = postings[mid];\n        postings[mid] = tmp2;\n      }\n    }\n\n    int left = lo + 1;\n    int right = hi - 1;\n\n    if (left >= right)\n      return;\n\n    RawPostingList partition = postings[mid];\n\n    for (; ;) {\n      while (comparePostings(postings[right], partition) > 0)\n        --right;\n\n      while (left < right && comparePostings(postings[left], partition) <= 0)\n        ++left;\n\n      if (left < right) {\n        RawPostingList tmp = postings[left];\n        postings[left] = postings[right];\n        postings[right] = tmp;\n        --right;\n      } else {\n        break;\n      }\n    }\n\n    quickSort(postings, lo, left);\n    quickSort(postings, left + 1, hi);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}