{"path":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsReader.FieldReader.IntersectEnum.Frame#decodeMetaData().mjava","commits":[{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsReader.FieldReader.IntersectEnum.Frame#decodeMetaData().mjava","pathOld":"/dev/null","sourceNew":"        public void decodeMetaData() throws IOException {\n\n          // lazily catch up on metadata decode:\n          final int limit = getTermBlockOrd();\n          assert limit > 0;\n\n          // We must set/incr state.termCount because\n          // postings impl can look at this\n          termState.termBlockOrd = metaDataUpto;\n      \n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n            termState.docFreq = statsReader.readVInt();\n            //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n              termState.totalTermFreq = termState.docFreq + statsReader.readVLong();\n              //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n\n            postingsReader.nextTerm(fieldInfo, termState);\n            metaDataUpto++;\n            termState.termBlockOrd++;\n          }\n        }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.IntersectEnum.Frame#decodeMetaData().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsReader.FieldReader.IntersectEnum.Frame#decodeMetaData().mjava","sourceNew":"        public void decodeMetaData() throws IOException {\n\n          // lazily catch up on metadata decode:\n          final int limit = getTermBlockOrd();\n          assert limit > 0;\n\n          // We must set/incr state.termCount because\n          // postings impl can look at this\n          termState.termBlockOrd = metaDataUpto;\n      \n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n            termState.docFreq = statsReader.readVInt();\n            //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n              termState.totalTermFreq = termState.docFreq + statsReader.readVLong();\n              //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n\n            postingsReader.nextTerm(fieldInfo, termState);\n            metaDataUpto++;\n            termState.termBlockOrd++;\n          }\n        }\n\n","sourceOld":"        public void decodeMetaData() throws IOException {\n\n          // lazily catch up on metadata decode:\n          final int limit = getTermBlockOrd();\n          assert limit > 0;\n\n          // We must set/incr state.termCount because\n          // postings impl can look at this\n          termState.termBlockOrd = metaDataUpto;\n      \n          // TODO: better API would be \"jump straight to term=N\"???\n          while (metaDataUpto < limit) {\n\n            // TODO: we could make \"tiers\" of metadata, ie,\n            // decode docFreq/totalTF but don't decode postings\n            // metadata; this way caller could get\n            // docFreq/totalTF w/o paying decode cost for\n            // postings\n\n            // TODO: if docFreq were bulk decoded we could\n            // just skipN here:\n            termState.docFreq = statsReader.readVInt();\n            //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n            if (fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n              termState.totalTermFreq = termState.docFreq + statsReader.readVLong();\n              //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n            }\n\n            postingsReader.nextTerm(fieldInfo, termState);\n            metaDataUpto++;\n            termState.termBlockOrd++;\n          }\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}