{"path":"lucene/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testHyperbolicSweetSpot().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testHyperbolicSweetSpot().mjava","pathOld":"contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testHyperbolicSweetSpot().mjava","sourceNew":"  public void testHyperbolicSweetSpot() {\n  \n    SweetSpotSimilarity ss = new SweetSpotSimilarity() {\n        @Override\n        public float tf(int freq) {\n          return hyperbolicTf(freq);\n        }\n      };\n    ss.setHyperbolicTfFactors(3.3f, 7.7f, Math.E, 5.0f);\n    \n    Similarity s = ss;\n\n    for (int i = 1; i <=1000; i++) {\n      assertTrue(\"MIN tf: i=\"+i+\" : s=\"+s.tf(i),\n                 3.3f <= s.tf(i));\n      assertTrue(\"MAX tf: i=\"+i+\" : s=\"+s.tf(i),\n                 s.tf(i) <= 7.7f);\n    }\n    assertEquals(\"MID tf\", 3.3f+(7.7f - 3.3f)/2.0f, s.tf(5), 0.00001f);\n    \n    // stupidity\n    assertEquals(\"tf zero\", 0.0f, s.tf(0), 0.0f);\n    \n  }\n\n","sourceOld":"  public void testHyperbolicSweetSpot() {\n  \n    SweetSpotSimilarity ss = new SweetSpotSimilarity() {\n        @Override\n        public float tf(int freq) {\n          return hyperbolicTf(freq);\n        }\n      };\n    ss.setHyperbolicTfFactors(3.3f, 7.7f, Math.E, 5.0f);\n    \n    Similarity s = ss;\n\n    for (int i = 1; i <=1000; i++) {\n      assertTrue(\"MIN tf: i=\"+i+\" : s=\"+s.tf(i),\n                 3.3f <= s.tf(i));\n      assertTrue(\"MAX tf: i=\"+i+\" : s=\"+s.tf(i),\n                 s.tf(i) <= 7.7f);\n    }\n    assertEquals(\"MID tf\", 3.3f+(7.7f - 3.3f)/2.0f, s.tf(5), 0.00001f);\n    \n    // stupidity\n    assertEquals(\"tf zero\", 0.0f, s.tf(0), 0.0f);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testHyperbolicSweetSpot().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testHyperbolicSweetSpot().mjava","sourceNew":"  public void testHyperbolicSweetSpot() {\n  \n    SweetSpotSimilarity ss = new SweetSpotSimilarity() {\n        @Override\n        public float tf(int freq) {\n          return hyperbolicTf(freq);\n        }\n      };\n    ss.setHyperbolicTfFactors(3.3f, 7.7f, Math.E, 5.0f);\n    \n    TFIDFSimilarity s = ss;\n\n    for (int i = 1; i <=1000; i++) {\n      assertTrue(\"MIN tf: i=\"+i+\" : s=\"+s.tf(i),\n                 3.3f <= s.tf(i));\n      assertTrue(\"MAX tf: i=\"+i+\" : s=\"+s.tf(i),\n                 s.tf(i) <= 7.7f);\n    }\n    assertEquals(\"MID tf\", 3.3f+(7.7f - 3.3f)/2.0f, s.tf(5), 0.00001f);\n    \n    // stupidity\n    assertEquals(\"tf zero\", 0.0f, s.tf(0), 0.0f);\n    \n  }\n\n","sourceOld":"  public void testHyperbolicSweetSpot() {\n  \n    SweetSpotSimilarity ss = new SweetSpotSimilarity() {\n        @Override\n        public float tf(int freq) {\n          return hyperbolicTf(freq);\n        }\n      };\n    ss.setHyperbolicTfFactors(3.3f, 7.7f, Math.E, 5.0f);\n    \n    Similarity s = ss;\n\n    for (int i = 1; i <=1000; i++) {\n      assertTrue(\"MIN tf: i=\"+i+\" : s=\"+s.tf(i),\n                 3.3f <= s.tf(i));\n      assertTrue(\"MAX tf: i=\"+i+\" : s=\"+s.tf(i),\n                 s.tf(i) <= 7.7f);\n    }\n    assertEquals(\"MID tf\", 3.3f+(7.7f - 3.3f)/2.0f, s.tf(5), 0.00001f);\n    \n    // stupidity\n    assertEquals(\"tf zero\", 0.0f, s.tf(0), 0.0f);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testHyperbolicSweetSpot().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testHyperbolicSweetSpot().mjava","sourceNew":"  public void testHyperbolicSweetSpot() {\n  \n    SweetSpotSimilarity ss = new SweetSpotSimilarity() {\n        @Override\n        public float tf(int freq) {\n          return hyperbolicTf(freq);\n        }\n      };\n    ss.setHyperbolicTfFactors(3.3f, 7.7f, Math.E, 5.0f);\n    \n    TFIDFSimilarity s = ss;\n\n    for (int i = 1; i <=1000; i++) {\n      assertTrue(\"MIN tf: i=\"+i+\" : s=\"+s.tf(i),\n                 3.3f <= s.tf(i));\n      assertTrue(\"MAX tf: i=\"+i+\" : s=\"+s.tf(i),\n                 s.tf(i) <= 7.7f);\n    }\n    assertEquals(\"MID tf\", 3.3f+(7.7f - 3.3f)/2.0f, s.tf(5), 0.00001f);\n    \n    // stupidity\n    assertEquals(\"tf zero\", 0.0f, s.tf(0), 0.0f);\n    \n  }\n\n","sourceOld":"  public void testHyperbolicSweetSpot() {\n  \n    SweetSpotSimilarity ss = new SweetSpotSimilarity() {\n        @Override\n        public float tf(int freq) {\n          return hyperbolicTf(freq);\n        }\n      };\n    ss.setHyperbolicTfFactors(3.3f, 7.7f, Math.E, 5.0f);\n    \n    Similarity s = ss;\n\n    for (int i = 1; i <=1000; i++) {\n      assertTrue(\"MIN tf: i=\"+i+\" : s=\"+s.tf(i),\n                 3.3f <= s.tf(i));\n      assertTrue(\"MAX tf: i=\"+i+\" : s=\"+s.tf(i),\n                 s.tf(i) <= 7.7f);\n    }\n    assertEquals(\"MID tf\", 3.3f+(7.7f - 3.3f)/2.0f, s.tf(5), 0.00001f);\n    \n    // stupidity\n    assertEquals(\"tf zero\", 0.0f, s.tf(0), 0.0f);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testHyperbolicSweetSpot().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testHyperbolicSweetSpot().mjava","sourceNew":"  public void testHyperbolicSweetSpot() {\n  \n    SweetSpotSimilarity ss = new SweetSpotSimilarity() {\n        @Override\n        public float tf(int freq) {\n          return hyperbolicTf(freq);\n        }\n      };\n    ss.setHyperbolicTfFactors(3.3f, 7.7f, Math.E, 5.0f);\n    \n    TFIDFSimilarity s = ss;\n\n    for (int i = 1; i <=1000; i++) {\n      assertTrue(\"MIN tf: i=\"+i+\" : s=\"+s.tf(i),\n                 3.3f <= s.tf(i));\n      assertTrue(\"MAX tf: i=\"+i+\" : s=\"+s.tf(i),\n                 s.tf(i) <= 7.7f);\n    }\n    assertEquals(\"MID tf\", 3.3f+(7.7f - 3.3f)/2.0f, s.tf(5), 0.00001f);\n    \n    // stupidity\n    assertEquals(\"tf zero\", 0.0f, s.tf(0), 0.0f);\n    \n  }\n\n","sourceOld":"  public void testHyperbolicSweetSpot() {\n  \n    SweetSpotSimilarity ss = new SweetSpotSimilarity() {\n        @Override\n        public float tf(int freq) {\n          return hyperbolicTf(freq);\n        }\n      };\n    ss.setHyperbolicTfFactors(3.3f, 7.7f, Math.E, 5.0f);\n    \n    Similarity s = ss;\n\n    for (int i = 1; i <=1000; i++) {\n      assertTrue(\"MIN tf: i=\"+i+\" : s=\"+s.tf(i),\n                 3.3f <= s.tf(i));\n      assertTrue(\"MAX tf: i=\"+i+\" : s=\"+s.tf(i),\n                 s.tf(i) <= 7.7f);\n    }\n    assertEquals(\"MID tf\", 3.3f+(7.7f - 3.3f)/2.0f, s.tf(5), 0.00001f);\n    \n    // stupidity\n    assertEquals(\"tf zero\", 0.0f, s.tf(0), 0.0f);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testHyperbolicSweetSpot().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/misc/SweetSpotSimilarityTest#testHyperbolicSweetSpot().mjava","sourceNew":"  public void testHyperbolicSweetSpot() {\n  \n    SweetSpotSimilarity ss = new SweetSpotSimilarity() {\n        @Override\n        public float tf(int freq) {\n          return hyperbolicTf(freq);\n        }\n      };\n    ss.setHyperbolicTfFactors(3.3f, 7.7f, Math.E, 5.0f);\n    \n    TFIDFSimilarity s = ss;\n\n    for (int i = 1; i <=1000; i++) {\n      assertTrue(\"MIN tf: i=\"+i+\" : s=\"+s.tf(i),\n                 3.3f <= s.tf(i));\n      assertTrue(\"MAX tf: i=\"+i+\" : s=\"+s.tf(i),\n                 s.tf(i) <= 7.7f);\n    }\n    assertEquals(\"MID tf\", 3.3f+(7.7f - 3.3f)/2.0f, s.tf(5), 0.00001f);\n    \n    // stupidity\n    assertEquals(\"tf zero\", 0.0f, s.tf(0), 0.0f);\n    \n  }\n\n","sourceOld":"  public void testHyperbolicSweetSpot() {\n  \n    SweetSpotSimilarity ss = new SweetSpotSimilarity() {\n        @Override\n        public float tf(int freq) {\n          return hyperbolicTf(freq);\n        }\n      };\n    ss.setHyperbolicTfFactors(3.3f, 7.7f, Math.E, 5.0f);\n    \n    TFIDFSimilarity s = ss;\n\n    for (int i = 1; i <=1000; i++) {\n      assertTrue(\"MIN tf: i=\"+i+\" : s=\"+s.tf(i),\n                 3.3f <= s.tf(i));\n      assertTrue(\"MAX tf: i=\"+i+\" : s=\"+s.tf(i),\n                 s.tf(i) <= 7.7f);\n    }\n    assertEquals(\"MID tf\", 3.3f+(7.7f - 3.3f)/2.0f, s.tf(5), 0.00001f);\n    \n    // stupidity\n    assertEquals(\"tf zero\", 0.0f, s.tf(0), 0.0f);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1291e4568eb7d9463d751627596ef14baf4c1603":["9454a6510e2db155fb01faa5c049b06ece95fab9","0f3cee3d20b0c786e6fca20539454262e29edcab"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["9454a6510e2db155fb01faa5c049b06ece95fab9","0f3cee3d20b0c786e6fca20539454262e29edcab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1291e4568eb7d9463d751627596ef14baf4c1603":[],"0f3cee3d20b0c786e6fca20539454262e29edcab":["1291e4568eb7d9463d751627596ef14baf4c1603","b89678825b68eccaf09e6ab71675fc0b0af1e099","f0b9507caf22f292ac0e5e59f62db4275adf4511"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1291e4568eb7d9463d751627596ef14baf4c1603","0f3cee3d20b0c786e6fca20539454262e29edcab","f0b9507caf22f292ac0e5e59f62db4275adf4511"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}