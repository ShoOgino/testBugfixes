{"path":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#writeResponse(SolrQueryResponse,QueryResponseWriter,Method).mjava","commits":[{"id":"a760e2135dfe20a04dea360873d4de1c6a0280bb","date":1430762855,"type":1,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#writeResponse(SolrQueryResponse,QueryResponseWriter,Method).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#writeResponse(SolrQueryResponse,ServletResponse,QueryResponseWriter,SolrQueryRequest,Method).mjava","sourceNew":"  private void writeResponse(SolrQueryResponse solrRsp, QueryResponseWriter responseWriter, Method reqMethod)\n      throws IOException {\n    try {\n      Object invalidStates = solrReq.getContext().get(CloudSolrClient.STATE_VERSION);\n      //This is the last item added to the response and the client would expect it that way.\n      //If that assumption is changed , it would fail. This is done to avoid an O(n) scan on\n      // the response for each request\n      if (invalidStates != null) solrRsp.add(CloudSolrClient.STATE_VERSION, invalidStates);\n      // Now write it out\n      final String ct = responseWriter.getContentType(solrReq, solrRsp);\n      // don't call setContentType on null\n      if (null != ct) response.setContentType(ct);\n\n      if (solrRsp.getException() != null) {\n        NamedList info = new SimpleOrderedMap();\n        int code = ResponseUtils.getErrorInfo(solrRsp.getException(), info, SolrDispatchFilter.log);\n        solrRsp.add(\"error\", info);\n        response.setStatus(code);\n      }\n\n      if (Method.HEAD != reqMethod) {\n        QueryResponseWriterUtil.writeQueryResponse(response.getOutputStream(), responseWriter, solrReq, solrRsp, ct);\n      }\n      //else http HEAD request, nothing to write out, waited this long just to get ContentType\n    } catch (EOFException e) {\n      SolrDispatchFilter.log.info(\"Unable to write response, client closed connection or we are shutting down\", e);\n    }\n  }\n\n","sourceOld":"  private void writeResponse(SolrQueryResponse solrRsp, ServletResponse response,\n                             QueryResponseWriter responseWriter, SolrQueryRequest solrReq, Method reqMethod)\n          throws IOException {\n    try {\n      Object invalidStates = solrReq.getContext().get(CloudSolrClient.STATE_VERSION);\n      //This is the last item added to the response and the client would expect it that way.\n      //If that assumption is changed , it would fail. This is done to avoid an O(n) scan on\n      // the response for each request\n      if(invalidStates != null) solrRsp.add(CloudSolrClient.STATE_VERSION, invalidStates);\n      // Now write it out\n      final String ct = responseWriter.getContentType(solrReq, solrRsp);\n      // don't call setContentType on null\n      if (null != ct) response.setContentType(ct);\n\n      if (solrRsp.getException() != null) {\n        NamedList info = new SimpleOrderedMap();\n        int code = ResponseUtils.getErrorInfo(solrRsp.getException(), info, log);\n        solrRsp.add(\"error\", info);\n        ((HttpServletResponse) response).setStatus(code);\n      }\n\n      if (Method.HEAD != reqMethod) {\n        QueryResponseWriterUtil.writeQueryResponse(response.getOutputStream(), responseWriter, solrReq, solrRsp, ct);\n      }\n      //else http HEAD request, nothing to write out, waited this long just to get ContentType\n    }\n    catch (EOFException e) {\n      log.info(\"Unable to write response, client closed connection or we are shutting down\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9367dbf5b00d7764583d991c1888f4acc9c9991a","date":1449048142,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#writeResponse(SolrQueryResponse,QueryResponseWriter,Method).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#writeResponse(SolrQueryResponse,QueryResponseWriter,Method).mjava","sourceNew":"  private void writeResponse(SolrQueryResponse solrRsp, QueryResponseWriter responseWriter, Method reqMethod)\n      throws IOException {\n    try {\n      Object invalidStates = solrReq.getContext().get(CloudSolrClient.STATE_VERSION);\n      //This is the last item added to the response and the client would expect it that way.\n      //If that assumption is changed , it would fail. This is done to avoid an O(n) scan on\n      // the response for each request\n      if (invalidStates != null) solrRsp.add(CloudSolrClient.STATE_VERSION, invalidStates);\n      // Now write it out\n      final String ct = responseWriter.getContentType(solrReq, solrRsp);\n      // don't call setContentType on null\n      if (null != ct) response.setContentType(ct);\n\n      if (solrRsp.getException() != null) {\n        NamedList info = new SimpleOrderedMap();\n        int code = ResponseUtils.getErrorInfo(solrRsp.getException(), info, log);\n        solrRsp.add(\"error\", info);\n        response.setStatus(code);\n      }\n\n      if (Method.HEAD != reqMethod) {\n        QueryResponseWriterUtil.writeQueryResponse(response.getOutputStream(), responseWriter, solrReq, solrRsp, ct);\n      }\n      //else http HEAD request, nothing to write out, waited this long just to get ContentType\n    } catch (EOFException e) {\n      log.info(\"Unable to write response, client closed connection or we are shutting down\", e);\n    }\n  }\n\n","sourceOld":"  private void writeResponse(SolrQueryResponse solrRsp, QueryResponseWriter responseWriter, Method reqMethod)\n      throws IOException {\n    try {\n      Object invalidStates = solrReq.getContext().get(CloudSolrClient.STATE_VERSION);\n      //This is the last item added to the response and the client would expect it that way.\n      //If that assumption is changed , it would fail. This is done to avoid an O(n) scan on\n      // the response for each request\n      if (invalidStates != null) solrRsp.add(CloudSolrClient.STATE_VERSION, invalidStates);\n      // Now write it out\n      final String ct = responseWriter.getContentType(solrReq, solrRsp);\n      // don't call setContentType on null\n      if (null != ct) response.setContentType(ct);\n\n      if (solrRsp.getException() != null) {\n        NamedList info = new SimpleOrderedMap();\n        int code = ResponseUtils.getErrorInfo(solrRsp.getException(), info, SolrDispatchFilter.log);\n        solrRsp.add(\"error\", info);\n        response.setStatus(code);\n      }\n\n      if (Method.HEAD != reqMethod) {\n        QueryResponseWriterUtil.writeQueryResponse(response.getOutputStream(), responseWriter, solrReq, solrRsp, ct);\n      }\n      //else http HEAD request, nothing to write out, waited this long just to get ContentType\n    } catch (EOFException e) {\n      SolrDispatchFilter.log.info(\"Unable to write response, client closed connection or we are shutting down\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5d8b64a410e990e9a3314f1158fb525abf79353d","date":1452702247,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#writeResponse(SolrQueryResponse,QueryResponseWriter,Method).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#writeResponse(SolrQueryResponse,QueryResponseWriter,Method).mjava","sourceNew":"  private void writeResponse(SolrQueryResponse solrRsp, QueryResponseWriter responseWriter, Method reqMethod)\n      throws IOException {\n    try {\n      Object invalidStates = solrReq.getContext().get(CloudSolrClient.STATE_VERSION);\n      //This is the last item added to the response and the client would expect it that way.\n      //If that assumption is changed , it would fail. This is done to avoid an O(n) scan on\n      // the response for each request\n      if (invalidStates != null) solrRsp.add(CloudSolrClient.STATE_VERSION, invalidStates);\n      // Now write it out\n      final String ct = responseWriter.getContentType(solrReq, solrRsp);\n      // don't call setContentType on null\n      if (null != ct) response.setContentType(ct);\n\n      if (solrRsp.getException() != null) {\n        NamedList info = new SimpleOrderedMap();\n        int code = ResponseUtils.getErrorInfo(solrRsp.getException(), info, log);\n        solrRsp.add(\"error\", info);\n        response.setStatus(code);\n      }\n\n      if (Method.HEAD != reqMethod) {\n        QueryResponseWriterUtil.writeQueryResponse(response.getOutputStream(), responseWriter, solrReq, solrRsp, ct);\n      }\n      //else http HEAD request, nothing to write out, waited this long just to get ContentType\n    } catch (EOFException e) {\n      log.info(\"Unable to write response, client closed connection or we are shutting down\", e);\n    } finally {\n      if (solrRsp.getException() != null) {\n        consumeInput(req);\n      }\n    }\n  }\n\n","sourceOld":"  private void writeResponse(SolrQueryResponse solrRsp, QueryResponseWriter responseWriter, Method reqMethod)\n      throws IOException {\n    try {\n      Object invalidStates = solrReq.getContext().get(CloudSolrClient.STATE_VERSION);\n      //This is the last item added to the response and the client would expect it that way.\n      //If that assumption is changed , it would fail. This is done to avoid an O(n) scan on\n      // the response for each request\n      if (invalidStates != null) solrRsp.add(CloudSolrClient.STATE_VERSION, invalidStates);\n      // Now write it out\n      final String ct = responseWriter.getContentType(solrReq, solrRsp);\n      // don't call setContentType on null\n      if (null != ct) response.setContentType(ct);\n\n      if (solrRsp.getException() != null) {\n        NamedList info = new SimpleOrderedMap();\n        int code = ResponseUtils.getErrorInfo(solrRsp.getException(), info, log);\n        solrRsp.add(\"error\", info);\n        response.setStatus(code);\n      }\n\n      if (Method.HEAD != reqMethod) {\n        QueryResponseWriterUtil.writeQueryResponse(response.getOutputStream(), responseWriter, solrReq, solrRsp, ct);\n      }\n      //else http HEAD request, nothing to write out, waited this long just to get ContentType\n    } catch (EOFException e) {\n      log.info(\"Unable to write response, client closed connection or we are shutting down\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["2339937a3c827aac6c64360f31a9ef0aa19d3183"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2339937a3c827aac6c64360f31a9ef0aa19d3183","date":1455656470,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#writeResponse(SolrQueryResponse,QueryResponseWriter,Method).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#writeResponse(SolrQueryResponse,QueryResponseWriter,Method).mjava","sourceNew":"  private void writeResponse(SolrQueryResponse solrRsp, QueryResponseWriter responseWriter, Method reqMethod)\n      throws IOException {\n    try {\n      Object invalidStates = solrReq.getContext().get(CloudSolrClient.STATE_VERSION);\n      //This is the last item added to the response and the client would expect it that way.\n      //If that assumption is changed , it would fail. This is done to avoid an O(n) scan on\n      // the response for each request\n      if (invalidStates != null) solrRsp.add(CloudSolrClient.STATE_VERSION, invalidStates);\n      // Now write it out\n      final String ct = responseWriter.getContentType(solrReq, solrRsp);\n      // don't call setContentType on null\n      if (null != ct) response.setContentType(ct);\n\n      if (solrRsp.getException() != null) {\n        NamedList info = new SimpleOrderedMap();\n        int code = ResponseUtils.getErrorInfo(solrRsp.getException(), info, log);\n        solrRsp.add(\"error\", info);\n        response.setStatus(code);\n      }\n\n      if (Method.HEAD != reqMethod) {\n        QueryResponseWriterUtil.writeQueryResponse(response.getOutputStream(), responseWriter, solrReq, solrRsp, ct);\n      }\n      //else http HEAD request, nothing to write out, waited this long just to get ContentType\n    } catch (EOFException e) {\n      log.info(\"Unable to write response, client closed connection or we are shutting down\", e);\n    }\n  }\n\n","sourceOld":"  private void writeResponse(SolrQueryResponse solrRsp, QueryResponseWriter responseWriter, Method reqMethod)\n      throws IOException {\n    try {\n      Object invalidStates = solrReq.getContext().get(CloudSolrClient.STATE_VERSION);\n      //This is the last item added to the response and the client would expect it that way.\n      //If that assumption is changed , it would fail. This is done to avoid an O(n) scan on\n      // the response for each request\n      if (invalidStates != null) solrRsp.add(CloudSolrClient.STATE_VERSION, invalidStates);\n      // Now write it out\n      final String ct = responseWriter.getContentType(solrReq, solrRsp);\n      // don't call setContentType on null\n      if (null != ct) response.setContentType(ct);\n\n      if (solrRsp.getException() != null) {\n        NamedList info = new SimpleOrderedMap();\n        int code = ResponseUtils.getErrorInfo(solrRsp.getException(), info, log);\n        solrRsp.add(\"error\", info);\n        response.setStatus(code);\n      }\n\n      if (Method.HEAD != reqMethod) {\n        QueryResponseWriterUtil.writeQueryResponse(response.getOutputStream(), responseWriter, solrReq, solrRsp, ct);\n      }\n      //else http HEAD request, nothing to write out, waited this long just to get ContentType\n    } catch (EOFException e) {\n      log.info(\"Unable to write response, client closed connection or we are shutting down\", e);\n    } finally {\n      if (solrRsp.getException() != null) {\n        consumeInput(req);\n      }\n    }\n  }\n\n","bugFix":["5d8b64a410e990e9a3314f1158fb525abf79353d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"26ab43e1a461b9c1d9db0739ee0eb5caed8bc521","date":1461254038,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#writeResponse(SolrQueryResponse,QueryResponseWriter,Method).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#writeResponse(SolrQueryResponse,QueryResponseWriter,Method).mjava","sourceNew":"  private void writeResponse(SolrQueryResponse solrRsp, QueryResponseWriter responseWriter, Method reqMethod)\n      throws IOException {\n    try {\n      Object invalidStates = solrReq.getContext().get(CloudSolrClient.STATE_VERSION);\n      //This is the last item added to the response and the client would expect it that way.\n      //If that assumption is changed , it would fail. This is done to avoid an O(n) scan on\n      // the response for each request\n      if (invalidStates != null) solrRsp.add(CloudSolrClient.STATE_VERSION, invalidStates);\n      // Now write it out\n      final String ct = responseWriter.getContentType(solrReq, solrRsp);\n      // don't call setContentType on null\n      if (null != ct) response.setContentType(ct);\n\n      if (solrRsp.getException() != null) {\n        NamedList info = new SimpleOrderedMap();\n        int code = ResponseUtils.getErrorInfo(solrRsp.getException(), info, log);\n        solrRsp.add(\"error\", info);\n        response.setStatus(code);\n      }\n\n      if (Method.HEAD != reqMethod) {\n        OutputStream out = new CloseShieldOutputStream(response.getOutputStream()); // Prevent close of container streams, see SOLR-8933\n        QueryResponseWriterUtil.writeQueryResponse(out, responseWriter, solrReq, solrRsp, ct);\n      }\n      //else http HEAD request, nothing to write out, waited this long just to get ContentType\n    } catch (EOFException e) {\n      log.info(\"Unable to write response, client closed connection or we are shutting down\", e);\n    }\n  }\n\n","sourceOld":"  private void writeResponse(SolrQueryResponse solrRsp, QueryResponseWriter responseWriter, Method reqMethod)\n      throws IOException {\n    try {\n      Object invalidStates = solrReq.getContext().get(CloudSolrClient.STATE_VERSION);\n      //This is the last item added to the response and the client would expect it that way.\n      //If that assumption is changed , it would fail. This is done to avoid an O(n) scan on\n      // the response for each request\n      if (invalidStates != null) solrRsp.add(CloudSolrClient.STATE_VERSION, invalidStates);\n      // Now write it out\n      final String ct = responseWriter.getContentType(solrReq, solrRsp);\n      // don't call setContentType on null\n      if (null != ct) response.setContentType(ct);\n\n      if (solrRsp.getException() != null) {\n        NamedList info = new SimpleOrderedMap();\n        int code = ResponseUtils.getErrorInfo(solrRsp.getException(), info, log);\n        solrRsp.add(\"error\", info);\n        response.setStatus(code);\n      }\n\n      if (Method.HEAD != reqMethod) {\n        QueryResponseWriterUtil.writeQueryResponse(response.getOutputStream(), responseWriter, solrReq, solrRsp, ct);\n      }\n      //else http HEAD request, nothing to write out, waited this long just to get ContentType\n    } catch (EOFException e) {\n      log.info(\"Unable to write response, client closed connection or we are shutting down\", e);\n    }\n  }\n\n","bugFix":["d805d691fbf3ca8aafa5397568ec761790b88622"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca","date":1461308643,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#writeResponse(SolrQueryResponse,QueryResponseWriter,Method).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#writeResponse(SolrQueryResponse,QueryResponseWriter,Method).mjava","sourceNew":"  private void writeResponse(SolrQueryResponse solrRsp, QueryResponseWriter responseWriter, Method reqMethod)\n      throws IOException {\n    try {\n      Object invalidStates = solrReq.getContext().get(CloudSolrClient.STATE_VERSION);\n      //This is the last item added to the response and the client would expect it that way.\n      //If that assumption is changed , it would fail. This is done to avoid an O(n) scan on\n      // the response for each request\n      if (invalidStates != null) solrRsp.add(CloudSolrClient.STATE_VERSION, invalidStates);\n      // Now write it out\n      final String ct = responseWriter.getContentType(solrReq, solrRsp);\n      // don't call setContentType on null\n      if (null != ct) response.setContentType(ct);\n\n      if (solrRsp.getException() != null) {\n        NamedList info = new SimpleOrderedMap();\n        int code = ResponseUtils.getErrorInfo(solrRsp.getException(), info, log);\n        solrRsp.add(\"error\", info);\n        response.setStatus(code);\n      }\n\n      if (Method.HEAD != reqMethod) {\n        OutputStream out = new CloseShieldOutputStream(response.getOutputStream()); // Prevent close of container streams, see SOLR-8933\n        QueryResponseWriterUtil.writeQueryResponse(out, responseWriter, solrReq, solrRsp, ct);\n      }\n      //else http HEAD request, nothing to write out, waited this long just to get ContentType\n    } catch (EOFException e) {\n      log.info(\"Unable to write response, client closed connection or we are shutting down\", e);\n    }\n  }\n\n","sourceOld":"  private void writeResponse(SolrQueryResponse solrRsp, QueryResponseWriter responseWriter, Method reqMethod)\n      throws IOException {\n    try {\n      Object invalidStates = solrReq.getContext().get(CloudSolrClient.STATE_VERSION);\n      //This is the last item added to the response and the client would expect it that way.\n      //If that assumption is changed , it would fail. This is done to avoid an O(n) scan on\n      // the response for each request\n      if (invalidStates != null) solrRsp.add(CloudSolrClient.STATE_VERSION, invalidStates);\n      // Now write it out\n      final String ct = responseWriter.getContentType(solrReq, solrRsp);\n      // don't call setContentType on null\n      if (null != ct) response.setContentType(ct);\n\n      if (solrRsp.getException() != null) {\n        NamedList info = new SimpleOrderedMap();\n        int code = ResponseUtils.getErrorInfo(solrRsp.getException(), info, log);\n        solrRsp.add(\"error\", info);\n        response.setStatus(code);\n      }\n\n      if (Method.HEAD != reqMethod) {\n        QueryResponseWriterUtil.writeQueryResponse(response.getOutputStream(), responseWriter, solrReq, solrRsp, ct);\n      }\n      //else http HEAD request, nothing to write out, waited this long just to get ContentType\n    } catch (EOFException e) {\n      log.info(\"Unable to write response, client closed connection or we are shutting down\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac35531329b1809368fb0780bcf1e72d0add3c21","date":1525474926,"type":3,"author":"Mark Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#writeResponse(SolrQueryResponse,QueryResponseWriter,Method).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#writeResponse(SolrQueryResponse,QueryResponseWriter,Method).mjava","sourceNew":"  private void writeResponse(SolrQueryResponse solrRsp, QueryResponseWriter responseWriter, Method reqMethod)\n      throws IOException {\n    try {\n      Object invalidStates = solrReq.getContext().get(CloudSolrClient.STATE_VERSION);\n      //This is the last item added to the response and the client would expect it that way.\n      //If that assumption is changed , it would fail. This is done to avoid an O(n) scan on\n      // the response for each request\n      if (invalidStates != null) solrRsp.add(CloudSolrClient.STATE_VERSION, invalidStates);\n      // Now write it out\n      final String ct = responseWriter.getContentType(solrReq, solrRsp);\n      // don't call setContentType on null\n      if (null != ct) response.setContentType(ct);\n\n      if (solrRsp.getException() != null) {\n        NamedList info = new SimpleOrderedMap();\n        int code = ResponseUtils.getErrorInfo(solrRsp.getException(), info, log);\n        solrRsp.add(\"error\", info);\n        response.setStatus(code);\n      }\n\n      if (Method.HEAD != reqMethod) {\n        OutputStream out = response.getOutputStream();\n        QueryResponseWriterUtil.writeQueryResponse(out, responseWriter, solrReq, solrRsp, ct);\n      }\n      //else http HEAD request, nothing to write out, waited this long just to get ContentType\n    } catch (EOFException e) {\n      log.info(\"Unable to write response, client closed connection or we are shutting down\", e);\n    }\n  }\n\n","sourceOld":"  private void writeResponse(SolrQueryResponse solrRsp, QueryResponseWriter responseWriter, Method reqMethod)\n      throws IOException {\n    try {\n      Object invalidStates = solrReq.getContext().get(CloudSolrClient.STATE_VERSION);\n      //This is the last item added to the response and the client would expect it that way.\n      //If that assumption is changed , it would fail. This is done to avoid an O(n) scan on\n      // the response for each request\n      if (invalidStates != null) solrRsp.add(CloudSolrClient.STATE_VERSION, invalidStates);\n      // Now write it out\n      final String ct = responseWriter.getContentType(solrReq, solrRsp);\n      // don't call setContentType on null\n      if (null != ct) response.setContentType(ct);\n\n      if (solrRsp.getException() != null) {\n        NamedList info = new SimpleOrderedMap();\n        int code = ResponseUtils.getErrorInfo(solrRsp.getException(), info, log);\n        solrRsp.add(\"error\", info);\n        response.setStatus(code);\n      }\n\n      if (Method.HEAD != reqMethod) {\n        OutputStream out = new CloseShieldOutputStream(response.getOutputStream()); // Prevent close of container streams, see SOLR-8933\n        QueryResponseWriterUtil.writeQueryResponse(out, responseWriter, solrReq, solrRsp, ct);\n      }\n      //else http HEAD request, nothing to write out, waited this long just to get ContentType\n    } catch (EOFException e) {\n      log.info(\"Unable to write response, client closed connection or we are shutting down\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#writeResponse(SolrQueryResponse,QueryResponseWriter,Method).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#writeResponse(SolrQueryResponse,QueryResponseWriter,Method).mjava","sourceNew":"  private void writeResponse(SolrQueryResponse solrRsp, QueryResponseWriter responseWriter, Method reqMethod)\n      throws IOException {\n    try {\n      Object invalidStates = solrReq.getContext().get(CloudSolrClient.STATE_VERSION);\n      //This is the last item added to the response and the client would expect it that way.\n      //If that assumption is changed , it would fail. This is done to avoid an O(n) scan on\n      // the response for each request\n      if (invalidStates != null) solrRsp.add(CloudSolrClient.STATE_VERSION, invalidStates);\n      // Now write it out\n      final String ct = responseWriter.getContentType(solrReq, solrRsp);\n      // don't call setContentType on null\n      if (null != ct) response.setContentType(ct);\n\n      if (solrRsp.getException() != null) {\n        @SuppressWarnings({\"rawtypes\"})\n        NamedList info = new SimpleOrderedMap();\n        int code = ResponseUtils.getErrorInfo(solrRsp.getException(), info, log);\n        solrRsp.add(\"error\", info);\n        response.setStatus(code);\n      }\n\n      if (Method.HEAD != reqMethod) {\n        OutputStream out = response.getOutputStream();\n        QueryResponseWriterUtil.writeQueryResponse(out, responseWriter, solrReq, solrRsp, ct);\n      }\n      //else http HEAD request, nothing to write out, waited this long just to get ContentType\n    } catch (EOFException e) {\n      log.info(\"Unable to write response, client closed connection or we are shutting down\", e);\n    }\n  }\n\n","sourceOld":"  private void writeResponse(SolrQueryResponse solrRsp, QueryResponseWriter responseWriter, Method reqMethod)\n      throws IOException {\n    try {\n      Object invalidStates = solrReq.getContext().get(CloudSolrClient.STATE_VERSION);\n      //This is the last item added to the response and the client would expect it that way.\n      //If that assumption is changed , it would fail. This is done to avoid an O(n) scan on\n      // the response for each request\n      if (invalidStates != null) solrRsp.add(CloudSolrClient.STATE_VERSION, invalidStates);\n      // Now write it out\n      final String ct = responseWriter.getContentType(solrReq, solrRsp);\n      // don't call setContentType on null\n      if (null != ct) response.setContentType(ct);\n\n      if (solrRsp.getException() != null) {\n        NamedList info = new SimpleOrderedMap();\n        int code = ResponseUtils.getErrorInfo(solrRsp.getException(), info, log);\n        solrRsp.add(\"error\", info);\n        response.setStatus(code);\n      }\n\n      if (Method.HEAD != reqMethod) {\n        OutputStream out = response.getOutputStream();\n        QueryResponseWriterUtil.writeQueryResponse(out, responseWriter, solrReq, solrRsp, ct);\n      }\n      //else http HEAD request, nothing to write out, waited this long just to get ContentType\n    } catch (EOFException e) {\n      log.info(\"Unable to write response, client closed connection or we are shutting down\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca":["2339937a3c827aac6c64360f31a9ef0aa19d3183","26ab43e1a461b9c1d9db0739ee0eb5caed8bc521"],"2339937a3c827aac6c64360f31a9ef0aa19d3183":["5d8b64a410e990e9a3314f1158fb525abf79353d"],"5d8b64a410e990e9a3314f1158fb525abf79353d":["9367dbf5b00d7764583d991c1888f4acc9c9991a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a760e2135dfe20a04dea360873d4de1c6a0280bb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"26ab43e1a461b9c1d9db0739ee0eb5caed8bc521":["2339937a3c827aac6c64360f31a9ef0aa19d3183"],"ac35531329b1809368fb0780bcf1e72d0add3c21":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca"],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["a760e2135dfe20a04dea360873d4de1c6a0280bb"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["ac35531329b1809368fb0780bcf1e72d0add3c21"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd25fa3647fa73152703b8dccb4fb5f43633de20"]},"commit2Childs":{"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca":["ac35531329b1809368fb0780bcf1e72d0add3c21"],"2339937a3c827aac6c64360f31a9ef0aa19d3183":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca","26ab43e1a461b9c1d9db0739ee0eb5caed8bc521"],"5d8b64a410e990e9a3314f1158fb525abf79353d":["2339937a3c827aac6c64360f31a9ef0aa19d3183"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a760e2135dfe20a04dea360873d4de1c6a0280bb"],"a760e2135dfe20a04dea360873d4de1c6a0280bb":["9367dbf5b00d7764583d991c1888f4acc9c9991a"],"26ab43e1a461b9c1d9db0739ee0eb5caed8bc521":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca"],"ac35531329b1809368fb0780bcf1e72d0add3c21":["bd25fa3647fa73152703b8dccb4fb5f43633de20"],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["5d8b64a410e990e9a3314f1158fb525abf79353d"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}