{"path":"lucene/sandbox/src/test/org/apache/lucene/search/TestIntRangeFieldQueries#testBasics().mjava","commits":[{"id":"7825da0fed0bd08a466fec72f7c6a18a2abb303d","date":1471466888,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestIntRangeFieldQueries#testBasics().mjava","pathOld":"/dev/null","sourceNew":"  /** Basic test */\n  public void testBasics() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // intersects (within)\n    Document document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {-10, -10}, new int[] {9, 10}));\n    writer.addDocument(document);\n\n    // intersects (crosses)\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {10, -10}, new int[] {20, 10}));\n    writer.addDocument(document);\n\n    // intersects (contains)\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {-20, -20}, new int[] {30, 30}));\n    writer.addDocument(document);\n\n    // intersects (within)\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {-11, -11}, new int[] {1, 11}));\n    writer.addDocument(document);\n\n    // intersects (crosses)\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {12, 1}, new int[] {15, 29}));\n    writer.addDocument(document);\n\n    // disjoint\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {-122, 1}, new int[] {-115, 29}));\n    writer.addDocument(document);\n\n    // intersects (crosses)\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {Integer.MIN_VALUE, 1}, new int[] {-11, 29}));\n    writer.addDocument(document);\n\n    // equal (within, contains, intersects)\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {-11, -15}, new int[] {15, 20}));\n    writer.addDocument(document);\n\n    // search\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    assertEquals(7, searcher.count(IntRangeField.newIntersectsQuery(FIELD_NAME,\n        new int[] {-11, -15}, new int[] {15, 20})));\n    assertEquals(3, searcher.count(IntRangeField.newWithinQuery(FIELD_NAME,\n        new int[] {-11, -15}, new int[] {15, 20})));\n    assertEquals(2, searcher.count(IntRangeField.newContainsQuery(FIELD_NAME,\n        new int[] {-11, -15}, new int[] {15, 20})));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestIntRangeFieldQueries#testBasics().mjava","pathOld":"/dev/null","sourceNew":"  /** Basic test */\n  public void testBasics() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // intersects (within)\n    Document document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {-10, -10}, new int[] {9, 10}));\n    writer.addDocument(document);\n\n    // intersects (crosses)\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {10, -10}, new int[] {20, 10}));\n    writer.addDocument(document);\n\n    // intersects (contains)\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {-20, -20}, new int[] {30, 30}));\n    writer.addDocument(document);\n\n    // intersects (within)\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {-11, -11}, new int[] {1, 11}));\n    writer.addDocument(document);\n\n    // intersects (crosses)\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {12, 1}, new int[] {15, 29}));\n    writer.addDocument(document);\n\n    // disjoint\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {-122, 1}, new int[] {-115, 29}));\n    writer.addDocument(document);\n\n    // intersects (crosses)\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {Integer.MIN_VALUE, 1}, new int[] {-11, 29}));\n    writer.addDocument(document);\n\n    // equal (within, contains, intersects)\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {-11, -15}, new int[] {15, 20}));\n    writer.addDocument(document);\n\n    // search\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    assertEquals(7, searcher.count(IntRangeField.newIntersectsQuery(FIELD_NAME,\n        new int[] {-11, -15}, new int[] {15, 20})));\n    assertEquals(3, searcher.count(IntRangeField.newWithinQuery(FIELD_NAME,\n        new int[] {-11, -15}, new int[] {15, 20})));\n    assertEquals(2, searcher.count(IntRangeField.newContainsQuery(FIELD_NAME,\n        new int[] {-11, -15}, new int[] {15, 20})));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestIntRangeFieldQueries#testBasics().mjava","pathOld":"/dev/null","sourceNew":"  /** Basic test */\n  public void testBasics() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // intersects (within)\n    Document document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {-10, -10}, new int[] {9, 10}));\n    writer.addDocument(document);\n\n    // intersects (crosses)\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {10, -10}, new int[] {20, 10}));\n    writer.addDocument(document);\n\n    // intersects (contains)\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {-20, -20}, new int[] {30, 30}));\n    writer.addDocument(document);\n\n    // intersects (within)\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {-11, -11}, new int[] {1, 11}));\n    writer.addDocument(document);\n\n    // intersects (crosses)\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {12, 1}, new int[] {15, 29}));\n    writer.addDocument(document);\n\n    // disjoint\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {-122, 1}, new int[] {-115, 29}));\n    writer.addDocument(document);\n\n    // intersects (crosses)\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {Integer.MIN_VALUE, 1}, new int[] {-11, 29}));\n    writer.addDocument(document);\n\n    // equal (within, contains, intersects)\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {-11, -15}, new int[] {15, 20}));\n    writer.addDocument(document);\n\n    // search\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    assertEquals(7, searcher.count(IntRangeField.newIntersectsQuery(FIELD_NAME,\n        new int[] {-11, -15}, new int[] {15, 20})));\n    assertEquals(3, searcher.count(IntRangeField.newWithinQuery(FIELD_NAME,\n        new int[] {-11, -15}, new int[] {15, 20})));\n    assertEquals(2, searcher.count(IntRangeField.newContainsQuery(FIELD_NAME,\n        new int[] {-11, -15}, new int[] {15, 20})));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestIntRangeFieldQueries#testBasics().mjava","pathOld":"/dev/null","sourceNew":"  /** Basic test */\n  public void testBasics() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // intersects (within)\n    Document document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {-10, -10}, new int[] {9, 10}));\n    writer.addDocument(document);\n\n    // intersects (crosses)\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {10, -10}, new int[] {20, 10}));\n    writer.addDocument(document);\n\n    // intersects (contains)\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {-20, -20}, new int[] {30, 30}));\n    writer.addDocument(document);\n\n    // intersects (within)\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {-11, -11}, new int[] {1, 11}));\n    writer.addDocument(document);\n\n    // intersects (crosses)\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {12, 1}, new int[] {15, 29}));\n    writer.addDocument(document);\n\n    // disjoint\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {-122, 1}, new int[] {-115, 29}));\n    writer.addDocument(document);\n\n    // intersects (crosses)\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {Integer.MIN_VALUE, 1}, new int[] {-11, 29}));\n    writer.addDocument(document);\n\n    // equal (within, contains, intersects)\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {-11, -15}, new int[] {15, 20}));\n    writer.addDocument(document);\n\n    // search\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    assertEquals(7, searcher.count(IntRangeField.newIntersectsQuery(FIELD_NAME,\n        new int[] {-11, -15}, new int[] {15, 20})));\n    assertEquals(3, searcher.count(IntRangeField.newWithinQuery(FIELD_NAME,\n        new int[] {-11, -15}, new int[] {15, 20})));\n    assertEquals(2, searcher.count(IntRangeField.newContainsQuery(FIELD_NAME,\n        new int[] {-11, -15}, new int[] {15, 20})));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9dec1cfab325d955644ed528eb211dd09d093086","date":1487270763,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestIntRangeFieldQueries#testBasics().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestIntRangeFieldQueries#testBasics().mjava","sourceNew":"  /** Basic test */\n  public void testBasics() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // intersects (within)\n    Document document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {-10, -10}, new int[] {9, 10}));\n    writer.addDocument(document);\n\n    // intersects (crosses)\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {10, -10}, new int[] {20, 10}));\n    writer.addDocument(document);\n\n    // intersects (contains / crosses)\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {-20, -20}, new int[] {30, 30}));\n    writer.addDocument(document);\n\n    // intersects (within)\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {-11, -11}, new int[] {1, 11}));\n    writer.addDocument(document);\n\n    // intersects (crosses)\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {12, 1}, new int[] {15, 29}));\n    writer.addDocument(document);\n\n    // disjoint\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {-122, 1}, new int[] {-115, 29}));\n    writer.addDocument(document);\n\n    // intersects (crosses)\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {Integer.MIN_VALUE, 1}, new int[] {-11, 29}));\n    writer.addDocument(document);\n\n    // equal (within, contains, intersects)\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {-11, -15}, new int[] {15, 20}));\n    writer.addDocument(document);\n\n    // search\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    assertEquals(7, searcher.count(IntRangeField.newIntersectsQuery(FIELD_NAME,\n        new int[] {-11, -15}, new int[] {15, 20})));\n    assertEquals(3, searcher.count(IntRangeField.newWithinQuery(FIELD_NAME,\n        new int[] {-11, -15}, new int[] {15, 20})));\n    assertEquals(2, searcher.count(IntRangeField.newContainsQuery(FIELD_NAME,\n        new int[] {-11, -15}, new int[] {15, 20})));\n    assertEquals(4, searcher.count(IntRangeField.newCrossesQuery(FIELD_NAME,\n        new int[] {-11, -15}, new int[] {15, 20})));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Basic test */\n  public void testBasics() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // intersects (within)\n    Document document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {-10, -10}, new int[] {9, 10}));\n    writer.addDocument(document);\n\n    // intersects (crosses)\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {10, -10}, new int[] {20, 10}));\n    writer.addDocument(document);\n\n    // intersects (contains)\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {-20, -20}, new int[] {30, 30}));\n    writer.addDocument(document);\n\n    // intersects (within)\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {-11, -11}, new int[] {1, 11}));\n    writer.addDocument(document);\n\n    // intersects (crosses)\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {12, 1}, new int[] {15, 29}));\n    writer.addDocument(document);\n\n    // disjoint\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {-122, 1}, new int[] {-115, 29}));\n    writer.addDocument(document);\n\n    // intersects (crosses)\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {Integer.MIN_VALUE, 1}, new int[] {-11, 29}));\n    writer.addDocument(document);\n\n    // equal (within, contains, intersects)\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {-11, -15}, new int[] {15, 20}));\n    writer.addDocument(document);\n\n    // search\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    assertEquals(7, searcher.count(IntRangeField.newIntersectsQuery(FIELD_NAME,\n        new int[] {-11, -15}, new int[] {15, 20})));\n    assertEquals(3, searcher.count(IntRangeField.newWithinQuery(FIELD_NAME,\n        new int[] {-11, -15}, new int[] {15, 20})));\n    assertEquals(2, searcher.count(IntRangeField.newContainsQuery(FIELD_NAME,\n        new int[] {-11, -15}, new int[] {15, 20})));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a52b01a73cacbd2d360240e72d64c0ba353618f","date":1489389749,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestIntRangeFieldQueries#testBasics().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestIntRangeFieldQueries#testBasics().mjava","sourceNew":"  /** Basic test */\n  public void testBasics() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // intersects (within)\n    Document document = new Document();\n    document.add(new IntRange(FIELD_NAME, new int[] {-10, -10}, new int[] {9, 10}));\n    writer.addDocument(document);\n\n    // intersects (crosses)\n    document = new Document();\n    document.add(new IntRange(FIELD_NAME, new int[] {10, -10}, new int[] {20, 10}));\n    writer.addDocument(document);\n\n    // intersects (contains / crosses)\n    document = new Document();\n    document.add(new IntRange(FIELD_NAME, new int[] {-20, -20}, new int[] {30, 30}));\n    writer.addDocument(document);\n\n    // intersects (within)\n    document = new Document();\n    document.add(new IntRange(FIELD_NAME, new int[] {-11, -11}, new int[] {1, 11}));\n    writer.addDocument(document);\n\n    // intersects (crosses)\n    document = new Document();\n    document.add(new IntRange(FIELD_NAME, new int[] {12, 1}, new int[] {15, 29}));\n    writer.addDocument(document);\n\n    // disjoint\n    document = new Document();\n    document.add(new IntRange(FIELD_NAME, new int[] {-122, 1}, new int[] {-115, 29}));\n    writer.addDocument(document);\n\n    // intersects (crosses)\n    document = new Document();\n    document.add(new IntRange(FIELD_NAME, new int[] {Integer.MIN_VALUE, 1}, new int[] {-11, 29}));\n    writer.addDocument(document);\n\n    // equal (within, contains, intersects)\n    document = new Document();\n    document.add(new IntRange(FIELD_NAME, new int[] {-11, -15}, new int[] {15, 20}));\n    writer.addDocument(document);\n\n    // search\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    assertEquals(7, searcher.count(IntRange.newIntersectsQuery(FIELD_NAME,\n        new int[] {-11, -15}, new int[] {15, 20})));\n    assertEquals(3, searcher.count(IntRange.newWithinQuery(FIELD_NAME,\n        new int[] {-11, -15}, new int[] {15, 20})));\n    assertEquals(2, searcher.count(IntRange.newContainsQuery(FIELD_NAME,\n        new int[] {-11, -15}, new int[] {15, 20})));\n    assertEquals(4, searcher.count(IntRange.newCrossesQuery(FIELD_NAME,\n        new int[] {-11, -15}, new int[] {15, 20})));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Basic test */\n  public void testBasics() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // intersects (within)\n    Document document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {-10, -10}, new int[] {9, 10}));\n    writer.addDocument(document);\n\n    // intersects (crosses)\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {10, -10}, new int[] {20, 10}));\n    writer.addDocument(document);\n\n    // intersects (contains / crosses)\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {-20, -20}, new int[] {30, 30}));\n    writer.addDocument(document);\n\n    // intersects (within)\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {-11, -11}, new int[] {1, 11}));\n    writer.addDocument(document);\n\n    // intersects (crosses)\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {12, 1}, new int[] {15, 29}));\n    writer.addDocument(document);\n\n    // disjoint\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {-122, 1}, new int[] {-115, 29}));\n    writer.addDocument(document);\n\n    // intersects (crosses)\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {Integer.MIN_VALUE, 1}, new int[] {-11, 29}));\n    writer.addDocument(document);\n\n    // equal (within, contains, intersects)\n    document = new Document();\n    document.add(new IntRangeField(FIELD_NAME, new int[] {-11, -15}, new int[] {15, 20}));\n    writer.addDocument(document);\n\n    // search\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    assertEquals(7, searcher.count(IntRangeField.newIntersectsQuery(FIELD_NAME,\n        new int[] {-11, -15}, new int[] {15, 20})));\n    assertEquals(3, searcher.count(IntRangeField.newWithinQuery(FIELD_NAME,\n        new int[] {-11, -15}, new int[] {15, 20})));\n    assertEquals(2, searcher.count(IntRangeField.newContainsQuery(FIELD_NAME,\n        new int[] {-11, -15}, new int[] {15, 20})));\n    assertEquals(4, searcher.count(IntRangeField.newCrossesQuery(FIELD_NAME,\n        new int[] {-11, -15}, new int[] {15, 20})));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"7825da0fed0bd08a466fec72f7c6a18a2abb303d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9dec1cfab325d955644ed528eb211dd09d093086":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"4a52b01a73cacbd2d360240e72d64c0ba353618f":["9dec1cfab325d955644ed528eb211dd09d093086"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7825da0fed0bd08a466fec72f7c6a18a2abb303d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4a52b01a73cacbd2d360240e72d64c0ba353618f"]},"commit2Childs":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["9dec1cfab325d955644ed528eb211dd09d093086","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"7825da0fed0bd08a466fec72f7c6a18a2abb303d":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"9dec1cfab325d955644ed528eb211dd09d093086":["4a52b01a73cacbd2d360240e72d64c0ba353618f"],"4a52b01a73cacbd2d360240e72d64c0ba353618f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["403d05f7f8d69b65659157eff1bc1d2717f04c66","7825da0fed0bd08a466fec72f7c6a18a2abb303d","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}