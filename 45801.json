{"path":"solr/core/src/java/org/apache/solr/schema/SchemaManager#doOperations(List[Operation]).mjava","commits":[{"id":"4a54d9ede1b7f2f026639186eb07f3f314d87d9a","date":1412176848,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaManager#doOperations(List[Operation]).mjava","pathOld":"/dev/null","sourceNew":"  private List<String> doOperations(List<Operation> operations){\n    int timeout = req.getParams().getInt(BaseSolrResource.UPDATE_TIMEOUT_SECS, -1);\n    long startTime = System.nanoTime();\n    long endTime = timeout >0  ? System.nanoTime()+ (timeout * 1000*1000) : Long.MAX_VALUE;\n    SolrCore core = req.getCore();\n    for(;System.nanoTime() < endTime ;) {\n      managedIndexSchema = (ManagedIndexSchema) core.getLatestSchema();\n      for (Operation op : operations) {\n        if (ADD_FIELD.equals(op.name) || ADD_DYNAMIC_FIELD.equals(op.name)) {\n          applyAddField(op);\n        } else if(ADD_COPY_FIELD.equals(op.name)) {\n          applyAddCopyField(op);\n        } else if(ADD_FIELD_TYPE.equals(op.name)) {\n          applyAddType(op);\n\n        } else {\n          op.addError(\"No such operation : \" + op.name);\n        }\n      }\n      List errs = captureErrors(operations);\n      if (!errs.isEmpty()) return errs;\n\n      try {\n        managedIndexSchema.persistManagedSchema(false);\n        core.setLatestSchema(managedIndexSchema);\n        waitForOtherReplicasToUpdate(timeout, startTime);\n        return EMPTY_LIST;\n      } catch (ManagedIndexSchema.SchemaChangedInZkException e) {\n        String s = \"Failed to update schema because schema is modified\";\n        log.warn(s, e);\n        continue;\n      } catch (Exception e){\n        String s = \"Exception persisting schema\";\n        log.warn(s, e);\n        return singletonList(s + e.getMessage());\n      }\n    }\n\n    return singletonList(\"Unable to persist schema\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6f210f93b33ab0a937f545d5f1cc76211cfac904","6f210f93b33ab0a937f545d5f1cc76211cfac904"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaManager#doOperations(List[Operation]).mjava","pathOld":"/dev/null","sourceNew":"  private List<String> doOperations(List<Operation> operations){\n    int timeout = req.getParams().getInt(BaseSolrResource.UPDATE_TIMEOUT_SECS, -1);\n    long startTime = System.nanoTime();\n    long endTime = timeout >0  ? System.nanoTime()+ (timeout * 1000*1000) : Long.MAX_VALUE;\n    SolrCore core = req.getCore();\n    for(;System.nanoTime() < endTime ;) {\n      managedIndexSchema = (ManagedIndexSchema) core.getLatestSchema();\n      for (Operation op : operations) {\n        if (ADD_FIELD.equals(op.name) || ADD_DYNAMIC_FIELD.equals(op.name)) {\n          applyAddField(op);\n        } else if(ADD_COPY_FIELD.equals(op.name)) {\n          applyAddCopyField(op);\n        } else if(ADD_FIELD_TYPE.equals(op.name)) {\n          applyAddType(op);\n\n        } else {\n          op.addError(\"No such operation : \" + op.name);\n        }\n      }\n      List errs = captureErrors(operations);\n      if (!errs.isEmpty()) return errs;\n\n      try {\n        managedIndexSchema.persistManagedSchema(false);\n        core.setLatestSchema(managedIndexSchema);\n        waitForOtherReplicasToUpdate(timeout, startTime);\n        return EMPTY_LIST;\n      } catch (ManagedIndexSchema.SchemaChangedInZkException e) {\n        String s = \"Failed to update schema because schema is modified\";\n        log.warn(s, e);\n        continue;\n      } catch (Exception e){\n        String s = \"Exception persisting schema\";\n        log.warn(s, e);\n        return singletonList(s + e.getMessage());\n      }\n    }\n\n    return singletonList(\"Unable to persist schema\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb9af919a17be70cfc512901fc70f1beaf840ca1","date":1413208885,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaManager#doOperations(List[CommandOperation]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaManager#doOperations(List[Operation]).mjava","sourceNew":"  private List doOperations(List<CommandOperation> operations){\n    int timeout = req.getParams().getInt(BaseSolrResource.UPDATE_TIMEOUT_SECS, -1);\n    long startTime = System.nanoTime();\n    long endTime = timeout >0  ? System.nanoTime()+ (timeout * 1000*1000) : Long.MAX_VALUE;\n    SolrCore core = req.getCore();\n    for(;System.nanoTime() < endTime ;) {\n      managedIndexSchema = (ManagedIndexSchema) core.getLatestSchema();\n      for (CommandOperation op : operations) {\n        if (ADD_FIELD.equals(op.name) || ADD_DYNAMIC_FIELD.equals(op.name)) {\n          applyAddField(op);\n        } else if(ADD_COPY_FIELD.equals(op.name)) {\n          applyAddCopyField(op);\n        } else if(ADD_FIELD_TYPE.equals(op.name)) {\n          applyAddType(op);\n\n        } else {\n          op.addError(\"No such operation : \" + op.name);\n        }\n      }\n      List errs = CommandOperation.captureErrors(operations);\n      if (!errs.isEmpty()) return errs;\n\n      try {\n        managedIndexSchema.persistManagedSchema(false);\n        core.setLatestSchema(managedIndexSchema);\n        waitForOtherReplicasToUpdate(timeout, startTime);\n        return EMPTY_LIST;\n      } catch (ManagedIndexSchema.SchemaChangedInZkException e) {\n        String s = \"Failed to update schema because schema is modified\";\n        log.warn(s, e);\n        continue;\n      } catch (Exception e){\n        String s = \"Exception persisting schema\";\n        log.warn(s, e);\n        return singletonList(s + e.getMessage());\n      }\n    }\n\n    return singletonList(\"Unable to persist schema\");\n\n  }\n\n","sourceOld":"  private List<String> doOperations(List<Operation> operations){\n    int timeout = req.getParams().getInt(BaseSolrResource.UPDATE_TIMEOUT_SECS, -1);\n    long startTime = System.nanoTime();\n    long endTime = timeout >0  ? System.nanoTime()+ (timeout * 1000*1000) : Long.MAX_VALUE;\n    SolrCore core = req.getCore();\n    for(;System.nanoTime() < endTime ;) {\n      managedIndexSchema = (ManagedIndexSchema) core.getLatestSchema();\n      for (Operation op : operations) {\n        if (ADD_FIELD.equals(op.name) || ADD_DYNAMIC_FIELD.equals(op.name)) {\n          applyAddField(op);\n        } else if(ADD_COPY_FIELD.equals(op.name)) {\n          applyAddCopyField(op);\n        } else if(ADD_FIELD_TYPE.equals(op.name)) {\n          applyAddType(op);\n\n        } else {\n          op.addError(\"No such operation : \" + op.name);\n        }\n      }\n      List errs = captureErrors(operations);\n      if (!errs.isEmpty()) return errs;\n\n      try {\n        managedIndexSchema.persistManagedSchema(false);\n        core.setLatestSchema(managedIndexSchema);\n        waitForOtherReplicasToUpdate(timeout, startTime);\n        return EMPTY_LIST;\n      } catch (ManagedIndexSchema.SchemaChangedInZkException e) {\n        String s = \"Failed to update schema because schema is modified\";\n        log.warn(s, e);\n        continue;\n      } catch (Exception e){\n        String s = \"Exception persisting schema\";\n        log.warn(s, e);\n        return singletonList(s + e.getMessage());\n      }\n    }\n\n    return singletonList(\"Unable to persist schema\");\n\n  }\n\n","bugFix":null,"bugIntro":["6f210f93b33ab0a937f545d5f1cc76211cfac904","6f210f93b33ab0a937f545d5f1cc76211cfac904"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaManager#doOperations(List[CommandOperation]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaManager#doOperations(List[Operation]).mjava","sourceNew":"  private List doOperations(List<CommandOperation> operations){\n    int timeout = req.getParams().getInt(BaseSolrResource.UPDATE_TIMEOUT_SECS, -1);\n    long startTime = System.nanoTime();\n    long endTime = timeout >0  ? System.nanoTime()+ (timeout * 1000*1000) : Long.MAX_VALUE;\n    SolrCore core = req.getCore();\n    for(;System.nanoTime() < endTime ;) {\n      managedIndexSchema = (ManagedIndexSchema) core.getLatestSchema();\n      for (CommandOperation op : operations) {\n        if (ADD_FIELD.equals(op.name) || ADD_DYNAMIC_FIELD.equals(op.name)) {\n          applyAddField(op);\n        } else if(ADD_COPY_FIELD.equals(op.name)) {\n          applyAddCopyField(op);\n        } else if(ADD_FIELD_TYPE.equals(op.name)) {\n          applyAddType(op);\n\n        } else {\n          op.addError(\"No such operation : \" + op.name);\n        }\n      }\n      List errs = CommandOperation.captureErrors(operations);\n      if (!errs.isEmpty()) return errs;\n\n      try {\n        managedIndexSchema.persistManagedSchema(false);\n        core.setLatestSchema(managedIndexSchema);\n        waitForOtherReplicasToUpdate(timeout, startTime);\n        return EMPTY_LIST;\n      } catch (ManagedIndexSchema.SchemaChangedInZkException e) {\n        String s = \"Failed to update schema because schema is modified\";\n        log.warn(s, e);\n        continue;\n      } catch (Exception e){\n        String s = \"Exception persisting schema\";\n        log.warn(s, e);\n        return singletonList(s + e.getMessage());\n      }\n    }\n\n    return singletonList(\"Unable to persist schema\");\n\n  }\n\n","sourceOld":"  private List<String> doOperations(List<Operation> operations){\n    int timeout = req.getParams().getInt(BaseSolrResource.UPDATE_TIMEOUT_SECS, -1);\n    long startTime = System.nanoTime();\n    long endTime = timeout >0  ? System.nanoTime()+ (timeout * 1000*1000) : Long.MAX_VALUE;\n    SolrCore core = req.getCore();\n    for(;System.nanoTime() < endTime ;) {\n      managedIndexSchema = (ManagedIndexSchema) core.getLatestSchema();\n      for (Operation op : operations) {\n        if (ADD_FIELD.equals(op.name) || ADD_DYNAMIC_FIELD.equals(op.name)) {\n          applyAddField(op);\n        } else if(ADD_COPY_FIELD.equals(op.name)) {\n          applyAddCopyField(op);\n        } else if(ADD_FIELD_TYPE.equals(op.name)) {\n          applyAddType(op);\n\n        } else {\n          op.addError(\"No such operation : \" + op.name);\n        }\n      }\n      List errs = captureErrors(operations);\n      if (!errs.isEmpty()) return errs;\n\n      try {\n        managedIndexSchema.persistManagedSchema(false);\n        core.setLatestSchema(managedIndexSchema);\n        waitForOtherReplicasToUpdate(timeout, startTime);\n        return EMPTY_LIST;\n      } catch (ManagedIndexSchema.SchemaChangedInZkException e) {\n        String s = \"Failed to update schema because schema is modified\";\n        log.warn(s, e);\n        continue;\n      } catch (Exception e){\n        String s = \"Exception persisting schema\";\n        log.warn(s, e);\n        return singletonList(s + e.getMessage());\n      }\n    }\n\n    return singletonList(\"Unable to persist schema\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55980207f1977bd1463465de1659b821347e2fa8":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cb9af919a17be70cfc512901fc70f1beaf840ca1"],"cb9af919a17be70cfc512901fc70f1beaf840ca1":["4a54d9ede1b7f2f026639186eb07f3f314d87d9a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4a54d9ede1b7f2f026639186eb07f3f314d87d9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4a54d9ede1b7f2f026639186eb07f3f314d87d9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cb9af919a17be70cfc512901fc70f1beaf840ca1"]},"commit2Childs":{"55980207f1977bd1463465de1659b821347e2fa8":[],"cb9af919a17be70cfc512901fc70f1beaf840ca1":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4a54d9ede1b7f2f026639186eb07f3f314d87d9a","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["55980207f1977bd1463465de1659b821347e2fa8"],"4a54d9ede1b7f2f026639186eb07f3f314d87d9a":["cb9af919a17be70cfc512901fc70f1beaf840ca1","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}