{"path":"solr/src/java/org/apache/solr/handler/component/DebugComponent#merge(Object,Object,Set[String]).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/DebugComponent#merge(Object,Object,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  Object merge(Object source, Object dest, Set<String> exclude) {\n    if (source == null) return dest;\n    if (dest == null) {\n      if (source instanceof NamedList) {\n        dest = source instanceof SimpleOrderedMap ? new SimpleOrderedMap() : new NamedList();\n      } else {\n        return source;\n      }\n    } else {\n\n      if (dest instanceof Collection) {\n        if (source instanceof Collection) {\n          ((Collection)dest).addAll((Collection)source);\n        } else {\n          ((Collection)dest).add(source);\n        }\n        return dest;\n      } else if (source instanceof Number) {\n        if (dest instanceof Number) {\n          if (source instanceof Double || dest instanceof Double) {\n            return ((Number)source).doubleValue() + ((Number)dest).doubleValue();\n          }\n          return ((Number)source).longValue() + ((Number)dest).longValue();\n        }\n        // fall through\n      } else if (source instanceof String) {\n        if (source.equals(dest)) {\n          return dest;\n        }\n        // fall through\n      }\n    }\n\n\n    if (source instanceof NamedList && dest instanceof NamedList) {\n      NamedList tmp = new NamedList();\n      NamedList sl = (NamedList)source;\n      NamedList dl = (NamedList)dest;\n      for (int i=0; i<sl.size(); i++) {\n        String skey = sl.getName(i);\n        if (exclude != null && exclude.contains(skey)) continue;\n        Object sval = sl.getVal(i);\n        int didx = -1;\n\n        // optimize case where elements are in same position\n        if (i < dl.size()) {\n          String dkey = dl.getName(i);\n          if (skey == dkey || (skey!=null && skey.equals(dkey))) {\n            didx = i;\n          }\n        }\n\n        if (didx == -1) {\n          didx = dl.indexOf(skey, 0);\n        }\n\n        if (didx == -1) {\n          tmp.add(skey, merge(sval, null, null));\n        } else {\n          dl.setVal(didx, merge(sval, dl.getVal(didx), null));\n        }\n      }\n      dl.addAll(tmp);\n      return dl;\n    }\n\n    // merge unlike elements in a list\n    List t = new ArrayList();\n    t.add(dest);\n    t.add(source);\n    return t;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/component/DebugComponent#merge(Object,Object,Set[String]).mjava","sourceNew":null,"sourceOld":"  Object merge(Object source, Object dest, Set<String> exclude) {\n    if (source == null) return dest;\n    if (dest == null) {\n      if (source instanceof NamedList) {\n        dest = source instanceof SimpleOrderedMap ? new SimpleOrderedMap() : new NamedList();\n      } else {\n        return source;\n      }\n    } else {\n\n      if (dest instanceof Collection) {\n        if (source instanceof Collection) {\n          ((Collection)dest).addAll((Collection)source);\n        } else {\n          ((Collection)dest).add(source);\n        }\n        return dest;\n      } else if (source instanceof Number) {\n        if (dest instanceof Number) {\n          if (source instanceof Double || dest instanceof Double) {\n            return ((Number)source).doubleValue() + ((Number)dest).doubleValue();\n          }\n          return ((Number)source).longValue() + ((Number)dest).longValue();\n        }\n        // fall through\n      } else if (source instanceof String) {\n        if (source.equals(dest)) {\n          return dest;\n        }\n        // fall through\n      }\n    }\n\n\n    if (source instanceof NamedList && dest instanceof NamedList) {\n      NamedList tmp = new NamedList();\n      NamedList sl = (NamedList)source;\n      NamedList dl = (NamedList)dest;\n      for (int i=0; i<sl.size(); i++) {\n        String skey = sl.getName(i);\n        if (exclude != null && exclude.contains(skey)) continue;\n        Object sval = sl.getVal(i);\n        int didx = -1;\n\n        // optimize case where elements are in same position\n        if (i < dl.size()) {\n          String dkey = dl.getName(i);\n          if (skey == dkey || (skey!=null && skey.equals(dkey))) {\n            didx = i;\n          }\n        }\n\n        if (didx == -1) {\n          didx = dl.indexOf(skey, 0);\n        }\n\n        if (didx == -1) {\n          tmp.add(skey, merge(sval, null, null));\n        } else {\n          dl.setVal(didx, merge(sval, dl.getVal(didx), null));\n        }\n      }\n      dl.addAll(tmp);\n      return dl;\n    }\n\n    // merge unlike elements in a list\n    List t = new ArrayList();\n    t.add(dest);\n    t.add(source);\n    return t;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/DebugComponent#merge(Object,Object,Set[String]).mjava","pathOld":"src/java/org/apache/solr/handler/component/DebugComponent#merge(Object,Object,Set[String]).mjava","sourceNew":"  Object merge(Object source, Object dest, Set<String> exclude) {\n    if (source == null) return dest;\n    if (dest == null) {\n      if (source instanceof NamedList) {\n        dest = source instanceof SimpleOrderedMap ? new SimpleOrderedMap() : new NamedList();\n      } else {\n        return source;\n      }\n    } else {\n\n      if (dest instanceof Collection) {\n        if (source instanceof Collection) {\n          ((Collection)dest).addAll((Collection)source);\n        } else {\n          ((Collection)dest).add(source);\n        }\n        return dest;\n      } else if (source instanceof Number) {\n        if (dest instanceof Number) {\n          if (source instanceof Double || dest instanceof Double) {\n            return ((Number)source).doubleValue() + ((Number)dest).doubleValue();\n          }\n          return ((Number)source).longValue() + ((Number)dest).longValue();\n        }\n        // fall through\n      } else if (source instanceof String) {\n        if (source.equals(dest)) {\n          return dest;\n        }\n        // fall through\n      }\n    }\n\n\n    if (source instanceof NamedList && dest instanceof NamedList) {\n      NamedList tmp = new NamedList();\n      NamedList sl = (NamedList)source;\n      NamedList dl = (NamedList)dest;\n      for (int i=0; i<sl.size(); i++) {\n        String skey = sl.getName(i);\n        if (exclude != null && exclude.contains(skey)) continue;\n        Object sval = sl.getVal(i);\n        int didx = -1;\n\n        // optimize case where elements are in same position\n        if (i < dl.size()) {\n          String dkey = dl.getName(i);\n          if (skey == dkey || (skey!=null && skey.equals(dkey))) {\n            didx = i;\n          }\n        }\n\n        if (didx == -1) {\n          didx = dl.indexOf(skey, 0);\n        }\n\n        if (didx == -1) {\n          tmp.add(skey, merge(sval, null, null));\n        } else {\n          dl.setVal(didx, merge(sval, dl.getVal(didx), null));\n        }\n      }\n      dl.addAll(tmp);\n      return dl;\n    }\n\n    // merge unlike elements in a list\n    List t = new ArrayList();\n    t.add(dest);\n    t.add(source);\n    return t;\n  }\n\n","sourceOld":"  Object merge(Object source, Object dest, Set<String> exclude) {\n    if (source == null) return dest;\n    if (dest == null) {\n      if (source instanceof NamedList) {\n        dest = source instanceof SimpleOrderedMap ? new SimpleOrderedMap() : new NamedList();\n      } else {\n        return source;\n      }\n    } else {\n\n      if (dest instanceof Collection) {\n        if (source instanceof Collection) {\n          ((Collection)dest).addAll((Collection)source);\n        } else {\n          ((Collection)dest).add(source);\n        }\n        return dest;\n      } else if (source instanceof Number) {\n        if (dest instanceof Number) {\n          if (source instanceof Double || dest instanceof Double) {\n            return ((Number)source).doubleValue() + ((Number)dest).doubleValue();\n          }\n          return ((Number)source).longValue() + ((Number)dest).longValue();\n        }\n        // fall through\n      } else if (source instanceof String) {\n        if (source.equals(dest)) {\n          return dest;\n        }\n        // fall through\n      }\n    }\n\n\n    if (source instanceof NamedList && dest instanceof NamedList) {\n      NamedList tmp = new NamedList();\n      NamedList sl = (NamedList)source;\n      NamedList dl = (NamedList)dest;\n      for (int i=0; i<sl.size(); i++) {\n        String skey = sl.getName(i);\n        if (exclude != null && exclude.contains(skey)) continue;\n        Object sval = sl.getVal(i);\n        int didx = -1;\n\n        // optimize case where elements are in same position\n        if (i < dl.size()) {\n          String dkey = dl.getName(i);\n          if (skey == dkey || (skey!=null && skey.equals(dkey))) {\n            didx = i;\n          }\n        }\n\n        if (didx == -1) {\n          didx = dl.indexOf(skey, 0);\n        }\n\n        if (didx == -1) {\n          tmp.add(skey, merge(sval, null, null));\n        } else {\n          dl.setVal(didx, merge(sval, dl.getVal(didx), null));\n        }\n      }\n      dl.addAll(tmp);\n      return dl;\n    }\n\n    // merge unlike elements in a list\n    List t = new ArrayList();\n    t.add(dest);\n    t.add(source);\n    return t;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/DebugComponent#merge(Object,Object,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  Object merge(Object source, Object dest, Set<String> exclude) {\n    if (source == null) return dest;\n    if (dest == null) {\n      if (source instanceof NamedList) {\n        dest = source instanceof SimpleOrderedMap ? new SimpleOrderedMap() : new NamedList();\n      } else {\n        return source;\n      }\n    } else {\n\n      if (dest instanceof Collection) {\n        if (source instanceof Collection) {\n          ((Collection)dest).addAll((Collection)source);\n        } else {\n          ((Collection)dest).add(source);\n        }\n        return dest;\n      } else if (source instanceof Number) {\n        if (dest instanceof Number) {\n          if (source instanceof Double || dest instanceof Double) {\n            return ((Number)source).doubleValue() + ((Number)dest).doubleValue();\n          }\n          return ((Number)source).longValue() + ((Number)dest).longValue();\n        }\n        // fall through\n      } else if (source instanceof String) {\n        if (source.equals(dest)) {\n          return dest;\n        }\n        // fall through\n      }\n    }\n\n\n    if (source instanceof NamedList && dest instanceof NamedList) {\n      NamedList tmp = new NamedList();\n      NamedList sl = (NamedList)source;\n      NamedList dl = (NamedList)dest;\n      for (int i=0; i<sl.size(); i++) {\n        String skey = sl.getName(i);\n        if (exclude != null && exclude.contains(skey)) continue;\n        Object sval = sl.getVal(i);\n        int didx = -1;\n\n        // optimize case where elements are in same position\n        if (i < dl.size()) {\n          String dkey = dl.getName(i);\n          if (skey == dkey || (skey!=null && skey.equals(dkey))) {\n            didx = i;\n          }\n        }\n\n        if (didx == -1) {\n          didx = dl.indexOf(skey, 0);\n        }\n\n        if (didx == -1) {\n          tmp.add(skey, merge(sval, null, null));\n        } else {\n          dl.setVal(didx, merge(sval, dl.getVal(didx), null));\n        }\n      }\n      dl.addAll(tmp);\n      return dl;\n    }\n\n    // merge unlike elements in a list\n    List t = new ArrayList();\n    t.add(dest);\n    t.add(source);\n    return t;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"755f2f419306d7297c8feee10d1897addf4b2dd0","date":1294442354,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/DebugComponent#merge(Object,Object,Set[String]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/DebugComponent#merge(Object,Object,Set[String]).mjava","sourceNew":"  Object merge(Object source, Object dest, Set<String> exclude) {\n    if (source == null) return dest;\n    if (dest == null) {\n      if (source instanceof NamedList) {\n        dest = source instanceof SimpleOrderedMap ? new SimpleOrderedMap() : new NamedList();\n      } else {\n        return source;\n      }\n    } else {\n\n      if (dest instanceof Collection) {\n        if (source instanceof Collection) {\n          ((Collection)dest).addAll((Collection)source);\n        } else {\n          ((Collection)dest).add(source);\n        }\n        return dest;\n      } else if (source instanceof Number) {\n        if (dest instanceof Number) {\n          if (source instanceof Double || dest instanceof Double) {\n            return ((Number)source).doubleValue() + ((Number)dest).doubleValue();\n          }\n          return ((Number)source).longValue() + ((Number)dest).longValue();\n        }\n        // fall through\n      } else if (source instanceof String) {\n        if (source.equals(dest)) {\n          return dest;\n        }\n        // fall through\n      }\n    }\n\n\n    if (source instanceof NamedList && dest instanceof NamedList) {\n      NamedList<Object> tmp = new NamedList<Object>();\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> sl = (NamedList<Object>)source;\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> dl = (NamedList<Object>)dest;\n      for (int i=0; i<sl.size(); i++) {\n        String skey = sl.getName(i);\n        if (exclude != null && exclude.contains(skey)) continue;\n        Object sval = sl.getVal(i);\n        int didx = -1;\n\n        // optimize case where elements are in same position\n        if (i < dl.size()) {\n          String dkey = dl.getName(i);\n          if (skey == dkey || (skey!=null && skey.equals(dkey))) {\n            didx = i;\n          }\n        }\n\n        if (didx == -1) {\n          didx = dl.indexOf(skey, 0);\n        }\n\n        if (didx == -1) {\n          tmp.add(skey, merge(sval, null, null));\n        } else {\n          dl.setVal(didx, merge(sval, dl.getVal(didx), null));\n        }\n      }\n      dl.addAll(tmp);\n      return dl;\n    }\n\n    // merge unlike elements in a list\n    List<Object> t = new ArrayList<Object>();\n    t.add(dest);\n    t.add(source);\n    return t;\n  }\n\n","sourceOld":"  Object merge(Object source, Object dest, Set<String> exclude) {\n    if (source == null) return dest;\n    if (dest == null) {\n      if (source instanceof NamedList) {\n        dest = source instanceof SimpleOrderedMap ? new SimpleOrderedMap() : new NamedList();\n      } else {\n        return source;\n      }\n    } else {\n\n      if (dest instanceof Collection) {\n        if (source instanceof Collection) {\n          ((Collection)dest).addAll((Collection)source);\n        } else {\n          ((Collection)dest).add(source);\n        }\n        return dest;\n      } else if (source instanceof Number) {\n        if (dest instanceof Number) {\n          if (source instanceof Double || dest instanceof Double) {\n            return ((Number)source).doubleValue() + ((Number)dest).doubleValue();\n          }\n          return ((Number)source).longValue() + ((Number)dest).longValue();\n        }\n        // fall through\n      } else if (source instanceof String) {\n        if (source.equals(dest)) {\n          return dest;\n        }\n        // fall through\n      }\n    }\n\n\n    if (source instanceof NamedList && dest instanceof NamedList) {\n      NamedList tmp = new NamedList();\n      NamedList sl = (NamedList)source;\n      NamedList dl = (NamedList)dest;\n      for (int i=0; i<sl.size(); i++) {\n        String skey = sl.getName(i);\n        if (exclude != null && exclude.contains(skey)) continue;\n        Object sval = sl.getVal(i);\n        int didx = -1;\n\n        // optimize case where elements are in same position\n        if (i < dl.size()) {\n          String dkey = dl.getName(i);\n          if (skey == dkey || (skey!=null && skey.equals(dkey))) {\n            didx = i;\n          }\n        }\n\n        if (didx == -1) {\n          didx = dl.indexOf(skey, 0);\n        }\n\n        if (didx == -1) {\n          tmp.add(skey, merge(sval, null, null));\n        } else {\n          dl.setVal(didx, merge(sval, dl.getVal(didx), null));\n        }\n      }\n      dl.addAll(tmp);\n      return dl;\n    }\n\n    // merge unlike elements in a list\n    List t = new ArrayList();\n    t.add(dest);\n    t.add(source);\n    return t;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/DebugComponent#merge(Object,Object,Set[String]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/DebugComponent#merge(Object,Object,Set[String]).mjava","sourceNew":"  Object merge(Object source, Object dest, Set<String> exclude) {\n    if (source == null) return dest;\n    if (dest == null) {\n      if (source instanceof NamedList) {\n        dest = source instanceof SimpleOrderedMap ? new SimpleOrderedMap() : new NamedList();\n      } else {\n        return source;\n      }\n    } else {\n\n      if (dest instanceof Collection) {\n        if (source instanceof Collection) {\n          ((Collection)dest).addAll((Collection)source);\n        } else {\n          ((Collection)dest).add(source);\n        }\n        return dest;\n      } else if (source instanceof Number) {\n        if (dest instanceof Number) {\n          if (source instanceof Double || dest instanceof Double) {\n            return ((Number)source).doubleValue() + ((Number)dest).doubleValue();\n          }\n          return ((Number)source).longValue() + ((Number)dest).longValue();\n        }\n        // fall through\n      } else if (source instanceof String) {\n        if (source.equals(dest)) {\n          return dest;\n        }\n        // fall through\n      }\n    }\n\n\n    if (source instanceof NamedList && dest instanceof NamedList) {\n      NamedList<Object> tmp = new NamedList<Object>();\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> sl = (NamedList<Object>)source;\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> dl = (NamedList<Object>)dest;\n      for (int i=0; i<sl.size(); i++) {\n        String skey = sl.getName(i);\n        if (exclude != null && exclude.contains(skey)) continue;\n        Object sval = sl.getVal(i);\n        int didx = -1;\n\n        // optimize case where elements are in same position\n        if (i < dl.size()) {\n          String dkey = dl.getName(i);\n          if (skey == dkey || (skey!=null && skey.equals(dkey))) {\n            didx = i;\n          }\n        }\n\n        if (didx == -1) {\n          didx = dl.indexOf(skey, 0);\n        }\n\n        if (didx == -1) {\n          tmp.add(skey, merge(sval, null, null));\n        } else {\n          dl.setVal(didx, merge(sval, dl.getVal(didx), null));\n        }\n      }\n      dl.addAll(tmp);\n      return dl;\n    }\n\n    // merge unlike elements in a list\n    List<Object> t = new ArrayList<Object>();\n    t.add(dest);\n    t.add(source);\n    return t;\n  }\n\n","sourceOld":"  Object merge(Object source, Object dest, Set<String> exclude) {\n    if (source == null) return dest;\n    if (dest == null) {\n      if (source instanceof NamedList) {\n        dest = source instanceof SimpleOrderedMap ? new SimpleOrderedMap() : new NamedList();\n      } else {\n        return source;\n      }\n    } else {\n\n      if (dest instanceof Collection) {\n        if (source instanceof Collection) {\n          ((Collection)dest).addAll((Collection)source);\n        } else {\n          ((Collection)dest).add(source);\n        }\n        return dest;\n      } else if (source instanceof Number) {\n        if (dest instanceof Number) {\n          if (source instanceof Double || dest instanceof Double) {\n            return ((Number)source).doubleValue() + ((Number)dest).doubleValue();\n          }\n          return ((Number)source).longValue() + ((Number)dest).longValue();\n        }\n        // fall through\n      } else if (source instanceof String) {\n        if (source.equals(dest)) {\n          return dest;\n        }\n        // fall through\n      }\n    }\n\n\n    if (source instanceof NamedList && dest instanceof NamedList) {\n      NamedList tmp = new NamedList();\n      NamedList sl = (NamedList)source;\n      NamedList dl = (NamedList)dest;\n      for (int i=0; i<sl.size(); i++) {\n        String skey = sl.getName(i);\n        if (exclude != null && exclude.contains(skey)) continue;\n        Object sval = sl.getVal(i);\n        int didx = -1;\n\n        // optimize case where elements are in same position\n        if (i < dl.size()) {\n          String dkey = dl.getName(i);\n          if (skey == dkey || (skey!=null && skey.equals(dkey))) {\n            didx = i;\n          }\n        }\n\n        if (didx == -1) {\n          didx = dl.indexOf(skey, 0);\n        }\n\n        if (didx == -1) {\n          tmp.add(skey, merge(sval, null, null));\n        } else {\n          dl.setVal(didx, merge(sval, dl.getVal(didx), null));\n        }\n      }\n      dl.addAll(tmp);\n      return dl;\n    }\n\n    // merge unlike elements in a list\n    List t = new ArrayList();\n    t.add(dest);\n    t.add(source);\n    return t;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/DebugComponent#merge(Object,Object,Set[String]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/DebugComponent#merge(Object,Object,Set[String]).mjava","sourceNew":"  Object merge(Object source, Object dest, Set<String> exclude) {\n    if (source == null) return dest;\n    if (dest == null) {\n      if (source instanceof NamedList) {\n        dest = source instanceof SimpleOrderedMap ? new SimpleOrderedMap() : new NamedList();\n      } else {\n        return source;\n      }\n    } else {\n\n      if (dest instanceof Collection) {\n        if (source instanceof Collection) {\n          ((Collection)dest).addAll((Collection)source);\n        } else {\n          ((Collection)dest).add(source);\n        }\n        return dest;\n      } else if (source instanceof Number) {\n        if (dest instanceof Number) {\n          if (source instanceof Double || dest instanceof Double) {\n            return ((Number)source).doubleValue() + ((Number)dest).doubleValue();\n          }\n          return ((Number)source).longValue() + ((Number)dest).longValue();\n        }\n        // fall through\n      } else if (source instanceof String) {\n        if (source.equals(dest)) {\n          return dest;\n        }\n        // fall through\n      }\n    }\n\n\n    if (source instanceof NamedList && dest instanceof NamedList) {\n      NamedList<Object> tmp = new NamedList<Object>();\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> sl = (NamedList<Object>)source;\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> dl = (NamedList<Object>)dest;\n      for (int i=0; i<sl.size(); i++) {\n        String skey = sl.getName(i);\n        if (exclude != null && exclude.contains(skey)) continue;\n        Object sval = sl.getVal(i);\n        int didx = -1;\n\n        // optimize case where elements are in same position\n        if (i < dl.size()) {\n          String dkey = dl.getName(i);\n          if (skey == dkey || (skey!=null && skey.equals(dkey))) {\n            didx = i;\n          }\n        }\n\n        if (didx == -1) {\n          didx = dl.indexOf(skey, 0);\n        }\n\n        if (didx == -1) {\n          tmp.add(skey, merge(sval, null, null));\n        } else {\n          dl.setVal(didx, merge(sval, dl.getVal(didx), null));\n        }\n      }\n      dl.addAll(tmp);\n      return dl;\n    }\n\n    // merge unlike elements in a list\n    List<Object> t = new ArrayList<Object>();\n    t.add(dest);\n    t.add(source);\n    return t;\n  }\n\n","sourceOld":"  Object merge(Object source, Object dest, Set<String> exclude) {\n    if (source == null) return dest;\n    if (dest == null) {\n      if (source instanceof NamedList) {\n        dest = source instanceof SimpleOrderedMap ? new SimpleOrderedMap() : new NamedList();\n      } else {\n        return source;\n      }\n    } else {\n\n      if (dest instanceof Collection) {\n        if (source instanceof Collection) {\n          ((Collection)dest).addAll((Collection)source);\n        } else {\n          ((Collection)dest).add(source);\n        }\n        return dest;\n      } else if (source instanceof Number) {\n        if (dest instanceof Number) {\n          if (source instanceof Double || dest instanceof Double) {\n            return ((Number)source).doubleValue() + ((Number)dest).doubleValue();\n          }\n          return ((Number)source).longValue() + ((Number)dest).longValue();\n        }\n        // fall through\n      } else if (source instanceof String) {\n        if (source.equals(dest)) {\n          return dest;\n        }\n        // fall through\n      }\n    }\n\n\n    if (source instanceof NamedList && dest instanceof NamedList) {\n      NamedList tmp = new NamedList();\n      NamedList sl = (NamedList)source;\n      NamedList dl = (NamedList)dest;\n      for (int i=0; i<sl.size(); i++) {\n        String skey = sl.getName(i);\n        if (exclude != null && exclude.contains(skey)) continue;\n        Object sval = sl.getVal(i);\n        int didx = -1;\n\n        // optimize case where elements are in same position\n        if (i < dl.size()) {\n          String dkey = dl.getName(i);\n          if (skey == dkey || (skey!=null && skey.equals(dkey))) {\n            didx = i;\n          }\n        }\n\n        if (didx == -1) {\n          didx = dl.indexOf(skey, 0);\n        }\n\n        if (didx == -1) {\n          tmp.add(skey, merge(sval, null, null));\n        } else {\n          dl.setVal(didx, merge(sval, dl.getVal(didx), null));\n        }\n      }\n      dl.addAll(tmp);\n      return dl;\n    }\n\n    // merge unlike elements in a list\n    List t = new ArrayList();\n    t.add(dest);\n    t.add(source);\n    return t;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#merge(Object,Object,Set[String]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/DebugComponent#merge(Object,Object,Set[String]).mjava","sourceNew":"  Object merge(Object source, Object dest, Set<String> exclude) {\n    if (source == null) return dest;\n    if (dest == null) {\n      if (source instanceof NamedList) {\n        dest = source instanceof SimpleOrderedMap ? new SimpleOrderedMap() : new NamedList();\n      } else {\n        return source;\n      }\n    } else {\n\n      if (dest instanceof Collection) {\n        if (source instanceof Collection) {\n          ((Collection)dest).addAll((Collection)source);\n        } else {\n          ((Collection)dest).add(source);\n        }\n        return dest;\n      } else if (source instanceof Number) {\n        if (dest instanceof Number) {\n          if (source instanceof Double || dest instanceof Double) {\n            return ((Number)source).doubleValue() + ((Number)dest).doubleValue();\n          }\n          return ((Number)source).longValue() + ((Number)dest).longValue();\n        }\n        // fall through\n      } else if (source instanceof String) {\n        if (source.equals(dest)) {\n          return dest;\n        }\n        // fall through\n      }\n    }\n\n\n    if (source instanceof NamedList && dest instanceof NamedList) {\n      NamedList<Object> tmp = new NamedList<Object>();\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> sl = (NamedList<Object>)source;\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> dl = (NamedList<Object>)dest;\n      for (int i=0; i<sl.size(); i++) {\n        String skey = sl.getName(i);\n        if (exclude != null && exclude.contains(skey)) continue;\n        Object sval = sl.getVal(i);\n        int didx = -1;\n\n        // optimize case where elements are in same position\n        if (i < dl.size()) {\n          String dkey = dl.getName(i);\n          if (skey == dkey || (skey!=null && skey.equals(dkey))) {\n            didx = i;\n          }\n        }\n\n        if (didx == -1) {\n          didx = dl.indexOf(skey, 0);\n        }\n\n        if (didx == -1) {\n          tmp.add(skey, merge(sval, null, null));\n        } else {\n          dl.setVal(didx, merge(sval, dl.getVal(didx), null));\n        }\n      }\n      dl.addAll(tmp);\n      return dl;\n    }\n\n    // merge unlike elements in a list\n    List<Object> t = new ArrayList<Object>();\n    t.add(dest);\n    t.add(source);\n    return t;\n  }\n\n","sourceOld":"  Object merge(Object source, Object dest, Set<String> exclude) {\n    if (source == null) return dest;\n    if (dest == null) {\n      if (source instanceof NamedList) {\n        dest = source instanceof SimpleOrderedMap ? new SimpleOrderedMap() : new NamedList();\n      } else {\n        return source;\n      }\n    } else {\n\n      if (dest instanceof Collection) {\n        if (source instanceof Collection) {\n          ((Collection)dest).addAll((Collection)source);\n        } else {\n          ((Collection)dest).add(source);\n        }\n        return dest;\n      } else if (source instanceof Number) {\n        if (dest instanceof Number) {\n          if (source instanceof Double || dest instanceof Double) {\n            return ((Number)source).doubleValue() + ((Number)dest).doubleValue();\n          }\n          return ((Number)source).longValue() + ((Number)dest).longValue();\n        }\n        // fall through\n      } else if (source instanceof String) {\n        if (source.equals(dest)) {\n          return dest;\n        }\n        // fall through\n      }\n    }\n\n\n    if (source instanceof NamedList && dest instanceof NamedList) {\n      NamedList<Object> tmp = new NamedList<Object>();\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> sl = (NamedList<Object>)source;\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> dl = (NamedList<Object>)dest;\n      for (int i=0; i<sl.size(); i++) {\n        String skey = sl.getName(i);\n        if (exclude != null && exclude.contains(skey)) continue;\n        Object sval = sl.getVal(i);\n        int didx = -1;\n\n        // optimize case where elements are in same position\n        if (i < dl.size()) {\n          String dkey = dl.getName(i);\n          if (skey == dkey || (skey!=null && skey.equals(dkey))) {\n            didx = i;\n          }\n        }\n\n        if (didx == -1) {\n          didx = dl.indexOf(skey, 0);\n        }\n\n        if (didx == -1) {\n          tmp.add(skey, merge(sval, null, null));\n        } else {\n          dl.setVal(didx, merge(sval, dl.getVal(didx), null));\n        }\n      }\n      dl.addAll(tmp);\n      return dl;\n    }\n\n    // merge unlike elements in a list\n    List<Object> t = new ArrayList<Object>();\n    t.add(dest);\n    t.add(source);\n    return t;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#merge(Object,Object,Set[String]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/DebugComponent#merge(Object,Object,Set[String]).mjava","sourceNew":"  Object merge(Object source, Object dest, Set<String> exclude) {\n    if (source == null) return dest;\n    if (dest == null) {\n      if (source instanceof NamedList) {\n        dest = source instanceof SimpleOrderedMap ? new SimpleOrderedMap() : new NamedList();\n      } else {\n        return source;\n      }\n    } else {\n\n      if (dest instanceof Collection) {\n        if (source instanceof Collection) {\n          ((Collection)dest).addAll((Collection)source);\n        } else {\n          ((Collection)dest).add(source);\n        }\n        return dest;\n      } else if (source instanceof Number) {\n        if (dest instanceof Number) {\n          if (source instanceof Double || dest instanceof Double) {\n            return ((Number)source).doubleValue() + ((Number)dest).doubleValue();\n          }\n          return ((Number)source).longValue() + ((Number)dest).longValue();\n        }\n        // fall through\n      } else if (source instanceof String) {\n        if (source.equals(dest)) {\n          return dest;\n        }\n        // fall through\n      }\n    }\n\n\n    if (source instanceof NamedList && dest instanceof NamedList) {\n      NamedList<Object> tmp = new NamedList<Object>();\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> sl = (NamedList<Object>)source;\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> dl = (NamedList<Object>)dest;\n      for (int i=0; i<sl.size(); i++) {\n        String skey = sl.getName(i);\n        if (exclude != null && exclude.contains(skey)) continue;\n        Object sval = sl.getVal(i);\n        int didx = -1;\n\n        // optimize case where elements are in same position\n        if (i < dl.size()) {\n          String dkey = dl.getName(i);\n          if (skey == dkey || (skey!=null && skey.equals(dkey))) {\n            didx = i;\n          }\n        }\n\n        if (didx == -1) {\n          didx = dl.indexOf(skey, 0);\n        }\n\n        if (didx == -1) {\n          tmp.add(skey, merge(sval, null, null));\n        } else {\n          dl.setVal(didx, merge(sval, dl.getVal(didx), null));\n        }\n      }\n      dl.addAll(tmp);\n      return dl;\n    }\n\n    // merge unlike elements in a list\n    List<Object> t = new ArrayList<Object>();\n    t.add(dest);\n    t.add(source);\n    return t;\n  }\n\n","sourceOld":"  Object merge(Object source, Object dest, Set<String> exclude) {\n    if (source == null) return dest;\n    if (dest == null) {\n      if (source instanceof NamedList) {\n        dest = source instanceof SimpleOrderedMap ? new SimpleOrderedMap() : new NamedList();\n      } else {\n        return source;\n      }\n    } else {\n\n      if (dest instanceof Collection) {\n        if (source instanceof Collection) {\n          ((Collection)dest).addAll((Collection)source);\n        } else {\n          ((Collection)dest).add(source);\n        }\n        return dest;\n      } else if (source instanceof Number) {\n        if (dest instanceof Number) {\n          if (source instanceof Double || dest instanceof Double) {\n            return ((Number)source).doubleValue() + ((Number)dest).doubleValue();\n          }\n          return ((Number)source).longValue() + ((Number)dest).longValue();\n        }\n        // fall through\n      } else if (source instanceof String) {\n        if (source.equals(dest)) {\n          return dest;\n        }\n        // fall through\n      }\n    }\n\n\n    if (source instanceof NamedList && dest instanceof NamedList) {\n      NamedList<Object> tmp = new NamedList<Object>();\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> sl = (NamedList<Object>)source;\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> dl = (NamedList<Object>)dest;\n      for (int i=0; i<sl.size(); i++) {\n        String skey = sl.getName(i);\n        if (exclude != null && exclude.contains(skey)) continue;\n        Object sval = sl.getVal(i);\n        int didx = -1;\n\n        // optimize case where elements are in same position\n        if (i < dl.size()) {\n          String dkey = dl.getName(i);\n          if (skey == dkey || (skey!=null && skey.equals(dkey))) {\n            didx = i;\n          }\n        }\n\n        if (didx == -1) {\n          didx = dl.indexOf(skey, 0);\n        }\n\n        if (didx == -1) {\n          tmp.add(skey, merge(sval, null, null));\n        } else {\n          dl.setVal(didx, merge(sval, dl.getVal(didx), null));\n        }\n      }\n      dl.addAll(tmp);\n      return dl;\n    }\n\n    // merge unlike elements in a list\n    List<Object> t = new ArrayList<Object>();\n    t.add(dest);\n    t.add(source);\n    return t;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#merge(Object,Object,Set[String]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/DebugComponent#merge(Object,Object,Set[String]).mjava","sourceNew":"  Object merge(Object source, Object dest, Set<String> exclude) {\n    if (source == null) return dest;\n    if (dest == null) {\n      if (source instanceof NamedList) {\n        dest = source instanceof SimpleOrderedMap ? new SimpleOrderedMap() : new NamedList();\n      } else {\n        return source;\n      }\n    } else {\n\n      if (dest instanceof Collection) {\n        if (source instanceof Collection) {\n          ((Collection)dest).addAll((Collection)source);\n        } else {\n          ((Collection)dest).add(source);\n        }\n        return dest;\n      } else if (source instanceof Number) {\n        if (dest instanceof Number) {\n          if (source instanceof Double || dest instanceof Double) {\n            return ((Number)source).doubleValue() + ((Number)dest).doubleValue();\n          }\n          return ((Number)source).longValue() + ((Number)dest).longValue();\n        }\n        // fall through\n      } else if (source instanceof String) {\n        if (source.equals(dest)) {\n          return dest;\n        }\n        // fall through\n      }\n    }\n\n\n    if (source instanceof NamedList && dest instanceof NamedList) {\n      NamedList<Object> tmp = new NamedList<Object>();\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> sl = (NamedList<Object>)source;\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> dl = (NamedList<Object>)dest;\n      for (int i=0; i<sl.size(); i++) {\n        String skey = sl.getName(i);\n        if (exclude != null && exclude.contains(skey)) continue;\n        Object sval = sl.getVal(i);\n        int didx = -1;\n\n        // optimize case where elements are in same position\n        if (i < dl.size()) {\n          String dkey = dl.getName(i);\n          if (skey == dkey || (skey!=null && skey.equals(dkey))) {\n            didx = i;\n          }\n        }\n\n        if (didx == -1) {\n          didx = dl.indexOf(skey, 0);\n        }\n\n        if (didx == -1) {\n          tmp.add(skey, merge(sval, null, null));\n        } else {\n          dl.setVal(didx, merge(sval, dl.getVal(didx), null));\n        }\n      }\n      dl.addAll(tmp);\n      return dl;\n    }\n\n    // merge unlike elements in a list\n    List<Object> t = new ArrayList<Object>();\n    t.add(dest);\n    t.add(source);\n    return t;\n  }\n\n","sourceOld":"  Object merge(Object source, Object dest, Set<String> exclude) {\n    if (source == null) return dest;\n    if (dest == null) {\n      if (source instanceof NamedList) {\n        dest = source instanceof SimpleOrderedMap ? new SimpleOrderedMap() : new NamedList();\n      } else {\n        return source;\n      }\n    } else {\n\n      if (dest instanceof Collection) {\n        if (source instanceof Collection) {\n          ((Collection)dest).addAll((Collection)source);\n        } else {\n          ((Collection)dest).add(source);\n        }\n        return dest;\n      } else if (source instanceof Number) {\n        if (dest instanceof Number) {\n          if (source instanceof Double || dest instanceof Double) {\n            return ((Number)source).doubleValue() + ((Number)dest).doubleValue();\n          }\n          return ((Number)source).longValue() + ((Number)dest).longValue();\n        }\n        // fall through\n      } else if (source instanceof String) {\n        if (source.equals(dest)) {\n          return dest;\n        }\n        // fall through\n      }\n    }\n\n\n    if (source instanceof NamedList && dest instanceof NamedList) {\n      NamedList<Object> tmp = new NamedList<Object>();\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> sl = (NamedList<Object>)source;\n      @SuppressWarnings(\"unchecked\")\n      NamedList<Object> dl = (NamedList<Object>)dest;\n      for (int i=0; i<sl.size(); i++) {\n        String skey = sl.getName(i);\n        if (exclude != null && exclude.contains(skey)) continue;\n        Object sval = sl.getVal(i);\n        int didx = -1;\n\n        // optimize case where elements are in same position\n        if (i < dl.size()) {\n          String dkey = dl.getName(i);\n          if (skey == dkey || (skey!=null && skey.equals(dkey))) {\n            didx = i;\n          }\n        }\n\n        if (didx == -1) {\n          didx = dl.indexOf(skey, 0);\n        }\n\n        if (didx == -1) {\n          tmp.add(skey, merge(sval, null, null));\n        } else {\n          dl.setVal(didx, merge(sval, dl.getVal(didx), null));\n        }\n      }\n      dl.addAll(tmp);\n      return dl;\n    }\n\n    // merge unlike elements in a list\n    List<Object> t = new ArrayList<Object>();\n    t.add(dest);\n    t.add(source);\n    return t;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["755f2f419306d7297c8feee10d1897addf4b2dd0","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["755f2f419306d7297c8feee10d1897addf4b2dd0"],"755f2f419306d7297c8feee10d1897addf4b2dd0":["1da8d55113b689b06716246649de6f62430f15c0"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["1da8d55113b689b06716246649de6f62430f15c0","755f2f419306d7297c8feee10d1897addf4b2dd0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["755f2f419306d7297c8feee10d1897addf4b2dd0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["1da8d55113b689b06716246649de6f62430f15c0","755f2f419306d7297c8feee10d1897addf4b2dd0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"1da8d55113b689b06716246649de6f62430f15c0":["755f2f419306d7297c8feee10d1897addf4b2dd0","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"755f2f419306d7297c8feee10d1897addf4b2dd0":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","868da859b43505d9d2a023bfeae6dd0c795f5295"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}