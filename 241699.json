{"path":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextStoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","commits":[{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextStoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void visitDocument(int n, StoredFieldVisitor visitor) throws CorruptIndexException, IOException {\n    in.seek(offsets.get(n));\n    readLine();\n    assert scratch.startsWith(NUM);\n    int numFields = parseIntAt(NUM.length);\n    \n    for (int i = 0; i < numFields; i++) {\n      readLine();\n      assert scratch.startsWith(FIELD);\n      int fieldNumber = parseIntAt(FIELD.length);\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      readLine();\n      assert scratch.startsWith(NAME);\n      readLine();\n      assert scratch.startsWith(TYPE);\n      \n      final BytesRef type;\n      if (equalsAt(TYPE_STRING, scratch, TYPE.length)) {\n        type = TYPE_STRING;\n      } else if (equalsAt(TYPE_BINARY, scratch, TYPE.length)) {\n        type = TYPE_BINARY;\n      } else if (equalsAt(TYPE_INT, scratch, TYPE.length)) {\n        type = TYPE_INT;\n      } else if (equalsAt(TYPE_LONG, scratch, TYPE.length)) {\n        type = TYPE_LONG;\n      } else if (equalsAt(TYPE_FLOAT, scratch, TYPE.length)) {\n        type = TYPE_FLOAT;\n      } else if (equalsAt(TYPE_DOUBLE, scratch, TYPE.length)) {\n        type = TYPE_DOUBLE;\n      } else {\n        throw new RuntimeException(\"unknown field type\");\n      }\n      \n      switch (visitor.needsField(fieldInfo)) {\n        case YES:  \n          readField(type, fieldInfo, visitor);\n          break;\n        case NO:   \n          readLine();\n          assert scratch.startsWith(VALUE);\n          break;\n        case STOP: return;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"61f30939a6ca0891c7b0c0f34aa43800bd4c9a15","date":1322511317,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextStoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextStoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","sourceNew":"  @Override\n  public void visitDocument(int n, StoredFieldVisitor visitor) throws CorruptIndexException, IOException {\n    in.seek(offsets.get(n));\n    readLine();\n    assert StringHelper.startsWith(scratch, NUM);\n    int numFields = parseIntAt(NUM.length);\n    \n    for (int i = 0; i < numFields; i++) {\n      readLine();\n      assert StringHelper.startsWith(scratch, FIELD);\n      int fieldNumber = parseIntAt(FIELD.length);\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      readLine();\n      assert StringHelper.startsWith(scratch, NAME);\n      readLine();\n      assert StringHelper.startsWith(scratch, TYPE);\n      \n      final BytesRef type;\n      if (equalsAt(TYPE_STRING, scratch, TYPE.length)) {\n        type = TYPE_STRING;\n      } else if (equalsAt(TYPE_BINARY, scratch, TYPE.length)) {\n        type = TYPE_BINARY;\n      } else if (equalsAt(TYPE_INT, scratch, TYPE.length)) {\n        type = TYPE_INT;\n      } else if (equalsAt(TYPE_LONG, scratch, TYPE.length)) {\n        type = TYPE_LONG;\n      } else if (equalsAt(TYPE_FLOAT, scratch, TYPE.length)) {\n        type = TYPE_FLOAT;\n      } else if (equalsAt(TYPE_DOUBLE, scratch, TYPE.length)) {\n        type = TYPE_DOUBLE;\n      } else {\n        throw new RuntimeException(\"unknown field type\");\n      }\n      \n      switch (visitor.needsField(fieldInfo)) {\n        case YES:  \n          readField(type, fieldInfo, visitor);\n          break;\n        case NO:   \n          readLine();\n          assert StringHelper.startsWith(scratch, VALUE);\n          break;\n        case STOP: return;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void visitDocument(int n, StoredFieldVisitor visitor) throws CorruptIndexException, IOException {\n    in.seek(offsets.get(n));\n    readLine();\n    assert scratch.startsWith(NUM);\n    int numFields = parseIntAt(NUM.length);\n    \n    for (int i = 0; i < numFields; i++) {\n      readLine();\n      assert scratch.startsWith(FIELD);\n      int fieldNumber = parseIntAt(FIELD.length);\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      readLine();\n      assert scratch.startsWith(NAME);\n      readLine();\n      assert scratch.startsWith(TYPE);\n      \n      final BytesRef type;\n      if (equalsAt(TYPE_STRING, scratch, TYPE.length)) {\n        type = TYPE_STRING;\n      } else if (equalsAt(TYPE_BINARY, scratch, TYPE.length)) {\n        type = TYPE_BINARY;\n      } else if (equalsAt(TYPE_INT, scratch, TYPE.length)) {\n        type = TYPE_INT;\n      } else if (equalsAt(TYPE_LONG, scratch, TYPE.length)) {\n        type = TYPE_LONG;\n      } else if (equalsAt(TYPE_FLOAT, scratch, TYPE.length)) {\n        type = TYPE_FLOAT;\n      } else if (equalsAt(TYPE_DOUBLE, scratch, TYPE.length)) {\n        type = TYPE_DOUBLE;\n      } else {\n        throw new RuntimeException(\"unknown field type\");\n      }\n      \n      switch (visitor.needsField(fieldInfo)) {\n        case YES:  \n          readField(type, fieldInfo, visitor);\n          break;\n        case NO:   \n          readLine();\n          assert scratch.startsWith(VALUE);\n          break;\n        case STOP: return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextStoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","sourceNew":"  @Override\n  public void visitDocument(int n, StoredFieldVisitor visitor) throws CorruptIndexException, IOException {\n    in.seek(offsets.get(n));\n    readLine();\n    assert StringHelper.startsWith(scratch, NUM);\n    int numFields = parseIntAt(NUM.length);\n    \n    for (int i = 0; i < numFields; i++) {\n      readLine();\n      assert StringHelper.startsWith(scratch, FIELD);\n      int fieldNumber = parseIntAt(FIELD.length);\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      readLine();\n      assert StringHelper.startsWith(scratch, NAME);\n      readLine();\n      assert StringHelper.startsWith(scratch, TYPE);\n      \n      final BytesRef type;\n      if (equalsAt(TYPE_STRING, scratch, TYPE.length)) {\n        type = TYPE_STRING;\n      } else if (equalsAt(TYPE_BINARY, scratch, TYPE.length)) {\n        type = TYPE_BINARY;\n      } else if (equalsAt(TYPE_INT, scratch, TYPE.length)) {\n        type = TYPE_INT;\n      } else if (equalsAt(TYPE_LONG, scratch, TYPE.length)) {\n        type = TYPE_LONG;\n      } else if (equalsAt(TYPE_FLOAT, scratch, TYPE.length)) {\n        type = TYPE_FLOAT;\n      } else if (equalsAt(TYPE_DOUBLE, scratch, TYPE.length)) {\n        type = TYPE_DOUBLE;\n      } else {\n        throw new RuntimeException(\"unknown field type\");\n      }\n      \n      switch (visitor.needsField(fieldInfo)) {\n        case YES:  \n          readField(type, fieldInfo, visitor);\n          break;\n        case NO:   \n          readLine();\n          assert StringHelper.startsWith(scratch, VALUE);\n          break;\n        case STOP: return;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void visitDocument(int n, StoredFieldVisitor visitor) throws CorruptIndexException, IOException {\n    in.seek(offsets.get(n));\n    readLine();\n    assert StringHelper.startsWith(scratch, NUM);\n    int numFields = parseIntAt(NUM.length);\n    \n    for (int i = 0; i < numFields; i++) {\n      readLine();\n      assert StringHelper.startsWith(scratch, FIELD);\n      int fieldNumber = parseIntAt(FIELD.length);\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      readLine();\n      assert StringHelper.startsWith(scratch, NAME);\n      readLine();\n      assert StringHelper.startsWith(scratch, TYPE);\n      \n      final BytesRef type;\n      if (equalsAt(TYPE_STRING, scratch, TYPE.length)) {\n        type = TYPE_STRING;\n      } else if (equalsAt(TYPE_BINARY, scratch, TYPE.length)) {\n        type = TYPE_BINARY;\n      } else if (equalsAt(TYPE_INT, scratch, TYPE.length)) {\n        type = TYPE_INT;\n      } else if (equalsAt(TYPE_LONG, scratch, TYPE.length)) {\n        type = TYPE_LONG;\n      } else if (equalsAt(TYPE_FLOAT, scratch, TYPE.length)) {\n        type = TYPE_FLOAT;\n      } else if (equalsAt(TYPE_DOUBLE, scratch, TYPE.length)) {\n        type = TYPE_DOUBLE;\n      } else {\n        throw new RuntimeException(\"unknown field type\");\n      }\n      \n      switch (visitor.needsField(fieldInfo)) {\n        case YES:  \n          readField(type, fieldInfo, visitor);\n          break;\n        case NO:   \n          readLine();\n          assert StringHelper.startsWith(scratch, VALUE);\n          break;\n        case STOP: return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"06584e6e98d592b34e1329b384182f368d2025e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"61f30939a6ca0891c7b0c0f34aa43800bd4c9a15":["06584e6e98d592b34e1329b384182f368d2025e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["61f30939a6ca0891c7b0c0f34aa43800bd4c9a15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"06584e6e98d592b34e1329b384182f368d2025e8":["61f30939a6ca0891c7b0c0f34aa43800bd4c9a15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06584e6e98d592b34e1329b384182f368d2025e8"],"61f30939a6ca0891c7b0c0f34aa43800bd4c9a15":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}