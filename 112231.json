{"path":"lucene/core/src/java/org/apache/lucene/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],String,IOContext).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],String,IOContext).mjava","sourceNew":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp, String segmentSuffix, IOContext context)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    assert indexDivisor == -1 || indexDivisor > 0;\n\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION), context);\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();      \n      //System.out.println(\"FGR: init seg=\" + segment + \" div=\" + indexDivisor + \" nF=\" + numFields);\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final int numIndexTerms = in.readVInt();\n        final long termsStart = in.readVLong();\n        final long indexStart = in.readVLong();\n        final long packedIndexStart = in.readVLong();\n        final long packedOffsetsStart = in.readVLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        fields.put(fieldInfo, new FieldIndexData(fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(in);\n      }\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      }\n    }\n  }\n\n","sourceOld":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp, String segmentSuffix, IOContext context)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    assert indexDivisor == -1 || indexDivisor > 0;\n\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION), context);\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();      \n      //System.out.println(\"FGR: init seg=\" + segment + \" div=\" + indexDivisor + \" nF=\" + numFields);\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final int numIndexTerms = in.readVInt();\n        final long termsStart = in.readVLong();\n        final long indexStart = in.readVLong();\n        final long packedIndexStart = in.readVLong();\n        final long packedOffsetsStart = in.readVLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        fields.put(fieldInfo, new FieldIndexData(fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(in);\n      }\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e5adcbe5a27941451fdb6194bcbff96c8630e14","date":1346419102,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],String,IOContext).mjava","sourceNew":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp, String segmentSuffix, IOContext context)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    assert indexDivisor == -1 || indexDivisor > 0;\n\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION), context);\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      if (indexInterval < 1) {\n        throw new CorruptIndexException(\"invalid indexInterval: \" + indexInterval + \" (resource=\" + in + \")\");\n      }\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();     \n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields + \" (resource=\" + in + \")\");\n      }\n      //System.out.println(\"FGR: init seg=\" + segment + \" div=\" + indexDivisor + \" nF=\" + numFields);\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final int numIndexTerms = in.readVInt();\n        if (numIndexTerms < 0) {\n          throw new CorruptIndexException(\"invalid numIndexTerms: \" + numIndexTerms + \" (resource=\" + in + \")\");\n        }\n        final long termsStart = in.readVLong();\n        final long indexStart = in.readVLong();\n        final long packedIndexStart = in.readVLong();\n        final long packedOffsetsStart = in.readVLong();\n        if (packedIndexStart < indexStart) {\n          throw new CorruptIndexException(\"invalid packedIndexStart: \" + packedIndexStart + \" indexStart: \" + indexStart + \"numIndexTerms: \" + numIndexTerms + \" (resource=\" + in + \")\");\n        }\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        FieldIndexData previous = fields.put(fieldInfo, new FieldIndexData(fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name + \" (resource=\" + in + \")\");\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(in);\n      }\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      }\n    }\n  }\n\n","sourceOld":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp, String segmentSuffix, IOContext context)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    assert indexDivisor == -1 || indexDivisor > 0;\n\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION), context);\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();      \n      //System.out.println(\"FGR: init seg=\" + segment + \" div=\" + indexDivisor + \" nF=\" + numFields);\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final int numIndexTerms = in.readVInt();\n        final long termsStart = in.readVLong();\n        final long indexStart = in.readVLong();\n        final long packedIndexStart = in.readVLong();\n        final long packedOffsetsStart = in.readVLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        fields.put(fieldInfo, new FieldIndexData(fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(in);\n      }\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["9a70ce9bddc6f985feb8e5e182aebe20872328d4","9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0d1f90e969803cc84174589b5e4a39b7935fecd","date":1346584861,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],String,IOContext).mjava","sourceNew":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp, String segmentSuffix, IOContext context)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    assert indexDivisor == -1 || indexDivisor > 0;\n\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION), context);\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      if (indexInterval < 1) {\n        throw new CorruptIndexException(\"invalid indexInterval: \" + indexInterval + \" (resource=\" + in + \")\");\n      }\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();     \n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields + \" (resource=\" + in + \")\");\n      }\n      //System.out.println(\"FGR: init seg=\" + segment + \" div=\" + indexDivisor + \" nF=\" + numFields);\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final int numIndexTerms = in.readVInt();\n        if (numIndexTerms < 0) {\n          throw new CorruptIndexException(\"invalid numIndexTerms: \" + numIndexTerms + \" (resource=\" + in + \")\");\n        }\n        final long termsStart = in.readVLong();\n        final long indexStart = in.readVLong();\n        final long packedIndexStart = in.readVLong();\n        final long packedOffsetsStart = in.readVLong();\n        if (packedIndexStart < indexStart) {\n          throw new CorruptIndexException(\"invalid packedIndexStart: \" + packedIndexStart + \" indexStart: \" + indexStart + \"numIndexTerms: \" + numIndexTerms + \" (resource=\" + in + \")\");\n        }\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        FieldIndexData previous = fields.put(fieldInfo, new FieldIndexData(fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name + \" (resource=\" + in + \")\");\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(in);\n      }\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      }\n    }\n  }\n\n","sourceOld":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp, String segmentSuffix, IOContext context)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    assert indexDivisor == -1 || indexDivisor > 0;\n\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION), context);\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();      \n      //System.out.println(\"FGR: init seg=\" + segment + \" div=\" + indexDivisor + \" nF=\" + numFields);\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final int numIndexTerms = in.readVInt();\n        final long termsStart = in.readVLong();\n        final long indexStart = in.readVLong();\n        final long packedIndexStart = in.readVLong();\n        final long packedOffsetsStart = in.readVLong();\n        assert packedIndexStart >= indexStart: \"packedStart=\" + packedIndexStart + \" indexStart=\" + indexStart + \" numIndexTerms=\" + numIndexTerms + \" seg=\" + segment;\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        fields.put(fieldInfo, new FieldIndexData(fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(in);\n      }\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/FixedGapTermsIndexReader#FixedGapTermsIndexReader(Directory,FieldInfos,String,int,Comparator[BytesRef],String,IOContext).mjava","sourceNew":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp, String segmentSuffix, IOContext context)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    assert indexDivisor == -1 || indexDivisor > 0;\n\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION), context);\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      if (indexInterval < 1) {\n        throw new CorruptIndexException(\"invalid indexInterval: \" + indexInterval + \" (resource=\" + in + \")\");\n      }\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();     \n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields + \" (resource=\" + in + \")\");\n      }\n      //System.out.println(\"FGR: init seg=\" + segment + \" div=\" + indexDivisor + \" nF=\" + numFields);\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final int numIndexTerms = in.readVInt();\n        if (numIndexTerms < 0) {\n          throw new CorruptIndexException(\"invalid numIndexTerms: \" + numIndexTerms + \" (resource=\" + in + \")\");\n        }\n        final long termsStart = in.readVLong();\n        final long indexStart = in.readVLong();\n        final long packedIndexStart = in.readVLong();\n        final long packedOffsetsStart = in.readVLong();\n        if (packedIndexStart < indexStart) {\n          throw new CorruptIndexException(\"invalid packedIndexStart: \" + packedIndexStart + \" indexStart: \" + indexStart + \"numIndexTerms: \" + numIndexTerms + \" (resource=\" + in + \")\");\n        }\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        FieldIndexData previous = fields.put(fieldInfo, new FieldIndexData(fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name + \" (resource=\" + in + \")\");\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(in);\n      }\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      }\n    }\n  }\n\n","sourceOld":"  public FixedGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, Comparator<BytesRef> termComp, String segmentSuffix, IOContext context)\n    throws IOException {\n\n    this.termComp = termComp;\n\n    assert indexDivisor == -1 || indexDivisor > 0;\n\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, FixedGapTermsIndexWriter.TERMS_INDEX_EXTENSION), context);\n    \n    boolean success = false;\n\n    try {\n      \n      readHeader(in);\n      indexInterval = in.readInt();\n      if (indexInterval < 1) {\n        throw new CorruptIndexException(\"invalid indexInterval: \" + indexInterval + \" (resource=\" + in + \")\");\n      }\n      this.indexDivisor = indexDivisor;\n\n      if (indexDivisor < 0) {\n        totalIndexInterval = indexInterval;\n      } else {\n        // In case terms index gets loaded, later, on demand\n        totalIndexInterval = indexInterval * indexDivisor;\n      }\n      assert totalIndexInterval > 0;\n      \n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();     \n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields + \" (resource=\" + in + \")\");\n      }\n      //System.out.println(\"FGR: init seg=\" + segment + \" div=\" + indexDivisor + \" nF=\" + numFields);\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final int numIndexTerms = in.readVInt();\n        if (numIndexTerms < 0) {\n          throw new CorruptIndexException(\"invalid numIndexTerms: \" + numIndexTerms + \" (resource=\" + in + \")\");\n        }\n        final long termsStart = in.readVLong();\n        final long indexStart = in.readVLong();\n        final long packedIndexStart = in.readVLong();\n        final long packedOffsetsStart = in.readVLong();\n        if (packedIndexStart < indexStart) {\n          throw new CorruptIndexException(\"invalid packedIndexStart: \" + packedIndexStart + \" indexStart: \" + indexStart + \"numIndexTerms: \" + numIndexTerms + \" (resource=\" + in + \")\");\n        }\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        FieldIndexData previous = fields.put(fieldInfo, new FieldIndexData(fieldInfo, numIndexTerms, indexStart, termsStart, packedIndexStart, packedOffsetsStart));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name + \" (resource=\" + in + \")\");\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(in);\n      }\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n        termBytesReader = termBytes.freeze(true);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d0d1f90e969803cc84174589b5e4a39b7935fecd":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","6e5adcbe5a27941451fdb6194bcbff96c8630e14"],"6e5adcbe5a27941451fdb6194bcbff96c8630e14":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["6e5adcbe5a27941451fdb6194bcbff96c8630e14"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"d0d1f90e969803cc84174589b5e4a39b7935fecd":[],"6e5adcbe5a27941451fdb6194bcbff96c8630e14":["d0d1f90e969803cc84174589b5e4a39b7935fecd","3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d0d1f90e969803cc84174589b5e4a39b7935fecd","6e5adcbe5a27941451fdb6194bcbff96c8630e14"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d0d1f90e969803cc84174589b5e4a39b7935fecd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}