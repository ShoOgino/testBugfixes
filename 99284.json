{"path":"lucene/facet/src/java/org/apache/lucene/facet/sampling/Sampler#overSampledSearchParams(FacetSearchParams).mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sampling/Sampler#overSampledSearchParams(FacetSearchParams).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/Sampler#overSampledSearchParams(FacetSearchParams).mjava","sourceNew":"  /**\n   * Over-sampled search params, wrapping each request with an over-sampled one.\n   */\n  public FacetSearchParams overSampledSearchParams(FacetSearchParams original) {\n    FacetSearchParams res = original;\n    // So now we can sample -> altering the searchParams to accommodate for the statistical error for the sampling\n    double overSampleFactor = getSamplingParams().getOversampleFactor();\n    if (overSampleFactor > 1) { // any factoring to do?\n      List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n      for (FacetRequest frq : original.facetRequests) {\n        int overSampledNumResults = (int) Math.ceil(frq.numResults * overSampleFactor);\n        facetRequests.add(new OverSampledFacetRequest(frq, overSampledNumResults));\n      }\n      res = new FacetSearchParams(original.indexingParams, facetRequests);\n    }\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Over-sampled search params, wrapping each request with an over-sampled one.\n   */\n  public FacetSearchParams overSampledSearchParams(FacetSearchParams original) {\n    FacetSearchParams res = original;\n    // So now we can sample -> altering the searchParams to accommodate for the statistical error for the sampling\n    double overSampleFactor = getSamplingParams().getOversampleFactor();\n    if (overSampleFactor > 1) { // any factoring to do?\n      List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n      for (FacetRequest frq : original.facetRequests) {\n        int overSampledNumResults = (int) Math.ceil(frq.numResults * overSampleFactor);\n        facetRequests.add(new OverSampledFacetRequest(frq, overSampledNumResults));\n      }\n      res = new FacetSearchParams(original.indexingParams, facetRequests);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/sampling/Sampler#overSampledSearchParams(FacetSearchParams).mjava","sourceNew":null,"sourceOld":"  /**\n   * Over-sampled search params, wrapping each request with an over-sampled one.\n   */\n  public FacetSearchParams overSampledSearchParams(FacetSearchParams original) {\n    FacetSearchParams res = original;\n    // So now we can sample -> altering the searchParams to accommodate for the statistical error for the sampling\n    double overSampleFactor = getSamplingParams().getOversampleFactor();\n    if (overSampleFactor > 1) { // any factoring to do?\n      List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n      for (FacetRequest frq : original.facetRequests) {\n        int overSampledNumResults = (int) Math.ceil(frq.numResults * overSampleFactor);\n        facetRequests.add(new OverSampledFacetRequest(frq, overSampledNumResults));\n      }\n      res = new FacetSearchParams(original.indexingParams, facetRequests);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/sampling/Sampler#overSampledSearchParams(FacetSearchParams).mjava","sourceNew":null,"sourceOld":"  /**\n   * Over-sampled search params, wrapping each request with an over-sampled one.\n   */\n  public FacetSearchParams overSampledSearchParams(FacetSearchParams original) {\n    FacetSearchParams res = original;\n    // So now we can sample -> altering the searchParams to accommodate for the statistical error for the sampling\n    double overSampleFactor = getSamplingParams().getOversampleFactor();\n    if (overSampleFactor > 1) { // any factoring to do?\n      List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();\n      for (FacetRequest frq : original.facetRequests) {\n        int overSampledNumResults = (int) Math.ceil(frq.numResults * overSampleFactor);\n        facetRequests.add(new OverSampledFacetRequest(frq, overSampledNumResults));\n      }\n      res = new FacetSearchParams(original.indexingParams, facetRequests);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["607428da722dcb3e86bbd11c63de8986e6275c36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["607428da722dcb3e86bbd11c63de8986e6275c36","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}