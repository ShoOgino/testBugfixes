{"path":"src/solrj/org/apache/solr/client/solrj/response/AnalysisResponseBase.TokenInfo#TokenInfo(String,String,String,int,int,int,boolean).mjava","commits":[{"id":"68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a","date":1240390408,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/response/AnalysisResponseBase.TokenInfo#TokenInfo(String,String,String,int,int,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Constructs a new TokenInfo.\n     *\n     * @param text     The text of the token\n     * @param rawText  The raw text of the token. If the token is stored in the index in a special format (e.g.\n     *                 dates or padded numbers) this argument should hold this value. If the token is stored as is,\n     *                 then this value should be {@code null}.\n     * @param type     The type fo the token (typically either {@code word} or {@code <ALPHANUM>} though it depends\n     *                 on the tokenizer/filter used).\n     * @param start    The start position of the token in the original text where it was extracted from.\n     * @param end      The end position of the token in the original text where it was extracted from.\n     * @param position The position of the token within the token stream.\n     * @param match    Indicates whether this token matches one of the the query tokens.\n     */\n    TokenInfo(String text, String rawText, String type, int start, int end, int position, boolean match) {\n      this.text = text;\n      this.rawText = rawText;\n      this.type = type;\n      this.start = start;\n      this.end = end;\n      this.position = position;\n      this.match = match;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3570e776df3671c1bce4f54b07bf03ca5a2c23de","3570e776df3671c1bce4f54b07bf03ca5a2c23de","3570e776df3671c1bce4f54b07bf03ca5a2c23de"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/response/AnalysisResponseBase.TokenInfo#TokenInfo(String,String,String,int,int,int,boolean).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/response/AnalysisResponseBase.TokenInfo#TokenInfo(String,String,String,int,int,int,boolean).mjava","sourceNew":"    /**\n     * Constructs a new TokenInfo.\n     *\n     * @param text     The text of the token\n     * @param rawText  The raw text of the token. If the token is stored in the index in a special format (e.g.\n     *                 dates or padded numbers) this argument should hold this value. If the token is stored as is,\n     *                 then this value should be {@code null}.\n     * @param type     The type fo the token (typically either {@code word} or {@code <ALPHANUM>} though it depends\n     *                 on the tokenizer/filter used).\n     * @param start    The start position of the token in the original text where it was extracted from.\n     * @param end      The end position of the token in the original text where it was extracted from.\n     * @param position The position of the token within the token stream.\n     * @param match    Indicates whether this token matches one of the the query tokens.\n     */\n    TokenInfo(String text, String rawText, String type, int start, int end, int position, boolean match) {\n      this.text = text;\n      this.rawText = rawText;\n      this.type = type;\n      this.start = start;\n      this.end = end;\n      this.position = position;\n      this.match = match;\n    }\n\n","sourceOld":"    /**\n     * Constructs a new TokenInfo.\n     *\n     * @param text     The text of the token\n     * @param rawText  The raw text of the token. If the token is stored in the index in a special format (e.g.\n     *                 dates or padded numbers) this argument should hold this value. If the token is stored as is,\n     *                 then this value should be {@code null}.\n     * @param type     The type fo the token (typically either {@code word} or {@code <ALPHANUM>} though it depends\n     *                 on the tokenizer/filter used).\n     * @param start    The start position of the token in the original text where it was extracted from.\n     * @param end      The end position of the token in the original text where it was extracted from.\n     * @param position The position of the token within the token stream.\n     * @param match    Indicates whether this token matches one of the the query tokens.\n     */\n    TokenInfo(String text, String rawText, String type, int start, int end, int position, boolean match) {\n      this.text = text;\n      this.rawText = rawText;\n      this.type = type;\n      this.start = start;\n      this.end = end;\n      this.position = position;\n      this.match = match;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}