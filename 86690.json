{"path":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestContribFieldsReader#testLazyPerformance().mjava","commits":[{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestContribFieldsReader#testLazyPerformance().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testLazyPerformance().mjava","sourceNew":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = _TestUtil.getTempDir(\"lazyDir\" + userName);\n    Directory tmpDir = newFSDirectory(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(tmpDir, conf);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 10;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      IndexReader reader = IndexReader.open(tmpDir);\n\n      Document doc;\n      doc = reader.document(0);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      IndexableField field = doc.getField(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertFalse(\"field is lazy\", field.getClass().getSimpleName().equals(\"LazyField\"));\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = IndexReader.open(tmpDir);\n      doc = getDocument(reader, 0, fieldSelector);\n      field = doc.getField(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.getClass().getSimpleName().equals(\"LazyField\"));\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    tmpDir.close();\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = _TestUtil.getTempDir(\"lazyDir\" + userName);\n    Directory tmpDir = newFSDirectory(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(tmpDir, conf);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    FieldsReader reader;\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 10;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      assertTrue(reader.size() == 1);\n\n      Document doc;\n      doc = reader.doc(0, null);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      Fieldable field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertTrue(\"field is lazy\", field.isLazy() == false);\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = new FieldsReader(tmpDir, TEST_SEGMENT_NAME, fieldInfos);\n      doc = reader.doc(0, fieldSelector);\n      field = doc.getFieldable(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.isLazy() == true);\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    tmpDir.close();\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/index/TestContribFieldsReader#testLazyPerformance().mjava","sourceNew":null,"sourceOld":"  /**\n   * Not really a test per se, but we should have some way of assessing whether this is worthwhile.\n   * <p/>\n   * Must test using a File based directory\n   *\n   * @throws Exception\n   */\n  public void testLazyPerformance() throws Exception {\n    String userName = System.getProperty(\"user.name\");\n    File file = _TestUtil.getTempDir(\"lazyDir\" + userName);\n    Directory tmpDir = newFSDirectory(file);\n    assertTrue(tmpDir != null);\n\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setMergePolicy(newLogMergePolicy());\n    ((LogMergePolicy) conf.getMergePolicy()).setUseCompoundFile(false);\n    IndexWriter writer = new IndexWriter(tmpDir, conf);\n    writer.addDocument(testDoc);\n    writer.close();\n\n    assertTrue(fieldInfos != null);\n    long lazyTime = 0;\n    long regularTime = 0;\n    int length = 10;\n    Set<String> lazyFieldNames = new HashSet<String>();\n    lazyFieldNames.add(DocHelper.LARGE_LAZY_FIELD_KEY);\n    SetBasedFieldSelector fieldSelector = new SetBasedFieldSelector(Collections. <String> emptySet(), lazyFieldNames);\n\n    for (int i = 0; i < length; i++) {\n      IndexReader reader = IndexReader.open(tmpDir);\n\n      Document doc;\n      doc = reader.document(0);//Load all of them\n      assertTrue(\"doc is null and it shouldn't be\", doc != null);\n      IndexableField field = doc.getField(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is null and it shouldn't be\", field != null);\n      assertFalse(\"field is lazy\", field.getClass().getSimpleName().equals(\"LazyField\"));\n      String value;\n      long start;\n      long finish;\n      start = System.currentTimeMillis();\n      //On my machine this was always 0ms.\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      regularTime += (finish - start);\n      reader.close();\n      reader = null;\n      doc = null;\n      //Hmmm, are we still in cache???\n      System.gc();\n      reader = IndexReader.open(tmpDir);\n      doc = getDocument(reader, 0, fieldSelector);\n      field = doc.getField(DocHelper.LARGE_LAZY_FIELD_KEY);\n      assertTrue(\"field is not lazy\", field.getClass().getSimpleName().equals(\"LazyField\"));\n      start = System.currentTimeMillis();\n      //On my machine this took around 50 - 70ms\n      value = field.stringValue();\n      finish = System.currentTimeMillis();\n      assertTrue(\"value is null and it shouldn't be\", value != null);\n      lazyTime += (finish - start);\n      reader.close();\n\n    }\n    tmpDir.close();\n    if (VERBOSE) {\n      System.out.println(\"Average Non-lazy time (should be very close to zero): \" + regularTime / length + \" ms for \" + length + \" reads\");\n      System.out.println(\"Average Lazy Time (should be greater than zero): \" + lazyTime / length + \" ms for \" + length + \" reads\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"06584e6e98d592b34e1329b384182f368d2025e8":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06584e6e98d592b34e1329b384182f368d2025e8"]},"commit2Childs":{"06584e6e98d592b34e1329b384182f368d2025e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["06584e6e98d592b34e1329b384182f368d2025e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}