{"path":"solr/core/src/java/org/apache/solr/search/join/ScoreJoinQParserPlugin.SameCoreJoinQuery#equals(Object).mjava","commits":[{"id":"6eecfe8d494cb2e3ead94e9cdb9381bfe4993dcd","date":1438089844,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/ScoreJoinQParserPlugin.SameCoreJoinQuery#equals(Object).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public boolean equals(Object obj) {\n      if (this == obj) return true;\n      if (!super.equals(obj)) return false;\n      if (getClass() != obj.getClass()) return false;\n      SameCoreJoinQuery other = (SameCoreJoinQuery) obj;\n      if (fromField == null) {\n        if (other.fromField != null) return false;\n      } else if (!fromField.equals(other.fromField)) return false;\n      if (fromQuery == null) {\n        if (other.fromQuery != null) return false;\n      } else if (!fromQuery.equals(other.fromQuery)) return false;\n      if (scoreMode != other.scoreMode) return false;\n      if (toField == null) {\n        if (other.toField != null) return false;\n      } else if (!toField.equals(other.toField)) return false;\n      return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7bc21595222ae4f75509300fbb7726691f387f","date":1464078795,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/ScoreJoinQParserPlugin.SameCoreJoinQuery#equals(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/ScoreJoinQParserPlugin.SameCoreJoinQuery#equals(Object).mjava","sourceNew":"    @Override\n    public boolean equals(Object other) {\n      return sameClassAs(other) &&\n             equalsTo(getClass().cast(other));\n    }\n\n","sourceOld":"    @Override\n    public boolean equals(Object obj) {\n      if (this == obj) return true;\n      if (!super.equals(obj)) return false;\n      if (getClass() != obj.getClass()) return false;\n      SameCoreJoinQuery other = (SameCoreJoinQuery) obj;\n      if (fromField == null) {\n        if (other.fromField != null) return false;\n      } else if (!fromField.equals(other.fromField)) return false;\n      if (fromQuery == null) {\n        if (other.fromQuery != null) return false;\n      } else if (!fromQuery.equals(other.fromQuery)) return false;\n      if (scoreMode != other.scoreMode) return false;\n      if (toField == null) {\n        if (other.toField != null) return false;\n      } else if (!toField.equals(other.toField)) return false;\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/join/ScoreJoinQParserPlugin.SameCoreJoinQuery#equals(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/ScoreJoinQParserPlugin.SameCoreJoinQuery#equals(Object).mjava","sourceNew":"    @Override\n    public boolean equals(Object other) {\n      return sameClassAs(other) &&\n             equalsTo(getClass().cast(other));\n    }\n\n","sourceOld":"    @Override\n    public boolean equals(Object obj) {\n      if (this == obj) return true;\n      if (!super.equals(obj)) return false;\n      if (getClass() != obj.getClass()) return false;\n      SameCoreJoinQuery other = (SameCoreJoinQuery) obj;\n      if (fromField == null) {\n        if (other.fromField != null) return false;\n      } else if (!fromField.equals(other.fromField)) return false;\n      if (fromQuery == null) {\n        if (other.fromQuery != null) return false;\n      } else if (!fromQuery.equals(other.fromQuery)) return false;\n      if (scoreMode != other.scoreMode) return false;\n      if (toField == null) {\n        if (other.toField != null) return false;\n      } else if (!toField.equals(other.toField)) return false;\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6eecfe8d494cb2e3ead94e9cdb9381bfe4993dcd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e7bc21595222ae4f75509300fbb7726691f387f":["6eecfe8d494cb2e3ead94e9cdb9381bfe4993dcd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["6eecfe8d494cb2e3ead94e9cdb9381bfe4993dcd","0e7bc21595222ae4f75509300fbb7726691f387f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e7bc21595222ae4f75509300fbb7726691f387f"]},"commit2Childs":{"6eecfe8d494cb2e3ead94e9cdb9381bfe4993dcd":["0e7bc21595222ae4f75509300fbb7726691f387f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6eecfe8d494cb2e3ead94e9cdb9381bfe4993dcd"],"0e7bc21595222ae4f75509300fbb7726691f387f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}