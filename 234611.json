{"path":"lucene/src/java/org/apache/lucene/index/CheckIndex#checkIndex(List[String]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CheckIndex#checkIndex(List[String]).mjava","pathOld":"src/java/org/apache/lucene/index/CheckIndex#checkIndex(List[String]).mjava","sourceNew":"  /** Returns a {@link Status} instance detailing\n   *  the state of the index.\n   * \n   *  @param onlySegments list of specific segment names to check\n   *\n   *  <p>As this method checks every byte in the specified\n   *  segments, on a large index it can take quite a long\n   *  time to run.\n   *\n   *  <p><b>WARNING</b>: make sure\n   *  you only call this when the index is not opened by any\n   *  writer. */\n  public Status checkIndex(List<String> onlySegments) throws IOException {\n    NumberFormat nf = NumberFormat.getInstance();\n    SegmentInfos sis = new SegmentInfos();\n    Status result = new Status();\n    result.dir = dir;\n    try {\n      sis.read(dir);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read any segments file in directory\");\n      result.missingSegments = true;\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      return result;\n    }\n\n    final int numSegments = sis.size();\n    final String segmentsFileName = sis.getCurrentSegmentFileName();\n    IndexInput input = null;\n    try {\n      input = dir.openInput(segmentsFileName);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not open segments file in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.cantOpenSegments = true;\n      return result;\n    }\n    int format = 0;\n    try {\n      format = input.readInt();\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read segment file version in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.missingSegmentVersion = true;\n      return result;\n    } finally {\n      if (input != null)\n        input.close();\n    }\n\n    String sFormat = \"\";\n    boolean skip = false;\n\n    if (format == SegmentInfos.FORMAT)\n      sFormat = \"FORMAT [Lucene Pre-2.1]\";\n    if (format == SegmentInfos.FORMAT_LOCKLESS)\n      sFormat = \"FORMAT_LOCKLESS [Lucene 2.1]\";\n    else if (format == SegmentInfos.FORMAT_SINGLE_NORM_FILE)\n      sFormat = \"FORMAT_SINGLE_NORM_FILE [Lucene 2.2]\";\n    else if (format == SegmentInfos.FORMAT_SHARED_DOC_STORE)\n      sFormat = \"FORMAT_SHARED_DOC_STORE [Lucene 2.3]\";\n    else {\n      if (format == SegmentInfos.FORMAT_CHECKSUM)\n        sFormat = \"FORMAT_CHECKSUM [Lucene 2.4]\";\n      else if (format == SegmentInfos.FORMAT_DEL_COUNT)\n        sFormat = \"FORMAT_DEL_COUNT [Lucene 2.4]\";\n      else if (format == SegmentInfos.FORMAT_HAS_PROX)\n        sFormat = \"FORMAT_HAS_PROX [Lucene 2.4]\";\n      else if (format == SegmentInfos.FORMAT_USER_DATA)\n        sFormat = \"FORMAT_USER_DATA [Lucene 2.9]\";\n      else if (format == SegmentInfos.FORMAT_DIAGNOSTICS)\n        sFormat = \"FORMAT_DIAGNOSTICS [Lucene 2.9]\";\n      else if (format < SegmentInfos.CURRENT_FORMAT) {\n        sFormat = \"int=\" + format + \" [newer version of Lucene than this tool]\";\n        skip = true;\n      } else {\n        sFormat = format + \" [Lucene 1.3 or prior]\";\n      }\n    }\n\n    result.segmentsFileName = segmentsFileName;\n    result.numSegments = numSegments;\n    result.segmentFormat = sFormat;\n    result.userData = sis.getUserData();\n    String userDataString;\n    if (sis.getUserData().size() > 0) {\n      userDataString = \" userData=\" + sis.getUserData();\n    } else {\n      userDataString = \"\";\n    }\n\n    msg(\"Segments file=\" + segmentsFileName + \" numSegments=\" + numSegments + \" version=\" + sFormat + userDataString);\n\n    if (onlySegments != null) {\n      result.partial = true;\n      if (infoStream != null)\n        infoStream.print(\"\\nChecking only these segments:\");\n      for (String s : onlySegments) {\n        if (infoStream != null)\n          infoStream.print(\" \" + s);\n      }\n      result.segmentsChecked.addAll(onlySegments);\n      msg(\":\");\n    }\n\n    if (skip) {\n      msg(\"\\nERROR: this index appears to be created by a newer version of Lucene than this tool was compiled on; please re-compile this tool on the matching version of Lucene; exiting\");\n      result.toolOutOfDate = true;\n      return result;\n    }\n\n\n    result.newSegments = (SegmentInfos) sis.clone();\n    result.newSegments.clear();\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = sis.info(i);\n      if (onlySegments != null && !onlySegments.contains(info.name))\n        continue;\n      Status.SegmentInfoStatus segInfoStat = new Status.SegmentInfoStatus();\n      result.segmentInfos.add(segInfoStat);\n      msg(\"  \" + (1+i) + \" of \" + numSegments + \": name=\" + info.name + \" docCount=\" + info.docCount);\n      segInfoStat.name = info.name;\n      segInfoStat.docCount = info.docCount;\n\n      int toLoseDocCount = info.docCount;\n\n      SegmentReader reader = null;\n\n      try {\n        msg(\"    compound=\" + info.getUseCompoundFile());\n        segInfoStat.compound = info.getUseCompoundFile();\n        msg(\"    hasProx=\" + info.getHasProx());\n        segInfoStat.hasProx = info.getHasProx();\n        msg(\"    numFiles=\" + info.files().size());\n        segInfoStat.numFiles = info.files().size();\n        msg(\"    size (MB)=\" + nf.format(info.sizeInBytes()/(1024.*1024.)));\n        segInfoStat.sizeMB = info.sizeInBytes()/(1024.*1024.);\n        Map<String,String> diagnostics = info.getDiagnostics();\n        segInfoStat.diagnostics = diagnostics;\n        if (diagnostics.size() > 0) {\n          msg(\"    diagnostics = \" + diagnostics);\n        }\n\n        final int docStoreOffset = info.getDocStoreOffset();\n        if (docStoreOffset != -1) {\n          msg(\"    docStoreOffset=\" + docStoreOffset);\n          segInfoStat.docStoreOffset = docStoreOffset;\n          msg(\"    docStoreSegment=\" + info.getDocStoreSegment());\n          segInfoStat.docStoreSegment = info.getDocStoreSegment();\n          msg(\"    docStoreIsCompoundFile=\" + info.getDocStoreIsCompoundFile());\n          segInfoStat.docStoreCompoundFile = info.getDocStoreIsCompoundFile();\n        }\n        final String delFileName = info.getDelFileName();\n        if (delFileName == null){\n          msg(\"    no deletions\");\n          segInfoStat.hasDeletions = false;\n        }\n        else{\n          msg(\"    has deletions [delFileName=\" + delFileName + \"]\");\n          segInfoStat.hasDeletions = true;\n          segInfoStat.deletionsFileName = delFileName;\n        }\n        if (infoStream != null)\n          infoStream.print(\"    test: open reader.........\");\n        reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n        segInfoStat.openReaderPassed = true;\n\n        final int numDocs = reader.numDocs();\n        toLoseDocCount = numDocs;\n        if (reader.hasDeletions()) {\n          if (reader.deletedDocs.count() != info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs deletedDocs.count()=\" + reader.deletedDocs.count());\n          }\n          if (reader.deletedDocs.count() > reader.maxDoc()) {\n            throw new RuntimeException(\"too many deleted docs: maxDoc()=\" + reader.maxDoc() + \" vs deletedDocs.count()=\" + reader.deletedDocs.count());\n          }\n          if (info.docCount - numDocs != info.getDelCount()){\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          segInfoStat.numDeleted = info.docCount - numDocs;\n          msg(\"OK [\" + (segInfoStat.numDeleted) + \" deleted docs]\");\n        } else {\n          if (info.getDelCount() != 0) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          msg(\"OK\");\n        }\n        if (reader.maxDoc() != info.docCount)\n          throw new RuntimeException(\"SegmentReader.maxDoc() \" + reader.maxDoc() + \" != SegmentInfos.docCount \" + info.docCount);\n\n        // Test getFieldNames()\n        if (infoStream != null) {\n          infoStream.print(\"    test: fields..............\");\n        }         \n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        msg(\"OK [\" + fieldNames.size() + \" fields]\");\n        segInfoStat.numFields = fieldNames.size();\n        \n        // Test Field Norms\n        segInfoStat.fieldNormStatus = testFieldNorms(fieldNames, reader);\n\n        // Test the Term Index\n        segInfoStat.termIndexStatus = testTermIndex(info, reader);\n\n        // Test Stored Fields\n        segInfoStat.storedFieldStatus = testStoredFields(info, reader, nf);\n\n        // Test Term Vectors\n        segInfoStat.termVectorStatus = testTermVectors(info, reader, nf);\n\n        // Rethrow the first exception we encountered\n        //  This will cause stats for failed segments to be incremented properly\n        if (segInfoStat.fieldNormStatus.error != null) {\n          throw new RuntimeException(\"Field Norm test failed\");\n        } else if (segInfoStat.termIndexStatus.error != null) {\n          throw new RuntimeException(\"Term Index test failed\");\n        } else if (segInfoStat.storedFieldStatus.error != null) {\n          throw new RuntimeException(\"Stored Field test failed\");\n        } else if (segInfoStat.termVectorStatus.error != null) {\n          throw new RuntimeException(\"Term Vector test failed\");\n        }\n\n        msg(\"\");\n\n      } catch (Throwable t) {\n        msg(\"FAILED\");\n        String comment;\n        comment = \"fixIndex() would remove reference to this segment\";\n        msg(\"    WARNING: \" + comment + \"; full exception:\");\n        if (infoStream != null)\n          t.printStackTrace(infoStream);\n        msg(\"\");\n        result.totLoseDocCount += toLoseDocCount;\n        result.numBadSegments++;\n        continue;\n      } finally {\n        if (reader != null)\n          reader.close();\n      }\n\n      // Keeper\n      result.newSegments.add((SegmentInfo) info.clone());\n    }\n\n    if (0 == result.numBadSegments) {\n      result.clean = true;\n      msg(\"No problems were detected with this index.\\n\");\n    } else\n      msg(\"WARNING: \" + result.numBadSegments + \" broken segments (containing \" + result.totLoseDocCount + \" documents) detected\");\n\n    return result;\n  }\n\n","sourceOld":"  /** Returns a {@link Status} instance detailing\n   *  the state of the index.\n   * \n   *  @param onlySegments list of specific segment names to check\n   *\n   *  <p>As this method checks every byte in the specified\n   *  segments, on a large index it can take quite a long\n   *  time to run.\n   *\n   *  <p><b>WARNING</b>: make sure\n   *  you only call this when the index is not opened by any\n   *  writer. */\n  public Status checkIndex(List<String> onlySegments) throws IOException {\n    NumberFormat nf = NumberFormat.getInstance();\n    SegmentInfos sis = new SegmentInfos();\n    Status result = new Status();\n    result.dir = dir;\n    try {\n      sis.read(dir);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read any segments file in directory\");\n      result.missingSegments = true;\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      return result;\n    }\n\n    final int numSegments = sis.size();\n    final String segmentsFileName = sis.getCurrentSegmentFileName();\n    IndexInput input = null;\n    try {\n      input = dir.openInput(segmentsFileName);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not open segments file in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.cantOpenSegments = true;\n      return result;\n    }\n    int format = 0;\n    try {\n      format = input.readInt();\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read segment file version in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.missingSegmentVersion = true;\n      return result;\n    } finally {\n      if (input != null)\n        input.close();\n    }\n\n    String sFormat = \"\";\n    boolean skip = false;\n\n    if (format == SegmentInfos.FORMAT)\n      sFormat = \"FORMAT [Lucene Pre-2.1]\";\n    if (format == SegmentInfos.FORMAT_LOCKLESS)\n      sFormat = \"FORMAT_LOCKLESS [Lucene 2.1]\";\n    else if (format == SegmentInfos.FORMAT_SINGLE_NORM_FILE)\n      sFormat = \"FORMAT_SINGLE_NORM_FILE [Lucene 2.2]\";\n    else if (format == SegmentInfos.FORMAT_SHARED_DOC_STORE)\n      sFormat = \"FORMAT_SHARED_DOC_STORE [Lucene 2.3]\";\n    else {\n      if (format == SegmentInfos.FORMAT_CHECKSUM)\n        sFormat = \"FORMAT_CHECKSUM [Lucene 2.4]\";\n      else if (format == SegmentInfos.FORMAT_DEL_COUNT)\n        sFormat = \"FORMAT_DEL_COUNT [Lucene 2.4]\";\n      else if (format == SegmentInfos.FORMAT_HAS_PROX)\n        sFormat = \"FORMAT_HAS_PROX [Lucene 2.4]\";\n      else if (format == SegmentInfos.FORMAT_USER_DATA)\n        sFormat = \"FORMAT_USER_DATA [Lucene 2.9]\";\n      else if (format == SegmentInfos.FORMAT_DIAGNOSTICS)\n        sFormat = \"FORMAT_DIAGNOSTICS [Lucene 2.9]\";\n      else if (format < SegmentInfos.CURRENT_FORMAT) {\n        sFormat = \"int=\" + format + \" [newer version of Lucene than this tool]\";\n        skip = true;\n      } else {\n        sFormat = format + \" [Lucene 1.3 or prior]\";\n      }\n    }\n\n    result.segmentsFileName = segmentsFileName;\n    result.numSegments = numSegments;\n    result.segmentFormat = sFormat;\n    result.userData = sis.getUserData();\n    String userDataString;\n    if (sis.getUserData().size() > 0) {\n      userDataString = \" userData=\" + sis.getUserData();\n    } else {\n      userDataString = \"\";\n    }\n\n    msg(\"Segments file=\" + segmentsFileName + \" numSegments=\" + numSegments + \" version=\" + sFormat + userDataString);\n\n    if (onlySegments != null) {\n      result.partial = true;\n      if (infoStream != null)\n        infoStream.print(\"\\nChecking only these segments:\");\n      for (String s : onlySegments) {\n        if (infoStream != null)\n          infoStream.print(\" \" + s);\n      }\n      result.segmentsChecked.addAll(onlySegments);\n      msg(\":\");\n    }\n\n    if (skip) {\n      msg(\"\\nERROR: this index appears to be created by a newer version of Lucene than this tool was compiled on; please re-compile this tool on the matching version of Lucene; exiting\");\n      result.toolOutOfDate = true;\n      return result;\n    }\n\n\n    result.newSegments = (SegmentInfos) sis.clone();\n    result.newSegments.clear();\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = sis.info(i);\n      if (onlySegments != null && !onlySegments.contains(info.name))\n        continue;\n      Status.SegmentInfoStatus segInfoStat = new Status.SegmentInfoStatus();\n      result.segmentInfos.add(segInfoStat);\n      msg(\"  \" + (1+i) + \" of \" + numSegments + \": name=\" + info.name + \" docCount=\" + info.docCount);\n      segInfoStat.name = info.name;\n      segInfoStat.docCount = info.docCount;\n\n      int toLoseDocCount = info.docCount;\n\n      SegmentReader reader = null;\n\n      try {\n        msg(\"    compound=\" + info.getUseCompoundFile());\n        segInfoStat.compound = info.getUseCompoundFile();\n        msg(\"    hasProx=\" + info.getHasProx());\n        segInfoStat.hasProx = info.getHasProx();\n        msg(\"    numFiles=\" + info.files().size());\n        segInfoStat.numFiles = info.files().size();\n        msg(\"    size (MB)=\" + nf.format(info.sizeInBytes()/(1024.*1024.)));\n        segInfoStat.sizeMB = info.sizeInBytes()/(1024.*1024.);\n        Map<String,String> diagnostics = info.getDiagnostics();\n        segInfoStat.diagnostics = diagnostics;\n        if (diagnostics.size() > 0) {\n          msg(\"    diagnostics = \" + diagnostics);\n        }\n\n        final int docStoreOffset = info.getDocStoreOffset();\n        if (docStoreOffset != -1) {\n          msg(\"    docStoreOffset=\" + docStoreOffset);\n          segInfoStat.docStoreOffset = docStoreOffset;\n          msg(\"    docStoreSegment=\" + info.getDocStoreSegment());\n          segInfoStat.docStoreSegment = info.getDocStoreSegment();\n          msg(\"    docStoreIsCompoundFile=\" + info.getDocStoreIsCompoundFile());\n          segInfoStat.docStoreCompoundFile = info.getDocStoreIsCompoundFile();\n        }\n        final String delFileName = info.getDelFileName();\n        if (delFileName == null){\n          msg(\"    no deletions\");\n          segInfoStat.hasDeletions = false;\n        }\n        else{\n          msg(\"    has deletions [delFileName=\" + delFileName + \"]\");\n          segInfoStat.hasDeletions = true;\n          segInfoStat.deletionsFileName = delFileName;\n        }\n        if (infoStream != null)\n          infoStream.print(\"    test: open reader.........\");\n        reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n        segInfoStat.openReaderPassed = true;\n\n        final int numDocs = reader.numDocs();\n        toLoseDocCount = numDocs;\n        if (reader.hasDeletions()) {\n          if (reader.deletedDocs.count() != info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs deletedDocs.count()=\" + reader.deletedDocs.count());\n          }\n          if (reader.deletedDocs.count() > reader.maxDoc()) {\n            throw new RuntimeException(\"too many deleted docs: maxDoc()=\" + reader.maxDoc() + \" vs deletedDocs.count()=\" + reader.deletedDocs.count());\n          }\n          if (info.docCount - numDocs != info.getDelCount()){\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          segInfoStat.numDeleted = info.docCount - numDocs;\n          msg(\"OK [\" + (segInfoStat.numDeleted) + \" deleted docs]\");\n        } else {\n          if (info.getDelCount() != 0) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          msg(\"OK\");\n        }\n        if (reader.maxDoc() != info.docCount)\n          throw new RuntimeException(\"SegmentReader.maxDoc() \" + reader.maxDoc() + \" != SegmentInfos.docCount \" + info.docCount);\n\n        // Test getFieldNames()\n        if (infoStream != null) {\n          infoStream.print(\"    test: fields..............\");\n        }         \n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        msg(\"OK [\" + fieldNames.size() + \" fields]\");\n        segInfoStat.numFields = fieldNames.size();\n        \n        // Test Field Norms\n        segInfoStat.fieldNormStatus = testFieldNorms(fieldNames, reader);\n\n        // Test the Term Index\n        segInfoStat.termIndexStatus = testTermIndex(info, reader);\n\n        // Test Stored Fields\n        segInfoStat.storedFieldStatus = testStoredFields(info, reader, nf);\n\n        // Test Term Vectors\n        segInfoStat.termVectorStatus = testTermVectors(info, reader, nf);\n\n        // Rethrow the first exception we encountered\n        //  This will cause stats for failed segments to be incremented properly\n        if (segInfoStat.fieldNormStatus.error != null) {\n          throw new RuntimeException(\"Field Norm test failed\");\n        } else if (segInfoStat.termIndexStatus.error != null) {\n          throw new RuntimeException(\"Term Index test failed\");\n        } else if (segInfoStat.storedFieldStatus.error != null) {\n          throw new RuntimeException(\"Stored Field test failed\");\n        } else if (segInfoStat.termVectorStatus.error != null) {\n          throw new RuntimeException(\"Term Vector test failed\");\n        }\n\n        msg(\"\");\n\n      } catch (Throwable t) {\n        msg(\"FAILED\");\n        String comment;\n        comment = \"fixIndex() would remove reference to this segment\";\n        msg(\"    WARNING: \" + comment + \"; full exception:\");\n        if (infoStream != null)\n          t.printStackTrace(infoStream);\n        msg(\"\");\n        result.totLoseDocCount += toLoseDocCount;\n        result.numBadSegments++;\n        continue;\n      } finally {\n        if (reader != null)\n          reader.close();\n      }\n\n      // Keeper\n      result.newSegments.add((SegmentInfo) info.clone());\n    }\n\n    if (0 == result.numBadSegments) {\n      result.clean = true;\n      msg(\"No problems were detected with this index.\\n\");\n    } else\n      msg(\"WARNING: \" + result.numBadSegments + \" broken segments (containing \" + result.totLoseDocCount + \" documents) detected\");\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CheckIndex#checkIndex(List[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CheckIndex#checkIndex(List[String]).mjava","sourceNew":"  protected Status checkIndex(List<String> onlySegments) throws IOException {\n    return checkIndex(onlySegments, CodecProvider.getDefault());\n  }\n\n","sourceOld":"  /** Returns a {@link Status} instance detailing\n   *  the state of the index.\n   * \n   *  @param onlySegments list of specific segment names to check\n   *\n   *  <p>As this method checks every byte in the specified\n   *  segments, on a large index it can take quite a long\n   *  time to run.\n   *\n   *  <p><b>WARNING</b>: make sure\n   *  you only call this when the index is not opened by any\n   *  writer. */\n  public Status checkIndex(List<String> onlySegments) throws IOException {\n    NumberFormat nf = NumberFormat.getInstance();\n    SegmentInfos sis = new SegmentInfos();\n    Status result = new Status();\n    result.dir = dir;\n    try {\n      sis.read(dir);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read any segments file in directory\");\n      result.missingSegments = true;\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      return result;\n    }\n\n    final int numSegments = sis.size();\n    final String segmentsFileName = sis.getCurrentSegmentFileName();\n    IndexInput input = null;\n    try {\n      input = dir.openInput(segmentsFileName);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not open segments file in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.cantOpenSegments = true;\n      return result;\n    }\n    int format = 0;\n    try {\n      format = input.readInt();\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read segment file version in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.missingSegmentVersion = true;\n      return result;\n    } finally {\n      if (input != null)\n        input.close();\n    }\n\n    String sFormat = \"\";\n    boolean skip = false;\n\n    if (format == SegmentInfos.FORMAT)\n      sFormat = \"FORMAT [Lucene Pre-2.1]\";\n    if (format == SegmentInfos.FORMAT_LOCKLESS)\n      sFormat = \"FORMAT_LOCKLESS [Lucene 2.1]\";\n    else if (format == SegmentInfos.FORMAT_SINGLE_NORM_FILE)\n      sFormat = \"FORMAT_SINGLE_NORM_FILE [Lucene 2.2]\";\n    else if (format == SegmentInfos.FORMAT_SHARED_DOC_STORE)\n      sFormat = \"FORMAT_SHARED_DOC_STORE [Lucene 2.3]\";\n    else {\n      if (format == SegmentInfos.FORMAT_CHECKSUM)\n        sFormat = \"FORMAT_CHECKSUM [Lucene 2.4]\";\n      else if (format == SegmentInfos.FORMAT_DEL_COUNT)\n        sFormat = \"FORMAT_DEL_COUNT [Lucene 2.4]\";\n      else if (format == SegmentInfos.FORMAT_HAS_PROX)\n        sFormat = \"FORMAT_HAS_PROX [Lucene 2.4]\";\n      else if (format == SegmentInfos.FORMAT_USER_DATA)\n        sFormat = \"FORMAT_USER_DATA [Lucene 2.9]\";\n      else if (format == SegmentInfos.FORMAT_DIAGNOSTICS)\n        sFormat = \"FORMAT_DIAGNOSTICS [Lucene 2.9]\";\n      else if (format < SegmentInfos.CURRENT_FORMAT) {\n        sFormat = \"int=\" + format + \" [newer version of Lucene than this tool]\";\n        skip = true;\n      } else {\n        sFormat = format + \" [Lucene 1.3 or prior]\";\n      }\n    }\n\n    result.segmentsFileName = segmentsFileName;\n    result.numSegments = numSegments;\n    result.segmentFormat = sFormat;\n    result.userData = sis.getUserData();\n    String userDataString;\n    if (sis.getUserData().size() > 0) {\n      userDataString = \" userData=\" + sis.getUserData();\n    } else {\n      userDataString = \"\";\n    }\n\n    msg(\"Segments file=\" + segmentsFileName + \" numSegments=\" + numSegments + \" version=\" + sFormat + userDataString);\n\n    if (onlySegments != null) {\n      result.partial = true;\n      if (infoStream != null)\n        infoStream.print(\"\\nChecking only these segments:\");\n      for (String s : onlySegments) {\n        if (infoStream != null)\n          infoStream.print(\" \" + s);\n      }\n      result.segmentsChecked.addAll(onlySegments);\n      msg(\":\");\n    }\n\n    if (skip) {\n      msg(\"\\nERROR: this index appears to be created by a newer version of Lucene than this tool was compiled on; please re-compile this tool on the matching version of Lucene; exiting\");\n      result.toolOutOfDate = true;\n      return result;\n    }\n\n\n    result.newSegments = (SegmentInfos) sis.clone();\n    result.newSegments.clear();\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = sis.info(i);\n      if (onlySegments != null && !onlySegments.contains(info.name))\n        continue;\n      Status.SegmentInfoStatus segInfoStat = new Status.SegmentInfoStatus();\n      result.segmentInfos.add(segInfoStat);\n      msg(\"  \" + (1+i) + \" of \" + numSegments + \": name=\" + info.name + \" docCount=\" + info.docCount);\n      segInfoStat.name = info.name;\n      segInfoStat.docCount = info.docCount;\n\n      int toLoseDocCount = info.docCount;\n\n      SegmentReader reader = null;\n\n      try {\n        msg(\"    compound=\" + info.getUseCompoundFile());\n        segInfoStat.compound = info.getUseCompoundFile();\n        msg(\"    hasProx=\" + info.getHasProx());\n        segInfoStat.hasProx = info.getHasProx();\n        msg(\"    numFiles=\" + info.files().size());\n        segInfoStat.numFiles = info.files().size();\n        msg(\"    size (MB)=\" + nf.format(info.sizeInBytes()/(1024.*1024.)));\n        segInfoStat.sizeMB = info.sizeInBytes()/(1024.*1024.);\n        Map<String,String> diagnostics = info.getDiagnostics();\n        segInfoStat.diagnostics = diagnostics;\n        if (diagnostics.size() > 0) {\n          msg(\"    diagnostics = \" + diagnostics);\n        }\n\n        final int docStoreOffset = info.getDocStoreOffset();\n        if (docStoreOffset != -1) {\n          msg(\"    docStoreOffset=\" + docStoreOffset);\n          segInfoStat.docStoreOffset = docStoreOffset;\n          msg(\"    docStoreSegment=\" + info.getDocStoreSegment());\n          segInfoStat.docStoreSegment = info.getDocStoreSegment();\n          msg(\"    docStoreIsCompoundFile=\" + info.getDocStoreIsCompoundFile());\n          segInfoStat.docStoreCompoundFile = info.getDocStoreIsCompoundFile();\n        }\n        final String delFileName = info.getDelFileName();\n        if (delFileName == null){\n          msg(\"    no deletions\");\n          segInfoStat.hasDeletions = false;\n        }\n        else{\n          msg(\"    has deletions [delFileName=\" + delFileName + \"]\");\n          segInfoStat.hasDeletions = true;\n          segInfoStat.deletionsFileName = delFileName;\n        }\n        if (infoStream != null)\n          infoStream.print(\"    test: open reader.........\");\n        reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n\n        segInfoStat.openReaderPassed = true;\n\n        final int numDocs = reader.numDocs();\n        toLoseDocCount = numDocs;\n        if (reader.hasDeletions()) {\n          if (reader.deletedDocs.count() != info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs deletedDocs.count()=\" + reader.deletedDocs.count());\n          }\n          if (reader.deletedDocs.count() > reader.maxDoc()) {\n            throw new RuntimeException(\"too many deleted docs: maxDoc()=\" + reader.maxDoc() + \" vs deletedDocs.count()=\" + reader.deletedDocs.count());\n          }\n          if (info.docCount - numDocs != info.getDelCount()){\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          segInfoStat.numDeleted = info.docCount - numDocs;\n          msg(\"OK [\" + (segInfoStat.numDeleted) + \" deleted docs]\");\n        } else {\n          if (info.getDelCount() != 0) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          msg(\"OK\");\n        }\n        if (reader.maxDoc() != info.docCount)\n          throw new RuntimeException(\"SegmentReader.maxDoc() \" + reader.maxDoc() + \" != SegmentInfos.docCount \" + info.docCount);\n\n        // Test getFieldNames()\n        if (infoStream != null) {\n          infoStream.print(\"    test: fields..............\");\n        }         \n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        msg(\"OK [\" + fieldNames.size() + \" fields]\");\n        segInfoStat.numFields = fieldNames.size();\n        \n        // Test Field Norms\n        segInfoStat.fieldNormStatus = testFieldNorms(fieldNames, reader);\n\n        // Test the Term Index\n        segInfoStat.termIndexStatus = testTermIndex(info, reader);\n\n        // Test Stored Fields\n        segInfoStat.storedFieldStatus = testStoredFields(info, reader, nf);\n\n        // Test Term Vectors\n        segInfoStat.termVectorStatus = testTermVectors(info, reader, nf);\n\n        // Rethrow the first exception we encountered\n        //  This will cause stats for failed segments to be incremented properly\n        if (segInfoStat.fieldNormStatus.error != null) {\n          throw new RuntimeException(\"Field Norm test failed\");\n        } else if (segInfoStat.termIndexStatus.error != null) {\n          throw new RuntimeException(\"Term Index test failed\");\n        } else if (segInfoStat.storedFieldStatus.error != null) {\n          throw new RuntimeException(\"Stored Field test failed\");\n        } else if (segInfoStat.termVectorStatus.error != null) {\n          throw new RuntimeException(\"Term Vector test failed\");\n        }\n\n        msg(\"\");\n\n      } catch (Throwable t) {\n        msg(\"FAILED\");\n        String comment;\n        comment = \"fixIndex() would remove reference to this segment\";\n        msg(\"    WARNING: \" + comment + \"; full exception:\");\n        if (infoStream != null)\n          t.printStackTrace(infoStream);\n        msg(\"\");\n        result.totLoseDocCount += toLoseDocCount;\n        result.numBadSegments++;\n        continue;\n      } finally {\n        if (reader != null)\n          reader.close();\n      }\n\n      // Keeper\n      result.newSegments.add((SegmentInfo) info.clone());\n    }\n\n    if (0 == result.numBadSegments) {\n      result.clean = true;\n      msg(\"No problems were detected with this index.\\n\");\n    } else\n      msg(\"WARNING: \" + result.numBadSegments + \" broken segments (containing \" + result.totLoseDocCount + \" documents) detected\");\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":["b43b719dab44d1ccc5ee5b6e01c50f1ee86bb76c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b43b719dab44d1ccc5ee5b6e01c50f1ee86bb76c","date":1270671893,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CheckIndex#checkIndex(List[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CheckIndex#checkIndex(List[String]).mjava","sourceNew":"  public Status checkIndex(List<String> onlySegments) throws IOException {\n    return checkIndex(onlySegments, CodecProvider.getDefault());\n  }\n\n","sourceOld":"  protected Status checkIndex(List<String> onlySegments) throws IOException {\n    return checkIndex(onlySegments, CodecProvider.getDefault());\n  }\n\n","bugFix":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CheckIndex#checkIndex(List[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CheckIndex#checkIndex(List[String]).mjava","sourceNew":"  /** Returns a {@link Status} instance detailing\n   *  the state of the index.\n   * \n   *  @param onlySegments list of specific segment names to check\n   *\n   *  <p>As this method checks every byte in the specified\n   *  segments, on a large index it can take quite a long\n   *  time to run.\n   *\n   *  <p><b>WARNING</b>: make sure\n   *  you only call this when the index is not opened by any\n   *  writer. */\n  public Status checkIndex(List<String> onlySegments) throws IOException {\n    NumberFormat nf = NumberFormat.getInstance();\n    SegmentInfos sis = new SegmentInfos();\n    Status result = new Status();\n    result.dir = dir;\n    try {\n      sis.read(dir);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read any segments file in directory\");\n      result.missingSegments = true;\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      return result;\n    }\n\n    // find the oldest and newest segment versions\n    String oldest = Integer.toString(Integer.MAX_VALUE), newest = Integer.toString(Integer.MIN_VALUE);\n    String oldSegs = null;\n    boolean foundNonNullVersion = false;\n    Comparator<String> versionComparator = StringHelper.getVersionComparator();\n    for (SegmentInfo si : sis) {\n      String version = si.getVersion();\n      if (version == null) {\n        // pre-3.1 segment\n        oldSegs = \"pre-3.1\";\n      } else {\n        foundNonNullVersion = true;\n        if (versionComparator.compare(version, oldest) < 0) {\n          oldest = version;\n        }\n        if (versionComparator.compare(version, newest) > 0) {\n          newest = version;\n        }\n      }\n    }\n\n    final int numSegments = sis.size();\n    final String segmentsFileName = sis.getCurrentSegmentFileName();\n    // note: we only read the format byte (required preamble) here!\n    IndexInput input = null;\n    try {\n      input = dir.openInput(segmentsFileName, IOContext.DEFAULT);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not open segments file in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.cantOpenSegments = true;\n      return result;\n    }\n    int format = 0;\n    try {\n      format = input.readInt();\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read segment file version in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.missingSegmentVersion = true;\n      return result;\n    } finally {\n      if (input != null)\n        input.close();\n    }\n\n    String sFormat = \"\";\n    boolean skip = false;\n\n    if (format == DefaultSegmentInfosWriter.FORMAT_DIAGNOSTICS) {\n      sFormat = \"FORMAT_DIAGNOSTICS [Lucene 2.9]\";\n    } else if (format == DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      sFormat = \"FORMAT_HAS_VECTORS [Lucene 3.1]\";\n    } else if (format == DefaultSegmentInfosWriter.FORMAT_3_1) {\n      sFormat = \"FORMAT_3_1 [Lucene 3.1+]\";\n    } else if (format == DefaultSegmentInfosWriter.FORMAT_4_0) {\n      sFormat = \"FORMAT_4_0 [Lucene 4.0]\";\n    } else if (format == DefaultSegmentInfosWriter.FORMAT_CURRENT) {\n      throw new RuntimeException(\"BUG: You should update this tool!\");\n    } else if (format < DefaultSegmentInfosWriter.FORMAT_CURRENT) {\n      sFormat = \"int=\" + format + \" [newer version of Lucene than this tool supports]\";\n      skip = true;\n    } else if (format > DefaultSegmentInfosWriter.FORMAT_MINIMUM) {\n      sFormat = \"int=\" + format + \" [older version of Lucene than this tool supports]\";\n      skip = true;\n    }\n\n    result.segmentsFileName = segmentsFileName;\n    result.numSegments = numSegments;\n    result.segmentFormat = sFormat;\n    result.userData = sis.getUserData();\n    String userDataString;\n    if (sis.getUserData().size() > 0) {\n      userDataString = \" userData=\" + sis.getUserData();\n    } else {\n      userDataString = \"\";\n    }\n\n    String versionString = null;\n    if (oldSegs != null) {\n      if (foundNonNullVersion) {\n        versionString = \"versions=[\" + oldSegs + \" .. \" + newest + \"]\";\n      } else {\n        versionString = \"version=\" + oldSegs;\n      }\n    } else {\n      versionString = oldest.equals(newest) ? ( \"version=\" + oldest ) : (\"versions=[\" + oldest + \" .. \" + newest + \"]\");\n    }\n\n    msg(\"Segments file=\" + segmentsFileName + \" numSegments=\" + numSegments\n        + \" \" + versionString + \" format=\" + sFormat + userDataString);\n\n    if (onlySegments != null) {\n      result.partial = true;\n      if (infoStream != null)\n        infoStream.print(\"\\nChecking only these segments:\");\n      for (String s : onlySegments) {\n        if (infoStream != null)\n          infoStream.print(\" \" + s);\n      }\n      result.segmentsChecked.addAll(onlySegments);\n      msg(\":\");\n    }\n\n    if (skip) {\n      msg(\"\\nERROR: this index appears to be created by a newer version of Lucene than this tool was compiled on; please re-compile this tool on the matching version of Lucene; exiting\");\n      result.toolOutOfDate = true;\n      return result;\n    }\n\n\n    result.newSegments = (SegmentInfos) sis.clone();\n    result.newSegments.clear();\n    result.maxSegmentName = -1;\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = sis.info(i);\n      int segmentName = Integer.parseInt(info.name.substring(1), Character.MAX_RADIX);\n      if (segmentName > result.maxSegmentName) {\n        result.maxSegmentName = segmentName;\n      }\n      if (onlySegments != null && !onlySegments.contains(info.name))\n        continue;\n      Status.SegmentInfoStatus segInfoStat = new Status.SegmentInfoStatus();\n      result.segmentInfos.add(segInfoStat);\n      msg(\"  \" + (1+i) + \" of \" + numSegments + \": name=\" + info.name + \" docCount=\" + info.docCount);\n      segInfoStat.name = info.name;\n      segInfoStat.docCount = info.docCount;\n\n      int toLoseDocCount = info.docCount;\n\n      SegmentReader reader = null;\n\n      try {\n        final Codec codec = info.getCodec();\n        msg(\"    codec=\" + codec);\n        segInfoStat.codec = codec;\n        msg(\"    compound=\" + info.getUseCompoundFile());\n        segInfoStat.compound = info.getUseCompoundFile();\n        msg(\"    hasProx=\" + info.getHasProx());\n        segInfoStat.hasProx = info.getHasProx();\n        msg(\"    numFiles=\" + info.files().size());\n        segInfoStat.numFiles = info.files().size();\n        segInfoStat.sizeMB = info.sizeInBytes(true)/(1024.*1024.);\n        msg(\"    size (MB)=\" + nf.format(segInfoStat.sizeMB));\n        Map<String,String> diagnostics = info.getDiagnostics();\n        segInfoStat.diagnostics = diagnostics;\n        if (diagnostics.size() > 0) {\n          msg(\"    diagnostics = \" + diagnostics);\n        }\n\n        final int docStoreOffset = info.getDocStoreOffset();\n        if (docStoreOffset != -1) {\n          msg(\"    docStoreOffset=\" + docStoreOffset);\n          segInfoStat.docStoreOffset = docStoreOffset;\n          msg(\"    docStoreSegment=\" + info.getDocStoreSegment());\n          segInfoStat.docStoreSegment = info.getDocStoreSegment();\n          msg(\"    docStoreIsCompoundFile=\" + info.getDocStoreIsCompoundFile());\n          segInfoStat.docStoreCompoundFile = info.getDocStoreIsCompoundFile();\n        }\n\n        final String delFileName = info.getDelFileName();\n        if (delFileName == null){\n          msg(\"    no deletions\");\n          segInfoStat.hasDeletions = false;\n        }\n        else{\n          msg(\"    has deletions [delFileName=\" + delFileName + \"]\");\n          segInfoStat.hasDeletions = true;\n          segInfoStat.deletionsFileName = delFileName;\n        }\n        if (infoStream != null)\n          infoStream.print(\"    test: open reader.........\");\n        reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, IOContext.DEFAULT);\n\n        segInfoStat.openReaderPassed = true;\n\n        final int numDocs = reader.numDocs();\n        toLoseDocCount = numDocs;\n        if (reader.hasDeletions()) {\n          if (reader.liveDocs.count() != info.docCount - info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + (info.docCount - info.getDelCount()) + \" vs reader=\" + reader.liveDocs.count());\n          }\n          if ((info.docCount-reader.liveDocs.count()) > reader.maxDoc()) {\n            throw new RuntimeException(\"too many deleted docs: maxDoc()=\" + reader.maxDoc() + \" vs del count=\" + (info.docCount-reader.liveDocs.count()));\n          }\n          if (info.docCount - numDocs != info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          segInfoStat.numDeleted = info.docCount - numDocs;\n          msg(\"OK [\" + (segInfoStat.numDeleted) + \" deleted docs]\");\n        } else {\n          if (info.getDelCount() != 0) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          msg(\"OK\");\n        }\n        if (reader.maxDoc() != info.docCount)\n          throw new RuntimeException(\"SegmentReader.maxDoc() \" + reader.maxDoc() + \" != SegmentInfos.docCount \" + info.docCount);\n\n        // Test getFieldNames()\n        if (infoStream != null) {\n          infoStream.print(\"    test: fields..............\");\n        }         \n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        msg(\"OK [\" + fieldNames.size() + \" fields]\");\n        segInfoStat.numFields = fieldNames.size();\n        \n        // Test Field Norms\n        segInfoStat.fieldNormStatus = testFieldNorms(fieldNames, reader);\n\n        // Test the Term Index\n        segInfoStat.termIndexStatus = testTermIndex(reader);\n\n        // Test Stored Fields\n        segInfoStat.storedFieldStatus = testStoredFields(info, reader, nf);\n\n        // Test Term Vectors\n        segInfoStat.termVectorStatus = testTermVectors(info, reader, nf);\n        \n        segInfoStat.docValuesStatus = testDocValues(info, reader);\n\n        // Rethrow the first exception we encountered\n        //  This will cause stats for failed segments to be incremented properly\n        if (segInfoStat.fieldNormStatus.error != null) {\n          throw new RuntimeException(\"Field Norm test failed\");\n        } else if (segInfoStat.termIndexStatus.error != null) {\n          throw new RuntimeException(\"Term Index test failed\");\n        } else if (segInfoStat.storedFieldStatus.error != null) {\n          throw new RuntimeException(\"Stored Field test failed\");\n        } else if (segInfoStat.termVectorStatus.error != null) {\n          throw new RuntimeException(\"Term Vector test failed\");\n        }  else if (segInfoStat.docValuesStatus.error != null) {\n          throw new RuntimeException(\"DocValues test failed\");\n        }\n\n        msg(\"\");\n\n      } catch (Throwable t) {\n        msg(\"FAILED\");\n        String comment;\n        comment = \"fixIndex() would remove reference to this segment\";\n        msg(\"    WARNING: \" + comment + \"; full exception:\");\n        if (infoStream != null)\n          t.printStackTrace(infoStream);\n        msg(\"\");\n        result.totLoseDocCount += toLoseDocCount;\n        result.numBadSegments++;\n        continue;\n      } finally {\n        if (reader != null)\n          reader.close();\n      }\n\n      // Keeper\n      result.newSegments.add((SegmentInfo) info.clone());\n    }\n\n    if (0 == result.numBadSegments) {\n      result.clean = true;\n    } else\n      msg(\"WARNING: \" + result.numBadSegments + \" broken segments (containing \" + result.totLoseDocCount + \" documents) detected\");\n\n    if ( ! (result.validCounter = (result.maxSegmentName < sis.counter))) {\n      result.clean = false;\n      result.newSegments.counter = result.maxSegmentName + 1; \n      msg(\"ERROR: Next segment name counter \" + sis.counter + \" is not greater than max segment name \" + result.maxSegmentName);\n    }\n    \n    if (result.clean) {\n      msg(\"No problems were detected with this index.\\n\");\n    }\n\n    return result;\n  }\n\n","sourceOld":"  public Status checkIndex(List<String> onlySegments) throws IOException {\n    return checkIndex(onlySegments, CodecProvider.getDefault());\n  }\n\n","bugFix":null,"bugIntro":["985e1291b5f205ff2a21385eb7092c8a513a56eb","d4d69c535930b5cce125cff868d40f6373dc27d4","f7523916a1350712e1ae710affd4e88ccd7c431d","8eaedf240fab95c428d5f496a274256d2053ad37","e44db636314d8ec17d54d6d28e6054fa4566e6c9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CheckIndex#checkIndex(List[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CheckIndex#checkIndex(List[String]).mjava","sourceNew":"  /** Returns a {@link Status} instance detailing\n   *  the state of the index.\n   * \n   *  @param onlySegments list of specific segment names to check\n   *\n   *  <p>As this method checks every byte in the specified\n   *  segments, on a large index it can take quite a long\n   *  time to run.\n   *\n   *  <p><b>WARNING</b>: make sure\n   *  you only call this when the index is not opened by any\n   *  writer. */\n  public Status checkIndex(List<String> onlySegments) throws IOException {\n    NumberFormat nf = NumberFormat.getInstance();\n    SegmentInfos sis = new SegmentInfos();\n    Status result = new Status();\n    result.dir = dir;\n    try {\n      sis.read(dir);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read any segments file in directory\");\n      result.missingSegments = true;\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      return result;\n    }\n\n    // find the oldest and newest segment versions\n    String oldest = Integer.toString(Integer.MAX_VALUE), newest = Integer.toString(Integer.MIN_VALUE);\n    String oldSegs = null;\n    boolean foundNonNullVersion = false;\n    Comparator<String> versionComparator = StringHelper.getVersionComparator();\n    for (SegmentInfo si : sis) {\n      String version = si.getVersion();\n      if (version == null) {\n        // pre-3.1 segment\n        oldSegs = \"pre-3.1\";\n      } else {\n        foundNonNullVersion = true;\n        if (versionComparator.compare(version, oldest) < 0) {\n          oldest = version;\n        }\n        if (versionComparator.compare(version, newest) > 0) {\n          newest = version;\n        }\n      }\n    }\n\n    final int numSegments = sis.size();\n    final String segmentsFileName = sis.getCurrentSegmentFileName();\n    // note: we only read the format byte (required preamble) here!\n    IndexInput input = null;\n    try {\n      input = dir.openInput(segmentsFileName, IOContext.DEFAULT);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not open segments file in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.cantOpenSegments = true;\n      return result;\n    }\n    int format = 0;\n    try {\n      format = input.readInt();\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read segment file version in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.missingSegmentVersion = true;\n      return result;\n    } finally {\n      if (input != null)\n        input.close();\n    }\n\n    String sFormat = \"\";\n    boolean skip = false;\n\n    if (format == DefaultSegmentInfosWriter.FORMAT_DIAGNOSTICS) {\n      sFormat = \"FORMAT_DIAGNOSTICS [Lucene 2.9]\";\n    } else if (format == DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      sFormat = \"FORMAT_HAS_VECTORS [Lucene 3.1]\";\n    } else if (format == DefaultSegmentInfosWriter.FORMAT_3_1) {\n      sFormat = \"FORMAT_3_1 [Lucene 3.1+]\";\n    } else if (format == DefaultSegmentInfosWriter.FORMAT_4_0) {\n      sFormat = \"FORMAT_4_0 [Lucene 4.0]\";\n    } else if (format == DefaultSegmentInfosWriter.FORMAT_CURRENT) {\n      throw new RuntimeException(\"BUG: You should update this tool!\");\n    } else if (format < DefaultSegmentInfosWriter.FORMAT_CURRENT) {\n      sFormat = \"int=\" + format + \" [newer version of Lucene than this tool supports]\";\n      skip = true;\n    } else if (format > DefaultSegmentInfosWriter.FORMAT_MINIMUM) {\n      sFormat = \"int=\" + format + \" [older version of Lucene than this tool supports]\";\n      skip = true;\n    }\n\n    result.segmentsFileName = segmentsFileName;\n    result.numSegments = numSegments;\n    result.segmentFormat = sFormat;\n    result.userData = sis.getUserData();\n    String userDataString;\n    if (sis.getUserData().size() > 0) {\n      userDataString = \" userData=\" + sis.getUserData();\n    } else {\n      userDataString = \"\";\n    }\n\n    String versionString = null;\n    if (oldSegs != null) {\n      if (foundNonNullVersion) {\n        versionString = \"versions=[\" + oldSegs + \" .. \" + newest + \"]\";\n      } else {\n        versionString = \"version=\" + oldSegs;\n      }\n    } else {\n      versionString = oldest.equals(newest) ? ( \"version=\" + oldest ) : (\"versions=[\" + oldest + \" .. \" + newest + \"]\");\n    }\n\n    msg(\"Segments file=\" + segmentsFileName + \" numSegments=\" + numSegments\n        + \" \" + versionString + \" format=\" + sFormat + userDataString);\n\n    if (onlySegments != null) {\n      result.partial = true;\n      if (infoStream != null)\n        infoStream.print(\"\\nChecking only these segments:\");\n      for (String s : onlySegments) {\n        if (infoStream != null)\n          infoStream.print(\" \" + s);\n      }\n      result.segmentsChecked.addAll(onlySegments);\n      msg(\":\");\n    }\n\n    if (skip) {\n      msg(\"\\nERROR: this index appears to be created by a newer version of Lucene than this tool was compiled on; please re-compile this tool on the matching version of Lucene; exiting\");\n      result.toolOutOfDate = true;\n      return result;\n    }\n\n\n    result.newSegments = (SegmentInfos) sis.clone();\n    result.newSegments.clear();\n    result.maxSegmentName = -1;\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = sis.info(i);\n      int segmentName = Integer.parseInt(info.name.substring(1), Character.MAX_RADIX);\n      if (segmentName > result.maxSegmentName) {\n        result.maxSegmentName = segmentName;\n      }\n      if (onlySegments != null && !onlySegments.contains(info.name))\n        continue;\n      Status.SegmentInfoStatus segInfoStat = new Status.SegmentInfoStatus();\n      result.segmentInfos.add(segInfoStat);\n      msg(\"  \" + (1+i) + \" of \" + numSegments + \": name=\" + info.name + \" docCount=\" + info.docCount);\n      segInfoStat.name = info.name;\n      segInfoStat.docCount = info.docCount;\n\n      int toLoseDocCount = info.docCount;\n\n      SegmentReader reader = null;\n\n      try {\n        final Codec codec = info.getCodec();\n        msg(\"    codec=\" + codec);\n        segInfoStat.codec = codec;\n        msg(\"    compound=\" + info.getUseCompoundFile());\n        segInfoStat.compound = info.getUseCompoundFile();\n        msg(\"    hasProx=\" + info.getHasProx());\n        segInfoStat.hasProx = info.getHasProx();\n        msg(\"    numFiles=\" + info.files().size());\n        segInfoStat.numFiles = info.files().size();\n        segInfoStat.sizeMB = info.sizeInBytes()/(1024.*1024.);\n        msg(\"    size (MB)=\" + nf.format(segInfoStat.sizeMB));\n        Map<String,String> diagnostics = info.getDiagnostics();\n        segInfoStat.diagnostics = diagnostics;\n        if (diagnostics.size() > 0) {\n          msg(\"    diagnostics = \" + diagnostics);\n        }\n\n        final int docStoreOffset = info.getDocStoreOffset();\n        if (docStoreOffset != -1) {\n          msg(\"    docStoreOffset=\" + docStoreOffset);\n          segInfoStat.docStoreOffset = docStoreOffset;\n          msg(\"    docStoreSegment=\" + info.getDocStoreSegment());\n          segInfoStat.docStoreSegment = info.getDocStoreSegment();\n          msg(\"    docStoreIsCompoundFile=\" + info.getDocStoreIsCompoundFile());\n          segInfoStat.docStoreCompoundFile = info.getDocStoreIsCompoundFile();\n        }\n\n        final String delFileName = info.getDelFileName();\n        if (delFileName == null){\n          msg(\"    no deletions\");\n          segInfoStat.hasDeletions = false;\n        }\n        else{\n          msg(\"    has deletions [delFileName=\" + delFileName + \"]\");\n          segInfoStat.hasDeletions = true;\n          segInfoStat.deletionsFileName = delFileName;\n        }\n        if (infoStream != null)\n          infoStream.print(\"    test: open reader.........\");\n        reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, IOContext.DEFAULT);\n\n        segInfoStat.openReaderPassed = true;\n\n        final int numDocs = reader.numDocs();\n        toLoseDocCount = numDocs;\n        if (reader.hasDeletions()) {\n          if (reader.liveDocs.count() != info.docCount - info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + (info.docCount - info.getDelCount()) + \" vs reader=\" + reader.liveDocs.count());\n          }\n          if ((info.docCount-reader.liveDocs.count()) > reader.maxDoc()) {\n            throw new RuntimeException(\"too many deleted docs: maxDoc()=\" + reader.maxDoc() + \" vs del count=\" + (info.docCount-reader.liveDocs.count()));\n          }\n          if (info.docCount - numDocs != info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          segInfoStat.numDeleted = info.docCount - numDocs;\n          msg(\"OK [\" + (segInfoStat.numDeleted) + \" deleted docs]\");\n        } else {\n          if (info.getDelCount() != 0) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          msg(\"OK\");\n        }\n        if (reader.maxDoc() != info.docCount)\n          throw new RuntimeException(\"SegmentReader.maxDoc() \" + reader.maxDoc() + \" != SegmentInfos.docCount \" + info.docCount);\n\n        // Test getFieldNames()\n        if (infoStream != null) {\n          infoStream.print(\"    test: fields..............\");\n        }         \n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        msg(\"OK [\" + fieldNames.size() + \" fields]\");\n        segInfoStat.numFields = fieldNames.size();\n        \n        // Test Field Norms\n        segInfoStat.fieldNormStatus = testFieldNorms(fieldNames, reader);\n\n        // Test the Term Index\n        segInfoStat.termIndexStatus = testTermIndex(reader);\n\n        // Test Stored Fields\n        segInfoStat.storedFieldStatus = testStoredFields(info, reader, nf);\n\n        // Test Term Vectors\n        segInfoStat.termVectorStatus = testTermVectors(info, reader, nf);\n        \n        segInfoStat.docValuesStatus = testDocValues(info, reader);\n\n        // Rethrow the first exception we encountered\n        //  This will cause stats for failed segments to be incremented properly\n        if (segInfoStat.fieldNormStatus.error != null) {\n          throw new RuntimeException(\"Field Norm test failed\");\n        } else if (segInfoStat.termIndexStatus.error != null) {\n          throw new RuntimeException(\"Term Index test failed\");\n        } else if (segInfoStat.storedFieldStatus.error != null) {\n          throw new RuntimeException(\"Stored Field test failed\");\n        } else if (segInfoStat.termVectorStatus.error != null) {\n          throw new RuntimeException(\"Term Vector test failed\");\n        }  else if (segInfoStat.docValuesStatus.error != null) {\n          throw new RuntimeException(\"DocValues test failed\");\n        }\n\n        msg(\"\");\n\n      } catch (Throwable t) {\n        msg(\"FAILED\");\n        String comment;\n        comment = \"fixIndex() would remove reference to this segment\";\n        msg(\"    WARNING: \" + comment + \"; full exception:\");\n        if (infoStream != null)\n          t.printStackTrace(infoStream);\n        msg(\"\");\n        result.totLoseDocCount += toLoseDocCount;\n        result.numBadSegments++;\n        continue;\n      } finally {\n        if (reader != null)\n          reader.close();\n      }\n\n      // Keeper\n      result.newSegments.add((SegmentInfo) info.clone());\n    }\n\n    if (0 == result.numBadSegments) {\n      result.clean = true;\n    } else\n      msg(\"WARNING: \" + result.numBadSegments + \" broken segments (containing \" + result.totLoseDocCount + \" documents) detected\");\n\n    if ( ! (result.validCounter = (result.maxSegmentName < sis.counter))) {\n      result.clean = false;\n      result.newSegments.counter = result.maxSegmentName + 1; \n      msg(\"ERROR: Next segment name counter \" + sis.counter + \" is not greater than max segment name \" + result.maxSegmentName);\n    }\n    \n    if (result.clean) {\n      msg(\"No problems were detected with this index.\\n\");\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /** Returns a {@link Status} instance detailing\n   *  the state of the index.\n   * \n   *  @param onlySegments list of specific segment names to check\n   *\n   *  <p>As this method checks every byte in the specified\n   *  segments, on a large index it can take quite a long\n   *  time to run.\n   *\n   *  <p><b>WARNING</b>: make sure\n   *  you only call this when the index is not opened by any\n   *  writer. */\n  public Status checkIndex(List<String> onlySegments) throws IOException {\n    NumberFormat nf = NumberFormat.getInstance();\n    SegmentInfos sis = new SegmentInfos();\n    Status result = new Status();\n    result.dir = dir;\n    try {\n      sis.read(dir);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read any segments file in directory\");\n      result.missingSegments = true;\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      return result;\n    }\n\n    // find the oldest and newest segment versions\n    String oldest = Integer.toString(Integer.MAX_VALUE), newest = Integer.toString(Integer.MIN_VALUE);\n    String oldSegs = null;\n    boolean foundNonNullVersion = false;\n    Comparator<String> versionComparator = StringHelper.getVersionComparator();\n    for (SegmentInfo si : sis) {\n      String version = si.getVersion();\n      if (version == null) {\n        // pre-3.1 segment\n        oldSegs = \"pre-3.1\";\n      } else {\n        foundNonNullVersion = true;\n        if (versionComparator.compare(version, oldest) < 0) {\n          oldest = version;\n        }\n        if (versionComparator.compare(version, newest) > 0) {\n          newest = version;\n        }\n      }\n    }\n\n    final int numSegments = sis.size();\n    final String segmentsFileName = sis.getCurrentSegmentFileName();\n    // note: we only read the format byte (required preamble) here!\n    IndexInput input = null;\n    try {\n      input = dir.openInput(segmentsFileName, IOContext.DEFAULT);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not open segments file in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.cantOpenSegments = true;\n      return result;\n    }\n    int format = 0;\n    try {\n      format = input.readInt();\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read segment file version in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.missingSegmentVersion = true;\n      return result;\n    } finally {\n      if (input != null)\n        input.close();\n    }\n\n    String sFormat = \"\";\n    boolean skip = false;\n\n    if (format == DefaultSegmentInfosWriter.FORMAT_DIAGNOSTICS) {\n      sFormat = \"FORMAT_DIAGNOSTICS [Lucene 2.9]\";\n    } else if (format == DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      sFormat = \"FORMAT_HAS_VECTORS [Lucene 3.1]\";\n    } else if (format == DefaultSegmentInfosWriter.FORMAT_3_1) {\n      sFormat = \"FORMAT_3_1 [Lucene 3.1+]\";\n    } else if (format == DefaultSegmentInfosWriter.FORMAT_4_0) {\n      sFormat = \"FORMAT_4_0 [Lucene 4.0]\";\n    } else if (format == DefaultSegmentInfosWriter.FORMAT_CURRENT) {\n      throw new RuntimeException(\"BUG: You should update this tool!\");\n    } else if (format < DefaultSegmentInfosWriter.FORMAT_CURRENT) {\n      sFormat = \"int=\" + format + \" [newer version of Lucene than this tool supports]\";\n      skip = true;\n    } else if (format > DefaultSegmentInfosWriter.FORMAT_MINIMUM) {\n      sFormat = \"int=\" + format + \" [older version of Lucene than this tool supports]\";\n      skip = true;\n    }\n\n    result.segmentsFileName = segmentsFileName;\n    result.numSegments = numSegments;\n    result.segmentFormat = sFormat;\n    result.userData = sis.getUserData();\n    String userDataString;\n    if (sis.getUserData().size() > 0) {\n      userDataString = \" userData=\" + sis.getUserData();\n    } else {\n      userDataString = \"\";\n    }\n\n    String versionString = null;\n    if (oldSegs != null) {\n      if (foundNonNullVersion) {\n        versionString = \"versions=[\" + oldSegs + \" .. \" + newest + \"]\";\n      } else {\n        versionString = \"version=\" + oldSegs;\n      }\n    } else {\n      versionString = oldest.equals(newest) ? ( \"version=\" + oldest ) : (\"versions=[\" + oldest + \" .. \" + newest + \"]\");\n    }\n\n    msg(\"Segments file=\" + segmentsFileName + \" numSegments=\" + numSegments\n        + \" \" + versionString + \" format=\" + sFormat + userDataString);\n\n    if (onlySegments != null) {\n      result.partial = true;\n      if (infoStream != null)\n        infoStream.print(\"\\nChecking only these segments:\");\n      for (String s : onlySegments) {\n        if (infoStream != null)\n          infoStream.print(\" \" + s);\n      }\n      result.segmentsChecked.addAll(onlySegments);\n      msg(\":\");\n    }\n\n    if (skip) {\n      msg(\"\\nERROR: this index appears to be created by a newer version of Lucene than this tool was compiled on; please re-compile this tool on the matching version of Lucene; exiting\");\n      result.toolOutOfDate = true;\n      return result;\n    }\n\n\n    result.newSegments = (SegmentInfos) sis.clone();\n    result.newSegments.clear();\n    result.maxSegmentName = -1;\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = sis.info(i);\n      int segmentName = Integer.parseInt(info.name.substring(1), Character.MAX_RADIX);\n      if (segmentName > result.maxSegmentName) {\n        result.maxSegmentName = segmentName;\n      }\n      if (onlySegments != null && !onlySegments.contains(info.name))\n        continue;\n      Status.SegmentInfoStatus segInfoStat = new Status.SegmentInfoStatus();\n      result.segmentInfos.add(segInfoStat);\n      msg(\"  \" + (1+i) + \" of \" + numSegments + \": name=\" + info.name + \" docCount=\" + info.docCount);\n      segInfoStat.name = info.name;\n      segInfoStat.docCount = info.docCount;\n\n      int toLoseDocCount = info.docCount;\n\n      SegmentReader reader = null;\n\n      try {\n        final Codec codec = info.getCodec();\n        msg(\"    codec=\" + codec);\n        segInfoStat.codec = codec;\n        msg(\"    compound=\" + info.getUseCompoundFile());\n        segInfoStat.compound = info.getUseCompoundFile();\n        msg(\"    hasProx=\" + info.getHasProx());\n        segInfoStat.hasProx = info.getHasProx();\n        msg(\"    numFiles=\" + info.files().size());\n        segInfoStat.numFiles = info.files().size();\n        segInfoStat.sizeMB = info.sizeInBytes(true)/(1024.*1024.);\n        msg(\"    size (MB)=\" + nf.format(segInfoStat.sizeMB));\n        Map<String,String> diagnostics = info.getDiagnostics();\n        segInfoStat.diagnostics = diagnostics;\n        if (diagnostics.size() > 0) {\n          msg(\"    diagnostics = \" + diagnostics);\n        }\n\n        final int docStoreOffset = info.getDocStoreOffset();\n        if (docStoreOffset != -1) {\n          msg(\"    docStoreOffset=\" + docStoreOffset);\n          segInfoStat.docStoreOffset = docStoreOffset;\n          msg(\"    docStoreSegment=\" + info.getDocStoreSegment());\n          segInfoStat.docStoreSegment = info.getDocStoreSegment();\n          msg(\"    docStoreIsCompoundFile=\" + info.getDocStoreIsCompoundFile());\n          segInfoStat.docStoreCompoundFile = info.getDocStoreIsCompoundFile();\n        }\n\n        final String delFileName = info.getDelFileName();\n        if (delFileName == null){\n          msg(\"    no deletions\");\n          segInfoStat.hasDeletions = false;\n        }\n        else{\n          msg(\"    has deletions [delFileName=\" + delFileName + \"]\");\n          segInfoStat.hasDeletions = true;\n          segInfoStat.deletionsFileName = delFileName;\n        }\n        if (infoStream != null)\n          infoStream.print(\"    test: open reader.........\");\n        reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, IOContext.DEFAULT);\n\n        segInfoStat.openReaderPassed = true;\n\n        final int numDocs = reader.numDocs();\n        toLoseDocCount = numDocs;\n        if (reader.hasDeletions()) {\n          if (reader.liveDocs.count() != info.docCount - info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + (info.docCount - info.getDelCount()) + \" vs reader=\" + reader.liveDocs.count());\n          }\n          if ((info.docCount-reader.liveDocs.count()) > reader.maxDoc()) {\n            throw new RuntimeException(\"too many deleted docs: maxDoc()=\" + reader.maxDoc() + \" vs del count=\" + (info.docCount-reader.liveDocs.count()));\n          }\n          if (info.docCount - numDocs != info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          segInfoStat.numDeleted = info.docCount - numDocs;\n          msg(\"OK [\" + (segInfoStat.numDeleted) + \" deleted docs]\");\n        } else {\n          if (info.getDelCount() != 0) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          msg(\"OK\");\n        }\n        if (reader.maxDoc() != info.docCount)\n          throw new RuntimeException(\"SegmentReader.maxDoc() \" + reader.maxDoc() + \" != SegmentInfos.docCount \" + info.docCount);\n\n        // Test getFieldNames()\n        if (infoStream != null) {\n          infoStream.print(\"    test: fields..............\");\n        }         \n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        msg(\"OK [\" + fieldNames.size() + \" fields]\");\n        segInfoStat.numFields = fieldNames.size();\n        \n        // Test Field Norms\n        segInfoStat.fieldNormStatus = testFieldNorms(fieldNames, reader);\n\n        // Test the Term Index\n        segInfoStat.termIndexStatus = testTermIndex(reader);\n\n        // Test Stored Fields\n        segInfoStat.storedFieldStatus = testStoredFields(info, reader, nf);\n\n        // Test Term Vectors\n        segInfoStat.termVectorStatus = testTermVectors(info, reader, nf);\n        \n        segInfoStat.docValuesStatus = testDocValues(info, reader);\n\n        // Rethrow the first exception we encountered\n        //  This will cause stats for failed segments to be incremented properly\n        if (segInfoStat.fieldNormStatus.error != null) {\n          throw new RuntimeException(\"Field Norm test failed\");\n        } else if (segInfoStat.termIndexStatus.error != null) {\n          throw new RuntimeException(\"Term Index test failed\");\n        } else if (segInfoStat.storedFieldStatus.error != null) {\n          throw new RuntimeException(\"Stored Field test failed\");\n        } else if (segInfoStat.termVectorStatus.error != null) {\n          throw new RuntimeException(\"Term Vector test failed\");\n        }  else if (segInfoStat.docValuesStatus.error != null) {\n          throw new RuntimeException(\"DocValues test failed\");\n        }\n\n        msg(\"\");\n\n      } catch (Throwable t) {\n        msg(\"FAILED\");\n        String comment;\n        comment = \"fixIndex() would remove reference to this segment\";\n        msg(\"    WARNING: \" + comment + \"; full exception:\");\n        if (infoStream != null)\n          t.printStackTrace(infoStream);\n        msg(\"\");\n        result.totLoseDocCount += toLoseDocCount;\n        result.numBadSegments++;\n        continue;\n      } finally {\n        if (reader != null)\n          reader.close();\n      }\n\n      // Keeper\n      result.newSegments.add((SegmentInfo) info.clone());\n    }\n\n    if (0 == result.numBadSegments) {\n      result.clean = true;\n    } else\n      msg(\"WARNING: \" + result.numBadSegments + \" broken segments (containing \" + result.totLoseDocCount + \" documents) detected\");\n\n    if ( ! (result.validCounter = (result.maxSegmentName < sis.counter))) {\n      result.clean = false;\n      result.newSegments.counter = result.maxSegmentName + 1; \n      msg(\"ERROR: Next segment name counter \" + sis.counter + \" is not greater than max segment name \" + result.maxSegmentName);\n    }\n    \n    if (result.clean) {\n      msg(\"No problems were detected with this index.\\n\");\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cfd7f00f3dbc4c50d336540f063493fc0f7d830f","date":1322850565,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CheckIndex#checkIndex(List[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CheckIndex#checkIndex(List[String]).mjava","sourceNew":"  /** Returns a {@link Status} instance detailing\n   *  the state of the index.\n   * \n   *  @param onlySegments list of specific segment names to check\n   *\n   *  <p>As this method checks every byte in the specified\n   *  segments, on a large index it can take quite a long\n   *  time to run.\n   *\n   *  <p><b>WARNING</b>: make sure\n   *  you only call this when the index is not opened by any\n   *  writer. */\n  public Status checkIndex(List<String> onlySegments) throws IOException {\n    NumberFormat nf = NumberFormat.getInstance();\n    SegmentInfos sis = new SegmentInfos();\n    Status result = new Status();\n    result.dir = dir;\n    try {\n      sis.read(dir);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read any segments file in directory\");\n      result.missingSegments = true;\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      return result;\n    }\n\n    // find the oldest and newest segment versions\n    String oldest = Integer.toString(Integer.MAX_VALUE), newest = Integer.toString(Integer.MIN_VALUE);\n    String oldSegs = null;\n    boolean foundNonNullVersion = false;\n    Comparator<String> versionComparator = StringHelper.getVersionComparator();\n    for (SegmentInfo si : sis) {\n      String version = si.getVersion();\n      if (version == null) {\n        // pre-3.1 segment\n        oldSegs = \"pre-3.1\";\n      } else {\n        foundNonNullVersion = true;\n        if (versionComparator.compare(version, oldest) < 0) {\n          oldest = version;\n        }\n        if (versionComparator.compare(version, newest) > 0) {\n          newest = version;\n        }\n      }\n    }\n\n    final int numSegments = sis.size();\n    final String segmentsFileName = sis.getCurrentSegmentFileName();\n    // note: we only read the format byte (required preamble) here!\n    IndexInput input = null;\n    try {\n      input = dir.openInput(segmentsFileName, IOContext.DEFAULT);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not open segments file in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.cantOpenSegments = true;\n      return result;\n    }\n    int format = 0;\n    try {\n      format = input.readInt();\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read segment file version in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.missingSegmentVersion = true;\n      return result;\n    } finally {\n      if (input != null)\n        input.close();\n    }\n\n    String sFormat = \"\";\n    boolean skip = false;\n\n    if (format == SegmentInfos.FORMAT_DIAGNOSTICS) {\n      sFormat = \"FORMAT_DIAGNOSTICS [Lucene 2.9]\";\n    } else if (format == SegmentInfos.FORMAT_HAS_VECTORS) {\n      sFormat = \"FORMAT_HAS_VECTORS [Lucene 3.1]\";\n    } else if (format == SegmentInfos.FORMAT_3_1) {\n      sFormat = \"FORMAT_3_1 [Lucene 3.1+]\";\n    } else if (format == SegmentInfos.FORMAT_4_0) {\n      sFormat = \"FORMAT_4_0 [Lucene 4.0]\";\n    } else if (format == SegmentInfos.FORMAT_CURRENT) {\n      throw new RuntimeException(\"BUG: You should update this tool!\");\n    } else if (format < SegmentInfos.FORMAT_CURRENT) {\n      sFormat = \"int=\" + format + \" [newer version of Lucene than this tool supports]\";\n      skip = true;\n    } else if (format > SegmentInfos.FORMAT_MINIMUM) {\n      sFormat = \"int=\" + format + \" [older version of Lucene than this tool supports]\";\n      skip = true;\n    }\n\n    result.segmentsFileName = segmentsFileName;\n    result.numSegments = numSegments;\n    result.segmentFormat = sFormat;\n    result.userData = sis.getUserData();\n    String userDataString;\n    if (sis.getUserData().size() > 0) {\n      userDataString = \" userData=\" + sis.getUserData();\n    } else {\n      userDataString = \"\";\n    }\n\n    String versionString = null;\n    if (oldSegs != null) {\n      if (foundNonNullVersion) {\n        versionString = \"versions=[\" + oldSegs + \" .. \" + newest + \"]\";\n      } else {\n        versionString = \"version=\" + oldSegs;\n      }\n    } else {\n      versionString = oldest.equals(newest) ? ( \"version=\" + oldest ) : (\"versions=[\" + oldest + \" .. \" + newest + \"]\");\n    }\n\n    msg(\"Segments file=\" + segmentsFileName + \" numSegments=\" + numSegments\n        + \" \" + versionString + \" format=\" + sFormat + userDataString);\n\n    if (onlySegments != null) {\n      result.partial = true;\n      if (infoStream != null)\n        infoStream.print(\"\\nChecking only these segments:\");\n      for (String s : onlySegments) {\n        if (infoStream != null)\n          infoStream.print(\" \" + s);\n      }\n      result.segmentsChecked.addAll(onlySegments);\n      msg(\":\");\n    }\n\n    if (skip) {\n      msg(\"\\nERROR: this index appears to be created by a newer version of Lucene than this tool was compiled on; please re-compile this tool on the matching version of Lucene; exiting\");\n      result.toolOutOfDate = true;\n      return result;\n    }\n\n\n    result.newSegments = (SegmentInfos) sis.clone();\n    result.newSegments.clear();\n    result.maxSegmentName = -1;\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = sis.info(i);\n      int segmentName = Integer.parseInt(info.name.substring(1), Character.MAX_RADIX);\n      if (segmentName > result.maxSegmentName) {\n        result.maxSegmentName = segmentName;\n      }\n      if (onlySegments != null && !onlySegments.contains(info.name))\n        continue;\n      Status.SegmentInfoStatus segInfoStat = new Status.SegmentInfoStatus();\n      result.segmentInfos.add(segInfoStat);\n      msg(\"  \" + (1+i) + \" of \" + numSegments + \": name=\" + info.name + \" docCount=\" + info.docCount);\n      segInfoStat.name = info.name;\n      segInfoStat.docCount = info.docCount;\n\n      int toLoseDocCount = info.docCount;\n\n      SegmentReader reader = null;\n\n      try {\n        final Codec codec = info.getCodec();\n        msg(\"    codec=\" + codec);\n        segInfoStat.codec = codec;\n        msg(\"    compound=\" + info.getUseCompoundFile());\n        segInfoStat.compound = info.getUseCompoundFile();\n        msg(\"    hasProx=\" + info.getHasProx());\n        segInfoStat.hasProx = info.getHasProx();\n        msg(\"    numFiles=\" + info.files().size());\n        segInfoStat.numFiles = info.files().size();\n        segInfoStat.sizeMB = info.sizeInBytes()/(1024.*1024.);\n        msg(\"    size (MB)=\" + nf.format(segInfoStat.sizeMB));\n        Map<String,String> diagnostics = info.getDiagnostics();\n        segInfoStat.diagnostics = diagnostics;\n        if (diagnostics.size() > 0) {\n          msg(\"    diagnostics = \" + diagnostics);\n        }\n\n        final int docStoreOffset = info.getDocStoreOffset();\n        if (docStoreOffset != -1) {\n          msg(\"    docStoreOffset=\" + docStoreOffset);\n          segInfoStat.docStoreOffset = docStoreOffset;\n          msg(\"    docStoreSegment=\" + info.getDocStoreSegment());\n          segInfoStat.docStoreSegment = info.getDocStoreSegment();\n          msg(\"    docStoreIsCompoundFile=\" + info.getDocStoreIsCompoundFile());\n          segInfoStat.docStoreCompoundFile = info.getDocStoreIsCompoundFile();\n        }\n\n        final String delFileName = info.getDelFileName();\n        if (delFileName == null){\n          msg(\"    no deletions\");\n          segInfoStat.hasDeletions = false;\n        }\n        else{\n          msg(\"    has deletions [delFileName=\" + delFileName + \"]\");\n          segInfoStat.hasDeletions = true;\n          segInfoStat.deletionsFileName = delFileName;\n        }\n        if (infoStream != null)\n          infoStream.print(\"    test: open reader.........\");\n        reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, IOContext.DEFAULT);\n\n        segInfoStat.openReaderPassed = true;\n\n        final int numDocs = reader.numDocs();\n        toLoseDocCount = numDocs;\n        if (reader.hasDeletions()) {\n          if (reader.liveDocs.count() != info.docCount - info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + (info.docCount - info.getDelCount()) + \" vs reader=\" + reader.liveDocs.count());\n          }\n          if ((info.docCount-reader.liveDocs.count()) > reader.maxDoc()) {\n            throw new RuntimeException(\"too many deleted docs: maxDoc()=\" + reader.maxDoc() + \" vs del count=\" + (info.docCount-reader.liveDocs.count()));\n          }\n          if (info.docCount - numDocs != info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          segInfoStat.numDeleted = info.docCount - numDocs;\n          msg(\"OK [\" + (segInfoStat.numDeleted) + \" deleted docs]\");\n        } else {\n          if (info.getDelCount() != 0) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          msg(\"OK\");\n        }\n        if (reader.maxDoc() != info.docCount)\n          throw new RuntimeException(\"SegmentReader.maxDoc() \" + reader.maxDoc() + \" != SegmentInfos.docCount \" + info.docCount);\n\n        // Test getFieldNames()\n        if (infoStream != null) {\n          infoStream.print(\"    test: fields..............\");\n        }         \n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        msg(\"OK [\" + fieldNames.size() + \" fields]\");\n        segInfoStat.numFields = fieldNames.size();\n        \n        // Test Field Norms\n        segInfoStat.fieldNormStatus = testFieldNorms(fieldNames, reader);\n\n        // Test the Term Index\n        segInfoStat.termIndexStatus = testTermIndex(reader);\n\n        // Test Stored Fields\n        segInfoStat.storedFieldStatus = testStoredFields(info, reader, nf);\n\n        // Test Term Vectors\n        segInfoStat.termVectorStatus = testTermVectors(info, reader, nf);\n        \n        segInfoStat.docValuesStatus = testDocValues(info, reader);\n\n        // Rethrow the first exception we encountered\n        //  This will cause stats for failed segments to be incremented properly\n        if (segInfoStat.fieldNormStatus.error != null) {\n          throw new RuntimeException(\"Field Norm test failed\");\n        } else if (segInfoStat.termIndexStatus.error != null) {\n          throw new RuntimeException(\"Term Index test failed\");\n        } else if (segInfoStat.storedFieldStatus.error != null) {\n          throw new RuntimeException(\"Stored Field test failed\");\n        } else if (segInfoStat.termVectorStatus.error != null) {\n          throw new RuntimeException(\"Term Vector test failed\");\n        }  else if (segInfoStat.docValuesStatus.error != null) {\n          throw new RuntimeException(\"DocValues test failed\");\n        }\n\n        msg(\"\");\n\n      } catch (Throwable t) {\n        msg(\"FAILED\");\n        String comment;\n        comment = \"fixIndex() would remove reference to this segment\";\n        msg(\"    WARNING: \" + comment + \"; full exception:\");\n        if (infoStream != null)\n          t.printStackTrace(infoStream);\n        msg(\"\");\n        result.totLoseDocCount += toLoseDocCount;\n        result.numBadSegments++;\n        continue;\n      } finally {\n        if (reader != null)\n          reader.close();\n      }\n\n      // Keeper\n      result.newSegments.add((SegmentInfo) info.clone());\n    }\n\n    if (0 == result.numBadSegments) {\n      result.clean = true;\n    } else\n      msg(\"WARNING: \" + result.numBadSegments + \" broken segments (containing \" + result.totLoseDocCount + \" documents) detected\");\n\n    if ( ! (result.validCounter = (result.maxSegmentName < sis.counter))) {\n      result.clean = false;\n      result.newSegments.counter = result.maxSegmentName + 1; \n      msg(\"ERROR: Next segment name counter \" + sis.counter + \" is not greater than max segment name \" + result.maxSegmentName);\n    }\n    \n    if (result.clean) {\n      msg(\"No problems were detected with this index.\\n\");\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /** Returns a {@link Status} instance detailing\n   *  the state of the index.\n   * \n   *  @param onlySegments list of specific segment names to check\n   *\n   *  <p>As this method checks every byte in the specified\n   *  segments, on a large index it can take quite a long\n   *  time to run.\n   *\n   *  <p><b>WARNING</b>: make sure\n   *  you only call this when the index is not opened by any\n   *  writer. */\n  public Status checkIndex(List<String> onlySegments) throws IOException {\n    NumberFormat nf = NumberFormat.getInstance();\n    SegmentInfos sis = new SegmentInfos();\n    Status result = new Status();\n    result.dir = dir;\n    try {\n      sis.read(dir);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read any segments file in directory\");\n      result.missingSegments = true;\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      return result;\n    }\n\n    // find the oldest and newest segment versions\n    String oldest = Integer.toString(Integer.MAX_VALUE), newest = Integer.toString(Integer.MIN_VALUE);\n    String oldSegs = null;\n    boolean foundNonNullVersion = false;\n    Comparator<String> versionComparator = StringHelper.getVersionComparator();\n    for (SegmentInfo si : sis) {\n      String version = si.getVersion();\n      if (version == null) {\n        // pre-3.1 segment\n        oldSegs = \"pre-3.1\";\n      } else {\n        foundNonNullVersion = true;\n        if (versionComparator.compare(version, oldest) < 0) {\n          oldest = version;\n        }\n        if (versionComparator.compare(version, newest) > 0) {\n          newest = version;\n        }\n      }\n    }\n\n    final int numSegments = sis.size();\n    final String segmentsFileName = sis.getCurrentSegmentFileName();\n    // note: we only read the format byte (required preamble) here!\n    IndexInput input = null;\n    try {\n      input = dir.openInput(segmentsFileName, IOContext.DEFAULT);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not open segments file in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.cantOpenSegments = true;\n      return result;\n    }\n    int format = 0;\n    try {\n      format = input.readInt();\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read segment file version in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.missingSegmentVersion = true;\n      return result;\n    } finally {\n      if (input != null)\n        input.close();\n    }\n\n    String sFormat = \"\";\n    boolean skip = false;\n\n    if (format == DefaultSegmentInfosWriter.FORMAT_DIAGNOSTICS) {\n      sFormat = \"FORMAT_DIAGNOSTICS [Lucene 2.9]\";\n    } else if (format == DefaultSegmentInfosWriter.FORMAT_HAS_VECTORS) {\n      sFormat = \"FORMAT_HAS_VECTORS [Lucene 3.1]\";\n    } else if (format == DefaultSegmentInfosWriter.FORMAT_3_1) {\n      sFormat = \"FORMAT_3_1 [Lucene 3.1+]\";\n    } else if (format == DefaultSegmentInfosWriter.FORMAT_4_0) {\n      sFormat = \"FORMAT_4_0 [Lucene 4.0]\";\n    } else if (format == DefaultSegmentInfosWriter.FORMAT_CURRENT) {\n      throw new RuntimeException(\"BUG: You should update this tool!\");\n    } else if (format < DefaultSegmentInfosWriter.FORMAT_CURRENT) {\n      sFormat = \"int=\" + format + \" [newer version of Lucene than this tool supports]\";\n      skip = true;\n    } else if (format > DefaultSegmentInfosWriter.FORMAT_MINIMUM) {\n      sFormat = \"int=\" + format + \" [older version of Lucene than this tool supports]\";\n      skip = true;\n    }\n\n    result.segmentsFileName = segmentsFileName;\n    result.numSegments = numSegments;\n    result.segmentFormat = sFormat;\n    result.userData = sis.getUserData();\n    String userDataString;\n    if (sis.getUserData().size() > 0) {\n      userDataString = \" userData=\" + sis.getUserData();\n    } else {\n      userDataString = \"\";\n    }\n\n    String versionString = null;\n    if (oldSegs != null) {\n      if (foundNonNullVersion) {\n        versionString = \"versions=[\" + oldSegs + \" .. \" + newest + \"]\";\n      } else {\n        versionString = \"version=\" + oldSegs;\n      }\n    } else {\n      versionString = oldest.equals(newest) ? ( \"version=\" + oldest ) : (\"versions=[\" + oldest + \" .. \" + newest + \"]\");\n    }\n\n    msg(\"Segments file=\" + segmentsFileName + \" numSegments=\" + numSegments\n        + \" \" + versionString + \" format=\" + sFormat + userDataString);\n\n    if (onlySegments != null) {\n      result.partial = true;\n      if (infoStream != null)\n        infoStream.print(\"\\nChecking only these segments:\");\n      for (String s : onlySegments) {\n        if (infoStream != null)\n          infoStream.print(\" \" + s);\n      }\n      result.segmentsChecked.addAll(onlySegments);\n      msg(\":\");\n    }\n\n    if (skip) {\n      msg(\"\\nERROR: this index appears to be created by a newer version of Lucene than this tool was compiled on; please re-compile this tool on the matching version of Lucene; exiting\");\n      result.toolOutOfDate = true;\n      return result;\n    }\n\n\n    result.newSegments = (SegmentInfos) sis.clone();\n    result.newSegments.clear();\n    result.maxSegmentName = -1;\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = sis.info(i);\n      int segmentName = Integer.parseInt(info.name.substring(1), Character.MAX_RADIX);\n      if (segmentName > result.maxSegmentName) {\n        result.maxSegmentName = segmentName;\n      }\n      if (onlySegments != null && !onlySegments.contains(info.name))\n        continue;\n      Status.SegmentInfoStatus segInfoStat = new Status.SegmentInfoStatus();\n      result.segmentInfos.add(segInfoStat);\n      msg(\"  \" + (1+i) + \" of \" + numSegments + \": name=\" + info.name + \" docCount=\" + info.docCount);\n      segInfoStat.name = info.name;\n      segInfoStat.docCount = info.docCount;\n\n      int toLoseDocCount = info.docCount;\n\n      SegmentReader reader = null;\n\n      try {\n        final Codec codec = info.getCodec();\n        msg(\"    codec=\" + codec);\n        segInfoStat.codec = codec;\n        msg(\"    compound=\" + info.getUseCompoundFile());\n        segInfoStat.compound = info.getUseCompoundFile();\n        msg(\"    hasProx=\" + info.getHasProx());\n        segInfoStat.hasProx = info.getHasProx();\n        msg(\"    numFiles=\" + info.files().size());\n        segInfoStat.numFiles = info.files().size();\n        segInfoStat.sizeMB = info.sizeInBytes()/(1024.*1024.);\n        msg(\"    size (MB)=\" + nf.format(segInfoStat.sizeMB));\n        Map<String,String> diagnostics = info.getDiagnostics();\n        segInfoStat.diagnostics = diagnostics;\n        if (diagnostics.size() > 0) {\n          msg(\"    diagnostics = \" + diagnostics);\n        }\n\n        final int docStoreOffset = info.getDocStoreOffset();\n        if (docStoreOffset != -1) {\n          msg(\"    docStoreOffset=\" + docStoreOffset);\n          segInfoStat.docStoreOffset = docStoreOffset;\n          msg(\"    docStoreSegment=\" + info.getDocStoreSegment());\n          segInfoStat.docStoreSegment = info.getDocStoreSegment();\n          msg(\"    docStoreIsCompoundFile=\" + info.getDocStoreIsCompoundFile());\n          segInfoStat.docStoreCompoundFile = info.getDocStoreIsCompoundFile();\n        }\n\n        final String delFileName = info.getDelFileName();\n        if (delFileName == null){\n          msg(\"    no deletions\");\n          segInfoStat.hasDeletions = false;\n        }\n        else{\n          msg(\"    has deletions [delFileName=\" + delFileName + \"]\");\n          segInfoStat.hasDeletions = true;\n          segInfoStat.deletionsFileName = delFileName;\n        }\n        if (infoStream != null)\n          infoStream.print(\"    test: open reader.........\");\n        reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, IOContext.DEFAULT);\n\n        segInfoStat.openReaderPassed = true;\n\n        final int numDocs = reader.numDocs();\n        toLoseDocCount = numDocs;\n        if (reader.hasDeletions()) {\n          if (reader.liveDocs.count() != info.docCount - info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + (info.docCount - info.getDelCount()) + \" vs reader=\" + reader.liveDocs.count());\n          }\n          if ((info.docCount-reader.liveDocs.count()) > reader.maxDoc()) {\n            throw new RuntimeException(\"too many deleted docs: maxDoc()=\" + reader.maxDoc() + \" vs del count=\" + (info.docCount-reader.liveDocs.count()));\n          }\n          if (info.docCount - numDocs != info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          segInfoStat.numDeleted = info.docCount - numDocs;\n          msg(\"OK [\" + (segInfoStat.numDeleted) + \" deleted docs]\");\n        } else {\n          if (info.getDelCount() != 0) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          msg(\"OK\");\n        }\n        if (reader.maxDoc() != info.docCount)\n          throw new RuntimeException(\"SegmentReader.maxDoc() \" + reader.maxDoc() + \" != SegmentInfos.docCount \" + info.docCount);\n\n        // Test getFieldNames()\n        if (infoStream != null) {\n          infoStream.print(\"    test: fields..............\");\n        }         \n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        msg(\"OK [\" + fieldNames.size() + \" fields]\");\n        segInfoStat.numFields = fieldNames.size();\n        \n        // Test Field Norms\n        segInfoStat.fieldNormStatus = testFieldNorms(fieldNames, reader);\n\n        // Test the Term Index\n        segInfoStat.termIndexStatus = testTermIndex(reader);\n\n        // Test Stored Fields\n        segInfoStat.storedFieldStatus = testStoredFields(info, reader, nf);\n\n        // Test Term Vectors\n        segInfoStat.termVectorStatus = testTermVectors(info, reader, nf);\n        \n        segInfoStat.docValuesStatus = testDocValues(info, reader);\n\n        // Rethrow the first exception we encountered\n        //  This will cause stats for failed segments to be incremented properly\n        if (segInfoStat.fieldNormStatus.error != null) {\n          throw new RuntimeException(\"Field Norm test failed\");\n        } else if (segInfoStat.termIndexStatus.error != null) {\n          throw new RuntimeException(\"Term Index test failed\");\n        } else if (segInfoStat.storedFieldStatus.error != null) {\n          throw new RuntimeException(\"Stored Field test failed\");\n        } else if (segInfoStat.termVectorStatus.error != null) {\n          throw new RuntimeException(\"Term Vector test failed\");\n        }  else if (segInfoStat.docValuesStatus.error != null) {\n          throw new RuntimeException(\"DocValues test failed\");\n        }\n\n        msg(\"\");\n\n      } catch (Throwable t) {\n        msg(\"FAILED\");\n        String comment;\n        comment = \"fixIndex() would remove reference to this segment\";\n        msg(\"    WARNING: \" + comment + \"; full exception:\");\n        if (infoStream != null)\n          t.printStackTrace(infoStream);\n        msg(\"\");\n        result.totLoseDocCount += toLoseDocCount;\n        result.numBadSegments++;\n        continue;\n      } finally {\n        if (reader != null)\n          reader.close();\n      }\n\n      // Keeper\n      result.newSegments.add((SegmentInfo) info.clone());\n    }\n\n    if (0 == result.numBadSegments) {\n      result.clean = true;\n    } else\n      msg(\"WARNING: \" + result.numBadSegments + \" broken segments (containing \" + result.totLoseDocCount + \" documents) detected\");\n\n    if ( ! (result.validCounter = (result.maxSegmentName < sis.counter))) {\n      result.clean = false;\n      result.newSegments.counter = result.maxSegmentName + 1; \n      msg(\"ERROR: Next segment name counter \" + sis.counter + \" is not greater than max segment name \" + result.maxSegmentName);\n    }\n    \n    if (result.clean) {\n      msg(\"No problems were detected with this index.\\n\");\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cb4972c6aaf6c714c8f5957b5aeb14dcce34b75f","date":1323210518,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CheckIndex#checkIndex(List[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CheckIndex#checkIndex(List[String]).mjava","sourceNew":"  /** Returns a {@link Status} instance detailing\n   *  the state of the index.\n   * \n   *  @param onlySegments list of specific segment names to check\n   *\n   *  <p>As this method checks every byte in the specified\n   *  segments, on a large index it can take quite a long\n   *  time to run.\n   *\n   *  <p><b>WARNING</b>: make sure\n   *  you only call this when the index is not opened by any\n   *  writer. */\n  public Status checkIndex(List<String> onlySegments) throws IOException {\n    NumberFormat nf = NumberFormat.getInstance();\n    SegmentInfos sis = new SegmentInfos();\n    Status result = new Status();\n    result.dir = dir;\n    try {\n      sis.read(dir);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read any segments file in directory\");\n      result.missingSegments = true;\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      return result;\n    }\n\n    // find the oldest and newest segment versions\n    String oldest = Integer.toString(Integer.MAX_VALUE), newest = Integer.toString(Integer.MIN_VALUE);\n    String oldSegs = null;\n    boolean foundNonNullVersion = false;\n    Comparator<String> versionComparator = StringHelper.getVersionComparator();\n    for (SegmentInfo si : sis) {\n      String version = si.getVersion();\n      if (version == null) {\n        // pre-3.1 segment\n        oldSegs = \"pre-3.1\";\n      } else {\n        foundNonNullVersion = true;\n        if (versionComparator.compare(version, oldest) < 0) {\n          oldest = version;\n        }\n        if (versionComparator.compare(version, newest) > 0) {\n          newest = version;\n        }\n      }\n    }\n\n    final int numSegments = sis.size();\n    final String segmentsFileName = sis.getCurrentSegmentFileName();\n    // note: we only read the format byte (required preamble) here!\n    IndexInput input = null;\n    try {\n      input = dir.openInput(segmentsFileName, IOContext.DEFAULT);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not open segments file in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.cantOpenSegments = true;\n      return result;\n    }\n    int format = 0;\n    try {\n      format = input.readInt();\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read segment file version in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.missingSegmentVersion = true;\n      return result;\n    } finally {\n      if (input != null)\n        input.close();\n    }\n\n    String sFormat = \"\";\n    boolean skip = false;\n\n    if (format == SegmentInfos.FORMAT_DIAGNOSTICS) {\n      sFormat = \"FORMAT_DIAGNOSTICS [Lucene 2.9]\";\n    } else if (format == SegmentInfos.FORMAT_HAS_VECTORS) {\n      sFormat = \"FORMAT_HAS_VECTORS [Lucene 3.1]\";\n    } else if (format == SegmentInfos.FORMAT_3_1) {\n      sFormat = \"FORMAT_3_1 [Lucene 3.1+]\";\n    } else if (format == SegmentInfos.FORMAT_4_0) {\n      sFormat = \"FORMAT_4_0 [Lucene 4.0]\";\n    } else if (format == SegmentInfos.FORMAT_CURRENT) {\n      throw new RuntimeException(\"BUG: You should update this tool!\");\n    } else if (format < SegmentInfos.FORMAT_CURRENT) {\n      sFormat = \"int=\" + format + \" [newer version of Lucene than this tool supports]\";\n      skip = true;\n    } else if (format > SegmentInfos.FORMAT_MINIMUM) {\n      sFormat = \"int=\" + format + \" [older version of Lucene than this tool supports]\";\n      skip = true;\n    }\n\n    result.segmentsFileName = segmentsFileName;\n    result.numSegments = numSegments;\n    result.segmentFormat = sFormat;\n    result.userData = sis.getUserData();\n    String userDataString;\n    if (sis.getUserData().size() > 0) {\n      userDataString = \" userData=\" + sis.getUserData();\n    } else {\n      userDataString = \"\";\n    }\n\n    String versionString = null;\n    if (oldSegs != null) {\n      if (foundNonNullVersion) {\n        versionString = \"versions=[\" + oldSegs + \" .. \" + newest + \"]\";\n      } else {\n        versionString = \"version=\" + oldSegs;\n      }\n    } else {\n      versionString = oldest.equals(newest) ? ( \"version=\" + oldest ) : (\"versions=[\" + oldest + \" .. \" + newest + \"]\");\n    }\n\n    msg(\"Segments file=\" + segmentsFileName + \" numSegments=\" + numSegments\n        + \" \" + versionString + \" format=\" + sFormat + userDataString);\n\n    if (onlySegments != null) {\n      result.partial = true;\n      if (infoStream != null)\n        infoStream.print(\"\\nChecking only these segments:\");\n      for (String s : onlySegments) {\n        if (infoStream != null)\n          infoStream.print(\" \" + s);\n      }\n      result.segmentsChecked.addAll(onlySegments);\n      msg(\":\");\n    }\n\n    if (skip) {\n      msg(\"\\nERROR: this index appears to be created by a newer version of Lucene than this tool was compiled on; please re-compile this tool on the matching version of Lucene; exiting\");\n      result.toolOutOfDate = true;\n      return result;\n    }\n\n\n    result.newSegments = (SegmentInfos) sis.clone();\n    result.newSegments.clear();\n    result.maxSegmentName = -1;\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = sis.info(i);\n      int segmentName = Integer.parseInt(info.name.substring(1), Character.MAX_RADIX);\n      if (segmentName > result.maxSegmentName) {\n        result.maxSegmentName = segmentName;\n      }\n      if (onlySegments != null && !onlySegments.contains(info.name))\n        continue;\n      Status.SegmentInfoStatus segInfoStat = new Status.SegmentInfoStatus();\n      result.segmentInfos.add(segInfoStat);\n      msg(\"  \" + (1+i) + \" of \" + numSegments + \": name=\" + info.name + \" docCount=\" + info.docCount);\n      segInfoStat.name = info.name;\n      segInfoStat.docCount = info.docCount;\n\n      int toLoseDocCount = info.docCount;\n\n      SegmentReader reader = null;\n\n      try {\n        final Codec codec = info.getCodec();\n        msg(\"    codec=\" + codec);\n        segInfoStat.codec = codec;\n        msg(\"    compound=\" + info.getUseCompoundFile());\n        segInfoStat.compound = info.getUseCompoundFile();\n        msg(\"    hasProx=\" + info.getHasProx());\n        segInfoStat.hasProx = info.getHasProx();\n        msg(\"    numFiles=\" + info.files().size());\n        segInfoStat.numFiles = info.files().size();\n        segInfoStat.sizeMB = info.sizeInBytes()/(1024.*1024.);\n        msg(\"    size (MB)=\" + nf.format(segInfoStat.sizeMB));\n        Map<String,String> diagnostics = info.getDiagnostics();\n        segInfoStat.diagnostics = diagnostics;\n        if (diagnostics.size() > 0) {\n          msg(\"    diagnostics = \" + diagnostics);\n        }\n\n        final int docStoreOffset = info.getDocStoreOffset();\n        if (docStoreOffset != -1) {\n          msg(\"    docStoreOffset=\" + docStoreOffset);\n          segInfoStat.docStoreOffset = docStoreOffset;\n          msg(\"    docStoreSegment=\" + info.getDocStoreSegment());\n          segInfoStat.docStoreSegment = info.getDocStoreSegment();\n          msg(\"    docStoreIsCompoundFile=\" + info.getDocStoreIsCompoundFile());\n          segInfoStat.docStoreCompoundFile = info.getDocStoreIsCompoundFile();\n        }\n\n        final String delFileName = info.getDelFileName();\n        if (delFileName == null){\n          msg(\"    no deletions\");\n          segInfoStat.hasDeletions = false;\n        }\n        else{\n          msg(\"    has deletions [delFileName=\" + delFileName + \"]\");\n          segInfoStat.hasDeletions = true;\n          segInfoStat.deletionsFileName = delFileName;\n        }\n        if (infoStream != null)\n          infoStream.print(\"    test: open reader.........\");\n        reader = SegmentReader.get(info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, IOContext.DEFAULT);\n\n        segInfoStat.openReaderPassed = true;\n\n        final int numDocs = reader.numDocs();\n        toLoseDocCount = numDocs;\n        if (reader.hasDeletions()) {\n          if (reader.liveDocs.count() != info.docCount - info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + (info.docCount - info.getDelCount()) + \" vs reader=\" + reader.liveDocs.count());\n          }\n          if ((info.docCount-reader.liveDocs.count()) > reader.maxDoc()) {\n            throw new RuntimeException(\"too many deleted docs: maxDoc()=\" + reader.maxDoc() + \" vs del count=\" + (info.docCount-reader.liveDocs.count()));\n          }\n          if (info.docCount - numDocs != info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          segInfoStat.numDeleted = info.docCount - numDocs;\n          msg(\"OK [\" + (segInfoStat.numDeleted) + \" deleted docs]\");\n        } else {\n          if (info.getDelCount() != 0) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          msg(\"OK\");\n        }\n        if (reader.maxDoc() != info.docCount)\n          throw new RuntimeException(\"SegmentReader.maxDoc() \" + reader.maxDoc() + \" != SegmentInfos.docCount \" + info.docCount);\n\n        // Test getFieldNames()\n        if (infoStream != null) {\n          infoStream.print(\"    test: fields..............\");\n        }         \n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        msg(\"OK [\" + fieldNames.size() + \" fields]\");\n        segInfoStat.numFields = fieldNames.size();\n        \n        // Test Field Norms\n        segInfoStat.fieldNormStatus = testFieldNorms(fieldNames, reader);\n\n        // Test the Term Index\n        segInfoStat.termIndexStatus = testTermIndex(reader);\n\n        // Test Stored Fields\n        segInfoStat.storedFieldStatus = testStoredFields(info, reader, nf);\n\n        // Test Term Vectors\n        segInfoStat.termVectorStatus = testTermVectors(info, reader, nf);\n        \n        segInfoStat.docValuesStatus = testDocValues(info, reader);\n\n        // Rethrow the first exception we encountered\n        //  This will cause stats for failed segments to be incremented properly\n        if (segInfoStat.fieldNormStatus.error != null) {\n          throw new RuntimeException(\"Field Norm test failed\");\n        } else if (segInfoStat.termIndexStatus.error != null) {\n          throw new RuntimeException(\"Term Index test failed\");\n        } else if (segInfoStat.storedFieldStatus.error != null) {\n          throw new RuntimeException(\"Stored Field test failed\");\n        } else if (segInfoStat.termVectorStatus.error != null) {\n          throw new RuntimeException(\"Term Vector test failed\");\n        }  else if (segInfoStat.docValuesStatus.error != null) {\n          throw new RuntimeException(\"DocValues test failed\");\n        }\n\n        msg(\"\");\n\n      } catch (Throwable t) {\n        msg(\"FAILED\");\n        String comment;\n        comment = \"fixIndex() would remove reference to this segment\";\n        msg(\"    WARNING: \" + comment + \"; full exception:\");\n        if (infoStream != null)\n          t.printStackTrace(infoStream);\n        msg(\"\");\n        result.totLoseDocCount += toLoseDocCount;\n        result.numBadSegments++;\n        continue;\n      } finally {\n        if (reader != null)\n          reader.close();\n      }\n\n      // Keeper\n      result.newSegments.add((SegmentInfo) info.clone());\n    }\n\n    if (0 == result.numBadSegments) {\n      result.clean = true;\n    } else\n      msg(\"WARNING: \" + result.numBadSegments + \" broken segments (containing \" + result.totLoseDocCount + \" documents) detected\");\n\n    if ( ! (result.validCounter = (result.maxSegmentName < sis.counter))) {\n      result.clean = false;\n      result.newSegments.counter = result.maxSegmentName + 1; \n      msg(\"ERROR: Next segment name counter \" + sis.counter + \" is not greater than max segment name \" + result.maxSegmentName);\n    }\n    \n    if (result.clean) {\n      msg(\"No problems were detected with this index.\\n\");\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /** Returns a {@link Status} instance detailing\n   *  the state of the index.\n   * \n   *  @param onlySegments list of specific segment names to check\n   *\n   *  <p>As this method checks every byte in the specified\n   *  segments, on a large index it can take quite a long\n   *  time to run.\n   *\n   *  <p><b>WARNING</b>: make sure\n   *  you only call this when the index is not opened by any\n   *  writer. */\n  public Status checkIndex(List<String> onlySegments) throws IOException {\n    NumberFormat nf = NumberFormat.getInstance();\n    SegmentInfos sis = new SegmentInfos();\n    Status result = new Status();\n    result.dir = dir;\n    try {\n      sis.read(dir);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read any segments file in directory\");\n      result.missingSegments = true;\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      return result;\n    }\n\n    // find the oldest and newest segment versions\n    String oldest = Integer.toString(Integer.MAX_VALUE), newest = Integer.toString(Integer.MIN_VALUE);\n    String oldSegs = null;\n    boolean foundNonNullVersion = false;\n    Comparator<String> versionComparator = StringHelper.getVersionComparator();\n    for (SegmentInfo si : sis) {\n      String version = si.getVersion();\n      if (version == null) {\n        // pre-3.1 segment\n        oldSegs = \"pre-3.1\";\n      } else {\n        foundNonNullVersion = true;\n        if (versionComparator.compare(version, oldest) < 0) {\n          oldest = version;\n        }\n        if (versionComparator.compare(version, newest) > 0) {\n          newest = version;\n        }\n      }\n    }\n\n    final int numSegments = sis.size();\n    final String segmentsFileName = sis.getCurrentSegmentFileName();\n    // note: we only read the format byte (required preamble) here!\n    IndexInput input = null;\n    try {\n      input = dir.openInput(segmentsFileName, IOContext.DEFAULT);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not open segments file in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.cantOpenSegments = true;\n      return result;\n    }\n    int format = 0;\n    try {\n      format = input.readInt();\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read segment file version in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.missingSegmentVersion = true;\n      return result;\n    } finally {\n      if (input != null)\n        input.close();\n    }\n\n    String sFormat = \"\";\n    boolean skip = false;\n\n    if (format == SegmentInfos.FORMAT_DIAGNOSTICS) {\n      sFormat = \"FORMAT_DIAGNOSTICS [Lucene 2.9]\";\n    } else if (format == SegmentInfos.FORMAT_HAS_VECTORS) {\n      sFormat = \"FORMAT_HAS_VECTORS [Lucene 3.1]\";\n    } else if (format == SegmentInfos.FORMAT_3_1) {\n      sFormat = \"FORMAT_3_1 [Lucene 3.1+]\";\n    } else if (format == SegmentInfos.FORMAT_4_0) {\n      sFormat = \"FORMAT_4_0 [Lucene 4.0]\";\n    } else if (format == SegmentInfos.FORMAT_CURRENT) {\n      throw new RuntimeException(\"BUG: You should update this tool!\");\n    } else if (format < SegmentInfos.FORMAT_CURRENT) {\n      sFormat = \"int=\" + format + \" [newer version of Lucene than this tool supports]\";\n      skip = true;\n    } else if (format > SegmentInfos.FORMAT_MINIMUM) {\n      sFormat = \"int=\" + format + \" [older version of Lucene than this tool supports]\";\n      skip = true;\n    }\n\n    result.segmentsFileName = segmentsFileName;\n    result.numSegments = numSegments;\n    result.segmentFormat = sFormat;\n    result.userData = sis.getUserData();\n    String userDataString;\n    if (sis.getUserData().size() > 0) {\n      userDataString = \" userData=\" + sis.getUserData();\n    } else {\n      userDataString = \"\";\n    }\n\n    String versionString = null;\n    if (oldSegs != null) {\n      if (foundNonNullVersion) {\n        versionString = \"versions=[\" + oldSegs + \" .. \" + newest + \"]\";\n      } else {\n        versionString = \"version=\" + oldSegs;\n      }\n    } else {\n      versionString = oldest.equals(newest) ? ( \"version=\" + oldest ) : (\"versions=[\" + oldest + \" .. \" + newest + \"]\");\n    }\n\n    msg(\"Segments file=\" + segmentsFileName + \" numSegments=\" + numSegments\n        + \" \" + versionString + \" format=\" + sFormat + userDataString);\n\n    if (onlySegments != null) {\n      result.partial = true;\n      if (infoStream != null)\n        infoStream.print(\"\\nChecking only these segments:\");\n      for (String s : onlySegments) {\n        if (infoStream != null)\n          infoStream.print(\" \" + s);\n      }\n      result.segmentsChecked.addAll(onlySegments);\n      msg(\":\");\n    }\n\n    if (skip) {\n      msg(\"\\nERROR: this index appears to be created by a newer version of Lucene than this tool was compiled on; please re-compile this tool on the matching version of Lucene; exiting\");\n      result.toolOutOfDate = true;\n      return result;\n    }\n\n\n    result.newSegments = (SegmentInfos) sis.clone();\n    result.newSegments.clear();\n    result.maxSegmentName = -1;\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = sis.info(i);\n      int segmentName = Integer.parseInt(info.name.substring(1), Character.MAX_RADIX);\n      if (segmentName > result.maxSegmentName) {\n        result.maxSegmentName = segmentName;\n      }\n      if (onlySegments != null && !onlySegments.contains(info.name))\n        continue;\n      Status.SegmentInfoStatus segInfoStat = new Status.SegmentInfoStatus();\n      result.segmentInfos.add(segInfoStat);\n      msg(\"  \" + (1+i) + \" of \" + numSegments + \": name=\" + info.name + \" docCount=\" + info.docCount);\n      segInfoStat.name = info.name;\n      segInfoStat.docCount = info.docCount;\n\n      int toLoseDocCount = info.docCount;\n\n      SegmentReader reader = null;\n\n      try {\n        final Codec codec = info.getCodec();\n        msg(\"    codec=\" + codec);\n        segInfoStat.codec = codec;\n        msg(\"    compound=\" + info.getUseCompoundFile());\n        segInfoStat.compound = info.getUseCompoundFile();\n        msg(\"    hasProx=\" + info.getHasProx());\n        segInfoStat.hasProx = info.getHasProx();\n        msg(\"    numFiles=\" + info.files().size());\n        segInfoStat.numFiles = info.files().size();\n        segInfoStat.sizeMB = info.sizeInBytes()/(1024.*1024.);\n        msg(\"    size (MB)=\" + nf.format(segInfoStat.sizeMB));\n        Map<String,String> diagnostics = info.getDiagnostics();\n        segInfoStat.diagnostics = diagnostics;\n        if (diagnostics.size() > 0) {\n          msg(\"    diagnostics = \" + diagnostics);\n        }\n\n        final int docStoreOffset = info.getDocStoreOffset();\n        if (docStoreOffset != -1) {\n          msg(\"    docStoreOffset=\" + docStoreOffset);\n          segInfoStat.docStoreOffset = docStoreOffset;\n          msg(\"    docStoreSegment=\" + info.getDocStoreSegment());\n          segInfoStat.docStoreSegment = info.getDocStoreSegment();\n          msg(\"    docStoreIsCompoundFile=\" + info.getDocStoreIsCompoundFile());\n          segInfoStat.docStoreCompoundFile = info.getDocStoreIsCompoundFile();\n        }\n\n        final String delFileName = info.getDelFileName();\n        if (delFileName == null){\n          msg(\"    no deletions\");\n          segInfoStat.hasDeletions = false;\n        }\n        else{\n          msg(\"    has deletions [delFileName=\" + delFileName + \"]\");\n          segInfoStat.hasDeletions = true;\n          segInfoStat.deletionsFileName = delFileName;\n        }\n        if (infoStream != null)\n          infoStream.print(\"    test: open reader.........\");\n        reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, IOContext.DEFAULT);\n\n        segInfoStat.openReaderPassed = true;\n\n        final int numDocs = reader.numDocs();\n        toLoseDocCount = numDocs;\n        if (reader.hasDeletions()) {\n          if (reader.liveDocs.count() != info.docCount - info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + (info.docCount - info.getDelCount()) + \" vs reader=\" + reader.liveDocs.count());\n          }\n          if ((info.docCount-reader.liveDocs.count()) > reader.maxDoc()) {\n            throw new RuntimeException(\"too many deleted docs: maxDoc()=\" + reader.maxDoc() + \" vs del count=\" + (info.docCount-reader.liveDocs.count()));\n          }\n          if (info.docCount - numDocs != info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          segInfoStat.numDeleted = info.docCount - numDocs;\n          msg(\"OK [\" + (segInfoStat.numDeleted) + \" deleted docs]\");\n        } else {\n          if (info.getDelCount() != 0) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          msg(\"OK\");\n        }\n        if (reader.maxDoc() != info.docCount)\n          throw new RuntimeException(\"SegmentReader.maxDoc() \" + reader.maxDoc() + \" != SegmentInfos.docCount \" + info.docCount);\n\n        // Test getFieldNames()\n        if (infoStream != null) {\n          infoStream.print(\"    test: fields..............\");\n        }         \n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        msg(\"OK [\" + fieldNames.size() + \" fields]\");\n        segInfoStat.numFields = fieldNames.size();\n        \n        // Test Field Norms\n        segInfoStat.fieldNormStatus = testFieldNorms(fieldNames, reader);\n\n        // Test the Term Index\n        segInfoStat.termIndexStatus = testTermIndex(reader);\n\n        // Test Stored Fields\n        segInfoStat.storedFieldStatus = testStoredFields(info, reader, nf);\n\n        // Test Term Vectors\n        segInfoStat.termVectorStatus = testTermVectors(info, reader, nf);\n        \n        segInfoStat.docValuesStatus = testDocValues(info, reader);\n\n        // Rethrow the first exception we encountered\n        //  This will cause stats for failed segments to be incremented properly\n        if (segInfoStat.fieldNormStatus.error != null) {\n          throw new RuntimeException(\"Field Norm test failed\");\n        } else if (segInfoStat.termIndexStatus.error != null) {\n          throw new RuntimeException(\"Term Index test failed\");\n        } else if (segInfoStat.storedFieldStatus.error != null) {\n          throw new RuntimeException(\"Stored Field test failed\");\n        } else if (segInfoStat.termVectorStatus.error != null) {\n          throw new RuntimeException(\"Term Vector test failed\");\n        }  else if (segInfoStat.docValuesStatus.error != null) {\n          throw new RuntimeException(\"DocValues test failed\");\n        }\n\n        msg(\"\");\n\n      } catch (Throwable t) {\n        msg(\"FAILED\");\n        String comment;\n        comment = \"fixIndex() would remove reference to this segment\";\n        msg(\"    WARNING: \" + comment + \"; full exception:\");\n        if (infoStream != null)\n          t.printStackTrace(infoStream);\n        msg(\"\");\n        result.totLoseDocCount += toLoseDocCount;\n        result.numBadSegments++;\n        continue;\n      } finally {\n        if (reader != null)\n          reader.close();\n      }\n\n      // Keeper\n      result.newSegments.add((SegmentInfo) info.clone());\n    }\n\n    if (0 == result.numBadSegments) {\n      result.clean = true;\n    } else\n      msg(\"WARNING: \" + result.numBadSegments + \" broken segments (containing \" + result.totLoseDocCount + \" documents) detected\");\n\n    if ( ! (result.validCounter = (result.maxSegmentName < sis.counter))) {\n      result.clean = false;\n      result.newSegments.counter = result.maxSegmentName + 1; \n      msg(\"ERROR: Next segment name counter \" + sis.counter + \" is not greater than max segment name \" + result.maxSegmentName);\n    }\n    \n    if (result.clean) {\n      msg(\"No problems were detected with this index.\\n\");\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/CheckIndex#checkIndex(List[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CheckIndex#checkIndex(List[String]).mjava","sourceNew":"  /** Returns a {@link Status} instance detailing\n   *  the state of the index.\n   * \n   *  @param onlySegments list of specific segment names to check\n   *\n   *  <p>As this method checks every byte in the specified\n   *  segments, on a large index it can take quite a long\n   *  time to run.\n   *\n   *  <p><b>WARNING</b>: make sure\n   *  you only call this when the index is not opened by any\n   *  writer. */\n  public Status checkIndex(List<String> onlySegments) throws IOException {\n    NumberFormat nf = NumberFormat.getInstance();\n    SegmentInfos sis = new SegmentInfos();\n    Status result = new Status();\n    result.dir = dir;\n    try {\n      sis.read(dir);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read any segments file in directory\");\n      result.missingSegments = true;\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      return result;\n    }\n\n    // find the oldest and newest segment versions\n    String oldest = Integer.toString(Integer.MAX_VALUE), newest = Integer.toString(Integer.MIN_VALUE);\n    String oldSegs = null;\n    boolean foundNonNullVersion = false;\n    Comparator<String> versionComparator = StringHelper.getVersionComparator();\n    for (SegmentInfo si : sis) {\n      String version = si.getVersion();\n      if (version == null) {\n        // pre-3.1 segment\n        oldSegs = \"pre-3.1\";\n      } else {\n        foundNonNullVersion = true;\n        if (versionComparator.compare(version, oldest) < 0) {\n          oldest = version;\n        }\n        if (versionComparator.compare(version, newest) > 0) {\n          newest = version;\n        }\n      }\n    }\n\n    final int numSegments = sis.size();\n    final String segmentsFileName = sis.getCurrentSegmentFileName();\n    // note: we only read the format byte (required preamble) here!\n    IndexInput input = null;\n    try {\n      input = dir.openInput(segmentsFileName, IOContext.DEFAULT);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not open segments file in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.cantOpenSegments = true;\n      return result;\n    }\n    int format = 0;\n    try {\n      format = input.readInt();\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read segment file version in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.missingSegmentVersion = true;\n      return result;\n    } finally {\n      if (input != null)\n        input.close();\n    }\n\n    String sFormat = \"\";\n    boolean skip = false;\n\n    if (format == SegmentInfos.FORMAT_DIAGNOSTICS) {\n      sFormat = \"FORMAT_DIAGNOSTICS [Lucene 2.9]\";\n    } else if (format == SegmentInfos.FORMAT_HAS_VECTORS) {\n      sFormat = \"FORMAT_HAS_VECTORS [Lucene 3.1]\";\n    } else if (format == SegmentInfos.FORMAT_3_1) {\n      sFormat = \"FORMAT_3_1 [Lucene 3.1+]\";\n    } else if (format == SegmentInfos.FORMAT_4_0) {\n      sFormat = \"FORMAT_4_0 [Lucene 4.0]\";\n    } else if (format == SegmentInfos.FORMAT_CURRENT) {\n      throw new RuntimeException(\"BUG: You should update this tool!\");\n    } else if (format < SegmentInfos.FORMAT_CURRENT) {\n      sFormat = \"int=\" + format + \" [newer version of Lucene than this tool supports]\";\n      skip = true;\n    } else if (format > SegmentInfos.FORMAT_MINIMUM) {\n      sFormat = \"int=\" + format + \" [older version of Lucene than this tool supports]\";\n      skip = true;\n    }\n\n    result.segmentsFileName = segmentsFileName;\n    result.numSegments = numSegments;\n    result.segmentFormat = sFormat;\n    result.userData = sis.getUserData();\n    String userDataString;\n    if (sis.getUserData().size() > 0) {\n      userDataString = \" userData=\" + sis.getUserData();\n    } else {\n      userDataString = \"\";\n    }\n\n    String versionString = null;\n    if (oldSegs != null) {\n      if (foundNonNullVersion) {\n        versionString = \"versions=[\" + oldSegs + \" .. \" + newest + \"]\";\n      } else {\n        versionString = \"version=\" + oldSegs;\n      }\n    } else {\n      versionString = oldest.equals(newest) ? ( \"version=\" + oldest ) : (\"versions=[\" + oldest + \" .. \" + newest + \"]\");\n    }\n\n    msg(\"Segments file=\" + segmentsFileName + \" numSegments=\" + numSegments\n        + \" \" + versionString + \" format=\" + sFormat + userDataString);\n\n    if (onlySegments != null) {\n      result.partial = true;\n      if (infoStream != null)\n        infoStream.print(\"\\nChecking only these segments:\");\n      for (String s : onlySegments) {\n        if (infoStream != null)\n          infoStream.print(\" \" + s);\n      }\n      result.segmentsChecked.addAll(onlySegments);\n      msg(\":\");\n    }\n\n    if (skip) {\n      msg(\"\\nERROR: this index appears to be created by a newer version of Lucene than this tool was compiled on; please re-compile this tool on the matching version of Lucene; exiting\");\n      result.toolOutOfDate = true;\n      return result;\n    }\n\n\n    result.newSegments = (SegmentInfos) sis.clone();\n    result.newSegments.clear();\n    result.maxSegmentName = -1;\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = sis.info(i);\n      int segmentName = Integer.parseInt(info.name.substring(1), Character.MAX_RADIX);\n      if (segmentName > result.maxSegmentName) {\n        result.maxSegmentName = segmentName;\n      }\n      if (onlySegments != null && !onlySegments.contains(info.name))\n        continue;\n      Status.SegmentInfoStatus segInfoStat = new Status.SegmentInfoStatus();\n      result.segmentInfos.add(segInfoStat);\n      msg(\"  \" + (1+i) + \" of \" + numSegments + \": name=\" + info.name + \" docCount=\" + info.docCount);\n      segInfoStat.name = info.name;\n      segInfoStat.docCount = info.docCount;\n\n      int toLoseDocCount = info.docCount;\n\n      SegmentReader reader = null;\n\n      try {\n        final Codec codec = info.getCodec();\n        msg(\"    codec=\" + codec);\n        segInfoStat.codec = codec;\n        msg(\"    compound=\" + info.getUseCompoundFile());\n        segInfoStat.compound = info.getUseCompoundFile();\n        msg(\"    hasProx=\" + info.getHasProx());\n        segInfoStat.hasProx = info.getHasProx();\n        msg(\"    numFiles=\" + info.files().size());\n        segInfoStat.numFiles = info.files().size();\n        segInfoStat.sizeMB = info.sizeInBytes()/(1024.*1024.);\n        msg(\"    size (MB)=\" + nf.format(segInfoStat.sizeMB));\n        Map<String,String> diagnostics = info.getDiagnostics();\n        segInfoStat.diagnostics = diagnostics;\n        if (diagnostics.size() > 0) {\n          msg(\"    diagnostics = \" + diagnostics);\n        }\n\n        final int docStoreOffset = info.getDocStoreOffset();\n        if (docStoreOffset != -1) {\n          msg(\"    docStoreOffset=\" + docStoreOffset);\n          segInfoStat.docStoreOffset = docStoreOffset;\n          msg(\"    docStoreSegment=\" + info.getDocStoreSegment());\n          segInfoStat.docStoreSegment = info.getDocStoreSegment();\n          msg(\"    docStoreIsCompoundFile=\" + info.getDocStoreIsCompoundFile());\n          segInfoStat.docStoreCompoundFile = info.getDocStoreIsCompoundFile();\n        }\n\n        final String delFileName = info.getDelFileName();\n        if (delFileName == null){\n          msg(\"    no deletions\");\n          segInfoStat.hasDeletions = false;\n        }\n        else{\n          msg(\"    has deletions [delFileName=\" + delFileName + \"]\");\n          segInfoStat.hasDeletions = true;\n          segInfoStat.deletionsFileName = delFileName;\n        }\n        if (infoStream != null)\n          infoStream.print(\"    test: open reader.........\");\n        reader = SegmentReader.get(info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, IOContext.DEFAULT);\n\n        segInfoStat.openReaderPassed = true;\n\n        final int numDocs = reader.numDocs();\n        toLoseDocCount = numDocs;\n        if (reader.hasDeletions()) {\n          if (reader.liveDocs.count() != info.docCount - info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + (info.docCount - info.getDelCount()) + \" vs reader=\" + reader.liveDocs.count());\n          }\n          if ((info.docCount-reader.liveDocs.count()) > reader.maxDoc()) {\n            throw new RuntimeException(\"too many deleted docs: maxDoc()=\" + reader.maxDoc() + \" vs del count=\" + (info.docCount-reader.liveDocs.count()));\n          }\n          if (info.docCount - numDocs != info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          segInfoStat.numDeleted = info.docCount - numDocs;\n          msg(\"OK [\" + (segInfoStat.numDeleted) + \" deleted docs]\");\n        } else {\n          if (info.getDelCount() != 0) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          msg(\"OK\");\n        }\n        if (reader.maxDoc() != info.docCount)\n          throw new RuntimeException(\"SegmentReader.maxDoc() \" + reader.maxDoc() + \" != SegmentInfos.docCount \" + info.docCount);\n\n        // Test getFieldNames()\n        if (infoStream != null) {\n          infoStream.print(\"    test: fields..............\");\n        }         \n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        msg(\"OK [\" + fieldNames.size() + \" fields]\");\n        segInfoStat.numFields = fieldNames.size();\n        \n        // Test Field Norms\n        segInfoStat.fieldNormStatus = testFieldNorms(fieldNames, reader);\n\n        // Test the Term Index\n        segInfoStat.termIndexStatus = testTermIndex(reader);\n\n        // Test Stored Fields\n        segInfoStat.storedFieldStatus = testStoredFields(info, reader, nf);\n\n        // Test Term Vectors\n        segInfoStat.termVectorStatus = testTermVectors(info, reader, nf);\n        \n        segInfoStat.docValuesStatus = testDocValues(info, reader);\n\n        // Rethrow the first exception we encountered\n        //  This will cause stats for failed segments to be incremented properly\n        if (segInfoStat.fieldNormStatus.error != null) {\n          throw new RuntimeException(\"Field Norm test failed\");\n        } else if (segInfoStat.termIndexStatus.error != null) {\n          throw new RuntimeException(\"Term Index test failed\");\n        } else if (segInfoStat.storedFieldStatus.error != null) {\n          throw new RuntimeException(\"Stored Field test failed\");\n        } else if (segInfoStat.termVectorStatus.error != null) {\n          throw new RuntimeException(\"Term Vector test failed\");\n        }  else if (segInfoStat.docValuesStatus.error != null) {\n          throw new RuntimeException(\"DocValues test failed\");\n        }\n\n        msg(\"\");\n\n      } catch (Throwable t) {\n        msg(\"FAILED\");\n        String comment;\n        comment = \"fixIndex() would remove reference to this segment\";\n        msg(\"    WARNING: \" + comment + \"; full exception:\");\n        if (infoStream != null)\n          t.printStackTrace(infoStream);\n        msg(\"\");\n        result.totLoseDocCount += toLoseDocCount;\n        result.numBadSegments++;\n        continue;\n      } finally {\n        if (reader != null)\n          reader.close();\n      }\n\n      // Keeper\n      result.newSegments.add((SegmentInfo) info.clone());\n    }\n\n    if (0 == result.numBadSegments) {\n      result.clean = true;\n    } else\n      msg(\"WARNING: \" + result.numBadSegments + \" broken segments (containing \" + result.totLoseDocCount + \" documents) detected\");\n\n    if ( ! (result.validCounter = (result.maxSegmentName < sis.counter))) {\n      result.clean = false;\n      result.newSegments.counter = result.maxSegmentName + 1; \n      msg(\"ERROR: Next segment name counter \" + sis.counter + \" is not greater than max segment name \" + result.maxSegmentName);\n    }\n    \n    if (result.clean) {\n      msg(\"No problems were detected with this index.\\n\");\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /** Returns a {@link Status} instance detailing\n   *  the state of the index.\n   * \n   *  @param onlySegments list of specific segment names to check\n   *\n   *  <p>As this method checks every byte in the specified\n   *  segments, on a large index it can take quite a long\n   *  time to run.\n   *\n   *  <p><b>WARNING</b>: make sure\n   *  you only call this when the index is not opened by any\n   *  writer. */\n  public Status checkIndex(List<String> onlySegments) throws IOException {\n    NumberFormat nf = NumberFormat.getInstance();\n    SegmentInfos sis = new SegmentInfos();\n    Status result = new Status();\n    result.dir = dir;\n    try {\n      sis.read(dir);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read any segments file in directory\");\n      result.missingSegments = true;\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      return result;\n    }\n\n    // find the oldest and newest segment versions\n    String oldest = Integer.toString(Integer.MAX_VALUE), newest = Integer.toString(Integer.MIN_VALUE);\n    String oldSegs = null;\n    boolean foundNonNullVersion = false;\n    Comparator<String> versionComparator = StringHelper.getVersionComparator();\n    for (SegmentInfo si : sis) {\n      String version = si.getVersion();\n      if (version == null) {\n        // pre-3.1 segment\n        oldSegs = \"pre-3.1\";\n      } else {\n        foundNonNullVersion = true;\n        if (versionComparator.compare(version, oldest) < 0) {\n          oldest = version;\n        }\n        if (versionComparator.compare(version, newest) > 0) {\n          newest = version;\n        }\n      }\n    }\n\n    final int numSegments = sis.size();\n    final String segmentsFileName = sis.getCurrentSegmentFileName();\n    // note: we only read the format byte (required preamble) here!\n    IndexInput input = null;\n    try {\n      input = dir.openInput(segmentsFileName, IOContext.DEFAULT);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not open segments file in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.cantOpenSegments = true;\n      return result;\n    }\n    int format = 0;\n    try {\n      format = input.readInt();\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read segment file version in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.missingSegmentVersion = true;\n      return result;\n    } finally {\n      if (input != null)\n        input.close();\n    }\n\n    String sFormat = \"\";\n    boolean skip = false;\n\n    if (format == SegmentInfos.FORMAT_DIAGNOSTICS) {\n      sFormat = \"FORMAT_DIAGNOSTICS [Lucene 2.9]\";\n    } else if (format == SegmentInfos.FORMAT_HAS_VECTORS) {\n      sFormat = \"FORMAT_HAS_VECTORS [Lucene 3.1]\";\n    } else if (format == SegmentInfos.FORMAT_3_1) {\n      sFormat = \"FORMAT_3_1 [Lucene 3.1+]\";\n    } else if (format == SegmentInfos.FORMAT_4_0) {\n      sFormat = \"FORMAT_4_0 [Lucene 4.0]\";\n    } else if (format == SegmentInfos.FORMAT_CURRENT) {\n      throw new RuntimeException(\"BUG: You should update this tool!\");\n    } else if (format < SegmentInfos.FORMAT_CURRENT) {\n      sFormat = \"int=\" + format + \" [newer version of Lucene than this tool supports]\";\n      skip = true;\n    } else if (format > SegmentInfos.FORMAT_MINIMUM) {\n      sFormat = \"int=\" + format + \" [older version of Lucene than this tool supports]\";\n      skip = true;\n    }\n\n    result.segmentsFileName = segmentsFileName;\n    result.numSegments = numSegments;\n    result.segmentFormat = sFormat;\n    result.userData = sis.getUserData();\n    String userDataString;\n    if (sis.getUserData().size() > 0) {\n      userDataString = \" userData=\" + sis.getUserData();\n    } else {\n      userDataString = \"\";\n    }\n\n    String versionString = null;\n    if (oldSegs != null) {\n      if (foundNonNullVersion) {\n        versionString = \"versions=[\" + oldSegs + \" .. \" + newest + \"]\";\n      } else {\n        versionString = \"version=\" + oldSegs;\n      }\n    } else {\n      versionString = oldest.equals(newest) ? ( \"version=\" + oldest ) : (\"versions=[\" + oldest + \" .. \" + newest + \"]\");\n    }\n\n    msg(\"Segments file=\" + segmentsFileName + \" numSegments=\" + numSegments\n        + \" \" + versionString + \" format=\" + sFormat + userDataString);\n\n    if (onlySegments != null) {\n      result.partial = true;\n      if (infoStream != null)\n        infoStream.print(\"\\nChecking only these segments:\");\n      for (String s : onlySegments) {\n        if (infoStream != null)\n          infoStream.print(\" \" + s);\n      }\n      result.segmentsChecked.addAll(onlySegments);\n      msg(\":\");\n    }\n\n    if (skip) {\n      msg(\"\\nERROR: this index appears to be created by a newer version of Lucene than this tool was compiled on; please re-compile this tool on the matching version of Lucene; exiting\");\n      result.toolOutOfDate = true;\n      return result;\n    }\n\n\n    result.newSegments = (SegmentInfos) sis.clone();\n    result.newSegments.clear();\n    result.maxSegmentName = -1;\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = sis.info(i);\n      int segmentName = Integer.parseInt(info.name.substring(1), Character.MAX_RADIX);\n      if (segmentName > result.maxSegmentName) {\n        result.maxSegmentName = segmentName;\n      }\n      if (onlySegments != null && !onlySegments.contains(info.name))\n        continue;\n      Status.SegmentInfoStatus segInfoStat = new Status.SegmentInfoStatus();\n      result.segmentInfos.add(segInfoStat);\n      msg(\"  \" + (1+i) + \" of \" + numSegments + \": name=\" + info.name + \" docCount=\" + info.docCount);\n      segInfoStat.name = info.name;\n      segInfoStat.docCount = info.docCount;\n\n      int toLoseDocCount = info.docCount;\n\n      SegmentReader reader = null;\n\n      try {\n        final Codec codec = info.getCodec();\n        msg(\"    codec=\" + codec);\n        segInfoStat.codec = codec;\n        msg(\"    compound=\" + info.getUseCompoundFile());\n        segInfoStat.compound = info.getUseCompoundFile();\n        msg(\"    hasProx=\" + info.getHasProx());\n        segInfoStat.hasProx = info.getHasProx();\n        msg(\"    numFiles=\" + info.files().size());\n        segInfoStat.numFiles = info.files().size();\n        segInfoStat.sizeMB = info.sizeInBytes()/(1024.*1024.);\n        msg(\"    size (MB)=\" + nf.format(segInfoStat.sizeMB));\n        Map<String,String> diagnostics = info.getDiagnostics();\n        segInfoStat.diagnostics = diagnostics;\n        if (diagnostics.size() > 0) {\n          msg(\"    diagnostics = \" + diagnostics);\n        }\n\n        final int docStoreOffset = info.getDocStoreOffset();\n        if (docStoreOffset != -1) {\n          msg(\"    docStoreOffset=\" + docStoreOffset);\n          segInfoStat.docStoreOffset = docStoreOffset;\n          msg(\"    docStoreSegment=\" + info.getDocStoreSegment());\n          segInfoStat.docStoreSegment = info.getDocStoreSegment();\n          msg(\"    docStoreIsCompoundFile=\" + info.getDocStoreIsCompoundFile());\n          segInfoStat.docStoreCompoundFile = info.getDocStoreIsCompoundFile();\n        }\n\n        final String delFileName = info.getDelFileName();\n        if (delFileName == null){\n          msg(\"    no deletions\");\n          segInfoStat.hasDeletions = false;\n        }\n        else{\n          msg(\"    has deletions [delFileName=\" + delFileName + \"]\");\n          segInfoStat.hasDeletions = true;\n          segInfoStat.deletionsFileName = delFileName;\n        }\n        if (infoStream != null)\n          infoStream.print(\"    test: open reader.........\");\n        reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, IOContext.DEFAULT);\n\n        segInfoStat.openReaderPassed = true;\n\n        final int numDocs = reader.numDocs();\n        toLoseDocCount = numDocs;\n        if (reader.hasDeletions()) {\n          if (reader.liveDocs.count() != info.docCount - info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + (info.docCount - info.getDelCount()) + \" vs reader=\" + reader.liveDocs.count());\n          }\n          if ((info.docCount-reader.liveDocs.count()) > reader.maxDoc()) {\n            throw new RuntimeException(\"too many deleted docs: maxDoc()=\" + reader.maxDoc() + \" vs del count=\" + (info.docCount-reader.liveDocs.count()));\n          }\n          if (info.docCount - numDocs != info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          segInfoStat.numDeleted = info.docCount - numDocs;\n          msg(\"OK [\" + (segInfoStat.numDeleted) + \" deleted docs]\");\n        } else {\n          if (info.getDelCount() != 0) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          msg(\"OK\");\n        }\n        if (reader.maxDoc() != info.docCount)\n          throw new RuntimeException(\"SegmentReader.maxDoc() \" + reader.maxDoc() + \" != SegmentInfos.docCount \" + info.docCount);\n\n        // Test getFieldNames()\n        if (infoStream != null) {\n          infoStream.print(\"    test: fields..............\");\n        }         \n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        msg(\"OK [\" + fieldNames.size() + \" fields]\");\n        segInfoStat.numFields = fieldNames.size();\n        \n        // Test Field Norms\n        segInfoStat.fieldNormStatus = testFieldNorms(fieldNames, reader);\n\n        // Test the Term Index\n        segInfoStat.termIndexStatus = testTermIndex(reader);\n\n        // Test Stored Fields\n        segInfoStat.storedFieldStatus = testStoredFields(info, reader, nf);\n\n        // Test Term Vectors\n        segInfoStat.termVectorStatus = testTermVectors(info, reader, nf);\n        \n        segInfoStat.docValuesStatus = testDocValues(info, reader);\n\n        // Rethrow the first exception we encountered\n        //  This will cause stats for failed segments to be incremented properly\n        if (segInfoStat.fieldNormStatus.error != null) {\n          throw new RuntimeException(\"Field Norm test failed\");\n        } else if (segInfoStat.termIndexStatus.error != null) {\n          throw new RuntimeException(\"Term Index test failed\");\n        } else if (segInfoStat.storedFieldStatus.error != null) {\n          throw new RuntimeException(\"Stored Field test failed\");\n        } else if (segInfoStat.termVectorStatus.error != null) {\n          throw new RuntimeException(\"Term Vector test failed\");\n        }  else if (segInfoStat.docValuesStatus.error != null) {\n          throw new RuntimeException(\"DocValues test failed\");\n        }\n\n        msg(\"\");\n\n      } catch (Throwable t) {\n        msg(\"FAILED\");\n        String comment;\n        comment = \"fixIndex() would remove reference to this segment\";\n        msg(\"    WARNING: \" + comment + \"; full exception:\");\n        if (infoStream != null)\n          t.printStackTrace(infoStream);\n        msg(\"\");\n        result.totLoseDocCount += toLoseDocCount;\n        result.numBadSegments++;\n        continue;\n      } finally {\n        if (reader != null)\n          reader.close();\n      }\n\n      // Keeper\n      result.newSegments.add((SegmentInfo) info.clone());\n    }\n\n    if (0 == result.numBadSegments) {\n      result.clean = true;\n    } else\n      msg(\"WARNING: \" + result.numBadSegments + \" broken segments (containing \" + result.totLoseDocCount + \" documents) detected\");\n\n    if ( ! (result.validCounter = (result.maxSegmentName < sis.counter))) {\n      result.clean = false;\n      result.newSegments.counter = result.maxSegmentName + 1; \n      msg(\"ERROR: Next segment name counter \" + sis.counter + \" is not greater than max segment name \" + result.maxSegmentName);\n    }\n    \n    if (result.clean) {\n      msg(\"No problems were detected with this index.\\n\");\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/CheckIndex#checkIndex(List[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CheckIndex#checkIndex(List[String]).mjava","sourceNew":"  /** Returns a {@link Status} instance detailing\n   *  the state of the index.\n   * \n   *  @param onlySegments list of specific segment names to check\n   *\n   *  <p>As this method checks every byte in the specified\n   *  segments, on a large index it can take quite a long\n   *  time to run.\n   *\n   *  <p><b>WARNING</b>: make sure\n   *  you only call this when the index is not opened by any\n   *  writer. */\n  public Status checkIndex(List<String> onlySegments) throws IOException {\n    NumberFormat nf = NumberFormat.getInstance();\n    SegmentInfos sis = new SegmentInfos();\n    Status result = new Status();\n    result.dir = dir;\n    try {\n      sis.read(dir);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read any segments file in directory\");\n      result.missingSegments = true;\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      return result;\n    }\n\n    // find the oldest and newest segment versions\n    String oldest = Integer.toString(Integer.MAX_VALUE), newest = Integer.toString(Integer.MIN_VALUE);\n    String oldSegs = null;\n    boolean foundNonNullVersion = false;\n    Comparator<String> versionComparator = StringHelper.getVersionComparator();\n    for (SegmentInfo si : sis) {\n      String version = si.getVersion();\n      if (version == null) {\n        // pre-3.1 segment\n        oldSegs = \"pre-3.1\";\n      } else {\n        foundNonNullVersion = true;\n        if (versionComparator.compare(version, oldest) < 0) {\n          oldest = version;\n        }\n        if (versionComparator.compare(version, newest) > 0) {\n          newest = version;\n        }\n      }\n    }\n\n    final int numSegments = sis.size();\n    final String segmentsFileName = sis.getCurrentSegmentFileName();\n    // note: we only read the format byte (required preamble) here!\n    IndexInput input = null;\n    try {\n      input = dir.openInput(segmentsFileName, IOContext.DEFAULT);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not open segments file in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.cantOpenSegments = true;\n      return result;\n    }\n    int format = 0;\n    try {\n      format = input.readInt();\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read segment file version in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.missingSegmentVersion = true;\n      return result;\n    } finally {\n      if (input != null)\n        input.close();\n    }\n\n    String sFormat = \"\";\n    boolean skip = false;\n\n    if (format == SegmentInfos.FORMAT_DIAGNOSTICS) {\n      sFormat = \"FORMAT_DIAGNOSTICS [Lucene 2.9]\";\n    } else if (format == SegmentInfos.FORMAT_HAS_VECTORS) {\n      sFormat = \"FORMAT_HAS_VECTORS [Lucene 3.1]\";\n    } else if (format == SegmentInfos.FORMAT_3_1) {\n      sFormat = \"FORMAT_3_1 [Lucene 3.1+]\";\n    } else if (format == SegmentInfos.FORMAT_4_0) {\n      sFormat = \"FORMAT_4_0 [Lucene 4.0]\";\n    } else if (format == SegmentInfos.FORMAT_CURRENT) {\n      throw new RuntimeException(\"BUG: You should update this tool!\");\n    } else if (format < SegmentInfos.FORMAT_CURRENT) {\n      sFormat = \"int=\" + format + \" [newer version of Lucene than this tool supports]\";\n      skip = true;\n    } else if (format > SegmentInfos.FORMAT_MINIMUM) {\n      sFormat = \"int=\" + format + \" [older version of Lucene than this tool supports]\";\n      skip = true;\n    }\n\n    result.segmentsFileName = segmentsFileName;\n    result.numSegments = numSegments;\n    result.segmentFormat = sFormat;\n    result.userData = sis.getUserData();\n    String userDataString;\n    if (sis.getUserData().size() > 0) {\n      userDataString = \" userData=\" + sis.getUserData();\n    } else {\n      userDataString = \"\";\n    }\n\n    String versionString = null;\n    if (oldSegs != null) {\n      if (foundNonNullVersion) {\n        versionString = \"versions=[\" + oldSegs + \" .. \" + newest + \"]\";\n      } else {\n        versionString = \"version=\" + oldSegs;\n      }\n    } else {\n      versionString = oldest.equals(newest) ? ( \"version=\" + oldest ) : (\"versions=[\" + oldest + \" .. \" + newest + \"]\");\n    }\n\n    msg(\"Segments file=\" + segmentsFileName + \" numSegments=\" + numSegments\n        + \" \" + versionString + \" format=\" + sFormat + userDataString);\n\n    if (onlySegments != null) {\n      result.partial = true;\n      if (infoStream != null)\n        infoStream.print(\"\\nChecking only these segments:\");\n      for (String s : onlySegments) {\n        if (infoStream != null)\n          infoStream.print(\" \" + s);\n      }\n      result.segmentsChecked.addAll(onlySegments);\n      msg(\":\");\n    }\n\n    if (skip) {\n      msg(\"\\nERROR: this index appears to be created by a newer version of Lucene than this tool was compiled on; please re-compile this tool on the matching version of Lucene; exiting\");\n      result.toolOutOfDate = true;\n      return result;\n    }\n\n\n    result.newSegments = (SegmentInfos) sis.clone();\n    result.newSegments.clear();\n    result.maxSegmentName = -1;\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = sis.info(i);\n      int segmentName = Integer.parseInt(info.name.substring(1), Character.MAX_RADIX);\n      if (segmentName > result.maxSegmentName) {\n        result.maxSegmentName = segmentName;\n      }\n      if (onlySegments != null && !onlySegments.contains(info.name))\n        continue;\n      Status.SegmentInfoStatus segInfoStat = new Status.SegmentInfoStatus();\n      result.segmentInfos.add(segInfoStat);\n      msg(\"  \" + (1+i) + \" of \" + numSegments + \": name=\" + info.name + \" docCount=\" + info.docCount);\n      segInfoStat.name = info.name;\n      segInfoStat.docCount = info.docCount;\n\n      int toLoseDocCount = info.docCount;\n\n      SegmentReader reader = null;\n\n      try {\n        final Codec codec = info.getCodec();\n        msg(\"    codec=\" + codec);\n        segInfoStat.codec = codec;\n        msg(\"    compound=\" + info.getUseCompoundFile());\n        segInfoStat.compound = info.getUseCompoundFile();\n        msg(\"    hasProx=\" + info.getHasProx());\n        segInfoStat.hasProx = info.getHasProx();\n        msg(\"    numFiles=\" + info.files().size());\n        segInfoStat.numFiles = info.files().size();\n        segInfoStat.sizeMB = info.sizeInBytes()/(1024.*1024.);\n        msg(\"    size (MB)=\" + nf.format(segInfoStat.sizeMB));\n        Map<String,String> diagnostics = info.getDiagnostics();\n        segInfoStat.diagnostics = diagnostics;\n        if (diagnostics.size() > 0) {\n          msg(\"    diagnostics = \" + diagnostics);\n        }\n\n        final int docStoreOffset = info.getDocStoreOffset();\n        if (docStoreOffset != -1) {\n          msg(\"    docStoreOffset=\" + docStoreOffset);\n          segInfoStat.docStoreOffset = docStoreOffset;\n          msg(\"    docStoreSegment=\" + info.getDocStoreSegment());\n          segInfoStat.docStoreSegment = info.getDocStoreSegment();\n          msg(\"    docStoreIsCompoundFile=\" + info.getDocStoreIsCompoundFile());\n          segInfoStat.docStoreCompoundFile = info.getDocStoreIsCompoundFile();\n        }\n\n        final String delFileName = info.getDelFileName();\n        if (delFileName == null){\n          msg(\"    no deletions\");\n          segInfoStat.hasDeletions = false;\n        }\n        else{\n          msg(\"    has deletions [delFileName=\" + delFileName + \"]\");\n          segInfoStat.hasDeletions = true;\n          segInfoStat.deletionsFileName = delFileName;\n        }\n        if (infoStream != null)\n          infoStream.print(\"    test: open reader.........\");\n        reader = SegmentReader.get(info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, IOContext.DEFAULT);\n\n        segInfoStat.openReaderPassed = true;\n\n        final int numDocs = reader.numDocs();\n        toLoseDocCount = numDocs;\n        if (reader.hasDeletions()) {\n          if (reader.liveDocs.count() != info.docCount - info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + (info.docCount - info.getDelCount()) + \" vs reader=\" + reader.liveDocs.count());\n          }\n          if ((info.docCount-reader.liveDocs.count()) > reader.maxDoc()) {\n            throw new RuntimeException(\"too many deleted docs: maxDoc()=\" + reader.maxDoc() + \" vs del count=\" + (info.docCount-reader.liveDocs.count()));\n          }\n          if (info.docCount - numDocs != info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          segInfoStat.numDeleted = info.docCount - numDocs;\n          msg(\"OK [\" + (segInfoStat.numDeleted) + \" deleted docs]\");\n        } else {\n          if (info.getDelCount() != 0) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          msg(\"OK\");\n        }\n        if (reader.maxDoc() != info.docCount)\n          throw new RuntimeException(\"SegmentReader.maxDoc() \" + reader.maxDoc() + \" != SegmentInfos.docCount \" + info.docCount);\n\n        // Test getFieldNames()\n        if (infoStream != null) {\n          infoStream.print(\"    test: fields..............\");\n        }         \n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        msg(\"OK [\" + fieldNames.size() + \" fields]\");\n        segInfoStat.numFields = fieldNames.size();\n        \n        // Test Field Norms\n        segInfoStat.fieldNormStatus = testFieldNorms(fieldNames, reader);\n\n        // Test the Term Index\n        segInfoStat.termIndexStatus = testTermIndex(reader);\n\n        // Test Stored Fields\n        segInfoStat.storedFieldStatus = testStoredFields(info, reader, nf);\n\n        // Test Term Vectors\n        segInfoStat.termVectorStatus = testTermVectors(info, reader, nf);\n        \n        segInfoStat.docValuesStatus = testDocValues(info, reader);\n\n        // Rethrow the first exception we encountered\n        //  This will cause stats for failed segments to be incremented properly\n        if (segInfoStat.fieldNormStatus.error != null) {\n          throw new RuntimeException(\"Field Norm test failed\");\n        } else if (segInfoStat.termIndexStatus.error != null) {\n          throw new RuntimeException(\"Term Index test failed\");\n        } else if (segInfoStat.storedFieldStatus.error != null) {\n          throw new RuntimeException(\"Stored Field test failed\");\n        } else if (segInfoStat.termVectorStatus.error != null) {\n          throw new RuntimeException(\"Term Vector test failed\");\n        }  else if (segInfoStat.docValuesStatus.error != null) {\n          throw new RuntimeException(\"DocValues test failed\");\n        }\n\n        msg(\"\");\n\n      } catch (Throwable t) {\n        msg(\"FAILED\");\n        String comment;\n        comment = \"fixIndex() would remove reference to this segment\";\n        msg(\"    WARNING: \" + comment + \"; full exception:\");\n        if (infoStream != null)\n          t.printStackTrace(infoStream);\n        msg(\"\");\n        result.totLoseDocCount += toLoseDocCount;\n        result.numBadSegments++;\n        continue;\n      } finally {\n        if (reader != null)\n          reader.close();\n      }\n\n      // Keeper\n      result.newSegments.add((SegmentInfo) info.clone());\n    }\n\n    if (0 == result.numBadSegments) {\n      result.clean = true;\n    } else\n      msg(\"WARNING: \" + result.numBadSegments + \" broken segments (containing \" + result.totLoseDocCount + \" documents) detected\");\n\n    if ( ! (result.validCounter = (result.maxSegmentName < sis.counter))) {\n      result.clean = false;\n      result.newSegments.counter = result.maxSegmentName + 1; \n      msg(\"ERROR: Next segment name counter \" + sis.counter + \" is not greater than max segment name \" + result.maxSegmentName);\n    }\n    \n    if (result.clean) {\n      msg(\"No problems were detected with this index.\\n\");\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /** Returns a {@link Status} instance detailing\n   *  the state of the index.\n   * \n   *  @param onlySegments list of specific segment names to check\n   *\n   *  <p>As this method checks every byte in the specified\n   *  segments, on a large index it can take quite a long\n   *  time to run.\n   *\n   *  <p><b>WARNING</b>: make sure\n   *  you only call this when the index is not opened by any\n   *  writer. */\n  public Status checkIndex(List<String> onlySegments) throws IOException {\n    NumberFormat nf = NumberFormat.getInstance();\n    SegmentInfos sis = new SegmentInfos();\n    Status result = new Status();\n    result.dir = dir;\n    try {\n      sis.read(dir);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read any segments file in directory\");\n      result.missingSegments = true;\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      return result;\n    }\n\n    // find the oldest and newest segment versions\n    String oldest = Integer.toString(Integer.MAX_VALUE), newest = Integer.toString(Integer.MIN_VALUE);\n    String oldSegs = null;\n    boolean foundNonNullVersion = false;\n    Comparator<String> versionComparator = StringHelper.getVersionComparator();\n    for (SegmentInfo si : sis) {\n      String version = si.getVersion();\n      if (version == null) {\n        // pre-3.1 segment\n        oldSegs = \"pre-3.1\";\n      } else {\n        foundNonNullVersion = true;\n        if (versionComparator.compare(version, oldest) < 0) {\n          oldest = version;\n        }\n        if (versionComparator.compare(version, newest) > 0) {\n          newest = version;\n        }\n      }\n    }\n\n    final int numSegments = sis.size();\n    final String segmentsFileName = sis.getCurrentSegmentFileName();\n    // note: we only read the format byte (required preamble) here!\n    IndexInput input = null;\n    try {\n      input = dir.openInput(segmentsFileName, IOContext.DEFAULT);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not open segments file in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.cantOpenSegments = true;\n      return result;\n    }\n    int format = 0;\n    try {\n      format = input.readInt();\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read segment file version in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.missingSegmentVersion = true;\n      return result;\n    } finally {\n      if (input != null)\n        input.close();\n    }\n\n    String sFormat = \"\";\n    boolean skip = false;\n\n    if (format == SegmentInfos.FORMAT_DIAGNOSTICS) {\n      sFormat = \"FORMAT_DIAGNOSTICS [Lucene 2.9]\";\n    } else if (format == SegmentInfos.FORMAT_HAS_VECTORS) {\n      sFormat = \"FORMAT_HAS_VECTORS [Lucene 3.1]\";\n    } else if (format == SegmentInfos.FORMAT_3_1) {\n      sFormat = \"FORMAT_3_1 [Lucene 3.1+]\";\n    } else if (format == SegmentInfos.FORMAT_4_0) {\n      sFormat = \"FORMAT_4_0 [Lucene 4.0]\";\n    } else if (format == SegmentInfos.FORMAT_CURRENT) {\n      throw new RuntimeException(\"BUG: You should update this tool!\");\n    } else if (format < SegmentInfos.FORMAT_CURRENT) {\n      sFormat = \"int=\" + format + \" [newer version of Lucene than this tool supports]\";\n      skip = true;\n    } else if (format > SegmentInfos.FORMAT_MINIMUM) {\n      sFormat = \"int=\" + format + \" [older version of Lucene than this tool supports]\";\n      skip = true;\n    }\n\n    result.segmentsFileName = segmentsFileName;\n    result.numSegments = numSegments;\n    result.segmentFormat = sFormat;\n    result.userData = sis.getUserData();\n    String userDataString;\n    if (sis.getUserData().size() > 0) {\n      userDataString = \" userData=\" + sis.getUserData();\n    } else {\n      userDataString = \"\";\n    }\n\n    String versionString = null;\n    if (oldSegs != null) {\n      if (foundNonNullVersion) {\n        versionString = \"versions=[\" + oldSegs + \" .. \" + newest + \"]\";\n      } else {\n        versionString = \"version=\" + oldSegs;\n      }\n    } else {\n      versionString = oldest.equals(newest) ? ( \"version=\" + oldest ) : (\"versions=[\" + oldest + \" .. \" + newest + \"]\");\n    }\n\n    msg(\"Segments file=\" + segmentsFileName + \" numSegments=\" + numSegments\n        + \" \" + versionString + \" format=\" + sFormat + userDataString);\n\n    if (onlySegments != null) {\n      result.partial = true;\n      if (infoStream != null)\n        infoStream.print(\"\\nChecking only these segments:\");\n      for (String s : onlySegments) {\n        if (infoStream != null)\n          infoStream.print(\" \" + s);\n      }\n      result.segmentsChecked.addAll(onlySegments);\n      msg(\":\");\n    }\n\n    if (skip) {\n      msg(\"\\nERROR: this index appears to be created by a newer version of Lucene than this tool was compiled on; please re-compile this tool on the matching version of Lucene; exiting\");\n      result.toolOutOfDate = true;\n      return result;\n    }\n\n\n    result.newSegments = (SegmentInfos) sis.clone();\n    result.newSegments.clear();\n    result.maxSegmentName = -1;\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = sis.info(i);\n      int segmentName = Integer.parseInt(info.name.substring(1), Character.MAX_RADIX);\n      if (segmentName > result.maxSegmentName) {\n        result.maxSegmentName = segmentName;\n      }\n      if (onlySegments != null && !onlySegments.contains(info.name))\n        continue;\n      Status.SegmentInfoStatus segInfoStat = new Status.SegmentInfoStatus();\n      result.segmentInfos.add(segInfoStat);\n      msg(\"  \" + (1+i) + \" of \" + numSegments + \": name=\" + info.name + \" docCount=\" + info.docCount);\n      segInfoStat.name = info.name;\n      segInfoStat.docCount = info.docCount;\n\n      int toLoseDocCount = info.docCount;\n\n      SegmentReader reader = null;\n\n      try {\n        final Codec codec = info.getCodec();\n        msg(\"    codec=\" + codec);\n        segInfoStat.codec = codec;\n        msg(\"    compound=\" + info.getUseCompoundFile());\n        segInfoStat.compound = info.getUseCompoundFile();\n        msg(\"    hasProx=\" + info.getHasProx());\n        segInfoStat.hasProx = info.getHasProx();\n        msg(\"    numFiles=\" + info.files().size());\n        segInfoStat.numFiles = info.files().size();\n        segInfoStat.sizeMB = info.sizeInBytes()/(1024.*1024.);\n        msg(\"    size (MB)=\" + nf.format(segInfoStat.sizeMB));\n        Map<String,String> diagnostics = info.getDiagnostics();\n        segInfoStat.diagnostics = diagnostics;\n        if (diagnostics.size() > 0) {\n          msg(\"    diagnostics = \" + diagnostics);\n        }\n\n        final int docStoreOffset = info.getDocStoreOffset();\n        if (docStoreOffset != -1) {\n          msg(\"    docStoreOffset=\" + docStoreOffset);\n          segInfoStat.docStoreOffset = docStoreOffset;\n          msg(\"    docStoreSegment=\" + info.getDocStoreSegment());\n          segInfoStat.docStoreSegment = info.getDocStoreSegment();\n          msg(\"    docStoreIsCompoundFile=\" + info.getDocStoreIsCompoundFile());\n          segInfoStat.docStoreCompoundFile = info.getDocStoreIsCompoundFile();\n        }\n\n        final String delFileName = info.getDelFileName();\n        if (delFileName == null){\n          msg(\"    no deletions\");\n          segInfoStat.hasDeletions = false;\n        }\n        else{\n          msg(\"    has deletions [delFileName=\" + delFileName + \"]\");\n          segInfoStat.hasDeletions = true;\n          segInfoStat.deletionsFileName = delFileName;\n        }\n        if (infoStream != null)\n          infoStream.print(\"    test: open reader.........\");\n        reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, IOContext.DEFAULT);\n\n        segInfoStat.openReaderPassed = true;\n\n        final int numDocs = reader.numDocs();\n        toLoseDocCount = numDocs;\n        if (reader.hasDeletions()) {\n          if (reader.liveDocs.count() != info.docCount - info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + (info.docCount - info.getDelCount()) + \" vs reader=\" + reader.liveDocs.count());\n          }\n          if ((info.docCount-reader.liveDocs.count()) > reader.maxDoc()) {\n            throw new RuntimeException(\"too many deleted docs: maxDoc()=\" + reader.maxDoc() + \" vs del count=\" + (info.docCount-reader.liveDocs.count()));\n          }\n          if (info.docCount - numDocs != info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          segInfoStat.numDeleted = info.docCount - numDocs;\n          msg(\"OK [\" + (segInfoStat.numDeleted) + \" deleted docs]\");\n        } else {\n          if (info.getDelCount() != 0) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          msg(\"OK\");\n        }\n        if (reader.maxDoc() != info.docCount)\n          throw new RuntimeException(\"SegmentReader.maxDoc() \" + reader.maxDoc() + \" != SegmentInfos.docCount \" + info.docCount);\n\n        // Test getFieldNames()\n        if (infoStream != null) {\n          infoStream.print(\"    test: fields..............\");\n        }         \n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        msg(\"OK [\" + fieldNames.size() + \" fields]\");\n        segInfoStat.numFields = fieldNames.size();\n        \n        // Test Field Norms\n        segInfoStat.fieldNormStatus = testFieldNorms(fieldNames, reader);\n\n        // Test the Term Index\n        segInfoStat.termIndexStatus = testTermIndex(reader);\n\n        // Test Stored Fields\n        segInfoStat.storedFieldStatus = testStoredFields(info, reader, nf);\n\n        // Test Term Vectors\n        segInfoStat.termVectorStatus = testTermVectors(info, reader, nf);\n        \n        segInfoStat.docValuesStatus = testDocValues(info, reader);\n\n        // Rethrow the first exception we encountered\n        //  This will cause stats for failed segments to be incremented properly\n        if (segInfoStat.fieldNormStatus.error != null) {\n          throw new RuntimeException(\"Field Norm test failed\");\n        } else if (segInfoStat.termIndexStatus.error != null) {\n          throw new RuntimeException(\"Term Index test failed\");\n        } else if (segInfoStat.storedFieldStatus.error != null) {\n          throw new RuntimeException(\"Stored Field test failed\");\n        } else if (segInfoStat.termVectorStatus.error != null) {\n          throw new RuntimeException(\"Term Vector test failed\");\n        }  else if (segInfoStat.docValuesStatus.error != null) {\n          throw new RuntimeException(\"DocValues test failed\");\n        }\n\n        msg(\"\");\n\n      } catch (Throwable t) {\n        msg(\"FAILED\");\n        String comment;\n        comment = \"fixIndex() would remove reference to this segment\";\n        msg(\"    WARNING: \" + comment + \"; full exception:\");\n        if (infoStream != null)\n          t.printStackTrace(infoStream);\n        msg(\"\");\n        result.totLoseDocCount += toLoseDocCount;\n        result.numBadSegments++;\n        continue;\n      } finally {\n        if (reader != null)\n          reader.close();\n      }\n\n      // Keeper\n      result.newSegments.add((SegmentInfo) info.clone());\n    }\n\n    if (0 == result.numBadSegments) {\n      result.clean = true;\n    } else\n      msg(\"WARNING: \" + result.numBadSegments + \" broken segments (containing \" + result.totLoseDocCount + \" documents) detected\");\n\n    if ( ! (result.validCounter = (result.maxSegmentName < sis.counter))) {\n      result.clean = false;\n      result.newSegments.counter = result.maxSegmentName + 1; \n      msg(\"ERROR: Next segment name counter \" + sis.counter + \" is not greater than max segment name \" + result.maxSegmentName);\n    }\n    \n    if (result.clean) {\n      msg(\"No problems were detected with this index.\\n\");\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CheckIndex#checkIndex(List[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CheckIndex#checkIndex(List[String]).mjava","sourceNew":"  /** Returns a {@link Status} instance detailing\n   *  the state of the index.\n   * \n   *  @param onlySegments list of specific segment names to check\n   *\n   *  <p>As this method checks every byte in the specified\n   *  segments, on a large index it can take quite a long\n   *  time to run.\n   *\n   *  <p><b>WARNING</b>: make sure\n   *  you only call this when the index is not opened by any\n   *  writer. */\n  public Status checkIndex(List<String> onlySegments) throws IOException {\n    NumberFormat nf = NumberFormat.getInstance();\n    SegmentInfos sis = new SegmentInfos();\n    Status result = new Status();\n    result.dir = dir;\n    try {\n      sis.read(dir);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read any segments file in directory\");\n      result.missingSegments = true;\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      return result;\n    }\n\n    // find the oldest and newest segment versions\n    String oldest = Integer.toString(Integer.MAX_VALUE), newest = Integer.toString(Integer.MIN_VALUE);\n    String oldSegs = null;\n    boolean foundNonNullVersion = false;\n    Comparator<String> versionComparator = StringHelper.getVersionComparator();\n    for (SegmentInfo si : sis) {\n      String version = si.getVersion();\n      if (version == null) {\n        // pre-3.1 segment\n        oldSegs = \"pre-3.1\";\n      } else {\n        foundNonNullVersion = true;\n        if (versionComparator.compare(version, oldest) < 0) {\n          oldest = version;\n        }\n        if (versionComparator.compare(version, newest) > 0) {\n          newest = version;\n        }\n      }\n    }\n\n    final int numSegments = sis.size();\n    final String segmentsFileName = sis.getCurrentSegmentFileName();\n    // note: we only read the format byte (required preamble) here!\n    IndexInput input = null;\n    try {\n      input = dir.openInput(segmentsFileName, IOContext.DEFAULT);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not open segments file in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.cantOpenSegments = true;\n      return result;\n    }\n    int format = 0;\n    try {\n      format = input.readInt();\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read segment file version in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.missingSegmentVersion = true;\n      return result;\n    } finally {\n      if (input != null)\n        input.close();\n    }\n\n    String sFormat = \"\";\n    boolean skip = false;\n\n    if (format == SegmentInfos.FORMAT_DIAGNOSTICS) {\n      sFormat = \"FORMAT_DIAGNOSTICS [Lucene 2.9]\";\n    } else if (format == SegmentInfos.FORMAT_HAS_VECTORS) {\n      sFormat = \"FORMAT_HAS_VECTORS [Lucene 3.1]\";\n    } else if (format == SegmentInfos.FORMAT_3_1) {\n      sFormat = \"FORMAT_3_1 [Lucene 3.1+]\";\n    } else if (format == SegmentInfos.FORMAT_4_0) {\n      sFormat = \"FORMAT_4_0 [Lucene 4.0]\";\n    } else if (format == SegmentInfos.FORMAT_CURRENT) {\n      throw new RuntimeException(\"BUG: You should update this tool!\");\n    } else if (format < SegmentInfos.FORMAT_CURRENT) {\n      sFormat = \"int=\" + format + \" [newer version of Lucene than this tool supports]\";\n      skip = true;\n    } else if (format > SegmentInfos.FORMAT_MINIMUM) {\n      sFormat = \"int=\" + format + \" [older version of Lucene than this tool supports]\";\n      skip = true;\n    }\n\n    result.segmentsFileName = segmentsFileName;\n    result.numSegments = numSegments;\n    result.segmentFormat = sFormat;\n    result.userData = sis.getUserData();\n    String userDataString;\n    if (sis.getUserData().size() > 0) {\n      userDataString = \" userData=\" + sis.getUserData();\n    } else {\n      userDataString = \"\";\n    }\n\n    String versionString = null;\n    if (oldSegs != null) {\n      if (foundNonNullVersion) {\n        versionString = \"versions=[\" + oldSegs + \" .. \" + newest + \"]\";\n      } else {\n        versionString = \"version=\" + oldSegs;\n      }\n    } else {\n      versionString = oldest.equals(newest) ? ( \"version=\" + oldest ) : (\"versions=[\" + oldest + \" .. \" + newest + \"]\");\n    }\n\n    msg(\"Segments file=\" + segmentsFileName + \" numSegments=\" + numSegments\n        + \" \" + versionString + \" format=\" + sFormat + userDataString);\n\n    if (onlySegments != null) {\n      result.partial = true;\n      if (infoStream != null)\n        infoStream.print(\"\\nChecking only these segments:\");\n      for (String s : onlySegments) {\n        if (infoStream != null)\n          infoStream.print(\" \" + s);\n      }\n      result.segmentsChecked.addAll(onlySegments);\n      msg(\":\");\n    }\n\n    if (skip) {\n      msg(\"\\nERROR: this index appears to be created by a newer version of Lucene than this tool was compiled on; please re-compile this tool on the matching version of Lucene; exiting\");\n      result.toolOutOfDate = true;\n      return result;\n    }\n\n\n    result.newSegments = (SegmentInfos) sis.clone();\n    result.newSegments.clear();\n    result.maxSegmentName = -1;\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = sis.info(i);\n      int segmentName = Integer.parseInt(info.name.substring(1), Character.MAX_RADIX);\n      if (segmentName > result.maxSegmentName) {\n        result.maxSegmentName = segmentName;\n      }\n      if (onlySegments != null && !onlySegments.contains(info.name))\n        continue;\n      Status.SegmentInfoStatus segInfoStat = new Status.SegmentInfoStatus();\n      result.segmentInfos.add(segInfoStat);\n      msg(\"  \" + (1+i) + \" of \" + numSegments + \": name=\" + info.name + \" docCount=\" + info.docCount);\n      segInfoStat.name = info.name;\n      segInfoStat.docCount = info.docCount;\n\n      int toLoseDocCount = info.docCount;\n\n      SegmentReader reader = null;\n\n      try {\n        final Codec codec = info.getCodec();\n        msg(\"    codec=\" + codec);\n        segInfoStat.codec = codec;\n        msg(\"    compound=\" + info.getUseCompoundFile());\n        segInfoStat.compound = info.getUseCompoundFile();\n        msg(\"    hasProx=\" + info.getHasProx());\n        segInfoStat.hasProx = info.getHasProx();\n        msg(\"    numFiles=\" + info.files().size());\n        segInfoStat.numFiles = info.files().size();\n        segInfoStat.sizeMB = info.sizeInBytes()/(1024.*1024.);\n        msg(\"    size (MB)=\" + nf.format(segInfoStat.sizeMB));\n        Map<String,String> diagnostics = info.getDiagnostics();\n        segInfoStat.diagnostics = diagnostics;\n        if (diagnostics.size() > 0) {\n          msg(\"    diagnostics = \" + diagnostics);\n        }\n\n        final int docStoreOffset = info.getDocStoreOffset();\n        if (docStoreOffset != -1) {\n          msg(\"    docStoreOffset=\" + docStoreOffset);\n          segInfoStat.docStoreOffset = docStoreOffset;\n          msg(\"    docStoreSegment=\" + info.getDocStoreSegment());\n          segInfoStat.docStoreSegment = info.getDocStoreSegment();\n          msg(\"    docStoreIsCompoundFile=\" + info.getDocStoreIsCompoundFile());\n          segInfoStat.docStoreCompoundFile = info.getDocStoreIsCompoundFile();\n        }\n\n        final String delFileName = info.getDelFileName();\n        if (delFileName == null){\n          msg(\"    no deletions\");\n          segInfoStat.hasDeletions = false;\n        }\n        else{\n          msg(\"    has deletions [delFileName=\" + delFileName + \"]\");\n          segInfoStat.hasDeletions = true;\n          segInfoStat.deletionsFileName = delFileName;\n        }\n        if (infoStream != null)\n          infoStream.print(\"    test: open reader.........\");\n        reader = new SegmentReader(info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, IOContext.DEFAULT);\n\n        segInfoStat.openReaderPassed = true;\n\n        final int numDocs = reader.numDocs();\n        toLoseDocCount = numDocs;\n        if (reader.hasDeletions()) {\n          if (reader.numDocs() != info.docCount - info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + (info.docCount - info.getDelCount()) + \" vs reader=\" + reader.numDocs());\n          }\n          if ((info.docCount-reader.numDocs()) > reader.maxDoc()) {\n            throw new RuntimeException(\"too many deleted docs: maxDoc()=\" + reader.maxDoc() + \" vs del count=\" + (info.docCount-reader.numDocs()));\n          }\n          if (info.docCount - numDocs != info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          segInfoStat.numDeleted = info.docCount - numDocs;\n          msg(\"OK [\" + (segInfoStat.numDeleted) + \" deleted docs]\");\n        } else {\n          if (info.getDelCount() != 0) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          msg(\"OK\");\n        }\n        if (reader.maxDoc() != info.docCount)\n          throw new RuntimeException(\"SegmentReader.maxDoc() \" + reader.maxDoc() + \" != SegmentInfos.docCount \" + info.docCount);\n\n        // Test getFieldNames()\n        if (infoStream != null) {\n          infoStream.print(\"    test: fields..............\");\n        }         \n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        msg(\"OK [\" + fieldNames.size() + \" fields]\");\n        segInfoStat.numFields = fieldNames.size();\n        \n        // Test Field Norms\n        segInfoStat.fieldNormStatus = testFieldNorms(fieldNames, reader);\n\n        // Test the Term Index\n        segInfoStat.termIndexStatus = testTermIndex(reader);\n\n        // Test Stored Fields\n        segInfoStat.storedFieldStatus = testStoredFields(info, reader, nf);\n\n        // Test Term Vectors\n        segInfoStat.termVectorStatus = testTermVectors(info, reader, nf);\n        \n        segInfoStat.docValuesStatus = testDocValues(info, reader);\n\n        // Rethrow the first exception we encountered\n        //  This will cause stats for failed segments to be incremented properly\n        if (segInfoStat.fieldNormStatus.error != null) {\n          throw new RuntimeException(\"Field Norm test failed\");\n        } else if (segInfoStat.termIndexStatus.error != null) {\n          throw new RuntimeException(\"Term Index test failed\");\n        } else if (segInfoStat.storedFieldStatus.error != null) {\n          throw new RuntimeException(\"Stored Field test failed\");\n        } else if (segInfoStat.termVectorStatus.error != null) {\n          throw new RuntimeException(\"Term Vector test failed\");\n        }  else if (segInfoStat.docValuesStatus.error != null) {\n          throw new RuntimeException(\"DocValues test failed\");\n        }\n\n        msg(\"\");\n\n      } catch (Throwable t) {\n        msg(\"FAILED\");\n        String comment;\n        comment = \"fixIndex() would remove reference to this segment\";\n        msg(\"    WARNING: \" + comment + \"; full exception:\");\n        if (infoStream != null)\n          t.printStackTrace(infoStream);\n        msg(\"\");\n        result.totLoseDocCount += toLoseDocCount;\n        result.numBadSegments++;\n        continue;\n      } finally {\n        if (reader != null)\n          reader.close();\n      }\n\n      // Keeper\n      result.newSegments.add((SegmentInfo) info.clone());\n    }\n\n    if (0 == result.numBadSegments) {\n      result.clean = true;\n    } else\n      msg(\"WARNING: \" + result.numBadSegments + \" broken segments (containing \" + result.totLoseDocCount + \" documents) detected\");\n\n    if ( ! (result.validCounter = (result.maxSegmentName < sis.counter))) {\n      result.clean = false;\n      result.newSegments.counter = result.maxSegmentName + 1; \n      msg(\"ERROR: Next segment name counter \" + sis.counter + \" is not greater than max segment name \" + result.maxSegmentName);\n    }\n    \n    if (result.clean) {\n      msg(\"No problems were detected with this index.\\n\");\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /** Returns a {@link Status} instance detailing\n   *  the state of the index.\n   * \n   *  @param onlySegments list of specific segment names to check\n   *\n   *  <p>As this method checks every byte in the specified\n   *  segments, on a large index it can take quite a long\n   *  time to run.\n   *\n   *  <p><b>WARNING</b>: make sure\n   *  you only call this when the index is not opened by any\n   *  writer. */\n  public Status checkIndex(List<String> onlySegments) throws IOException {\n    NumberFormat nf = NumberFormat.getInstance();\n    SegmentInfos sis = new SegmentInfos();\n    Status result = new Status();\n    result.dir = dir;\n    try {\n      sis.read(dir);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read any segments file in directory\");\n      result.missingSegments = true;\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      return result;\n    }\n\n    // find the oldest and newest segment versions\n    String oldest = Integer.toString(Integer.MAX_VALUE), newest = Integer.toString(Integer.MIN_VALUE);\n    String oldSegs = null;\n    boolean foundNonNullVersion = false;\n    Comparator<String> versionComparator = StringHelper.getVersionComparator();\n    for (SegmentInfo si : sis) {\n      String version = si.getVersion();\n      if (version == null) {\n        // pre-3.1 segment\n        oldSegs = \"pre-3.1\";\n      } else {\n        foundNonNullVersion = true;\n        if (versionComparator.compare(version, oldest) < 0) {\n          oldest = version;\n        }\n        if (versionComparator.compare(version, newest) > 0) {\n          newest = version;\n        }\n      }\n    }\n\n    final int numSegments = sis.size();\n    final String segmentsFileName = sis.getCurrentSegmentFileName();\n    // note: we only read the format byte (required preamble) here!\n    IndexInput input = null;\n    try {\n      input = dir.openInput(segmentsFileName, IOContext.DEFAULT);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not open segments file in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.cantOpenSegments = true;\n      return result;\n    }\n    int format = 0;\n    try {\n      format = input.readInt();\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read segment file version in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.missingSegmentVersion = true;\n      return result;\n    } finally {\n      if (input != null)\n        input.close();\n    }\n\n    String sFormat = \"\";\n    boolean skip = false;\n\n    if (format == SegmentInfos.FORMAT_DIAGNOSTICS) {\n      sFormat = \"FORMAT_DIAGNOSTICS [Lucene 2.9]\";\n    } else if (format == SegmentInfos.FORMAT_HAS_VECTORS) {\n      sFormat = \"FORMAT_HAS_VECTORS [Lucene 3.1]\";\n    } else if (format == SegmentInfos.FORMAT_3_1) {\n      sFormat = \"FORMAT_3_1 [Lucene 3.1+]\";\n    } else if (format == SegmentInfos.FORMAT_4_0) {\n      sFormat = \"FORMAT_4_0 [Lucene 4.0]\";\n    } else if (format == SegmentInfos.FORMAT_CURRENT) {\n      throw new RuntimeException(\"BUG: You should update this tool!\");\n    } else if (format < SegmentInfos.FORMAT_CURRENT) {\n      sFormat = \"int=\" + format + \" [newer version of Lucene than this tool supports]\";\n      skip = true;\n    } else if (format > SegmentInfos.FORMAT_MINIMUM) {\n      sFormat = \"int=\" + format + \" [older version of Lucene than this tool supports]\";\n      skip = true;\n    }\n\n    result.segmentsFileName = segmentsFileName;\n    result.numSegments = numSegments;\n    result.segmentFormat = sFormat;\n    result.userData = sis.getUserData();\n    String userDataString;\n    if (sis.getUserData().size() > 0) {\n      userDataString = \" userData=\" + sis.getUserData();\n    } else {\n      userDataString = \"\";\n    }\n\n    String versionString = null;\n    if (oldSegs != null) {\n      if (foundNonNullVersion) {\n        versionString = \"versions=[\" + oldSegs + \" .. \" + newest + \"]\";\n      } else {\n        versionString = \"version=\" + oldSegs;\n      }\n    } else {\n      versionString = oldest.equals(newest) ? ( \"version=\" + oldest ) : (\"versions=[\" + oldest + \" .. \" + newest + \"]\");\n    }\n\n    msg(\"Segments file=\" + segmentsFileName + \" numSegments=\" + numSegments\n        + \" \" + versionString + \" format=\" + sFormat + userDataString);\n\n    if (onlySegments != null) {\n      result.partial = true;\n      if (infoStream != null)\n        infoStream.print(\"\\nChecking only these segments:\");\n      for (String s : onlySegments) {\n        if (infoStream != null)\n          infoStream.print(\" \" + s);\n      }\n      result.segmentsChecked.addAll(onlySegments);\n      msg(\":\");\n    }\n\n    if (skip) {\n      msg(\"\\nERROR: this index appears to be created by a newer version of Lucene than this tool was compiled on; please re-compile this tool on the matching version of Lucene; exiting\");\n      result.toolOutOfDate = true;\n      return result;\n    }\n\n\n    result.newSegments = (SegmentInfos) sis.clone();\n    result.newSegments.clear();\n    result.maxSegmentName = -1;\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = sis.info(i);\n      int segmentName = Integer.parseInt(info.name.substring(1), Character.MAX_RADIX);\n      if (segmentName > result.maxSegmentName) {\n        result.maxSegmentName = segmentName;\n      }\n      if (onlySegments != null && !onlySegments.contains(info.name))\n        continue;\n      Status.SegmentInfoStatus segInfoStat = new Status.SegmentInfoStatus();\n      result.segmentInfos.add(segInfoStat);\n      msg(\"  \" + (1+i) + \" of \" + numSegments + \": name=\" + info.name + \" docCount=\" + info.docCount);\n      segInfoStat.name = info.name;\n      segInfoStat.docCount = info.docCount;\n\n      int toLoseDocCount = info.docCount;\n\n      SegmentReader reader = null;\n\n      try {\n        final Codec codec = info.getCodec();\n        msg(\"    codec=\" + codec);\n        segInfoStat.codec = codec;\n        msg(\"    compound=\" + info.getUseCompoundFile());\n        segInfoStat.compound = info.getUseCompoundFile();\n        msg(\"    hasProx=\" + info.getHasProx());\n        segInfoStat.hasProx = info.getHasProx();\n        msg(\"    numFiles=\" + info.files().size());\n        segInfoStat.numFiles = info.files().size();\n        segInfoStat.sizeMB = info.sizeInBytes()/(1024.*1024.);\n        msg(\"    size (MB)=\" + nf.format(segInfoStat.sizeMB));\n        Map<String,String> diagnostics = info.getDiagnostics();\n        segInfoStat.diagnostics = diagnostics;\n        if (diagnostics.size() > 0) {\n          msg(\"    diagnostics = \" + diagnostics);\n        }\n\n        final int docStoreOffset = info.getDocStoreOffset();\n        if (docStoreOffset != -1) {\n          msg(\"    docStoreOffset=\" + docStoreOffset);\n          segInfoStat.docStoreOffset = docStoreOffset;\n          msg(\"    docStoreSegment=\" + info.getDocStoreSegment());\n          segInfoStat.docStoreSegment = info.getDocStoreSegment();\n          msg(\"    docStoreIsCompoundFile=\" + info.getDocStoreIsCompoundFile());\n          segInfoStat.docStoreCompoundFile = info.getDocStoreIsCompoundFile();\n        }\n\n        final String delFileName = info.getDelFileName();\n        if (delFileName == null){\n          msg(\"    no deletions\");\n          segInfoStat.hasDeletions = false;\n        }\n        else{\n          msg(\"    has deletions [delFileName=\" + delFileName + \"]\");\n          segInfoStat.hasDeletions = true;\n          segInfoStat.deletionsFileName = delFileName;\n        }\n        if (infoStream != null)\n          infoStream.print(\"    test: open reader.........\");\n        reader = SegmentReader.get(info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, IOContext.DEFAULT);\n\n        segInfoStat.openReaderPassed = true;\n\n        final int numDocs = reader.numDocs();\n        toLoseDocCount = numDocs;\n        if (reader.hasDeletions()) {\n          if (reader.liveDocs.count() != info.docCount - info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + (info.docCount - info.getDelCount()) + \" vs reader=\" + reader.liveDocs.count());\n          }\n          if ((info.docCount-reader.liveDocs.count()) > reader.maxDoc()) {\n            throw new RuntimeException(\"too many deleted docs: maxDoc()=\" + reader.maxDoc() + \" vs del count=\" + (info.docCount-reader.liveDocs.count()));\n          }\n          if (info.docCount - numDocs != info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          segInfoStat.numDeleted = info.docCount - numDocs;\n          msg(\"OK [\" + (segInfoStat.numDeleted) + \" deleted docs]\");\n        } else {\n          if (info.getDelCount() != 0) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          msg(\"OK\");\n        }\n        if (reader.maxDoc() != info.docCount)\n          throw new RuntimeException(\"SegmentReader.maxDoc() \" + reader.maxDoc() + \" != SegmentInfos.docCount \" + info.docCount);\n\n        // Test getFieldNames()\n        if (infoStream != null) {\n          infoStream.print(\"    test: fields..............\");\n        }         \n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        msg(\"OK [\" + fieldNames.size() + \" fields]\");\n        segInfoStat.numFields = fieldNames.size();\n        \n        // Test Field Norms\n        segInfoStat.fieldNormStatus = testFieldNorms(fieldNames, reader);\n\n        // Test the Term Index\n        segInfoStat.termIndexStatus = testTermIndex(reader);\n\n        // Test Stored Fields\n        segInfoStat.storedFieldStatus = testStoredFields(info, reader, nf);\n\n        // Test Term Vectors\n        segInfoStat.termVectorStatus = testTermVectors(info, reader, nf);\n        \n        segInfoStat.docValuesStatus = testDocValues(info, reader);\n\n        // Rethrow the first exception we encountered\n        //  This will cause stats for failed segments to be incremented properly\n        if (segInfoStat.fieldNormStatus.error != null) {\n          throw new RuntimeException(\"Field Norm test failed\");\n        } else if (segInfoStat.termIndexStatus.error != null) {\n          throw new RuntimeException(\"Term Index test failed\");\n        } else if (segInfoStat.storedFieldStatus.error != null) {\n          throw new RuntimeException(\"Stored Field test failed\");\n        } else if (segInfoStat.termVectorStatus.error != null) {\n          throw new RuntimeException(\"Term Vector test failed\");\n        }  else if (segInfoStat.docValuesStatus.error != null) {\n          throw new RuntimeException(\"DocValues test failed\");\n        }\n\n        msg(\"\");\n\n      } catch (Throwable t) {\n        msg(\"FAILED\");\n        String comment;\n        comment = \"fixIndex() would remove reference to this segment\";\n        msg(\"    WARNING: \" + comment + \"; full exception:\");\n        if (infoStream != null)\n          t.printStackTrace(infoStream);\n        msg(\"\");\n        result.totLoseDocCount += toLoseDocCount;\n        result.numBadSegments++;\n        continue;\n      } finally {\n        if (reader != null)\n          reader.close();\n      }\n\n      // Keeper\n      result.newSegments.add((SegmentInfo) info.clone());\n    }\n\n    if (0 == result.numBadSegments) {\n      result.clean = true;\n    } else\n      msg(\"WARNING: \" + result.numBadSegments + \" broken segments (containing \" + result.totLoseDocCount + \" documents) detected\");\n\n    if ( ! (result.validCounter = (result.maxSegmentName < sis.counter))) {\n      result.clean = false;\n      result.newSegments.counter = result.maxSegmentName + 1; \n      msg(\"ERROR: Next segment name counter \" + sis.counter + \" is not greater than max segment name \" + result.maxSegmentName);\n    }\n    \n    if (result.clean) {\n      msg(\"No problems were detected with this index.\\n\");\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06","date":1326148180,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CheckIndex#checkIndex(List[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CheckIndex#checkIndex(List[String]).mjava","sourceNew":"  /** Returns a {@link Status} instance detailing\n   *  the state of the index.\n   * \n   *  @param onlySegments list of specific segment names to check\n   *\n   *  <p>As this method checks every byte in the specified\n   *  segments, on a large index it can take quite a long\n   *  time to run.\n   *\n   *  <p><b>WARNING</b>: make sure\n   *  you only call this when the index is not opened by any\n   *  writer. */\n  public Status checkIndex(List<String> onlySegments) throws IOException {\n    NumberFormat nf = NumberFormat.getInstance();\n    SegmentInfos sis = new SegmentInfos();\n    Status result = new Status();\n    result.dir = dir;\n    try {\n      sis.read(dir);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read any segments file in directory\");\n      result.missingSegments = true;\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      return result;\n    }\n\n    // find the oldest and newest segment versions\n    String oldest = Integer.toString(Integer.MAX_VALUE), newest = Integer.toString(Integer.MIN_VALUE);\n    String oldSegs = null;\n    boolean foundNonNullVersion = false;\n    Comparator<String> versionComparator = StringHelper.getVersionComparator();\n    for (SegmentInfo si : sis) {\n      String version = si.getVersion();\n      if (version == null) {\n        // pre-3.1 segment\n        oldSegs = \"pre-3.1\";\n      } else {\n        foundNonNullVersion = true;\n        if (versionComparator.compare(version, oldest) < 0) {\n          oldest = version;\n        }\n        if (versionComparator.compare(version, newest) > 0) {\n          newest = version;\n        }\n      }\n    }\n\n    final int numSegments = sis.size();\n    final String segmentsFileName = sis.getCurrentSegmentFileName();\n    // note: we only read the format byte (required preamble) here!\n    IndexInput input = null;\n    try {\n      input = dir.openInput(segmentsFileName, IOContext.DEFAULT);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not open segments file in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.cantOpenSegments = true;\n      return result;\n    }\n    int format = 0;\n    try {\n      format = input.readInt();\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read segment file version in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.missingSegmentVersion = true;\n      return result;\n    } finally {\n      if (input != null)\n        input.close();\n    }\n\n    String sFormat = \"\";\n    boolean skip = false;\n\n    if (format == SegmentInfos.FORMAT_DIAGNOSTICS) {\n      sFormat = \"FORMAT_DIAGNOSTICS [Lucene 2.9]\";\n    } else if (format == SegmentInfos.FORMAT_HAS_VECTORS) {\n      sFormat = \"FORMAT_HAS_VECTORS [Lucene 3.1]\";\n    } else if (format == SegmentInfos.FORMAT_3_1) {\n      sFormat = \"FORMAT_3_1 [Lucene 3.1+]\";\n    } else if (format == SegmentInfos.FORMAT_4_0) {\n      sFormat = \"FORMAT_4_0 [Lucene 4.0]\";\n    } else if (format == SegmentInfos.FORMAT_CURRENT) {\n      throw new RuntimeException(\"BUG: You should update this tool!\");\n    } else if (format < SegmentInfos.FORMAT_CURRENT) {\n      sFormat = \"int=\" + format + \" [newer version of Lucene than this tool supports]\";\n      skip = true;\n    } else if (format > SegmentInfos.FORMAT_MINIMUM) {\n      sFormat = \"int=\" + format + \" [older version of Lucene than this tool supports]\";\n      skip = true;\n    }\n\n    result.segmentsFileName = segmentsFileName;\n    result.numSegments = numSegments;\n    result.segmentFormat = sFormat;\n    result.userData = sis.getUserData();\n    String userDataString;\n    if (sis.getUserData().size() > 0) {\n      userDataString = \" userData=\" + sis.getUserData();\n    } else {\n      userDataString = \"\";\n    }\n\n    String versionString = null;\n    if (oldSegs != null) {\n      if (foundNonNullVersion) {\n        versionString = \"versions=[\" + oldSegs + \" .. \" + newest + \"]\";\n      } else {\n        versionString = \"version=\" + oldSegs;\n      }\n    } else {\n      versionString = oldest.equals(newest) ? ( \"version=\" + oldest ) : (\"versions=[\" + oldest + \" .. \" + newest + \"]\");\n    }\n\n    msg(\"Segments file=\" + segmentsFileName + \" numSegments=\" + numSegments\n        + \" \" + versionString + \" format=\" + sFormat + userDataString);\n\n    if (onlySegments != null) {\n      result.partial = true;\n      if (infoStream != null)\n        infoStream.print(\"\\nChecking only these segments:\");\n      for (String s : onlySegments) {\n        if (infoStream != null)\n          infoStream.print(\" \" + s);\n      }\n      result.segmentsChecked.addAll(onlySegments);\n      msg(\":\");\n    }\n\n    if (skip) {\n      msg(\"\\nERROR: this index appears to be created by a newer version of Lucene than this tool was compiled on; please re-compile this tool on the matching version of Lucene; exiting\");\n      result.toolOutOfDate = true;\n      return result;\n    }\n\n\n    result.newSegments = (SegmentInfos) sis.clone();\n    result.newSegments.clear();\n    result.maxSegmentName = -1;\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = sis.info(i);\n      int segmentName = Integer.parseInt(info.name.substring(1), Character.MAX_RADIX);\n      if (segmentName > result.maxSegmentName) {\n        result.maxSegmentName = segmentName;\n      }\n      if (onlySegments != null && !onlySegments.contains(info.name))\n        continue;\n      Status.SegmentInfoStatus segInfoStat = new Status.SegmentInfoStatus();\n      result.segmentInfos.add(segInfoStat);\n      msg(\"  \" + (1+i) + \" of \" + numSegments + \": name=\" + info.name + \" docCount=\" + info.docCount);\n      segInfoStat.name = info.name;\n      segInfoStat.docCount = info.docCount;\n\n      int toLoseDocCount = info.docCount;\n\n      SegmentReader reader = null;\n\n      try {\n        final Codec codec = info.getCodec();\n        msg(\"    codec=\" + codec);\n        segInfoStat.codec = codec;\n        msg(\"    compound=\" + info.getUseCompoundFile());\n        segInfoStat.compound = info.getUseCompoundFile();\n        msg(\"    hasProx=\" + info.getHasProx());\n        segInfoStat.hasProx = info.getHasProx();\n        msg(\"    numFiles=\" + info.files().size());\n        segInfoStat.numFiles = info.files().size();\n        segInfoStat.sizeMB = info.sizeInBytes()/(1024.*1024.);\n        msg(\"    size (MB)=\" + nf.format(segInfoStat.sizeMB));\n        Map<String,String> diagnostics = info.getDiagnostics();\n        segInfoStat.diagnostics = diagnostics;\n        if (diagnostics.size() > 0) {\n          msg(\"    diagnostics = \" + diagnostics);\n        }\n\n        final int docStoreOffset = info.getDocStoreOffset();\n        if (docStoreOffset != -1) {\n          msg(\"    docStoreOffset=\" + docStoreOffset);\n          segInfoStat.docStoreOffset = docStoreOffset;\n          msg(\"    docStoreSegment=\" + info.getDocStoreSegment());\n          segInfoStat.docStoreSegment = info.getDocStoreSegment();\n          msg(\"    docStoreIsCompoundFile=\" + info.getDocStoreIsCompoundFile());\n          segInfoStat.docStoreCompoundFile = info.getDocStoreIsCompoundFile();\n        }\n\n        final String delFileName = info.getDelFileName();\n        if (delFileName == null){\n          msg(\"    no deletions\");\n          segInfoStat.hasDeletions = false;\n        }\n        else{\n          msg(\"    has deletions [delFileName=\" + delFileName + \"]\");\n          segInfoStat.hasDeletions = true;\n          segInfoStat.deletionsFileName = delFileName;\n        }\n        if (infoStream != null)\n          infoStream.print(\"    test: open reader.........\");\n        reader = new SegmentReader(info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, IOContext.DEFAULT);\n\n        segInfoStat.openReaderPassed = true;\n\n        final int numDocs = reader.numDocs();\n        toLoseDocCount = numDocs;\n        if (reader.hasDeletions()) {\n          if (reader.numDocs() != info.docCount - info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + (info.docCount - info.getDelCount()) + \" vs reader=\" + reader.numDocs());\n          }\n          if ((info.docCount-reader.numDocs()) > reader.maxDoc()) {\n            throw new RuntimeException(\"too many deleted docs: maxDoc()=\" + reader.maxDoc() + \" vs del count=\" + (info.docCount-reader.numDocs()));\n          }\n          if (info.docCount - numDocs != info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          segInfoStat.numDeleted = info.docCount - numDocs;\n          msg(\"OK [\" + (segInfoStat.numDeleted) + \" deleted docs]\");\n        } else {\n          if (info.getDelCount() != 0) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          msg(\"OK\");\n        }\n        if (reader.maxDoc() != info.docCount)\n          throw new RuntimeException(\"SegmentReader.maxDoc() \" + reader.maxDoc() + \" != SegmentInfos.docCount \" + info.docCount);\n\n        // Test getFieldInfos()\n        if (infoStream != null) {\n          infoStream.print(\"    test: fields..............\");\n        }         \n        FieldInfos fieldInfos = reader.getFieldInfos();\n        msg(\"OK [\" + fieldInfos.size() + \" fields]\");\n        segInfoStat.numFields = fieldInfos.size();\n        \n        // Test Field Norms\n        segInfoStat.fieldNormStatus = testFieldNorms(fieldInfos, reader);\n\n        // Test the Term Index\n        segInfoStat.termIndexStatus = testTermIndex(reader);\n\n        // Test Stored Fields\n        segInfoStat.storedFieldStatus = testStoredFields(info, reader, nf);\n\n        // Test Term Vectors\n        segInfoStat.termVectorStatus = testTermVectors(info, reader, nf);\n        \n        segInfoStat.docValuesStatus = testDocValues(info, reader);\n\n        // Rethrow the first exception we encountered\n        //  This will cause stats for failed segments to be incremented properly\n        if (segInfoStat.fieldNormStatus.error != null) {\n          throw new RuntimeException(\"Field Norm test failed\");\n        } else if (segInfoStat.termIndexStatus.error != null) {\n          throw new RuntimeException(\"Term Index test failed\");\n        } else if (segInfoStat.storedFieldStatus.error != null) {\n          throw new RuntimeException(\"Stored Field test failed\");\n        } else if (segInfoStat.termVectorStatus.error != null) {\n          throw new RuntimeException(\"Term Vector test failed\");\n        }  else if (segInfoStat.docValuesStatus.error != null) {\n          throw new RuntimeException(\"DocValues test failed\");\n        }\n\n        msg(\"\");\n\n      } catch (Throwable t) {\n        msg(\"FAILED\");\n        String comment;\n        comment = \"fixIndex() would remove reference to this segment\";\n        msg(\"    WARNING: \" + comment + \"; full exception:\");\n        if (infoStream != null)\n          t.printStackTrace(infoStream);\n        msg(\"\");\n        result.totLoseDocCount += toLoseDocCount;\n        result.numBadSegments++;\n        continue;\n      } finally {\n        if (reader != null)\n          reader.close();\n      }\n\n      // Keeper\n      result.newSegments.add((SegmentInfo) info.clone());\n    }\n\n    if (0 == result.numBadSegments) {\n      result.clean = true;\n    } else\n      msg(\"WARNING: \" + result.numBadSegments + \" broken segments (containing \" + result.totLoseDocCount + \" documents) detected\");\n\n    if ( ! (result.validCounter = (result.maxSegmentName < sis.counter))) {\n      result.clean = false;\n      result.newSegments.counter = result.maxSegmentName + 1; \n      msg(\"ERROR: Next segment name counter \" + sis.counter + \" is not greater than max segment name \" + result.maxSegmentName);\n    }\n    \n    if (result.clean) {\n      msg(\"No problems were detected with this index.\\n\");\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /** Returns a {@link Status} instance detailing\n   *  the state of the index.\n   * \n   *  @param onlySegments list of specific segment names to check\n   *\n   *  <p>As this method checks every byte in the specified\n   *  segments, on a large index it can take quite a long\n   *  time to run.\n   *\n   *  <p><b>WARNING</b>: make sure\n   *  you only call this when the index is not opened by any\n   *  writer. */\n  public Status checkIndex(List<String> onlySegments) throws IOException {\n    NumberFormat nf = NumberFormat.getInstance();\n    SegmentInfos sis = new SegmentInfos();\n    Status result = new Status();\n    result.dir = dir;\n    try {\n      sis.read(dir);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read any segments file in directory\");\n      result.missingSegments = true;\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      return result;\n    }\n\n    // find the oldest and newest segment versions\n    String oldest = Integer.toString(Integer.MAX_VALUE), newest = Integer.toString(Integer.MIN_VALUE);\n    String oldSegs = null;\n    boolean foundNonNullVersion = false;\n    Comparator<String> versionComparator = StringHelper.getVersionComparator();\n    for (SegmentInfo si : sis) {\n      String version = si.getVersion();\n      if (version == null) {\n        // pre-3.1 segment\n        oldSegs = \"pre-3.1\";\n      } else {\n        foundNonNullVersion = true;\n        if (versionComparator.compare(version, oldest) < 0) {\n          oldest = version;\n        }\n        if (versionComparator.compare(version, newest) > 0) {\n          newest = version;\n        }\n      }\n    }\n\n    final int numSegments = sis.size();\n    final String segmentsFileName = sis.getCurrentSegmentFileName();\n    // note: we only read the format byte (required preamble) here!\n    IndexInput input = null;\n    try {\n      input = dir.openInput(segmentsFileName, IOContext.DEFAULT);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not open segments file in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.cantOpenSegments = true;\n      return result;\n    }\n    int format = 0;\n    try {\n      format = input.readInt();\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read segment file version in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.missingSegmentVersion = true;\n      return result;\n    } finally {\n      if (input != null)\n        input.close();\n    }\n\n    String sFormat = \"\";\n    boolean skip = false;\n\n    if (format == SegmentInfos.FORMAT_DIAGNOSTICS) {\n      sFormat = \"FORMAT_DIAGNOSTICS [Lucene 2.9]\";\n    } else if (format == SegmentInfos.FORMAT_HAS_VECTORS) {\n      sFormat = \"FORMAT_HAS_VECTORS [Lucene 3.1]\";\n    } else if (format == SegmentInfos.FORMAT_3_1) {\n      sFormat = \"FORMAT_3_1 [Lucene 3.1+]\";\n    } else if (format == SegmentInfos.FORMAT_4_0) {\n      sFormat = \"FORMAT_4_0 [Lucene 4.0]\";\n    } else if (format == SegmentInfos.FORMAT_CURRENT) {\n      throw new RuntimeException(\"BUG: You should update this tool!\");\n    } else if (format < SegmentInfos.FORMAT_CURRENT) {\n      sFormat = \"int=\" + format + \" [newer version of Lucene than this tool supports]\";\n      skip = true;\n    } else if (format > SegmentInfos.FORMAT_MINIMUM) {\n      sFormat = \"int=\" + format + \" [older version of Lucene than this tool supports]\";\n      skip = true;\n    }\n\n    result.segmentsFileName = segmentsFileName;\n    result.numSegments = numSegments;\n    result.segmentFormat = sFormat;\n    result.userData = sis.getUserData();\n    String userDataString;\n    if (sis.getUserData().size() > 0) {\n      userDataString = \" userData=\" + sis.getUserData();\n    } else {\n      userDataString = \"\";\n    }\n\n    String versionString = null;\n    if (oldSegs != null) {\n      if (foundNonNullVersion) {\n        versionString = \"versions=[\" + oldSegs + \" .. \" + newest + \"]\";\n      } else {\n        versionString = \"version=\" + oldSegs;\n      }\n    } else {\n      versionString = oldest.equals(newest) ? ( \"version=\" + oldest ) : (\"versions=[\" + oldest + \" .. \" + newest + \"]\");\n    }\n\n    msg(\"Segments file=\" + segmentsFileName + \" numSegments=\" + numSegments\n        + \" \" + versionString + \" format=\" + sFormat + userDataString);\n\n    if (onlySegments != null) {\n      result.partial = true;\n      if (infoStream != null)\n        infoStream.print(\"\\nChecking only these segments:\");\n      for (String s : onlySegments) {\n        if (infoStream != null)\n          infoStream.print(\" \" + s);\n      }\n      result.segmentsChecked.addAll(onlySegments);\n      msg(\":\");\n    }\n\n    if (skip) {\n      msg(\"\\nERROR: this index appears to be created by a newer version of Lucene than this tool was compiled on; please re-compile this tool on the matching version of Lucene; exiting\");\n      result.toolOutOfDate = true;\n      return result;\n    }\n\n\n    result.newSegments = (SegmentInfos) sis.clone();\n    result.newSegments.clear();\n    result.maxSegmentName = -1;\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = sis.info(i);\n      int segmentName = Integer.parseInt(info.name.substring(1), Character.MAX_RADIX);\n      if (segmentName > result.maxSegmentName) {\n        result.maxSegmentName = segmentName;\n      }\n      if (onlySegments != null && !onlySegments.contains(info.name))\n        continue;\n      Status.SegmentInfoStatus segInfoStat = new Status.SegmentInfoStatus();\n      result.segmentInfos.add(segInfoStat);\n      msg(\"  \" + (1+i) + \" of \" + numSegments + \": name=\" + info.name + \" docCount=\" + info.docCount);\n      segInfoStat.name = info.name;\n      segInfoStat.docCount = info.docCount;\n\n      int toLoseDocCount = info.docCount;\n\n      SegmentReader reader = null;\n\n      try {\n        final Codec codec = info.getCodec();\n        msg(\"    codec=\" + codec);\n        segInfoStat.codec = codec;\n        msg(\"    compound=\" + info.getUseCompoundFile());\n        segInfoStat.compound = info.getUseCompoundFile();\n        msg(\"    hasProx=\" + info.getHasProx());\n        segInfoStat.hasProx = info.getHasProx();\n        msg(\"    numFiles=\" + info.files().size());\n        segInfoStat.numFiles = info.files().size();\n        segInfoStat.sizeMB = info.sizeInBytes()/(1024.*1024.);\n        msg(\"    size (MB)=\" + nf.format(segInfoStat.sizeMB));\n        Map<String,String> diagnostics = info.getDiagnostics();\n        segInfoStat.diagnostics = diagnostics;\n        if (diagnostics.size() > 0) {\n          msg(\"    diagnostics = \" + diagnostics);\n        }\n\n        final int docStoreOffset = info.getDocStoreOffset();\n        if (docStoreOffset != -1) {\n          msg(\"    docStoreOffset=\" + docStoreOffset);\n          segInfoStat.docStoreOffset = docStoreOffset;\n          msg(\"    docStoreSegment=\" + info.getDocStoreSegment());\n          segInfoStat.docStoreSegment = info.getDocStoreSegment();\n          msg(\"    docStoreIsCompoundFile=\" + info.getDocStoreIsCompoundFile());\n          segInfoStat.docStoreCompoundFile = info.getDocStoreIsCompoundFile();\n        }\n\n        final String delFileName = info.getDelFileName();\n        if (delFileName == null){\n          msg(\"    no deletions\");\n          segInfoStat.hasDeletions = false;\n        }\n        else{\n          msg(\"    has deletions [delFileName=\" + delFileName + \"]\");\n          segInfoStat.hasDeletions = true;\n          segInfoStat.deletionsFileName = delFileName;\n        }\n        if (infoStream != null)\n          infoStream.print(\"    test: open reader.........\");\n        reader = new SegmentReader(info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, IOContext.DEFAULT);\n\n        segInfoStat.openReaderPassed = true;\n\n        final int numDocs = reader.numDocs();\n        toLoseDocCount = numDocs;\n        if (reader.hasDeletions()) {\n          if (reader.numDocs() != info.docCount - info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + (info.docCount - info.getDelCount()) + \" vs reader=\" + reader.numDocs());\n          }\n          if ((info.docCount-reader.numDocs()) > reader.maxDoc()) {\n            throw new RuntimeException(\"too many deleted docs: maxDoc()=\" + reader.maxDoc() + \" vs del count=\" + (info.docCount-reader.numDocs()));\n          }\n          if (info.docCount - numDocs != info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          segInfoStat.numDeleted = info.docCount - numDocs;\n          msg(\"OK [\" + (segInfoStat.numDeleted) + \" deleted docs]\");\n        } else {\n          if (info.getDelCount() != 0) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          msg(\"OK\");\n        }\n        if (reader.maxDoc() != info.docCount)\n          throw new RuntimeException(\"SegmentReader.maxDoc() \" + reader.maxDoc() + \" != SegmentInfos.docCount \" + info.docCount);\n\n        // Test getFieldNames()\n        if (infoStream != null) {\n          infoStream.print(\"    test: fields..............\");\n        }         \n        Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n        msg(\"OK [\" + fieldNames.size() + \" fields]\");\n        segInfoStat.numFields = fieldNames.size();\n        \n        // Test Field Norms\n        segInfoStat.fieldNormStatus = testFieldNorms(fieldNames, reader);\n\n        // Test the Term Index\n        segInfoStat.termIndexStatus = testTermIndex(reader);\n\n        // Test Stored Fields\n        segInfoStat.storedFieldStatus = testStoredFields(info, reader, nf);\n\n        // Test Term Vectors\n        segInfoStat.termVectorStatus = testTermVectors(info, reader, nf);\n        \n        segInfoStat.docValuesStatus = testDocValues(info, reader);\n\n        // Rethrow the first exception we encountered\n        //  This will cause stats for failed segments to be incremented properly\n        if (segInfoStat.fieldNormStatus.error != null) {\n          throw new RuntimeException(\"Field Norm test failed\");\n        } else if (segInfoStat.termIndexStatus.error != null) {\n          throw new RuntimeException(\"Term Index test failed\");\n        } else if (segInfoStat.storedFieldStatus.error != null) {\n          throw new RuntimeException(\"Stored Field test failed\");\n        } else if (segInfoStat.termVectorStatus.error != null) {\n          throw new RuntimeException(\"Term Vector test failed\");\n        }  else if (segInfoStat.docValuesStatus.error != null) {\n          throw new RuntimeException(\"DocValues test failed\");\n        }\n\n        msg(\"\");\n\n      } catch (Throwable t) {\n        msg(\"FAILED\");\n        String comment;\n        comment = \"fixIndex() would remove reference to this segment\";\n        msg(\"    WARNING: \" + comment + \"; full exception:\");\n        if (infoStream != null)\n          t.printStackTrace(infoStream);\n        msg(\"\");\n        result.totLoseDocCount += toLoseDocCount;\n        result.numBadSegments++;\n        continue;\n      } finally {\n        if (reader != null)\n          reader.close();\n      }\n\n      // Keeper\n      result.newSegments.add((SegmentInfo) info.clone());\n    }\n\n    if (0 == result.numBadSegments) {\n      result.clean = true;\n    } else\n      msg(\"WARNING: \" + result.numBadSegments + \" broken segments (containing \" + result.totLoseDocCount + \" documents) detected\");\n\n    if ( ! (result.validCounter = (result.maxSegmentName < sis.counter))) {\n      result.clean = false;\n      result.newSegments.counter = result.maxSegmentName + 1; \n      msg(\"ERROR: Next segment name counter \" + sis.counter + \" is not greater than max segment name \" + result.maxSegmentName);\n    }\n    \n    if (result.clean) {\n      msg(\"No problems were detected with this index.\\n\");\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"31f025ae60076ae95274433f3fe8e6ace2857a87","date":1326669465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CheckIndex#checkIndex(List[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CheckIndex#checkIndex(List[String]).mjava","sourceNew":"  /** Returns a {@link Status} instance detailing\n   *  the state of the index.\n   * \n   *  @param onlySegments list of specific segment names to check\n   *\n   *  <p>As this method checks every byte in the specified\n   *  segments, on a large index it can take quite a long\n   *  time to run.\n   *\n   *  <p><b>WARNING</b>: make sure\n   *  you only call this when the index is not opened by any\n   *  writer. */\n  public Status checkIndex(List<String> onlySegments) throws IOException {\n    NumberFormat nf = NumberFormat.getInstance();\n    SegmentInfos sis = new SegmentInfos();\n    Status result = new Status();\n    result.dir = dir;\n    try {\n      sis.read(dir);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read any segments file in directory\");\n      result.missingSegments = true;\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      return result;\n    }\n\n    // find the oldest and newest segment versions\n    String oldest = Integer.toString(Integer.MAX_VALUE), newest = Integer.toString(Integer.MIN_VALUE);\n    String oldSegs = null;\n    boolean foundNonNullVersion = false;\n    Comparator<String> versionComparator = StringHelper.getVersionComparator();\n    for (SegmentInfo si : sis) {\n      String version = si.getVersion();\n      if (version == null) {\n        // pre-3.1 segment\n        oldSegs = \"pre-3.1\";\n      } else {\n        foundNonNullVersion = true;\n        if (versionComparator.compare(version, oldest) < 0) {\n          oldest = version;\n        }\n        if (versionComparator.compare(version, newest) > 0) {\n          newest = version;\n        }\n      }\n    }\n\n    final int numSegments = sis.size();\n    final String segmentsFileName = sis.getCurrentSegmentFileName();\n    // note: we only read the format byte (required preamble) here!\n    IndexInput input = null;\n    try {\n      input = dir.openInput(segmentsFileName, IOContext.DEFAULT);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not open segments file in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.cantOpenSegments = true;\n      return result;\n    }\n    int format = 0;\n    try {\n      format = input.readInt();\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read segment file version in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.missingSegmentVersion = true;\n      return result;\n    } finally {\n      if (input != null)\n        input.close();\n    }\n\n    String sFormat = \"\";\n    boolean skip = false;\n\n    if (format == SegmentInfos.FORMAT_DIAGNOSTICS) {\n      sFormat = \"FORMAT_DIAGNOSTICS [Lucene 2.9]\";\n    } else if (format == SegmentInfos.FORMAT_HAS_VECTORS) {\n      sFormat = \"FORMAT_HAS_VECTORS [Lucene 3.1]\";\n    } else if (format == SegmentInfos.FORMAT_3_1) {\n      sFormat = \"FORMAT_3_1 [Lucene 3.1+]\";\n    } else if (format == SegmentInfos.FORMAT_4_0) {\n      sFormat = \"FORMAT_4_0 [Lucene 4.0]\";\n    } else if (format == SegmentInfos.FORMAT_CURRENT) {\n      throw new RuntimeException(\"BUG: You should update this tool!\");\n    } else if (format < SegmentInfos.FORMAT_CURRENT) {\n      sFormat = \"int=\" + format + \" [newer version of Lucene than this tool supports]\";\n      skip = true;\n    } else if (format > SegmentInfos.FORMAT_MINIMUM) {\n      sFormat = \"int=\" + format + \" [older version of Lucene than this tool supports]\";\n      skip = true;\n    }\n\n    result.segmentsFileName = segmentsFileName;\n    result.numSegments = numSegments;\n    result.segmentFormat = sFormat;\n    result.userData = sis.getUserData();\n    String userDataString;\n    if (sis.getUserData().size() > 0) {\n      userDataString = \" userData=\" + sis.getUserData();\n    } else {\n      userDataString = \"\";\n    }\n\n    String versionString = null;\n    if (oldSegs != null) {\n      if (foundNonNullVersion) {\n        versionString = \"versions=[\" + oldSegs + \" .. \" + newest + \"]\";\n      } else {\n        versionString = \"version=\" + oldSegs;\n      }\n    } else {\n      versionString = oldest.equals(newest) ? ( \"version=\" + oldest ) : (\"versions=[\" + oldest + \" .. \" + newest + \"]\");\n    }\n\n    msg(\"Segments file=\" + segmentsFileName + \" numSegments=\" + numSegments\n        + \" \" + versionString + \" format=\" + sFormat + userDataString);\n\n    if (onlySegments != null) {\n      result.partial = true;\n      if (infoStream != null)\n        infoStream.print(\"\\nChecking only these segments:\");\n      for (String s : onlySegments) {\n        if (infoStream != null)\n          infoStream.print(\" \" + s);\n      }\n      result.segmentsChecked.addAll(onlySegments);\n      msg(\":\");\n    }\n\n    if (skip) {\n      msg(\"\\nERROR: this index appears to be created by a newer version of Lucene than this tool was compiled on; please re-compile this tool on the matching version of Lucene; exiting\");\n      result.toolOutOfDate = true;\n      return result;\n    }\n\n\n    result.newSegments = (SegmentInfos) sis.clone();\n    result.newSegments.clear();\n    result.maxSegmentName = -1;\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = sis.info(i);\n      int segmentName = Integer.parseInt(info.name.substring(1), Character.MAX_RADIX);\n      if (segmentName > result.maxSegmentName) {\n        result.maxSegmentName = segmentName;\n      }\n      if (onlySegments != null && !onlySegments.contains(info.name))\n        continue;\n      Status.SegmentInfoStatus segInfoStat = new Status.SegmentInfoStatus();\n      result.segmentInfos.add(segInfoStat);\n      msg(\"  \" + (1+i) + \" of \" + numSegments + \": name=\" + info.name + \" docCount=\" + info.docCount);\n      segInfoStat.name = info.name;\n      segInfoStat.docCount = info.docCount;\n\n      int toLoseDocCount = info.docCount;\n\n      SegmentReader reader = null;\n\n      try {\n        final Codec codec = info.getCodec();\n        msg(\"    codec=\" + codec);\n        segInfoStat.codec = codec;\n        msg(\"    compound=\" + info.getUseCompoundFile());\n        segInfoStat.compound = info.getUseCompoundFile();\n        msg(\"    hasProx=\" + info.getHasProx());\n        segInfoStat.hasProx = info.getHasProx();\n        msg(\"    numFiles=\" + info.files().size());\n        segInfoStat.numFiles = info.files().size();\n        segInfoStat.sizeMB = info.sizeInBytes()/(1024.*1024.);\n        msg(\"    size (MB)=\" + nf.format(segInfoStat.sizeMB));\n        Map<String,String> diagnostics = info.getDiagnostics();\n        segInfoStat.diagnostics = diagnostics;\n        if (diagnostics.size() > 0) {\n          msg(\"    diagnostics = \" + diagnostics);\n        }\n\n        final int docStoreOffset = info.getDocStoreOffset();\n        if (docStoreOffset != -1) {\n          msg(\"    docStoreOffset=\" + docStoreOffset);\n          segInfoStat.docStoreOffset = docStoreOffset;\n          msg(\"    docStoreSegment=\" + info.getDocStoreSegment());\n          segInfoStat.docStoreSegment = info.getDocStoreSegment();\n          msg(\"    docStoreIsCompoundFile=\" + info.getDocStoreIsCompoundFile());\n          segInfoStat.docStoreCompoundFile = info.getDocStoreIsCompoundFile();\n        }\n\n        final String delFileName = info.getDelFileName();\n        if (delFileName == null){\n          msg(\"    no deletions\");\n          segInfoStat.hasDeletions = false;\n        }\n        else{\n          msg(\"    has deletions [delFileName=\" + delFileName + \"]\");\n          segInfoStat.hasDeletions = true;\n          segInfoStat.deletionsFileName = delFileName;\n        }\n        if (infoStream != null)\n          infoStream.print(\"    test: open reader.........\");\n        reader = new SegmentReader(info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, IOContext.DEFAULT);\n\n        segInfoStat.openReaderPassed = true;\n\n        final int numDocs = reader.numDocs();\n        toLoseDocCount = numDocs;\n        if (reader.hasDeletions()) {\n          if (reader.numDocs() != info.docCount - info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + (info.docCount - info.getDelCount()) + \" vs reader=\" + reader.numDocs());\n          }\n          if ((info.docCount-reader.numDocs()) > reader.maxDoc()) {\n            throw new RuntimeException(\"too many deleted docs: maxDoc()=\" + reader.maxDoc() + \" vs del count=\" + (info.docCount-reader.numDocs()));\n          }\n          if (info.docCount - numDocs != info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          segInfoStat.numDeleted = info.docCount - numDocs;\n          msg(\"OK [\" + (segInfoStat.numDeleted) + \" deleted docs]\");\n        } else {\n          if (info.getDelCount() != 0) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          msg(\"OK\");\n        }\n        if (reader.maxDoc() != info.docCount)\n          throw new RuntimeException(\"SegmentReader.maxDoc() \" + reader.maxDoc() + \" != SegmentInfos.docCount \" + info.docCount);\n\n        // Test getFieldInfos()\n        if (infoStream != null) {\n          infoStream.print(\"    test: fields..............\");\n        }         \n        FieldInfos fieldInfos = reader.getFieldInfos();\n        msg(\"OK [\" + fieldInfos.size() + \" fields]\");\n        segInfoStat.numFields = fieldInfos.size();\n        \n        // Test Field Norms\n        segInfoStat.fieldNormStatus = testFieldNorms(fieldInfos, reader);\n\n        // Test the Term Index\n        segInfoStat.termIndexStatus = testPostings(reader);\n\n        // Test Stored Fields\n        segInfoStat.storedFieldStatus = testStoredFields(info, reader, nf);\n\n        // Test Term Vectors\n        segInfoStat.termVectorStatus = testTermVectors(info, reader, nf);\n        \n        segInfoStat.docValuesStatus = testDocValues(info, reader);\n\n        // Rethrow the first exception we encountered\n        //  This will cause stats for failed segments to be incremented properly\n        if (segInfoStat.fieldNormStatus.error != null) {\n          throw new RuntimeException(\"Field Norm test failed\");\n        } else if (segInfoStat.termIndexStatus.error != null) {\n          throw new RuntimeException(\"Term Index test failed\");\n        } else if (segInfoStat.storedFieldStatus.error != null) {\n          throw new RuntimeException(\"Stored Field test failed\");\n        } else if (segInfoStat.termVectorStatus.error != null) {\n          throw new RuntimeException(\"Term Vector test failed\");\n        }  else if (segInfoStat.docValuesStatus.error != null) {\n          throw new RuntimeException(\"DocValues test failed\");\n        }\n\n        msg(\"\");\n\n      } catch (Throwable t) {\n        msg(\"FAILED\");\n        String comment;\n        comment = \"fixIndex() would remove reference to this segment\";\n        msg(\"    WARNING: \" + comment + \"; full exception:\");\n        if (infoStream != null)\n          t.printStackTrace(infoStream);\n        msg(\"\");\n        result.totLoseDocCount += toLoseDocCount;\n        result.numBadSegments++;\n        continue;\n      } finally {\n        if (reader != null)\n          reader.close();\n      }\n\n      // Keeper\n      result.newSegments.add((SegmentInfo) info.clone());\n    }\n\n    if (0 == result.numBadSegments) {\n      result.clean = true;\n    } else\n      msg(\"WARNING: \" + result.numBadSegments + \" broken segments (containing \" + result.totLoseDocCount + \" documents) detected\");\n\n    if ( ! (result.validCounter = (result.maxSegmentName < sis.counter))) {\n      result.clean = false;\n      result.newSegments.counter = result.maxSegmentName + 1; \n      msg(\"ERROR: Next segment name counter \" + sis.counter + \" is not greater than max segment name \" + result.maxSegmentName);\n    }\n    \n    if (result.clean) {\n      msg(\"No problems were detected with this index.\\n\");\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /** Returns a {@link Status} instance detailing\n   *  the state of the index.\n   * \n   *  @param onlySegments list of specific segment names to check\n   *\n   *  <p>As this method checks every byte in the specified\n   *  segments, on a large index it can take quite a long\n   *  time to run.\n   *\n   *  <p><b>WARNING</b>: make sure\n   *  you only call this when the index is not opened by any\n   *  writer. */\n  public Status checkIndex(List<String> onlySegments) throws IOException {\n    NumberFormat nf = NumberFormat.getInstance();\n    SegmentInfos sis = new SegmentInfos();\n    Status result = new Status();\n    result.dir = dir;\n    try {\n      sis.read(dir);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read any segments file in directory\");\n      result.missingSegments = true;\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      return result;\n    }\n\n    // find the oldest and newest segment versions\n    String oldest = Integer.toString(Integer.MAX_VALUE), newest = Integer.toString(Integer.MIN_VALUE);\n    String oldSegs = null;\n    boolean foundNonNullVersion = false;\n    Comparator<String> versionComparator = StringHelper.getVersionComparator();\n    for (SegmentInfo si : sis) {\n      String version = si.getVersion();\n      if (version == null) {\n        // pre-3.1 segment\n        oldSegs = \"pre-3.1\";\n      } else {\n        foundNonNullVersion = true;\n        if (versionComparator.compare(version, oldest) < 0) {\n          oldest = version;\n        }\n        if (versionComparator.compare(version, newest) > 0) {\n          newest = version;\n        }\n      }\n    }\n\n    final int numSegments = sis.size();\n    final String segmentsFileName = sis.getCurrentSegmentFileName();\n    // note: we only read the format byte (required preamble) here!\n    IndexInput input = null;\n    try {\n      input = dir.openInput(segmentsFileName, IOContext.DEFAULT);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not open segments file in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.cantOpenSegments = true;\n      return result;\n    }\n    int format = 0;\n    try {\n      format = input.readInt();\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read segment file version in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.missingSegmentVersion = true;\n      return result;\n    } finally {\n      if (input != null)\n        input.close();\n    }\n\n    String sFormat = \"\";\n    boolean skip = false;\n\n    if (format == SegmentInfos.FORMAT_DIAGNOSTICS) {\n      sFormat = \"FORMAT_DIAGNOSTICS [Lucene 2.9]\";\n    } else if (format == SegmentInfos.FORMAT_HAS_VECTORS) {\n      sFormat = \"FORMAT_HAS_VECTORS [Lucene 3.1]\";\n    } else if (format == SegmentInfos.FORMAT_3_1) {\n      sFormat = \"FORMAT_3_1 [Lucene 3.1+]\";\n    } else if (format == SegmentInfos.FORMAT_4_0) {\n      sFormat = \"FORMAT_4_0 [Lucene 4.0]\";\n    } else if (format == SegmentInfos.FORMAT_CURRENT) {\n      throw new RuntimeException(\"BUG: You should update this tool!\");\n    } else if (format < SegmentInfos.FORMAT_CURRENT) {\n      sFormat = \"int=\" + format + \" [newer version of Lucene than this tool supports]\";\n      skip = true;\n    } else if (format > SegmentInfos.FORMAT_MINIMUM) {\n      sFormat = \"int=\" + format + \" [older version of Lucene than this tool supports]\";\n      skip = true;\n    }\n\n    result.segmentsFileName = segmentsFileName;\n    result.numSegments = numSegments;\n    result.segmentFormat = sFormat;\n    result.userData = sis.getUserData();\n    String userDataString;\n    if (sis.getUserData().size() > 0) {\n      userDataString = \" userData=\" + sis.getUserData();\n    } else {\n      userDataString = \"\";\n    }\n\n    String versionString = null;\n    if (oldSegs != null) {\n      if (foundNonNullVersion) {\n        versionString = \"versions=[\" + oldSegs + \" .. \" + newest + \"]\";\n      } else {\n        versionString = \"version=\" + oldSegs;\n      }\n    } else {\n      versionString = oldest.equals(newest) ? ( \"version=\" + oldest ) : (\"versions=[\" + oldest + \" .. \" + newest + \"]\");\n    }\n\n    msg(\"Segments file=\" + segmentsFileName + \" numSegments=\" + numSegments\n        + \" \" + versionString + \" format=\" + sFormat + userDataString);\n\n    if (onlySegments != null) {\n      result.partial = true;\n      if (infoStream != null)\n        infoStream.print(\"\\nChecking only these segments:\");\n      for (String s : onlySegments) {\n        if (infoStream != null)\n          infoStream.print(\" \" + s);\n      }\n      result.segmentsChecked.addAll(onlySegments);\n      msg(\":\");\n    }\n\n    if (skip) {\n      msg(\"\\nERROR: this index appears to be created by a newer version of Lucene than this tool was compiled on; please re-compile this tool on the matching version of Lucene; exiting\");\n      result.toolOutOfDate = true;\n      return result;\n    }\n\n\n    result.newSegments = (SegmentInfos) sis.clone();\n    result.newSegments.clear();\n    result.maxSegmentName = -1;\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = sis.info(i);\n      int segmentName = Integer.parseInt(info.name.substring(1), Character.MAX_RADIX);\n      if (segmentName > result.maxSegmentName) {\n        result.maxSegmentName = segmentName;\n      }\n      if (onlySegments != null && !onlySegments.contains(info.name))\n        continue;\n      Status.SegmentInfoStatus segInfoStat = new Status.SegmentInfoStatus();\n      result.segmentInfos.add(segInfoStat);\n      msg(\"  \" + (1+i) + \" of \" + numSegments + \": name=\" + info.name + \" docCount=\" + info.docCount);\n      segInfoStat.name = info.name;\n      segInfoStat.docCount = info.docCount;\n\n      int toLoseDocCount = info.docCount;\n\n      SegmentReader reader = null;\n\n      try {\n        final Codec codec = info.getCodec();\n        msg(\"    codec=\" + codec);\n        segInfoStat.codec = codec;\n        msg(\"    compound=\" + info.getUseCompoundFile());\n        segInfoStat.compound = info.getUseCompoundFile();\n        msg(\"    hasProx=\" + info.getHasProx());\n        segInfoStat.hasProx = info.getHasProx();\n        msg(\"    numFiles=\" + info.files().size());\n        segInfoStat.numFiles = info.files().size();\n        segInfoStat.sizeMB = info.sizeInBytes()/(1024.*1024.);\n        msg(\"    size (MB)=\" + nf.format(segInfoStat.sizeMB));\n        Map<String,String> diagnostics = info.getDiagnostics();\n        segInfoStat.diagnostics = diagnostics;\n        if (diagnostics.size() > 0) {\n          msg(\"    diagnostics = \" + diagnostics);\n        }\n\n        final int docStoreOffset = info.getDocStoreOffset();\n        if (docStoreOffset != -1) {\n          msg(\"    docStoreOffset=\" + docStoreOffset);\n          segInfoStat.docStoreOffset = docStoreOffset;\n          msg(\"    docStoreSegment=\" + info.getDocStoreSegment());\n          segInfoStat.docStoreSegment = info.getDocStoreSegment();\n          msg(\"    docStoreIsCompoundFile=\" + info.getDocStoreIsCompoundFile());\n          segInfoStat.docStoreCompoundFile = info.getDocStoreIsCompoundFile();\n        }\n\n        final String delFileName = info.getDelFileName();\n        if (delFileName == null){\n          msg(\"    no deletions\");\n          segInfoStat.hasDeletions = false;\n        }\n        else{\n          msg(\"    has deletions [delFileName=\" + delFileName + \"]\");\n          segInfoStat.hasDeletions = true;\n          segInfoStat.deletionsFileName = delFileName;\n        }\n        if (infoStream != null)\n          infoStream.print(\"    test: open reader.........\");\n        reader = new SegmentReader(info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, IOContext.DEFAULT);\n\n        segInfoStat.openReaderPassed = true;\n\n        final int numDocs = reader.numDocs();\n        toLoseDocCount = numDocs;\n        if (reader.hasDeletions()) {\n          if (reader.numDocs() != info.docCount - info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + (info.docCount - info.getDelCount()) + \" vs reader=\" + reader.numDocs());\n          }\n          if ((info.docCount-reader.numDocs()) > reader.maxDoc()) {\n            throw new RuntimeException(\"too many deleted docs: maxDoc()=\" + reader.maxDoc() + \" vs del count=\" + (info.docCount-reader.numDocs()));\n          }\n          if (info.docCount - numDocs != info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          segInfoStat.numDeleted = info.docCount - numDocs;\n          msg(\"OK [\" + (segInfoStat.numDeleted) + \" deleted docs]\");\n        } else {\n          if (info.getDelCount() != 0) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          msg(\"OK\");\n        }\n        if (reader.maxDoc() != info.docCount)\n          throw new RuntimeException(\"SegmentReader.maxDoc() \" + reader.maxDoc() + \" != SegmentInfos.docCount \" + info.docCount);\n\n        // Test getFieldInfos()\n        if (infoStream != null) {\n          infoStream.print(\"    test: fields..............\");\n        }         \n        FieldInfos fieldInfos = reader.getFieldInfos();\n        msg(\"OK [\" + fieldInfos.size() + \" fields]\");\n        segInfoStat.numFields = fieldInfos.size();\n        \n        // Test Field Norms\n        segInfoStat.fieldNormStatus = testFieldNorms(fieldInfos, reader);\n\n        // Test the Term Index\n        segInfoStat.termIndexStatus = testTermIndex(reader);\n\n        // Test Stored Fields\n        segInfoStat.storedFieldStatus = testStoredFields(info, reader, nf);\n\n        // Test Term Vectors\n        segInfoStat.termVectorStatus = testTermVectors(info, reader, nf);\n        \n        segInfoStat.docValuesStatus = testDocValues(info, reader);\n\n        // Rethrow the first exception we encountered\n        //  This will cause stats for failed segments to be incremented properly\n        if (segInfoStat.fieldNormStatus.error != null) {\n          throw new RuntimeException(\"Field Norm test failed\");\n        } else if (segInfoStat.termIndexStatus.error != null) {\n          throw new RuntimeException(\"Term Index test failed\");\n        } else if (segInfoStat.storedFieldStatus.error != null) {\n          throw new RuntimeException(\"Stored Field test failed\");\n        } else if (segInfoStat.termVectorStatus.error != null) {\n          throw new RuntimeException(\"Term Vector test failed\");\n        }  else if (segInfoStat.docValuesStatus.error != null) {\n          throw new RuntimeException(\"DocValues test failed\");\n        }\n\n        msg(\"\");\n\n      } catch (Throwable t) {\n        msg(\"FAILED\");\n        String comment;\n        comment = \"fixIndex() would remove reference to this segment\";\n        msg(\"    WARNING: \" + comment + \"; full exception:\");\n        if (infoStream != null)\n          t.printStackTrace(infoStream);\n        msg(\"\");\n        result.totLoseDocCount += toLoseDocCount;\n        result.numBadSegments++;\n        continue;\n      } finally {\n        if (reader != null)\n          reader.close();\n      }\n\n      // Keeper\n      result.newSegments.add((SegmentInfo) info.clone());\n    }\n\n    if (0 == result.numBadSegments) {\n      result.clean = true;\n    } else\n      msg(\"WARNING: \" + result.numBadSegments + \" broken segments (containing \" + result.totLoseDocCount + \" documents) detected\");\n\n    if ( ! (result.validCounter = (result.maxSegmentName < sis.counter))) {\n      result.clean = false;\n      result.newSegments.counter = result.maxSegmentName + 1; \n      msg(\"ERROR: Next segment name counter \" + sis.counter + \" is not greater than max segment name \" + result.maxSegmentName);\n    }\n    \n    if (result.clean) {\n      msg(\"No problems were detected with this index.\\n\");\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c01bf951751b6dabfd53cb1429a659b28cd6ab4b","date":1327023967,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CheckIndex#checkIndex(List[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CheckIndex#checkIndex(List[String]).mjava","sourceNew":"  /** Returns a {@link Status} instance detailing\n   *  the state of the index.\n   * \n   *  @param onlySegments list of specific segment names to check\n   *\n   *  <p>As this method checks every byte in the specified\n   *  segments, on a large index it can take quite a long\n   *  time to run.\n   *\n   *  <p><b>WARNING</b>: make sure\n   *  you only call this when the index is not opened by any\n   *  writer. */\n  public Status checkIndex(List<String> onlySegments) throws IOException {\n    NumberFormat nf = NumberFormat.getInstance();\n    SegmentInfos sis = new SegmentInfos();\n    Status result = new Status();\n    result.dir = dir;\n    try {\n      sis.read(dir);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read any segments file in directory\");\n      result.missingSegments = true;\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      return result;\n    }\n\n    // find the oldest and newest segment versions\n    String oldest = Integer.toString(Integer.MAX_VALUE), newest = Integer.toString(Integer.MIN_VALUE);\n    String oldSegs = null;\n    boolean foundNonNullVersion = false;\n    Comparator<String> versionComparator = StringHelper.getVersionComparator();\n    for (SegmentInfo si : sis) {\n      String version = si.getVersion();\n      if (version == null) {\n        // pre-3.1 segment\n        oldSegs = \"pre-3.1\";\n      } else {\n        foundNonNullVersion = true;\n        if (versionComparator.compare(version, oldest) < 0) {\n          oldest = version;\n        }\n        if (versionComparator.compare(version, newest) > 0) {\n          newest = version;\n        }\n      }\n    }\n\n    final int numSegments = sis.size();\n    final String segmentsFileName = sis.getCurrentSegmentFileName();\n    // note: we only read the format byte (required preamble) here!\n    IndexInput input = null;\n    try {\n      input = dir.openInput(segmentsFileName, IOContext.DEFAULT);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not open segments file in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.cantOpenSegments = true;\n      return result;\n    }\n    int format = 0;\n    try {\n      format = input.readInt();\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read segment file version in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.missingSegmentVersion = true;\n      return result;\n    } finally {\n      if (input != null)\n        input.close();\n    }\n\n    String sFormat = \"\";\n    boolean skip = false;\n\n    if (format == SegmentInfos.FORMAT_DIAGNOSTICS) {\n      sFormat = \"FORMAT_DIAGNOSTICS [Lucene 2.9]\";\n    } else if (format == SegmentInfos.FORMAT_HAS_VECTORS) {\n      sFormat = \"FORMAT_HAS_VECTORS [Lucene 3.1]\";\n    } else if (format == SegmentInfos.FORMAT_3_1) {\n      sFormat = \"FORMAT_3_1 [Lucene 3.1+]\";\n    } else if (format == SegmentInfos.FORMAT_4_0) {\n      sFormat = \"FORMAT_4_0 [Lucene 4.0]\";\n    } else if (format == SegmentInfos.FORMAT_CURRENT) {\n      throw new RuntimeException(\"BUG: You should update this tool!\");\n    } else if (format < SegmentInfos.FORMAT_CURRENT) {\n      sFormat = \"int=\" + format + \" [newer version of Lucene than this tool supports]\";\n      skip = true;\n    } else if (format > SegmentInfos.FORMAT_MINIMUM) {\n      sFormat = \"int=\" + format + \" [older version of Lucene than this tool supports]\";\n      skip = true;\n    }\n\n    result.segmentsFileName = segmentsFileName;\n    result.numSegments = numSegments;\n    result.segmentFormat = sFormat;\n    result.userData = sis.getUserData();\n    String userDataString;\n    if (sis.getUserData().size() > 0) {\n      userDataString = \" userData=\" + sis.getUserData();\n    } else {\n      userDataString = \"\";\n    }\n\n    String versionString = null;\n    if (oldSegs != null) {\n      if (foundNonNullVersion) {\n        versionString = \"versions=[\" + oldSegs + \" .. \" + newest + \"]\";\n      } else {\n        versionString = \"version=\" + oldSegs;\n      }\n    } else {\n      versionString = oldest.equals(newest) ? ( \"version=\" + oldest ) : (\"versions=[\" + oldest + \" .. \" + newest + \"]\");\n    }\n\n    msg(\"Segments file=\" + segmentsFileName + \" numSegments=\" + numSegments\n        + \" \" + versionString + \" format=\" + sFormat + userDataString);\n\n    if (onlySegments != null) {\n      result.partial = true;\n      if (infoStream != null)\n        infoStream.print(\"\\nChecking only these segments:\");\n      for (String s : onlySegments) {\n        if (infoStream != null)\n          infoStream.print(\" \" + s);\n      }\n      result.segmentsChecked.addAll(onlySegments);\n      msg(\":\");\n    }\n\n    if (skip) {\n      msg(\"\\nERROR: this index appears to be created by a newer version of Lucene than this tool was compiled on; please re-compile this tool on the matching version of Lucene; exiting\");\n      result.toolOutOfDate = true;\n      return result;\n    }\n\n\n    result.newSegments = (SegmentInfos) sis.clone();\n    result.newSegments.clear();\n    result.maxSegmentName = -1;\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = sis.info(i);\n      int segmentName = Integer.parseInt(info.name.substring(1), Character.MAX_RADIX);\n      if (segmentName > result.maxSegmentName) {\n        result.maxSegmentName = segmentName;\n      }\n      if (onlySegments != null && !onlySegments.contains(info.name))\n        continue;\n      Status.SegmentInfoStatus segInfoStat = new Status.SegmentInfoStatus();\n      result.segmentInfos.add(segInfoStat);\n      msg(\"  \" + (1+i) + \" of \" + numSegments + \": name=\" + info.name + \" docCount=\" + info.docCount);\n      segInfoStat.name = info.name;\n      segInfoStat.docCount = info.docCount;\n\n      int toLoseDocCount = info.docCount;\n\n      SegmentReader reader = null;\n\n      try {\n        final Codec codec = info.getCodec();\n        msg(\"    codec=\" + codec);\n        segInfoStat.codec = codec;\n        msg(\"    compound=\" + info.getUseCompoundFile());\n        segInfoStat.compound = info.getUseCompoundFile();\n        msg(\"    hasProx=\" + info.getHasProx());\n        segInfoStat.hasProx = info.getHasProx();\n        msg(\"    numFiles=\" + info.files().size());\n        segInfoStat.numFiles = info.files().size();\n        segInfoStat.sizeMB = info.sizeInBytes()/(1024.*1024.);\n        msg(\"    size (MB)=\" + nf.format(segInfoStat.sizeMB));\n        Map<String,String> diagnostics = info.getDiagnostics();\n        segInfoStat.diagnostics = diagnostics;\n        if (diagnostics.size() > 0) {\n          msg(\"    diagnostics = \" + diagnostics);\n        }\n\n        final int docStoreOffset = info.getDocStoreOffset();\n        if (docStoreOffset != -1) {\n          msg(\"    docStoreOffset=\" + docStoreOffset);\n          segInfoStat.docStoreOffset = docStoreOffset;\n          msg(\"    docStoreSegment=\" + info.getDocStoreSegment());\n          segInfoStat.docStoreSegment = info.getDocStoreSegment();\n          msg(\"    docStoreIsCompoundFile=\" + info.getDocStoreIsCompoundFile());\n          segInfoStat.docStoreCompoundFile = info.getDocStoreIsCompoundFile();\n        }\n\n        if (info.hasDeletions()) {\n          msg(\"    no deletions\");\n          segInfoStat.hasDeletions = false;\n        }\n        else{\n          msg(\"    has deletions [delGen=\" + info.getDelGen() + \"]\");\n          segInfoStat.hasDeletions = true;\n          segInfoStat.deletionsGen = info.getDelGen();\n        }\n        if (infoStream != null)\n          infoStream.print(\"    test: open reader.........\");\n        reader = new SegmentReader(info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, IOContext.DEFAULT);\n\n        segInfoStat.openReaderPassed = true;\n\n        final int numDocs = reader.numDocs();\n        toLoseDocCount = numDocs;\n        if (reader.hasDeletions()) {\n          if (reader.numDocs() != info.docCount - info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + (info.docCount - info.getDelCount()) + \" vs reader=\" + reader.numDocs());\n          }\n          if ((info.docCount-reader.numDocs()) > reader.maxDoc()) {\n            throw new RuntimeException(\"too many deleted docs: maxDoc()=\" + reader.maxDoc() + \" vs del count=\" + (info.docCount-reader.numDocs()));\n          }\n          if (info.docCount - numDocs != info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          segInfoStat.numDeleted = info.docCount - numDocs;\n          msg(\"OK [\" + (segInfoStat.numDeleted) + \" deleted docs]\");\n        } else {\n          if (info.getDelCount() != 0) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          msg(\"OK\");\n        }\n        if (reader.maxDoc() != info.docCount)\n          throw new RuntimeException(\"SegmentReader.maxDoc() \" + reader.maxDoc() + \" != SegmentInfos.docCount \" + info.docCount);\n\n        // Test getFieldInfos()\n        if (infoStream != null) {\n          infoStream.print(\"    test: fields..............\");\n        }         \n        FieldInfos fieldInfos = reader.getFieldInfos();\n        msg(\"OK [\" + fieldInfos.size() + \" fields]\");\n        segInfoStat.numFields = fieldInfos.size();\n        \n        // Test Field Norms\n        segInfoStat.fieldNormStatus = testFieldNorms(fieldInfos, reader);\n\n        // Test the Term Index\n        segInfoStat.termIndexStatus = testPostings(reader);\n\n        // Test Stored Fields\n        segInfoStat.storedFieldStatus = testStoredFields(info, reader, nf);\n\n        // Test Term Vectors\n        segInfoStat.termVectorStatus = testTermVectors(info, reader, nf);\n        \n        segInfoStat.docValuesStatus = testDocValues(info, reader);\n\n        // Rethrow the first exception we encountered\n        //  This will cause stats for failed segments to be incremented properly\n        if (segInfoStat.fieldNormStatus.error != null) {\n          throw new RuntimeException(\"Field Norm test failed\");\n        } else if (segInfoStat.termIndexStatus.error != null) {\n          throw new RuntimeException(\"Term Index test failed\");\n        } else if (segInfoStat.storedFieldStatus.error != null) {\n          throw new RuntimeException(\"Stored Field test failed\");\n        } else if (segInfoStat.termVectorStatus.error != null) {\n          throw new RuntimeException(\"Term Vector test failed\");\n        }  else if (segInfoStat.docValuesStatus.error != null) {\n          throw new RuntimeException(\"DocValues test failed\");\n        }\n\n        msg(\"\");\n\n      } catch (Throwable t) {\n        msg(\"FAILED\");\n        String comment;\n        comment = \"fixIndex() would remove reference to this segment\";\n        msg(\"    WARNING: \" + comment + \"; full exception:\");\n        if (infoStream != null)\n          t.printStackTrace(infoStream);\n        msg(\"\");\n        result.totLoseDocCount += toLoseDocCount;\n        result.numBadSegments++;\n        continue;\n      } finally {\n        if (reader != null)\n          reader.close();\n      }\n\n      // Keeper\n      result.newSegments.add((SegmentInfo) info.clone());\n    }\n\n    if (0 == result.numBadSegments) {\n      result.clean = true;\n    } else\n      msg(\"WARNING: \" + result.numBadSegments + \" broken segments (containing \" + result.totLoseDocCount + \" documents) detected\");\n\n    if ( ! (result.validCounter = (result.maxSegmentName < sis.counter))) {\n      result.clean = false;\n      result.newSegments.counter = result.maxSegmentName + 1; \n      msg(\"ERROR: Next segment name counter \" + sis.counter + \" is not greater than max segment name \" + result.maxSegmentName);\n    }\n    \n    if (result.clean) {\n      msg(\"No problems were detected with this index.\\n\");\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /** Returns a {@link Status} instance detailing\n   *  the state of the index.\n   * \n   *  @param onlySegments list of specific segment names to check\n   *\n   *  <p>As this method checks every byte in the specified\n   *  segments, on a large index it can take quite a long\n   *  time to run.\n   *\n   *  <p><b>WARNING</b>: make sure\n   *  you only call this when the index is not opened by any\n   *  writer. */\n  public Status checkIndex(List<String> onlySegments) throws IOException {\n    NumberFormat nf = NumberFormat.getInstance();\n    SegmentInfos sis = new SegmentInfos();\n    Status result = new Status();\n    result.dir = dir;\n    try {\n      sis.read(dir);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read any segments file in directory\");\n      result.missingSegments = true;\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      return result;\n    }\n\n    // find the oldest and newest segment versions\n    String oldest = Integer.toString(Integer.MAX_VALUE), newest = Integer.toString(Integer.MIN_VALUE);\n    String oldSegs = null;\n    boolean foundNonNullVersion = false;\n    Comparator<String> versionComparator = StringHelper.getVersionComparator();\n    for (SegmentInfo si : sis) {\n      String version = si.getVersion();\n      if (version == null) {\n        // pre-3.1 segment\n        oldSegs = \"pre-3.1\";\n      } else {\n        foundNonNullVersion = true;\n        if (versionComparator.compare(version, oldest) < 0) {\n          oldest = version;\n        }\n        if (versionComparator.compare(version, newest) > 0) {\n          newest = version;\n        }\n      }\n    }\n\n    final int numSegments = sis.size();\n    final String segmentsFileName = sis.getCurrentSegmentFileName();\n    // note: we only read the format byte (required preamble) here!\n    IndexInput input = null;\n    try {\n      input = dir.openInput(segmentsFileName, IOContext.DEFAULT);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not open segments file in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.cantOpenSegments = true;\n      return result;\n    }\n    int format = 0;\n    try {\n      format = input.readInt();\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read segment file version in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.missingSegmentVersion = true;\n      return result;\n    } finally {\n      if (input != null)\n        input.close();\n    }\n\n    String sFormat = \"\";\n    boolean skip = false;\n\n    if (format == SegmentInfos.FORMAT_DIAGNOSTICS) {\n      sFormat = \"FORMAT_DIAGNOSTICS [Lucene 2.9]\";\n    } else if (format == SegmentInfos.FORMAT_HAS_VECTORS) {\n      sFormat = \"FORMAT_HAS_VECTORS [Lucene 3.1]\";\n    } else if (format == SegmentInfos.FORMAT_3_1) {\n      sFormat = \"FORMAT_3_1 [Lucene 3.1+]\";\n    } else if (format == SegmentInfos.FORMAT_4_0) {\n      sFormat = \"FORMAT_4_0 [Lucene 4.0]\";\n    } else if (format == SegmentInfos.FORMAT_CURRENT) {\n      throw new RuntimeException(\"BUG: You should update this tool!\");\n    } else if (format < SegmentInfos.FORMAT_CURRENT) {\n      sFormat = \"int=\" + format + \" [newer version of Lucene than this tool supports]\";\n      skip = true;\n    } else if (format > SegmentInfos.FORMAT_MINIMUM) {\n      sFormat = \"int=\" + format + \" [older version of Lucene than this tool supports]\";\n      skip = true;\n    }\n\n    result.segmentsFileName = segmentsFileName;\n    result.numSegments = numSegments;\n    result.segmentFormat = sFormat;\n    result.userData = sis.getUserData();\n    String userDataString;\n    if (sis.getUserData().size() > 0) {\n      userDataString = \" userData=\" + sis.getUserData();\n    } else {\n      userDataString = \"\";\n    }\n\n    String versionString = null;\n    if (oldSegs != null) {\n      if (foundNonNullVersion) {\n        versionString = \"versions=[\" + oldSegs + \" .. \" + newest + \"]\";\n      } else {\n        versionString = \"version=\" + oldSegs;\n      }\n    } else {\n      versionString = oldest.equals(newest) ? ( \"version=\" + oldest ) : (\"versions=[\" + oldest + \" .. \" + newest + \"]\");\n    }\n\n    msg(\"Segments file=\" + segmentsFileName + \" numSegments=\" + numSegments\n        + \" \" + versionString + \" format=\" + sFormat + userDataString);\n\n    if (onlySegments != null) {\n      result.partial = true;\n      if (infoStream != null)\n        infoStream.print(\"\\nChecking only these segments:\");\n      for (String s : onlySegments) {\n        if (infoStream != null)\n          infoStream.print(\" \" + s);\n      }\n      result.segmentsChecked.addAll(onlySegments);\n      msg(\":\");\n    }\n\n    if (skip) {\n      msg(\"\\nERROR: this index appears to be created by a newer version of Lucene than this tool was compiled on; please re-compile this tool on the matching version of Lucene; exiting\");\n      result.toolOutOfDate = true;\n      return result;\n    }\n\n\n    result.newSegments = (SegmentInfos) sis.clone();\n    result.newSegments.clear();\n    result.maxSegmentName = -1;\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = sis.info(i);\n      int segmentName = Integer.parseInt(info.name.substring(1), Character.MAX_RADIX);\n      if (segmentName > result.maxSegmentName) {\n        result.maxSegmentName = segmentName;\n      }\n      if (onlySegments != null && !onlySegments.contains(info.name))\n        continue;\n      Status.SegmentInfoStatus segInfoStat = new Status.SegmentInfoStatus();\n      result.segmentInfos.add(segInfoStat);\n      msg(\"  \" + (1+i) + \" of \" + numSegments + \": name=\" + info.name + \" docCount=\" + info.docCount);\n      segInfoStat.name = info.name;\n      segInfoStat.docCount = info.docCount;\n\n      int toLoseDocCount = info.docCount;\n\n      SegmentReader reader = null;\n\n      try {\n        final Codec codec = info.getCodec();\n        msg(\"    codec=\" + codec);\n        segInfoStat.codec = codec;\n        msg(\"    compound=\" + info.getUseCompoundFile());\n        segInfoStat.compound = info.getUseCompoundFile();\n        msg(\"    hasProx=\" + info.getHasProx());\n        segInfoStat.hasProx = info.getHasProx();\n        msg(\"    numFiles=\" + info.files().size());\n        segInfoStat.numFiles = info.files().size();\n        segInfoStat.sizeMB = info.sizeInBytes()/(1024.*1024.);\n        msg(\"    size (MB)=\" + nf.format(segInfoStat.sizeMB));\n        Map<String,String> diagnostics = info.getDiagnostics();\n        segInfoStat.diagnostics = diagnostics;\n        if (diagnostics.size() > 0) {\n          msg(\"    diagnostics = \" + diagnostics);\n        }\n\n        final int docStoreOffset = info.getDocStoreOffset();\n        if (docStoreOffset != -1) {\n          msg(\"    docStoreOffset=\" + docStoreOffset);\n          segInfoStat.docStoreOffset = docStoreOffset;\n          msg(\"    docStoreSegment=\" + info.getDocStoreSegment());\n          segInfoStat.docStoreSegment = info.getDocStoreSegment();\n          msg(\"    docStoreIsCompoundFile=\" + info.getDocStoreIsCompoundFile());\n          segInfoStat.docStoreCompoundFile = info.getDocStoreIsCompoundFile();\n        }\n\n        final String delFileName = info.getDelFileName();\n        if (delFileName == null){\n          msg(\"    no deletions\");\n          segInfoStat.hasDeletions = false;\n        }\n        else{\n          msg(\"    has deletions [delFileName=\" + delFileName + \"]\");\n          segInfoStat.hasDeletions = true;\n          segInfoStat.deletionsFileName = delFileName;\n        }\n        if (infoStream != null)\n          infoStream.print(\"    test: open reader.........\");\n        reader = new SegmentReader(info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, IOContext.DEFAULT);\n\n        segInfoStat.openReaderPassed = true;\n\n        final int numDocs = reader.numDocs();\n        toLoseDocCount = numDocs;\n        if (reader.hasDeletions()) {\n          if (reader.numDocs() != info.docCount - info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + (info.docCount - info.getDelCount()) + \" vs reader=\" + reader.numDocs());\n          }\n          if ((info.docCount-reader.numDocs()) > reader.maxDoc()) {\n            throw new RuntimeException(\"too many deleted docs: maxDoc()=\" + reader.maxDoc() + \" vs del count=\" + (info.docCount-reader.numDocs()));\n          }\n          if (info.docCount - numDocs != info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          segInfoStat.numDeleted = info.docCount - numDocs;\n          msg(\"OK [\" + (segInfoStat.numDeleted) + \" deleted docs]\");\n        } else {\n          if (info.getDelCount() != 0) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          msg(\"OK\");\n        }\n        if (reader.maxDoc() != info.docCount)\n          throw new RuntimeException(\"SegmentReader.maxDoc() \" + reader.maxDoc() + \" != SegmentInfos.docCount \" + info.docCount);\n\n        // Test getFieldInfos()\n        if (infoStream != null) {\n          infoStream.print(\"    test: fields..............\");\n        }         \n        FieldInfos fieldInfos = reader.getFieldInfos();\n        msg(\"OK [\" + fieldInfos.size() + \" fields]\");\n        segInfoStat.numFields = fieldInfos.size();\n        \n        // Test Field Norms\n        segInfoStat.fieldNormStatus = testFieldNorms(fieldInfos, reader);\n\n        // Test the Term Index\n        segInfoStat.termIndexStatus = testPostings(reader);\n\n        // Test Stored Fields\n        segInfoStat.storedFieldStatus = testStoredFields(info, reader, nf);\n\n        // Test Term Vectors\n        segInfoStat.termVectorStatus = testTermVectors(info, reader, nf);\n        \n        segInfoStat.docValuesStatus = testDocValues(info, reader);\n\n        // Rethrow the first exception we encountered\n        //  This will cause stats for failed segments to be incremented properly\n        if (segInfoStat.fieldNormStatus.error != null) {\n          throw new RuntimeException(\"Field Norm test failed\");\n        } else if (segInfoStat.termIndexStatus.error != null) {\n          throw new RuntimeException(\"Term Index test failed\");\n        } else if (segInfoStat.storedFieldStatus.error != null) {\n          throw new RuntimeException(\"Stored Field test failed\");\n        } else if (segInfoStat.termVectorStatus.error != null) {\n          throw new RuntimeException(\"Term Vector test failed\");\n        }  else if (segInfoStat.docValuesStatus.error != null) {\n          throw new RuntimeException(\"DocValues test failed\");\n        }\n\n        msg(\"\");\n\n      } catch (Throwable t) {\n        msg(\"FAILED\");\n        String comment;\n        comment = \"fixIndex() would remove reference to this segment\";\n        msg(\"    WARNING: \" + comment + \"; full exception:\");\n        if (infoStream != null)\n          t.printStackTrace(infoStream);\n        msg(\"\");\n        result.totLoseDocCount += toLoseDocCount;\n        result.numBadSegments++;\n        continue;\n      } finally {\n        if (reader != null)\n          reader.close();\n      }\n\n      // Keeper\n      result.newSegments.add((SegmentInfo) info.clone());\n    }\n\n    if (0 == result.numBadSegments) {\n      result.clean = true;\n    } else\n      msg(\"WARNING: \" + result.numBadSegments + \" broken segments (containing \" + result.totLoseDocCount + \" documents) detected\");\n\n    if ( ! (result.validCounter = (result.maxSegmentName < sis.counter))) {\n      result.clean = false;\n      result.newSegments.counter = result.maxSegmentName + 1; \n      msg(\"ERROR: Next segment name counter \" + sis.counter + \" is not greater than max segment name \" + result.maxSegmentName);\n    }\n    \n    if (result.clean) {\n      msg(\"No problems were detected with this index.\\n\");\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4","90dfa8ee4e9e118b4c2c1c042bf57d9b460613de"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"893d07555f01912f57b453a320e4d46363a31b50","date":1327312526,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CheckIndex#checkIndex(List[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CheckIndex#checkIndex(List[String]).mjava","sourceNew":"  /** Returns a {@link Status} instance detailing\n   *  the state of the index.\n   * \n   *  @param onlySegments list of specific segment names to check\n   *\n   *  <p>As this method checks every byte in the specified\n   *  segments, on a large index it can take quite a long\n   *  time to run.\n   *\n   *  <p><b>WARNING</b>: make sure\n   *  you only call this when the index is not opened by any\n   *  writer. */\n  public Status checkIndex(List<String> onlySegments) throws IOException {\n    NumberFormat nf = NumberFormat.getInstance();\n    SegmentInfos sis = new SegmentInfos();\n    Status result = new Status();\n    result.dir = dir;\n    try {\n      sis.read(dir);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read any segments file in directory\");\n      result.missingSegments = true;\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      return result;\n    }\n\n    // find the oldest and newest segment versions\n    String oldest = Integer.toString(Integer.MAX_VALUE), newest = Integer.toString(Integer.MIN_VALUE);\n    String oldSegs = null;\n    boolean foundNonNullVersion = false;\n    Comparator<String> versionComparator = StringHelper.getVersionComparator();\n    for (SegmentInfo si : sis) {\n      String version = si.getVersion();\n      if (version == null) {\n        // pre-3.1 segment\n        oldSegs = \"pre-3.1\";\n      } else {\n        foundNonNullVersion = true;\n        if (versionComparator.compare(version, oldest) < 0) {\n          oldest = version;\n        }\n        if (versionComparator.compare(version, newest) > 0) {\n          newest = version;\n        }\n      }\n    }\n\n    final int numSegments = sis.size();\n    final String segmentsFileName = sis.getCurrentSegmentFileName();\n    // note: we only read the format byte (required preamble) here!\n    IndexInput input = null;\n    try {\n      input = dir.openInput(segmentsFileName, IOContext.DEFAULT);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not open segments file in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.cantOpenSegments = true;\n      return result;\n    }\n    int format = 0;\n    try {\n      format = input.readInt();\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read segment file version in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.missingSegmentVersion = true;\n      return result;\n    } finally {\n      if (input != null)\n        input.close();\n    }\n\n    String sFormat = \"\";\n    boolean skip = false;\n\n    if (format == SegmentInfos.FORMAT_DIAGNOSTICS) {\n      sFormat = \"FORMAT_DIAGNOSTICS [Lucene 2.9]\";\n    } else if (format == SegmentInfos.FORMAT_HAS_VECTORS) {\n      sFormat = \"FORMAT_HAS_VECTORS [Lucene 3.1]\";\n    } else if (format == SegmentInfos.FORMAT_3_1) {\n      sFormat = \"FORMAT_3_1 [Lucene 3.1+]\";\n    } else if (format == SegmentInfos.FORMAT_4_0) {\n      sFormat = \"FORMAT_4_0 [Lucene 4.0]\";\n    } else if (format == SegmentInfos.FORMAT_CURRENT) {\n      throw new RuntimeException(\"BUG: You should update this tool!\");\n    } else if (format < SegmentInfos.FORMAT_CURRENT) {\n      sFormat = \"int=\" + format + \" [newer version of Lucene than this tool supports]\";\n      skip = true;\n    } else if (format > SegmentInfos.FORMAT_MINIMUM) {\n      sFormat = \"int=\" + format + \" [older version of Lucene than this tool supports]\";\n      skip = true;\n    }\n\n    result.segmentsFileName = segmentsFileName;\n    result.numSegments = numSegments;\n    result.segmentFormat = sFormat;\n    result.userData = sis.getUserData();\n    String userDataString;\n    if (sis.getUserData().size() > 0) {\n      userDataString = \" userData=\" + sis.getUserData();\n    } else {\n      userDataString = \"\";\n    }\n\n    String versionString = null;\n    if (oldSegs != null) {\n      if (foundNonNullVersion) {\n        versionString = \"versions=[\" + oldSegs + \" .. \" + newest + \"]\";\n      } else {\n        versionString = \"version=\" + oldSegs;\n      }\n    } else {\n      versionString = oldest.equals(newest) ? ( \"version=\" + oldest ) : (\"versions=[\" + oldest + \" .. \" + newest + \"]\");\n    }\n\n    msg(\"Segments file=\" + segmentsFileName + \" numSegments=\" + numSegments\n        + \" \" + versionString + \" format=\" + sFormat + userDataString);\n\n    if (onlySegments != null) {\n      result.partial = true;\n      if (infoStream != null)\n        infoStream.print(\"\\nChecking only these segments:\");\n      for (String s : onlySegments) {\n        if (infoStream != null)\n          infoStream.print(\" \" + s);\n      }\n      result.segmentsChecked.addAll(onlySegments);\n      msg(\":\");\n    }\n\n    if (skip) {\n      msg(\"\\nERROR: this index appears to be created by a newer version of Lucene than this tool was compiled on; please re-compile this tool on the matching version of Lucene; exiting\");\n      result.toolOutOfDate = true;\n      return result;\n    }\n\n\n    result.newSegments = (SegmentInfos) sis.clone();\n    result.newSegments.clear();\n    result.maxSegmentName = -1;\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = sis.info(i);\n      int segmentName = Integer.parseInt(info.name.substring(1), Character.MAX_RADIX);\n      if (segmentName > result.maxSegmentName) {\n        result.maxSegmentName = segmentName;\n      }\n      if (onlySegments != null && !onlySegments.contains(info.name))\n        continue;\n      Status.SegmentInfoStatus segInfoStat = new Status.SegmentInfoStatus();\n      result.segmentInfos.add(segInfoStat);\n      msg(\"  \" + (1+i) + \" of \" + numSegments + \": name=\" + info.name + \" docCount=\" + info.docCount);\n      segInfoStat.name = info.name;\n      segInfoStat.docCount = info.docCount;\n\n      int toLoseDocCount = info.docCount;\n\n      SegmentReader reader = null;\n\n      try {\n        final Codec codec = info.getCodec();\n        msg(\"    codec=\" + codec);\n        segInfoStat.codec = codec;\n        msg(\"    compound=\" + info.getUseCompoundFile());\n        segInfoStat.compound = info.getUseCompoundFile();\n        msg(\"    hasProx=\" + info.getHasProx());\n        segInfoStat.hasProx = info.getHasProx();\n        msg(\"    numFiles=\" + info.files().size());\n        segInfoStat.numFiles = info.files().size();\n        segInfoStat.sizeMB = info.sizeInBytes()/(1024.*1024.);\n        msg(\"    size (MB)=\" + nf.format(segInfoStat.sizeMB));\n        Map<String,String> diagnostics = info.getDiagnostics();\n        segInfoStat.diagnostics = diagnostics;\n        if (diagnostics.size() > 0) {\n          msg(\"    diagnostics = \" + diagnostics);\n        }\n\n        final int docStoreOffset = info.getDocStoreOffset();\n        if (docStoreOffset != -1) {\n          msg(\"    docStoreOffset=\" + docStoreOffset);\n          segInfoStat.docStoreOffset = docStoreOffset;\n          msg(\"    docStoreSegment=\" + info.getDocStoreSegment());\n          segInfoStat.docStoreSegment = info.getDocStoreSegment();\n          msg(\"    docStoreIsCompoundFile=\" + info.getDocStoreIsCompoundFile());\n          segInfoStat.docStoreCompoundFile = info.getDocStoreIsCompoundFile();\n        }\n\n        final String delFileName = info.getDelFileName();\n        if (delFileName == null){\n          msg(\"    no deletions\");\n          segInfoStat.hasDeletions = false;\n        }\n        else{\n          msg(\"    has deletions [delFileName=\" + delFileName + \"]\");\n          segInfoStat.hasDeletions = true;\n          segInfoStat.deletionsFileName = delFileName;\n        }\n        if (infoStream != null)\n          infoStream.print(\"    test: open reader.........\");\n        reader = new SegmentReader(info, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, IOContext.DEFAULT);\n\n        segInfoStat.openReaderPassed = true;\n\n        final int numDocs = reader.numDocs();\n        toLoseDocCount = numDocs;\n        if (reader.hasDeletions()) {\n          if (reader.numDocs() != info.docCount - info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + (info.docCount - info.getDelCount()) + \" vs reader=\" + reader.numDocs());\n          }\n          if ((info.docCount-reader.numDocs()) > reader.maxDoc()) {\n            throw new RuntimeException(\"too many deleted docs: maxDoc()=\" + reader.maxDoc() + \" vs del count=\" + (info.docCount-reader.numDocs()));\n          }\n          if (info.docCount - numDocs != info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          segInfoStat.numDeleted = info.docCount - numDocs;\n          msg(\"OK [\" + (segInfoStat.numDeleted) + \" deleted docs]\");\n        } else {\n          if (info.getDelCount() != 0) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          msg(\"OK\");\n        }\n        if (reader.maxDoc() != info.docCount)\n          throw new RuntimeException(\"SegmentReader.maxDoc() \" + reader.maxDoc() + \" != SegmentInfos.docCount \" + info.docCount);\n\n        // Test getFieldInfos()\n        if (infoStream != null) {\n          infoStream.print(\"    test: fields..............\");\n        }         \n        FieldInfos fieldInfos = reader.getFieldInfos();\n        msg(\"OK [\" + fieldInfos.size() + \" fields]\");\n        segInfoStat.numFields = fieldInfos.size();\n        \n        // Test Field Norms\n        segInfoStat.fieldNormStatus = testFieldNorms(fieldInfos, reader);\n\n        // Test the Term Index\n        segInfoStat.termIndexStatus = testPostings(reader);\n\n        // Test Stored Fields\n        segInfoStat.storedFieldStatus = testStoredFields(info, reader, nf);\n\n        // Test Term Vectors\n        segInfoStat.termVectorStatus = testTermVectors(info, reader, nf);\n        \n        segInfoStat.docValuesStatus = testDocValues(info, reader);\n\n        // Rethrow the first exception we encountered\n        //  This will cause stats for failed segments to be incremented properly\n        if (segInfoStat.fieldNormStatus.error != null) {\n          throw new RuntimeException(\"Field Norm test failed\");\n        } else if (segInfoStat.termIndexStatus.error != null) {\n          throw new RuntimeException(\"Term Index test failed\");\n        } else if (segInfoStat.storedFieldStatus.error != null) {\n          throw new RuntimeException(\"Stored Field test failed\");\n        } else if (segInfoStat.termVectorStatus.error != null) {\n          throw new RuntimeException(\"Term Vector test failed\");\n        }  else if (segInfoStat.docValuesStatus.error != null) {\n          throw new RuntimeException(\"DocValues test failed\");\n        }\n\n        msg(\"\");\n\n      } catch (Throwable t) {\n        msg(\"FAILED\");\n        String comment;\n        comment = \"fixIndex() would remove reference to this segment\";\n        msg(\"    WARNING: \" + comment + \"; full exception:\");\n        if (infoStream != null)\n          t.printStackTrace(infoStream);\n        msg(\"\");\n        result.totLoseDocCount += toLoseDocCount;\n        result.numBadSegments++;\n        continue;\n      } finally {\n        if (reader != null)\n          reader.close();\n      }\n\n      // Keeper\n      result.newSegments.add((SegmentInfo) info.clone());\n    }\n\n    if (0 == result.numBadSegments) {\n      result.clean = true;\n    } else\n      msg(\"WARNING: \" + result.numBadSegments + \" broken segments (containing \" + result.totLoseDocCount + \" documents) detected\");\n\n    if ( ! (result.validCounter = (result.maxSegmentName < sis.counter))) {\n      result.clean = false;\n      result.newSegments.counter = result.maxSegmentName + 1; \n      msg(\"ERROR: Next segment name counter \" + sis.counter + \" is not greater than max segment name \" + result.maxSegmentName);\n    }\n    \n    if (result.clean) {\n      msg(\"No problems were detected with this index.\\n\");\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /** Returns a {@link Status} instance detailing\n   *  the state of the index.\n   * \n   *  @param onlySegments list of specific segment names to check\n   *\n   *  <p>As this method checks every byte in the specified\n   *  segments, on a large index it can take quite a long\n   *  time to run.\n   *\n   *  <p><b>WARNING</b>: make sure\n   *  you only call this when the index is not opened by any\n   *  writer. */\n  public Status checkIndex(List<String> onlySegments) throws IOException {\n    NumberFormat nf = NumberFormat.getInstance();\n    SegmentInfos sis = new SegmentInfos();\n    Status result = new Status();\n    result.dir = dir;\n    try {\n      sis.read(dir);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read any segments file in directory\");\n      result.missingSegments = true;\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      return result;\n    }\n\n    // find the oldest and newest segment versions\n    String oldest = Integer.toString(Integer.MAX_VALUE), newest = Integer.toString(Integer.MIN_VALUE);\n    String oldSegs = null;\n    boolean foundNonNullVersion = false;\n    Comparator<String> versionComparator = StringHelper.getVersionComparator();\n    for (SegmentInfo si : sis) {\n      String version = si.getVersion();\n      if (version == null) {\n        // pre-3.1 segment\n        oldSegs = \"pre-3.1\";\n      } else {\n        foundNonNullVersion = true;\n        if (versionComparator.compare(version, oldest) < 0) {\n          oldest = version;\n        }\n        if (versionComparator.compare(version, newest) > 0) {\n          newest = version;\n        }\n      }\n    }\n\n    final int numSegments = sis.size();\n    final String segmentsFileName = sis.getCurrentSegmentFileName();\n    // note: we only read the format byte (required preamble) here!\n    IndexInput input = null;\n    try {\n      input = dir.openInput(segmentsFileName, IOContext.DEFAULT);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not open segments file in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.cantOpenSegments = true;\n      return result;\n    }\n    int format = 0;\n    try {\n      format = input.readInt();\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read segment file version in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.missingSegmentVersion = true;\n      return result;\n    } finally {\n      if (input != null)\n        input.close();\n    }\n\n    String sFormat = \"\";\n    boolean skip = false;\n\n    if (format == SegmentInfos.FORMAT_DIAGNOSTICS) {\n      sFormat = \"FORMAT_DIAGNOSTICS [Lucene 2.9]\";\n    } else if (format == SegmentInfos.FORMAT_HAS_VECTORS) {\n      sFormat = \"FORMAT_HAS_VECTORS [Lucene 3.1]\";\n    } else if (format == SegmentInfos.FORMAT_3_1) {\n      sFormat = \"FORMAT_3_1 [Lucene 3.1+]\";\n    } else if (format == SegmentInfos.FORMAT_4_0) {\n      sFormat = \"FORMAT_4_0 [Lucene 4.0]\";\n    } else if (format == SegmentInfos.FORMAT_CURRENT) {\n      throw new RuntimeException(\"BUG: You should update this tool!\");\n    } else if (format < SegmentInfos.FORMAT_CURRENT) {\n      sFormat = \"int=\" + format + \" [newer version of Lucene than this tool supports]\";\n      skip = true;\n    } else if (format > SegmentInfos.FORMAT_MINIMUM) {\n      sFormat = \"int=\" + format + \" [older version of Lucene than this tool supports]\";\n      skip = true;\n    }\n\n    result.segmentsFileName = segmentsFileName;\n    result.numSegments = numSegments;\n    result.segmentFormat = sFormat;\n    result.userData = sis.getUserData();\n    String userDataString;\n    if (sis.getUserData().size() > 0) {\n      userDataString = \" userData=\" + sis.getUserData();\n    } else {\n      userDataString = \"\";\n    }\n\n    String versionString = null;\n    if (oldSegs != null) {\n      if (foundNonNullVersion) {\n        versionString = \"versions=[\" + oldSegs + \" .. \" + newest + \"]\";\n      } else {\n        versionString = \"version=\" + oldSegs;\n      }\n    } else {\n      versionString = oldest.equals(newest) ? ( \"version=\" + oldest ) : (\"versions=[\" + oldest + \" .. \" + newest + \"]\");\n    }\n\n    msg(\"Segments file=\" + segmentsFileName + \" numSegments=\" + numSegments\n        + \" \" + versionString + \" format=\" + sFormat + userDataString);\n\n    if (onlySegments != null) {\n      result.partial = true;\n      if (infoStream != null)\n        infoStream.print(\"\\nChecking only these segments:\");\n      for (String s : onlySegments) {\n        if (infoStream != null)\n          infoStream.print(\" \" + s);\n      }\n      result.segmentsChecked.addAll(onlySegments);\n      msg(\":\");\n    }\n\n    if (skip) {\n      msg(\"\\nERROR: this index appears to be created by a newer version of Lucene than this tool was compiled on; please re-compile this tool on the matching version of Lucene; exiting\");\n      result.toolOutOfDate = true;\n      return result;\n    }\n\n\n    result.newSegments = (SegmentInfos) sis.clone();\n    result.newSegments.clear();\n    result.maxSegmentName = -1;\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = sis.info(i);\n      int segmentName = Integer.parseInt(info.name.substring(1), Character.MAX_RADIX);\n      if (segmentName > result.maxSegmentName) {\n        result.maxSegmentName = segmentName;\n      }\n      if (onlySegments != null && !onlySegments.contains(info.name))\n        continue;\n      Status.SegmentInfoStatus segInfoStat = new Status.SegmentInfoStatus();\n      result.segmentInfos.add(segInfoStat);\n      msg(\"  \" + (1+i) + \" of \" + numSegments + \": name=\" + info.name + \" docCount=\" + info.docCount);\n      segInfoStat.name = info.name;\n      segInfoStat.docCount = info.docCount;\n\n      int toLoseDocCount = info.docCount;\n\n      SegmentReader reader = null;\n\n      try {\n        final Codec codec = info.getCodec();\n        msg(\"    codec=\" + codec);\n        segInfoStat.codec = codec;\n        msg(\"    compound=\" + info.getUseCompoundFile());\n        segInfoStat.compound = info.getUseCompoundFile();\n        msg(\"    hasProx=\" + info.getHasProx());\n        segInfoStat.hasProx = info.getHasProx();\n        msg(\"    numFiles=\" + info.files().size());\n        segInfoStat.numFiles = info.files().size();\n        segInfoStat.sizeMB = info.sizeInBytes()/(1024.*1024.);\n        msg(\"    size (MB)=\" + nf.format(segInfoStat.sizeMB));\n        Map<String,String> diagnostics = info.getDiagnostics();\n        segInfoStat.diagnostics = diagnostics;\n        if (diagnostics.size() > 0) {\n          msg(\"    diagnostics = \" + diagnostics);\n        }\n\n        final int docStoreOffset = info.getDocStoreOffset();\n        if (docStoreOffset != -1) {\n          msg(\"    docStoreOffset=\" + docStoreOffset);\n          segInfoStat.docStoreOffset = docStoreOffset;\n          msg(\"    docStoreSegment=\" + info.getDocStoreSegment());\n          segInfoStat.docStoreSegment = info.getDocStoreSegment();\n          msg(\"    docStoreIsCompoundFile=\" + info.getDocStoreIsCompoundFile());\n          segInfoStat.docStoreCompoundFile = info.getDocStoreIsCompoundFile();\n        }\n\n        final String delFileName = info.getDelFileName();\n        if (delFileName == null){\n          msg(\"    no deletions\");\n          segInfoStat.hasDeletions = false;\n        }\n        else{\n          msg(\"    has deletions [delFileName=\" + delFileName + \"]\");\n          segInfoStat.hasDeletions = true;\n          segInfoStat.deletionsFileName = delFileName;\n        }\n        if (infoStream != null)\n          infoStream.print(\"    test: open reader.........\");\n        reader = new SegmentReader(info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, IOContext.DEFAULT);\n\n        segInfoStat.openReaderPassed = true;\n\n        final int numDocs = reader.numDocs();\n        toLoseDocCount = numDocs;\n        if (reader.hasDeletions()) {\n          if (reader.numDocs() != info.docCount - info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + (info.docCount - info.getDelCount()) + \" vs reader=\" + reader.numDocs());\n          }\n          if ((info.docCount-reader.numDocs()) > reader.maxDoc()) {\n            throw new RuntimeException(\"too many deleted docs: maxDoc()=\" + reader.maxDoc() + \" vs del count=\" + (info.docCount-reader.numDocs()));\n          }\n          if (info.docCount - numDocs != info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          segInfoStat.numDeleted = info.docCount - numDocs;\n          msg(\"OK [\" + (segInfoStat.numDeleted) + \" deleted docs]\");\n        } else {\n          if (info.getDelCount() != 0) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          msg(\"OK\");\n        }\n        if (reader.maxDoc() != info.docCount)\n          throw new RuntimeException(\"SegmentReader.maxDoc() \" + reader.maxDoc() + \" != SegmentInfos.docCount \" + info.docCount);\n\n        // Test getFieldInfos()\n        if (infoStream != null) {\n          infoStream.print(\"    test: fields..............\");\n        }         \n        FieldInfos fieldInfos = reader.getFieldInfos();\n        msg(\"OK [\" + fieldInfos.size() + \" fields]\");\n        segInfoStat.numFields = fieldInfos.size();\n        \n        // Test Field Norms\n        segInfoStat.fieldNormStatus = testFieldNorms(fieldInfos, reader);\n\n        // Test the Term Index\n        segInfoStat.termIndexStatus = testPostings(reader);\n\n        // Test Stored Fields\n        segInfoStat.storedFieldStatus = testStoredFields(info, reader, nf);\n\n        // Test Term Vectors\n        segInfoStat.termVectorStatus = testTermVectors(info, reader, nf);\n        \n        segInfoStat.docValuesStatus = testDocValues(info, reader);\n\n        // Rethrow the first exception we encountered\n        //  This will cause stats for failed segments to be incremented properly\n        if (segInfoStat.fieldNormStatus.error != null) {\n          throw new RuntimeException(\"Field Norm test failed\");\n        } else if (segInfoStat.termIndexStatus.error != null) {\n          throw new RuntimeException(\"Term Index test failed\");\n        } else if (segInfoStat.storedFieldStatus.error != null) {\n          throw new RuntimeException(\"Stored Field test failed\");\n        } else if (segInfoStat.termVectorStatus.error != null) {\n          throw new RuntimeException(\"Term Vector test failed\");\n        }  else if (segInfoStat.docValuesStatus.error != null) {\n          throw new RuntimeException(\"DocValues test failed\");\n        }\n\n        msg(\"\");\n\n      } catch (Throwable t) {\n        msg(\"FAILED\");\n        String comment;\n        comment = \"fixIndex() would remove reference to this segment\";\n        msg(\"    WARNING: \" + comment + \"; full exception:\");\n        if (infoStream != null)\n          t.printStackTrace(infoStream);\n        msg(\"\");\n        result.totLoseDocCount += toLoseDocCount;\n        result.numBadSegments++;\n        continue;\n      } finally {\n        if (reader != null)\n          reader.close();\n      }\n\n      // Keeper\n      result.newSegments.add((SegmentInfo) info.clone());\n    }\n\n    if (0 == result.numBadSegments) {\n      result.clean = true;\n    } else\n      msg(\"WARNING: \" + result.numBadSegments + \" broken segments (containing \" + result.totLoseDocCount + \" documents) detected\");\n\n    if ( ! (result.validCounter = (result.maxSegmentName < sis.counter))) {\n      result.clean = false;\n      result.newSegments.counter = result.maxSegmentName + 1; \n      msg(\"ERROR: Next segment name counter \" + sis.counter + \" is not greater than max segment name \" + result.maxSegmentName);\n    }\n    \n    if (result.clean) {\n      msg(\"No problems were detected with this index.\\n\");\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31","date":1327836826,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/CheckIndex#checkIndex(List[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CheckIndex#checkIndex(List[String]).mjava","sourceNew":"  /** Returns a {@link Status} instance detailing\n   *  the state of the index.\n   * \n   *  @param onlySegments list of specific segment names to check\n   *\n   *  <p>As this method checks every byte in the specified\n   *  segments, on a large index it can take quite a long\n   *  time to run.\n   *\n   *  <p><b>WARNING</b>: make sure\n   *  you only call this when the index is not opened by any\n   *  writer. */\n  public Status checkIndex(List<String> onlySegments) throws IOException {\n    NumberFormat nf = NumberFormat.getInstance();\n    SegmentInfos sis = new SegmentInfos();\n    Status result = new Status();\n    result.dir = dir;\n    try {\n      sis.read(dir);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read any segments file in directory\");\n      result.missingSegments = true;\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      return result;\n    }\n\n    // find the oldest and newest segment versions\n    String oldest = Integer.toString(Integer.MAX_VALUE), newest = Integer.toString(Integer.MIN_VALUE);\n    String oldSegs = null;\n    boolean foundNonNullVersion = false;\n    Comparator<String> versionComparator = StringHelper.getVersionComparator();\n    for (SegmentInfo si : sis) {\n      String version = si.getVersion();\n      if (version == null) {\n        // pre-3.1 segment\n        oldSegs = \"pre-3.1\";\n      } else {\n        foundNonNullVersion = true;\n        if (versionComparator.compare(version, oldest) < 0) {\n          oldest = version;\n        }\n        if (versionComparator.compare(version, newest) > 0) {\n          newest = version;\n        }\n      }\n    }\n\n    final int numSegments = sis.size();\n    final String segmentsFileName = sis.getCurrentSegmentFileName();\n    // note: we only read the format byte (required preamble) here!\n    IndexInput input = null;\n    try {\n      input = dir.openInput(segmentsFileName, IOContext.DEFAULT);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not open segments file in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.cantOpenSegments = true;\n      return result;\n    }\n    int format = 0;\n    try {\n      format = input.readInt();\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read segment file version in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.missingSegmentVersion = true;\n      return result;\n    } finally {\n      if (input != null)\n        input.close();\n    }\n\n    String sFormat = \"\";\n    boolean skip = false;\n\n    if (format == SegmentInfos.FORMAT_DIAGNOSTICS) {\n      sFormat = \"FORMAT_DIAGNOSTICS [Lucene 2.9]\";\n    } else if (format == SegmentInfos.FORMAT_HAS_VECTORS) {\n      sFormat = \"FORMAT_HAS_VECTORS [Lucene 3.1]\";\n    } else if (format == SegmentInfos.FORMAT_3_1) {\n      sFormat = \"FORMAT_3_1 [Lucene 3.1+]\";\n    } else if (format == SegmentInfos.FORMAT_4_0) {\n      sFormat = \"FORMAT_4_0 [Lucene 4.0]\";\n    } else if (format == SegmentInfos.FORMAT_CURRENT) {\n      throw new RuntimeException(\"BUG: You should update this tool!\");\n    } else if (format < SegmentInfos.FORMAT_CURRENT) {\n      sFormat = \"int=\" + format + \" [newer version of Lucene than this tool supports]\";\n      skip = true;\n    } else if (format > SegmentInfos.FORMAT_MINIMUM) {\n      sFormat = \"int=\" + format + \" [older version of Lucene than this tool supports]\";\n      skip = true;\n    }\n\n    result.segmentsFileName = segmentsFileName;\n    result.numSegments = numSegments;\n    result.segmentFormat = sFormat;\n    result.userData = sis.getUserData();\n    String userDataString;\n    if (sis.getUserData().size() > 0) {\n      userDataString = \" userData=\" + sis.getUserData();\n    } else {\n      userDataString = \"\";\n    }\n\n    String versionString = null;\n    if (oldSegs != null) {\n      if (foundNonNullVersion) {\n        versionString = \"versions=[\" + oldSegs + \" .. \" + newest + \"]\";\n      } else {\n        versionString = \"version=\" + oldSegs;\n      }\n    } else {\n      versionString = oldest.equals(newest) ? ( \"version=\" + oldest ) : (\"versions=[\" + oldest + \" .. \" + newest + \"]\");\n    }\n\n    msg(\"Segments file=\" + segmentsFileName + \" numSegments=\" + numSegments\n        + \" \" + versionString + \" format=\" + sFormat + userDataString);\n\n    if (onlySegments != null) {\n      result.partial = true;\n      if (infoStream != null)\n        infoStream.print(\"\\nChecking only these segments:\");\n      for (String s : onlySegments) {\n        if (infoStream != null)\n          infoStream.print(\" \" + s);\n      }\n      result.segmentsChecked.addAll(onlySegments);\n      msg(\":\");\n    }\n\n    if (skip) {\n      msg(\"\\nERROR: this index appears to be created by a newer version of Lucene than this tool was compiled on; please re-compile this tool on the matching version of Lucene; exiting\");\n      result.toolOutOfDate = true;\n      return result;\n    }\n\n\n    result.newSegments = (SegmentInfos) sis.clone();\n    result.newSegments.clear();\n    result.maxSegmentName = -1;\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = sis.info(i);\n      int segmentName = Integer.parseInt(info.name.substring(1), Character.MAX_RADIX);\n      if (segmentName > result.maxSegmentName) {\n        result.maxSegmentName = segmentName;\n      }\n      if (onlySegments != null && !onlySegments.contains(info.name))\n        continue;\n      Status.SegmentInfoStatus segInfoStat = new Status.SegmentInfoStatus();\n      result.segmentInfos.add(segInfoStat);\n      msg(\"  \" + (1+i) + \" of \" + numSegments + \": name=\" + info.name + \" docCount=\" + info.docCount);\n      segInfoStat.name = info.name;\n      segInfoStat.docCount = info.docCount;\n\n      int toLoseDocCount = info.docCount;\n\n      SegmentReader reader = null;\n\n      try {\n        final Codec codec = info.getCodec();\n        msg(\"    codec=\" + codec);\n        segInfoStat.codec = codec;\n        msg(\"    compound=\" + info.getUseCompoundFile());\n        segInfoStat.compound = info.getUseCompoundFile();\n        msg(\"    hasProx=\" + info.getHasProx());\n        segInfoStat.hasProx = info.getHasProx();\n        msg(\"    numFiles=\" + info.files().size());\n        segInfoStat.numFiles = info.files().size();\n        segInfoStat.sizeMB = info.sizeInBytes()/(1024.*1024.);\n        msg(\"    size (MB)=\" + nf.format(segInfoStat.sizeMB));\n        Map<String,String> diagnostics = info.getDiagnostics();\n        segInfoStat.diagnostics = diagnostics;\n        if (diagnostics.size() > 0) {\n          msg(\"    diagnostics = \" + diagnostics);\n        }\n\n        final int docStoreOffset = info.getDocStoreOffset();\n        if (docStoreOffset != -1) {\n          msg(\"    docStoreOffset=\" + docStoreOffset);\n          segInfoStat.docStoreOffset = docStoreOffset;\n          msg(\"    docStoreSegment=\" + info.getDocStoreSegment());\n          segInfoStat.docStoreSegment = info.getDocStoreSegment();\n          msg(\"    docStoreIsCompoundFile=\" + info.getDocStoreIsCompoundFile());\n          segInfoStat.docStoreCompoundFile = info.getDocStoreIsCompoundFile();\n        }\n\n        if (info.hasDeletions()) {\n          msg(\"    no deletions\");\n          segInfoStat.hasDeletions = false;\n        }\n        else{\n          msg(\"    has deletions [delGen=\" + info.getDelGen() + \"]\");\n          segInfoStat.hasDeletions = true;\n          segInfoStat.deletionsGen = info.getDelGen();\n        }\n        if (infoStream != null)\n          infoStream.print(\"    test: open reader.........\");\n        reader = new SegmentReader(info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, IOContext.DEFAULT);\n\n        segInfoStat.openReaderPassed = true;\n\n        final int numDocs = reader.numDocs();\n        toLoseDocCount = numDocs;\n        if (reader.hasDeletions()) {\n          if (reader.numDocs() != info.docCount - info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + (info.docCount - info.getDelCount()) + \" vs reader=\" + reader.numDocs());\n          }\n          if ((info.docCount-reader.numDocs()) > reader.maxDoc()) {\n            throw new RuntimeException(\"too many deleted docs: maxDoc()=\" + reader.maxDoc() + \" vs del count=\" + (info.docCount-reader.numDocs()));\n          }\n          if (info.docCount - numDocs != info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          segInfoStat.numDeleted = info.docCount - numDocs;\n          msg(\"OK [\" + (segInfoStat.numDeleted) + \" deleted docs]\");\n        } else {\n          if (info.getDelCount() != 0) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          msg(\"OK\");\n        }\n        if (reader.maxDoc() != info.docCount)\n          throw new RuntimeException(\"SegmentReader.maxDoc() \" + reader.maxDoc() + \" != SegmentInfos.docCount \" + info.docCount);\n\n        // Test getFieldInfos()\n        if (infoStream != null) {\n          infoStream.print(\"    test: fields..............\");\n        }         \n        FieldInfos fieldInfos = reader.getFieldInfos();\n        msg(\"OK [\" + fieldInfos.size() + \" fields]\");\n        segInfoStat.numFields = fieldInfos.size();\n        \n        // Test Field Norms\n        segInfoStat.fieldNormStatus = testFieldNorms(fieldInfos, reader);\n\n        // Test the Term Index\n        segInfoStat.termIndexStatus = testPostings(reader);\n\n        // Test Stored Fields\n        segInfoStat.storedFieldStatus = testStoredFields(info, reader, nf);\n\n        // Test Term Vectors\n        segInfoStat.termVectorStatus = testTermVectors(info, reader, nf);\n        \n        segInfoStat.docValuesStatus = testDocValues(info, reader);\n\n        // Rethrow the first exception we encountered\n        //  This will cause stats for failed segments to be incremented properly\n        if (segInfoStat.fieldNormStatus.error != null) {\n          throw new RuntimeException(\"Field Norm test failed\");\n        } else if (segInfoStat.termIndexStatus.error != null) {\n          throw new RuntimeException(\"Term Index test failed\");\n        } else if (segInfoStat.storedFieldStatus.error != null) {\n          throw new RuntimeException(\"Stored Field test failed\");\n        } else if (segInfoStat.termVectorStatus.error != null) {\n          throw new RuntimeException(\"Term Vector test failed\");\n        }  else if (segInfoStat.docValuesStatus.error != null) {\n          throw new RuntimeException(\"DocValues test failed\");\n        }\n\n        msg(\"\");\n\n      } catch (Throwable t) {\n        msg(\"FAILED\");\n        String comment;\n        comment = \"fixIndex() would remove reference to this segment\";\n        msg(\"    WARNING: \" + comment + \"; full exception:\");\n        if (infoStream != null)\n          t.printStackTrace(infoStream);\n        msg(\"\");\n        result.totLoseDocCount += toLoseDocCount;\n        result.numBadSegments++;\n        continue;\n      } finally {\n        if (reader != null)\n          reader.close();\n      }\n\n      // Keeper\n      result.newSegments.add((SegmentInfo) info.clone());\n    }\n\n    if (0 == result.numBadSegments) {\n      result.clean = true;\n    } else\n      msg(\"WARNING: \" + result.numBadSegments + \" broken segments (containing \" + result.totLoseDocCount + \" documents) detected\");\n\n    if ( ! (result.validCounter = (result.maxSegmentName < sis.counter))) {\n      result.clean = false;\n      result.newSegments.counter = result.maxSegmentName + 1; \n      msg(\"ERROR: Next segment name counter \" + sis.counter + \" is not greater than max segment name \" + result.maxSegmentName);\n    }\n    \n    if (result.clean) {\n      msg(\"No problems were detected with this index.\\n\");\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /** Returns a {@link Status} instance detailing\n   *  the state of the index.\n   * \n   *  @param onlySegments list of specific segment names to check\n   *\n   *  <p>As this method checks every byte in the specified\n   *  segments, on a large index it can take quite a long\n   *  time to run.\n   *\n   *  <p><b>WARNING</b>: make sure\n   *  you only call this when the index is not opened by any\n   *  writer. */\n  public Status checkIndex(List<String> onlySegments) throws IOException {\n    NumberFormat nf = NumberFormat.getInstance();\n    SegmentInfos sis = new SegmentInfos();\n    Status result = new Status();\n    result.dir = dir;\n    try {\n      sis.read(dir);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read any segments file in directory\");\n      result.missingSegments = true;\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      return result;\n    }\n\n    // find the oldest and newest segment versions\n    String oldest = Integer.toString(Integer.MAX_VALUE), newest = Integer.toString(Integer.MIN_VALUE);\n    String oldSegs = null;\n    boolean foundNonNullVersion = false;\n    Comparator<String> versionComparator = StringHelper.getVersionComparator();\n    for (SegmentInfo si : sis) {\n      String version = si.getVersion();\n      if (version == null) {\n        // pre-3.1 segment\n        oldSegs = \"pre-3.1\";\n      } else {\n        foundNonNullVersion = true;\n        if (versionComparator.compare(version, oldest) < 0) {\n          oldest = version;\n        }\n        if (versionComparator.compare(version, newest) > 0) {\n          newest = version;\n        }\n      }\n    }\n\n    final int numSegments = sis.size();\n    final String segmentsFileName = sis.getCurrentSegmentFileName();\n    // note: we only read the format byte (required preamble) here!\n    IndexInput input = null;\n    try {\n      input = dir.openInput(segmentsFileName, IOContext.DEFAULT);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not open segments file in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.cantOpenSegments = true;\n      return result;\n    }\n    int format = 0;\n    try {\n      format = input.readInt();\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read segment file version in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.missingSegmentVersion = true;\n      return result;\n    } finally {\n      if (input != null)\n        input.close();\n    }\n\n    String sFormat = \"\";\n    boolean skip = false;\n\n    if (format == SegmentInfos.FORMAT_DIAGNOSTICS) {\n      sFormat = \"FORMAT_DIAGNOSTICS [Lucene 2.9]\";\n    } else if (format == SegmentInfos.FORMAT_HAS_VECTORS) {\n      sFormat = \"FORMAT_HAS_VECTORS [Lucene 3.1]\";\n    } else if (format == SegmentInfos.FORMAT_3_1) {\n      sFormat = \"FORMAT_3_1 [Lucene 3.1+]\";\n    } else if (format == SegmentInfos.FORMAT_4_0) {\n      sFormat = \"FORMAT_4_0 [Lucene 4.0]\";\n    } else if (format == SegmentInfos.FORMAT_CURRENT) {\n      throw new RuntimeException(\"BUG: You should update this tool!\");\n    } else if (format < SegmentInfos.FORMAT_CURRENT) {\n      sFormat = \"int=\" + format + \" [newer version of Lucene than this tool supports]\";\n      skip = true;\n    } else if (format > SegmentInfos.FORMAT_MINIMUM) {\n      sFormat = \"int=\" + format + \" [older version of Lucene than this tool supports]\";\n      skip = true;\n    }\n\n    result.segmentsFileName = segmentsFileName;\n    result.numSegments = numSegments;\n    result.segmentFormat = sFormat;\n    result.userData = sis.getUserData();\n    String userDataString;\n    if (sis.getUserData().size() > 0) {\n      userDataString = \" userData=\" + sis.getUserData();\n    } else {\n      userDataString = \"\";\n    }\n\n    String versionString = null;\n    if (oldSegs != null) {\n      if (foundNonNullVersion) {\n        versionString = \"versions=[\" + oldSegs + \" .. \" + newest + \"]\";\n      } else {\n        versionString = \"version=\" + oldSegs;\n      }\n    } else {\n      versionString = oldest.equals(newest) ? ( \"version=\" + oldest ) : (\"versions=[\" + oldest + \" .. \" + newest + \"]\");\n    }\n\n    msg(\"Segments file=\" + segmentsFileName + \" numSegments=\" + numSegments\n        + \" \" + versionString + \" format=\" + sFormat + userDataString);\n\n    if (onlySegments != null) {\n      result.partial = true;\n      if (infoStream != null)\n        infoStream.print(\"\\nChecking only these segments:\");\n      for (String s : onlySegments) {\n        if (infoStream != null)\n          infoStream.print(\" \" + s);\n      }\n      result.segmentsChecked.addAll(onlySegments);\n      msg(\":\");\n    }\n\n    if (skip) {\n      msg(\"\\nERROR: this index appears to be created by a newer version of Lucene than this tool was compiled on; please re-compile this tool on the matching version of Lucene; exiting\");\n      result.toolOutOfDate = true;\n      return result;\n    }\n\n\n    result.newSegments = (SegmentInfos) sis.clone();\n    result.newSegments.clear();\n    result.maxSegmentName = -1;\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = sis.info(i);\n      int segmentName = Integer.parseInt(info.name.substring(1), Character.MAX_RADIX);\n      if (segmentName > result.maxSegmentName) {\n        result.maxSegmentName = segmentName;\n      }\n      if (onlySegments != null && !onlySegments.contains(info.name))\n        continue;\n      Status.SegmentInfoStatus segInfoStat = new Status.SegmentInfoStatus();\n      result.segmentInfos.add(segInfoStat);\n      msg(\"  \" + (1+i) + \" of \" + numSegments + \": name=\" + info.name + \" docCount=\" + info.docCount);\n      segInfoStat.name = info.name;\n      segInfoStat.docCount = info.docCount;\n\n      int toLoseDocCount = info.docCount;\n\n      SegmentReader reader = null;\n\n      try {\n        final Codec codec = info.getCodec();\n        msg(\"    codec=\" + codec);\n        segInfoStat.codec = codec;\n        msg(\"    compound=\" + info.getUseCompoundFile());\n        segInfoStat.compound = info.getUseCompoundFile();\n        msg(\"    hasProx=\" + info.getHasProx());\n        segInfoStat.hasProx = info.getHasProx();\n        msg(\"    numFiles=\" + info.files().size());\n        segInfoStat.numFiles = info.files().size();\n        segInfoStat.sizeMB = info.sizeInBytes()/(1024.*1024.);\n        msg(\"    size (MB)=\" + nf.format(segInfoStat.sizeMB));\n        Map<String,String> diagnostics = info.getDiagnostics();\n        segInfoStat.diagnostics = diagnostics;\n        if (diagnostics.size() > 0) {\n          msg(\"    diagnostics = \" + diagnostics);\n        }\n\n        final int docStoreOffset = info.getDocStoreOffset();\n        if (docStoreOffset != -1) {\n          msg(\"    docStoreOffset=\" + docStoreOffset);\n          segInfoStat.docStoreOffset = docStoreOffset;\n          msg(\"    docStoreSegment=\" + info.getDocStoreSegment());\n          segInfoStat.docStoreSegment = info.getDocStoreSegment();\n          msg(\"    docStoreIsCompoundFile=\" + info.getDocStoreIsCompoundFile());\n          segInfoStat.docStoreCompoundFile = info.getDocStoreIsCompoundFile();\n        }\n\n        final String delFileName = info.getDelFileName();\n        if (delFileName == null){\n          msg(\"    no deletions\");\n          segInfoStat.hasDeletions = false;\n        }\n        else{\n          msg(\"    has deletions [delFileName=\" + delFileName + \"]\");\n          segInfoStat.hasDeletions = true;\n          segInfoStat.deletionsFileName = delFileName;\n        }\n        if (infoStream != null)\n          infoStream.print(\"    test: open reader.........\");\n        reader = new SegmentReader(info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, IOContext.DEFAULT);\n\n        segInfoStat.openReaderPassed = true;\n\n        final int numDocs = reader.numDocs();\n        toLoseDocCount = numDocs;\n        if (reader.hasDeletions()) {\n          if (reader.numDocs() != info.docCount - info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + (info.docCount - info.getDelCount()) + \" vs reader=\" + reader.numDocs());\n          }\n          if ((info.docCount-reader.numDocs()) > reader.maxDoc()) {\n            throw new RuntimeException(\"too many deleted docs: maxDoc()=\" + reader.maxDoc() + \" vs del count=\" + (info.docCount-reader.numDocs()));\n          }\n          if (info.docCount - numDocs != info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          segInfoStat.numDeleted = info.docCount - numDocs;\n          msg(\"OK [\" + (segInfoStat.numDeleted) + \" deleted docs]\");\n        } else {\n          if (info.getDelCount() != 0) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          msg(\"OK\");\n        }\n        if (reader.maxDoc() != info.docCount)\n          throw new RuntimeException(\"SegmentReader.maxDoc() \" + reader.maxDoc() + \" != SegmentInfos.docCount \" + info.docCount);\n\n        // Test getFieldInfos()\n        if (infoStream != null) {\n          infoStream.print(\"    test: fields..............\");\n        }         \n        FieldInfos fieldInfos = reader.getFieldInfos();\n        msg(\"OK [\" + fieldInfos.size() + \" fields]\");\n        segInfoStat.numFields = fieldInfos.size();\n        \n        // Test Field Norms\n        segInfoStat.fieldNormStatus = testFieldNorms(fieldInfos, reader);\n\n        // Test the Term Index\n        segInfoStat.termIndexStatus = testPostings(reader);\n\n        // Test Stored Fields\n        segInfoStat.storedFieldStatus = testStoredFields(info, reader, nf);\n\n        // Test Term Vectors\n        segInfoStat.termVectorStatus = testTermVectors(info, reader, nf);\n        \n        segInfoStat.docValuesStatus = testDocValues(info, reader);\n\n        // Rethrow the first exception we encountered\n        //  This will cause stats for failed segments to be incremented properly\n        if (segInfoStat.fieldNormStatus.error != null) {\n          throw new RuntimeException(\"Field Norm test failed\");\n        } else if (segInfoStat.termIndexStatus.error != null) {\n          throw new RuntimeException(\"Term Index test failed\");\n        } else if (segInfoStat.storedFieldStatus.error != null) {\n          throw new RuntimeException(\"Stored Field test failed\");\n        } else if (segInfoStat.termVectorStatus.error != null) {\n          throw new RuntimeException(\"Term Vector test failed\");\n        }  else if (segInfoStat.docValuesStatus.error != null) {\n          throw new RuntimeException(\"DocValues test failed\");\n        }\n\n        msg(\"\");\n\n      } catch (Throwable t) {\n        msg(\"FAILED\");\n        String comment;\n        comment = \"fixIndex() would remove reference to this segment\";\n        msg(\"    WARNING: \" + comment + \"; full exception:\");\n        if (infoStream != null)\n          t.printStackTrace(infoStream);\n        msg(\"\");\n        result.totLoseDocCount += toLoseDocCount;\n        result.numBadSegments++;\n        continue;\n      } finally {\n        if (reader != null)\n          reader.close();\n      }\n\n      // Keeper\n      result.newSegments.add((SegmentInfo) info.clone());\n    }\n\n    if (0 == result.numBadSegments) {\n      result.clean = true;\n    } else\n      msg(\"WARNING: \" + result.numBadSegments + \" broken segments (containing \" + result.totLoseDocCount + \" documents) detected\");\n\n    if ( ! (result.validCounter = (result.maxSegmentName < sis.counter))) {\n      result.clean = false;\n      result.newSegments.counter = result.maxSegmentName + 1; \n      msg(\"ERROR: Next segment name counter \" + sis.counter + \" is not greater than max segment name \" + result.maxSegmentName);\n    }\n    \n    if (result.clean) {\n      msg(\"No problems were detected with this index.\\n\");\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/CheckIndex#checkIndex(List[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CheckIndex#checkIndex(List[String]).mjava","sourceNew":"  /** Returns a {@link Status} instance detailing\n   *  the state of the index.\n   * \n   *  @param onlySegments list of specific segment names to check\n   *\n   *  <p>As this method checks every byte in the specified\n   *  segments, on a large index it can take quite a long\n   *  time to run.\n   *\n   *  <p><b>WARNING</b>: make sure\n   *  you only call this when the index is not opened by any\n   *  writer. */\n  public Status checkIndex(List<String> onlySegments) throws IOException {\n    NumberFormat nf = NumberFormat.getInstance();\n    SegmentInfos sis = new SegmentInfos();\n    Status result = new Status();\n    result.dir = dir;\n    try {\n      sis.read(dir);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read any segments file in directory\");\n      result.missingSegments = true;\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      return result;\n    }\n\n    // find the oldest and newest segment versions\n    String oldest = Integer.toString(Integer.MAX_VALUE), newest = Integer.toString(Integer.MIN_VALUE);\n    String oldSegs = null;\n    boolean foundNonNullVersion = false;\n    Comparator<String> versionComparator = StringHelper.getVersionComparator();\n    for (SegmentInfo si : sis) {\n      String version = si.getVersion();\n      if (version == null) {\n        // pre-3.1 segment\n        oldSegs = \"pre-3.1\";\n      } else {\n        foundNonNullVersion = true;\n        if (versionComparator.compare(version, oldest) < 0) {\n          oldest = version;\n        }\n        if (versionComparator.compare(version, newest) > 0) {\n          newest = version;\n        }\n      }\n    }\n\n    final int numSegments = sis.size();\n    final String segmentsFileName = sis.getCurrentSegmentFileName();\n    // note: we only read the format byte (required preamble) here!\n    IndexInput input = null;\n    try {\n      input = dir.openInput(segmentsFileName, IOContext.DEFAULT);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not open segments file in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.cantOpenSegments = true;\n      return result;\n    }\n    int format = 0;\n    try {\n      format = input.readInt();\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read segment file version in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.missingSegmentVersion = true;\n      return result;\n    } finally {\n      if (input != null)\n        input.close();\n    }\n\n    String sFormat = \"\";\n    boolean skip = false;\n\n    if (format == SegmentInfos.FORMAT_DIAGNOSTICS) {\n      sFormat = \"FORMAT_DIAGNOSTICS [Lucene 2.9]\";\n    } else if (format == SegmentInfos.FORMAT_HAS_VECTORS) {\n      sFormat = \"FORMAT_HAS_VECTORS [Lucene 3.1]\";\n    } else if (format == SegmentInfos.FORMAT_3_1) {\n      sFormat = \"FORMAT_3_1 [Lucene 3.1+]\";\n    } else if (format == SegmentInfos.FORMAT_4_0) {\n      sFormat = \"FORMAT_4_0 [Lucene 4.0]\";\n    } else if (format == SegmentInfos.FORMAT_CURRENT) {\n      throw new RuntimeException(\"BUG: You should update this tool!\");\n    } else if (format < SegmentInfos.FORMAT_CURRENT) {\n      sFormat = \"int=\" + format + \" [newer version of Lucene than this tool supports]\";\n      skip = true;\n    } else if (format > SegmentInfos.FORMAT_MINIMUM) {\n      sFormat = \"int=\" + format + \" [older version of Lucene than this tool supports]\";\n      skip = true;\n    }\n\n    result.segmentsFileName = segmentsFileName;\n    result.numSegments = numSegments;\n    result.segmentFormat = sFormat;\n    result.userData = sis.getUserData();\n    String userDataString;\n    if (sis.getUserData().size() > 0) {\n      userDataString = \" userData=\" + sis.getUserData();\n    } else {\n      userDataString = \"\";\n    }\n\n    String versionString = null;\n    if (oldSegs != null) {\n      if (foundNonNullVersion) {\n        versionString = \"versions=[\" + oldSegs + \" .. \" + newest + \"]\";\n      } else {\n        versionString = \"version=\" + oldSegs;\n      }\n    } else {\n      versionString = oldest.equals(newest) ? ( \"version=\" + oldest ) : (\"versions=[\" + oldest + \" .. \" + newest + \"]\");\n    }\n\n    msg(\"Segments file=\" + segmentsFileName + \" numSegments=\" + numSegments\n        + \" \" + versionString + \" format=\" + sFormat + userDataString);\n\n    if (onlySegments != null) {\n      result.partial = true;\n      if (infoStream != null)\n        infoStream.print(\"\\nChecking only these segments:\");\n      for (String s : onlySegments) {\n        if (infoStream != null)\n          infoStream.print(\" \" + s);\n      }\n      result.segmentsChecked.addAll(onlySegments);\n      msg(\":\");\n    }\n\n    if (skip) {\n      msg(\"\\nERROR: this index appears to be created by a newer version of Lucene than this tool was compiled on; please re-compile this tool on the matching version of Lucene; exiting\");\n      result.toolOutOfDate = true;\n      return result;\n    }\n\n\n    result.newSegments = (SegmentInfos) sis.clone();\n    result.newSegments.clear();\n    result.maxSegmentName = -1;\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = sis.info(i);\n      int segmentName = Integer.parseInt(info.name.substring(1), Character.MAX_RADIX);\n      if (segmentName > result.maxSegmentName) {\n        result.maxSegmentName = segmentName;\n      }\n      if (onlySegments != null && !onlySegments.contains(info.name))\n        continue;\n      Status.SegmentInfoStatus segInfoStat = new Status.SegmentInfoStatus();\n      result.segmentInfos.add(segInfoStat);\n      msg(\"  \" + (1+i) + \" of \" + numSegments + \": name=\" + info.name + \" docCount=\" + info.docCount);\n      segInfoStat.name = info.name;\n      segInfoStat.docCount = info.docCount;\n\n      int toLoseDocCount = info.docCount;\n\n      SegmentReader reader = null;\n\n      try {\n        final Codec codec = info.getCodec();\n        msg(\"    codec=\" + codec);\n        segInfoStat.codec = codec;\n        msg(\"    compound=\" + info.getUseCompoundFile());\n        segInfoStat.compound = info.getUseCompoundFile();\n        msg(\"    hasProx=\" + info.getHasProx());\n        segInfoStat.hasProx = info.getHasProx();\n        msg(\"    numFiles=\" + info.files().size());\n        segInfoStat.numFiles = info.files().size();\n        segInfoStat.sizeMB = info.sizeInBytes()/(1024.*1024.);\n        msg(\"    size (MB)=\" + nf.format(segInfoStat.sizeMB));\n        Map<String,String> diagnostics = info.getDiagnostics();\n        segInfoStat.diagnostics = diagnostics;\n        if (diagnostics.size() > 0) {\n          msg(\"    diagnostics = \" + diagnostics);\n        }\n\n        final int docStoreOffset = info.getDocStoreOffset();\n        if (docStoreOffset != -1) {\n          msg(\"    docStoreOffset=\" + docStoreOffset);\n          segInfoStat.docStoreOffset = docStoreOffset;\n          msg(\"    docStoreSegment=\" + info.getDocStoreSegment());\n          segInfoStat.docStoreSegment = info.getDocStoreSegment();\n          msg(\"    docStoreIsCompoundFile=\" + info.getDocStoreIsCompoundFile());\n          segInfoStat.docStoreCompoundFile = info.getDocStoreIsCompoundFile();\n        }\n\n        if (info.hasDeletions()) {\n          msg(\"    no deletions\");\n          segInfoStat.hasDeletions = false;\n        }\n        else{\n          msg(\"    has deletions [delGen=\" + info.getDelGen() + \"]\");\n          segInfoStat.hasDeletions = true;\n          segInfoStat.deletionsGen = info.getDelGen();\n        }\n        if (infoStream != null)\n          infoStream.print(\"    test: open reader.........\");\n        reader = new SegmentReader(info, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, IOContext.DEFAULT);\n\n        segInfoStat.openReaderPassed = true;\n\n        final int numDocs = reader.numDocs();\n        toLoseDocCount = numDocs;\n        if (reader.hasDeletions()) {\n          if (reader.numDocs() != info.docCount - info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + (info.docCount - info.getDelCount()) + \" vs reader=\" + reader.numDocs());\n          }\n          if ((info.docCount-reader.numDocs()) > reader.maxDoc()) {\n            throw new RuntimeException(\"too many deleted docs: maxDoc()=\" + reader.maxDoc() + \" vs del count=\" + (info.docCount-reader.numDocs()));\n          }\n          if (info.docCount - numDocs != info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          segInfoStat.numDeleted = info.docCount - numDocs;\n          msg(\"OK [\" + (segInfoStat.numDeleted) + \" deleted docs]\");\n        } else {\n          if (info.getDelCount() != 0) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          msg(\"OK\");\n        }\n        if (reader.maxDoc() != info.docCount)\n          throw new RuntimeException(\"SegmentReader.maxDoc() \" + reader.maxDoc() + \" != SegmentInfos.docCount \" + info.docCount);\n\n        // Test getFieldInfos()\n        if (infoStream != null) {\n          infoStream.print(\"    test: fields..............\");\n        }         \n        FieldInfos fieldInfos = reader.getFieldInfos();\n        msg(\"OK [\" + fieldInfos.size() + \" fields]\");\n        segInfoStat.numFields = fieldInfos.size();\n        \n        // Test Field Norms\n        segInfoStat.fieldNormStatus = testFieldNorms(fieldInfos, reader);\n\n        // Test the Term Index\n        segInfoStat.termIndexStatus = testPostings(reader);\n\n        // Test Stored Fields\n        segInfoStat.storedFieldStatus = testStoredFields(info, reader, nf);\n\n        // Test Term Vectors\n        segInfoStat.termVectorStatus = testTermVectors(info, reader, nf);\n        \n        segInfoStat.docValuesStatus = testDocValues(info, reader);\n\n        // Rethrow the first exception we encountered\n        //  This will cause stats for failed segments to be incremented properly\n        if (segInfoStat.fieldNormStatus.error != null) {\n          throw new RuntimeException(\"Field Norm test failed\");\n        } else if (segInfoStat.termIndexStatus.error != null) {\n          throw new RuntimeException(\"Term Index test failed\");\n        } else if (segInfoStat.storedFieldStatus.error != null) {\n          throw new RuntimeException(\"Stored Field test failed\");\n        } else if (segInfoStat.termVectorStatus.error != null) {\n          throw new RuntimeException(\"Term Vector test failed\");\n        }  else if (segInfoStat.docValuesStatus.error != null) {\n          throw new RuntimeException(\"DocValues test failed\");\n        }\n\n        msg(\"\");\n\n      } catch (Throwable t) {\n        msg(\"FAILED\");\n        String comment;\n        comment = \"fixIndex() would remove reference to this segment\";\n        msg(\"    WARNING: \" + comment + \"; full exception:\");\n        if (infoStream != null)\n          t.printStackTrace(infoStream);\n        msg(\"\");\n        result.totLoseDocCount += toLoseDocCount;\n        result.numBadSegments++;\n        continue;\n      } finally {\n        if (reader != null)\n          reader.close();\n      }\n\n      // Keeper\n      result.newSegments.add((SegmentInfo) info.clone());\n    }\n\n    if (0 == result.numBadSegments) {\n      result.clean = true;\n    } else\n      msg(\"WARNING: \" + result.numBadSegments + \" broken segments (containing \" + result.totLoseDocCount + \" documents) detected\");\n\n    if ( ! (result.validCounter = (result.maxSegmentName < sis.counter))) {\n      result.clean = false;\n      result.newSegments.counter = result.maxSegmentName + 1; \n      msg(\"ERROR: Next segment name counter \" + sis.counter + \" is not greater than max segment name \" + result.maxSegmentName);\n    }\n    \n    if (result.clean) {\n      msg(\"No problems were detected with this index.\\n\");\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /** Returns a {@link Status} instance detailing\n   *  the state of the index.\n   * \n   *  @param onlySegments list of specific segment names to check\n   *\n   *  <p>As this method checks every byte in the specified\n   *  segments, on a large index it can take quite a long\n   *  time to run.\n   *\n   *  <p><b>WARNING</b>: make sure\n   *  you only call this when the index is not opened by any\n   *  writer. */\n  public Status checkIndex(List<String> onlySegments) throws IOException {\n    NumberFormat nf = NumberFormat.getInstance();\n    SegmentInfos sis = new SegmentInfos();\n    Status result = new Status();\n    result.dir = dir;\n    try {\n      sis.read(dir);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read any segments file in directory\");\n      result.missingSegments = true;\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      return result;\n    }\n\n    // find the oldest and newest segment versions\n    String oldest = Integer.toString(Integer.MAX_VALUE), newest = Integer.toString(Integer.MIN_VALUE);\n    String oldSegs = null;\n    boolean foundNonNullVersion = false;\n    Comparator<String> versionComparator = StringHelper.getVersionComparator();\n    for (SegmentInfo si : sis) {\n      String version = si.getVersion();\n      if (version == null) {\n        // pre-3.1 segment\n        oldSegs = \"pre-3.1\";\n      } else {\n        foundNonNullVersion = true;\n        if (versionComparator.compare(version, oldest) < 0) {\n          oldest = version;\n        }\n        if (versionComparator.compare(version, newest) > 0) {\n          newest = version;\n        }\n      }\n    }\n\n    final int numSegments = sis.size();\n    final String segmentsFileName = sis.getCurrentSegmentFileName();\n    // note: we only read the format byte (required preamble) here!\n    IndexInput input = null;\n    try {\n      input = dir.openInput(segmentsFileName, IOContext.DEFAULT);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not open segments file in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.cantOpenSegments = true;\n      return result;\n    }\n    int format = 0;\n    try {\n      format = input.readInt();\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read segment file version in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.missingSegmentVersion = true;\n      return result;\n    } finally {\n      if (input != null)\n        input.close();\n    }\n\n    String sFormat = \"\";\n    boolean skip = false;\n\n    if (format == SegmentInfos.FORMAT_DIAGNOSTICS) {\n      sFormat = \"FORMAT_DIAGNOSTICS [Lucene 2.9]\";\n    } else if (format == SegmentInfos.FORMAT_HAS_VECTORS) {\n      sFormat = \"FORMAT_HAS_VECTORS [Lucene 3.1]\";\n    } else if (format == SegmentInfos.FORMAT_3_1) {\n      sFormat = \"FORMAT_3_1 [Lucene 3.1+]\";\n    } else if (format == SegmentInfos.FORMAT_4_0) {\n      sFormat = \"FORMAT_4_0 [Lucene 4.0]\";\n    } else if (format == SegmentInfos.FORMAT_CURRENT) {\n      throw new RuntimeException(\"BUG: You should update this tool!\");\n    } else if (format < SegmentInfos.FORMAT_CURRENT) {\n      sFormat = \"int=\" + format + \" [newer version of Lucene than this tool supports]\";\n      skip = true;\n    } else if (format > SegmentInfos.FORMAT_MINIMUM) {\n      sFormat = \"int=\" + format + \" [older version of Lucene than this tool supports]\";\n      skip = true;\n    }\n\n    result.segmentsFileName = segmentsFileName;\n    result.numSegments = numSegments;\n    result.segmentFormat = sFormat;\n    result.userData = sis.getUserData();\n    String userDataString;\n    if (sis.getUserData().size() > 0) {\n      userDataString = \" userData=\" + sis.getUserData();\n    } else {\n      userDataString = \"\";\n    }\n\n    String versionString = null;\n    if (oldSegs != null) {\n      if (foundNonNullVersion) {\n        versionString = \"versions=[\" + oldSegs + \" .. \" + newest + \"]\";\n      } else {\n        versionString = \"version=\" + oldSegs;\n      }\n    } else {\n      versionString = oldest.equals(newest) ? ( \"version=\" + oldest ) : (\"versions=[\" + oldest + \" .. \" + newest + \"]\");\n    }\n\n    msg(\"Segments file=\" + segmentsFileName + \" numSegments=\" + numSegments\n        + \" \" + versionString + \" format=\" + sFormat + userDataString);\n\n    if (onlySegments != null) {\n      result.partial = true;\n      if (infoStream != null)\n        infoStream.print(\"\\nChecking only these segments:\");\n      for (String s : onlySegments) {\n        if (infoStream != null)\n          infoStream.print(\" \" + s);\n      }\n      result.segmentsChecked.addAll(onlySegments);\n      msg(\":\");\n    }\n\n    if (skip) {\n      msg(\"\\nERROR: this index appears to be created by a newer version of Lucene than this tool was compiled on; please re-compile this tool on the matching version of Lucene; exiting\");\n      result.toolOutOfDate = true;\n      return result;\n    }\n\n\n    result.newSegments = (SegmentInfos) sis.clone();\n    result.newSegments.clear();\n    result.maxSegmentName = -1;\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = sis.info(i);\n      int segmentName = Integer.parseInt(info.name.substring(1), Character.MAX_RADIX);\n      if (segmentName > result.maxSegmentName) {\n        result.maxSegmentName = segmentName;\n      }\n      if (onlySegments != null && !onlySegments.contains(info.name))\n        continue;\n      Status.SegmentInfoStatus segInfoStat = new Status.SegmentInfoStatus();\n      result.segmentInfos.add(segInfoStat);\n      msg(\"  \" + (1+i) + \" of \" + numSegments + \": name=\" + info.name + \" docCount=\" + info.docCount);\n      segInfoStat.name = info.name;\n      segInfoStat.docCount = info.docCount;\n\n      int toLoseDocCount = info.docCount;\n\n      SegmentReader reader = null;\n\n      try {\n        final Codec codec = info.getCodec();\n        msg(\"    codec=\" + codec);\n        segInfoStat.codec = codec;\n        msg(\"    compound=\" + info.getUseCompoundFile());\n        segInfoStat.compound = info.getUseCompoundFile();\n        msg(\"    hasProx=\" + info.getHasProx());\n        segInfoStat.hasProx = info.getHasProx();\n        msg(\"    numFiles=\" + info.files().size());\n        segInfoStat.numFiles = info.files().size();\n        segInfoStat.sizeMB = info.sizeInBytes()/(1024.*1024.);\n        msg(\"    size (MB)=\" + nf.format(segInfoStat.sizeMB));\n        Map<String,String> diagnostics = info.getDiagnostics();\n        segInfoStat.diagnostics = diagnostics;\n        if (diagnostics.size() > 0) {\n          msg(\"    diagnostics = \" + diagnostics);\n        }\n\n        final int docStoreOffset = info.getDocStoreOffset();\n        if (docStoreOffset != -1) {\n          msg(\"    docStoreOffset=\" + docStoreOffset);\n          segInfoStat.docStoreOffset = docStoreOffset;\n          msg(\"    docStoreSegment=\" + info.getDocStoreSegment());\n          segInfoStat.docStoreSegment = info.getDocStoreSegment();\n          msg(\"    docStoreIsCompoundFile=\" + info.getDocStoreIsCompoundFile());\n          segInfoStat.docStoreCompoundFile = info.getDocStoreIsCompoundFile();\n        }\n\n        final String delFileName = info.getDelFileName();\n        if (delFileName == null){\n          msg(\"    no deletions\");\n          segInfoStat.hasDeletions = false;\n        }\n        else{\n          msg(\"    has deletions [delFileName=\" + delFileName + \"]\");\n          segInfoStat.hasDeletions = true;\n          segInfoStat.deletionsFileName = delFileName;\n        }\n        if (infoStream != null)\n          infoStream.print(\"    test: open reader.........\");\n        reader = new SegmentReader(info, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, IOContext.DEFAULT);\n\n        segInfoStat.openReaderPassed = true;\n\n        final int numDocs = reader.numDocs();\n        toLoseDocCount = numDocs;\n        if (reader.hasDeletions()) {\n          if (reader.numDocs() != info.docCount - info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + (info.docCount - info.getDelCount()) + \" vs reader=\" + reader.numDocs());\n          }\n          if ((info.docCount-reader.numDocs()) > reader.maxDoc()) {\n            throw new RuntimeException(\"too many deleted docs: maxDoc()=\" + reader.maxDoc() + \" vs del count=\" + (info.docCount-reader.numDocs()));\n          }\n          if (info.docCount - numDocs != info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          segInfoStat.numDeleted = info.docCount - numDocs;\n          msg(\"OK [\" + (segInfoStat.numDeleted) + \" deleted docs]\");\n        } else {\n          if (info.getDelCount() != 0) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          msg(\"OK\");\n        }\n        if (reader.maxDoc() != info.docCount)\n          throw new RuntimeException(\"SegmentReader.maxDoc() \" + reader.maxDoc() + \" != SegmentInfos.docCount \" + info.docCount);\n\n        // Test getFieldInfos()\n        if (infoStream != null) {\n          infoStream.print(\"    test: fields..............\");\n        }         \n        FieldInfos fieldInfos = reader.getFieldInfos();\n        msg(\"OK [\" + fieldInfos.size() + \" fields]\");\n        segInfoStat.numFields = fieldInfos.size();\n        \n        // Test Field Norms\n        segInfoStat.fieldNormStatus = testFieldNorms(fieldInfos, reader);\n\n        // Test the Term Index\n        segInfoStat.termIndexStatus = testPostings(reader);\n\n        // Test Stored Fields\n        segInfoStat.storedFieldStatus = testStoredFields(info, reader, nf);\n\n        // Test Term Vectors\n        segInfoStat.termVectorStatus = testTermVectors(info, reader, nf);\n        \n        segInfoStat.docValuesStatus = testDocValues(info, reader);\n\n        // Rethrow the first exception we encountered\n        //  This will cause stats for failed segments to be incremented properly\n        if (segInfoStat.fieldNormStatus.error != null) {\n          throw new RuntimeException(\"Field Norm test failed\");\n        } else if (segInfoStat.termIndexStatus.error != null) {\n          throw new RuntimeException(\"Term Index test failed\");\n        } else if (segInfoStat.storedFieldStatus.error != null) {\n          throw new RuntimeException(\"Stored Field test failed\");\n        } else if (segInfoStat.termVectorStatus.error != null) {\n          throw new RuntimeException(\"Term Vector test failed\");\n        }  else if (segInfoStat.docValuesStatus.error != null) {\n          throw new RuntimeException(\"DocValues test failed\");\n        }\n\n        msg(\"\");\n\n      } catch (Throwable t) {\n        msg(\"FAILED\");\n        String comment;\n        comment = \"fixIndex() would remove reference to this segment\";\n        msg(\"    WARNING: \" + comment + \"; full exception:\");\n        if (infoStream != null)\n          t.printStackTrace(infoStream);\n        msg(\"\");\n        result.totLoseDocCount += toLoseDocCount;\n        result.numBadSegments++;\n        continue;\n      } finally {\n        if (reader != null)\n          reader.close();\n      }\n\n      // Keeper\n      result.newSegments.add((SegmentInfo) info.clone());\n    }\n\n    if (0 == result.numBadSegments) {\n      result.clean = true;\n    } else\n      msg(\"WARNING: \" + result.numBadSegments + \" broken segments (containing \" + result.totLoseDocCount + \" documents) detected\");\n\n    if ( ! (result.validCounter = (result.maxSegmentName < sis.counter))) {\n      result.clean = false;\n      result.newSegments.counter = result.maxSegmentName + 1; \n      msg(\"ERROR: Next segment name counter \" + sis.counter + \" is not greater than max segment name \" + result.maxSegmentName);\n    }\n    \n    if (result.clean) {\n      msg(\"No problems were detected with this index.\\n\");\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/CheckIndex#checkIndex(List[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CheckIndex#checkIndex(List[String]).mjava","sourceNew":"  /** Returns a {@link Status} instance detailing\n   *  the state of the index.\n   * \n   *  @param onlySegments list of specific segment names to check\n   *\n   *  <p>As this method checks every byte in the specified\n   *  segments, on a large index it can take quite a long\n   *  time to run.\n   *\n   *  <p><b>WARNING</b>: make sure\n   *  you only call this when the index is not opened by any\n   *  writer. */\n  public Status checkIndex(List<String> onlySegments) throws IOException {\n    NumberFormat nf = NumberFormat.getInstance();\n    SegmentInfos sis = new SegmentInfos();\n    Status result = new Status();\n    result.dir = dir;\n    try {\n      sis.read(dir);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read any segments file in directory\");\n      result.missingSegments = true;\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      return result;\n    }\n\n    // find the oldest and newest segment versions\n    String oldest = Integer.toString(Integer.MAX_VALUE), newest = Integer.toString(Integer.MIN_VALUE);\n    String oldSegs = null;\n    boolean foundNonNullVersion = false;\n    Comparator<String> versionComparator = StringHelper.getVersionComparator();\n    for (SegmentInfo si : sis) {\n      String version = si.getVersion();\n      if (version == null) {\n        // pre-3.1 segment\n        oldSegs = \"pre-3.1\";\n      } else {\n        foundNonNullVersion = true;\n        if (versionComparator.compare(version, oldest) < 0) {\n          oldest = version;\n        }\n        if (versionComparator.compare(version, newest) > 0) {\n          newest = version;\n        }\n      }\n    }\n\n    final int numSegments = sis.size();\n    final String segmentsFileName = sis.getCurrentSegmentFileName();\n    // note: we only read the format byte (required preamble) here!\n    IndexInput input = null;\n    try {\n      input = dir.openInput(segmentsFileName, IOContext.DEFAULT);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not open segments file in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.cantOpenSegments = true;\n      return result;\n    }\n    int format = 0;\n    try {\n      format = input.readInt();\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read segment file version in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.missingSegmentVersion = true;\n      return result;\n    } finally {\n      if (input != null)\n        input.close();\n    }\n\n    String sFormat = \"\";\n    boolean skip = false;\n\n    if (format == SegmentInfos.FORMAT_DIAGNOSTICS) {\n      sFormat = \"FORMAT_DIAGNOSTICS [Lucene 2.9]\";\n    } else if (format == SegmentInfos.FORMAT_HAS_VECTORS) {\n      sFormat = \"FORMAT_HAS_VECTORS [Lucene 3.1]\";\n    } else if (format == SegmentInfos.FORMAT_3_1) {\n      sFormat = \"FORMAT_3_1 [Lucene 3.1+]\";\n    } else if (format == SegmentInfos.FORMAT_4_0) {\n      sFormat = \"FORMAT_4_0 [Lucene 4.0]\";\n    } else if (format == SegmentInfos.FORMAT_CURRENT) {\n      throw new RuntimeException(\"BUG: You should update this tool!\");\n    } else if (format < SegmentInfos.FORMAT_CURRENT) {\n      sFormat = \"int=\" + format + \" [newer version of Lucene than this tool supports]\";\n      skip = true;\n    } else if (format > SegmentInfos.FORMAT_MINIMUM) {\n      sFormat = \"int=\" + format + \" [older version of Lucene than this tool supports]\";\n      skip = true;\n    }\n\n    result.segmentsFileName = segmentsFileName;\n    result.numSegments = numSegments;\n    result.segmentFormat = sFormat;\n    result.userData = sis.getUserData();\n    String userDataString;\n    if (sis.getUserData().size() > 0) {\n      userDataString = \" userData=\" + sis.getUserData();\n    } else {\n      userDataString = \"\";\n    }\n\n    String versionString = null;\n    if (oldSegs != null) {\n      if (foundNonNullVersion) {\n        versionString = \"versions=[\" + oldSegs + \" .. \" + newest + \"]\";\n      } else {\n        versionString = \"version=\" + oldSegs;\n      }\n    } else {\n      versionString = oldest.equals(newest) ? ( \"version=\" + oldest ) : (\"versions=[\" + oldest + \" .. \" + newest + \"]\");\n    }\n\n    msg(\"Segments file=\" + segmentsFileName + \" numSegments=\" + numSegments\n        + \" \" + versionString + \" format=\" + sFormat + userDataString);\n\n    if (onlySegments != null) {\n      result.partial = true;\n      if (infoStream != null)\n        infoStream.print(\"\\nChecking only these segments:\");\n      for (String s : onlySegments) {\n        if (infoStream != null)\n          infoStream.print(\" \" + s);\n      }\n      result.segmentsChecked.addAll(onlySegments);\n      msg(\":\");\n    }\n\n    if (skip) {\n      msg(\"\\nERROR: this index appears to be created by a newer version of Lucene than this tool was compiled on; please re-compile this tool on the matching version of Lucene; exiting\");\n      result.toolOutOfDate = true;\n      return result;\n    }\n\n\n    result.newSegments = (SegmentInfos) sis.clone();\n    result.newSegments.clear();\n    result.maxSegmentName = -1;\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = sis.info(i);\n      int segmentName = Integer.parseInt(info.name.substring(1), Character.MAX_RADIX);\n      if (segmentName > result.maxSegmentName) {\n        result.maxSegmentName = segmentName;\n      }\n      if (onlySegments != null && !onlySegments.contains(info.name))\n        continue;\n      Status.SegmentInfoStatus segInfoStat = new Status.SegmentInfoStatus();\n      result.segmentInfos.add(segInfoStat);\n      msg(\"  \" + (1+i) + \" of \" + numSegments + \": name=\" + info.name + \" docCount=\" + info.docCount);\n      segInfoStat.name = info.name;\n      segInfoStat.docCount = info.docCount;\n\n      int toLoseDocCount = info.docCount;\n\n      SegmentReader reader = null;\n\n      try {\n        final Codec codec = info.getCodec();\n        msg(\"    codec=\" + codec);\n        segInfoStat.codec = codec;\n        msg(\"    compound=\" + info.getUseCompoundFile());\n        segInfoStat.compound = info.getUseCompoundFile();\n        msg(\"    hasProx=\" + info.getHasProx());\n        segInfoStat.hasProx = info.getHasProx();\n        msg(\"    numFiles=\" + info.files().size());\n        segInfoStat.numFiles = info.files().size();\n        segInfoStat.sizeMB = info.sizeInBytes()/(1024.*1024.);\n        msg(\"    size (MB)=\" + nf.format(segInfoStat.sizeMB));\n        Map<String,String> diagnostics = info.getDiagnostics();\n        segInfoStat.diagnostics = diagnostics;\n        if (diagnostics.size() > 0) {\n          msg(\"    diagnostics = \" + diagnostics);\n        }\n\n        final int docStoreOffset = info.getDocStoreOffset();\n        if (docStoreOffset != -1) {\n          msg(\"    docStoreOffset=\" + docStoreOffset);\n          segInfoStat.docStoreOffset = docStoreOffset;\n          msg(\"    docStoreSegment=\" + info.getDocStoreSegment());\n          segInfoStat.docStoreSegment = info.getDocStoreSegment();\n          msg(\"    docStoreIsCompoundFile=\" + info.getDocStoreIsCompoundFile());\n          segInfoStat.docStoreCompoundFile = info.getDocStoreIsCompoundFile();\n        }\n\n        if (info.hasDeletions()) {\n          msg(\"    no deletions\");\n          segInfoStat.hasDeletions = false;\n        }\n        else{\n          msg(\"    has deletions [delGen=\" + info.getDelGen() + \"]\");\n          segInfoStat.hasDeletions = true;\n          segInfoStat.deletionsGen = info.getDelGen();\n        }\n        if (infoStream != null)\n          infoStream.print(\"    test: open reader.........\");\n        reader = new SegmentReader(info, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, IOContext.DEFAULT);\n\n        segInfoStat.openReaderPassed = true;\n\n        final int numDocs = reader.numDocs();\n        toLoseDocCount = numDocs;\n        if (reader.hasDeletions()) {\n          if (reader.numDocs() != info.docCount - info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + (info.docCount - info.getDelCount()) + \" vs reader=\" + reader.numDocs());\n          }\n          if ((info.docCount-reader.numDocs()) > reader.maxDoc()) {\n            throw new RuntimeException(\"too many deleted docs: maxDoc()=\" + reader.maxDoc() + \" vs del count=\" + (info.docCount-reader.numDocs()));\n          }\n          if (info.docCount - numDocs != info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          segInfoStat.numDeleted = info.docCount - numDocs;\n          msg(\"OK [\" + (segInfoStat.numDeleted) + \" deleted docs]\");\n        } else {\n          if (info.getDelCount() != 0) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          msg(\"OK\");\n        }\n        if (reader.maxDoc() != info.docCount)\n          throw new RuntimeException(\"SegmentReader.maxDoc() \" + reader.maxDoc() + \" != SegmentInfos.docCount \" + info.docCount);\n\n        // Test getFieldInfos()\n        if (infoStream != null) {\n          infoStream.print(\"    test: fields..............\");\n        }         \n        FieldInfos fieldInfos = reader.getFieldInfos();\n        msg(\"OK [\" + fieldInfos.size() + \" fields]\");\n        segInfoStat.numFields = fieldInfos.size();\n        \n        // Test Field Norms\n        segInfoStat.fieldNormStatus = testFieldNorms(fieldInfos, reader);\n\n        // Test the Term Index\n        segInfoStat.termIndexStatus = testPostings(reader);\n\n        // Test Stored Fields\n        segInfoStat.storedFieldStatus = testStoredFields(info, reader, nf);\n\n        // Test Term Vectors\n        segInfoStat.termVectorStatus = testTermVectors(info, reader, nf);\n        \n        segInfoStat.docValuesStatus = testDocValues(info, reader);\n\n        // Rethrow the first exception we encountered\n        //  This will cause stats for failed segments to be incremented properly\n        if (segInfoStat.fieldNormStatus.error != null) {\n          throw new RuntimeException(\"Field Norm test failed\");\n        } else if (segInfoStat.termIndexStatus.error != null) {\n          throw new RuntimeException(\"Term Index test failed\");\n        } else if (segInfoStat.storedFieldStatus.error != null) {\n          throw new RuntimeException(\"Stored Field test failed\");\n        } else if (segInfoStat.termVectorStatus.error != null) {\n          throw new RuntimeException(\"Term Vector test failed\");\n        }  else if (segInfoStat.docValuesStatus.error != null) {\n          throw new RuntimeException(\"DocValues test failed\");\n        }\n\n        msg(\"\");\n\n      } catch (Throwable t) {\n        msg(\"FAILED\");\n        String comment;\n        comment = \"fixIndex() would remove reference to this segment\";\n        msg(\"    WARNING: \" + comment + \"; full exception:\");\n        if (infoStream != null)\n          t.printStackTrace(infoStream);\n        msg(\"\");\n        result.totLoseDocCount += toLoseDocCount;\n        result.numBadSegments++;\n        continue;\n      } finally {\n        if (reader != null)\n          reader.close();\n      }\n\n      // Keeper\n      result.newSegments.add((SegmentInfo) info.clone());\n    }\n\n    if (0 == result.numBadSegments) {\n      result.clean = true;\n    } else\n      msg(\"WARNING: \" + result.numBadSegments + \" broken segments (containing \" + result.totLoseDocCount + \" documents) detected\");\n\n    if ( ! (result.validCounter = (result.maxSegmentName < sis.counter))) {\n      result.clean = false;\n      result.newSegments.counter = result.maxSegmentName + 1; \n      msg(\"ERROR: Next segment name counter \" + sis.counter + \" is not greater than max segment name \" + result.maxSegmentName);\n    }\n    \n    if (result.clean) {\n      msg(\"No problems were detected with this index.\\n\");\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /** Returns a {@link Status} instance detailing\n   *  the state of the index.\n   * \n   *  @param onlySegments list of specific segment names to check\n   *\n   *  <p>As this method checks every byte in the specified\n   *  segments, on a large index it can take quite a long\n   *  time to run.\n   *\n   *  <p><b>WARNING</b>: make sure\n   *  you only call this when the index is not opened by any\n   *  writer. */\n  public Status checkIndex(List<String> onlySegments) throws IOException {\n    NumberFormat nf = NumberFormat.getInstance();\n    SegmentInfos sis = new SegmentInfos();\n    Status result = new Status();\n    result.dir = dir;\n    try {\n      sis.read(dir);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read any segments file in directory\");\n      result.missingSegments = true;\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      return result;\n    }\n\n    // find the oldest and newest segment versions\n    String oldest = Integer.toString(Integer.MAX_VALUE), newest = Integer.toString(Integer.MIN_VALUE);\n    String oldSegs = null;\n    boolean foundNonNullVersion = false;\n    Comparator<String> versionComparator = StringHelper.getVersionComparator();\n    for (SegmentInfo si : sis) {\n      String version = si.getVersion();\n      if (version == null) {\n        // pre-3.1 segment\n        oldSegs = \"pre-3.1\";\n      } else {\n        foundNonNullVersion = true;\n        if (versionComparator.compare(version, oldest) < 0) {\n          oldest = version;\n        }\n        if (versionComparator.compare(version, newest) > 0) {\n          newest = version;\n        }\n      }\n    }\n\n    final int numSegments = sis.size();\n    final String segmentsFileName = sis.getCurrentSegmentFileName();\n    // note: we only read the format byte (required preamble) here!\n    IndexInput input = null;\n    try {\n      input = dir.openInput(segmentsFileName, IOContext.DEFAULT);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not open segments file in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.cantOpenSegments = true;\n      return result;\n    }\n    int format = 0;\n    try {\n      format = input.readInt();\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read segment file version in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.missingSegmentVersion = true;\n      return result;\n    } finally {\n      if (input != null)\n        input.close();\n    }\n\n    String sFormat = \"\";\n    boolean skip = false;\n\n    if (format == SegmentInfos.FORMAT_DIAGNOSTICS) {\n      sFormat = \"FORMAT_DIAGNOSTICS [Lucene 2.9]\";\n    } else if (format == SegmentInfos.FORMAT_HAS_VECTORS) {\n      sFormat = \"FORMAT_HAS_VECTORS [Lucene 3.1]\";\n    } else if (format == SegmentInfos.FORMAT_3_1) {\n      sFormat = \"FORMAT_3_1 [Lucene 3.1+]\";\n    } else if (format == SegmentInfos.FORMAT_4_0) {\n      sFormat = \"FORMAT_4_0 [Lucene 4.0]\";\n    } else if (format == SegmentInfos.FORMAT_CURRENT) {\n      throw new RuntimeException(\"BUG: You should update this tool!\");\n    } else if (format < SegmentInfos.FORMAT_CURRENT) {\n      sFormat = \"int=\" + format + \" [newer version of Lucene than this tool supports]\";\n      skip = true;\n    } else if (format > SegmentInfos.FORMAT_MINIMUM) {\n      sFormat = \"int=\" + format + \" [older version of Lucene than this tool supports]\";\n      skip = true;\n    }\n\n    result.segmentsFileName = segmentsFileName;\n    result.numSegments = numSegments;\n    result.segmentFormat = sFormat;\n    result.userData = sis.getUserData();\n    String userDataString;\n    if (sis.getUserData().size() > 0) {\n      userDataString = \" userData=\" + sis.getUserData();\n    } else {\n      userDataString = \"\";\n    }\n\n    String versionString = null;\n    if (oldSegs != null) {\n      if (foundNonNullVersion) {\n        versionString = \"versions=[\" + oldSegs + \" .. \" + newest + \"]\";\n      } else {\n        versionString = \"version=\" + oldSegs;\n      }\n    } else {\n      versionString = oldest.equals(newest) ? ( \"version=\" + oldest ) : (\"versions=[\" + oldest + \" .. \" + newest + \"]\");\n    }\n\n    msg(\"Segments file=\" + segmentsFileName + \" numSegments=\" + numSegments\n        + \" \" + versionString + \" format=\" + sFormat + userDataString);\n\n    if (onlySegments != null) {\n      result.partial = true;\n      if (infoStream != null)\n        infoStream.print(\"\\nChecking only these segments:\");\n      for (String s : onlySegments) {\n        if (infoStream != null)\n          infoStream.print(\" \" + s);\n      }\n      result.segmentsChecked.addAll(onlySegments);\n      msg(\":\");\n    }\n\n    if (skip) {\n      msg(\"\\nERROR: this index appears to be created by a newer version of Lucene than this tool was compiled on; please re-compile this tool on the matching version of Lucene; exiting\");\n      result.toolOutOfDate = true;\n      return result;\n    }\n\n\n    result.newSegments = (SegmentInfos) sis.clone();\n    result.newSegments.clear();\n    result.maxSegmentName = -1;\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = sis.info(i);\n      int segmentName = Integer.parseInt(info.name.substring(1), Character.MAX_RADIX);\n      if (segmentName > result.maxSegmentName) {\n        result.maxSegmentName = segmentName;\n      }\n      if (onlySegments != null && !onlySegments.contains(info.name))\n        continue;\n      Status.SegmentInfoStatus segInfoStat = new Status.SegmentInfoStatus();\n      result.segmentInfos.add(segInfoStat);\n      msg(\"  \" + (1+i) + \" of \" + numSegments + \": name=\" + info.name + \" docCount=\" + info.docCount);\n      segInfoStat.name = info.name;\n      segInfoStat.docCount = info.docCount;\n\n      int toLoseDocCount = info.docCount;\n\n      SegmentReader reader = null;\n\n      try {\n        final Codec codec = info.getCodec();\n        msg(\"    codec=\" + codec);\n        segInfoStat.codec = codec;\n        msg(\"    compound=\" + info.getUseCompoundFile());\n        segInfoStat.compound = info.getUseCompoundFile();\n        msg(\"    hasProx=\" + info.getHasProx());\n        segInfoStat.hasProx = info.getHasProx();\n        msg(\"    numFiles=\" + info.files().size());\n        segInfoStat.numFiles = info.files().size();\n        segInfoStat.sizeMB = info.sizeInBytes()/(1024.*1024.);\n        msg(\"    size (MB)=\" + nf.format(segInfoStat.sizeMB));\n        Map<String,String> diagnostics = info.getDiagnostics();\n        segInfoStat.diagnostics = diagnostics;\n        if (diagnostics.size() > 0) {\n          msg(\"    diagnostics = \" + diagnostics);\n        }\n\n        final int docStoreOffset = info.getDocStoreOffset();\n        if (docStoreOffset != -1) {\n          msg(\"    docStoreOffset=\" + docStoreOffset);\n          segInfoStat.docStoreOffset = docStoreOffset;\n          msg(\"    docStoreSegment=\" + info.getDocStoreSegment());\n          segInfoStat.docStoreSegment = info.getDocStoreSegment();\n          msg(\"    docStoreIsCompoundFile=\" + info.getDocStoreIsCompoundFile());\n          segInfoStat.docStoreCompoundFile = info.getDocStoreIsCompoundFile();\n        }\n\n        if (info.hasDeletions()) {\n          msg(\"    no deletions\");\n          segInfoStat.hasDeletions = false;\n        }\n        else{\n          msg(\"    has deletions [delGen=\" + info.getDelGen() + \"]\");\n          segInfoStat.hasDeletions = true;\n          segInfoStat.deletionsGen = info.getDelGen();\n        }\n        if (infoStream != null)\n          infoStream.print(\"    test: open reader.........\");\n        reader = new SegmentReader(info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, IOContext.DEFAULT);\n\n        segInfoStat.openReaderPassed = true;\n\n        final int numDocs = reader.numDocs();\n        toLoseDocCount = numDocs;\n        if (reader.hasDeletions()) {\n          if (reader.numDocs() != info.docCount - info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + (info.docCount - info.getDelCount()) + \" vs reader=\" + reader.numDocs());\n          }\n          if ((info.docCount-reader.numDocs()) > reader.maxDoc()) {\n            throw new RuntimeException(\"too many deleted docs: maxDoc()=\" + reader.maxDoc() + \" vs del count=\" + (info.docCount-reader.numDocs()));\n          }\n          if (info.docCount - numDocs != info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          segInfoStat.numDeleted = info.docCount - numDocs;\n          msg(\"OK [\" + (segInfoStat.numDeleted) + \" deleted docs]\");\n        } else {\n          if (info.getDelCount() != 0) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          msg(\"OK\");\n        }\n        if (reader.maxDoc() != info.docCount)\n          throw new RuntimeException(\"SegmentReader.maxDoc() \" + reader.maxDoc() + \" != SegmentInfos.docCount \" + info.docCount);\n\n        // Test getFieldInfos()\n        if (infoStream != null) {\n          infoStream.print(\"    test: fields..............\");\n        }         \n        FieldInfos fieldInfos = reader.getFieldInfos();\n        msg(\"OK [\" + fieldInfos.size() + \" fields]\");\n        segInfoStat.numFields = fieldInfos.size();\n        \n        // Test Field Norms\n        segInfoStat.fieldNormStatus = testFieldNorms(fieldInfos, reader);\n\n        // Test the Term Index\n        segInfoStat.termIndexStatus = testPostings(reader);\n\n        // Test Stored Fields\n        segInfoStat.storedFieldStatus = testStoredFields(info, reader, nf);\n\n        // Test Term Vectors\n        segInfoStat.termVectorStatus = testTermVectors(info, reader, nf);\n        \n        segInfoStat.docValuesStatus = testDocValues(info, reader);\n\n        // Rethrow the first exception we encountered\n        //  This will cause stats for failed segments to be incremented properly\n        if (segInfoStat.fieldNormStatus.error != null) {\n          throw new RuntimeException(\"Field Norm test failed\");\n        } else if (segInfoStat.termIndexStatus.error != null) {\n          throw new RuntimeException(\"Term Index test failed\");\n        } else if (segInfoStat.storedFieldStatus.error != null) {\n          throw new RuntimeException(\"Stored Field test failed\");\n        } else if (segInfoStat.termVectorStatus.error != null) {\n          throw new RuntimeException(\"Term Vector test failed\");\n        }  else if (segInfoStat.docValuesStatus.error != null) {\n          throw new RuntimeException(\"DocValues test failed\");\n        }\n\n        msg(\"\");\n\n      } catch (Throwable t) {\n        msg(\"FAILED\");\n        String comment;\n        comment = \"fixIndex() would remove reference to this segment\";\n        msg(\"    WARNING: \" + comment + \"; full exception:\");\n        if (infoStream != null)\n          t.printStackTrace(infoStream);\n        msg(\"\");\n        result.totLoseDocCount += toLoseDocCount;\n        result.numBadSegments++;\n        continue;\n      } finally {\n        if (reader != null)\n          reader.close();\n      }\n\n      // Keeper\n      result.newSegments.add((SegmentInfo) info.clone());\n    }\n\n    if (0 == result.numBadSegments) {\n      result.clean = true;\n    } else\n      msg(\"WARNING: \" + result.numBadSegments + \" broken segments (containing \" + result.totLoseDocCount + \" documents) detected\");\n\n    if ( ! (result.validCounter = (result.maxSegmentName < sis.counter))) {\n      result.clean = false;\n      result.newSegments.counter = result.maxSegmentName + 1; \n      msg(\"ERROR: Next segment name counter \" + sis.counter + \" is not greater than max segment name \" + result.maxSegmentName);\n    }\n    \n    if (result.clean) {\n      msg(\"No problems were detected with this index.\\n\");\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkIndex(List[String]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CheckIndex#checkIndex(List[String]).mjava","sourceNew":"  /** Returns a {@link Status} instance detailing\n   *  the state of the index.\n   * \n   *  @param onlySegments list of specific segment names to check\n   *\n   *  <p>As this method checks every byte in the specified\n   *  segments, on a large index it can take quite a long\n   *  time to run.\n   *\n   *  <p><b>WARNING</b>: make sure\n   *  you only call this when the index is not opened by any\n   *  writer. */\n  public Status checkIndex(List<String> onlySegments) throws IOException {\n    NumberFormat nf = NumberFormat.getInstance();\n    SegmentInfos sis = new SegmentInfos();\n    Status result = new Status();\n    result.dir = dir;\n    try {\n      sis.read(dir);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read any segments file in directory\");\n      result.missingSegments = true;\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      return result;\n    }\n\n    // find the oldest and newest segment versions\n    String oldest = Integer.toString(Integer.MAX_VALUE), newest = Integer.toString(Integer.MIN_VALUE);\n    String oldSegs = null;\n    boolean foundNonNullVersion = false;\n    Comparator<String> versionComparator = StringHelper.getVersionComparator();\n    for (SegmentInfo si : sis) {\n      String version = si.getVersion();\n      if (version == null) {\n        // pre-3.1 segment\n        oldSegs = \"pre-3.1\";\n      } else {\n        foundNonNullVersion = true;\n        if (versionComparator.compare(version, oldest) < 0) {\n          oldest = version;\n        }\n        if (versionComparator.compare(version, newest) > 0) {\n          newest = version;\n        }\n      }\n    }\n\n    final int numSegments = sis.size();\n    final String segmentsFileName = sis.getCurrentSegmentFileName();\n    // note: we only read the format byte (required preamble) here!\n    IndexInput input = null;\n    try {\n      input = dir.openInput(segmentsFileName, IOContext.DEFAULT);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not open segments file in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.cantOpenSegments = true;\n      return result;\n    }\n    int format = 0;\n    try {\n      format = input.readInt();\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read segment file version in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.missingSegmentVersion = true;\n      return result;\n    } finally {\n      if (input != null)\n        input.close();\n    }\n\n    String sFormat = \"\";\n    boolean skip = false;\n\n    if (format == SegmentInfos.FORMAT_DIAGNOSTICS) {\n      sFormat = \"FORMAT_DIAGNOSTICS [Lucene 2.9]\";\n    } else if (format == SegmentInfos.FORMAT_HAS_VECTORS) {\n      sFormat = \"FORMAT_HAS_VECTORS [Lucene 3.1]\";\n    } else if (format == SegmentInfos.FORMAT_3_1) {\n      sFormat = \"FORMAT_3_1 [Lucene 3.1+]\";\n    } else if (format == SegmentInfos.FORMAT_4_0) {\n      sFormat = \"FORMAT_4_0 [Lucene 4.0]\";\n    } else if (format == SegmentInfos.FORMAT_CURRENT) {\n      throw new RuntimeException(\"BUG: You should update this tool!\");\n    } else if (format < SegmentInfos.FORMAT_CURRENT) {\n      sFormat = \"int=\" + format + \" [newer version of Lucene than this tool supports]\";\n      skip = true;\n    } else if (format > SegmentInfos.FORMAT_MINIMUM) {\n      sFormat = \"int=\" + format + \" [older version of Lucene than this tool supports]\";\n      skip = true;\n    }\n\n    result.segmentsFileName = segmentsFileName;\n    result.numSegments = numSegments;\n    result.segmentFormat = sFormat;\n    result.userData = sis.getUserData();\n    String userDataString;\n    if (sis.getUserData().size() > 0) {\n      userDataString = \" userData=\" + sis.getUserData();\n    } else {\n      userDataString = \"\";\n    }\n\n    String versionString = null;\n    if (oldSegs != null) {\n      if (foundNonNullVersion) {\n        versionString = \"versions=[\" + oldSegs + \" .. \" + newest + \"]\";\n      } else {\n        versionString = \"version=\" + oldSegs;\n      }\n    } else {\n      versionString = oldest.equals(newest) ? ( \"version=\" + oldest ) : (\"versions=[\" + oldest + \" .. \" + newest + \"]\");\n    }\n\n    msg(\"Segments file=\" + segmentsFileName + \" numSegments=\" + numSegments\n        + \" \" + versionString + \" format=\" + sFormat + userDataString);\n\n    if (onlySegments != null) {\n      result.partial = true;\n      if (infoStream != null)\n        infoStream.print(\"\\nChecking only these segments:\");\n      for (String s : onlySegments) {\n        if (infoStream != null)\n          infoStream.print(\" \" + s);\n      }\n      result.segmentsChecked.addAll(onlySegments);\n      msg(\":\");\n    }\n\n    if (skip) {\n      msg(\"\\nERROR: this index appears to be created by a newer version of Lucene than this tool was compiled on; please re-compile this tool on the matching version of Lucene; exiting\");\n      result.toolOutOfDate = true;\n      return result;\n    }\n\n\n    result.newSegments = (SegmentInfos) sis.clone();\n    result.newSegments.clear();\n    result.maxSegmentName = -1;\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = sis.info(i);\n      int segmentName = Integer.parseInt(info.name.substring(1), Character.MAX_RADIX);\n      if (segmentName > result.maxSegmentName) {\n        result.maxSegmentName = segmentName;\n      }\n      if (onlySegments != null && !onlySegments.contains(info.name))\n        continue;\n      Status.SegmentInfoStatus segInfoStat = new Status.SegmentInfoStatus();\n      result.segmentInfos.add(segInfoStat);\n      msg(\"  \" + (1+i) + \" of \" + numSegments + \": name=\" + info.name + \" docCount=\" + info.docCount);\n      segInfoStat.name = info.name;\n      segInfoStat.docCount = info.docCount;\n\n      int toLoseDocCount = info.docCount;\n\n      SegmentReader reader = null;\n\n      try {\n        final Codec codec = info.getCodec();\n        msg(\"    codec=\" + codec);\n        segInfoStat.codec = codec;\n        msg(\"    compound=\" + info.getUseCompoundFile());\n        segInfoStat.compound = info.getUseCompoundFile();\n        msg(\"    hasProx=\" + info.getHasProx());\n        segInfoStat.hasProx = info.getHasProx();\n        msg(\"    numFiles=\" + info.files().size());\n        segInfoStat.numFiles = info.files().size();\n        segInfoStat.sizeMB = info.sizeInBytes()/(1024.*1024.);\n        msg(\"    size (MB)=\" + nf.format(segInfoStat.sizeMB));\n        Map<String,String> diagnostics = info.getDiagnostics();\n        segInfoStat.diagnostics = diagnostics;\n        if (diagnostics.size() > 0) {\n          msg(\"    diagnostics = \" + diagnostics);\n        }\n\n        final int docStoreOffset = info.getDocStoreOffset();\n        if (docStoreOffset != -1) {\n          msg(\"    docStoreOffset=\" + docStoreOffset);\n          segInfoStat.docStoreOffset = docStoreOffset;\n          msg(\"    docStoreSegment=\" + info.getDocStoreSegment());\n          segInfoStat.docStoreSegment = info.getDocStoreSegment();\n          msg(\"    docStoreIsCompoundFile=\" + info.getDocStoreIsCompoundFile());\n          segInfoStat.docStoreCompoundFile = info.getDocStoreIsCompoundFile();\n        }\n\n        if (info.hasDeletions()) {\n          msg(\"    no deletions\");\n          segInfoStat.hasDeletions = false;\n        }\n        else{\n          msg(\"    has deletions [delGen=\" + info.getDelGen() + \"]\");\n          segInfoStat.hasDeletions = true;\n          segInfoStat.deletionsGen = info.getDelGen();\n        }\n        if (infoStream != null)\n          infoStream.print(\"    test: open reader.........\");\n        reader = new SegmentReader(info, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, IOContext.DEFAULT);\n\n        segInfoStat.openReaderPassed = true;\n\n        final int numDocs = reader.numDocs();\n        toLoseDocCount = numDocs;\n        if (reader.hasDeletions()) {\n          if (reader.numDocs() != info.docCount - info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + (info.docCount - info.getDelCount()) + \" vs reader=\" + reader.numDocs());\n          }\n          if ((info.docCount-reader.numDocs()) > reader.maxDoc()) {\n            throw new RuntimeException(\"too many deleted docs: maxDoc()=\" + reader.maxDoc() + \" vs del count=\" + (info.docCount-reader.numDocs()));\n          }\n          if (info.docCount - numDocs != info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          segInfoStat.numDeleted = info.docCount - numDocs;\n          msg(\"OK [\" + (segInfoStat.numDeleted) + \" deleted docs]\");\n        } else {\n          if (info.getDelCount() != 0) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          msg(\"OK\");\n        }\n        if (reader.maxDoc() != info.docCount)\n          throw new RuntimeException(\"SegmentReader.maxDoc() \" + reader.maxDoc() + \" != SegmentInfos.docCount \" + info.docCount);\n\n        // Test getFieldInfos()\n        if (infoStream != null) {\n          infoStream.print(\"    test: fields..............\");\n        }         \n        FieldInfos fieldInfos = reader.getFieldInfos();\n        msg(\"OK [\" + fieldInfos.size() + \" fields]\");\n        segInfoStat.numFields = fieldInfos.size();\n        \n        // Test Field Norms\n        segInfoStat.fieldNormStatus = testFieldNorms(fieldInfos, reader);\n\n        // Test the Term Index\n        segInfoStat.termIndexStatus = testPostings(reader);\n\n        // Test Stored Fields\n        segInfoStat.storedFieldStatus = testStoredFields(info, reader, nf);\n\n        // Test Term Vectors\n        segInfoStat.termVectorStatus = testTermVectors(info, reader, nf);\n        \n        segInfoStat.docValuesStatus = testDocValues(info, reader);\n\n        // Rethrow the first exception we encountered\n        //  This will cause stats for failed segments to be incremented properly\n        if (segInfoStat.fieldNormStatus.error != null) {\n          throw new RuntimeException(\"Field Norm test failed\");\n        } else if (segInfoStat.termIndexStatus.error != null) {\n          throw new RuntimeException(\"Term Index test failed\");\n        } else if (segInfoStat.storedFieldStatus.error != null) {\n          throw new RuntimeException(\"Stored Field test failed\");\n        } else if (segInfoStat.termVectorStatus.error != null) {\n          throw new RuntimeException(\"Term Vector test failed\");\n        }  else if (segInfoStat.docValuesStatus.error != null) {\n          throw new RuntimeException(\"DocValues test failed\");\n        }\n\n        msg(\"\");\n\n      } catch (Throwable t) {\n        msg(\"FAILED\");\n        String comment;\n        comment = \"fixIndex() would remove reference to this segment\";\n        msg(\"    WARNING: \" + comment + \"; full exception:\");\n        if (infoStream != null)\n          t.printStackTrace(infoStream);\n        msg(\"\");\n        result.totLoseDocCount += toLoseDocCount;\n        result.numBadSegments++;\n        continue;\n      } finally {\n        if (reader != null)\n          reader.close();\n      }\n\n      // Keeper\n      result.newSegments.add((SegmentInfo) info.clone());\n    }\n\n    if (0 == result.numBadSegments) {\n      result.clean = true;\n    } else\n      msg(\"WARNING: \" + result.numBadSegments + \" broken segments (containing \" + result.totLoseDocCount + \" documents) detected\");\n\n    if ( ! (result.validCounter = (result.maxSegmentName < sis.counter))) {\n      result.clean = false;\n      result.newSegments.counter = result.maxSegmentName + 1; \n      msg(\"ERROR: Next segment name counter \" + sis.counter + \" is not greater than max segment name \" + result.maxSegmentName);\n    }\n    \n    if (result.clean) {\n      msg(\"No problems were detected with this index.\\n\");\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /** Returns a {@link Status} instance detailing\n   *  the state of the index.\n   * \n   *  @param onlySegments list of specific segment names to check\n   *\n   *  <p>As this method checks every byte in the specified\n   *  segments, on a large index it can take quite a long\n   *  time to run.\n   *\n   *  <p><b>WARNING</b>: make sure\n   *  you only call this when the index is not opened by any\n   *  writer. */\n  public Status checkIndex(List<String> onlySegments) throws IOException {\n    NumberFormat nf = NumberFormat.getInstance();\n    SegmentInfos sis = new SegmentInfos();\n    Status result = new Status();\n    result.dir = dir;\n    try {\n      sis.read(dir);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read any segments file in directory\");\n      result.missingSegments = true;\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      return result;\n    }\n\n    // find the oldest and newest segment versions\n    String oldest = Integer.toString(Integer.MAX_VALUE), newest = Integer.toString(Integer.MIN_VALUE);\n    String oldSegs = null;\n    boolean foundNonNullVersion = false;\n    Comparator<String> versionComparator = StringHelper.getVersionComparator();\n    for (SegmentInfo si : sis) {\n      String version = si.getVersion();\n      if (version == null) {\n        // pre-3.1 segment\n        oldSegs = \"pre-3.1\";\n      } else {\n        foundNonNullVersion = true;\n        if (versionComparator.compare(version, oldest) < 0) {\n          oldest = version;\n        }\n        if (versionComparator.compare(version, newest) > 0) {\n          newest = version;\n        }\n      }\n    }\n\n    final int numSegments = sis.size();\n    final String segmentsFileName = sis.getCurrentSegmentFileName();\n    // note: we only read the format byte (required preamble) here!\n    IndexInput input = null;\n    try {\n      input = dir.openInput(segmentsFileName, IOContext.DEFAULT);\n    } catch (Throwable t) {\n      msg(\"ERROR: could not open segments file in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.cantOpenSegments = true;\n      return result;\n    }\n    int format = 0;\n    try {\n      format = input.readInt();\n    } catch (Throwable t) {\n      msg(\"ERROR: could not read segment file version in directory\");\n      if (infoStream != null)\n        t.printStackTrace(infoStream);\n      result.missingSegmentVersion = true;\n      return result;\n    } finally {\n      if (input != null)\n        input.close();\n    }\n\n    String sFormat = \"\";\n    boolean skip = false;\n\n    if (format == SegmentInfos.FORMAT_DIAGNOSTICS) {\n      sFormat = \"FORMAT_DIAGNOSTICS [Lucene 2.9]\";\n    } else if (format == SegmentInfos.FORMAT_HAS_VECTORS) {\n      sFormat = \"FORMAT_HAS_VECTORS [Lucene 3.1]\";\n    } else if (format == SegmentInfos.FORMAT_3_1) {\n      sFormat = \"FORMAT_3_1 [Lucene 3.1+]\";\n    } else if (format == SegmentInfos.FORMAT_4_0) {\n      sFormat = \"FORMAT_4_0 [Lucene 4.0]\";\n    } else if (format == SegmentInfos.FORMAT_CURRENT) {\n      throw new RuntimeException(\"BUG: You should update this tool!\");\n    } else if (format < SegmentInfos.FORMAT_CURRENT) {\n      sFormat = \"int=\" + format + \" [newer version of Lucene than this tool supports]\";\n      skip = true;\n    } else if (format > SegmentInfos.FORMAT_MINIMUM) {\n      sFormat = \"int=\" + format + \" [older version of Lucene than this tool supports]\";\n      skip = true;\n    }\n\n    result.segmentsFileName = segmentsFileName;\n    result.numSegments = numSegments;\n    result.segmentFormat = sFormat;\n    result.userData = sis.getUserData();\n    String userDataString;\n    if (sis.getUserData().size() > 0) {\n      userDataString = \" userData=\" + sis.getUserData();\n    } else {\n      userDataString = \"\";\n    }\n\n    String versionString = null;\n    if (oldSegs != null) {\n      if (foundNonNullVersion) {\n        versionString = \"versions=[\" + oldSegs + \" .. \" + newest + \"]\";\n      } else {\n        versionString = \"version=\" + oldSegs;\n      }\n    } else {\n      versionString = oldest.equals(newest) ? ( \"version=\" + oldest ) : (\"versions=[\" + oldest + \" .. \" + newest + \"]\");\n    }\n\n    msg(\"Segments file=\" + segmentsFileName + \" numSegments=\" + numSegments\n        + \" \" + versionString + \" format=\" + sFormat + userDataString);\n\n    if (onlySegments != null) {\n      result.partial = true;\n      if (infoStream != null)\n        infoStream.print(\"\\nChecking only these segments:\");\n      for (String s : onlySegments) {\n        if (infoStream != null)\n          infoStream.print(\" \" + s);\n      }\n      result.segmentsChecked.addAll(onlySegments);\n      msg(\":\");\n    }\n\n    if (skip) {\n      msg(\"\\nERROR: this index appears to be created by a newer version of Lucene than this tool was compiled on; please re-compile this tool on the matching version of Lucene; exiting\");\n      result.toolOutOfDate = true;\n      return result;\n    }\n\n\n    result.newSegments = (SegmentInfos) sis.clone();\n    result.newSegments.clear();\n    result.maxSegmentName = -1;\n\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = sis.info(i);\n      int segmentName = Integer.parseInt(info.name.substring(1), Character.MAX_RADIX);\n      if (segmentName > result.maxSegmentName) {\n        result.maxSegmentName = segmentName;\n      }\n      if (onlySegments != null && !onlySegments.contains(info.name))\n        continue;\n      Status.SegmentInfoStatus segInfoStat = new Status.SegmentInfoStatus();\n      result.segmentInfos.add(segInfoStat);\n      msg(\"  \" + (1+i) + \" of \" + numSegments + \": name=\" + info.name + \" docCount=\" + info.docCount);\n      segInfoStat.name = info.name;\n      segInfoStat.docCount = info.docCount;\n\n      int toLoseDocCount = info.docCount;\n\n      SegmentReader reader = null;\n\n      try {\n        final Codec codec = info.getCodec();\n        msg(\"    codec=\" + codec);\n        segInfoStat.codec = codec;\n        msg(\"    compound=\" + info.getUseCompoundFile());\n        segInfoStat.compound = info.getUseCompoundFile();\n        msg(\"    hasProx=\" + info.getHasProx());\n        segInfoStat.hasProx = info.getHasProx();\n        msg(\"    numFiles=\" + info.files().size());\n        segInfoStat.numFiles = info.files().size();\n        segInfoStat.sizeMB = info.sizeInBytes()/(1024.*1024.);\n        msg(\"    size (MB)=\" + nf.format(segInfoStat.sizeMB));\n        Map<String,String> diagnostics = info.getDiagnostics();\n        segInfoStat.diagnostics = diagnostics;\n        if (diagnostics.size() > 0) {\n          msg(\"    diagnostics = \" + diagnostics);\n        }\n\n        final int docStoreOffset = info.getDocStoreOffset();\n        if (docStoreOffset != -1) {\n          msg(\"    docStoreOffset=\" + docStoreOffset);\n          segInfoStat.docStoreOffset = docStoreOffset;\n          msg(\"    docStoreSegment=\" + info.getDocStoreSegment());\n          segInfoStat.docStoreSegment = info.getDocStoreSegment();\n          msg(\"    docStoreIsCompoundFile=\" + info.getDocStoreIsCompoundFile());\n          segInfoStat.docStoreCompoundFile = info.getDocStoreIsCompoundFile();\n        }\n\n        if (info.hasDeletions()) {\n          msg(\"    no deletions\");\n          segInfoStat.hasDeletions = false;\n        }\n        else{\n          msg(\"    has deletions [delGen=\" + info.getDelGen() + \"]\");\n          segInfoStat.hasDeletions = true;\n          segInfoStat.deletionsGen = info.getDelGen();\n        }\n        if (infoStream != null)\n          infoStream.print(\"    test: open reader.........\");\n        reader = new SegmentReader(info, DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, IOContext.DEFAULT);\n\n        segInfoStat.openReaderPassed = true;\n\n        final int numDocs = reader.numDocs();\n        toLoseDocCount = numDocs;\n        if (reader.hasDeletions()) {\n          if (reader.numDocs() != info.docCount - info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + (info.docCount - info.getDelCount()) + \" vs reader=\" + reader.numDocs());\n          }\n          if ((info.docCount-reader.numDocs()) > reader.maxDoc()) {\n            throw new RuntimeException(\"too many deleted docs: maxDoc()=\" + reader.maxDoc() + \" vs del count=\" + (info.docCount-reader.numDocs()));\n          }\n          if (info.docCount - numDocs != info.getDelCount()) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          segInfoStat.numDeleted = info.docCount - numDocs;\n          msg(\"OK [\" + (segInfoStat.numDeleted) + \" deleted docs]\");\n        } else {\n          if (info.getDelCount() != 0) {\n            throw new RuntimeException(\"delete count mismatch: info=\" + info.getDelCount() + \" vs reader=\" + (info.docCount - numDocs));\n          }\n          msg(\"OK\");\n        }\n        if (reader.maxDoc() != info.docCount)\n          throw new RuntimeException(\"SegmentReader.maxDoc() \" + reader.maxDoc() + \" != SegmentInfos.docCount \" + info.docCount);\n\n        // Test getFieldInfos()\n        if (infoStream != null) {\n          infoStream.print(\"    test: fields..............\");\n        }         \n        FieldInfos fieldInfos = reader.getFieldInfos();\n        msg(\"OK [\" + fieldInfos.size() + \" fields]\");\n        segInfoStat.numFields = fieldInfos.size();\n        \n        // Test Field Norms\n        segInfoStat.fieldNormStatus = testFieldNorms(fieldInfos, reader);\n\n        // Test the Term Index\n        segInfoStat.termIndexStatus = testPostings(reader);\n\n        // Test Stored Fields\n        segInfoStat.storedFieldStatus = testStoredFields(info, reader, nf);\n\n        // Test Term Vectors\n        segInfoStat.termVectorStatus = testTermVectors(info, reader, nf);\n        \n        segInfoStat.docValuesStatus = testDocValues(info, reader);\n\n        // Rethrow the first exception we encountered\n        //  This will cause stats for failed segments to be incremented properly\n        if (segInfoStat.fieldNormStatus.error != null) {\n          throw new RuntimeException(\"Field Norm test failed\");\n        } else if (segInfoStat.termIndexStatus.error != null) {\n          throw new RuntimeException(\"Term Index test failed\");\n        } else if (segInfoStat.storedFieldStatus.error != null) {\n          throw new RuntimeException(\"Stored Field test failed\");\n        } else if (segInfoStat.termVectorStatus.error != null) {\n          throw new RuntimeException(\"Term Vector test failed\");\n        }  else if (segInfoStat.docValuesStatus.error != null) {\n          throw new RuntimeException(\"DocValues test failed\");\n        }\n\n        msg(\"\");\n\n      } catch (Throwable t) {\n        msg(\"FAILED\");\n        String comment;\n        comment = \"fixIndex() would remove reference to this segment\";\n        msg(\"    WARNING: \" + comment + \"; full exception:\");\n        if (infoStream != null)\n          t.printStackTrace(infoStream);\n        msg(\"\");\n        result.totLoseDocCount += toLoseDocCount;\n        result.numBadSegments++;\n        continue;\n      } finally {\n        if (reader != null)\n          reader.close();\n      }\n\n      // Keeper\n      result.newSegments.add((SegmentInfo) info.clone());\n    }\n\n    if (0 == result.numBadSegments) {\n      result.clean = true;\n    } else\n      msg(\"WARNING: \" + result.numBadSegments + \" broken segments (containing \" + result.totLoseDocCount + \" documents) detected\");\n\n    if ( ! (result.validCounter = (result.maxSegmentName < sis.counter))) {\n      result.clean = false;\n      result.newSegments.counter = result.maxSegmentName + 1; \n      msg(\"ERROR: Next segment name counter \" + sis.counter + \" is not greater than max segment name \" + result.maxSegmentName);\n    }\n    \n    if (result.clean) {\n      msg(\"No problems were detected with this index.\\n\");\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"cfd7f00f3dbc4c50d336540f063493fc0f7d830f":["3cc749c053615f5871f3b95715fe292f34e70a53"],"b43b719dab44d1ccc5ee5b6e01c50f1ee86bb76c":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["cfd7f00f3dbc4c50d336540f063493fc0f7d830f","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["893d07555f01912f57b453a320e4d46363a31b50","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"3cc749c053615f5871f3b95715fe292f34e70a53":["7b91922b55d15444d554721b352861d028eb8278"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31","fd92b8bcc88e969302510acf77bd6970da3994c4"],"7b91922b55d15444d554721b352861d028eb8278":["b43b719dab44d1ccc5ee5b6e01c50f1ee86bb76c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"893d07555f01912f57b453a320e4d46363a31b50":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["cfd7f00f3dbc4c50d336540f063493fc0f7d830f","cb4972c6aaf6c714c8f5957b5aeb14dcce34b75f"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["31f025ae60076ae95274433f3fe8e6ace2857a87","c01bf951751b6dabfd53cb1429a659b28cd6ab4b"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"cb4972c6aaf6c714c8f5957b5aeb14dcce34b75f":["cfd7f00f3dbc4c50d336540f063493fc0f7d830f"],"c01bf951751b6dabfd53cb1429a659b28cd6ab4b":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"cfd7f00f3dbc4c50d336540f063493fc0f7d830f":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","cb4972c6aaf6c714c8f5957b5aeb14dcce34b75f"],"b43b719dab44d1ccc5ee5b6e01c50f1ee86bb76c":["7b91922b55d15444d554721b352861d028eb8278"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3cc749c053615f5871f3b95715fe292f34e70a53":["cfd7f00f3dbc4c50d336540f063493fc0f7d830f"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["b43b719dab44d1ccc5ee5b6e01c50f1ee86bb76c"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7b91922b55d15444d554721b352861d028eb8278":["3cc749c053615f5871f3b95715fe292f34e70a53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"893d07555f01912f57b453a320e4d46363a31b50":["fd92b8bcc88e969302510acf77bd6970da3994c4"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","9ce667c6d3400b22523701c549c0d35e26da8b46"],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["fd92b8bcc88e969302510acf77bd6970da3994c4","5cab9a86bd67202d20b6adc463008c8e982b070a"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"cb4972c6aaf6c714c8f5957b5aeb14dcce34b75f":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"c01bf951751b6dabfd53cb1429a659b28cd6ab4b":["c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["893d07555f01912f57b453a320e4d46363a31b50","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31","c01bf951751b6dabfd53cb1429a659b28cd6ab4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}