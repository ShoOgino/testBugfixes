{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateDocument(Term,Iterable[#-extends-IndexableField],Analyzer).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateDocument(Term,Iterable[#-extends-IndexableField],Analyzer).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#updateDocument(Term,Iterable[#-extends-IndexableField],Analyzer).mjava","sourceNew":"  /**\n   * Updates a document by first deleting the document(s)\n   * containing <code>term</code> and then adding the new\n   * document.  The delete and then add are atomic as seen\n   * by a reader on the same index (flush may happen only after\n   * the add).\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param term the term to identify the document(s) to be\n   * deleted\n   * @param doc the document to be added\n   * @param analyzer the analyzer to use when analyzing the document\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void updateDocument(Term term, Iterable<? extends IndexableField> doc, Analyzer analyzer)\n      throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      boolean success = false;\n      boolean anySegmentFlushed = false;\n      try {\n        anySegmentFlushed = docWriter.updateDocument(doc, analyzer, term);\n        success = true;\n      } finally {\n        if (!success) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception updating document\");\n          }\n        }\n      }\n\n      if (anySegmentFlushed) {\n        maybeMerge();\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"updateDocument\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Updates a document by first deleting the document(s)\n   * containing <code>term</code> and then adding the new\n   * document.  The delete and then add are atomic as seen\n   * by a reader on the same index (flush may happen only after\n   * the add).\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param term the term to identify the document(s) to be\n   * deleted\n   * @param doc the document to be added\n   * @param analyzer the analyzer to use when analyzing the document\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void updateDocument(Term term, Iterable<? extends IndexableField> doc, Analyzer analyzer)\n      throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      boolean success = false;\n      boolean anySegmentFlushed = false;\n      try {\n        anySegmentFlushed = docWriter.updateDocument(doc, analyzer, term);\n        success = true;\n      } finally {\n        if (!success) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception updating document\");\n          }\n        }\n      }\n\n      if (anySegmentFlushed) {\n        maybeMerge();\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"updateDocument\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateDocument(Term,Iterable[#-extends-IndexableField],Analyzer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateDocument(Term,Iterable[#-extends-IndexableField],Analyzer).mjava","sourceNew":"  /**\n   * Updates a document by first deleting the document(s)\n   * containing <code>term</code> and then adding the new\n   * document.  The delete and then add are atomic as seen\n   * by a reader on the same index (flush may happen only after\n   * the add).\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param term the term to identify the document(s) to be\n   * deleted\n   * @param doc the document to be added\n   * @param analyzer the analyzer to use when analyzing the document\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void updateDocument(Term term, Iterable<? extends IndexableField> doc, Analyzer analyzer)\n      throws IOException {\n    ensureOpen();\n    try {\n      boolean success = false;\n      boolean anySegmentFlushed = false;\n      try {\n        anySegmentFlushed = docWriter.updateDocument(doc, analyzer, term);\n        success = true;\n      } finally {\n        if (!success) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception updating document\");\n          }\n        }\n      }\n\n      if (anySegmentFlushed) {\n        maybeMerge();\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"updateDocument\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Updates a document by first deleting the document(s)\n   * containing <code>term</code> and then adding the new\n   * document.  The delete and then add are atomic as seen\n   * by a reader on the same index (flush may happen only after\n   * the add).\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param term the term to identify the document(s) to be\n   * deleted\n   * @param doc the document to be added\n   * @param analyzer the analyzer to use when analyzing the document\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void updateDocument(Term term, Iterable<? extends IndexableField> doc, Analyzer analyzer)\n      throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      boolean success = false;\n      boolean anySegmentFlushed = false;\n      try {\n        anySegmentFlushed = docWriter.updateDocument(doc, analyzer, term);\n        success = true;\n      } finally {\n        if (!success) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception updating document\");\n          }\n        }\n      }\n\n      if (anySegmentFlushed) {\n        maybeMerge();\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"updateDocument\");\n    }\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a","date":1341524239,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateDocument(Term,IndexDocument,Analyzer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateDocument(Term,Iterable[#-extends-IndexableField],Analyzer).mjava","sourceNew":"  /**\n   * Updates a document by first deleting the document(s)\n   * containing <code>term</code> and then adding the new\n   * document.  The delete and then add are atomic as seen\n   * by a reader on the same index (flush may happen only after\n   * the add).\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param term the term to identify the document(s) to be\n   * deleted\n   * @param doc the document to be added\n   * @param analyzer the analyzer to use when analyzing the document\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void updateDocument(Term term, IndexDocument doc, Analyzer analyzer)\n      throws IOException {\n    ensureOpen();\n    try {\n      boolean success = false;\n      boolean anySegmentFlushed = false;\n      try {\n        anySegmentFlushed = docWriter.updateDocument(doc, analyzer, term);\n        success = true;\n      } finally {\n        if (!success) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception updating document\");\n          }\n        }\n      }\n\n      if (anySegmentFlushed) {\n        maybeMerge();\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"updateDocument\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Updates a document by first deleting the document(s)\n   * containing <code>term</code> and then adding the new\n   * document.  The delete and then add are atomic as seen\n   * by a reader on the same index (flush may happen only after\n   * the add).\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param term the term to identify the document(s) to be\n   * deleted\n   * @param doc the document to be added\n   * @param analyzer the analyzer to use when analyzing the document\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void updateDocument(Term term, Iterable<? extends IndexableField> doc, Analyzer analyzer)\n      throws IOException {\n    ensureOpen();\n    try {\n      boolean success = false;\n      boolean anySegmentFlushed = false;\n      try {\n        anySegmentFlushed = docWriter.updateDocument(doc, analyzer, term);\n        success = true;\n      } finally {\n        if (!success) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception updating document\");\n          }\n        }\n      }\n\n      if (anySegmentFlushed) {\n        maybeMerge();\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"updateDocument\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateDocument(Term,Iterable[#-extends-IndexableField],Analyzer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateDocument(Term,Iterable[#-extends-IndexableField],Analyzer).mjava","sourceNew":"  /**\n   * Updates a document by first deleting the document(s)\n   * containing <code>term</code> and then adding the new\n   * document.  The delete and then add are atomic as seen\n   * by a reader on the same index (flush may happen only after\n   * the add).\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param term the term to identify the document(s) to be\n   * deleted\n   * @param doc the document to be added\n   * @param analyzer the analyzer to use when analyzing the document\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void updateDocument(Term term, Iterable<? extends IndexableField> doc, Analyzer analyzer)\n      throws IOException {\n    ensureOpen();\n    try {\n      boolean success = false;\n      boolean anySegmentFlushed = false;\n      try {\n        anySegmentFlushed = docWriter.updateDocument(doc, analyzer, term);\n        success = true;\n      } finally {\n        if (!success) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception updating document\");\n          }\n        }\n      }\n\n      if (anySegmentFlushed) {\n        maybeMerge();\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"updateDocument\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Updates a document by first deleting the document(s)\n   * containing <code>term</code> and then adding the new\n   * document.  The delete and then add are atomic as seen\n   * by a reader on the same index (flush may happen only after\n   * the add).\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param term the term to identify the document(s) to be\n   * deleted\n   * @param doc the document to be added\n   * @param analyzer the analyzer to use when analyzing the document\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void updateDocument(Term term, Iterable<? extends IndexableField> doc, Analyzer analyzer)\n      throws CorruptIndexException, IOException {\n    ensureOpen();\n    try {\n      boolean success = false;\n      boolean anySegmentFlushed = false;\n      try {\n        anySegmentFlushed = docWriter.updateDocument(doc, analyzer, term);\n        success = true;\n      } finally {\n        if (!success) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception updating document\");\n          }\n        }\n      }\n\n      if (anySegmentFlushed) {\n        maybeMerge();\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"updateDocument\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateDocument(Term,IndexDocument,Analyzer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#updateDocument(Term,Iterable[#-extends-IndexableField],Analyzer).mjava","sourceNew":"  /**\n   * Updates a document by first deleting the document(s)\n   * containing <code>term</code> and then adding the new\n   * document.  The delete and then add are atomic as seen\n   * by a reader on the same index (flush may happen only after\n   * the add).\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param term the term to identify the document(s) to be\n   * deleted\n   * @param doc the document to be added\n   * @param analyzer the analyzer to use when analyzing the document\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void updateDocument(Term term, IndexDocument doc, Analyzer analyzer)\n      throws IOException {\n    ensureOpen();\n    try {\n      boolean success = false;\n      boolean anySegmentFlushed = false;\n      try {\n        anySegmentFlushed = docWriter.updateDocument(doc, analyzer, term);\n        success = true;\n      } finally {\n        if (!success) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception updating document\");\n          }\n        }\n      }\n\n      if (anySegmentFlushed) {\n        maybeMerge();\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"updateDocument\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Updates a document by first deleting the document(s)\n   * containing <code>term</code> and then adding the new\n   * document.  The delete and then add are atomic as seen\n   * by a reader on the same index (flush may happen only after\n   * the add).\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @param term the term to identify the document(s) to be\n   * deleted\n   * @param doc the document to be added\n   * @param analyzer the analyzer to use when analyzing the document\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void updateDocument(Term term, Iterable<? extends IndexableField> doc, Analyzer analyzer)\n      throws IOException {\n    ensureOpen();\n    try {\n      boolean success = false;\n      boolean anySegmentFlushed = false;\n      try {\n        anySegmentFlushed = docWriter.updateDocument(doc, analyzer, term);\n        success = true;\n      } finally {\n        if (!success) {\n          if (infoStream.isEnabled(\"IW\")) {\n            infoStream.message(\"IW\", \"hit exception updating document\");\n          }\n        }\n      }\n\n      if (anySegmentFlushed) {\n        maybeMerge();\n      }\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"updateDocument\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1d028314cced5858683a1bb4741423d0f934257b":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a"],"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d028314cced5858683a1bb4741423d0f934257b"]},"commit2Childs":{"1d028314cced5858683a1bb4741423d0f934257b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a":["1d028314cced5858683a1bb4741423d0f934257b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["1d028314cced5858683a1bb4741423d0f934257b","33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}