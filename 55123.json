{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader#postings(FieldInfo,BlockTermState,Bits,PostingsEnum,int).mjava","commits":[{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader#postings(FieldInfo,BlockTermState,Bits,PostingsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,int).mjava","sourceNew":"  @Override\n  public PostingsEnum postings(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, PostingsEnum reuse, int flags) throws IOException {\n\n    if ((flags & PostingsEnum.FLAG_POSITIONS) < PostingsEnum.FLAG_POSITIONS) {\n      BlockDocsEnum docsEnum;\n      if (reuse instanceof BlockDocsEnum) {\n        docsEnum = (BlockDocsEnum) reuse;\n        if (!docsEnum.canReuse(docIn, fieldInfo)) {\n          docsEnum = new BlockDocsEnum(fieldInfo);\n        }\n      } else {\n        docsEnum = new BlockDocsEnum(fieldInfo);\n      }\n      return docsEnum.reset(liveDocs, (IntBlockTermState) termState, flags);\n    }\n\n    boolean indexHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    boolean indexHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    boolean indexHasPayloads = fieldInfo.hasPayloads();\n\n    if (!indexHasPositions)\n      return null;\n\n    if ((!indexHasOffsets || (flags & PostingsEnum.FLAG_OFFSETS) == 0) &&\n        (!indexHasPayloads || (flags & PostingsEnum.FLAG_PAYLOADS) == 0)) {\n      BlockPostingsEnum docsAndPositionsEnum;\n      if (reuse instanceof BlockPostingsEnum) {\n        docsAndPositionsEnum = (BlockPostingsEnum) reuse;\n        if (!docsAndPositionsEnum.canReuse(docIn, fieldInfo)) {\n          docsAndPositionsEnum = new BlockPostingsEnum(fieldInfo);\n        }\n      } else {\n        docsAndPositionsEnum = new BlockPostingsEnum(fieldInfo);\n      }\n      return docsAndPositionsEnum.reset(liveDocs, (IntBlockTermState) termState);\n    } else {\n      EverythingEnum everythingEnum;\n      if (reuse instanceof EverythingEnum) {\n        everythingEnum = (EverythingEnum) reuse;\n        if (!everythingEnum.canReuse(docIn, fieldInfo)) {\n          everythingEnum = new EverythingEnum(fieldInfo);\n        }\n      } else {\n        everythingEnum = new EverythingEnum(fieldInfo);\n      }\n      return everythingEnum.reset(liveDocs, (IntBlockTermState) termState, flags);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs,\n                                               DocsAndPositionsEnum reuse, int flags)\n    throws IOException {\n\n    boolean indexHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    boolean indexHasPayloads = fieldInfo.hasPayloads();\n\n    if ((!indexHasOffsets || (flags & DocsAndPositionsEnum.FLAG_OFFSETS) == 0) &&\n        (!indexHasPayloads || (flags & DocsAndPositionsEnum.FLAG_PAYLOADS) == 0)) {\n      BlockDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse instanceof BlockDocsAndPositionsEnum) {\n        docsAndPositionsEnum = (BlockDocsAndPositionsEnum) reuse;\n        if (!docsAndPositionsEnum.canReuse(docIn, fieldInfo)) {\n          docsAndPositionsEnum = new BlockDocsAndPositionsEnum(fieldInfo);\n        }\n      } else {\n        docsAndPositionsEnum = new BlockDocsAndPositionsEnum(fieldInfo);\n      }\n      return docsAndPositionsEnum.reset(liveDocs, (IntBlockTermState) termState);\n    } else {\n      EverythingEnum everythingEnum;\n      if (reuse instanceof EverythingEnum) {\n        everythingEnum = (EverythingEnum) reuse;\n        if (!everythingEnum.canReuse(docIn, fieldInfo)) {\n          everythingEnum = new EverythingEnum(fieldInfo);\n        }\n      } else {\n        everythingEnum = new EverythingEnum(fieldInfo);\n      }\n      return everythingEnum.reset(liveDocs, (IntBlockTermState) termState, flags);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader#postings(FieldInfo,BlockTermState,Bits,PostingsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader#postings(FieldInfo,BlockTermState,Bits,PostingsEnum,int).mjava","sourceNew":"  @Override\n  public PostingsEnum postings(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, PostingsEnum reuse, int flags) throws IOException {\n\n    if ((flags & PostingsEnum.POSITIONS) < PostingsEnum.POSITIONS) {\n      BlockDocsEnum docsEnum;\n      if (reuse instanceof BlockDocsEnum) {\n        docsEnum = (BlockDocsEnum) reuse;\n        if (!docsEnum.canReuse(docIn, fieldInfo)) {\n          docsEnum = new BlockDocsEnum(fieldInfo);\n        }\n      } else {\n        docsEnum = new BlockDocsEnum(fieldInfo);\n      }\n      return docsEnum.reset(liveDocs, (IntBlockTermState) termState, flags);\n    }\n\n    boolean indexHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    boolean indexHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    boolean indexHasPayloads = fieldInfo.hasPayloads();\n\n    if (!indexHasPositions)\n      return null;\n\n    if ((!indexHasOffsets || (flags & PostingsEnum.OFFSETS) == 0) &&\n        (!indexHasPayloads || (flags & PostingsEnum.PAYLOADS) == 0)) {\n      BlockPostingsEnum docsAndPositionsEnum;\n      if (reuse instanceof BlockPostingsEnum) {\n        docsAndPositionsEnum = (BlockPostingsEnum) reuse;\n        if (!docsAndPositionsEnum.canReuse(docIn, fieldInfo)) {\n          docsAndPositionsEnum = new BlockPostingsEnum(fieldInfo);\n        }\n      } else {\n        docsAndPositionsEnum = new BlockPostingsEnum(fieldInfo);\n      }\n      return docsAndPositionsEnum.reset(liveDocs, (IntBlockTermState) termState);\n    } else {\n      EverythingEnum everythingEnum;\n      if (reuse instanceof EverythingEnum) {\n        everythingEnum = (EverythingEnum) reuse;\n        if (!everythingEnum.canReuse(docIn, fieldInfo)) {\n          everythingEnum = new EverythingEnum(fieldInfo);\n        }\n      } else {\n        everythingEnum = new EverythingEnum(fieldInfo);\n      }\n      return everythingEnum.reset(liveDocs, (IntBlockTermState) termState, flags);\n    }\n  }\n\n","sourceOld":"  @Override\n  public PostingsEnum postings(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, PostingsEnum reuse, int flags) throws IOException {\n\n    if ((flags & PostingsEnum.FLAG_POSITIONS) < PostingsEnum.FLAG_POSITIONS) {\n      BlockDocsEnum docsEnum;\n      if (reuse instanceof BlockDocsEnum) {\n        docsEnum = (BlockDocsEnum) reuse;\n        if (!docsEnum.canReuse(docIn, fieldInfo)) {\n          docsEnum = new BlockDocsEnum(fieldInfo);\n        }\n      } else {\n        docsEnum = new BlockDocsEnum(fieldInfo);\n      }\n      return docsEnum.reset(liveDocs, (IntBlockTermState) termState, flags);\n    }\n\n    boolean indexHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    boolean indexHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    boolean indexHasPayloads = fieldInfo.hasPayloads();\n\n    if (!indexHasPositions)\n      return null;\n\n    if ((!indexHasOffsets || (flags & PostingsEnum.FLAG_OFFSETS) == 0) &&\n        (!indexHasPayloads || (flags & PostingsEnum.FLAG_PAYLOADS) == 0)) {\n      BlockPostingsEnum docsAndPositionsEnum;\n      if (reuse instanceof BlockPostingsEnum) {\n        docsAndPositionsEnum = (BlockPostingsEnum) reuse;\n        if (!docsAndPositionsEnum.canReuse(docIn, fieldInfo)) {\n          docsAndPositionsEnum = new BlockPostingsEnum(fieldInfo);\n        }\n      } else {\n        docsAndPositionsEnum = new BlockPostingsEnum(fieldInfo);\n      }\n      return docsAndPositionsEnum.reset(liveDocs, (IntBlockTermState) termState);\n    } else {\n      EverythingEnum everythingEnum;\n      if (reuse instanceof EverythingEnum) {\n        everythingEnum = (EverythingEnum) reuse;\n        if (!everythingEnum.canReuse(docIn, fieldInfo)) {\n          everythingEnum = new EverythingEnum(fieldInfo);\n        }\n      } else {\n        everythingEnum = new EverythingEnum(fieldInfo);\n      }\n      return everythingEnum.reset(liveDocs, (IntBlockTermState) termState, flags);\n    }\n  }\n\n","bugFix":null,"bugIntro":["6bded7e784a0edc186af47e44fc86f73b8288791"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9023c2bf8056230665bace786651c0716d78d31","date":1424736578,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader#postings(FieldInfo,BlockTermState,Bits,PostingsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader#postings(FieldInfo,BlockTermState,Bits,PostingsEnum,int).mjava","sourceNew":"  @Override\n  public PostingsEnum postings(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, PostingsEnum reuse, int flags) throws IOException {\n\n    if ((flags & PostingsEnum.POSITIONS) < PostingsEnum.POSITIONS) {\n      BlockDocsEnum docsEnum;\n      if (reuse instanceof BlockDocsEnum) {\n        docsEnum = (BlockDocsEnum) reuse;\n        if (!docsEnum.canReuse(docIn, fieldInfo)) {\n          docsEnum = new BlockDocsEnum(fieldInfo);\n        }\n      } else {\n        docsEnum = new BlockDocsEnum(fieldInfo);\n      }\n      return docsEnum.reset(liveDocs, (IntBlockTermState) termState, flags);\n    }\n\n    boolean indexHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    boolean indexHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    boolean indexHasPayloads = fieldInfo.hasPayloads();\n\n    if (!indexHasPositions)\n      return null;\n\n    if ((!indexHasOffsets || PostingsEnum.featureRequested(flags, PostingsEnum.OFFSETS) == false) &&\n        (!indexHasPayloads || PostingsEnum.featureRequested(flags, PostingsEnum.PAYLOADS) == false)) {\n      BlockPostingsEnum docsAndPositionsEnum;\n      if (reuse instanceof BlockPostingsEnum) {\n        docsAndPositionsEnum = (BlockPostingsEnum) reuse;\n        if (!docsAndPositionsEnum.canReuse(docIn, fieldInfo)) {\n          docsAndPositionsEnum = new BlockPostingsEnum(fieldInfo);\n        }\n      } else {\n        docsAndPositionsEnum = new BlockPostingsEnum(fieldInfo);\n      }\n      return docsAndPositionsEnum.reset(liveDocs, (IntBlockTermState) termState);\n    } else {\n      EverythingEnum everythingEnum;\n      if (reuse instanceof EverythingEnum) {\n        everythingEnum = (EverythingEnum) reuse;\n        if (!everythingEnum.canReuse(docIn, fieldInfo)) {\n          everythingEnum = new EverythingEnum(fieldInfo);\n        }\n      } else {\n        everythingEnum = new EverythingEnum(fieldInfo);\n      }\n      return everythingEnum.reset(liveDocs, (IntBlockTermState) termState, flags);\n    }\n  }\n\n","sourceOld":"  @Override\n  public PostingsEnum postings(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, PostingsEnum reuse, int flags) throws IOException {\n\n    if ((flags & PostingsEnum.POSITIONS) < PostingsEnum.POSITIONS) {\n      BlockDocsEnum docsEnum;\n      if (reuse instanceof BlockDocsEnum) {\n        docsEnum = (BlockDocsEnum) reuse;\n        if (!docsEnum.canReuse(docIn, fieldInfo)) {\n          docsEnum = new BlockDocsEnum(fieldInfo);\n        }\n      } else {\n        docsEnum = new BlockDocsEnum(fieldInfo);\n      }\n      return docsEnum.reset(liveDocs, (IntBlockTermState) termState, flags);\n    }\n\n    boolean indexHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    boolean indexHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    boolean indexHasPayloads = fieldInfo.hasPayloads();\n\n    if (!indexHasPositions)\n      return null;\n\n    if ((!indexHasOffsets || (flags & PostingsEnum.OFFSETS) == 0) &&\n        (!indexHasPayloads || (flags & PostingsEnum.PAYLOADS) == 0)) {\n      BlockPostingsEnum docsAndPositionsEnum;\n      if (reuse instanceof BlockPostingsEnum) {\n        docsAndPositionsEnum = (BlockPostingsEnum) reuse;\n        if (!docsAndPositionsEnum.canReuse(docIn, fieldInfo)) {\n          docsAndPositionsEnum = new BlockPostingsEnum(fieldInfo);\n        }\n      } else {\n        docsAndPositionsEnum = new BlockPostingsEnum(fieldInfo);\n      }\n      return docsAndPositionsEnum.reset(liveDocs, (IntBlockTermState) termState);\n    } else {\n      EverythingEnum everythingEnum;\n      if (reuse instanceof EverythingEnum) {\n        everythingEnum = (EverythingEnum) reuse;\n        if (!everythingEnum.canReuse(docIn, fieldInfo)) {\n          everythingEnum = new EverythingEnum(fieldInfo);\n        }\n      } else {\n        everythingEnum = new EverythingEnum(fieldInfo);\n      }\n      return everythingEnum.reset(liveDocs, (IntBlockTermState) termState, flags);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6bded7e784a0edc186af47e44fc86f73b8288791","date":1424816170,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader#postings(FieldInfo,BlockTermState,Bits,PostingsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader#postings(FieldInfo,BlockTermState,Bits,PostingsEnum,int).mjava","sourceNew":"  @Override\n  public PostingsEnum postings(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, PostingsEnum reuse, int flags) throws IOException {\n\n    if (PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS) == false) {\n      BlockDocsEnum docsEnum;\n      if (reuse instanceof BlockDocsEnum) {\n        docsEnum = (BlockDocsEnum) reuse;\n        if (!docsEnum.canReuse(docIn, fieldInfo)) {\n          docsEnum = new BlockDocsEnum(fieldInfo);\n        }\n      } else {\n        docsEnum = new BlockDocsEnum(fieldInfo);\n      }\n      return docsEnum.reset(liveDocs, (IntBlockTermState) termState, flags);\n    }\n\n    boolean indexHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    boolean indexHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    boolean indexHasPayloads = fieldInfo.hasPayloads();\n\n    if (!indexHasPositions)\n      return null;\n\n    if ((!indexHasOffsets || PostingsEnum.featureRequested(flags, PostingsEnum.OFFSETS) == false) &&\n        (!indexHasPayloads || PostingsEnum.featureRequested(flags, PostingsEnum.PAYLOADS) == false)) {\n      BlockPostingsEnum docsAndPositionsEnum;\n      if (reuse instanceof BlockPostingsEnum) {\n        docsAndPositionsEnum = (BlockPostingsEnum) reuse;\n        if (!docsAndPositionsEnum.canReuse(docIn, fieldInfo)) {\n          docsAndPositionsEnum = new BlockPostingsEnum(fieldInfo);\n        }\n      } else {\n        docsAndPositionsEnum = new BlockPostingsEnum(fieldInfo);\n      }\n      return docsAndPositionsEnum.reset(liveDocs, (IntBlockTermState) termState);\n    } else {\n      EverythingEnum everythingEnum;\n      if (reuse instanceof EverythingEnum) {\n        everythingEnum = (EverythingEnum) reuse;\n        if (!everythingEnum.canReuse(docIn, fieldInfo)) {\n          everythingEnum = new EverythingEnum(fieldInfo);\n        }\n      } else {\n        everythingEnum = new EverythingEnum(fieldInfo);\n      }\n      return everythingEnum.reset(liveDocs, (IntBlockTermState) termState, flags);\n    }\n  }\n\n","sourceOld":"  @Override\n  public PostingsEnum postings(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, PostingsEnum reuse, int flags) throws IOException {\n\n    if ((flags & PostingsEnum.POSITIONS) < PostingsEnum.POSITIONS) {\n      BlockDocsEnum docsEnum;\n      if (reuse instanceof BlockDocsEnum) {\n        docsEnum = (BlockDocsEnum) reuse;\n        if (!docsEnum.canReuse(docIn, fieldInfo)) {\n          docsEnum = new BlockDocsEnum(fieldInfo);\n        }\n      } else {\n        docsEnum = new BlockDocsEnum(fieldInfo);\n      }\n      return docsEnum.reset(liveDocs, (IntBlockTermState) termState, flags);\n    }\n\n    boolean indexHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    boolean indexHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    boolean indexHasPayloads = fieldInfo.hasPayloads();\n\n    if (!indexHasPositions)\n      return null;\n\n    if ((!indexHasOffsets || PostingsEnum.featureRequested(flags, PostingsEnum.OFFSETS) == false) &&\n        (!indexHasPayloads || PostingsEnum.featureRequested(flags, PostingsEnum.PAYLOADS) == false)) {\n      BlockPostingsEnum docsAndPositionsEnum;\n      if (reuse instanceof BlockPostingsEnum) {\n        docsAndPositionsEnum = (BlockPostingsEnum) reuse;\n        if (!docsAndPositionsEnum.canReuse(docIn, fieldInfo)) {\n          docsAndPositionsEnum = new BlockPostingsEnum(fieldInfo);\n        }\n      } else {\n        docsAndPositionsEnum = new BlockPostingsEnum(fieldInfo);\n      }\n      return docsAndPositionsEnum.reset(liveDocs, (IntBlockTermState) termState);\n    } else {\n      EverythingEnum everythingEnum;\n      if (reuse instanceof EverythingEnum) {\n        everythingEnum = (EverythingEnum) reuse;\n        if (!everythingEnum.canReuse(docIn, fieldInfo)) {\n          everythingEnum = new EverythingEnum(fieldInfo);\n        }\n      } else {\n        everythingEnum = new EverythingEnum(fieldInfo);\n      }\n      return everythingEnum.reset(liveDocs, (IntBlockTermState) termState, flags);\n    }\n  }\n\n","bugFix":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb5311f0bff57ce15a23909f4cfb953773630534","date":1424827033,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader#postings(FieldInfo,BlockTermState,Bits,PostingsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader#postings(FieldInfo,BlockTermState,Bits,PostingsEnum,int).mjava","sourceNew":"  @Override\n  public PostingsEnum postings(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, PostingsEnum reuse, int flags) throws IOException {\n    \n    boolean indexHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    boolean indexHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    boolean indexHasPayloads = fieldInfo.hasPayloads();\n\n    if (indexHasPositions == false || PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS) == false) {\n      BlockDocsEnum docsEnum;\n      if (reuse instanceof BlockDocsEnum) {\n        docsEnum = (BlockDocsEnum) reuse;\n        if (!docsEnum.canReuse(docIn, fieldInfo)) {\n          docsEnum = new BlockDocsEnum(fieldInfo);\n        }\n      } else {\n        docsEnum = new BlockDocsEnum(fieldInfo);\n      }\n      return docsEnum.reset(liveDocs, (IntBlockTermState) termState, flags);\n    } else if ((indexHasOffsets == false || PostingsEnum.featureRequested(flags, PostingsEnum.OFFSETS) == false) &&\n               (indexHasPayloads == false || PostingsEnum.featureRequested(flags, PostingsEnum.PAYLOADS) == false)) {\n      BlockPostingsEnum docsAndPositionsEnum;\n      if (reuse instanceof BlockPostingsEnum) {\n        docsAndPositionsEnum = (BlockPostingsEnum) reuse;\n        if (!docsAndPositionsEnum.canReuse(docIn, fieldInfo)) {\n          docsAndPositionsEnum = new BlockPostingsEnum(fieldInfo);\n        }\n      } else {\n        docsAndPositionsEnum = new BlockPostingsEnum(fieldInfo);\n      }\n      return docsAndPositionsEnum.reset(liveDocs, (IntBlockTermState) termState);\n    } else {\n      EverythingEnum everythingEnum;\n      if (reuse instanceof EverythingEnum) {\n        everythingEnum = (EverythingEnum) reuse;\n        if (!everythingEnum.canReuse(docIn, fieldInfo)) {\n          everythingEnum = new EverythingEnum(fieldInfo);\n        }\n      } else {\n        everythingEnum = new EverythingEnum(fieldInfo);\n      }\n      return everythingEnum.reset(liveDocs, (IntBlockTermState) termState, flags);\n    }\n  }\n\n","sourceOld":"  @Override\n  public PostingsEnum postings(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, PostingsEnum reuse, int flags) throws IOException {\n\n    if (PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS) == false) {\n      BlockDocsEnum docsEnum;\n      if (reuse instanceof BlockDocsEnum) {\n        docsEnum = (BlockDocsEnum) reuse;\n        if (!docsEnum.canReuse(docIn, fieldInfo)) {\n          docsEnum = new BlockDocsEnum(fieldInfo);\n        }\n      } else {\n        docsEnum = new BlockDocsEnum(fieldInfo);\n      }\n      return docsEnum.reset(liveDocs, (IntBlockTermState) termState, flags);\n    }\n\n    boolean indexHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    boolean indexHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    boolean indexHasPayloads = fieldInfo.hasPayloads();\n\n    if (!indexHasPositions)\n      return null;\n\n    if ((!indexHasOffsets || PostingsEnum.featureRequested(flags, PostingsEnum.OFFSETS) == false) &&\n        (!indexHasPayloads || PostingsEnum.featureRequested(flags, PostingsEnum.PAYLOADS) == false)) {\n      BlockPostingsEnum docsAndPositionsEnum;\n      if (reuse instanceof BlockPostingsEnum) {\n        docsAndPositionsEnum = (BlockPostingsEnum) reuse;\n        if (!docsAndPositionsEnum.canReuse(docIn, fieldInfo)) {\n          docsAndPositionsEnum = new BlockPostingsEnum(fieldInfo);\n        }\n      } else {\n        docsAndPositionsEnum = new BlockPostingsEnum(fieldInfo);\n      }\n      return docsAndPositionsEnum.reset(liveDocs, (IntBlockTermState) termState);\n    } else {\n      EverythingEnum everythingEnum;\n      if (reuse instanceof EverythingEnum) {\n        everythingEnum = (EverythingEnum) reuse;\n        if (!everythingEnum.canReuse(docIn, fieldInfo)) {\n          everythingEnum = new EverythingEnum(fieldInfo);\n        }\n      } else {\n        everythingEnum = new EverythingEnum(fieldInfo);\n      }\n      return everythingEnum.reset(liveDocs, (IntBlockTermState) termState, flags);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b4e3cd382d0d075a0f1725649c084bb6510c483","date":1428096423,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader#postings(FieldInfo,BlockTermState,Bits,PostingsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader#postings(FieldInfo,BlockTermState,Bits,PostingsEnum,int).mjava","sourceNew":"  @Override\n  public PostingsEnum postings(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, PostingsEnum reuse, int flags) throws IOException {\n    \n    boolean indexHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    boolean indexHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    boolean indexHasPayloads = fieldInfo.hasPayloads();\n\n    if (indexHasPositions == false || PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS) == false) {\n      BlockDocsEnum docsEnum;\n      if (reuse instanceof BlockDocsEnum) {\n        docsEnum = (BlockDocsEnum) reuse;\n        if (!docsEnum.canReuse(docIn, fieldInfo)) {\n          docsEnum = new BlockDocsEnum(fieldInfo);\n        }\n      } else {\n        docsEnum = new BlockDocsEnum(fieldInfo);\n      }\n      return docsEnum.reset(liveDocs, (IntBlockTermState) termState, flags);\n    } else if ((indexHasOffsets == false || PostingsEnum.featureRequested(flags, PostingsEnum.OFFSETS) == false) &&\n               (indexHasPayloads == false || PostingsEnum.featureRequested(flags, PostingsEnum.PAYLOADS) == false)) {\n      BlockPostingsEnum docsAndPositionsEnum;\n      if (reuse instanceof BlockPostingsEnum) {\n        docsAndPositionsEnum = (BlockPostingsEnum) reuse;\n        if (!docsAndPositionsEnum.canReuse(docIn, fieldInfo)) {\n          docsAndPositionsEnum = new BlockPostingsEnum(fieldInfo);\n        }\n      } else {\n        docsAndPositionsEnum = new BlockPostingsEnum(fieldInfo);\n      }\n      return docsAndPositionsEnum.reset(liveDocs, (IntBlockTermState) termState);\n    } else {\n      EverythingEnum everythingEnum;\n      if (reuse instanceof EverythingEnum) {\n        everythingEnum = (EverythingEnum) reuse;\n        if (!everythingEnum.canReuse(docIn, fieldInfo)) {\n          everythingEnum = new EverythingEnum(fieldInfo);\n        }\n      } else {\n        everythingEnum = new EverythingEnum(fieldInfo);\n      }\n      return everythingEnum.reset(liveDocs, (IntBlockTermState) termState, flags);\n    }\n  }\n\n","sourceOld":"  @Override\n  public PostingsEnum postings(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, PostingsEnum reuse, int flags) throws IOException {\n\n    if (PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS) == false) {\n      BlockDocsEnum docsEnum;\n      if (reuse instanceof BlockDocsEnum) {\n        docsEnum = (BlockDocsEnum) reuse;\n        if (!docsEnum.canReuse(docIn, fieldInfo)) {\n          docsEnum = new BlockDocsEnum(fieldInfo);\n        }\n      } else {\n        docsEnum = new BlockDocsEnum(fieldInfo);\n      }\n      return docsEnum.reset(liveDocs, (IntBlockTermState) termState, flags);\n    }\n\n    boolean indexHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    boolean indexHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    boolean indexHasPayloads = fieldInfo.hasPayloads();\n\n    if (!indexHasPositions)\n      return null;\n\n    if ((!indexHasOffsets || PostingsEnum.featureRequested(flags, PostingsEnum.OFFSETS) == false) &&\n        (!indexHasPayloads || PostingsEnum.featureRequested(flags, PostingsEnum.PAYLOADS) == false)) {\n      BlockPostingsEnum docsAndPositionsEnum;\n      if (reuse instanceof BlockPostingsEnum) {\n        docsAndPositionsEnum = (BlockPostingsEnum) reuse;\n        if (!docsAndPositionsEnum.canReuse(docIn, fieldInfo)) {\n          docsAndPositionsEnum = new BlockPostingsEnum(fieldInfo);\n        }\n      } else {\n        docsAndPositionsEnum = new BlockPostingsEnum(fieldInfo);\n      }\n      return docsAndPositionsEnum.reset(liveDocs, (IntBlockTermState) termState);\n    } else {\n      EverythingEnum everythingEnum;\n      if (reuse instanceof EverythingEnum) {\n        everythingEnum = (EverythingEnum) reuse;\n        if (!everythingEnum.canReuse(docIn, fieldInfo)) {\n          everythingEnum = new EverythingEnum(fieldInfo);\n        }\n      } else {\n        everythingEnum = new EverythingEnum(fieldInfo);\n      }\n      return everythingEnum.reset(liveDocs, (IntBlockTermState) termState, flags);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader#postings(FieldInfo,BlockTermState,PostingsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader#postings(FieldInfo,BlockTermState,Bits,PostingsEnum,int).mjava","sourceNew":"  @Override\n  public PostingsEnum postings(FieldInfo fieldInfo, BlockTermState termState, PostingsEnum reuse, int flags) throws IOException {\n    \n    boolean indexHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    boolean indexHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    boolean indexHasPayloads = fieldInfo.hasPayloads();\n\n    if (indexHasPositions == false || PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS) == false) {\n      BlockDocsEnum docsEnum;\n      if (reuse instanceof BlockDocsEnum) {\n        docsEnum = (BlockDocsEnum) reuse;\n        if (!docsEnum.canReuse(docIn, fieldInfo)) {\n          docsEnum = new BlockDocsEnum(fieldInfo);\n        }\n      } else {\n        docsEnum = new BlockDocsEnum(fieldInfo);\n      }\n      return docsEnum.reset((IntBlockTermState) termState, flags);\n    } else if ((indexHasOffsets == false || PostingsEnum.featureRequested(flags, PostingsEnum.OFFSETS) == false) &&\n               (indexHasPayloads == false || PostingsEnum.featureRequested(flags, PostingsEnum.PAYLOADS) == false)) {\n      BlockPostingsEnum docsAndPositionsEnum;\n      if (reuse instanceof BlockPostingsEnum) {\n        docsAndPositionsEnum = (BlockPostingsEnum) reuse;\n        if (!docsAndPositionsEnum.canReuse(docIn, fieldInfo)) {\n          docsAndPositionsEnum = new BlockPostingsEnum(fieldInfo);\n        }\n      } else {\n        docsAndPositionsEnum = new BlockPostingsEnum(fieldInfo);\n      }\n      return docsAndPositionsEnum.reset((IntBlockTermState) termState);\n    } else {\n      EverythingEnum everythingEnum;\n      if (reuse instanceof EverythingEnum) {\n        everythingEnum = (EverythingEnum) reuse;\n        if (!everythingEnum.canReuse(docIn, fieldInfo)) {\n          everythingEnum = new EverythingEnum(fieldInfo);\n        }\n      } else {\n        everythingEnum = new EverythingEnum(fieldInfo);\n      }\n      return everythingEnum.reset((IntBlockTermState) termState, flags);\n    }\n  }\n\n","sourceOld":"  @Override\n  public PostingsEnum postings(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, PostingsEnum reuse, int flags) throws IOException {\n    \n    boolean indexHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    boolean indexHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    boolean indexHasPayloads = fieldInfo.hasPayloads();\n\n    if (indexHasPositions == false || PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS) == false) {\n      BlockDocsEnum docsEnum;\n      if (reuse instanceof BlockDocsEnum) {\n        docsEnum = (BlockDocsEnum) reuse;\n        if (!docsEnum.canReuse(docIn, fieldInfo)) {\n          docsEnum = new BlockDocsEnum(fieldInfo);\n        }\n      } else {\n        docsEnum = new BlockDocsEnum(fieldInfo);\n      }\n      return docsEnum.reset(liveDocs, (IntBlockTermState) termState, flags);\n    } else if ((indexHasOffsets == false || PostingsEnum.featureRequested(flags, PostingsEnum.OFFSETS) == false) &&\n               (indexHasPayloads == false || PostingsEnum.featureRequested(flags, PostingsEnum.PAYLOADS) == false)) {\n      BlockPostingsEnum docsAndPositionsEnum;\n      if (reuse instanceof BlockPostingsEnum) {\n        docsAndPositionsEnum = (BlockPostingsEnum) reuse;\n        if (!docsAndPositionsEnum.canReuse(docIn, fieldInfo)) {\n          docsAndPositionsEnum = new BlockPostingsEnum(fieldInfo);\n        }\n      } else {\n        docsAndPositionsEnum = new BlockPostingsEnum(fieldInfo);\n      }\n      return docsAndPositionsEnum.reset(liveDocs, (IntBlockTermState) termState);\n    } else {\n      EverythingEnum everythingEnum;\n      if (reuse instanceof EverythingEnum) {\n        everythingEnum = (EverythingEnum) reuse;\n        if (!everythingEnum.canReuse(docIn, fieldInfo)) {\n          everythingEnum = new EverythingEnum(fieldInfo);\n        }\n      } else {\n        everythingEnum = new EverythingEnum(fieldInfo);\n      }\n      return everythingEnum.reset(liveDocs, (IntBlockTermState) termState, flags);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cb5311f0bff57ce15a23909f4cfb953773630534":["6bded7e784a0edc186af47e44fc86f73b8288791"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["6b4e3cd382d0d075a0f1725649c084bb6510c483"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"6b4e3cd382d0d075a0f1725649c084bb6510c483":["6bded7e784a0edc186af47e44fc86f73b8288791","cb5311f0bff57ce15a23909f4cfb953773630534"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6bded7e784a0edc186af47e44fc86f73b8288791":["a9023c2bf8056230665bace786651c0716d78d31"],"a9023c2bf8056230665bace786651c0716d78d31":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"51f5280f31484820499077f41fcdfe92d527d9dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4464508ee83288c8c4585b533f9faaa93aa314"]},"commit2Childs":{"cb5311f0bff57ce15a23909f4cfb953773630534":["6b4e3cd382d0d075a0f1725649c084bb6510c483"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["a9023c2bf8056230665bace786651c0716d78d31"],"6b4e3cd382d0d075a0f1725649c084bb6510c483":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51f5280f31484820499077f41fcdfe92d527d9dc"],"6bded7e784a0edc186af47e44fc86f73b8288791":["cb5311f0bff57ce15a23909f4cfb953773630534","6b4e3cd382d0d075a0f1725649c084bb6510c483"],"a9023c2bf8056230665bace786651c0716d78d31":["6bded7e784a0edc186af47e44fc86f73b8288791"],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}