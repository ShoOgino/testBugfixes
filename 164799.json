{"path":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl#nextTerm(FieldInfo,BlockTermState).mjava","commits":[{"id":"b1add9ddc0005b07550d4350720aac22dc9886b3","date":1295549635,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl#nextTerm(FieldInfo,BlockTermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl#readTerm(IndexInput,FieldInfo,PrefixCodedTermState,boolean).mjava","sourceNew":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    //System.out.println(\"PR nextTerm\");\n    PulsingTermState termState = (PulsingTermState) _termState;\n\n    // total TF, but in the omitTFAP case its computed based on docFreq.\n    long count = fieldInfo.omitTermFreqAndPositions ? termState.docFreq : termState.totalTermFreq;\n    //System.out.println(\"  count=\" + count + \" threshold=\" + maxPositions);\n\n    if (count <= maxPositions) {\n      //System.out.println(\"  inlined\");\n\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = termState.inlinedBytesReader.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      // TODO: sort of silly to copy from one big byte[]\n      // (the blob holding all inlined terms' blobs for\n      // current term block) into another byte[] (just the\n      // blob for this term)...\n      termState.inlinedBytesReader.readBytes(termState.postings, 0, termState.postingsSize);\n    } else {\n      //System.out.println(\"  not inlined\");\n      termState.postingsSize = -1;\n      // TODO: should we do full copyFrom?  much heavier...?\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      termState.wrappedTermState.totalTermFreq = termState.totalTermFreq;\n      wrappedPostingsReader.nextTerm(fieldInfo, termState.wrappedTermState);\n      termState.wrappedTermState.termCount++;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void readTerm(IndexInput termsIn, FieldInfo fieldInfo, PrefixCodedTermState _termState, boolean isIndexTerm) throws IOException {\n    PulsingTermState termState = (PulsingTermState) _termState;\n\n    termState.pendingIndexTerm |= isIndexTerm;\n\n    // total TF, but in the omitTFAP case its computed based on docFreq.\n    long count = fieldInfo.omitTermFreqAndPositions ? termState.docFreq : termState.totalTermFreq;\n    \n    if (count <= maxPositions) {\n\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = termsIn.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      termsIn.readBytes(termState.postings, 0, termState.postingsSize);\n    } else {\n      termState.postingsSize = -1;\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      wrappedPostingsReader.readTerm(termsIn, fieldInfo, termState.wrappedTermState, termState.pendingIndexTerm);\n      termState.pendingIndexTerm = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl#nextTerm(FieldInfo,BlockTermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl#readTerm(IndexInput,FieldInfo,PrefixCodedTermState,boolean).mjava","sourceNew":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    //System.out.println(\"PR nextTerm\");\n    PulsingTermState termState = (PulsingTermState) _termState;\n\n    // total TF, but in the omitTFAP case its computed based on docFreq.\n    long count = fieldInfo.omitTermFreqAndPositions ? termState.docFreq : termState.totalTermFreq;\n    //System.out.println(\"  count=\" + count + \" threshold=\" + maxPositions);\n\n    if (count <= maxPositions) {\n      //System.out.println(\"  inlined\");\n\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = termState.inlinedBytesReader.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      // TODO: sort of silly to copy from one big byte[]\n      // (the blob holding all inlined terms' blobs for\n      // current term block) into another byte[] (just the\n      // blob for this term)...\n      termState.inlinedBytesReader.readBytes(termState.postings, 0, termState.postingsSize);\n    } else {\n      //System.out.println(\"  not inlined\");\n      termState.postingsSize = -1;\n      // TODO: should we do full copyFrom?  much heavier...?\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      termState.wrappedTermState.totalTermFreq = termState.totalTermFreq;\n      wrappedPostingsReader.nextTerm(fieldInfo, termState.wrappedTermState);\n      termState.wrappedTermState.termCount++;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void readTerm(IndexInput termsIn, FieldInfo fieldInfo, PrefixCodedTermState _termState, boolean isIndexTerm) throws IOException {\n    PulsingTermState termState = (PulsingTermState) _termState;\n\n    termState.pendingIndexTerm |= isIndexTerm;\n\n    // total TF, but in the omitTFAP case its computed based on docFreq.\n    long count = fieldInfo.omitTermFreqAndPositions ? termState.docFreq : termState.totalTermFreq;\n    \n    if (count <= maxPositions) {\n\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = termsIn.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      termsIn.readBytes(termState.postings, 0, termState.postingsSize);\n    } else {\n      termState.postingsSize = -1;\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      wrappedPostingsReader.readTerm(termsIn, fieldInfo, termState.wrappedTermState, termState.pendingIndexTerm);\n      termState.pendingIndexTerm = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl#nextTerm(FieldInfo,BlockTermState).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    //System.out.println(\"PR nextTerm\");\n    PulsingTermState termState = (PulsingTermState) _termState;\n\n    // total TF, but in the omitTFAP case its computed based on docFreq.\n    long count = fieldInfo.omitTermFreqAndPositions ? termState.docFreq : termState.totalTermFreq;\n    //System.out.println(\"  count=\" + count + \" threshold=\" + maxPositions);\n\n    if (count <= maxPositions) {\n      //System.out.println(\"  inlined\");\n\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = termState.inlinedBytesReader.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      // TODO: sort of silly to copy from one big byte[]\n      // (the blob holding all inlined terms' blobs for\n      // current term block) into another byte[] (just the\n      // blob for this term)...\n      termState.inlinedBytesReader.readBytes(termState.postings, 0, termState.postingsSize);\n    } else {\n      //System.out.println(\"  not inlined\");\n      termState.postingsSize = -1;\n      // TODO: should we do full copyFrom?  much heavier...?\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      termState.wrappedTermState.totalTermFreq = termState.totalTermFreq;\n      wrappedPostingsReader.nextTerm(fieldInfo, termState.wrappedTermState);\n      termState.wrappedTermState.termCount++;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762","date":1297938719,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl#nextTerm(FieldInfo,BlockTermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl#nextTerm(FieldInfo,BlockTermState).mjava","sourceNew":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    //System.out.println(\"PR nextTerm\");\n    PulsingTermState termState = (PulsingTermState) _termState;\n\n    // total TF, but in the omitTFAP case its computed based on docFreq.\n    long count = fieldInfo.omitTermFreqAndPositions ? termState.docFreq : termState.totalTermFreq;\n    //System.out.println(\"  count=\" + count + \" threshold=\" + maxPositions);\n\n    if (count <= maxPositions) {\n      //System.out.println(\"  inlined pos=\" + termState.inlinedBytesReader.getPosition());\n\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = termState.inlinedBytesReader.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      // TODO: sort of silly to copy from one big byte[]\n      // (the blob holding all inlined terms' blobs for\n      // current term block) into another byte[] (just the\n      // blob for this term)...\n      termState.inlinedBytesReader.readBytes(termState.postings, 0, termState.postingsSize);\n    } else {\n      //System.out.println(\"  not inlined\");\n      termState.postingsSize = -1;\n      // TODO: should we do full copyFrom?  much heavier...?\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      termState.wrappedTermState.totalTermFreq = termState.totalTermFreq;\n      wrappedPostingsReader.nextTerm(fieldInfo, termState.wrappedTermState);\n      termState.wrappedTermState.termCount++;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    //System.out.println(\"PR nextTerm\");\n    PulsingTermState termState = (PulsingTermState) _termState;\n\n    // total TF, but in the omitTFAP case its computed based on docFreq.\n    long count = fieldInfo.omitTermFreqAndPositions ? termState.docFreq : termState.totalTermFreq;\n    //System.out.println(\"  count=\" + count + \" threshold=\" + maxPositions);\n\n    if (count <= maxPositions) {\n      //System.out.println(\"  inlined\");\n\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = termState.inlinedBytesReader.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      // TODO: sort of silly to copy from one big byte[]\n      // (the blob holding all inlined terms' blobs for\n      // current term block) into another byte[] (just the\n      // blob for this term)...\n      termState.inlinedBytesReader.readBytes(termState.postings, 0, termState.postingsSize);\n    } else {\n      //System.out.println(\"  not inlined\");\n      termState.postingsSize = -1;\n      // TODO: should we do full copyFrom?  much heavier...?\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      termState.wrappedTermState.totalTermFreq = termState.totalTermFreq;\n      wrappedPostingsReader.nextTerm(fieldInfo, termState.wrappedTermState);\n      termState.wrappedTermState.termCount++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl#nextTerm(FieldInfo,BlockTermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl#nextTerm(FieldInfo,BlockTermState).mjava","sourceNew":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    //System.out.println(\"PR nextTerm\");\n    PulsingTermState termState = (PulsingTermState) _termState;\n\n    // total TF, but in the omitTFAP case its computed based on docFreq.\n    long count = fieldInfo.omitTermFreqAndPositions ? termState.docFreq : termState.totalTermFreq;\n    //System.out.println(\"  count=\" + count + \" threshold=\" + maxPositions);\n\n    if (count <= maxPositions) {\n      //System.out.println(\"  inlined pos=\" + termState.inlinedBytesReader.getPosition());\n\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = termState.inlinedBytesReader.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      // TODO: sort of silly to copy from one big byte[]\n      // (the blob holding all inlined terms' blobs for\n      // current term block) into another byte[] (just the\n      // blob for this term)...\n      termState.inlinedBytesReader.readBytes(termState.postings, 0, termState.postingsSize);\n    } else {\n      //System.out.println(\"  not inlined\");\n      termState.postingsSize = -1;\n      // TODO: should we do full copyFrom?  much heavier...?\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      termState.wrappedTermState.totalTermFreq = termState.totalTermFreq;\n      wrappedPostingsReader.nextTerm(fieldInfo, termState.wrappedTermState);\n      termState.wrappedTermState.termCount++;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    //System.out.println(\"PR nextTerm\");\n    PulsingTermState termState = (PulsingTermState) _termState;\n\n    // total TF, but in the omitTFAP case its computed based on docFreq.\n    long count = fieldInfo.omitTermFreqAndPositions ? termState.docFreq : termState.totalTermFreq;\n    //System.out.println(\"  count=\" + count + \" threshold=\" + maxPositions);\n\n    if (count <= maxPositions) {\n      //System.out.println(\"  inlined\");\n\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = termState.inlinedBytesReader.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      // TODO: sort of silly to copy from one big byte[]\n      // (the blob holding all inlined terms' blobs for\n      // current term block) into another byte[] (just the\n      // blob for this term)...\n      termState.inlinedBytesReader.readBytes(termState.postings, 0, termState.postingsSize);\n    } else {\n      //System.out.println(\"  not inlined\");\n      termState.postingsSize = -1;\n      // TODO: should we do full copyFrom?  much heavier...?\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      termState.wrappedTermState.totalTermFreq = termState.totalTermFreq;\n      wrappedPostingsReader.nextTerm(fieldInfo, termState.wrappedTermState);\n      termState.wrappedTermState.termCount++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl#nextTerm(FieldInfo,BlockTermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl#nextTerm(FieldInfo,BlockTermState).mjava","sourceNew":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    //System.out.println(\"PR nextTerm\");\n    PulsingTermState termState = (PulsingTermState) _termState;\n\n    // total TF, but in the omitTFAP case its computed based on docFreq.\n    long count = fieldInfo.omitTermFreqAndPositions ? termState.docFreq : termState.totalTermFreq;\n    //System.out.println(\"  count=\" + count + \" threshold=\" + maxPositions);\n\n    if (count <= maxPositions) {\n      //System.out.println(\"  inlined pos=\" + termState.inlinedBytesReader.getPosition());\n\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = termState.inlinedBytesReader.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      // TODO: sort of silly to copy from one big byte[]\n      // (the blob holding all inlined terms' blobs for\n      // current term block) into another byte[] (just the\n      // blob for this term)...\n      termState.inlinedBytesReader.readBytes(termState.postings, 0, termState.postingsSize);\n    } else {\n      //System.out.println(\"  not inlined\");\n      termState.postingsSize = -1;\n      // TODO: should we do full copyFrom?  much heavier...?\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      termState.wrappedTermState.totalTermFreq = termState.totalTermFreq;\n      wrappedPostingsReader.nextTerm(fieldInfo, termState.wrappedTermState);\n      termState.wrappedTermState.termCount++;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    //System.out.println(\"PR nextTerm\");\n    PulsingTermState termState = (PulsingTermState) _termState;\n\n    // total TF, but in the omitTFAP case its computed based on docFreq.\n    long count = fieldInfo.omitTermFreqAndPositions ? termState.docFreq : termState.totalTermFreq;\n    //System.out.println(\"  count=\" + count + \" threshold=\" + maxPositions);\n\n    if (count <= maxPositions) {\n      //System.out.println(\"  inlined\");\n\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = termState.inlinedBytesReader.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      // TODO: sort of silly to copy from one big byte[]\n      // (the blob holding all inlined terms' blobs for\n      // current term block) into another byte[] (just the\n      // blob for this term)...\n      termState.inlinedBytesReader.readBytes(termState.postings, 0, termState.postingsSize);\n    } else {\n      //System.out.println(\"  not inlined\");\n      termState.postingsSize = -1;\n      // TODO: should we do full copyFrom?  much heavier...?\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      termState.wrappedTermState.totalTermFreq = termState.totalTermFreq;\n      wrappedPostingsReader.nextTerm(fieldInfo, termState.wrappedTermState);\n      termState.wrappedTermState.termCount++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl#nextTerm(FieldInfo,BlockTermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl#nextTerm(FieldInfo,BlockTermState).mjava","sourceNew":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    //System.out.println(\"PR nextTerm\");\n    PulsingTermState termState = (PulsingTermState) _termState;\n\n    // if we have positions, its total TF, otherwise its computed based on docFreq.\n    long count = fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS ? termState.totalTermFreq : termState.docFreq;\n    //System.out.println(\"  count=\" + count + \" threshold=\" + maxPositions);\n\n    if (count <= maxPositions) {\n      //System.out.println(\"  inlined pos=\" + termState.inlinedBytesReader.getPosition());\n\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = termState.inlinedBytesReader.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      // TODO: sort of silly to copy from one big byte[]\n      // (the blob holding all inlined terms' blobs for\n      // current term block) into another byte[] (just the\n      // blob for this term)...\n      termState.inlinedBytesReader.readBytes(termState.postings, 0, termState.postingsSize);\n    } else {\n      //System.out.println(\"  not inlined\");\n      termState.postingsSize = -1;\n      // TODO: should we do full copyFrom?  much heavier...?\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      termState.wrappedTermState.totalTermFreq = termState.totalTermFreq;\n      wrappedPostingsReader.nextTerm(fieldInfo, termState.wrappedTermState);\n      termState.wrappedTermState.termCount++;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    //System.out.println(\"PR nextTerm\");\n    PulsingTermState termState = (PulsingTermState) _termState;\n\n    // total TF, but in the omitTFAP case its computed based on docFreq.\n    long count = fieldInfo.omitTermFreqAndPositions ? termState.docFreq : termState.totalTermFreq;\n    //System.out.println(\"  count=\" + count + \" threshold=\" + maxPositions);\n\n    if (count <= maxPositions) {\n      //System.out.println(\"  inlined pos=\" + termState.inlinedBytesReader.getPosition());\n\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = termState.inlinedBytesReader.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      // TODO: sort of silly to copy from one big byte[]\n      // (the blob holding all inlined terms' blobs for\n      // current term block) into another byte[] (just the\n      // blob for this term)...\n      termState.inlinedBytesReader.readBytes(termState.postings, 0, termState.postingsSize);\n    } else {\n      //System.out.println(\"  not inlined\");\n      termState.postingsSize = -1;\n      // TODO: should we do full copyFrom?  much heavier...?\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      termState.wrappedTermState.totalTermFreq = termState.totalTermFreq;\n      wrappedPostingsReader.nextTerm(fieldInfo, termState.wrappedTermState);\n      termState.wrappedTermState.termCount++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl#nextTerm(FieldInfo,BlockTermState).mjava","sourceNew":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    //System.out.println(\"PR nextTerm\");\n    PulsingTermState termState = (PulsingTermState) _termState;\n\n    // if we have positions, its total TF, otherwise its computed based on docFreq.\n    long count = fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS ? termState.totalTermFreq : termState.docFreq;\n    //System.out.println(\"  count=\" + count + \" threshold=\" + maxPositions);\n\n    if (count <= maxPositions) {\n\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = termState.inlinedBytesReader.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      // TODO: sort of silly to copy from one big byte[]\n      // (the blob holding all inlined terms' blobs for\n      // current term block) into another byte[] (just the\n      // blob for this term)...\n      termState.inlinedBytesReader.readBytes(termState.postings, 0, termState.postingsSize);\n      //System.out.println(\"  inlined bytes=\" + termState.postingsSize);\n    } else {\n      //System.out.println(\"  not inlined\");\n      termState.postingsSize = -1;\n      // TODO: should we do full copyFrom?  much heavier...?\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      termState.wrappedTermState.totalTermFreq = termState.totalTermFreq;\n      wrappedPostingsReader.nextTerm(fieldInfo, termState.wrappedTermState);\n      termState.wrappedTermState.termBlockOrd++;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    //System.out.println(\"PR nextTerm\");\n    PulsingTermState termState = (PulsingTermState) _termState;\n\n    // if we have positions, its total TF, otherwise its computed based on docFreq.\n    long count = fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS ? termState.totalTermFreq : termState.docFreq;\n    //System.out.println(\"  count=\" + count + \" threshold=\" + maxPositions);\n\n    if (count <= maxPositions) {\n      //System.out.println(\"  inlined pos=\" + termState.inlinedBytesReader.getPosition());\n\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = termState.inlinedBytesReader.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      // TODO: sort of silly to copy from one big byte[]\n      // (the blob holding all inlined terms' blobs for\n      // current term block) into another byte[] (just the\n      // blob for this term)...\n      termState.inlinedBytesReader.readBytes(termState.postings, 0, termState.postingsSize);\n    } else {\n      //System.out.println(\"  not inlined\");\n      termState.postingsSize = -1;\n      // TODO: should we do full copyFrom?  much heavier...?\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      termState.wrappedTermState.totalTermFreq = termState.totalTermFreq;\n      wrappedPostingsReader.nextTerm(fieldInfo, termState.wrappedTermState);\n      termState.wrappedTermState.termCount++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["29ef99d61cda9641b6250bf9567329a6e65f901d","4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762":["b1add9ddc0005b07550d4350720aac22dc9886b3"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b1add9ddc0005b07550d4350720aac22dc9886b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b1add9ddc0005b07550d4350720aac22dc9886b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b1add9ddc0005b07550d4350720aac22dc9886b3"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["e79a6d080bdd5b2a8f56342cf571b5476de04180","4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60ba444201d2570214b6fcf1d15600dc1a01f548"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762":["2afd23a6f1242190c3409d8d81d5c5912d607fc9","f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","b1add9ddc0005b07550d4350720aac22dc9886b3","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762","29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}