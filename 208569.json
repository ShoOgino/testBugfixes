{"path":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter#getUniqueKeys(SolrIndexSearcher,int[]).mjava","commits":[{"id":"8868b7c4fbf215c41e7b4ea2cfc40d1970672910","date":1480034167,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter#getUniqueKeys(SolrIndexSearcher,int[]).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Retrieves the unique keys for the topdocs to key the results\n     */\n    protected String[] getUniqueKeys(SolrIndexSearcher searcher, int[] docIDs) throws IOException {\n        IndexSchema schema = searcher.getSchema();\n        SchemaField keyField = schema.getUniqueKeyField();\n        if (keyField != null) {\n            Set<String> selector = Collections.singleton(keyField.getName());\n            String[] uniqueKeys = new String[docIDs.length];\n            for (int i = 0; i < docIDs.length; i++) {\n                int docid = docIDs[i];\n                Document doc = searcher.doc(docid, selector);\n                String id = schema.printableUniqueKey(doc);\n                uniqueKeys[i] = id;\n            }\n            return uniqueKeys;\n        } else {\n            return new String[docIDs.length];\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75babd1dfc2521603bfeb0968042e921d8c6c652","date":1480042089,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter#getUniqueKeys(SolrIndexSearcher,int[]).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Retrieves the unique keys for the topdocs to key the results\n     */\n    protected String[] getUniqueKeys(SolrIndexSearcher searcher, int[] docIDs) throws IOException {\n        IndexSchema schema = searcher.getSchema();\n        SchemaField keyField = schema.getUniqueKeyField();\n        if (keyField != null) {\n            Set<String> selector = Collections.singleton(keyField.getName());\n            String[] uniqueKeys = new String[docIDs.length];\n            for (int i = 0; i < docIDs.length; i++) {\n                int docid = docIDs[i];\n                Document doc = searcher.doc(docid, selector);\n                String id = schema.printableUniqueKey(doc);\n                uniqueKeys[i] = id;\n            }\n            return uniqueKeys;\n        } else {\n            return new String[docIDs.length];\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter#getUniqueKeys(SolrIndexSearcher,int[]).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Retrieves the unique keys for the topdocs to key the results\n     */\n    protected String[] getUniqueKeys(SolrIndexSearcher searcher, int[] docIDs) throws IOException {\n        IndexSchema schema = searcher.getSchema();\n        SchemaField keyField = schema.getUniqueKeyField();\n        if (keyField != null) {\n            Set<String> selector = Collections.singleton(keyField.getName());\n            String[] uniqueKeys = new String[docIDs.length];\n            for (int i = 0; i < docIDs.length; i++) {\n                int docid = docIDs[i];\n                Document doc = searcher.doc(docid, selector);\n                String id = schema.printableUniqueKey(doc);\n                uniqueKeys[i] = id;\n            }\n            return uniqueKeys;\n        } else {\n            return new String[docIDs.length];\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fee424905e7d55c01f551853e7da496662f8722f","date":1482870873,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter#getUniqueKeys(SolrIndexSearcher,int[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter#getUniqueKeys(SolrIndexSearcher,int[]).mjava","sourceNew":"  /**\n   * Retrieves the unique keys for the topdocs to key the results\n   */\n  protected String[] getUniqueKeys(SolrIndexSearcher searcher, int[] docIDs) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    SchemaField keyField = schema.getUniqueKeyField();\n    if (keyField != null) {\n      Set<String> selector = Collections.singleton(keyField.getName());\n      String[] uniqueKeys = new String[docIDs.length];\n      for (int i = 0; i < docIDs.length; i++) {\n        int docid = docIDs[i];\n        Document doc = searcher.doc(docid, selector);\n        String id = schema.printableUniqueKey(doc);\n        uniqueKeys[i] = id;\n      }\n      return uniqueKeys;\n    } else {\n      return new String[docIDs.length];\n    }\n  }\n\n","sourceOld":"    /**\n     * Retrieves the unique keys for the topdocs to key the results\n     */\n    protected String[] getUniqueKeys(SolrIndexSearcher searcher, int[] docIDs) throws IOException {\n        IndexSchema schema = searcher.getSchema();\n        SchemaField keyField = schema.getUniqueKeyField();\n        if (keyField != null) {\n            Set<String> selector = Collections.singleton(keyField.getName());\n            String[] uniqueKeys = new String[docIDs.length];\n            for (int i = 0; i < docIDs.length; i++) {\n                int docid = docIDs[i];\n                Document doc = searcher.doc(docid, selector);\n                String id = schema.printableUniqueKey(doc);\n                uniqueKeys[i] = id;\n            }\n            return uniqueKeys;\n        } else {\n            return new String[docIDs.length];\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter#getUniqueKeys(SolrIndexSearcher,int[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter#getUniqueKeys(SolrIndexSearcher,int[]).mjava","sourceNew":"  /**\n   * Retrieves the unique keys for the topdocs to key the results\n   */\n  protected String[] getUniqueKeys(SolrIndexSearcher searcher, int[] docIDs) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    SchemaField keyField = schema.getUniqueKeyField();\n    if (keyField != null) {\n      Set<String> selector = Collections.singleton(keyField.getName());\n      String[] uniqueKeys = new String[docIDs.length];\n      for (int i = 0; i < docIDs.length; i++) {\n        int docid = docIDs[i];\n        Document doc = searcher.doc(docid, selector);\n        String id = schema.printableUniqueKey(doc);\n        uniqueKeys[i] = id;\n      }\n      return uniqueKeys;\n    } else {\n      return new String[docIDs.length];\n    }\n  }\n\n","sourceOld":"    /**\n     * Retrieves the unique keys for the topdocs to key the results\n     */\n    protected String[] getUniqueKeys(SolrIndexSearcher searcher, int[] docIDs) throws IOException {\n        IndexSchema schema = searcher.getSchema();\n        SchemaField keyField = schema.getUniqueKeyField();\n        if (keyField != null) {\n            Set<String> selector = Collections.singleton(keyField.getName());\n            String[] uniqueKeys = new String[docIDs.length];\n            for (int i = 0; i < docIDs.length; i++) {\n                int docid = docIDs[i];\n                Document doc = searcher.doc(docid, selector);\n                String id = schema.printableUniqueKey(doc);\n                uniqueKeys[i] = id;\n            }\n            return uniqueKeys;\n        } else {\n            return new String[docIDs.length];\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a9aeb4a98b03660f065aa31f6b3f2251a12b613","date":1581405488,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter#getUniqueKeys(SolrIndexSearcher,int[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter#getUniqueKeys(SolrIndexSearcher,int[]).mjava","sourceNew":"  /**\n   * Retrieves the unique keys for the topdocs to key the results\n   */\n  protected String[] getUniqueKeys(SolrIndexSearcher searcher, int[] docIDs) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    SchemaField keyField = schema.getUniqueKeyField();\n    if (keyField != null) {\n      SolrReturnFields returnFields = new SolrReturnFields(keyField.getName(), null);\n      String[] uniqueKeys = new String[docIDs.length];\n      for (int i = 0; i < docIDs.length; i++) {\n        int docid = docIDs[i];\n        SolrDocument solrDoc = searcher.getDocFetcher().solrDoc(docid, returnFields);\n        uniqueKeys[i] = schema.printableUniqueKey(solrDoc);\n      }\n      return uniqueKeys;\n    } else {\n      return new String[docIDs.length];\n    }\n  }\n\n","sourceOld":"  /**\n   * Retrieves the unique keys for the topdocs to key the results\n   */\n  protected String[] getUniqueKeys(SolrIndexSearcher searcher, int[] docIDs) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    SchemaField keyField = schema.getUniqueKeyField();\n    if (keyField != null) {\n      Set<String> selector = Collections.singleton(keyField.getName());\n      String[] uniqueKeys = new String[docIDs.length];\n      for (int i = 0; i < docIDs.length; i++) {\n        int docid = docIDs[i];\n        Document doc = searcher.doc(docid, selector);\n        String id = schema.printableUniqueKey(doc);\n        uniqueKeys[i] = id;\n      }\n      return uniqueKeys;\n    } else {\n      return new String[docIDs.length];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fee424905e7d55c01f551853e7da496662f8722f":["75babd1dfc2521603bfeb0968042e921d8c6c652"],"727bb765ff2542275f6d31f67be18d7104bae148":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","75babd1dfc2521603bfeb0968042e921d8c6c652"],"8868b7c4fbf215c41e7b4ea2cfc40d1970672910":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"75babd1dfc2521603bfeb0968042e921d8c6c652":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8868b7c4fbf215c41e7b4ea2cfc40d1970672910"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1a9aeb4a98b03660f065aa31f6b3f2251a12b613":["fee424905e7d55c01f551853e7da496662f8722f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1a9aeb4a98b03660f065aa31f6b3f2251a12b613"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["727bb765ff2542275f6d31f67be18d7104bae148","fee424905e7d55c01f551853e7da496662f8722f"]},"commit2Childs":{"fee424905e7d55c01f551853e7da496662f8722f":["1a9aeb4a98b03660f065aa31f6b3f2251a12b613","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"727bb765ff2542275f6d31f67be18d7104bae148":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"8868b7c4fbf215c41e7b4ea2cfc40d1970672910":["75babd1dfc2521603bfeb0968042e921d8c6c652"],"75babd1dfc2521603bfeb0968042e921d8c6c652":["fee424905e7d55c01f551853e7da496662f8722f","727bb765ff2542275f6d31f67be18d7104bae148"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["727bb765ff2542275f6d31f67be18d7104bae148","8868b7c4fbf215c41e7b4ea2cfc40d1970672910","75babd1dfc2521603bfeb0968042e921d8c6c652"],"1a9aeb4a98b03660f065aa31f6b3f2251a12b613":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}