{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestRunData#toString().mjava","commits":[{"id":"226abb667f503323e0d9473af1883fa03ef3a3fd","date":1163596173,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestRunData#toString().mjava","pathOld":"/dev/null","sourceNew":"  /** Return a string representation. */\n  public String toString() {\n    StringBuffer sb = new StringBuffer();\n    Collection labels = getLabels();\n    Iterator it = labels.iterator();\n    while (it.hasNext()) {\n      String label = (String) it.next();\n      sb.append(id + \"-\" + label + \" \" + getTotals(label).toString(false) + \" \");\n      sb.append(getMemUsage(label).toScaledString(1024 * 1024, \"MB\") + \"\\n\");\n    }\n    return sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12e3bbc2fb17fd52150c4fab79334d7dc4d091df","date":1167877078,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestRunData#toString().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestRunData#toString().mjava","sourceNew":"  /** Return a string representation. */\n  public String toString() {\n    StringBuffer sb = new StringBuffer();\n    Collection labels = getLabels();\n    Iterator it = labels.iterator();\n    while (it.hasNext()) {\n      String label = (String) it.next();\n        sb.append(id).append(\"-\").append(label).append(\" \").append(getTotals(label).toString(false)).append(\" \");\n        sb.append(getMemUsage(label).toScaledString(1024 * 1024, \"MB\")).append(\"\\n\");\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /** Return a string representation. */\n  public String toString() {\n    StringBuffer sb = new StringBuffer();\n    Collection labels = getLabels();\n    Iterator it = labels.iterator();\n    while (it.hasNext()) {\n      String label = (String) it.next();\n      sb.append(id + \"-\" + label + \" \" + getTotals(label).toString(false) + \" \");\n      sb.append(getMemUsage(label).toScaledString(1024 * 1024, \"MB\") + \"\\n\");\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e1ce9be74263e9659aad8a6ee1f213193710b71","date":1256298843,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestRunData#toString().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestRunData#toString().mjava","sourceNew":"  /** Return a string representation. */\n  public String toString() {\n    StringBuffer sb = new StringBuffer();\n    for (final String label : getLabels()) {\n        sb.append(id).append(\"-\").append(label).append(\" \").append(getTotals(label).toString(false)).append(\" \");\n        sb.append(getMemUsage(label).toScaledString(1024 * 1024, \"MB\")).append(\"\\n\");\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /** Return a string representation. */\n  public String toString() {\n    StringBuffer sb = new StringBuffer();\n    Collection labels = getLabels();\n    Iterator it = labels.iterator();\n    while (it.hasNext()) {\n      String label = (String) it.next();\n        sb.append(id).append(\"-\").append(label).append(\" \").append(getTotals(label).toString(false)).append(\" \");\n        sb.append(getMemUsage(label).toScaledString(1024 * 1024, \"MB\")).append(\"\\n\");\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestRunData#toString().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestRunData#toString().mjava","sourceNew":"  /** Return a string representation. */\n  @Override\n  public String toString() {\n    StringBuffer sb = new StringBuffer();\n    for (final String label : getLabels()) {\n        sb.append(id).append(\"-\").append(label).append(\" \").append(getTotals(label).toString(false)).append(\" \");\n        sb.append(getMemUsage(label).toScaledString(1024 * 1024, \"MB\")).append(\"\\n\");\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /** Return a string representation. */\n  public String toString() {\n    StringBuffer sb = new StringBuffer();\n    for (final String label : getLabels()) {\n        sb.append(id).append(\"-\").append(label).append(\" \").append(getTotals(label).toString(false)).append(\" \");\n        sb.append(getMemUsage(label).toScaledString(1024 * 1024, \"MB\")).append(\"\\n\");\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestRunData#toString().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/TestRunData#toString().mjava","sourceNew":"  /** Return a string representation. */\n  @Override\n  public String toString() {\n    StringBuffer sb = new StringBuffer();\n    for (final String label : getLabels()) {\n        sb.append(id).append(\"-\").append(label).append(\" \").append(getTotals(label).toString(false)).append(\" \");\n        sb.append(getMemUsage(label).toScaledString(1024 * 1024, \"MB\")).append(\"\\n\");\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  /** Return a string representation. */\n  @Override\n  public String toString() {\n    StringBuffer sb = new StringBuffer();\n    for (final String label : getLabels()) {\n        sb.append(id).append(\"-\").append(label).append(\" \").append(getTotals(label).toString(false)).append(\" \");\n        sb.append(getMemUsage(label).toScaledString(1024 * 1024, \"MB\")).append(\"\\n\");\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"226abb667f503323e0d9473af1883fa03ef3a3fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4e1ce9be74263e9659aad8a6ee1f213193710b71":["12e3bbc2fb17fd52150c4fab79334d7dc4d091df"],"12e3bbc2fb17fd52150c4fab79334d7dc4d091df":["226abb667f503323e0d9473af1883fa03ef3a3fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["4e1ce9be74263e9659aad8a6ee1f213193710b71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"]},"commit2Childs":{"226abb667f503323e0d9473af1883fa03ef3a3fd":["12e3bbc2fb17fd52150c4fab79334d7dc4d091df"],"4e1ce9be74263e9659aad8a6ee1f213193710b71":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"12e3bbc2fb17fd52150c4fab79334d7dc4d091df":["4e1ce9be74263e9659aad8a6ee1f213193710b71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["226abb667f503323e0d9473af1883fa03ef3a3fd"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}