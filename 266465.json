{"path":"lucene/src/java/org/apache/lucene/util/PagedBytes#copy(BytesRef,BytesRef).mjava","commits":[{"id":"87697f76828e4cfc6dc898262de8898e5010703f","date":1276817002,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/PagedBytes#copy(BytesRef,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /** Copy BytesRef in, setting BytesRef out to the result.\n   * Do not use this if you will use freeze(true).\n   * This only supports bytes.length <= blockSize */\n  public void copy(BytesRef bytes, BytesRef out) throws IOException {\n    int left = blockSize - upto;\n    if (bytes.length > left) {\n      if (currentBlock != null) {\n        blocks.add(currentBlock);\n        blockEnd.add(upto);\n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n      left = blockSize;\n      assert bytes.length <= blockSize;\n      // TODO: we could also support variable block sizes\n    }\n\n    out.bytes = currentBlock;\n    out.offset = upto;\n    out.length = bytes.length;\n\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","b9115dee0e2516f31fa3653a4c69588d1bdf6731"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/PagedBytes#copy(BytesRef,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /** Copy BytesRef in, setting BytesRef out to the result.\n   * Do not use this if you will use freeze(true).\n   * This only supports bytes.length <= blockSize */\n  public void copy(BytesRef bytes, BytesRef out) throws IOException {\n    int left = blockSize - upto;\n    if (bytes.length > left) {\n      if (currentBlock != null) {\n        blocks.add(currentBlock);\n        blockEnd.add(upto);\n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n      left = blockSize;\n      assert bytes.length <= blockSize;\n      // TODO: we could also support variable block sizes\n    }\n\n    out.bytes = currentBlock;\n    out.offset = upto;\n    out.length = bytes.length;\n\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b9115dee0e2516f31fa3653a4c69588d1bdf6731","date":1287171668,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/PagedBytes#copy(BytesRef,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/PagedBytes#copy(BytesRef,BytesRef).mjava","sourceNew":"  /** Copy BytesRef in, setting BytesRef out to the result.\n   * Do not use this if you will use freeze(true).\n   * This only supports bytes.length <= blockSize */\n  public void copy(BytesRef bytes, BytesRef out) throws IOException {\n    int left = blockSize - upto;\n    if (bytes.length > left || currentBlock==null) {\n      if (currentBlock != null) {\n        blocks.add(currentBlock);\n        blockEnd.add(upto);\n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n      left = blockSize;\n      assert bytes.length <= blockSize;\n      // TODO: we could also support variable block sizes\n    }\n\n    out.bytes = currentBlock;\n    out.offset = upto;\n    out.length = bytes.length;\n\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n  }\n\n","sourceOld":"  /** Copy BytesRef in, setting BytesRef out to the result.\n   * Do not use this if you will use freeze(true).\n   * This only supports bytes.length <= blockSize */\n  public void copy(BytesRef bytes, BytesRef out) throws IOException {\n    int left = blockSize - upto;\n    if (bytes.length > left) {\n      if (currentBlock != null) {\n        blocks.add(currentBlock);\n        blockEnd.add(upto);\n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n      left = blockSize;\n      assert bytes.length <= blockSize;\n      // TODO: we could also support variable block sizes\n    }\n\n    out.bytes = currentBlock;\n    out.offset = upto;\n    out.length = bytes.length;\n\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n  }\n\n","bugFix":["87697f76828e4cfc6dc898262de8898e5010703f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/PagedBytes#copy(BytesRef,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/PagedBytes#copy(BytesRef,BytesRef).mjava","sourceNew":"  /** Copy BytesRef in, setting BytesRef out to the result.\n   * Do not use this if you will use freeze(true).\n   * This only supports bytes.length <= blockSize */\n  public void copy(BytesRef bytes, BytesRef out) throws IOException {\n    int left = blockSize - upto;\n    if (bytes.length > left || currentBlock==null) {\n      if (currentBlock != null) {\n        blocks.add(currentBlock);\n        blockEnd.add(upto);\n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n      left = blockSize;\n      assert bytes.length <= blockSize;\n      // TODO: we could also support variable block sizes\n    }\n\n    out.bytes = currentBlock;\n    out.offset = upto;\n    out.length = bytes.length;\n\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n  }\n\n","sourceOld":"  /** Copy BytesRef in, setting BytesRef out to the result.\n   * Do not use this if you will use freeze(true).\n   * This only supports bytes.length <= blockSize */\n  public void copy(BytesRef bytes, BytesRef out) throws IOException {\n    int left = blockSize - upto;\n    if (bytes.length > left) {\n      if (currentBlock != null) {\n        blocks.add(currentBlock);\n        blockEnd.add(upto);\n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n      left = blockSize;\n      assert bytes.length <= blockSize;\n      // TODO: we could also support variable block sizes\n    }\n\n    out.bytes = currentBlock;\n    out.offset = upto;\n    out.length = bytes.length;\n\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/PagedBytes#copy(BytesRef,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/PagedBytes#copy(BytesRef,BytesRef).mjava","sourceNew":"  /** Copy BytesRef in, setting BytesRef out to the result.\n   * Do not use this if you will use freeze(true).\n   * This only supports bytes.length <= blockSize */\n  public void copy(BytesRef bytes, BytesRef out) throws IOException {\n    int left = blockSize - upto;\n    if (bytes.length > left || currentBlock==null) {\n      if (currentBlock != null) {\n        blocks.add(currentBlock);\n        blockEnd.add(upto);\n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n      left = blockSize;\n      assert bytes.length <= blockSize;\n      // TODO: we could also support variable block sizes\n    }\n\n    out.bytes = currentBlock;\n    out.offset = upto;\n    out.length = bytes.length;\n\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n  }\n\n","sourceOld":"  /** Copy BytesRef in, setting BytesRef out to the result.\n   * Do not use this if you will use freeze(true).\n   * This only supports bytes.length <= blockSize */\n  public void copy(BytesRef bytes, BytesRef out) throws IOException {\n    int left = blockSize - upto;\n    if (bytes.length > left) {\n      if (currentBlock != null) {\n        blocks.add(currentBlock);\n        blockEnd.add(upto);\n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n      left = blockSize;\n      assert bytes.length <= blockSize;\n      // TODO: we could also support variable block sizes\n    }\n\n    out.bytes = currentBlock;\n    out.offset = upto;\n    out.length = bytes.length;\n\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39509e0276e70b38a5e76aa9d2c468955a1c7855","date":1319748553,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/PagedBytes#copy(BytesRef,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/PagedBytes#copy(BytesRef,BytesRef).mjava","sourceNew":"  /** Copy BytesRef in, setting BytesRef out to the result.\n   * Do not use this if you will use freeze(true).\n   * This only supports bytes.length <= blockSize */\n  public void copy(BytesRef bytes, BytesRef out) throws IOException {\n    int left = blockSize - upto;\n    if (bytes.length > left || currentBlock==null) {\n      if (currentBlock != null) {\n        blocks.add(currentBlock);\n        blockEnd.add(upto);\n        didSkipBytes = true;\n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n      left = blockSize;\n      assert bytes.length <= blockSize;\n      // TODO: we could also support variable block sizes\n    }\n\n    out.bytes = currentBlock;\n    out.offset = upto;\n    out.length = bytes.length;\n\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n  }\n\n","sourceOld":"  /** Copy BytesRef in, setting BytesRef out to the result.\n   * Do not use this if you will use freeze(true).\n   * This only supports bytes.length <= blockSize */\n  public void copy(BytesRef bytes, BytesRef out) throws IOException {\n    int left = blockSize - upto;\n    if (bytes.length > left || currentBlock==null) {\n      if (currentBlock != null) {\n        blocks.add(currentBlock);\n        blockEnd.add(upto);\n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n      left = blockSize;\n      assert bytes.length <= blockSize;\n      // TODO: we could also support variable block sizes\n    }\n\n    out.bytes = currentBlock;\n    out.offset = upto;\n    out.length = bytes.length;\n\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/PagedBytes#copy(BytesRef,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/PagedBytes#copy(BytesRef,BytesRef).mjava","sourceNew":"  /** Copy BytesRef in, setting BytesRef out to the result.\n   * Do not use this if you will use freeze(true).\n   * This only supports bytes.length <= blockSize */\n  public void copy(BytesRef bytes, BytesRef out) throws IOException {\n    int left = blockSize - upto;\n    if (bytes.length > left || currentBlock==null) {\n      if (currentBlock != null) {\n        blocks.add(currentBlock);\n        blockEnd.add(upto);\n        didSkipBytes = true;\n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n      left = blockSize;\n      assert bytes.length <= blockSize;\n      // TODO: we could also support variable block sizes\n    }\n\n    out.bytes = currentBlock;\n    out.offset = upto;\n    out.length = bytes.length;\n\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n  }\n\n","sourceOld":"  /** Copy BytesRef in, setting BytesRef out to the result.\n   * Do not use this if you will use freeze(true).\n   * This only supports bytes.length <= blockSize */\n  public void copy(BytesRef bytes, BytesRef out) throws IOException {\n    int left = blockSize - upto;\n    if (bytes.length > left || currentBlock==null) {\n      if (currentBlock != null) {\n        blocks.add(currentBlock);\n        blockEnd.add(upto);\n        didSkipBytes = true;\n      }\n      currentBlock = new byte[blockSize];\n      upto = 0;\n      left = blockSize;\n      assert bytes.length <= blockSize;\n      // TODO: we could also support variable block sizes\n    }\n\n    out.bytes = currentBlock;\n    out.offset = upto;\n    out.length = bytes.length;\n\n    System.arraycopy(bytes.bytes, bytes.offset, currentBlock, upto, bytes.length);\n    upto += bytes.length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"87697f76828e4cfc6dc898262de8898e5010703f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"39509e0276e70b38a5e76aa9d2c468955a1c7855":["b9115dee0e2516f31fa3653a4c69588d1bdf6731"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["39509e0276e70b38a5e76aa9d2c468955a1c7855"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","87697f76828e4cfc6dc898262de8898e5010703f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","b9115dee0e2516f31fa3653a4c69588d1bdf6731"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["87697f76828e4cfc6dc898262de8898e5010703f","b9115dee0e2516f31fa3653a4c69588d1bdf6731"],"b9115dee0e2516f31fa3653a4c69588d1bdf6731":["87697f76828e4cfc6dc898262de8898e5010703f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"87697f76828e4cfc6dc898262de8898e5010703f":["5f4e87790277826a2aea119328600dfb07761f32","4ecea1664e8617d82eca3b8055a3c37cb4da8511","b9115dee0e2516f31fa3653a4c69588d1bdf6731"],"39509e0276e70b38a5e76aa9d2c468955a1c7855":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["87697f76828e4cfc6dc898262de8898e5010703f","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"b9115dee0e2516f31fa3653a4c69588d1bdf6731":["39509e0276e70b38a5e76aa9d2c468955a1c7855","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}