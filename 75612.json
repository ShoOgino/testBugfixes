{"path":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testAnalyzerFactory().mjava","commits":[{"id":"7bb889a868ab9d608bde8136f42ed7234a3a927b","date":1359393528,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testAnalyzerFactory().mjava","pathOld":"/dev/null","sourceNew":"  public void testAnalyzerFactory() throws Exception {\n    String text = \"Fortieth, Quarantième, Cuadragésimo\";\n    Benchmark benchmark = execBenchmark(getAnalyzerFactoryConfig\n        (\"ascii folded, pattern replaced, standard tokenized, downcased, bigrammed.'analyzer'\",\n         \"positionIncrementGap:100,offsetGap:1111,\"\n         +\"MappingCharFilter(mapping:'test-mapping-ISOLatin1Accent-partial.txt'),\"\n         +\"PatternReplaceCharFilterFactory(pattern:'e(\\\\\\\\\\\\\\\\S*)m',replacement:\\\"$1xxx$1\\\"),\"\n         +\"StandardTokenizer,LowerCaseFilter,NGramTokenFilter(minGramSize:2,maxGramSize:2)\"));\n    BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(), text,\n        new String[] { \"fo\", \"or\", \"rt\", \"ti\", \"ie\", \"et\", \"th\",\n                       \"qu\", \"ua\", \"ar\", \"ra\", \"an\", \"nt\", \"ti\", \"ix\", \"xx\", \"xx\", \"xe\",\n                       \"cu\", \"ua\", \"ad\", \"dr\", \"ra\", \"ag\", \"gs\", \"si\", \"ix\", \"xx\", \"xx\", \"xs\", \"si\", \"io\"});\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de522d9303bd67c8473a269a1319125d1f3700e0","date":1359477856,"type":0,"author":"Adrien Grand","isMerge":true,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testAnalyzerFactory().mjava","pathOld":"/dev/null","sourceNew":"  public void testAnalyzerFactory() throws Exception {\n    String text = \"Fortieth, Quarantième, Cuadragésimo\";\n    Benchmark benchmark = execBenchmark(getAnalyzerFactoryConfig\n        (\"ascii folded, pattern replaced, standard tokenized, downcased, bigrammed.'analyzer'\",\n         \"positionIncrementGap:100,offsetGap:1111,\"\n         +\"MappingCharFilter(mapping:'test-mapping-ISOLatin1Accent-partial.txt'),\"\n         +\"PatternReplaceCharFilterFactory(pattern:'e(\\\\\\\\\\\\\\\\S*)m',replacement:\\\"$1xxx$1\\\"),\"\n         +\"StandardTokenizer,LowerCaseFilter,NGramTokenFilter(minGramSize:2,maxGramSize:2)\"));\n    BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(), text,\n        new String[] { \"fo\", \"or\", \"rt\", \"ti\", \"ie\", \"et\", \"th\",\n                       \"qu\", \"ua\", \"ar\", \"ra\", \"an\", \"nt\", \"ti\", \"ix\", \"xx\", \"xx\", \"xe\",\n                       \"cu\", \"ua\", \"ad\", \"dr\", \"ra\", \"ag\", \"gs\", \"si\", \"ix\", \"xx\", \"xx\", \"xs\", \"si\", \"io\"});\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testAnalyzerFactory().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testAnalyzerFactory().mjava","sourceNew":"  public void testAnalyzerFactory() throws Exception {\n    String text = \"Fortieth, Quarantième, Cuadragésimo\";\n    Benchmark benchmark = execBenchmark(getAnalyzerFactoryConfig\n        (\"ascii folded, pattern replaced, standard tokenized, downcased, bigrammed.'analyzer'\",\n         \"positionIncrementGap:100,offsetGap:1111,\"\n         +\"MappingCharFilter(mapping:'test-mapping-ISOLatin1Accent-partial.txt'),\"\n         +\"PatternReplaceCharFilterFactory(pattern:'e(\\\\\\\\\\\\\\\\S*)m',replacement:\\\"$1xxx$1\\\"),\"\n         +\"StandardTokenizer,LowerCaseFilter,NGramTokenFilter(minGramSize:2,maxGramSize:2)\"));\n    BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(), text,\n        new String[] { \"fo\", \"or\", \"rt\", \"ti\", \"ie\", \"et\", \"th\",\n                       \"qu\", \"ua\", \"ar\", \"ra\", \"an\", \"nt\", \"ti\", \"ix\", \"xx\", \"xx\", \"xe\",\n                       \"cu\", \"ua\", \"ad\", \"dr\", \"ra\", \"ag\", \"gs\", \"si\", \"ix\", \"xx\", \"xx\", \"xs\", \"si\", \"io\"});\n  }\n\n","sourceOld":"  public void testAnalyzerFactory() throws Exception {\n    String text = \"Fortieth, Quarantième, Cuadragésimo\";\n    Benchmark benchmark = execBenchmark(getAnalyzerFactoryConfig\n        (\"ascii folded, pattern replaced, standard tokenized, downcased, bigrammed.'analyzer'\",\n         \"positionIncrementGap:100,offsetGap:1111,\"\n         +\"MappingCharFilter(mapping:'test-mapping-ISOLatin1Accent-partial.txt'),\"\n         +\"PatternReplaceCharFilterFactory(pattern:'e(\\\\\\\\\\\\\\\\S*)m',replacement:\\\"$1xxx$1\\\"),\"\n         +\"StandardTokenizer,LowerCaseFilter,NGramTokenFilter(minGramSize:2,maxGramSize:2)\"));\n    BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(), text,\n        new String[] { \"fo\", \"or\", \"rt\", \"ti\", \"ie\", \"et\", \"th\",\n                       \"qu\", \"ua\", \"ar\", \"ra\", \"an\", \"nt\", \"ti\", \"ix\", \"xx\", \"xx\", \"xe\",\n                       \"cu\", \"ua\", \"ad\", \"dr\", \"ra\", \"ag\", \"gs\", \"si\", \"ix\", \"xx\", \"xx\", \"xs\", \"si\", \"io\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testAnalyzerFactory().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testAnalyzerFactory().mjava","sourceNew":"  public void testAnalyzerFactory() throws Exception {\n    String text = \"Fortieth, Quarantième, Cuadragésimo\";\n    Benchmark benchmark = execBenchmark(getAnalyzerFactoryConfig\n        (\"ascii folded, pattern replaced, standard tokenized, downcased, bigrammed.'analyzer'\",\n         \"positionIncrementGap:100,offsetGap:1111,\"\n         +\"MappingCharFilter(mapping:'test-mapping-ISOLatin1Accent-partial.txt'),\"\n         +\"PatternReplaceCharFilterFactory(pattern:'e(\\\\\\\\\\\\\\\\S*)m',replacement:\\\"$1xxx$1\\\"),\"\n         +\"StandardTokenizer,LowerCaseFilter,NGramTokenFilter(minGramSize:2,maxGramSize:2)\"));\n    BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(), text,\n        new String[] { \"fo\", \"or\", \"rt\", \"ti\", \"ie\", \"et\", \"th\",\n                       \"qu\", \"ua\", \"ar\", \"ra\", \"an\", \"nt\", \"ti\", \"ix\", \"xx\", \"xx\", \"xe\",\n                       \"cu\", \"ua\", \"ad\", \"dr\", \"ra\", \"ag\", \"gs\", \"si\", \"ix\", \"xx\", \"xx\", \"xs\", \"si\", \"io\"});\n  }\n\n","sourceOld":"  public void testAnalyzerFactory() throws Exception {\n    String text = \"Fortieth, Quarantième, Cuadragésimo\";\n    Benchmark benchmark = execBenchmark(getAnalyzerFactoryConfig\n        (\"ascii folded, pattern replaced, standard tokenized, downcased, bigrammed.'analyzer'\",\n         \"positionIncrementGap:100,offsetGap:1111,\"\n         +\"MappingCharFilter(mapping:'test-mapping-ISOLatin1Accent-partial.txt'),\"\n         +\"PatternReplaceCharFilterFactory(pattern:'e(\\\\\\\\\\\\\\\\S*)m',replacement:\\\"$1xxx$1\\\"),\"\n         +\"StandardTokenizer,LowerCaseFilter,NGramTokenFilter(minGramSize:2,maxGramSize:2)\"));\n    BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(), text,\n        new String[] { \"fo\", \"or\", \"rt\", \"ti\", \"ie\", \"et\", \"th\",\n                       \"qu\", \"ua\", \"ar\", \"ra\", \"an\", \"nt\", \"ti\", \"ix\", \"xx\", \"xx\", \"xe\",\n                       \"cu\", \"ua\", \"ad\", \"dr\", \"ra\", \"ag\", \"gs\", \"si\", \"ix\", \"xx\", \"xx\", \"xs\", \"si\", \"io\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7bb889a868ab9d608bde8136f42ed7234a3a927b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["7bb889a868ab9d608bde8136f42ed7234a3a927b"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["7bb889a868ab9d608bde8136f42ed7234a3a927b"],"de522d9303bd67c8473a269a1319125d1f3700e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7bb889a868ab9d608bde8136f42ed7234a3a927b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19275ba31e621f6da1b83bf13af75233876fd3d4"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7bb889a868ab9d608bde8136f42ed7234a3a927b","de522d9303bd67c8473a269a1319125d1f3700e0"],"7bb889a868ab9d608bde8136f42ed7234a3a927b":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4","de522d9303bd67c8473a269a1319125d1f3700e0"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"de522d9303bd67c8473a269a1319125d1f3700e0":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","de522d9303bd67c8473a269a1319125d1f3700e0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}