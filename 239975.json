{"path":"lucene/core/src/java/org/apache/lucene/search/NGramPhraseQuery#rewrite(IndexReader).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NGramPhraseQuery#rewrite(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/NGramPhraseQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if(getSlop() != 0) return super.rewrite(reader);\n    \n    // check whether optimizable or not\n    if(n < 2 || // non-overlap n-gram cannot be optimized\n        getTerms().length < 3)  // too short to optimize\n      return super.rewrite(reader);\n\n    // check all posIncrement is 1\n    // if not, cannot optimize\n    int[] positions = getPositions();\n    Term[] terms = getTerms();\n    int prevPosition = positions[0];\n    for(int i = 1; i < positions.length; i++){\n      int pos = positions[i];\n      if(prevPosition + 1 != pos) return super.rewrite(reader);\n      prevPosition = pos;\n    }\n\n    // now create the new optimized phrase query for n-gram\n    PhraseQuery optimized = new PhraseQuery();\n    int pos = 0;\n    final int lastPos = terms.length - 1;\n    for(int i = 0; i < terms.length; i++){\n      if(pos % n == 0 || pos >= lastPos){\n        optimized.add(terms[i], positions[i]);\n      }\n      pos++;\n    }\n    \n    return optimized;\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if(getSlop() != 0) return super.rewrite(reader);\n    \n    // check whether optimizable or not\n    if(n < 2 || // non-overlap n-gram cannot be optimized\n        getTerms().length < 3)  // too short to optimize\n      return super.rewrite(reader);\n\n    // check all posIncrement is 1\n    // if not, cannot optimize\n    int[] positions = getPositions();\n    Term[] terms = getTerms();\n    int prevPosition = positions[0];\n    for(int i = 1; i < positions.length; i++){\n      int pos = positions[i];\n      if(prevPosition + 1 != pos) return super.rewrite(reader);\n      prevPosition = pos;\n    }\n\n    // now create the new optimized phrase query for n-gram\n    PhraseQuery optimized = new PhraseQuery();\n    int pos = 0;\n    final int lastPos = terms.length - 1;\n    for(int i = 0; i < terms.length; i++){\n      if(pos % n == 0 || pos >= lastPos){\n        optimized.add(terms[i], positions[i]);\n      }\n      pos++;\n    }\n    \n    return optimized;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3288ebc870008aec299da8bf885444c3a5ba2af9","date":1367449185,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NGramPhraseQuery#rewrite(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/NGramPhraseQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if(getSlop() != 0) return super.rewrite(reader);\n    \n    // check whether optimizable or not\n    if(n < 2 || // non-overlap n-gram cannot be optimized\n        getTerms().length < 3)  // too short to optimize\n      return super.rewrite(reader);\n\n    // check all posIncrement is 1\n    // if not, cannot optimize\n    int[] positions = getPositions();\n    Term[] terms = getTerms();\n    int prevPosition = positions[0];\n    for(int i = 1; i < positions.length; i++){\n      int pos = positions[i];\n      if(prevPosition + 1 != pos) return super.rewrite(reader);\n      prevPosition = pos;\n    }\n\n    // now create the new optimized phrase query for n-gram\n    PhraseQuery optimized = new PhraseQuery();\n    optimized.setBoost(getBoost());\n    int pos = 0;\n    final int lastPos = terms.length - 1;\n    for(int i = 0; i < terms.length; i++){\n      if(pos % n == 0 || pos >= lastPos){\n        optimized.add(terms[i], positions[i]);\n      }\n      pos++;\n    }\n    \n    return optimized;\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if(getSlop() != 0) return super.rewrite(reader);\n    \n    // check whether optimizable or not\n    if(n < 2 || // non-overlap n-gram cannot be optimized\n        getTerms().length < 3)  // too short to optimize\n      return super.rewrite(reader);\n\n    // check all posIncrement is 1\n    // if not, cannot optimize\n    int[] positions = getPositions();\n    Term[] terms = getTerms();\n    int prevPosition = positions[0];\n    for(int i = 1; i < positions.length; i++){\n      int pos = positions[i];\n      if(prevPosition + 1 != pos) return super.rewrite(reader);\n      prevPosition = pos;\n    }\n\n    // now create the new optimized phrase query for n-gram\n    PhraseQuery optimized = new PhraseQuery();\n    int pos = 0;\n    final int lastPos = terms.length - 1;\n    for(int i = 0; i < terms.length; i++){\n      if(pos % n == 0 || pos >= lastPos){\n        optimized.add(terms[i], positions[i]);\n      }\n      pos++;\n    }\n    \n    return optimized;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9e1499c5d26c936238506df90a3c02c76707722","date":1434449920,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NGramPhraseQuery#rewrite(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/NGramPhraseQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    final Term[] terms = phraseQuery.getTerms();\n    final int[] positions = phraseQuery.getPositions();\n\n    boolean isOptimizable = phraseQuery.getSlop() == 0\n        && n >= 2 // non-overlap n-gram cannot be optimized\n        && terms.length >= 3; // short ones can't be optimized\n\n    if (isOptimizable) {\n      for (int i = 1; i < positions.length; ++i) {\n        if (positions[i] != positions[i-1] + 1) {\n          isOptimizable = false;\n          break;\n        }\n      }\n    }\n    \n    if (isOptimizable == false) {\n      return phraseQuery.rewrite(reader);\n    }\n\n    PhraseQuery.Builder builder = new PhraseQuery.Builder();\n    for (int i = 0; i < terms.length; ++i) {\n      if (i % n == 0 || i == terms.length - 1) {\n        builder.add(terms[i], i);\n      }\n    }\n    PhraseQuery rewritten = builder.build();\n    rewritten.setBoost(phraseQuery.getBoost());\n    return rewritten;\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if(getSlop() != 0) return super.rewrite(reader);\n    \n    // check whether optimizable or not\n    if(n < 2 || // non-overlap n-gram cannot be optimized\n        getTerms().length < 3)  // too short to optimize\n      return super.rewrite(reader);\n\n    // check all posIncrement is 1\n    // if not, cannot optimize\n    int[] positions = getPositions();\n    Term[] terms = getTerms();\n    int prevPosition = positions[0];\n    for(int i = 1; i < positions.length; i++){\n      int pos = positions[i];\n      if(prevPosition + 1 != pos) return super.rewrite(reader);\n      prevPosition = pos;\n    }\n\n    // now create the new optimized phrase query for n-gram\n    PhraseQuery optimized = new PhraseQuery();\n    optimized.setBoost(getBoost());\n    int pos = 0;\n    final int lastPos = terms.length - 1;\n    for(int i = 0; i < terms.length; i++){\n      if(pos % n == 0 || pos >= lastPos){\n        optimized.add(terms[i], positions[i]);\n      }\n      pos++;\n    }\n    \n    return optimized;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NGramPhraseQuery#rewrite(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/NGramPhraseQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    final Term[] terms = phraseQuery.getTerms();\n    final int[] positions = phraseQuery.getPositions();\n\n    boolean isOptimizable = phraseQuery.getSlop() == 0\n        && n >= 2 // non-overlap n-gram cannot be optimized\n        && terms.length >= 3; // short ones can't be optimized\n\n    if (isOptimizable) {\n      for (int i = 1; i < positions.length; ++i) {\n        if (positions[i] != positions[i-1] + 1) {\n          isOptimizable = false;\n          break;\n        }\n      }\n    }\n    \n    if (isOptimizable == false) {\n      return phraseQuery.rewrite(reader);\n    }\n\n    PhraseQuery.Builder builder = new PhraseQuery.Builder();\n    for (int i = 0; i < terms.length; ++i) {\n      if (i % n == 0 || i == terms.length - 1) {\n        builder.add(terms[i], i);\n      }\n    }\n    return builder.build();\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    final Term[] terms = phraseQuery.getTerms();\n    final int[] positions = phraseQuery.getPositions();\n\n    boolean isOptimizable = phraseQuery.getSlop() == 0\n        && n >= 2 // non-overlap n-gram cannot be optimized\n        && terms.length >= 3; // short ones can't be optimized\n\n    if (isOptimizable) {\n      for (int i = 1; i < positions.length; ++i) {\n        if (positions[i] != positions[i-1] + 1) {\n          isOptimizable = false;\n          break;\n        }\n      }\n    }\n    \n    if (isOptimizable == false) {\n      return phraseQuery.rewrite(reader);\n    }\n\n    PhraseQuery.Builder builder = new PhraseQuery.Builder();\n    for (int i = 0; i < terms.length; ++i) {\n      if (i % n == 0 || i == terms.length - 1) {\n        builder.add(terms[i], i);\n      }\n    }\n    PhraseQuery rewritten = builder.build();\n    rewritten.setBoost(phraseQuery.getBoost());\n    return rewritten;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9e1499c5d26c936238506df90a3c02c76707722":["3288ebc870008aec299da8bf885444c3a5ba2af9"],"3288ebc870008aec299da8bf885444c3a5ba2af9":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["e9e1499c5d26c936238506df90a3c02c76707722"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dfdf766e55e943d942055d7de53c7ad6bc45283"]},"commit2Childs":{"e9e1499c5d26c936238506df90a3c02c76707722":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"3288ebc870008aec299da8bf885444c3a5ba2af9":["e9e1499c5d26c936238506df90a3c02c76707722"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3288ebc870008aec299da8bf885444c3a5ba2af9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}