{"path":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testMixedRangeAndNonRangeTaxonomy().mjava","commits":[{"id":"4edc984f0f4ac77c37e48ace2932f780f888453c","date":1388475218,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testMixedRangeAndNonRangeTaxonomy().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestRangeFacetCounts#testMixedRangeAndNonRangeTaxonomy().mjava","sourceNew":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongField(\"field\", l, Field.Store.NO));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r);\n\n    DrillSideways ds = new DrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          FacetsCollector dimFC = drillDowns;\n          FacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<String,Facets>();\n          byDim.put(\"field\",\n                    new LongRangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=16 childCount=5\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", NumericRangeQuery.newLongRange(\"field\", 0L, 10L, true, true));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=11 childCount=2\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    IOUtils.close(tw, tr, td, w, r, d);\n  }\n\n","sourceOld":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongField(\"field\", l, Field.Store.NO));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r);\n\n    DrillSideways ds = new DrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          FacetsCollector dimFC = drillDowns;\n          FacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<String,Facets>();\n          byDim.put(\"field\",\n                    new LongRangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=16 childCount=5\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", NumericRangeQuery.newLongRange(\"field\", 0L, 10L, true, true));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=11 childCount=2\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    IOUtils.close(tw, tr, td, w, r, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testMixedRangeAndNonRangeTaxonomy().mjava","pathOld":"/dev/null","sourceNew":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongField(\"field\", l, Field.Store.NO));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r);\n\n    DrillSideways ds = new DrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          FacetsCollector dimFC = drillDowns;\n          FacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<String,Facets>();\n          byDim.put(\"field\",\n                    new LongRangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=16 childCount=5\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", NumericRangeQuery.newLongRange(\"field\", 0L, 10L, true, true));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=11 childCount=2\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    IOUtils.close(tw, tr, td, w, r, d);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"40640359164f629dd440a47df2e145d084ce9645","date":1391711808,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testMixedRangeAndNonRangeTaxonomy().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testMixedRangeAndNonRangeTaxonomy().mjava","sourceNew":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongField(\"field\", l, Field.Store.NO));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + s);\n    }\n\n    DrillSideways ds = new DrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          FacetsCollector dimFC = drillDowns;\n          FacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<String,Facets>();\n          byDim.put(\"field\",\n                    new LongRangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=16 childCount=5\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", NumericRangeQuery.newLongRange(\"field\", 0L, 10L, true, true));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=11 childCount=2\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    IOUtils.close(tw, tr, td, w, r, d);\n  }\n\n","sourceOld":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongField(\"field\", l, Field.Store.NO));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r);\n\n    DrillSideways ds = new DrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          FacetsCollector dimFC = drillDowns;\n          FacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<String,Facets>();\n          byDim.put(\"field\",\n                    new LongRangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=16 childCount=5\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", NumericRangeQuery.newLongRange(\"field\", 0L, 10L, true, true));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=11 childCount=2\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    IOUtils.close(tw, tr, td, w, r, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testMixedRangeAndNonRangeTaxonomy().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testMixedRangeAndNonRangeTaxonomy().mjava","sourceNew":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongField(\"field\", l, Field.Store.NO));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + s);\n    }\n\n    DrillSideways ds = new DrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          FacetsCollector dimFC = drillDowns;\n          FacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<>();\n          byDim.put(\"field\",\n                    new LongRangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=16 childCount=5\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", NumericRangeQuery.newLongRange(\"field\", 0L, 10L, true, true));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=11 childCount=2\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    IOUtils.close(tw, tr, td, w, r, d);\n  }\n\n","sourceOld":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongField(\"field\", l, Field.Store.NO));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + s);\n    }\n\n    DrillSideways ds = new DrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          FacetsCollector dimFC = drillDowns;\n          FacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<String,Facets>();\n          byDim.put(\"field\",\n                    new LongRangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=16 childCount=5\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", NumericRangeQuery.newLongRange(\"field\", 0L, 10L, true, true));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=11 childCount=2\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    IOUtils.close(tw, tr, td, w, r, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testMixedRangeAndNonRangeTaxonomy().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testMixedRangeAndNonRangeTaxonomy().mjava","sourceNew":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongField(\"field\", l, Field.Store.NO));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + s);\n    }\n\n    DrillSideways ds = new DrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          FacetsCollector dimFC = drillDowns;\n          FacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<>();\n          byDim.put(\"field\",\n                    new LongRangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=16 childCount=5\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", NumericRangeQuery.newLongRange(\"field\", 0L, 10L, true, true));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=11 childCount=2\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    w.shutdown();\n    IOUtils.close(tw, tr, td, r, d);\n  }\n\n","sourceOld":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongField(\"field\", l, Field.Store.NO));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + s);\n    }\n\n    DrillSideways ds = new DrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          FacetsCollector dimFC = drillDowns;\n          FacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<>();\n          byDim.put(\"field\",\n                    new LongRangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=16 childCount=5\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", NumericRangeQuery.newLongRange(\"field\", 0L, 10L, true, true));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=11 childCount=2\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    IOUtils.close(tw, tr, td, w, r, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testMixedRangeAndNonRangeTaxonomy().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testMixedRangeAndNonRangeTaxonomy().mjava","sourceNew":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongField(\"field\", l, Field.Store.NO));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + s);\n    }\n\n    DrillSideways ds = new DrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          FacetsCollector dimFC = drillDowns;\n          FacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<>();\n          byDim.put(\"field\",\n                    new LongRangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=16 childCount=5\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", NumericRangeQuery.newLongRange(\"field\", 0L, 10L, true, true));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=11 childCount=2\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    w.close();\n    IOUtils.close(tw, tr, td, r, d);\n  }\n\n","sourceOld":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongField(\"field\", l, Field.Store.NO));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + s);\n    }\n\n    DrillSideways ds = new DrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          FacetsCollector dimFC = drillDowns;\n          FacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<>();\n          byDim.put(\"field\",\n                    new LongRangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=16 childCount=5\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", NumericRangeQuery.newLongRange(\"field\", 0L, 10L, true, true));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=11 childCount=2\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    w.shutdown();\n    IOUtils.close(tw, tr, td, r, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testMixedRangeAndNonRangeTaxonomy().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testMixedRangeAndNonRangeTaxonomy().mjava","sourceNew":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new DimensionalLongField(\"field\", l));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + s);\n    }\n\n    DrillSideways ds = new DrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          FacetsCollector dimFC = drillDowns;\n          FacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<>();\n          byDim.put(\"field\",\n                    new LongRangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=16 childCount=5\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", DimensionalRangeQuery.new1DLongRange(\"field\", 0L, true, 10L, true));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=11 childCount=2\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    w.close();\n    IOUtils.close(tw, tr, td, r, d);\n  }\n\n","sourceOld":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongField(\"field\", l, Field.Store.NO));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + s);\n    }\n\n    DrillSideways ds = new DrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          FacetsCollector dimFC = drillDowns;\n          FacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<>();\n          byDim.put(\"field\",\n                    new LongRangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=16 childCount=5\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", NumericRangeQuery.newLongRange(\"field\", 0L, 10L, true, true));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=11 childCount=2\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    w.close();\n    IOUtils.close(tw, tr, td, r, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testMixedRangeAndNonRangeTaxonomy().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testMixedRangeAndNonRangeTaxonomy().mjava","sourceNew":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongPoint(\"field\", l));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + s);\n    }\n\n    DrillSideways ds = new DrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          FacetsCollector dimFC = drillDowns;\n          FacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<>();\n          byDim.put(\"field\",\n                    new LongRangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=16 childCount=5\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", PointRangeQuery.new1DLongRange(\"field\", 0L, true, 10L, true));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=11 childCount=2\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    w.close();\n    IOUtils.close(tw, tr, td, r, d);\n  }\n\n","sourceOld":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new DimensionalLongField(\"field\", l));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + s);\n    }\n\n    DrillSideways ds = new DrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          FacetsCollector dimFC = drillDowns;\n          FacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<>();\n          byDim.put(\"field\",\n                    new LongRangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=16 childCount=5\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", DimensionalRangeQuery.new1DLongRange(\"field\", 0L, true, 10L, true));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=11 childCount=2\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    w.close();\n    IOUtils.close(tw, tr, td, r, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86cab68ee900a31d093b114182b488ea8e85c59d","date":1456171815,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testMixedRangeAndNonRangeTaxonomy().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testMixedRangeAndNonRangeTaxonomy().mjava","sourceNew":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongPoint(\"field\", l));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + s);\n    }\n\n    DrillSideways ds = new DrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          FacetsCollector dimFC = drillDowns;\n          FacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<>();\n          byDim.put(\"field\",\n                    new LongRangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=16 childCount=5\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", PointRangeQuery.newLongRange(\"field\", 0L, true, 10L, true));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=11 childCount=2\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    w.close();\n    IOUtils.close(tw, tr, td, r, d);\n  }\n\n","sourceOld":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongPoint(\"field\", l));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + s);\n    }\n\n    DrillSideways ds = new DrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          FacetsCollector dimFC = drillDowns;\n          FacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<>();\n          byDim.put(\"field\",\n                    new LongRangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=16 childCount=5\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", PointRangeQuery.new1DLongRange(\"field\", 0L, true, 10L, true));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=11 childCount=2\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    w.close();\n    IOUtils.close(tw, tr, td, r, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"419a8f52c6635419beb951255cacbbb281044c57","date":1456189353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testMixedRangeAndNonRangeTaxonomy().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testMixedRangeAndNonRangeTaxonomy().mjava","sourceNew":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongPoint(\"field\", l));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + s);\n    }\n\n    DrillSideways ds = new DrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          FacetsCollector dimFC = drillDowns;\n          FacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<>();\n          byDim.put(\"field\",\n                    new LongRangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=16 childCount=5\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", PointRangeQuery.newLongRange(\"field\", 0L, true, 10L, true));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=11 childCount=2\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    w.close();\n    IOUtils.close(tw, tr, td, r, d);\n  }\n\n","sourceOld":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongPoint(\"field\", l));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + s);\n    }\n\n    DrillSideways ds = new DrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          FacetsCollector dimFC = drillDowns;\n          FacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<>();\n          byDim.put(\"field\",\n                    new LongRangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=16 childCount=5\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", PointRangeQuery.new1DLongRange(\"field\", 0L, true, 10L, true));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=11 childCount=2\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    w.close();\n    IOUtils.close(tw, tr, td, r, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3104a6ba367dfb690806b227c5ef17c42c6107b","date":1456265035,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testMixedRangeAndNonRangeTaxonomy().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testMixedRangeAndNonRangeTaxonomy().mjava","sourceNew":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongPoint(\"field\", l));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + s);\n    }\n\n    DrillSideways ds = new DrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          FacetsCollector dimFC = drillDowns;\n          FacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<>();\n          byDim.put(\"field\",\n                    new LongRangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=16 childCount=5\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", LongPoint.newRangeQuery(\"field\", 0L, true, 10L, true));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=11 childCount=2\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    w.close();\n    IOUtils.close(tw, tr, td, r, d);\n  }\n\n","sourceOld":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongPoint(\"field\", l));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + s);\n    }\n\n    DrillSideways ds = new DrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          FacetsCollector dimFC = drillDowns;\n          FacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<>();\n          byDim.put(\"field\",\n                    new LongRangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=16 childCount=5\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", PointRangeQuery.newLongRange(\"field\", 0L, true, 10L, true));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=11 childCount=2\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    w.close();\n    IOUtils.close(tw, tr, td, r, d);\n  }\n\n","bugFix":null,"bugIntro":["1800b996d8677670482a071dcb7a48b08c423ace"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","date":1456265720,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testMixedRangeAndNonRangeTaxonomy().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testMixedRangeAndNonRangeTaxonomy().mjava","sourceNew":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongPoint(\"field\", l));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + s);\n    }\n\n    DrillSideways ds = new DrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          FacetsCollector dimFC = drillDowns;\n          FacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<>();\n          byDim.put(\"field\",\n                    new LongRangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=16 childCount=5\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", LongPoint.newRangeQuery(\"field\", 0L, true, 10L, true));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=11 childCount=2\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    w.close();\n    IOUtils.close(tw, tr, td, r, d);\n  }\n\n","sourceOld":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongPoint(\"field\", l));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + s);\n    }\n\n    DrillSideways ds = new DrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          FacetsCollector dimFC = drillDowns;\n          FacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<>();\n          byDim.put(\"field\",\n                    new LongRangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=16 childCount=5\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", PointRangeQuery.newLongRange(\"field\", 0L, true, 10L, true));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=11 childCount=2\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    w.close();\n    IOUtils.close(tw, tr, td, r, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5296efc4b319f5647b606629c093a94b23692c6","date":1456267155,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testMixedRangeAndNonRangeTaxonomy().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testMixedRangeAndNonRangeTaxonomy().mjava","sourceNew":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongPoint(\"field\", l));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + s);\n    }\n\n    DrillSideways ds = new DrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          FacetsCollector dimFC = drillDowns;\n          FacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<>();\n          byDim.put(\"field\",\n                    new LongRangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=16 childCount=5\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", LongPoint.newRangeQuery(\"field\", 0L, true, 10L, true));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=11 childCount=2\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    w.close();\n    IOUtils.close(tw, tr, td, r, d);\n  }\n\n","sourceOld":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongPoint(\"field\", l));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + s);\n    }\n\n    DrillSideways ds = new DrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          FacetsCollector dimFC = drillDowns;\n          FacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<>();\n          byDim.put(\"field\",\n                    new LongRangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=16 childCount=5\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", PointRangeQuery.newLongRange(\"field\", 0L, true, 10L, true));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=11 childCount=2\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    w.close();\n    IOUtils.close(tw, tr, td, r, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","date":1456306182,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testMixedRangeAndNonRangeTaxonomy().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testMixedRangeAndNonRangeTaxonomy().mjava","sourceNew":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongPoint(\"field\", l));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + s);\n    }\n\n    DrillSideways ds = new DrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          FacetsCollector dimFC = drillDowns;\n          FacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<>();\n          byDim.put(\"field\",\n                    new LongRangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=16 childCount=5\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", LongPoint.newRangeQuery(\"field\", 0L, true, 10L, true));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=11 childCount=2\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    w.close();\n    IOUtils.close(tw, tr, td, r, d);\n  }\n\n","sourceOld":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongPoint(\"field\", l));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + s);\n    }\n\n    DrillSideways ds = new DrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          FacetsCollector dimFC = drillDowns;\n          FacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<>();\n          byDim.put(\"field\",\n                    new LongRangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=16 childCount=5\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", PointRangeQuery.newLongRange(\"field\", 0L, true, 10L, true));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=11 childCount=2\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    w.close();\n    IOUtils.close(tw, tr, td, r, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f","date":1456936072,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testMixedRangeAndNonRangeTaxonomy().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testMixedRangeAndNonRangeTaxonomy().mjava","sourceNew":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongPoint(\"field\", l));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r, false);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + s);\n    }\n\n    DrillSideways ds = new DrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          FacetsCollector dimFC = drillDowns;\n          FacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<>();\n          byDim.put(\"field\",\n                    new LongRangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=16 childCount=5\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", LongPoint.newRangeQuery(\"field\", 0L, true, 10L, true));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=11 childCount=2\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    w.close();\n    IOUtils.close(tw, tr, td, r, d);\n  }\n\n","sourceOld":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongPoint(\"field\", l));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + s);\n    }\n\n    DrillSideways ds = new DrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          FacetsCollector dimFC = drillDowns;\n          FacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<>();\n          byDim.put(\"field\",\n                    new LongRangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=16 childCount=5\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", LongPoint.newRangeQuery(\"field\", 0L, true, 10L, true));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=11 childCount=2\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    w.close();\n    IOUtils.close(tw, tr, td, r, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1800b996d8677670482a071dcb7a48b08c423ace","date":1456955558,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testMixedRangeAndNonRangeTaxonomy().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testMixedRangeAndNonRangeTaxonomy().mjava","sourceNew":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongPoint(\"field\", l));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r, false);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + s);\n    }\n\n    DrillSideways ds = new DrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          FacetsCollector dimFC = drillDowns;\n          FacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<>();\n          byDim.put(\"field\",\n                    new LongRangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=16 childCount=5\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", LongPoint.newRangeQuery(\"field\", 0L, 10L));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=11 childCount=2\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    w.close();\n    IOUtils.close(tw, tr, td, r, d);\n  }\n\n","sourceOld":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongPoint(\"field\", l));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r, false);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + s);\n    }\n\n    DrillSideways ds = new DrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          FacetsCollector dimFC = drillDowns;\n          FacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<>();\n          byDim.put(\"field\",\n                    new LongRangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=16 childCount=5\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", LongPoint.newRangeQuery(\"field\", 0L, true, 10L, true));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=11 childCount=2\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    w.close();\n    IOUtils.close(tw, tr, td, r, d);\n  }\n\n","bugFix":["d3104a6ba367dfb690806b227c5ef17c42c6107b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c422e924212367b334b4938f1fd3e44438e88c40","date":1456962933,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testMixedRangeAndNonRangeTaxonomy().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testMixedRangeAndNonRangeTaxonomy().mjava","sourceNew":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongPoint(\"field\", l));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r, false);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + s);\n    }\n\n    DrillSideways ds = new DrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          FacetsCollector dimFC = drillDowns;\n          FacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<>();\n          byDim.put(\"field\",\n                    new LongRangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=16 childCount=5\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", LongPoint.newRangeQuery(\"field\", 0L, 10L));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=11 childCount=2\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    w.close();\n    IOUtils.close(tw, tr, td, r, d);\n  }\n\n","sourceOld":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongPoint(\"field\", l));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r, false);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + s);\n    }\n\n    DrillSideways ds = new DrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          FacetsCollector dimFC = drillDowns;\n          FacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<>();\n          byDim.put(\"field\",\n                    new LongRangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=16 childCount=5\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", LongPoint.newRangeQuery(\"field\", 0L, true, 10L, true));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=11 childCount=2\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    w.close();\n    IOUtils.close(tw, tr, td, r, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testMixedRangeAndNonRangeTaxonomy().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testMixedRangeAndNonRangeTaxonomy().mjava","sourceNew":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongPoint(\"field\", l));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r, false);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + s);\n    }\n\n    DrillSideways ds = new DrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          FacetsCollector dimFC = drillDowns;\n          FacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<>();\n          byDim.put(\"field\",\n                    new LongRangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=16 childCount=5\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", LongPoint.newRangeQuery(\"field\", 0L, 10L));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=11 childCount=2\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    w.close();\n    IOUtils.close(tw, tr, td, r, d);\n  }\n\n","sourceOld":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongPoint(\"field\", l));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + s);\n    }\n\n    DrillSideways ds = new DrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          FacetsCollector dimFC = drillDowns;\n          FacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<>();\n          byDim.put(\"field\",\n                    new LongRangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=16 childCount=5\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", LongPoint.newRangeQuery(\"field\", 0L, true, 10L, true));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=11 childCount=2\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    w.close();\n    IOUtils.close(tw, tr, td, r, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testMixedRangeAndNonRangeTaxonomy().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testMixedRangeAndNonRangeTaxonomy().mjava","sourceNew":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongPoint(\"field\", l));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r, false);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + s);\n    }\n\n    DrillSideways ds = new DrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          FacetsCollector dimFC = drillDowns;\n          FacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<>();\n          byDim.put(\"field\",\n                    new LongRangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits.value);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits.value);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=16 childCount=5\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", LongPoint.newRangeQuery(\"field\", 0L, 10L));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits.value);\n    assertEquals(\"dim=dim path=[] value=11 childCount=2\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    w.close();\n    IOUtils.close(tw, tr, td, r, d);\n  }\n\n","sourceOld":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongPoint(\"field\", l));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r, false);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + s);\n    }\n\n    DrillSideways ds = new DrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          FacetsCollector dimFC = drillDowns;\n          FacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<>();\n          byDim.put(\"field\",\n                    new LongRangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=16 childCount=5\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", LongPoint.newRangeQuery(\"field\", 0L, 10L));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits);\n    assertEquals(\"dim=dim path=[] value=11 childCount=2\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    w.close();\n    IOUtils.close(tw, tr, td, r, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132e4d2b791f182f095041c89860f21eb11c31a5","date":1600099601,"type":3,"author":"Julie Tibshirani","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testMixedRangeAndNonRangeTaxonomy().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testMixedRangeAndNonRangeTaxonomy().mjava","sourceNew":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongPoint(\"field\", l));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r, false, false);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + s);\n    }\n\n    DrillSideways ds = new DrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          FacetsCollector dimFC = drillDowns;\n          FacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<>();\n          byDim.put(\"field\",\n                    new LongRangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits.value);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits.value);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=16 childCount=5\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", LongPoint.newRangeQuery(\"field\", 0L, 10L));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits.value);\n    assertEquals(\"dim=dim path=[] value=11 childCount=2\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    w.close();\n    IOUtils.close(tw, tr, td, r, d);\n  }\n\n","sourceOld":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongPoint(\"field\", l));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r, false);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + s);\n    }\n\n    DrillSideways ds = new DrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          FacetsCollector dimFC = drillDowns;\n          FacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<>();\n          byDim.put(\"field\",\n                    new LongRangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits.value);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits.value);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=16 childCount=5\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", LongPoint.newRangeQuery(\"field\", 0L, 10L));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits.value);\n    assertEquals(\"dim=dim path=[] value=11 childCount=2\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    w.close();\n    IOUtils.close(tw, tr, td, r, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"680b6449f09827f58fe987aff279e014c311d966","date":1600247985,"type":3,"author":"noblepaul","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testMixedRangeAndNonRangeTaxonomy().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeFacetCounts#testMixedRangeAndNonRangeTaxonomy().mjava","sourceNew":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongPoint(\"field\", l));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r, false, false);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + s);\n    }\n\n    DrillSideways ds = new DrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          FacetsCollector dimFC = drillDowns;\n          FacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<>();\n          byDim.put(\"field\",\n                    new LongRangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits.value);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits.value);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=16 childCount=5\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", LongPoint.newRangeQuery(\"field\", 0L, 10L));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits.value);\n    assertEquals(\"dim=dim path=[] value=11 childCount=2\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    w.close();\n    IOUtils.close(tw, tr, td, r, d);\n  }\n\n","sourceOld":"  /** Tests single request that mixes Range and non-Range\n   *  faceting, with DrillSideways and taxonomy. */\n  public void testMixedRangeAndNonRangeTaxonomy() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Directory td = newDirectory();\n    DirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(td, IndexWriterConfig.OpenMode.CREATE);\n\n    FacetsConfig config = new FacetsConfig();\n\n    for (long l = 0; l < 100; l++) {\n      Document doc = new Document();\n      // For computing range facet counts:\n      doc.add(new NumericDocValuesField(\"field\", l));\n      // For drill down by numeric range:\n      doc.add(new LongPoint(\"field\", l));\n\n      if ((l&3) == 0) {\n        doc.add(new FacetField(\"dim\", \"a\"));\n      } else {\n        doc.add(new FacetField(\"dim\", \"b\"));\n      }\n      w.addDocument(config.build(tw, doc));\n    }\n\n    final IndexReader r = w.getReader();\n\n    final TaxonomyReader tr = new DirectoryTaxonomyReader(tw);\n\n    IndexSearcher s = newSearcher(r, false);\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + s);\n    }\n\n    DrillSideways ds = new DrillSideways(s, config, tr) {\n\n        @Override\n        protected Facets buildFacetsResult(FacetsCollector drillDowns, FacetsCollector[] drillSideways, String[] drillSidewaysDims) throws IOException {        \n          FacetsCollector dimFC = drillDowns;\n          FacetsCollector fieldFC = drillDowns;\n          if (drillSideways != null) {\n            for(int i=0;i<drillSideways.length;i++) {\n              String dim = drillSidewaysDims[i];\n              if (dim.equals(\"field\")) {\n                fieldFC = drillSideways[i];\n              } else {\n                dimFC = drillSideways[i];\n              }\n            }\n          }\n\n          Map<String,Facets> byDim = new HashMap<>();\n          byDim.put(\"field\",\n                    new LongRangeFacetCounts(\"field\", fieldFC,\n                          new LongRange(\"less than 10\", 0L, true, 10L, false),\n                          new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                          new LongRange(\"over 90\", 90L, false, 100L, false),\n                          new LongRange(\"90 or above\", 90L, true, 100L, false),\n                          new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n          byDim.put(\"dim\", getTaxonomyFacetCounts(taxoReader, config, dimFC));\n          return new MultiFacets(byDim, null);\n        }\n\n        @Override\n        protected boolean scoreSubDocsAtOnce() {\n          return random().nextBoolean();\n        }\n      };\n\n    // First search, no drill downs:\n    DrillDownQuery ddq = new DrillDownQuery(config);\n    DrillSidewaysResult dsr = ds.search(null, ddq, 10);\n\n    assertEquals(100, dsr.hits.totalHits.value);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Second search, drill down on dim=b:\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"dim\", \"b\");\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(75, dsr.hits.totalHits.value);\n    assertEquals(\"dim=dim path=[] value=100 childCount=2\\n  b (75)\\n  a (25)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=16 childCount=5\\n  less than 10 (7)\\n  less than or equal to 10 (8)\\n  over 90 (7)\\n  90 or above (8)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n\n    // Third search, drill down on \"less than or equal to 10\":\n    ddq = new DrillDownQuery(config);\n    ddq.add(\"field\", LongPoint.newRangeQuery(\"field\", 0L, 10L));\n    dsr = ds.search(null, ddq, 10);\n\n    assertEquals(11, dsr.hits.totalHits.value);\n    assertEquals(\"dim=dim path=[] value=11 childCount=2\\n  b (8)\\n  a (3)\\n\", dsr.facets.getTopChildren(10, \"dim\").toString());\n    assertEquals(\"dim=field path=[] value=21 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 dsr.facets.getTopChildren(10, \"field\").toString());\n    w.close();\n    IOUtils.close(tw, tr, td, r, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["40640359164f629dd440a47df2e145d084ce9645"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["770342641f7b505eaa8dccdc666158bff2419109"],"4edc984f0f4ac77c37e48ace2932f780f888453c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"419a8f52c6635419beb951255cacbbb281044c57":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","86cab68ee900a31d093b114182b488ea8e85c59d"],"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6":["419a8f52c6635419beb951255cacbbb281044c57","a5296efc4b319f5647b606629c093a94b23692c6"],"40640359164f629dd440a47df2e145d084ce9645":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6"],"770342641f7b505eaa8dccdc666158bff2419109":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"c422e924212367b334b4938f1fd3e44438e88c40":["adc9dc8ef0ce617b940a039fd12f79e8b098cc7f","1800b996d8677670482a071dcb7a48b08c423ace"],"1800b996d8677670482a071dcb7a48b08c423ace":["adc9dc8ef0ce617b940a039fd12f79e8b098cc7f"],"132e4d2b791f182f095041c89860f21eb11c31a5":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"680b6449f09827f58fe987aff279e014c311d966":["83788ad129a5154d5c6562c4e8ce3db48793aada","132e4d2b791f182f095041c89860f21eb11c31a5"],"d3104a6ba367dfb690806b227c5ef17c42c6107b":["419a8f52c6635419beb951255cacbbb281044c57"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5":["419a8f52c6635419beb951255cacbbb281044c57","d3104a6ba367dfb690806b227c5ef17c42c6107b"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4edc984f0f4ac77c37e48ace2932f780f888453c"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a5296efc4b319f5647b606629c093a94b23692c6":["419a8f52c6635419beb951255cacbbb281044c57","d3104a6ba367dfb690806b227c5ef17c42c6107b"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","c422e924212367b334b4938f1fd3e44438e88c40"],"86cab68ee900a31d093b114182b488ea8e85c59d":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["680b6449f09827f58fe987aff279e014c311d966"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["419a8f52c6635419beb951255cacbbb281044c57","86cab68ee900a31d093b114182b488ea8e85c59d"],"4edc984f0f4ac77c37e48ace2932f780f888453c":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"419a8f52c6635419beb951255cacbbb281044c57":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","d3104a6ba367dfb690806b227c5ef17c42c6107b","7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","a5296efc4b319f5647b606629c093a94b23692c6"],"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6":["adc9dc8ef0ce617b940a039fd12f79e8b098cc7f","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"40640359164f629dd440a47df2e145d084ce9645":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f":["c422e924212367b334b4938f1fd3e44438e88c40","1800b996d8677670482a071dcb7a48b08c423ace"],"770342641f7b505eaa8dccdc666158bff2419109":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"c422e924212367b334b4938f1fd3e44438e88c40":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"1800b996d8677670482a071dcb7a48b08c423ace":["c422e924212367b334b4938f1fd3e44438e88c40"],"132e4d2b791f182f095041c89860f21eb11c31a5":["680b6449f09827f58fe987aff279e014c311d966"],"680b6449f09827f58fe987aff279e014c311d966":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d3104a6ba367dfb690806b227c5ef17c42c6107b":["7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","a5296efc4b319f5647b606629c093a94b23692c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4edc984f0f4ac77c37e48ace2932f780f888453c","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["770342641f7b505eaa8dccdc666158bff2419109"],"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["40640359164f629dd440a47df2e145d084ce9645"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a5296efc4b319f5647b606629c093a94b23692c6":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["132e4d2b791f182f095041c89860f21eb11c31a5","680b6449f09827f58fe987aff279e014c311d966"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"86cab68ee900a31d093b114182b488ea8e85c59d":["419a8f52c6635419beb951255cacbbb281044c57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}