{"path":"lucene/core/src/test/org/apache/lucene/codecs/TestCodecLoadingDeadlock#testDeadlock().mjava","commits":[{"id":"eaed68e725df990738b5c5674509158dac82dcf8","date":1433667275,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/TestCodecLoadingDeadlock#testDeadlock().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDeadlock() throws Exception {\n    LuceneTestCase.assumeFalse(\"This test fails on UNIX with Turkish default locale (https://issues.apache.org/jira/browse/LUCENE-6036)\",\n      new Locale(\"tr\").getLanguage().equals(Locale.getDefault().getLanguage()));\n    \n    // pick random codec names for stress test in separate process:\n    final Random rnd = RandomizedContext.current().getRandom();\n    Set<String> avail;\n    final String codecName = new ArrayList<>(avail = Codec.availableCodecs())\n        .get(rnd.nextInt(avail.size()));\n    final String pfName = new ArrayList<>(avail = PostingsFormat.availablePostingsFormats())\n        .get(rnd.nextInt(avail.size()));\n    final String dvfName = new ArrayList<>(avail = DocValuesFormat.availableDocValuesFormats())\n        .get(rnd.nextInt(avail.size()));\n    \n    // spawn separate JVM:\n    final Process p = new ProcessBuilder(\n      Paths.get(System.getProperty(\"java.home\"), \"bin\", \"java\").toString(),\n      \"-cp\",\n      System.getProperty(\"java.class.path\"),\n      getClass().getName(),\n      codecName,\n      pfName,\n      dvfName\n    ).inheritIO().start();\n    if (p.waitFor(30, TimeUnit.SECONDS)) {\n      assertEquals(\"Process died abnormally\", 0, p.waitFor());\n    } else {\n      p.destroyForcibly().waitFor();\n      fail(\"Process did not exit after 30 secs -> classloader deadlock?\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e8f1ff3b098ace7e8e94cdb3a689c7ecfefbcbd","date":1520935290,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/TestCodecLoadingDeadlock#testDeadlock().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/TestCodecLoadingDeadlock#testDeadlock().mjava","sourceNew":"  @Test\n  public void testDeadlock() throws Exception {\n    LuceneTestCase.assumeFalse(\"This test fails on UNIX with Turkish default locale (https://issues.apache.org/jira/browse/LUCENE-6036)\",\n      new Locale(\"tr\").getLanguage().equals(Locale.getDefault().getLanguage()));\n\n    // pick random codec names for stress test in separate process:\n    final Random rnd = RandomizedContext.current().getRandom();\n    Set<String> avail;\n    final String codecName = new ArrayList<>(avail = Codec.availableCodecs())\n        .get(rnd.nextInt(avail.size()));\n    final String pfName = new ArrayList<>(avail = PostingsFormat.availablePostingsFormats())\n        .get(rnd.nextInt(avail.size()));\n    final String dvfName = new ArrayList<>(avail = DocValuesFormat.availableDocValuesFormats())\n        .get(rnd.nextInt(avail.size()));\n    \n    // spawn separate JVM:\n    final Process p = new ProcessBuilder(\n      Paths.get(System.getProperty(\"java.home\"), \"bin\", \"java\").toString(),\n      \"-cp\",\n      System.getProperty(\"java.class.path\"),\n      getClass().getName(),\n      codecName,\n      pfName,\n      dvfName\n    ).inheritIO().start();\n    if (p.waitFor(MAX_TIME_SECONDS * 2, TimeUnit.SECONDS)) {\n      assertEquals(\"Process died abnormally?\", 0, p.waitFor());\n    } else {\n      p.destroyForcibly().waitFor();\n      fail(\"Process did not exit after 60 secs?\");\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDeadlock() throws Exception {\n    LuceneTestCase.assumeFalse(\"This test fails on UNIX with Turkish default locale (https://issues.apache.org/jira/browse/LUCENE-6036)\",\n      new Locale(\"tr\").getLanguage().equals(Locale.getDefault().getLanguage()));\n    \n    // pick random codec names for stress test in separate process:\n    final Random rnd = RandomizedContext.current().getRandom();\n    Set<String> avail;\n    final String codecName = new ArrayList<>(avail = Codec.availableCodecs())\n        .get(rnd.nextInt(avail.size()));\n    final String pfName = new ArrayList<>(avail = PostingsFormat.availablePostingsFormats())\n        .get(rnd.nextInt(avail.size()));\n    final String dvfName = new ArrayList<>(avail = DocValuesFormat.availableDocValuesFormats())\n        .get(rnd.nextInt(avail.size()));\n    \n    // spawn separate JVM:\n    final Process p = new ProcessBuilder(\n      Paths.get(System.getProperty(\"java.home\"), \"bin\", \"java\").toString(),\n      \"-cp\",\n      System.getProperty(\"java.class.path\"),\n      getClass().getName(),\n      codecName,\n      pfName,\n      dvfName\n    ).inheritIO().start();\n    if (p.waitFor(30, TimeUnit.SECONDS)) {\n      assertEquals(\"Process died abnormally\", 0, p.waitFor());\n    } else {\n      p.destroyForcibly().waitFor();\n      fail(\"Process did not exit after 30 secs -> classloader deadlock?\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b3f81aec687227f78f115327c1a50a262df2cff","date":1522871667,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/TestCodecLoadingDeadlock#testDeadlock().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/TestCodecLoadingDeadlock#testDeadlock().mjava","sourceNew":"  @Test\n  public void testDeadlock() throws Exception {\n    LuceneTestCase.assumeFalse(\"This test fails on UNIX with Turkish default locale (https://issues.apache.org/jira/browse/LUCENE-6036)\",\n      new Locale(\"tr\").getLanguage().equals(Locale.getDefault().getLanguage()));\n\n    // pick random codec names for stress test in separate process:\n    final Random rnd = RandomizedContext.current().getRandom();\n    Set<String> avail;\n    final String codecName = new ArrayList<>(avail = Codec.availableCodecs())\n        .get(rnd.nextInt(avail.size()));\n    final String pfName = new ArrayList<>(avail = PostingsFormat.availablePostingsFormats())\n        .get(rnd.nextInt(avail.size()));\n    final String dvfName = new ArrayList<>(avail = DocValuesFormat.availableDocValuesFormats())\n        .get(rnd.nextInt(avail.size()));\n\n    System.out.println(String.format(Locale.ROOT,\n        \"codec: %s, pf: %s, dvf: %s\", codecName, pfName, dvfName));\n\n    // Fork a separate JVM to reinitialize classes.\n    final Process p = new ProcessBuilder(\n      Paths.get(System.getProperty(\"java.home\"), \"bin\", \"java\").toString(),\n      \"-cp\",\n      System.getProperty(\"java.class.path\"),\n      getClass().getName(),\n      codecName,\n      pfName,\n      dvfName\n    ).inheritIO().start();\n    if (p.waitFor(MAX_TIME_SECONDS * 2, TimeUnit.SECONDS)) {\n      assertEquals(\"Process died abnormally?\", 0, p.waitFor());\n    } else {\n      p.destroyForcibly().waitFor();\n      fail(\"Process did not exit after 60 secs?\");\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDeadlock() throws Exception {\n    LuceneTestCase.assumeFalse(\"This test fails on UNIX with Turkish default locale (https://issues.apache.org/jira/browse/LUCENE-6036)\",\n      new Locale(\"tr\").getLanguage().equals(Locale.getDefault().getLanguage()));\n\n    // pick random codec names for stress test in separate process:\n    final Random rnd = RandomizedContext.current().getRandom();\n    Set<String> avail;\n    final String codecName = new ArrayList<>(avail = Codec.availableCodecs())\n        .get(rnd.nextInt(avail.size()));\n    final String pfName = new ArrayList<>(avail = PostingsFormat.availablePostingsFormats())\n        .get(rnd.nextInt(avail.size()));\n    final String dvfName = new ArrayList<>(avail = DocValuesFormat.availableDocValuesFormats())\n        .get(rnd.nextInt(avail.size()));\n    \n    // spawn separate JVM:\n    final Process p = new ProcessBuilder(\n      Paths.get(System.getProperty(\"java.home\"), \"bin\", \"java\").toString(),\n      \"-cp\",\n      System.getProperty(\"java.class.path\"),\n      getClass().getName(),\n      codecName,\n      pfName,\n      dvfName\n    ).inheritIO().start();\n    if (p.waitFor(MAX_TIME_SECONDS * 2, TimeUnit.SECONDS)) {\n      assertEquals(\"Process died abnormally?\", 0, p.waitFor());\n    } else {\n      p.destroyForcibly().waitFor();\n      fail(\"Process did not exit after 60 secs?\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65baef25201447ad1b6bb86b1dab5e7f61c3419f","date":1599605098,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/TestCodecLoadingDeadlock#testDeadlock().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/TestCodecLoadingDeadlock#testDeadlock().mjava","sourceNew":"  @Test\n  public void testDeadlock() throws Exception {\n    // pick random codec names for stress test in separate process:\n    final Random rnd = RandomizedContext.current().getRandom();\n    Set<String> avail;\n    final String codecName = new ArrayList<>(avail = Codec.availableCodecs())\n        .get(rnd.nextInt(avail.size()));\n    final String pfName = new ArrayList<>(avail = PostingsFormat.availablePostingsFormats())\n        .get(rnd.nextInt(avail.size()));\n    final String dvfName = new ArrayList<>(avail = DocValuesFormat.availableDocValuesFormats())\n        .get(rnd.nextInt(avail.size()));\n\n    System.out.println(String.format(Locale.ROOT,\n        \"codec: %s, pf: %s, dvf: %s\", codecName, pfName, dvfName));\n\n    // Fork a separate JVM to reinitialize classes.\n    final Process p = new ProcessBuilder(\n      Paths.get(System.getProperty(\"java.home\"), \"bin\", \"java\").toString(),\n      \"-cp\",\n      System.getProperty(\"java.class.path\"),\n      getClass().getName(),\n      codecName,\n      pfName,\n      dvfName\n    ).inheritIO().start();\n    if (p.waitFor(MAX_TIME_SECONDS * 2, TimeUnit.SECONDS)) {\n      assertEquals(\"Process died abnormally?\", 0, p.waitFor());\n    } else {\n      p.destroyForcibly().waitFor();\n      fail(\"Process did not exit after 60 secs?\");\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDeadlock() throws Exception {\n    LuceneTestCase.assumeFalse(\"This test fails on UNIX with Turkish default locale (https://issues.apache.org/jira/browse/LUCENE-6036)\",\n      new Locale(\"tr\").getLanguage().equals(Locale.getDefault().getLanguage()));\n\n    // pick random codec names for stress test in separate process:\n    final Random rnd = RandomizedContext.current().getRandom();\n    Set<String> avail;\n    final String codecName = new ArrayList<>(avail = Codec.availableCodecs())\n        .get(rnd.nextInt(avail.size()));\n    final String pfName = new ArrayList<>(avail = PostingsFormat.availablePostingsFormats())\n        .get(rnd.nextInt(avail.size()));\n    final String dvfName = new ArrayList<>(avail = DocValuesFormat.availableDocValuesFormats())\n        .get(rnd.nextInt(avail.size()));\n\n    System.out.println(String.format(Locale.ROOT,\n        \"codec: %s, pf: %s, dvf: %s\", codecName, pfName, dvfName));\n\n    // Fork a separate JVM to reinitialize classes.\n    final Process p = new ProcessBuilder(\n      Paths.get(System.getProperty(\"java.home\"), \"bin\", \"java\").toString(),\n      \"-cp\",\n      System.getProperty(\"java.class.path\"),\n      getClass().getName(),\n      codecName,\n      pfName,\n      dvfName\n    ).inheritIO().start();\n    if (p.waitFor(MAX_TIME_SECONDS * 2, TimeUnit.SECONDS)) {\n      assertEquals(\"Process died abnormally?\", 0, p.waitFor());\n    } else {\n      p.destroyForcibly().waitFor();\n      fail(\"Process did not exit after 60 secs?\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9b3f81aec687227f78f115327c1a50a262df2cff":["3e8f1ff3b098ace7e8e94cdb3a689c7ecfefbcbd"],"65baef25201447ad1b6bb86b1dab5e7f61c3419f":["9b3f81aec687227f78f115327c1a50a262df2cff"],"3e8f1ff3b098ace7e8e94cdb3a689c7ecfefbcbd":["eaed68e725df990738b5c5674509158dac82dcf8"],"eaed68e725df990738b5c5674509158dac82dcf8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["65baef25201447ad1b6bb86b1dab5e7f61c3419f"]},"commit2Childs":{"9b3f81aec687227f78f115327c1a50a262df2cff":["65baef25201447ad1b6bb86b1dab5e7f61c3419f"],"65baef25201447ad1b6bb86b1dab5e7f61c3419f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3e8f1ff3b098ace7e8e94cdb3a689c7ecfefbcbd":["9b3f81aec687227f78f115327c1a50a262df2cff"],"eaed68e725df990738b5c5674509158dac82dcf8":["3e8f1ff3b098ace7e8e94cdb3a689c7ecfefbcbd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eaed68e725df990738b5c5674509158dac82dcf8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}