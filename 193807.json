{"path":"lucene/backwards/src/test/org/apache/lucene/document/TestDocument#testFieldSetValue().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/document/TestDocument#testFieldSetValue().mjava","pathOld":"backwards/src/test/org/apache/lucene/document/TestDocument#testFieldSetValue().mjava","sourceNew":"    public void testFieldSetValue() throws Exception {\n\n      Field field = new Field(\"id\", \"id1\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n      Document doc = new Document();\n      doc.add(field);\n      doc.add(new Field(\"keyword\", \"test\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n      RAMDirectory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.addDocument(doc);\n      field.setValue(\"id2\");\n      writer.addDocument(doc);\n      field.setValue(\"id3\");\n      writer.addDocument(doc);\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(dir, true);\n\n      Query query = new TermQuery(new Term(\"keyword\", \"test\"));\n\n      // ensure that queries return expected results without DateFilter first\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(3, hits.length);\n      int result = 0;\n      for(int i=0;i<3;i++) {\n        Document doc2 = searcher.doc(hits[i].doc);\n        Field f = doc2.getField(\"id\");\n        if (f.stringValue().equals(\"id1\"))\n          result |= 1;\n        else if (f.stringValue().equals(\"id2\"))\n          result |= 2;\n        else if (f.stringValue().equals(\"id3\"))\n          result |= 4;\n        else\n          fail(\"unexpected id field\");\n      }\n      searcher.close();\n      dir.close();\n      assertEquals(\"did not see all IDs\", 7, result);\n    }\n\n","sourceOld":"    public void testFieldSetValue() throws Exception {\n\n      Field field = new Field(\"id\", \"id1\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n      Document doc = new Document();\n      doc.add(field);\n      doc.add(new Field(\"keyword\", \"test\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n      RAMDirectory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.addDocument(doc);\n      field.setValue(\"id2\");\n      writer.addDocument(doc);\n      field.setValue(\"id3\");\n      writer.addDocument(doc);\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(dir, true);\n\n      Query query = new TermQuery(new Term(\"keyword\", \"test\"));\n\n      // ensure that queries return expected results without DateFilter first\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(3, hits.length);\n      int result = 0;\n      for(int i=0;i<3;i++) {\n        Document doc2 = searcher.doc(hits[i].doc);\n        Field f = doc2.getField(\"id\");\n        if (f.stringValue().equals(\"id1\"))\n          result |= 1;\n        else if (f.stringValue().equals(\"id2\"))\n          result |= 2;\n        else if (f.stringValue().equals(\"id3\"))\n          result |= 4;\n        else\n          fail(\"unexpected id field\");\n      }\n      searcher.close();\n      dir.close();\n      assertEquals(\"did not see all IDs\", 7, result);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/document/TestDocument#testFieldSetValue().mjava","sourceNew":null,"sourceOld":"    public void testFieldSetValue() throws Exception {\n\n      Field field = new Field(\"id\", \"id1\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n      Document doc = new Document();\n      doc.add(field);\n      doc.add(new Field(\"keyword\", \"test\", Field.Store.YES, Field.Index.NOT_ANALYZED));\n\n      RAMDirectory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.addDocument(doc);\n      field.setValue(\"id2\");\n      writer.addDocument(doc);\n      field.setValue(\"id3\");\n      writer.addDocument(doc);\n      writer.close();\n\n      Searcher searcher = new IndexSearcher(dir, true);\n\n      Query query = new TermQuery(new Term(\"keyword\", \"test\"));\n\n      // ensure that queries return expected results without DateFilter first\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(3, hits.length);\n      int result = 0;\n      for(int i=0;i<3;i++) {\n        Document doc2 = searcher.doc(hits[i].doc);\n        Field f = doc2.getField(\"id\");\n        if (f.stringValue().equals(\"id1\"))\n          result |= 1;\n        else if (f.stringValue().equals(\"id2\"))\n          result |= 2;\n        else if (f.stringValue().equals(\"id3\"))\n          result |= 4;\n        else\n          fail(\"unexpected id field\");\n      }\n      searcher.close();\n      dir.close();\n      assertEquals(\"did not see all IDs\", 7, result);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}