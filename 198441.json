{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#assertNoSeparateFiles(Collection[String],Directory,SegmentInfo).mjava","commits":[{"id":"ee7817a665237cb0657ed2bd7ae2a2b91ce6aaf9","date":1327025939,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#assertNoSeparateFiles(Collection[String],Directory,SegmentInfo).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * used only by assert: checks that filenames about to be put in cfs belong.\n   */\n  private static boolean assertNoSeparateFiles(Collection<String> files, \n      Directory dir, SegmentInfo info) throws IOException {\n    // maybe this is overkill, but codec naming clashes would be bad.\n    Set<String> separateFiles = new HashSet<String>();\n    Codec codec = info.getCodec();\n    codec.normsFormat().separateFiles(dir, info, separateFiles);\n    codec.liveDocsFormat().separateFiles(dir, info, separateFiles);\n    \n    for (String file : files) {\n      assert !separateFiles.contains(file) : file + \" should not go in CFS!\";\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c3b7e9f4d596b06859aafa44caeaa23b201e231","date":1327083022,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#assertNoSeparateFiles(Collection[String],Directory,SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#assertNoSeparateFiles(Collection[String],Directory,SegmentInfo).mjava","sourceNew":"  /**\n   * used only by assert: checks that filenames about to be put in cfs belong.\n   */\n  private static boolean assertNoSeparateFiles(Collection<String> files, \n      Directory dir, SegmentInfo info) throws IOException {\n    // maybe this is overkill, but codec naming clashes would be bad.\n    Set<String> separateFiles = new HashSet<String>();\n    info.getCodec().separateFiles(dir, info, separateFiles);\n    \n    for (String file : files) {\n      assert !separateFiles.contains(file) : file + \" should not go in CFS!\";\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * used only by assert: checks that filenames about to be put in cfs belong.\n   */\n  private static boolean assertNoSeparateFiles(Collection<String> files, \n      Directory dir, SegmentInfo info) throws IOException {\n    // maybe this is overkill, but codec naming clashes would be bad.\n    Set<String> separateFiles = new HashSet<String>();\n    Codec codec = info.getCodec();\n    codec.normsFormat().separateFiles(dir, info, separateFiles);\n    codec.liveDocsFormat().separateFiles(dir, info, separateFiles);\n    \n    for (String file : files) {\n      assert !separateFiles.contains(file) : file + \" should not go in CFS!\";\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31","date":1327836826,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#assertNoSeparateFiles(Collection[String],Directory,SegmentInfo).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * used only by assert: checks that filenames about to be put in cfs belong.\n   */\n  private static boolean assertNoSeparateFiles(Collection<String> files, \n      Directory dir, SegmentInfo info) throws IOException {\n    // maybe this is overkill, but codec naming clashes would be bad.\n    Set<String> separateFiles = new HashSet<String>();\n    info.getCodec().separateFiles(dir, info, separateFiles);\n    \n    for (String file : files) {\n      assert !separateFiles.contains(file) : file + \" should not go in CFS!\";\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#assertNoSeparateFiles(Collection[String],Directory,SegmentInfo).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * used only by assert: checks that filenames about to be put in cfs belong.\n   */\n  private static boolean assertNoSeparateFiles(Collection<String> files, \n      Directory dir, SegmentInfo info) throws IOException {\n    // maybe this is overkill, but codec naming clashes would be bad.\n    Set<String> separateFiles = new HashSet<String>();\n    info.getCodec().separateFiles(dir, info, separateFiles);\n    \n    for (String file : files) {\n      assert !separateFiles.contains(file) : file + \" should not go in CFS!\";\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78977ccc47b451a8e645b77504e2ef0a05e4b1a3","date":1327846052,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#assertNoSeparateFiles(Collection[String],Directory,SegmentInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#assertNoSeparateFiles(Collection[String],Directory,SegmentInfo).mjava","sourceNew":"  /**\n   * used only by assert: checks that filenames about to be put in cfs belong.\n   */\n  private static boolean assertNoSeparateFiles(Collection<String> files, \n      Directory dir, SegmentInfo info) throws IOException {\n    // maybe this is overkill, but codec naming clashes would be bad.\n    Set<String> separateFiles = new HashSet<String>();\n    info.getCodec().separateFiles(info, separateFiles);\n    \n    for (String file : files) {\n      assert !separateFiles.contains(file) : file + \" should not go in CFS!\";\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * used only by assert: checks that filenames about to be put in cfs belong.\n   */\n  private static boolean assertNoSeparateFiles(Collection<String> files, \n      Directory dir, SegmentInfo info) throws IOException {\n    // maybe this is overkill, but codec naming clashes would be bad.\n    Set<String> separateFiles = new HashSet<String>();\n    info.getCodec().separateFiles(dir, info, separateFiles);\n    \n    for (String file : files) {\n      assert !separateFiles.contains(file) : file + \" should not go in CFS!\";\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be9e3e7d2fc880996ffcfe9a8fc47057b647e9e3","date":1327944832,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#assertNoSeparateFiles(Collection[String],Directory,SegmentInfo).mjava","sourceNew":null,"sourceOld":"  /**\n   * used only by assert: checks that filenames about to be put in cfs belong.\n   */\n  private static boolean assertNoSeparateFiles(Collection<String> files, \n      Directory dir, SegmentInfo info) throws IOException {\n    // maybe this is overkill, but codec naming clashes would be bad.\n    Set<String> separateFiles = new HashSet<String>();\n    info.getCodec().separateFiles(info, separateFiles);\n    \n    for (String file : files) {\n      assert !separateFiles.contains(file) : file + \" should not go in CFS!\";\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"296df632fd63421ea20756fa11ad36fbc6f4c8a9","date":1327957998,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#assertNoSeparateFiles(Collection[String],Directory,SegmentInfo).mjava","sourceNew":null,"sourceOld":"  /**\n   * used only by assert: checks that filenames about to be put in cfs belong.\n   */\n  private static boolean assertNoSeparateFiles(Collection<String> files, \n      Directory dir, SegmentInfo info) throws IOException {\n    // maybe this is overkill, but codec naming clashes would be bad.\n    Set<String> separateFiles = new HashSet<String>();\n    info.getCodec().separateFiles(dir, info, separateFiles);\n    \n    for (String file : files) {\n      assert !separateFiles.contains(file) : file + \" should not go in CFS!\";\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"410e066f093e407222d9681429d209084e783149","date":1327958394,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#assertNoSeparateFiles(Collection[String],Directory,SegmentInfo).mjava","sourceNew":null,"sourceOld":"  /**\n   * used only by assert: checks that filenames about to be put in cfs belong.\n   */\n  private static boolean assertNoSeparateFiles(Collection<String> files, \n      Directory dir, SegmentInfo info) throws IOException {\n    // maybe this is overkill, but codec naming clashes would be bad.\n    Set<String> separateFiles = new HashSet<String>();\n    info.getCodec().separateFiles(dir, info, separateFiles);\n    \n    for (String file : files) {\n      assert !separateFiles.contains(file) : file + \" should not go in CFS!\";\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ee7817a665237cb0657ed2bd7ae2a2b91ce6aaf9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"410e066f093e407222d9681429d209084e783149":["fd92b8bcc88e969302510acf77bd6970da3994c4","296df632fd63421ea20756fa11ad36fbc6f4c8a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5c3b7e9f4d596b06859aafa44caeaa23b201e231":["ee7817a665237cb0657ed2bd7ae2a2b91ce6aaf9"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5c3b7e9f4d596b06859aafa44caeaa23b201e231"],"78977ccc47b451a8e645b77504e2ef0a05e4b1a3":["5c3b7e9f4d596b06859aafa44caeaa23b201e231"],"296df632fd63421ea20756fa11ad36fbc6f4c8a9":["c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31","be9e3e7d2fc880996ffcfe9a8fc47057b647e9e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["296df632fd63421ea20756fa11ad36fbc6f4c8a9"],"be9e3e7d2fc880996ffcfe9a8fc47057b647e9e3":["78977ccc47b451a8e645b77504e2ef0a05e4b1a3"]},"commit2Childs":{"ee7817a665237cb0657ed2bd7ae2a2b91ce6aaf9":["5c3b7e9f4d596b06859aafa44caeaa23b201e231"],"410e066f093e407222d9681429d209084e783149":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ee7817a665237cb0657ed2bd7ae2a2b91ce6aaf9","fd92b8bcc88e969302510acf77bd6970da3994c4","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"5c3b7e9f4d596b06859aafa44caeaa23b201e231":["c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31","78977ccc47b451a8e645b77504e2ef0a05e4b1a3"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["410e066f093e407222d9681429d209084e783149"],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["fd92b8bcc88e969302510acf77bd6970da3994c4","296df632fd63421ea20756fa11ad36fbc6f4c8a9"],"78977ccc47b451a8e645b77504e2ef0a05e4b1a3":["be9e3e7d2fc880996ffcfe9a8fc47057b647e9e3"],"296df632fd63421ea20756fa11ad36fbc6f4c8a9":["410e066f093e407222d9681429d209084e783149","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"be9e3e7d2fc880996ffcfe9a8fc47057b647e9e3":["296df632fd63421ea20756fa11ad36fbc6f4c8a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["410e066f093e407222d9681429d209084e783149","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}