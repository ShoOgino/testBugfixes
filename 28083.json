{"path":"src/test/org/apache/lucene/index/TestIndexReader#testDocsOutOfOrderJIRA140().mjava","commits":[{"id":"0e5554d2be0131fc1ce32526016ce4dcc90650e4","date":1168279868,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testDocsOutOfOrderJIRA140().mjava","pathOld":"/dev/null","sourceNew":"    public void testDocsOutOfOrderJIRA140() throws IOException {\n      Directory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n      writer.close();\n      IndexReader reader = IndexReader.open(dir);\n\n      // Try to delete an invalid docId, yet, within range\n      // of the final bits of the BitVector:\n\n      boolean gotException = false;\n      try {\n        reader.deleteDocument(11);\n      } catch (ArrayIndexOutOfBoundsException e) {\n        gotException = true;\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n\n      // We must add more docs to get a new segment written\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n\n      try {\n        writer.optimize();\n      } catch (IllegalStateException e) {\n        e.printStackTrace();\n        fail(\"hit unexpected illegal state exception during optimize\");\n      }\n\n      if (!gotException) {\n        fail(\"delete of out-of-bounds doc number failed to hit exception\");\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d72db039743bd6a2da9be6306f57c71654ca1bf6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fcf637fee66c296142fb5989e338efc018320655","date":1168455996,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testDocsOutOfOrderJIRA140().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testDocsOutOfOrderJIRA140().mjava","sourceNew":"    public void testDocsOutOfOrderJIRA140() throws IOException {\n      Directory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n      writer.close();\n      IndexReader reader = IndexReader.open(dir);\n\n      // Try to delete an invalid docId, yet, within range\n      // of the final bits of the BitVector:\n\n      boolean gotException = false;\n      try {\n        reader.deleteDocument(11);\n      } catch (ArrayIndexOutOfBoundsException e) {\n        gotException = true;\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n\n      // We must add more docs to get a new segment written\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n\n      // Without the fix for LUCENE-140 this call will\n      // [incorrectly] hit a \"docs out of order\"\n      // IllegalStateException because above out-of-bounds\n      // deleteDocument corrupted the index:\n      writer.optimize();\n\n      if (!gotException) {\n        fail(\"delete of out-of-bounds doc number failed to hit exception\");\n      }\n    }\n\n","sourceOld":"    public void testDocsOutOfOrderJIRA140() throws IOException {\n      Directory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n      writer.close();\n      IndexReader reader = IndexReader.open(dir);\n\n      // Try to delete an invalid docId, yet, within range\n      // of the final bits of the BitVector:\n\n      boolean gotException = false;\n      try {\n        reader.deleteDocument(11);\n      } catch (ArrayIndexOutOfBoundsException e) {\n        gotException = true;\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n\n      // We must add more docs to get a new segment written\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n\n      try {\n        writer.optimize();\n      } catch (IllegalStateException e) {\n        e.printStackTrace();\n        fail(\"hit unexpected illegal state exception during optimize\");\n      }\n\n      if (!gotException) {\n        fail(\"delete of out-of-bounds doc number failed to hit exception\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d72db039743bd6a2da9be6306f57c71654ca1bf6","date":1173217255,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testDocsOutOfOrderJIRA140().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testDocsOutOfOrderJIRA140().mjava","sourceNew":"    public void testDocsOutOfOrderJIRA140() throws IOException {\n      Directory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n      writer.close();\n      IndexReader reader = IndexReader.open(dir);\n\n      // Try to delete an invalid docId, yet, within range\n      // of the final bits of the BitVector:\n\n      boolean gotException = false;\n      try {\n        reader.deleteDocument(11);\n      } catch (ArrayIndexOutOfBoundsException e) {\n        gotException = true;\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n\n      // We must add more docs to get a new segment written\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n\n      // Without the fix for LUCENE-140 this call will\n      // [incorrectly] hit a \"docs out of order\"\n      // IllegalStateException because above out-of-bounds\n      // deleteDocument corrupted the index:\n      writer.optimize();\n\n      if (!gotException) {\n        fail(\"delete of out-of-bounds doc number failed to hit exception\");\n      }\n      dir.close();\n    }\n\n","sourceOld":"    public void testDocsOutOfOrderJIRA140() throws IOException {\n      Directory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n      writer.close();\n      IndexReader reader = IndexReader.open(dir);\n\n      // Try to delete an invalid docId, yet, within range\n      // of the final bits of the BitVector:\n\n      boolean gotException = false;\n      try {\n        reader.deleteDocument(11);\n      } catch (ArrayIndexOutOfBoundsException e) {\n        gotException = true;\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n\n      // We must add more docs to get a new segment written\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n\n      // Without the fix for LUCENE-140 this call will\n      // [incorrectly] hit a \"docs out of order\"\n      // IllegalStateException because above out-of-bounds\n      // deleteDocument corrupted the index:\n      writer.optimize();\n\n      if (!gotException) {\n        fail(\"delete of out-of-bounds doc number failed to hit exception\");\n      }\n    }\n\n","bugFix":["0e5554d2be0131fc1ce32526016ce4dcc90650e4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testDocsOutOfOrderJIRA140().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testDocsOutOfOrderJIRA140().mjava","sourceNew":"    public void testDocsOutOfOrderJIRA140() throws IOException {\n      Directory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n      writer.close();\n      IndexReader reader = IndexReader.open(dir);\n\n      // Try to delete an invalid docId, yet, within range\n      // of the final bits of the BitVector:\n\n      boolean gotException = false;\n      try {\n        reader.deleteDocument(11);\n      } catch (ArrayIndexOutOfBoundsException e) {\n        gotException = true;\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n\n      // We must add more docs to get a new segment written\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n\n      // Without the fix for LUCENE-140 this call will\n      // [incorrectly] hit a \"docs out of order\"\n      // IllegalStateException because above out-of-bounds\n      // deleteDocument corrupted the index:\n      writer.optimize();\n\n      if (!gotException) {\n        fail(\"delete of out-of-bounds doc number failed to hit exception\");\n      }\n      dir.close();\n    }\n\n","sourceOld":"    public void testDocsOutOfOrderJIRA140() throws IOException {\n      Directory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n      writer.close();\n      IndexReader reader = IndexReader.open(dir);\n\n      // Try to delete an invalid docId, yet, within range\n      // of the final bits of the BitVector:\n\n      boolean gotException = false;\n      try {\n        reader.deleteDocument(11);\n      } catch (ArrayIndexOutOfBoundsException e) {\n        gotException = true;\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n\n      // We must add more docs to get a new segment written\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n\n      // Without the fix for LUCENE-140 this call will\n      // [incorrectly] hit a \"docs out of order\"\n      // IllegalStateException because above out-of-bounds\n      // deleteDocument corrupted the index:\n      writer.optimize();\n\n      if (!gotException) {\n        fail(\"delete of out-of-bounds doc number failed to hit exception\");\n      }\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ff8864209d2e972cb4393600c26082f9a6533d","date":1239297466,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testDocsOutOfOrderJIRA140().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testDocsOutOfOrderJIRA140().mjava","sourceNew":"    public void testDocsOutOfOrderJIRA140() throws IOException {\n      Directory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n      writer.close();\n      IndexReader reader = IndexReader.open(dir);\n\n      // Try to delete an invalid docId, yet, within range\n      // of the final bits of the BitVector:\n\n      boolean gotException = false;\n      try {\n        reader.deleteDocument(11);\n      } catch (ArrayIndexOutOfBoundsException e) {\n        gotException = true;\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n\n      // We must add more docs to get a new segment written\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n\n      // Without the fix for LUCENE-140 this call will\n      // [incorrectly] hit a \"docs out of order\"\n      // IllegalStateException because above out-of-bounds\n      // deleteDocument corrupted the index:\n      writer.optimize();\n      writer.close();\n      if (!gotException) {\n        fail(\"delete of out-of-bounds doc number failed to hit exception\");\n      }\n      dir.close();\n    }\n\n","sourceOld":"    public void testDocsOutOfOrderJIRA140() throws IOException {\n      Directory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n      writer.close();\n      IndexReader reader = IndexReader.open(dir);\n\n      // Try to delete an invalid docId, yet, within range\n      // of the final bits of the BitVector:\n\n      boolean gotException = false;\n      try {\n        reader.deleteDocument(11);\n      } catch (ArrayIndexOutOfBoundsException e) {\n        gotException = true;\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n\n      // We must add more docs to get a new segment written\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n\n      // Without the fix for LUCENE-140 this call will\n      // [incorrectly] hit a \"docs out of order\"\n      // IllegalStateException because above out-of-bounds\n      // deleteDocument corrupted the index:\n      writer.optimize();\n\n      if (!gotException) {\n        fail(\"delete of out-of-bounds doc number failed to hit exception\");\n      }\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testDocsOutOfOrderJIRA140().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testDocsOutOfOrderJIRA140().mjava","sourceNew":"    public void testDocsOutOfOrderJIRA140() throws IOException {\n      Directory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n      writer.close();\n      IndexReader reader = IndexReader.open(dir, false);\n\n      // Try to delete an invalid docId, yet, within range\n      // of the final bits of the BitVector:\n\n      boolean gotException = false;\n      try {\n        reader.deleteDocument(11);\n      } catch (ArrayIndexOutOfBoundsException e) {\n        gotException = true;\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n\n      // We must add more docs to get a new segment written\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n\n      // Without the fix for LUCENE-140 this call will\n      // [incorrectly] hit a \"docs out of order\"\n      // IllegalStateException because above out-of-bounds\n      // deleteDocument corrupted the index:\n      writer.optimize();\n      writer.close();\n      if (!gotException) {\n        fail(\"delete of out-of-bounds doc number failed to hit exception\");\n      }\n      dir.close();\n    }\n\n","sourceOld":"    public void testDocsOutOfOrderJIRA140() throws IOException {\n      Directory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n      writer.close();\n      IndexReader reader = IndexReader.open(dir);\n\n      // Try to delete an invalid docId, yet, within range\n      // of the final bits of the BitVector:\n\n      boolean gotException = false;\n      try {\n        reader.deleteDocument(11);\n      } catch (ArrayIndexOutOfBoundsException e) {\n        gotException = true;\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n\n      // We must add more docs to get a new segment written\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n\n      // Without the fix for LUCENE-140 this call will\n      // [incorrectly] hit a \"docs out of order\"\n      // IllegalStateException because above out-of-bounds\n      // deleteDocument corrupted the index:\n      writer.optimize();\n      writer.close();\n      if (!gotException) {\n        fail(\"delete of out-of-bounds doc number failed to hit exception\");\n      }\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testDocsOutOfOrderJIRA140().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testDocsOutOfOrderJIRA140().mjava","sourceNew":"    public void testDocsOutOfOrderJIRA140() throws IOException {\n      Directory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n      writer.close();\n      IndexReader reader = IndexReader.open(dir, false);\n\n      // Try to delete an invalid docId, yet, within range\n      // of the final bits of the BitVector:\n\n      boolean gotException = false;\n      try {\n        reader.deleteDocument(11);\n      } catch (ArrayIndexOutOfBoundsException e) {\n        gotException = true;\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n\n      // We must add more docs to get a new segment written\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n\n      // Without the fix for LUCENE-140 this call will\n      // [incorrectly] hit a \"docs out of order\"\n      // IllegalStateException because above out-of-bounds\n      // deleteDocument corrupted the index:\n      writer.optimize();\n      writer.close();\n      if (!gotException) {\n        fail(\"delete of out-of-bounds doc number failed to hit exception\");\n      }\n      dir.close();\n    }\n\n","sourceOld":"    public void testDocsOutOfOrderJIRA140() throws IOException {\n      Directory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n      writer.close();\n      IndexReader reader = IndexReader.open(dir);\n\n      // Try to delete an invalid docId, yet, within range\n      // of the final bits of the BitVector:\n\n      boolean gotException = false;\n      try {\n        reader.deleteDocument(11);\n      } catch (ArrayIndexOutOfBoundsException e) {\n        gotException = true;\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n\n      // We must add more docs to get a new segment written\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n\n      // Without the fix for LUCENE-140 this call will\n      // [incorrectly] hit a \"docs out of order\"\n      // IllegalStateException because above out-of-bounds\n      // deleteDocument corrupted the index:\n      writer.optimize();\n      writer.close();\n      if (!gotException) {\n        fail(\"delete of out-of-bounds doc number failed to hit exception\");\n      }\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testDocsOutOfOrderJIRA140().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testDocsOutOfOrderJIRA140().mjava","sourceNew":"    public void testDocsOutOfOrderJIRA140() throws IOException {\n      Directory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n      writer.close();\n      IndexReader reader = IndexReader.open(dir, false);\n\n      // Try to delete an invalid docId, yet, within range\n      // of the final bits of the BitVector:\n\n      boolean gotException = false;\n      try {\n        reader.deleteDocument(11);\n      } catch (ArrayIndexOutOfBoundsException e) {\n        gotException = true;\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n\n      // We must add more docs to get a new segment written\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n\n      // Without the fix for LUCENE-140 this call will\n      // [incorrectly] hit a \"docs out of order\"\n      // IllegalStateException because above out-of-bounds\n      // deleteDocument corrupted the index:\n      writer.optimize();\n      writer.close();\n      if (!gotException) {\n        fail(\"delete of out-of-bounds doc number failed to hit exception\");\n      }\n      dir.close();\n    }\n\n","sourceOld":"    public void testDocsOutOfOrderJIRA140() throws IOException {\n      Directory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n      writer.close();\n      IndexReader reader = IndexReader.open(dir, false);\n\n      // Try to delete an invalid docId, yet, within range\n      // of the final bits of the BitVector:\n\n      boolean gotException = false;\n      try {\n        reader.deleteDocument(11);\n      } catch (ArrayIndexOutOfBoundsException e) {\n        gotException = true;\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n\n      // We must add more docs to get a new segment written\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n\n      // Without the fix for LUCENE-140 this call will\n      // [incorrectly] hit a \"docs out of order\"\n      // IllegalStateException because above out-of-bounds\n      // deleteDocument corrupted the index:\n      writer.optimize();\n      writer.close();\n      if (!gotException) {\n        fail(\"delete of out-of-bounds doc number failed to hit exception\");\n      }\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testDocsOutOfOrderJIRA140().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testDocsOutOfOrderJIRA140().mjava","sourceNew":"    public void testDocsOutOfOrderJIRA140() throws IOException {\n      Directory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n      writer.close();\n      IndexReader reader = IndexReader.open(dir, false);\n\n      // Try to delete an invalid docId, yet, within range\n      // of the final bits of the BitVector:\n\n      boolean gotException = false;\n      try {\n        reader.deleteDocument(11);\n      } catch (ArrayIndexOutOfBoundsException e) {\n        gotException = true;\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n\n      // We must add more docs to get a new segment written\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n\n      // Without the fix for LUCENE-140 this call will\n      // [incorrectly] hit a \"docs out of order\"\n      // IllegalStateException because above out-of-bounds\n      // deleteDocument corrupted the index:\n      writer.optimize();\n      writer.close();\n      if (!gotException) {\n        fail(\"delete of out-of-bounds doc number failed to hit exception\");\n      }\n      dir.close();\n    }\n\n","sourceOld":"    public void testDocsOutOfOrderJIRA140() throws IOException {\n      Directory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n      writer.close();\n      IndexReader reader = IndexReader.open(dir, false);\n\n      // Try to delete an invalid docId, yet, within range\n      // of the final bits of the BitVector:\n\n      boolean gotException = false;\n      try {\n        reader.deleteDocument(11);\n      } catch (ArrayIndexOutOfBoundsException e) {\n        gotException = true;\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n\n      // We must add more docs to get a new segment written\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n\n      // Without the fix for LUCENE-140 this call will\n      // [incorrectly] hit a \"docs out of order\"\n      // IllegalStateException because above out-of-bounds\n      // deleteDocument corrupted the index:\n      writer.optimize();\n      writer.close();\n      if (!gotException) {\n        fail(\"delete of out-of-bounds doc number failed to hit exception\");\n      }\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testDocsOutOfOrderJIRA140().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testDocsOutOfOrderJIRA140().mjava","sourceNew":"    public void testDocsOutOfOrderJIRA140() throws IOException {\n      Directory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n      writer.close();\n      IndexReader reader = IndexReader.open(dir, false);\n\n      // Try to delete an invalid docId, yet, within range\n      // of the final bits of the BitVector:\n\n      boolean gotException = false;\n      try {\n        reader.deleteDocument(11);\n      } catch (ArrayIndexOutOfBoundsException e) {\n        gotException = true;\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.APPEND));\n\n      // We must add more docs to get a new segment written\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n\n      // Without the fix for LUCENE-140 this call will\n      // [incorrectly] hit a \"docs out of order\"\n      // IllegalStateException because above out-of-bounds\n      // deleteDocument corrupted the index:\n      writer.optimize();\n      writer.close();\n      if (!gotException) {\n        fail(\"delete of out-of-bounds doc number failed to hit exception\");\n      }\n      dir.close();\n    }\n\n","sourceOld":"    public void testDocsOutOfOrderJIRA140() throws IOException {\n      Directory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n      writer.close();\n      IndexReader reader = IndexReader.open(dir, false);\n\n      // Try to delete an invalid docId, yet, within range\n      // of the final bits of the BitVector:\n\n      boolean gotException = false;\n      try {\n        reader.deleteDocument(11);\n      } catch (ArrayIndexOutOfBoundsException e) {\n        gotException = true;\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n\n      // We must add more docs to get a new segment written\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n\n      // Without the fix for LUCENE-140 this call will\n      // [incorrectly] hit a \"docs out of order\"\n      // IllegalStateException because above out-of-bounds\n      // deleteDocument corrupted the index:\n      writer.optimize();\n      writer.close();\n      if (!gotException) {\n        fail(\"delete of out-of-bounds doc number failed to hit exception\");\n      }\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testDocsOutOfOrderJIRA140().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testDocsOutOfOrderJIRA140().mjava","sourceNew":"    public void testDocsOutOfOrderJIRA140() throws IOException {\n      Directory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n      writer.close();\n      IndexReader reader = IndexReader.open(dir, false);\n\n      // Try to delete an invalid docId, yet, within range\n      // of the final bits of the BitVector:\n\n      boolean gotException = false;\n      try {\n        reader.deleteDocument(11);\n      } catch (ArrayIndexOutOfBoundsException e) {\n        gotException = true;\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n\n      // We must add more docs to get a new segment written\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n\n      // Without the fix for LUCENE-140 this call will\n      // [incorrectly] hit a \"docs out of order\"\n      // IllegalStateException because above out-of-bounds\n      // deleteDocument corrupted the index:\n      writer.optimize();\n      writer.close();\n      if (!gotException) {\n        fail(\"delete of out-of-bounds doc number failed to hit exception\");\n      }\n      dir.close();\n    }\n\n","sourceOld":"    public void testDocsOutOfOrderJIRA140() throws IOException {\n      Directory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n      writer.close();\n      IndexReader reader = IndexReader.open(dir, false);\n\n      // Try to delete an invalid docId, yet, within range\n      // of the final bits of the BitVector:\n\n      boolean gotException = false;\n      try {\n        reader.deleteDocument(11);\n      } catch (ArrayIndexOutOfBoundsException e) {\n        gotException = true;\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.APPEND));\n\n      // We must add more docs to get a new segment written\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n\n      // Without the fix for LUCENE-140 this call will\n      // [incorrectly] hit a \"docs out of order\"\n      // IllegalStateException because above out-of-bounds\n      // deleteDocument corrupted the index:\n      writer.optimize();\n      writer.close();\n      if (!gotException) {\n        fail(\"delete of out-of-bounds doc number failed to hit exception\");\n      }\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testDocsOutOfOrderJIRA140().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testDocsOutOfOrderJIRA140().mjava","sourceNew":"    public void testDocsOutOfOrderJIRA140() throws IOException {\n      Directory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n      writer.close();\n      IndexReader reader = IndexReader.open(dir, false);\n\n      // Try to delete an invalid docId, yet, within range\n      // of the final bits of the BitVector:\n\n      boolean gotException = false;\n      try {\n        reader.deleteDocument(11);\n      } catch (ArrayIndexOutOfBoundsException e) {\n        gotException = true;\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n\n      // We must add more docs to get a new segment written\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n\n      // Without the fix for LUCENE-140 this call will\n      // [incorrectly] hit a \"docs out of order\"\n      // IllegalStateException because above out-of-bounds\n      // deleteDocument corrupted the index:\n      writer.optimize();\n      writer.close();\n      if (!gotException) {\n        fail(\"delete of out-of-bounds doc number failed to hit exception\");\n      }\n      dir.close();\n    }\n\n","sourceOld":"    public void testDocsOutOfOrderJIRA140() throws IOException {\n      Directory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n      writer.close();\n      IndexReader reader = IndexReader.open(dir, false);\n\n      // Try to delete an invalid docId, yet, within range\n      // of the final bits of the BitVector:\n\n      boolean gotException = false;\n      try {\n        reader.deleteDocument(11);\n      } catch (ArrayIndexOutOfBoundsException e) {\n        gotException = true;\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n\n      // We must add more docs to get a new segment written\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n\n      // Without the fix for LUCENE-140 this call will\n      // [incorrectly] hit a \"docs out of order\"\n      // IllegalStateException because above out-of-bounds\n      // deleteDocument corrupted the index:\n      writer.optimize();\n      writer.close();\n      if (!gotException) {\n        fail(\"delete of out-of-bounds doc number failed to hit exception\");\n      }\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testDocsOutOfOrderJIRA140().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testDocsOutOfOrderJIRA140().mjava","sourceNew":"    public void testDocsOutOfOrderJIRA140() throws IOException {\n      Directory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n      writer.close();\n      IndexReader reader = IndexReader.open(dir, false);\n\n      // Try to delete an invalid docId, yet, within range\n      // of the final bits of the BitVector:\n\n      boolean gotException = false;\n      try {\n        reader.deleteDocument(11);\n      } catch (ArrayIndexOutOfBoundsException e) {\n        gotException = true;\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n\n      // We must add more docs to get a new segment written\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n\n      // Without the fix for LUCENE-140 this call will\n      // [incorrectly] hit a \"docs out of order\"\n      // IllegalStateException because above out-of-bounds\n      // deleteDocument corrupted the index:\n      writer.optimize();\n      writer.close();\n      if (!gotException) {\n        fail(\"delete of out-of-bounds doc number failed to hit exception\");\n      }\n      dir.close();\n    }\n\n","sourceOld":"    public void testDocsOutOfOrderJIRA140() throws IOException {\n      Directory dir = new MockRAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n      writer.close();\n      IndexReader reader = IndexReader.open(dir, false);\n\n      // Try to delete an invalid docId, yet, within range\n      // of the final bits of the BitVector:\n\n      boolean gotException = false;\n      try {\n        reader.deleteDocument(11);\n      } catch (ArrayIndexOutOfBoundsException e) {\n        gotException = true;\n      }\n      reader.close();\n\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n\n      // We must add more docs to get a new segment written\n      for(int i=0;i<11;i++) {\n        addDoc(writer, \"aaa\");\n      }\n\n      // Without the fix for LUCENE-140 this call will\n      // [incorrectly] hit a \"docs out of order\"\n      // IllegalStateException because above out-of-bounds\n      // deleteDocument corrupted the index:\n      writer.optimize();\n      writer.close();\n      if (!gotException) {\n        fail(\"delete of out-of-bounds doc number failed to hit exception\");\n      }\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fcf637fee66c296142fb5989e338efc018320655":["0e5554d2be0131fc1ce32526016ce4dcc90650e4"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["c4ff8864209d2e972cb4393600c26082f9a6533d","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"c4ff8864209d2e972cb4393600c26082f9a6533d":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["d72db039743bd6a2da9be6306f57c71654ca1bf6"],"0e5554d2be0131fc1ce32526016ce4dcc90650e4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d72db039743bd6a2da9be6306f57c71654ca1bf6":["fcf637fee66c296142fb5989e338efc018320655"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"fcf637fee66c296142fb5989e338efc018320655":["d72db039743bd6a2da9be6306f57c71654ca1bf6"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"c4ff8864209d2e972cb4393600c26082f9a6533d":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"0e5554d2be0131fc1ce32526016ce4dcc90650e4":["fcf637fee66c296142fb5989e338efc018320655"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0e5554d2be0131fc1ce32526016ce4dcc90650e4"],"d72db039743bd6a2da9be6306f57c71654ca1bf6":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}