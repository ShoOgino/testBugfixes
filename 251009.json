{"path":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestJdbcDataSource#testBasic().mjava","commits":[{"id":"fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead","date":1286986267,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestJdbcDataSource#testBasic().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestJdbcDataSource#basic().mjava","sourceNew":"  @Test\n  @Ignore\n  public void testBasic() throws Exception {\n    JdbcDataSource dataSource = new JdbcDataSource();\n    Properties p = new Properties();\n    p.put(\"driver\", \"com.mysql.jdbc.Driver\");\n    p.put(\"url\", \"jdbc:mysql://localhost/autos\");\n    p.put(\"user\", \"root\");\n    p.put(\"password\", \"\");\n\n    List<Map<String, String>> flds = new ArrayList<Map<String, String>>();\n    Map<String, String> f = new HashMap<String, String>();\n    f.put(\"column\", \"trim_id\");\n    f.put(\"type\", \"long\");\n    flds.add(f);\n    f = new HashMap<String, String>();\n    f.put(\"column\", \"msrp\");\n    f.put(\"type\", \"float\");\n    flds.add(f);\n\n    Context c = getContext(null, null,\n            dataSource, Context.FULL_DUMP, flds, null);\n    dataSource.init(c, p);\n    Iterator<Map<String, Object>> i = dataSource\n            .getData(\"select make,model,year,msrp,trim_id from atrimlisting where make='Acura'\");\n    int count = 0;\n    Object msrp = null;\n    Object trim_id = null;\n    while (i.hasNext()) {\n      Map<String, Object> map = i.next();\n      msrp = map.get(\"msrp\");\n      trim_id = map.get(\"trim_id\");\n      count++;\n    }\n    assertEquals(5, count);\n    assertEquals(Float.class, msrp.getClass());\n    assertEquals(Long.class, trim_id.getClass());\n  }\n\n","sourceOld":"  @Test\n  @Ignore\n  public void basic() throws Exception {\n    JdbcDataSource dataSource = new JdbcDataSource();\n    Properties p = new Properties();\n    p.put(\"driver\", \"com.mysql.jdbc.Driver\");\n    p.put(\"url\", \"jdbc:mysql://localhost/autos\");\n    p.put(\"user\", \"root\");\n    p.put(\"password\", \"\");\n\n    List<Map<String, String>> flds = new ArrayList<Map<String, String>>();\n    Map<String, String> f = new HashMap<String, String>();\n    f.put(\"column\", \"trim_id\");\n    f.put(\"type\", \"long\");\n    flds.add(f);\n    f = new HashMap<String, String>();\n    f.put(\"column\", \"msrp\");\n    f.put(\"type\", \"float\");\n    flds.add(f);\n\n    Context c = AbstractDataImportHandlerTestCase.getContext(null, null,\n            dataSource, Context.FULL_DUMP, flds, null);\n    dataSource.init(c, p);\n    Iterator<Map<String, Object>> i = dataSource\n            .getData(\"select make,model,year,msrp,trim_id from atrimlisting where make='Acura'\");\n    int count = 0;\n    Object msrp = null;\n    Object trim_id = null;\n    while (i.hasNext()) {\n      Map<String, Object> map = i.next();\n      msrp = map.get(\"msrp\");\n      trim_id = map.get(\"trim_id\");\n      count++;\n    }\n    Assert.assertEquals(5, count);\n    Assert.assertEquals(Float.class, msrp.getClass());\n    Assert.assertEquals(Long.class, trim_id.getClass());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2555e2089fb3d858b136a15d66482ae020ac08e9","date":1287230913,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestJdbcDataSource#testBasic().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestJdbcDataSource#testBasic().mjava","sourceNew":"  @Test\n  @Ignore(\"Needs a Mock database server to work\")\n  public void testBasic() throws Exception {\n    JdbcDataSource dataSource = new JdbcDataSource();\n    Properties p = new Properties();\n    p.put(\"driver\", \"com.mysql.jdbc.Driver\");\n    p.put(\"url\", \"jdbc:mysql://localhost/autos\");\n    p.put(\"user\", \"root\");\n    p.put(\"password\", \"\");\n\n    List<Map<String, String>> flds = new ArrayList<Map<String, String>>();\n    Map<String, String> f = new HashMap<String, String>();\n    f.put(\"column\", \"trim_id\");\n    f.put(\"type\", \"long\");\n    flds.add(f);\n    f = new HashMap<String, String>();\n    f.put(\"column\", \"msrp\");\n    f.put(\"type\", \"float\");\n    flds.add(f);\n\n    Context c = getContext(null, null,\n            dataSource, Context.FULL_DUMP, flds, null);\n    dataSource.init(c, p);\n    Iterator<Map<String, Object>> i = dataSource\n            .getData(\"select make,model,year,msrp,trim_id from atrimlisting where make='Acura'\");\n    int count = 0;\n    Object msrp = null;\n    Object trim_id = null;\n    while (i.hasNext()) {\n      Map<String, Object> map = i.next();\n      msrp = map.get(\"msrp\");\n      trim_id = map.get(\"trim_id\");\n      count++;\n    }\n    assertEquals(5, count);\n    assertEquals(Float.class, msrp.getClass());\n    assertEquals(Long.class, trim_id.getClass());\n  }\n\n","sourceOld":"  @Test\n  @Ignore\n  public void testBasic() throws Exception {\n    JdbcDataSource dataSource = new JdbcDataSource();\n    Properties p = new Properties();\n    p.put(\"driver\", \"com.mysql.jdbc.Driver\");\n    p.put(\"url\", \"jdbc:mysql://localhost/autos\");\n    p.put(\"user\", \"root\");\n    p.put(\"password\", \"\");\n\n    List<Map<String, String>> flds = new ArrayList<Map<String, String>>();\n    Map<String, String> f = new HashMap<String, String>();\n    f.put(\"column\", \"trim_id\");\n    f.put(\"type\", \"long\");\n    flds.add(f);\n    f = new HashMap<String, String>();\n    f.put(\"column\", \"msrp\");\n    f.put(\"type\", \"float\");\n    flds.add(f);\n\n    Context c = getContext(null, null,\n            dataSource, Context.FULL_DUMP, flds, null);\n    dataSource.init(c, p);\n    Iterator<Map<String, Object>> i = dataSource\n            .getData(\"select make,model,year,msrp,trim_id from atrimlisting where make='Acura'\");\n    int count = 0;\n    Object msrp = null;\n    Object trim_id = null;\n    while (i.hasNext()) {\n      Map<String, Object> map = i.next();\n      msrp = map.get(\"msrp\");\n      trim_id = map.get(\"trim_id\");\n      count++;\n    }\n    assertEquals(5, count);\n    assertEquals(Float.class, msrp.getClass());\n    assertEquals(Long.class, trim_id.getClass());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestJdbcDataSource#testBasic().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestJdbcDataSource#basic().mjava","sourceNew":"  @Test\n  @Ignore(\"Needs a Mock database server to work\")\n  public void testBasic() throws Exception {\n    JdbcDataSource dataSource = new JdbcDataSource();\n    Properties p = new Properties();\n    p.put(\"driver\", \"com.mysql.jdbc.Driver\");\n    p.put(\"url\", \"jdbc:mysql://localhost/autos\");\n    p.put(\"user\", \"root\");\n    p.put(\"password\", \"\");\n\n    List<Map<String, String>> flds = new ArrayList<Map<String, String>>();\n    Map<String, String> f = new HashMap<String, String>();\n    f.put(\"column\", \"trim_id\");\n    f.put(\"type\", \"long\");\n    flds.add(f);\n    f = new HashMap<String, String>();\n    f.put(\"column\", \"msrp\");\n    f.put(\"type\", \"float\");\n    flds.add(f);\n\n    Context c = getContext(null, null,\n            dataSource, Context.FULL_DUMP, flds, null);\n    dataSource.init(c, p);\n    Iterator<Map<String, Object>> i = dataSource\n            .getData(\"select make,model,year,msrp,trim_id from atrimlisting where make='Acura'\");\n    int count = 0;\n    Object msrp = null;\n    Object trim_id = null;\n    while (i.hasNext()) {\n      Map<String, Object> map = i.next();\n      msrp = map.get(\"msrp\");\n      trim_id = map.get(\"trim_id\");\n      count++;\n    }\n    assertEquals(5, count);\n    assertEquals(Float.class, msrp.getClass());\n    assertEquals(Long.class, trim_id.getClass());\n  }\n\n","sourceOld":"  @Test\n  @Ignore\n  public void basic() throws Exception {\n    JdbcDataSource dataSource = new JdbcDataSource();\n    Properties p = new Properties();\n    p.put(\"driver\", \"com.mysql.jdbc.Driver\");\n    p.put(\"url\", \"jdbc:mysql://localhost/autos\");\n    p.put(\"user\", \"root\");\n    p.put(\"password\", \"\");\n\n    List<Map<String, String>> flds = new ArrayList<Map<String, String>>();\n    Map<String, String> f = new HashMap<String, String>();\n    f.put(\"column\", \"trim_id\");\n    f.put(\"type\", \"long\");\n    flds.add(f);\n    f = new HashMap<String, String>();\n    f.put(\"column\", \"msrp\");\n    f.put(\"type\", \"float\");\n    flds.add(f);\n\n    Context c = AbstractDataImportHandlerTestCase.getContext(null, null,\n            dataSource, Context.FULL_DUMP, flds, null);\n    dataSource.init(c, p);\n    Iterator<Map<String, Object>> i = dataSource\n            .getData(\"select make,model,year,msrp,trim_id from atrimlisting where make='Acura'\");\n    int count = 0;\n    Object msrp = null;\n    Object trim_id = null;\n    while (i.hasNext()) {\n      Map<String, Object> map = i.next();\n      msrp = map.get(\"msrp\");\n      trim_id = map.get(\"trim_id\");\n      count++;\n    }\n    Assert.assertEquals(5, count);\n    Assert.assertEquals(Float.class, msrp.getClass());\n    Assert.assertEquals(Long.class, trim_id.getClass());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestJdbcDataSource#testBasic().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @Ignore(\"Needs a Mock database server to work\")\n  public void testBasic() throws Exception {\n    JdbcDataSource dataSource = new JdbcDataSource();\n    Properties p = new Properties();\n    p.put(\"driver\", \"com.mysql.jdbc.Driver\");\n    p.put(\"url\", \"jdbc:mysql://localhost/autos\");\n    p.put(\"user\", \"root\");\n    p.put(\"password\", \"\");\n\n    List<Map<String, String>> flds = new ArrayList<Map<String, String>>();\n    Map<String, String> f = new HashMap<String, String>();\n    f.put(\"column\", \"trim_id\");\n    f.put(\"type\", \"long\");\n    flds.add(f);\n    f = new HashMap<String, String>();\n    f.put(\"column\", \"msrp\");\n    f.put(\"type\", \"float\");\n    flds.add(f);\n\n    Context c = getContext(null, null,\n            dataSource, Context.FULL_DUMP, flds, null);\n    dataSource.init(c, p);\n    Iterator<Map<String, Object>> i = dataSource\n            .getData(\"select make,model,year,msrp,trim_id from atrimlisting where make='Acura'\");\n    int count = 0;\n    Object msrp = null;\n    Object trim_id = null;\n    while (i.hasNext()) {\n      Map<String, Object> map = i.next();\n      msrp = map.get(\"msrp\");\n      trim_id = map.get(\"trim_id\");\n      count++;\n    }\n    assertEquals(5, count);\n    assertEquals(Float.class, msrp.getClass());\n    assertEquals(Long.class, trim_id.getClass());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testBasic().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestJdbcDataSource#testBasic().mjava","sourceNew":"  @Test\n  @Ignore(\"Needs a Mock database server to work\")\n  public void testBasic() throws Exception {\n    JdbcDataSource dataSource = new JdbcDataSource();\n    Properties p = new Properties();\n    p.put(\"driver\", \"com.mysql.jdbc.Driver\");\n    p.put(\"url\", \"jdbc:mysql://localhost/autos\");\n    p.put(\"user\", \"root\");\n    p.put(\"password\", \"\");\n\n    List<Map<String, String>> flds = new ArrayList<Map<String, String>>();\n    Map<String, String> f = new HashMap<String, String>();\n    f.put(\"column\", \"trim_id\");\n    f.put(\"type\", \"long\");\n    flds.add(f);\n    f = new HashMap<String, String>();\n    f.put(\"column\", \"msrp\");\n    f.put(\"type\", \"float\");\n    flds.add(f);\n\n    Context c = getContext(null, null,\n            dataSource, Context.FULL_DUMP, flds, null);\n    dataSource.init(c, p);\n    Iterator<Map<String, Object>> i = dataSource\n            .getData(\"select make,model,year,msrp,trim_id from atrimlisting where make='Acura'\");\n    int count = 0;\n    Object msrp = null;\n    Object trim_id = null;\n    while (i.hasNext()) {\n      Map<String, Object> map = i.next();\n      msrp = map.get(\"msrp\");\n      trim_id = map.get(\"trim_id\");\n      count++;\n    }\n    assertEquals(5, count);\n    assertEquals(Float.class, msrp.getClass());\n    assertEquals(Long.class, trim_id.getClass());\n  }\n\n","sourceOld":"  @Test\n  @Ignore(\"Needs a Mock database server to work\")\n  public void testBasic() throws Exception {\n    JdbcDataSource dataSource = new JdbcDataSource();\n    Properties p = new Properties();\n    p.put(\"driver\", \"com.mysql.jdbc.Driver\");\n    p.put(\"url\", \"jdbc:mysql://localhost/autos\");\n    p.put(\"user\", \"root\");\n    p.put(\"password\", \"\");\n\n    List<Map<String, String>> flds = new ArrayList<Map<String, String>>();\n    Map<String, String> f = new HashMap<String, String>();\n    f.put(\"column\", \"trim_id\");\n    f.put(\"type\", \"long\");\n    flds.add(f);\n    f = new HashMap<String, String>();\n    f.put(\"column\", \"msrp\");\n    f.put(\"type\", \"float\");\n    flds.add(f);\n\n    Context c = getContext(null, null,\n            dataSource, Context.FULL_DUMP, flds, null);\n    dataSource.init(c, p);\n    Iterator<Map<String, Object>> i = dataSource\n            .getData(\"select make,model,year,msrp,trim_id from atrimlisting where make='Acura'\");\n    int count = 0;\n    Object msrp = null;\n    Object trim_id = null;\n    while (i.hasNext()) {\n      Map<String, Object> map = i.next();\n      msrp = map.get(\"msrp\");\n      trim_id = map.get(\"trim_id\");\n      count++;\n    }\n    assertEquals(5, count);\n    assertEquals(Float.class, msrp.getClass());\n    assertEquals(Long.class, trim_id.getClass());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testBasic().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestJdbcDataSource#testBasic().mjava","sourceNew":"  @Test\n  @Ignore(\"Needs a Mock database server to work\")\n  public void testBasic() throws Exception {\n    JdbcDataSource dataSource = new JdbcDataSource();\n    Properties p = new Properties();\n    p.put(\"driver\", \"com.mysql.jdbc.Driver\");\n    p.put(\"url\", \"jdbc:mysql://localhost/autos\");\n    p.put(\"user\", \"root\");\n    p.put(\"password\", \"\");\n\n    List<Map<String, String>> flds = new ArrayList<Map<String, String>>();\n    Map<String, String> f = new HashMap<String, String>();\n    f.put(\"column\", \"trim_id\");\n    f.put(\"type\", \"long\");\n    flds.add(f);\n    f = new HashMap<String, String>();\n    f.put(\"column\", \"msrp\");\n    f.put(\"type\", \"float\");\n    flds.add(f);\n\n    Context c = getContext(null, null,\n            dataSource, Context.FULL_DUMP, flds, null);\n    dataSource.init(c, p);\n    Iterator<Map<String, Object>> i = dataSource\n            .getData(\"select make,model,year,msrp,trim_id from atrimlisting where make='Acura'\");\n    int count = 0;\n    Object msrp = null;\n    Object trim_id = null;\n    while (i.hasNext()) {\n      Map<String, Object> map = i.next();\n      msrp = map.get(\"msrp\");\n      trim_id = map.get(\"trim_id\");\n      count++;\n    }\n    assertEquals(5, count);\n    assertEquals(Float.class, msrp.getClass());\n    assertEquals(Long.class, trim_id.getClass());\n  }\n\n","sourceOld":"  @Test\n  @Ignore(\"Needs a Mock database server to work\")\n  public void testBasic() throws Exception {\n    JdbcDataSource dataSource = new JdbcDataSource();\n    Properties p = new Properties();\n    p.put(\"driver\", \"com.mysql.jdbc.Driver\");\n    p.put(\"url\", \"jdbc:mysql://localhost/autos\");\n    p.put(\"user\", \"root\");\n    p.put(\"password\", \"\");\n\n    List<Map<String, String>> flds = new ArrayList<Map<String, String>>();\n    Map<String, String> f = new HashMap<String, String>();\n    f.put(\"column\", \"trim_id\");\n    f.put(\"type\", \"long\");\n    flds.add(f);\n    f = new HashMap<String, String>();\n    f.put(\"column\", \"msrp\");\n    f.put(\"type\", \"float\");\n    flds.add(f);\n\n    Context c = getContext(null, null,\n            dataSource, Context.FULL_DUMP, flds, null);\n    dataSource.init(c, p);\n    Iterator<Map<String, Object>> i = dataSource\n            .getData(\"select make,model,year,msrp,trim_id from atrimlisting where make='Acura'\");\n    int count = 0;\n    Object msrp = null;\n    Object trim_id = null;\n    while (i.hasNext()) {\n      Map<String, Object> map = i.next();\n      msrp = map.get(\"msrp\");\n      trim_id = map.get(\"trim_id\");\n      count++;\n    }\n    assertEquals(5, count);\n    assertEquals(Float.class, msrp.getClass());\n    assertEquals(Long.class, trim_id.getClass());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["2555e2089fb3d858b136a15d66482ae020ac08e9","2555e2089fb3d858b136a15d66482ae020ac08e9"],"c26f00b574427b55127e869b935845554afde1fa":["2555e2089fb3d858b136a15d66482ae020ac08e9","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2555e2089fb3d858b136a15d66482ae020ac08e9"],"2555e2089fb3d858b136a15d66482ae020ac08e9":["fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead"],"fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2555e2089fb3d858b136a15d66482ae020ac08e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"2555e2089fb3d858b136a15d66482ae020ac08e9":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"fcd6cfe8abcb5337766abe79cabfff7f9c1f6ead":["2555e2089fb3d858b136a15d66482ae020ac08e9"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}