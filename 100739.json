{"path":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(ReaderContext,int).mjava","commits":[{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(ReaderContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(IndexReader,int).mjava","sourceNew":"    /* Explain the score we computed for doc */\n    @Override\n    public Explanation explain(ReaderContext context, int doc) throws IOException {\n      if (disjuncts.size() == 1) return weights.get(0).explain(context,doc);\n      ComplexExplanation result = new ComplexExplanation();\n      float max = 0.0f, sum = 0.0f;\n      result.setDescription(tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\");\n      for (Weight wt : weights) {\n        Explanation e = wt.explain(context, doc);\n        if (e.isMatch()) {\n          result.setMatch(Boolean.TRUE);\n          result.addDetail(e);\n          sum += e.getValue();\n          max = Math.max(max, e.getValue());\n        }\n      }\n      result.setValue(max + (sum - max) * tieBreakerMultiplier);\n      return result;\n    }\n\n","sourceOld":"    /* Explain the score we computed for doc */\n    @Override\n    public Explanation explain(IndexReader reader, int doc) throws IOException {\n      if (disjuncts.size() == 1) return weights.get(0).explain(reader,doc);\n      ComplexExplanation result = new ComplexExplanation();\n      float max = 0.0f, sum = 0.0f;\n      result.setDescription(tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\");\n      for (Weight wt : weights) {\n        Explanation e = wt.explain(reader, doc);\n        if (e.isMatch()) {\n          result.setMatch(Boolean.TRUE);\n          result.addDetail(e);\n          sum += e.getValue();\n          max = Math.max(max, e.getValue());\n        }\n      }\n      result.setValue(max + (sum - max) * tieBreakerMultiplier);\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","date":1294747166,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(AtomicReaderContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxQuery.DisjunctionMaxWeight#explain(ReaderContext,int).mjava","sourceNew":"    /* Explain the score we computed for doc */\n    @Override\n    public Explanation explain(AtomicReaderContext context, int doc) throws IOException {\n      if (disjuncts.size() == 1) return weights.get(0).explain(context,doc);\n      ComplexExplanation result = new ComplexExplanation();\n      float max = 0.0f, sum = 0.0f;\n      result.setDescription(tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\");\n      for (Weight wt : weights) {\n        Explanation e = wt.explain(context, doc);\n        if (e.isMatch()) {\n          result.setMatch(Boolean.TRUE);\n          result.addDetail(e);\n          sum += e.getValue();\n          max = Math.max(max, e.getValue());\n        }\n      }\n      result.setValue(max + (sum - max) * tieBreakerMultiplier);\n      return result;\n    }\n\n","sourceOld":"    /* Explain the score we computed for doc */\n    @Override\n    public Explanation explain(ReaderContext context, int doc) throws IOException {\n      if (disjuncts.size() == 1) return weights.get(0).explain(context,doc);\n      ComplexExplanation result = new ComplexExplanation();\n      float max = 0.0f, sum = 0.0f;\n      result.setDescription(tieBreakerMultiplier == 0.0f ? \"max of:\" : \"max plus \" + tieBreakerMultiplier + \" times others of:\");\n      for (Weight wt : weights) {\n        Explanation e = wt.explain(context, doc);\n        if (e.isMatch()) {\n          result.setMatch(Boolean.TRUE);\n          result.addDetail(e);\n          sum += e.getValue();\n          max = Math.max(max, e.getValue());\n        }\n      }\n      result.setValue(max + (sum - max) * tieBreakerMultiplier);\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"]},"commit2Childs":{"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}