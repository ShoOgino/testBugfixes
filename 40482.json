{"path":"lucene/test-framework/src/java/org/apache/lucene/search/ScorerIndexSearcher#search(List[LeafReaderContext],Weight,Collector).mjava","commits":[{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/ScorerIndexSearcher#search(List[LeafReaderContext],Weight,Collector).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void search(List<LeafReaderContext> leaves, Weight weight, Collector collector) throws IOException {\n    for (LeafReaderContext ctx : leaves) { // search each subreader\n      // we force the use of Scorer (not BulkScorer) to make sure\n      // that the scorer passed to LeafCollector.setScorer supports\n      // Scorer.getChildren\n      Scorer scorer = weight.scorer(ctx, ctx.reader().getLiveDocs());\n      if (scorer != null) {\n        final LeafCollector leafCollector = collector.getLeafCollector(ctx);\n        leafCollector.setScorer(scorer);\n        for (int doc = scorer.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = scorer.nextDoc()) {\n          leafCollector.collect(doc);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/ScorerIndexSearcher#search(List[LeafReaderContext],Weight,Collector).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/ScorerIndexSearcher#search(List[LeafReaderContext],Weight,Collector).mjava","sourceNew":"  @Override\n  protected void search(List<LeafReaderContext> leaves, Weight weight, Collector collector) throws IOException {\n    for (LeafReaderContext ctx : leaves) { // search each subreader\n      // we force the use of Scorer (not BulkScorer) to make sure\n      // that the scorer passed to LeafCollector.setScorer supports\n      // Scorer.getChildren\n      Scorer scorer = weight.scorer(ctx);\n      if (scorer != null) {\n        final LeafCollector leafCollector = collector.getLeafCollector(ctx);\n        leafCollector.setScorer(scorer);\n        final Bits liveDocs = ctx.reader().getLiveDocs();\n        for (int doc = scorer.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = scorer.nextDoc()) {\n          if (liveDocs == null || liveDocs.get(doc)) {\n            leafCollector.collect(doc);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void search(List<LeafReaderContext> leaves, Weight weight, Collector collector) throws IOException {\n    for (LeafReaderContext ctx : leaves) { // search each subreader\n      // we force the use of Scorer (not BulkScorer) to make sure\n      // that the scorer passed to LeafCollector.setScorer supports\n      // Scorer.getChildren\n      Scorer scorer = weight.scorer(ctx, ctx.reader().getLiveDocs());\n      if (scorer != null) {\n        final LeafCollector leafCollector = collector.getLeafCollector(ctx);\n        leafCollector.setScorer(scorer);\n        for (int doc = scorer.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = scorer.nextDoc()) {\n          leafCollector.collect(doc);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/ScorerIndexSearcher#search(List[LeafReaderContext],Weight,Collector).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/ScorerIndexSearcher#search(List[LeafReaderContext],Weight,Collector).mjava","sourceNew":"  @Override\n  protected void search(List<LeafReaderContext> leaves, Weight weight, Collector collector) throws IOException {\n    for (LeafReaderContext ctx : leaves) { // search each subreader\n      // we force the use of Scorer (not BulkScorer) to make sure\n      // that the scorer passed to LeafCollector.setScorer supports\n      // Scorer.getChildren\n      Scorer scorer = weight.scorer(ctx);\n      if (scorer != null) {\n        final DocIdSetIterator iterator = scorer.iterator();\n        final LeafCollector leafCollector = collector.getLeafCollector(ctx);\n        leafCollector.setScorer(scorer);\n        final Bits liveDocs = ctx.reader().getLiveDocs();\n        for (int doc = iterator.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = iterator.nextDoc()) {\n          if (liveDocs == null || liveDocs.get(doc)) {\n            leafCollector.collect(doc);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void search(List<LeafReaderContext> leaves, Weight weight, Collector collector) throws IOException {\n    for (LeafReaderContext ctx : leaves) { // search each subreader\n      // we force the use of Scorer (not BulkScorer) to make sure\n      // that the scorer passed to LeafCollector.setScorer supports\n      // Scorer.getChildren\n      Scorer scorer = weight.scorer(ctx);\n      if (scorer != null) {\n        final LeafCollector leafCollector = collector.getLeafCollector(ctx);\n        leafCollector.setScorer(scorer);\n        final Bits liveDocs = ctx.reader().getLiveDocs();\n        for (int doc = scorer.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = scorer.nextDoc()) {\n          if (liveDocs == null || liveDocs.get(doc)) {\n            leafCollector.collect(doc);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dd748bb245633a8195281556bb0e68a6ea97d18":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dd748bb245633a8195281556bb0e68a6ea97d18"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}