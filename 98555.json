{"path":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,Path,String,JettyConfig,ZkTestServer).mjava","commits":[{"id":"f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54","date":1446047031,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,Path,String,JettyConfig,ZkTestServer).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,File,File[],File,JettyConfig,ZkTestServer).mjava","sourceNew":"  /**\n   * Create a MiniSolrCloudCluster\n   *\n   * @param numServers number of Solr servers to start\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param jettyConfig Jetty configuration\n   * @param zkTestServer ZkTestServer to use.  If null, one will be created\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, Path baseDir, String solrXml, JettyConfig jettyConfig, ZkTestServer zkTestServer) throws Exception {\n\n    this.baseDir = baseDir;\n    this.jettyConfig = jettyConfig;\n\n    Files.createDirectories(baseDir);\n\n    this.externalZkServer = zkTestServer != null;\n    if (!externalZkServer) {\n      String zkDir = baseDir.resolve(\"zookeeper/server1/data\").toString();\n      zkTestServer = new ZkTestServer(zkDir);\n      zkTestServer.run();\n    }\n    this.zkServer = zkTestServer;\n\n    try(SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, 45000, null)) {\n      zkClient.makePath(\"/solr/solr.xml\", solrXml.getBytes(Charset.defaultCharset()), true);\n      if (jettyConfig.sslConfig != null && jettyConfig.sslConfig.isSSLMode()) {\n        zkClient.makePath(\"/solr\" + ZkStateReader.CLUSTER_PROPS, \"{'urlScheme':'https'}\".getBytes(Charsets.UTF_8), true);\n      }\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    List<Callable<JettySolrRunner>> startups = new ArrayList<>(numServers);\n    for (int i = 0; i < numServers; ++i) {\n      startups.add(new Callable<JettySolrRunner>() {\n        @Override\n        public JettySolrRunner call() throws Exception {\n          return startJettySolrRunner(newNodeName(), jettyConfig.context, jettyConfig);\n        }\n      });\n    }\n\n    Collection<Future<JettySolrRunner>> futures = executor.invokeAll(startups);\n    Exception startupError = checkForExceptions(\"Error starting up MiniSolrCloudCluster\", futures);\n    if (startupError != null) {\n      try {\n        this.shutdown();\n      }\n      catch (Throwable t) {\n        startupError.addSuppressed(t);\n      }\n      throw startupError;\n    }\n\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, 45000, null)) {\n      int numliveNodes = 0;\n      int retries = 60;\n      String liveNodesPath = \"/solr/live_nodes\";\n      // Wait up to 60 seconds for number of live_nodes to match up number of servers\n      do {\n        if (zkClient.exists(liveNodesPath, true)) {\n          numliveNodes = zkClient.getChildren(liveNodesPath, null, true).size();\n          if (numliveNodes == numServers) {\n            break;\n          }\n        }\n        retries--;\n        if (retries == 0) {\n          throw new IllegalStateException(\"Solr servers failed to register with ZK.\"\n              + \" Current count: \" + numliveNodes + \"; Expected count: \" + numServers);\n        }\n\n        Thread.sleep(1000);\n      } while (numliveNodes != numServers);\n    }\n\n    solrClient = buildSolrClient();\n  }\n\n","sourceOld":"  private MiniSolrCloudCluster(int numServers, File baseDir, File[] baseDirs, File solrXml, JettyConfig jettyConfig, ZkTestServer zkTestServer) throws Exception {\n\n    this.testDir = baseDir;\n    this.testDirs = baseDirs;\n    this.jettyConfig = jettyConfig;\n\n    this.externalZkServer = zkTestServer != null;\n    if (!externalZkServer) {\n      String zkDir = (testDir != null ? testDir : testDirs[0]).getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n      zkTestServer = new ZkTestServer(zkDir);\n      zkTestServer.run();\n    }\n    this.zkServer = zkTestServer;\n\n    try(SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, 45000, null)) {\n      zkClient.makePath(\"/solr/solr.xml\", solrXml, false, true);\n      if (jettyConfig.sslConfig != null && jettyConfig.sslConfig.isSSLMode()) {\n        zkClient.makePath(\"/solr\" + ZkStateReader.CLUSTER_PROPS, \"{'urlScheme':'https'}\".getBytes(Charsets.UTF_8), true);\n      }\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    List<Callable<JettySolrRunner>> startups = new ArrayList<>(numServers);\n    for (int i = 0; i < numServers; ++i) {\n      final Integer testDirsIdx = new Integer(i);\n      startups.add(new Callable<JettySolrRunner>() {\n        @Override\n        public JettySolrRunner call() throws Exception {\n          if (testDir != null)\n            return startJettySolrRunner(jettyConfig);\n          else\n            return startJettySolrRunner(testDirsIdx, jettyConfig.context, jettyConfig);\n        }\n      });\n    }\n\n    Collection<Future<JettySolrRunner>> futures = executor.invokeAll(startups);\n    Exception startupError = checkForExceptions(\"Error starting up MiniSolrCloudCluster\", futures);\n    if (startupError != null) {\n      try {\n        this.shutdown();\n      }\n      catch (Throwable t) {\n        startupError.addSuppressed(t);\n      }\n      throw startupError;\n    }\n\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, 45000, null)) {\n      int numliveNodes = 0;\n      int retries = 60;\n      String liveNodesPath = \"/solr/live_nodes\";\n      // Wait up to 60 seconds for number of live_nodes to match up number of servers\n      do {\n        if (zkClient.exists(liveNodesPath, true)) {\n          numliveNodes = zkClient.getChildren(liveNodesPath, null, true).size();\n          if (numliveNodes == numServers) {\n            break;\n          }\n        }\n        retries--;\n        if (retries == 0) {\n          throw new IllegalStateException(\"Solr servers failed to register with ZK.\"\n              + \" Current count: \" + numliveNodes + \"; Expected count: \" + numServers);\n        }\n\n        Thread.sleep(1000);\n      } while (numliveNodes != numServers);\n    }\n\n    solrClient = buildSolrClient();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe","date":1452379366,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,Path,String,JettyConfig,ZkTestServer).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,Path,String,JettyConfig,ZkTestServer).mjava","sourceNew":"  /**\n   * Create a MiniSolrCloudCluster\n   *\n   * @param numServers number of Solr servers to start\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param jettyConfig Jetty configuration\n   * @param zkTestServer ZkTestServer to use.  If null, one will be created\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, Path baseDir, String solrXml, JettyConfig jettyConfig, ZkTestServer zkTestServer) throws Exception {\n\n    this.baseDir = baseDir;\n    this.jettyConfig = jettyConfig;\n\n    Files.createDirectories(baseDir);\n\n    this.externalZkServer = zkTestServer != null;\n    if (!externalZkServer) {\n      String zkDir = baseDir.resolve(\"zookeeper/server1/data\").toString();\n      zkTestServer = new ZkTestServer(zkDir);\n      zkTestServer.run();\n    }\n    this.zkServer = zkTestServer;\n\n    try(SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null)) {\n      zkClient.makePath(\"/solr/solr.xml\", solrXml.getBytes(Charset.defaultCharset()), true);\n      if (jettyConfig.sslConfig != null && jettyConfig.sslConfig.isSSLMode()) {\n        zkClient.makePath(\"/solr\" + ZkStateReader.CLUSTER_PROPS, \"{'urlScheme':'https'}\".getBytes(Charsets.UTF_8), true);\n      }\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    List<Callable<JettySolrRunner>> startups = new ArrayList<>(numServers);\n    for (int i = 0; i < numServers; ++i) {\n      startups.add(new Callable<JettySolrRunner>() {\n        @Override\n        public JettySolrRunner call() throws Exception {\n          return startJettySolrRunner(newNodeName(), jettyConfig.context, jettyConfig);\n        }\n      });\n    }\n\n    Collection<Future<JettySolrRunner>> futures = executor.invokeAll(startups);\n    Exception startupError = checkForExceptions(\"Error starting up MiniSolrCloudCluster\", futures);\n    if (startupError != null) {\n      try {\n        this.shutdown();\n      }\n      catch (Throwable t) {\n        startupError.addSuppressed(t);\n      }\n      throw startupError;\n    }\n\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, 45000, null)) {\n      int numliveNodes = 0;\n      int retries = 60;\n      String liveNodesPath = \"/solr/live_nodes\";\n      // Wait up to 60 seconds for number of live_nodes to match up number of servers\n      do {\n        if (zkClient.exists(liveNodesPath, true)) {\n          numliveNodes = zkClient.getChildren(liveNodesPath, null, true).size();\n          if (numliveNodes == numServers) {\n            break;\n          }\n        }\n        retries--;\n        if (retries == 0) {\n          throw new IllegalStateException(\"Solr servers failed to register with ZK.\"\n              + \" Current count: \" + numliveNodes + \"; Expected count: \" + numServers);\n        }\n\n        Thread.sleep(1000);\n      } while (numliveNodes != numServers);\n    }\n\n    solrClient = buildSolrClient();\n  }\n\n","sourceOld":"  /**\n   * Create a MiniSolrCloudCluster\n   *\n   * @param numServers number of Solr servers to start\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param jettyConfig Jetty configuration\n   * @param zkTestServer ZkTestServer to use.  If null, one will be created\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, Path baseDir, String solrXml, JettyConfig jettyConfig, ZkTestServer zkTestServer) throws Exception {\n\n    this.baseDir = baseDir;\n    this.jettyConfig = jettyConfig;\n\n    Files.createDirectories(baseDir);\n\n    this.externalZkServer = zkTestServer != null;\n    if (!externalZkServer) {\n      String zkDir = baseDir.resolve(\"zookeeper/server1/data\").toString();\n      zkTestServer = new ZkTestServer(zkDir);\n      zkTestServer.run();\n    }\n    this.zkServer = zkTestServer;\n\n    try(SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, 45000, null)) {\n      zkClient.makePath(\"/solr/solr.xml\", solrXml.getBytes(Charset.defaultCharset()), true);\n      if (jettyConfig.sslConfig != null && jettyConfig.sslConfig.isSSLMode()) {\n        zkClient.makePath(\"/solr\" + ZkStateReader.CLUSTER_PROPS, \"{'urlScheme':'https'}\".getBytes(Charsets.UTF_8), true);\n      }\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    List<Callable<JettySolrRunner>> startups = new ArrayList<>(numServers);\n    for (int i = 0; i < numServers; ++i) {\n      startups.add(new Callable<JettySolrRunner>() {\n        @Override\n        public JettySolrRunner call() throws Exception {\n          return startJettySolrRunner(newNodeName(), jettyConfig.context, jettyConfig);\n        }\n      });\n    }\n\n    Collection<Future<JettySolrRunner>> futures = executor.invokeAll(startups);\n    Exception startupError = checkForExceptions(\"Error starting up MiniSolrCloudCluster\", futures);\n    if (startupError != null) {\n      try {\n        this.shutdown();\n      }\n      catch (Throwable t) {\n        startupError.addSuppressed(t);\n      }\n      throw startupError;\n    }\n\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, 45000, null)) {\n      int numliveNodes = 0;\n      int retries = 60;\n      String liveNodesPath = \"/solr/live_nodes\";\n      // Wait up to 60 seconds for number of live_nodes to match up number of servers\n      do {\n        if (zkClient.exists(liveNodesPath, true)) {\n          numliveNodes = zkClient.getChildren(liveNodesPath, null, true).size();\n          if (numliveNodes == numServers) {\n            break;\n          }\n        }\n        retries--;\n        if (retries == 0) {\n          throw new IllegalStateException(\"Solr servers failed to register with ZK.\"\n              + \" Current count: \" + numliveNodes + \"; Expected count: \" + numServers);\n        }\n\n        Thread.sleep(1000);\n      } while (numliveNodes != numServers);\n    }\n\n    solrClient = buildSolrClient();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"043df2e9a841864922c32756a44c939ed768cb89","date":1459876536,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,Path,String,JettyConfig,ZkTestServer).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,Path,String,JettyConfig,ZkTestServer).mjava","sourceNew":"  /**\n   * Create a MiniSolrCloudCluster\n   *\n   * @param numServers number of Solr servers to start\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param jettyConfig Jetty configuration\n   * @param zkTestServer ZkTestServer to use.  If null, one will be created\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, Path baseDir, String solrXml, JettyConfig jettyConfig, ZkTestServer zkTestServer) throws Exception {\n\n    this.baseDir = baseDir;\n    this.jettyConfig = jettyConfig;\n\n    Files.createDirectories(baseDir);\n\n    this.externalZkServer = zkTestServer != null;\n    if (!externalZkServer) {\n      String zkDir = baseDir.resolve(\"zookeeper/server1/data\").toString();\n      zkTestServer = new ZkTestServer(zkDir);\n      zkTestServer.run();\n    }\n    this.zkServer = zkTestServer;\n\n    try(SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null)) {\n      zkClient.makePath(\"/solr/solr.xml\", solrXml.getBytes(Charset.defaultCharset()), true);\n      if (jettyConfig.sslConfig != null && jettyConfig.sslConfig.isSSLMode()) {\n        zkClient.makePath(\"/solr\" + ZkStateReader.CLUSTER_PROPS, \"{'urlScheme':'https'}\".getBytes(Charsets.UTF_8), true);\n      }\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    List<Callable<JettySolrRunner>> startups = new ArrayList<>(numServers);\n    for (int i = 0; i < numServers; ++i) {\n      startups.add(() -> startJettySolrRunner(newNodeName(), jettyConfig.context, jettyConfig));\n    }\n\n    Collection<Future<JettySolrRunner>> futures = executor.invokeAll(startups);\n    Exception startupError = checkForExceptions(\"Error starting up MiniSolrCloudCluster\", futures);\n    if (startupError != null) {\n      try {\n        this.shutdown();\n      }\n      catch (Throwable t) {\n        startupError.addSuppressed(t);\n      }\n      throw startupError;\n    }\n\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, 45000, null)) {\n      int numliveNodes = 0;\n      int retries = 60;\n      String liveNodesPath = \"/solr/live_nodes\";\n      // Wait up to 60 seconds for number of live_nodes to match up number of servers\n      do {\n        if (zkClient.exists(liveNodesPath, true)) {\n          numliveNodes = zkClient.getChildren(liveNodesPath, null, true).size();\n          if (numliveNodes == numServers) {\n            break;\n          }\n        }\n        retries--;\n        if (retries == 0) {\n          throw new IllegalStateException(\"Solr servers failed to register with ZK.\"\n              + \" Current count: \" + numliveNodes + \"; Expected count: \" + numServers);\n        }\n\n        Thread.sleep(1000);\n      } while (numliveNodes != numServers);\n    }\n\n    solrClient = buildSolrClient();\n  }\n\n","sourceOld":"  /**\n   * Create a MiniSolrCloudCluster\n   *\n   * @param numServers number of Solr servers to start\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param jettyConfig Jetty configuration\n   * @param zkTestServer ZkTestServer to use.  If null, one will be created\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, Path baseDir, String solrXml, JettyConfig jettyConfig, ZkTestServer zkTestServer) throws Exception {\n\n    this.baseDir = baseDir;\n    this.jettyConfig = jettyConfig;\n\n    Files.createDirectories(baseDir);\n\n    this.externalZkServer = zkTestServer != null;\n    if (!externalZkServer) {\n      String zkDir = baseDir.resolve(\"zookeeper/server1/data\").toString();\n      zkTestServer = new ZkTestServer(zkDir);\n      zkTestServer.run();\n    }\n    this.zkServer = zkTestServer;\n\n    try(SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null)) {\n      zkClient.makePath(\"/solr/solr.xml\", solrXml.getBytes(Charset.defaultCharset()), true);\n      if (jettyConfig.sslConfig != null && jettyConfig.sslConfig.isSSLMode()) {\n        zkClient.makePath(\"/solr\" + ZkStateReader.CLUSTER_PROPS, \"{'urlScheme':'https'}\".getBytes(Charsets.UTF_8), true);\n      }\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    List<Callable<JettySolrRunner>> startups = new ArrayList<>(numServers);\n    for (int i = 0; i < numServers; ++i) {\n      startups.add(new Callable<JettySolrRunner>() {\n        @Override\n        public JettySolrRunner call() throws Exception {\n          return startJettySolrRunner(newNodeName(), jettyConfig.context, jettyConfig);\n        }\n      });\n    }\n\n    Collection<Future<JettySolrRunner>> futures = executor.invokeAll(startups);\n    Exception startupError = checkForExceptions(\"Error starting up MiniSolrCloudCluster\", futures);\n    if (startupError != null) {\n      try {\n        this.shutdown();\n      }\n      catch (Throwable t) {\n        startupError.addSuppressed(t);\n      }\n      throw startupError;\n    }\n\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, 45000, null)) {\n      int numliveNodes = 0;\n      int retries = 60;\n      String liveNodesPath = \"/solr/live_nodes\";\n      // Wait up to 60 seconds for number of live_nodes to match up number of servers\n      do {\n        if (zkClient.exists(liveNodesPath, true)) {\n          numliveNodes = zkClient.getChildren(liveNodesPath, null, true).size();\n          if (numliveNodes == numServers) {\n            break;\n          }\n        }\n        retries--;\n        if (retries == 0) {\n          throw new IllegalStateException(\"Solr servers failed to register with ZK.\"\n              + \" Current count: \" + numliveNodes + \"; Expected count: \" + numServers);\n        }\n\n        Thread.sleep(1000);\n      } while (numliveNodes != numServers);\n    }\n\n    solrClient = buildSolrClient();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6284684320a9808c41a5e43de958b2da22f89bd","date":1459977490,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,Path,String,JettyConfig,ZkTestServer).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,Path,String,JettyConfig,ZkTestServer).mjava","sourceNew":"  /**\n   * Create a MiniSolrCloudCluster\n   *\n   * @param numServers number of Solr servers to start\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param jettyConfig Jetty configuration\n   * @param zkTestServer ZkTestServer to use.  If null, one will be created\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, Path baseDir, String solrXml, JettyConfig jettyConfig, ZkTestServer zkTestServer) throws Exception {\n\n    this.baseDir = baseDir;\n    this.jettyConfig = jettyConfig;\n\n    Files.createDirectories(baseDir);\n\n    this.externalZkServer = zkTestServer != null;\n    if (!externalZkServer) {\n      String zkDir = baseDir.resolve(\"zookeeper/server1/data\").toString();\n      zkTestServer = new ZkTestServer(zkDir);\n      zkTestServer.run();\n    }\n    this.zkServer = zkTestServer;\n\n    try(SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null)) {\n      zkClient.makePath(\"/solr/solr.xml\", solrXml.getBytes(Charset.defaultCharset()), true);\n      if (jettyConfig.sslConfig != null && jettyConfig.sslConfig.isSSLMode()) {\n        zkClient.makePath(\"/solr\" + ZkStateReader.CLUSTER_PROPS, \"{'urlScheme':'https'}\".getBytes(Charsets.UTF_8), true);\n      }\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    List<Callable<JettySolrRunner>> startups = new ArrayList<>(numServers);\n    for (int i = 0; i < numServers; ++i) {\n      startups.add(() -> startJettySolrRunner(newNodeName(), jettyConfig.context, jettyConfig));\n    }\n\n    Collection<Future<JettySolrRunner>> futures = executor.invokeAll(startups);\n    Exception startupError = checkForExceptions(\"Error starting up MiniSolrCloudCluster\", futures);\n    if (startupError != null) {\n      try {\n        this.shutdown();\n      }\n      catch (Throwable t) {\n        startupError.addSuppressed(t);\n      }\n      throw startupError;\n    }\n\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, 45000, null)) {\n      int numliveNodes = 0;\n      int retries = 60;\n      String liveNodesPath = \"/solr/live_nodes\";\n      // Wait up to 60 seconds for number of live_nodes to match up number of servers\n      do {\n        if (zkClient.exists(liveNodesPath, true)) {\n          numliveNodes = zkClient.getChildren(liveNodesPath, null, true).size();\n          if (numliveNodes == numServers) {\n            break;\n          }\n        }\n        retries--;\n        if (retries == 0) {\n          throw new IllegalStateException(\"Solr servers failed to register with ZK.\"\n              + \" Current count: \" + numliveNodes + \"; Expected count: \" + numServers);\n        }\n\n        Thread.sleep(1000);\n      } while (numliveNodes != numServers);\n    }\n\n    solrClient = buildSolrClient();\n  }\n\n","sourceOld":"  /**\n   * Create a MiniSolrCloudCluster\n   *\n   * @param numServers number of Solr servers to start\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param jettyConfig Jetty configuration\n   * @param zkTestServer ZkTestServer to use.  If null, one will be created\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, Path baseDir, String solrXml, JettyConfig jettyConfig, ZkTestServer zkTestServer) throws Exception {\n\n    this.baseDir = baseDir;\n    this.jettyConfig = jettyConfig;\n\n    Files.createDirectories(baseDir);\n\n    this.externalZkServer = zkTestServer != null;\n    if (!externalZkServer) {\n      String zkDir = baseDir.resolve(\"zookeeper/server1/data\").toString();\n      zkTestServer = new ZkTestServer(zkDir);\n      zkTestServer.run();\n    }\n    this.zkServer = zkTestServer;\n\n    try(SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null)) {\n      zkClient.makePath(\"/solr/solr.xml\", solrXml.getBytes(Charset.defaultCharset()), true);\n      if (jettyConfig.sslConfig != null && jettyConfig.sslConfig.isSSLMode()) {\n        zkClient.makePath(\"/solr\" + ZkStateReader.CLUSTER_PROPS, \"{'urlScheme':'https'}\".getBytes(Charsets.UTF_8), true);\n      }\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    List<Callable<JettySolrRunner>> startups = new ArrayList<>(numServers);\n    for (int i = 0; i < numServers; ++i) {\n      startups.add(new Callable<JettySolrRunner>() {\n        @Override\n        public JettySolrRunner call() throws Exception {\n          return startJettySolrRunner(newNodeName(), jettyConfig.context, jettyConfig);\n        }\n      });\n    }\n\n    Collection<Future<JettySolrRunner>> futures = executor.invokeAll(startups);\n    Exception startupError = checkForExceptions(\"Error starting up MiniSolrCloudCluster\", futures);\n    if (startupError != null) {\n      try {\n        this.shutdown();\n      }\n      catch (Throwable t) {\n        startupError.addSuppressed(t);\n      }\n      throw startupError;\n    }\n\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, 45000, null)) {\n      int numliveNodes = 0;\n      int retries = 60;\n      String liveNodesPath = \"/solr/live_nodes\";\n      // Wait up to 60 seconds for number of live_nodes to match up number of servers\n      do {\n        if (zkClient.exists(liveNodesPath, true)) {\n          numliveNodes = zkClient.getChildren(liveNodesPath, null, true).size();\n          if (numliveNodes == numServers) {\n            break;\n          }\n        }\n        retries--;\n        if (retries == 0) {\n          throw new IllegalStateException(\"Solr servers failed to register with ZK.\"\n              + \" Current count: \" + numliveNodes + \"; Expected count: \" + numServers);\n        }\n\n        Thread.sleep(1000);\n      } while (numliveNodes != numServers);\n    }\n\n    solrClient = buildSolrClient();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b4df85b7268ca40452d6c01343d8eb00ed1f70a","date":1463171656,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,Path,String,JettyConfig,ZkTestServer).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,Path,String,JettyConfig,ZkTestServer).mjava","sourceNew":"  /**\n   * Create a MiniSolrCloudCluster\n   *\n   * @param numServers number of Solr servers to start\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param jettyConfig Jetty configuration\n   * @param zkTestServer ZkTestServer to use.  If null, one will be created\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, Path baseDir, String solrXml, JettyConfig jettyConfig, ZkTestServer zkTestServer) throws Exception {\n\n    this.baseDir = Objects.requireNonNull(baseDir);\n    this.jettyConfig = Objects.requireNonNull(jettyConfig);\n\n    Files.createDirectories(baseDir);\n\n    this.externalZkServer = zkTestServer != null;\n    if (!externalZkServer) {\n      String zkDir = baseDir.resolve(\"zookeeper/server1/data\").toString();\n      zkTestServer = new ZkTestServer(zkDir);\n      zkTestServer.run();\n    }\n    this.zkServer = zkTestServer;\n\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT)) {\n      zkClient.makePath(\"/solr/solr.xml\", solrXml.getBytes(Charset.defaultCharset()), true);\n      if (jettyConfig.sslConfig != null && jettyConfig.sslConfig.isSSLMode()) {\n        zkClient.makePath(\"/solr\" + ZkStateReader.CLUSTER_PROPS, \"{'urlScheme':'https'}\".getBytes(Charsets.UTF_8), true);\n      }\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    List<Callable<JettySolrRunner>> startups = new ArrayList<>(numServers);\n    for (int i = 0; i < numServers; ++i) {\n      startups.add(() -> startJettySolrRunner(newNodeName(), jettyConfig.context, jettyConfig));\n    }\n\n    Collection<Future<JettySolrRunner>> futures = executor.invokeAll(startups);\n    Exception startupError = checkForExceptions(\"Error starting up MiniSolrCloudCluster\", futures);\n    if (startupError != null) {\n      try {\n        this.shutdown();\n      }\n      catch (Throwable t) {\n        startupError.addSuppressed(t);\n      }\n      throw startupError;\n    }\n\n    waitForAllNodes(numServers, 60);\n\n    solrClient = buildSolrClient();\n  }\n\n","sourceOld":"  /**\n   * Create a MiniSolrCloudCluster\n   *\n   * @param numServers number of Solr servers to start\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param jettyConfig Jetty configuration\n   * @param zkTestServer ZkTestServer to use.  If null, one will be created\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, Path baseDir, String solrXml, JettyConfig jettyConfig, ZkTestServer zkTestServer) throws Exception {\n\n    this.baseDir = baseDir;\n    this.jettyConfig = jettyConfig;\n\n    Files.createDirectories(baseDir);\n\n    this.externalZkServer = zkTestServer != null;\n    if (!externalZkServer) {\n      String zkDir = baseDir.resolve(\"zookeeper/server1/data\").toString();\n      zkTestServer = new ZkTestServer(zkDir);\n      zkTestServer.run();\n    }\n    this.zkServer = zkTestServer;\n\n    try(SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null)) {\n      zkClient.makePath(\"/solr/solr.xml\", solrXml.getBytes(Charset.defaultCharset()), true);\n      if (jettyConfig.sslConfig != null && jettyConfig.sslConfig.isSSLMode()) {\n        zkClient.makePath(\"/solr\" + ZkStateReader.CLUSTER_PROPS, \"{'urlScheme':'https'}\".getBytes(Charsets.UTF_8), true);\n      }\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    List<Callable<JettySolrRunner>> startups = new ArrayList<>(numServers);\n    for (int i = 0; i < numServers; ++i) {\n      startups.add(() -> startJettySolrRunner(newNodeName(), jettyConfig.context, jettyConfig));\n    }\n\n    Collection<Future<JettySolrRunner>> futures = executor.invokeAll(startups);\n    Exception startupError = checkForExceptions(\"Error starting up MiniSolrCloudCluster\", futures);\n    if (startupError != null) {\n      try {\n        this.shutdown();\n      }\n      catch (Throwable t) {\n        startupError.addSuppressed(t);\n      }\n      throw startupError;\n    }\n\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, 45000, null)) {\n      int numliveNodes = 0;\n      int retries = 60;\n      String liveNodesPath = \"/solr/live_nodes\";\n      // Wait up to 60 seconds for number of live_nodes to match up number of servers\n      do {\n        if (zkClient.exists(liveNodesPath, true)) {\n          numliveNodes = zkClient.getChildren(liveNodesPath, null, true).size();\n          if (numliveNodes == numServers) {\n            break;\n          }\n        }\n        retries--;\n        if (retries == 0) {\n          throw new IllegalStateException(\"Solr servers failed to register with ZK.\"\n              + \" Current count: \" + numliveNodes + \"; Expected count: \" + numServers);\n        }\n\n        Thread.sleep(1000);\n      } while (numliveNodes != numServers);\n    }\n\n    solrClient = buildSolrClient();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,Path,String,JettyConfig,ZkTestServer).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,Path,String,JettyConfig,ZkTestServer).mjava","sourceNew":"  /**\n   * Create a MiniSolrCloudCluster\n   *\n   * @param numServers number of Solr servers to start\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param jettyConfig Jetty configuration\n   * @param zkTestServer ZkTestServer to use.  If null, one will be created\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, Path baseDir, String solrXml, JettyConfig jettyConfig, ZkTestServer zkTestServer) throws Exception {\n\n    this.baseDir = Objects.requireNonNull(baseDir);\n    this.jettyConfig = Objects.requireNonNull(jettyConfig);\n\n    Files.createDirectories(baseDir);\n\n    this.externalZkServer = zkTestServer != null;\n    if (!externalZkServer) {\n      String zkDir = baseDir.resolve(\"zookeeper/server1/data\").toString();\n      zkTestServer = new ZkTestServer(zkDir);\n      zkTestServer.run();\n    }\n    this.zkServer = zkTestServer;\n\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT)) {\n      zkClient.makePath(\"/solr/solr.xml\", solrXml.getBytes(Charset.defaultCharset()), true);\n      if (jettyConfig.sslConfig != null && jettyConfig.sslConfig.isSSLMode()) {\n        zkClient.makePath(\"/solr\" + ZkStateReader.CLUSTER_PROPS, \"{'urlScheme':'https'}\".getBytes(Charsets.UTF_8), true);\n      }\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    List<Callable<JettySolrRunner>> startups = new ArrayList<>(numServers);\n    for (int i = 0; i < numServers; ++i) {\n      startups.add(() -> startJettySolrRunner(newNodeName(), jettyConfig.context, jettyConfig));\n    }\n\n    Collection<Future<JettySolrRunner>> futures = executor.invokeAll(startups);\n    Exception startupError = checkForExceptions(\"Error starting up MiniSolrCloudCluster\", futures);\n    if (startupError != null) {\n      try {\n        this.shutdown();\n      }\n      catch (Throwable t) {\n        startupError.addSuppressed(t);\n      }\n      throw startupError;\n    }\n\n    waitForAllNodes(numServers, 60);\n\n    solrClient = buildSolrClient();\n  }\n\n","sourceOld":"  /**\n   * Create a MiniSolrCloudCluster\n   *\n   * @param numServers number of Solr servers to start\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param jettyConfig Jetty configuration\n   * @param zkTestServer ZkTestServer to use.  If null, one will be created\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, Path baseDir, String solrXml, JettyConfig jettyConfig, ZkTestServer zkTestServer) throws Exception {\n\n    this.baseDir = baseDir;\n    this.jettyConfig = jettyConfig;\n\n    Files.createDirectories(baseDir);\n\n    this.externalZkServer = zkTestServer != null;\n    if (!externalZkServer) {\n      String zkDir = baseDir.resolve(\"zookeeper/server1/data\").toString();\n      zkTestServer = new ZkTestServer(zkDir);\n      zkTestServer.run();\n    }\n    this.zkServer = zkTestServer;\n\n    try(SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null)) {\n      zkClient.makePath(\"/solr/solr.xml\", solrXml.getBytes(Charset.defaultCharset()), true);\n      if (jettyConfig.sslConfig != null && jettyConfig.sslConfig.isSSLMode()) {\n        zkClient.makePath(\"/solr\" + ZkStateReader.CLUSTER_PROPS, \"{'urlScheme':'https'}\".getBytes(Charsets.UTF_8), true);\n      }\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    List<Callable<JettySolrRunner>> startups = new ArrayList<>(numServers);\n    for (int i = 0; i < numServers; ++i) {\n      startups.add(() -> startJettySolrRunner(newNodeName(), jettyConfig.context, jettyConfig));\n    }\n\n    Collection<Future<JettySolrRunner>> futures = executor.invokeAll(startups);\n    Exception startupError = checkForExceptions(\"Error starting up MiniSolrCloudCluster\", futures);\n    if (startupError != null) {\n      try {\n        this.shutdown();\n      }\n      catch (Throwable t) {\n        startupError.addSuppressed(t);\n      }\n      throw startupError;\n    }\n\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, 45000, null)) {\n      int numliveNodes = 0;\n      int retries = 60;\n      String liveNodesPath = \"/solr/live_nodes\";\n      // Wait up to 60 seconds for number of live_nodes to match up number of servers\n      do {\n        if (zkClient.exists(liveNodesPath, true)) {\n          numliveNodes = zkClient.getChildren(liveNodesPath, null, true).size();\n          if (numliveNodes == numServers) {\n            break;\n          }\n        }\n        retries--;\n        if (retries == 0) {\n          throw new IllegalStateException(\"Solr servers failed to register with ZK.\"\n              + \" Current count: \" + numliveNodes + \"; Expected count: \" + numServers);\n        }\n\n        Thread.sleep(1000);\n      } while (numliveNodes != numServers);\n    }\n\n    solrClient = buildSolrClient();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,Path,String,JettyConfig,ZkTestServer).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,Path,String,JettyConfig,ZkTestServer).mjava","sourceNew":"  /**\n   * Create a MiniSolrCloudCluster\n   *\n   * @param numServers number of Solr servers to start\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param jettyConfig Jetty configuration\n   * @param zkTestServer ZkTestServer to use.  If null, one will be created\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, Path baseDir, String solrXml, JettyConfig jettyConfig, ZkTestServer zkTestServer) throws Exception {\n\n    this.baseDir = Objects.requireNonNull(baseDir);\n    this.jettyConfig = Objects.requireNonNull(jettyConfig);\n\n    Files.createDirectories(baseDir);\n\n    this.externalZkServer = zkTestServer != null;\n    if (!externalZkServer) {\n      String zkDir = baseDir.resolve(\"zookeeper/server1/data\").toString();\n      zkTestServer = new ZkTestServer(zkDir);\n      zkTestServer.run();\n    }\n    this.zkServer = zkTestServer;\n\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT)) {\n      zkClient.makePath(\"/solr/solr.xml\", solrXml.getBytes(Charset.defaultCharset()), true);\n      if (jettyConfig.sslConfig != null && jettyConfig.sslConfig.isSSLMode()) {\n        zkClient.makePath(\"/solr\" + ZkStateReader.CLUSTER_PROPS, \"{'urlScheme':'https'}\".getBytes(Charsets.UTF_8), true);\n      }\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    List<Callable<JettySolrRunner>> startups = new ArrayList<>(numServers);\n    for (int i = 0; i < numServers; ++i) {\n      startups.add(() -> startJettySolrRunner(newNodeName(), jettyConfig.context, jettyConfig));\n    }\n\n    Collection<Future<JettySolrRunner>> futures = executor.invokeAll(startups);\n    Exception startupError = checkForExceptions(\"Error starting up MiniSolrCloudCluster\", futures);\n    if (startupError != null) {\n      try {\n        this.shutdown();\n      }\n      catch (Throwable t) {\n        startupError.addSuppressed(t);\n      }\n      throw startupError;\n    }\n\n    waitForAllNodes(numServers, 60);\n\n    solrClient = buildSolrClient();\n  }\n\n","sourceOld":"  /**\n   * Create a MiniSolrCloudCluster\n   *\n   * @param numServers number of Solr servers to start\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param jettyConfig Jetty configuration\n   * @param zkTestServer ZkTestServer to use.  If null, one will be created\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, Path baseDir, String solrXml, JettyConfig jettyConfig, ZkTestServer zkTestServer) throws Exception {\n\n    this.baseDir = baseDir;\n    this.jettyConfig = jettyConfig;\n\n    Files.createDirectories(baseDir);\n\n    this.externalZkServer = zkTestServer != null;\n    if (!externalZkServer) {\n      String zkDir = baseDir.resolve(\"zookeeper/server1/data\").toString();\n      zkTestServer = new ZkTestServer(zkDir);\n      zkTestServer.run();\n    }\n    this.zkServer = zkTestServer;\n\n    try(SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null)) {\n      zkClient.makePath(\"/solr/solr.xml\", solrXml.getBytes(Charset.defaultCharset()), true);\n      if (jettyConfig.sslConfig != null && jettyConfig.sslConfig.isSSLMode()) {\n        zkClient.makePath(\"/solr\" + ZkStateReader.CLUSTER_PROPS, \"{'urlScheme':'https'}\".getBytes(Charsets.UTF_8), true);\n      }\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    List<Callable<JettySolrRunner>> startups = new ArrayList<>(numServers);\n    for (int i = 0; i < numServers; ++i) {\n      startups.add(() -> startJettySolrRunner(newNodeName(), jettyConfig.context, jettyConfig));\n    }\n\n    Collection<Future<JettySolrRunner>> futures = executor.invokeAll(startups);\n    Exception startupError = checkForExceptions(\"Error starting up MiniSolrCloudCluster\", futures);\n    if (startupError != null) {\n      try {\n        this.shutdown();\n      }\n      catch (Throwable t) {\n        startupError.addSuppressed(t);\n      }\n      throw startupError;\n    }\n\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, 45000, null)) {\n      int numliveNodes = 0;\n      int retries = 60;\n      String liveNodesPath = \"/solr/live_nodes\";\n      // Wait up to 60 seconds for number of live_nodes to match up number of servers\n      do {\n        if (zkClient.exists(liveNodesPath, true)) {\n          numliveNodes = zkClient.getChildren(liveNodesPath, null, true).size();\n          if (numliveNodes == numServers) {\n            break;\n          }\n        }\n        retries--;\n        if (retries == 0) {\n          throw new IllegalStateException(\"Solr servers failed to register with ZK.\"\n              + \" Current count: \" + numliveNodes + \"; Expected count: \" + numServers);\n        }\n\n        Thread.sleep(1000);\n      } while (numliveNodes != numServers);\n    }\n\n    solrClient = buildSolrClient();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a02c54923e5f4de08097fa9028e09e8cf5caa82","date":1475573567,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,Path,String,JettyConfig,ZkTestServer).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,Path,String,JettyConfig,ZkTestServer).mjava","sourceNew":"  /**\n   * Create a MiniSolrCloudCluster\n   *\n   * @param numServers number of Solr servers to start\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param jettyConfig Jetty configuration\n   * @param zkTestServer ZkTestServer to use.  If null, one will be created\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, Path baseDir, String solrXml, JettyConfig jettyConfig, ZkTestServer zkTestServer) throws Exception {\n\n    this.baseDir = Objects.requireNonNull(baseDir);\n    this.jettyConfig = Objects.requireNonNull(jettyConfig);\n\n    log.info(\"Starting cluster of {} servers in {}\", numServers, baseDir);\n\n    Files.createDirectories(baseDir);\n\n    this.externalZkServer = zkTestServer != null;\n    if (!externalZkServer) {\n      String zkDir = baseDir.resolve(\"zookeeper/server1/data\").toString();\n      zkTestServer = new ZkTestServer(zkDir);\n      zkTestServer.run();\n    }\n    this.zkServer = zkTestServer;\n\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT)) {\n      zkClient.makePath(\"/solr/solr.xml\", solrXml.getBytes(Charset.defaultCharset()), true);\n      if (jettyConfig.sslConfig != null && jettyConfig.sslConfig.isSSLMode()) {\n        zkClient.makePath(\"/solr\" + ZkStateReader.CLUSTER_PROPS, \"{'urlScheme':'https'}\".getBytes(Charsets.UTF_8), true);\n      }\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    List<Callable<JettySolrRunner>> startups = new ArrayList<>(numServers);\n    for (int i = 0; i < numServers; ++i) {\n      startups.add(() -> startJettySolrRunner(newNodeName(), jettyConfig.context, jettyConfig));\n    }\n\n    Collection<Future<JettySolrRunner>> futures = executor.invokeAll(startups);\n    Exception startupError = checkForExceptions(\"Error starting up MiniSolrCloudCluster\", futures);\n    if (startupError != null) {\n      try {\n        this.shutdown();\n      }\n      catch (Throwable t) {\n        startupError.addSuppressed(t);\n      }\n      throw startupError;\n    }\n\n    waitForAllNodes(numServers, 60);\n\n    solrClient = buildSolrClient();\n  }\n\n","sourceOld":"  /**\n   * Create a MiniSolrCloudCluster\n   *\n   * @param numServers number of Solr servers to start\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param jettyConfig Jetty configuration\n   * @param zkTestServer ZkTestServer to use.  If null, one will be created\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, Path baseDir, String solrXml, JettyConfig jettyConfig, ZkTestServer zkTestServer) throws Exception {\n\n    this.baseDir = Objects.requireNonNull(baseDir);\n    this.jettyConfig = Objects.requireNonNull(jettyConfig);\n\n    Files.createDirectories(baseDir);\n\n    this.externalZkServer = zkTestServer != null;\n    if (!externalZkServer) {\n      String zkDir = baseDir.resolve(\"zookeeper/server1/data\").toString();\n      zkTestServer = new ZkTestServer(zkDir);\n      zkTestServer.run();\n    }\n    this.zkServer = zkTestServer;\n\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT)) {\n      zkClient.makePath(\"/solr/solr.xml\", solrXml.getBytes(Charset.defaultCharset()), true);\n      if (jettyConfig.sslConfig != null && jettyConfig.sslConfig.isSSLMode()) {\n        zkClient.makePath(\"/solr\" + ZkStateReader.CLUSTER_PROPS, \"{'urlScheme':'https'}\".getBytes(Charsets.UTF_8), true);\n      }\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    List<Callable<JettySolrRunner>> startups = new ArrayList<>(numServers);\n    for (int i = 0; i < numServers; ++i) {\n      startups.add(() -> startJettySolrRunner(newNodeName(), jettyConfig.context, jettyConfig));\n    }\n\n    Collection<Future<JettySolrRunner>> futures = executor.invokeAll(startups);\n    Exception startupError = checkForExceptions(\"Error starting up MiniSolrCloudCluster\", futures);\n    if (startupError != null) {\n      try {\n        this.shutdown();\n      }\n      catch (Throwable t) {\n        startupError.addSuppressed(t);\n      }\n      throw startupError;\n    }\n\n    waitForAllNodes(numServers, 60);\n\n    solrClient = buildSolrClient();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1967bed916cc89da82a1c2085f27976da6d08cbd","date":1475588750,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,Path,String,JettyConfig,ZkTestServer).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,Path,String,JettyConfig,ZkTestServer).mjava","sourceNew":"  /**\n   * Create a MiniSolrCloudCluster\n   *\n   * @param numServers number of Solr servers to start\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param jettyConfig Jetty configuration\n   * @param zkTestServer ZkTestServer to use.  If null, one will be created\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, Path baseDir, String solrXml, JettyConfig jettyConfig, ZkTestServer zkTestServer) throws Exception {\n\n    this.baseDir = Objects.requireNonNull(baseDir);\n    this.jettyConfig = Objects.requireNonNull(jettyConfig);\n\n    log.info(\"Starting cluster of {} servers in {}\", numServers, baseDir);\n\n    Files.createDirectories(baseDir);\n\n    this.externalZkServer = zkTestServer != null;\n    if (!externalZkServer) {\n      String zkDir = baseDir.resolve(\"zookeeper/server1/data\").toString();\n      zkTestServer = new ZkTestServer(zkDir);\n      zkTestServer.run();\n    }\n    this.zkServer = zkTestServer;\n\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT)) {\n      zkClient.makePath(\"/solr/solr.xml\", solrXml.getBytes(Charset.defaultCharset()), true);\n      if (jettyConfig.sslConfig != null && jettyConfig.sslConfig.isSSLMode()) {\n        zkClient.makePath(\"/solr\" + ZkStateReader.CLUSTER_PROPS, \"{'urlScheme':'https'}\".getBytes(Charsets.UTF_8), true);\n      }\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    List<Callable<JettySolrRunner>> startups = new ArrayList<>(numServers);\n    for (int i = 0; i < numServers; ++i) {\n      startups.add(() -> startJettySolrRunner(newNodeName(), jettyConfig.context, jettyConfig));\n    }\n\n    Collection<Future<JettySolrRunner>> futures = executor.invokeAll(startups);\n    Exception startupError = checkForExceptions(\"Error starting up MiniSolrCloudCluster\", futures);\n    if (startupError != null) {\n      try {\n        this.shutdown();\n      }\n      catch (Throwable t) {\n        startupError.addSuppressed(t);\n      }\n      throw startupError;\n    }\n\n    waitForAllNodes(numServers, 60);\n\n    solrClient = buildSolrClient();\n  }\n\n","sourceOld":"  /**\n   * Create a MiniSolrCloudCluster\n   *\n   * @param numServers number of Solr servers to start\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param jettyConfig Jetty configuration\n   * @param zkTestServer ZkTestServer to use.  If null, one will be created\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, Path baseDir, String solrXml, JettyConfig jettyConfig, ZkTestServer zkTestServer) throws Exception {\n\n    this.baseDir = Objects.requireNonNull(baseDir);\n    this.jettyConfig = Objects.requireNonNull(jettyConfig);\n\n    Files.createDirectories(baseDir);\n\n    this.externalZkServer = zkTestServer != null;\n    if (!externalZkServer) {\n      String zkDir = baseDir.resolve(\"zookeeper/server1/data\").toString();\n      zkTestServer = new ZkTestServer(zkDir);\n      zkTestServer.run();\n    }\n    this.zkServer = zkTestServer;\n\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT)) {\n      zkClient.makePath(\"/solr/solr.xml\", solrXml.getBytes(Charset.defaultCharset()), true);\n      if (jettyConfig.sslConfig != null && jettyConfig.sslConfig.isSSLMode()) {\n        zkClient.makePath(\"/solr\" + ZkStateReader.CLUSTER_PROPS, \"{'urlScheme':'https'}\".getBytes(Charsets.UTF_8), true);\n      }\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    List<Callable<JettySolrRunner>> startups = new ArrayList<>(numServers);\n    for (int i = 0; i < numServers; ++i) {\n      startups.add(() -> startJettySolrRunner(newNodeName(), jettyConfig.context, jettyConfig));\n    }\n\n    Collection<Future<JettySolrRunner>> futures = executor.invokeAll(startups);\n    Exception startupError = checkForExceptions(\"Error starting up MiniSolrCloudCluster\", futures);\n    if (startupError != null) {\n      try {\n        this.shutdown();\n      }\n      catch (Throwable t) {\n        startupError.addSuppressed(t);\n      }\n      throw startupError;\n    }\n\n    waitForAllNodes(numServers, 60);\n\n    solrClient = buildSolrClient();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,Path,String,JettyConfig,ZkTestServer).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,Path,String,JettyConfig,ZkTestServer).mjava","sourceNew":"  /**\n   * Create a MiniSolrCloudCluster\n   *\n   * @param numServers number of Solr servers to start\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param jettyConfig Jetty configuration\n   * @param zkTestServer ZkTestServer to use.  If null, one will be created\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, Path baseDir, String solrXml, JettyConfig jettyConfig, ZkTestServer zkTestServer) throws Exception {\n\n    this.baseDir = Objects.requireNonNull(baseDir);\n    this.jettyConfig = Objects.requireNonNull(jettyConfig);\n\n    log.info(\"Starting cluster of {} servers in {}\", numServers, baseDir);\n\n    Files.createDirectories(baseDir);\n\n    this.externalZkServer = zkTestServer != null;\n    if (!externalZkServer) {\n      String zkDir = baseDir.resolve(\"zookeeper/server1/data\").toString();\n      zkTestServer = new ZkTestServer(zkDir);\n      zkTestServer.run();\n    }\n    this.zkServer = zkTestServer;\n\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT)) {\n      zkClient.makePath(\"/solr/solr.xml\", solrXml.getBytes(Charset.defaultCharset()), true);\n      if (jettyConfig.sslConfig != null && jettyConfig.sslConfig.isSSLMode()) {\n        zkClient.makePath(\"/solr\" + ZkStateReader.CLUSTER_PROPS, \"{'urlScheme':'https'}\".getBytes(Charsets.UTF_8), true);\n      }\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    List<Callable<JettySolrRunner>> startups = new ArrayList<>(numServers);\n    for (int i = 0; i < numServers; ++i) {\n      startups.add(() -> startJettySolrRunner(newNodeName(), jettyConfig.context, jettyConfig));\n    }\n\n    Collection<Future<JettySolrRunner>> futures = executor.invokeAll(startups);\n    Exception startupError = checkForExceptions(\"Error starting up MiniSolrCloudCluster\", futures);\n    if (startupError != null) {\n      try {\n        this.shutdown();\n      }\n      catch (Throwable t) {\n        startupError.addSuppressed(t);\n      }\n      throw startupError;\n    }\n\n    waitForAllNodes(numServers, 60);\n\n    solrClient = buildSolrClient();\n  }\n\n","sourceOld":"  /**\n   * Create a MiniSolrCloudCluster\n   *\n   * @param numServers number of Solr servers to start\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param jettyConfig Jetty configuration\n   * @param zkTestServer ZkTestServer to use.  If null, one will be created\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, Path baseDir, String solrXml, JettyConfig jettyConfig, ZkTestServer zkTestServer) throws Exception {\n\n    this.baseDir = baseDir;\n    this.jettyConfig = jettyConfig;\n\n    Files.createDirectories(baseDir);\n\n    this.externalZkServer = zkTestServer != null;\n    if (!externalZkServer) {\n      String zkDir = baseDir.resolve(\"zookeeper/server1/data\").toString();\n      zkTestServer = new ZkTestServer(zkDir);\n      zkTestServer.run();\n    }\n    this.zkServer = zkTestServer;\n\n    try(SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT, null)) {\n      zkClient.makePath(\"/solr/solr.xml\", solrXml.getBytes(Charset.defaultCharset()), true);\n      if (jettyConfig.sslConfig != null && jettyConfig.sslConfig.isSSLMode()) {\n        zkClient.makePath(\"/solr\" + ZkStateReader.CLUSTER_PROPS, \"{'urlScheme':'https'}\".getBytes(Charsets.UTF_8), true);\n      }\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    List<Callable<JettySolrRunner>> startups = new ArrayList<>(numServers);\n    for (int i = 0; i < numServers; ++i) {\n      startups.add(() -> startJettySolrRunner(newNodeName(), jettyConfig.context, jettyConfig));\n    }\n\n    Collection<Future<JettySolrRunner>> futures = executor.invokeAll(startups);\n    Exception startupError = checkForExceptions(\"Error starting up MiniSolrCloudCluster\", futures);\n    if (startupError != null) {\n      try {\n        this.shutdown();\n      }\n      catch (Throwable t) {\n        startupError.addSuppressed(t);\n      }\n      throw startupError;\n    }\n\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, 45000, null)) {\n      int numliveNodes = 0;\n      int retries = 60;\n      String liveNodesPath = \"/solr/live_nodes\";\n      // Wait up to 60 seconds for number of live_nodes to match up number of servers\n      do {\n        if (zkClient.exists(liveNodesPath, true)) {\n          numliveNodes = zkClient.getChildren(liveNodesPath, null, true).size();\n          if (numliveNodes == numServers) {\n            break;\n          }\n        }\n        retries--;\n        if (retries == 0) {\n          throw new IllegalStateException(\"Solr servers failed to register with ZK.\"\n              + \" Current count: \" + numliveNodes + \"; Expected count: \" + numServers);\n        }\n\n        Thread.sleep(1000);\n      } while (numliveNodes != numServers);\n    }\n\n    solrClient = buildSolrClient();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47","date":1477689538,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,Path,String,JettyConfig,ZkTestServer).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,Path,String,JettyConfig,ZkTestServer).mjava","sourceNew":"  /**\n   * Create a MiniSolrCloudCluster\n   *\n   * @param numServers number of Solr servers to start\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param jettyConfig Jetty configuration\n   * @param zkTestServer ZkTestServer to use.  If null, one will be created\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, Path baseDir, String solrXml, JettyConfig jettyConfig, ZkTestServer zkTestServer) throws Exception {\n\n    this.baseDir = Objects.requireNonNull(baseDir);\n    this.jettyConfig = Objects.requireNonNull(jettyConfig);\n\n    log.info(\"Starting cluster of {} servers in {}\", numServers, baseDir);\n\n    Files.createDirectories(baseDir);\n\n    this.externalZkServer = zkTestServer != null;\n    if (!externalZkServer) {\n      String zkDir = baseDir.resolve(\"zookeeper/server1/data\").toString();\n      zkTestServer = new ZkTestServer(zkDir);\n      zkTestServer.run();\n    }\n    this.zkServer = zkTestServer;\n\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT)) {\n      zkClient.makePath(\"/solr/solr.xml\", solrXml.getBytes(Charset.defaultCharset()), true);\n      if (jettyConfig.sslConfig != null && jettyConfig.sslConfig.isSSLMode()) {\n        zkClient.makePath(\"/solr\" + ZkStateReader.CLUSTER_PROPS, \"{'urlScheme':'https'}\".getBytes(StandardCharsets.UTF_8), true);\n      }\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    List<Callable<JettySolrRunner>> startups = new ArrayList<>(numServers);\n    for (int i = 0; i < numServers; ++i) {\n      startups.add(() -> startJettySolrRunner(newNodeName(), jettyConfig.context, jettyConfig));\n    }\n\n    Collection<Future<JettySolrRunner>> futures = executor.invokeAll(startups);\n    Exception startupError = checkForExceptions(\"Error starting up MiniSolrCloudCluster\", futures);\n    if (startupError != null) {\n      try {\n        this.shutdown();\n      }\n      catch (Throwable t) {\n        startupError.addSuppressed(t);\n      }\n      throw startupError;\n    }\n\n    waitForAllNodes(numServers, 60);\n\n    solrClient = buildSolrClient();\n  }\n\n","sourceOld":"  /**\n   * Create a MiniSolrCloudCluster\n   *\n   * @param numServers number of Solr servers to start\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param jettyConfig Jetty configuration\n   * @param zkTestServer ZkTestServer to use.  If null, one will be created\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, Path baseDir, String solrXml, JettyConfig jettyConfig, ZkTestServer zkTestServer) throws Exception {\n\n    this.baseDir = Objects.requireNonNull(baseDir);\n    this.jettyConfig = Objects.requireNonNull(jettyConfig);\n\n    log.info(\"Starting cluster of {} servers in {}\", numServers, baseDir);\n\n    Files.createDirectories(baseDir);\n\n    this.externalZkServer = zkTestServer != null;\n    if (!externalZkServer) {\n      String zkDir = baseDir.resolve(\"zookeeper/server1/data\").toString();\n      zkTestServer = new ZkTestServer(zkDir);\n      zkTestServer.run();\n    }\n    this.zkServer = zkTestServer;\n\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT)) {\n      zkClient.makePath(\"/solr/solr.xml\", solrXml.getBytes(Charset.defaultCharset()), true);\n      if (jettyConfig.sslConfig != null && jettyConfig.sslConfig.isSSLMode()) {\n        zkClient.makePath(\"/solr\" + ZkStateReader.CLUSTER_PROPS, \"{'urlScheme':'https'}\".getBytes(Charsets.UTF_8), true);\n      }\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    List<Callable<JettySolrRunner>> startups = new ArrayList<>(numServers);\n    for (int i = 0; i < numServers; ++i) {\n      startups.add(() -> startJettySolrRunner(newNodeName(), jettyConfig.context, jettyConfig));\n    }\n\n    Collection<Future<JettySolrRunner>> futures = executor.invokeAll(startups);\n    Exception startupError = checkForExceptions(\"Error starting up MiniSolrCloudCluster\", futures);\n    if (startupError != null) {\n      try {\n        this.shutdown();\n      }\n      catch (Throwable t) {\n        startupError.addSuppressed(t);\n      }\n      throw startupError;\n    }\n\n    waitForAllNodes(numServers, 60);\n\n    solrClient = buildSolrClient();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"320888923ec13b91f53082558f01f4c9960dd226","date":1477926871,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,Path,String,JettyConfig,ZkTestServer).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,Path,String,JettyConfig,ZkTestServer).mjava","sourceNew":"  /**\n   * Create a MiniSolrCloudCluster\n   *\n   * @param numServers number of Solr servers to start\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param jettyConfig Jetty configuration\n   * @param zkTestServer ZkTestServer to use.  If null, one will be created\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, Path baseDir, String solrXml, JettyConfig jettyConfig, ZkTestServer zkTestServer) throws Exception {\n\n    this.baseDir = Objects.requireNonNull(baseDir);\n    this.jettyConfig = Objects.requireNonNull(jettyConfig);\n\n    log.info(\"Starting cluster of {} servers in {}\", numServers, baseDir);\n\n    Files.createDirectories(baseDir);\n\n    this.externalZkServer = zkTestServer != null;\n    if (!externalZkServer) {\n      String zkDir = baseDir.resolve(\"zookeeper/server1/data\").toString();\n      zkTestServer = new ZkTestServer(zkDir);\n      zkTestServer.run();\n    }\n    this.zkServer = zkTestServer;\n\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT)) {\n      zkClient.makePath(\"/solr/solr.xml\", solrXml.getBytes(Charset.defaultCharset()), true);\n      if (jettyConfig.sslConfig != null && jettyConfig.sslConfig.isSSLMode()) {\n        zkClient.makePath(\"/solr\" + ZkStateReader.CLUSTER_PROPS, \"{'urlScheme':'https'}\".getBytes(StandardCharsets.UTF_8), true);\n      }\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    List<Callable<JettySolrRunner>> startups = new ArrayList<>(numServers);\n    for (int i = 0; i < numServers; ++i) {\n      startups.add(() -> startJettySolrRunner(newNodeName(), jettyConfig.context, jettyConfig));\n    }\n\n    Collection<Future<JettySolrRunner>> futures = executor.invokeAll(startups);\n    Exception startupError = checkForExceptions(\"Error starting up MiniSolrCloudCluster\", futures);\n    if (startupError != null) {\n      try {\n        this.shutdown();\n      }\n      catch (Throwable t) {\n        startupError.addSuppressed(t);\n      }\n      throw startupError;\n    }\n\n    waitForAllNodes(numServers, 60);\n\n    solrClient = buildSolrClient();\n  }\n\n","sourceOld":"  /**\n   * Create a MiniSolrCloudCluster\n   *\n   * @param numServers number of Solr servers to start\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param jettyConfig Jetty configuration\n   * @param zkTestServer ZkTestServer to use.  If null, one will be created\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, Path baseDir, String solrXml, JettyConfig jettyConfig, ZkTestServer zkTestServer) throws Exception {\n\n    this.baseDir = Objects.requireNonNull(baseDir);\n    this.jettyConfig = Objects.requireNonNull(jettyConfig);\n\n    log.info(\"Starting cluster of {} servers in {}\", numServers, baseDir);\n\n    Files.createDirectories(baseDir);\n\n    this.externalZkServer = zkTestServer != null;\n    if (!externalZkServer) {\n      String zkDir = baseDir.resolve(\"zookeeper/server1/data\").toString();\n      zkTestServer = new ZkTestServer(zkDir);\n      zkTestServer.run();\n    }\n    this.zkServer = zkTestServer;\n\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT)) {\n      zkClient.makePath(\"/solr/solr.xml\", solrXml.getBytes(Charset.defaultCharset()), true);\n      if (jettyConfig.sslConfig != null && jettyConfig.sslConfig.isSSLMode()) {\n        zkClient.makePath(\"/solr\" + ZkStateReader.CLUSTER_PROPS, \"{'urlScheme':'https'}\".getBytes(Charsets.UTF_8), true);\n      }\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    List<Callable<JettySolrRunner>> startups = new ArrayList<>(numServers);\n    for (int i = 0; i < numServers; ++i) {\n      startups.add(() -> startJettySolrRunner(newNodeName(), jettyConfig.context, jettyConfig));\n    }\n\n    Collection<Future<JettySolrRunner>> futures = executor.invokeAll(startups);\n    Exception startupError = checkForExceptions(\"Error starting up MiniSolrCloudCluster\", futures);\n    if (startupError != null) {\n      try {\n        this.shutdown();\n      }\n      catch (Throwable t) {\n        startupError.addSuppressed(t);\n      }\n      throw startupError;\n    }\n\n    waitForAllNodes(numServers, 60);\n\n    solrClient = buildSolrClient();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29887daf839649150d96855b142b76f5c45d60d2","date":1482160504,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,Path,String,JettyConfig,ZkTestServer).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,Path,String,JettyConfig,ZkTestServer).mjava","sourceNew":"  /**\n   * Create a MiniSolrCloudCluster\n   *\n   * @param numServers number of Solr servers to start\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param jettyConfig Jetty configuration\n   * @param zkTestServer ZkTestServer to use.  If null, one will be created\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, Path baseDir, String solrXml, JettyConfig jettyConfig,\n      ZkTestServer zkTestServer) throws Exception {\n    this(numServers, baseDir, solrXml, jettyConfig, zkTestServer, Optional.empty());\n  }\n\n","sourceOld":"  /**\n   * Create a MiniSolrCloudCluster\n   *\n   * @param numServers number of Solr servers to start\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param jettyConfig Jetty configuration\n   * @param zkTestServer ZkTestServer to use.  If null, one will be created\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, Path baseDir, String solrXml, JettyConfig jettyConfig, ZkTestServer zkTestServer) throws Exception {\n\n    this.baseDir = Objects.requireNonNull(baseDir);\n    this.jettyConfig = Objects.requireNonNull(jettyConfig);\n\n    log.info(\"Starting cluster of {} servers in {}\", numServers, baseDir);\n\n    Files.createDirectories(baseDir);\n\n    this.externalZkServer = zkTestServer != null;\n    if (!externalZkServer) {\n      String zkDir = baseDir.resolve(\"zookeeper/server1/data\").toString();\n      zkTestServer = new ZkTestServer(zkDir);\n      zkTestServer.run();\n    }\n    this.zkServer = zkTestServer;\n\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT)) {\n      zkClient.makePath(\"/solr/solr.xml\", solrXml.getBytes(Charset.defaultCharset()), true);\n      if (jettyConfig.sslConfig != null && jettyConfig.sslConfig.isSSLMode()) {\n        zkClient.makePath(\"/solr\" + ZkStateReader.CLUSTER_PROPS, \"{'urlScheme':'https'}\".getBytes(StandardCharsets.UTF_8), true);\n      }\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    List<Callable<JettySolrRunner>> startups = new ArrayList<>(numServers);\n    for (int i = 0; i < numServers; ++i) {\n      startups.add(() -> startJettySolrRunner(newNodeName(), jettyConfig.context, jettyConfig));\n    }\n\n    Collection<Future<JettySolrRunner>> futures = executor.invokeAll(startups);\n    Exception startupError = checkForExceptions(\"Error starting up MiniSolrCloudCluster\", futures);\n    if (startupError != null) {\n      try {\n        this.shutdown();\n      }\n      catch (Throwable t) {\n        startupError.addSuppressed(t);\n      }\n      throw startupError;\n    }\n\n    waitForAllNodes(numServers, 60);\n\n    solrClient = buildSolrClient();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,Path,String,JettyConfig,ZkTestServer).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,Path,String,JettyConfig,ZkTestServer).mjava","sourceNew":"  /**\n   * Create a MiniSolrCloudCluster\n   *\n   * @param numServers number of Solr servers to start\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param jettyConfig Jetty configuration\n   * @param zkTestServer ZkTestServer to use.  If null, one will be created\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, Path baseDir, String solrXml, JettyConfig jettyConfig,\n      ZkTestServer zkTestServer) throws Exception {\n    this(numServers, baseDir, solrXml, jettyConfig, zkTestServer, Optional.empty());\n  }\n\n","sourceOld":"  /**\n   * Create a MiniSolrCloudCluster\n   *\n   * @param numServers number of Solr servers to start\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param jettyConfig Jetty configuration\n   * @param zkTestServer ZkTestServer to use.  If null, one will be created\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, Path baseDir, String solrXml, JettyConfig jettyConfig, ZkTestServer zkTestServer) throws Exception {\n\n    this.baseDir = Objects.requireNonNull(baseDir);\n    this.jettyConfig = Objects.requireNonNull(jettyConfig);\n\n    log.info(\"Starting cluster of {} servers in {}\", numServers, baseDir);\n\n    Files.createDirectories(baseDir);\n\n    this.externalZkServer = zkTestServer != null;\n    if (!externalZkServer) {\n      String zkDir = baseDir.resolve(\"zookeeper/server1/data\").toString();\n      zkTestServer = new ZkTestServer(zkDir);\n      zkTestServer.run();\n    }\n    this.zkServer = zkTestServer;\n\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(), AbstractZkTestCase.TIMEOUT)) {\n      zkClient.makePath(\"/solr/solr.xml\", solrXml.getBytes(Charset.defaultCharset()), true);\n      if (jettyConfig.sslConfig != null && jettyConfig.sslConfig.isSSLMode()) {\n        zkClient.makePath(\"/solr\" + ZkStateReader.CLUSTER_PROPS, \"{'urlScheme':'https'}\".getBytes(StandardCharsets.UTF_8), true);\n      }\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    List<Callable<JettySolrRunner>> startups = new ArrayList<>(numServers);\n    for (int i = 0; i < numServers; ++i) {\n      startups.add(() -> startJettySolrRunner(newNodeName(), jettyConfig.context, jettyConfig));\n    }\n\n    Collection<Future<JettySolrRunner>> futures = executor.invokeAll(startups);\n    Exception startupError = checkForExceptions(\"Error starting up MiniSolrCloudCluster\", futures);\n    if (startupError != null) {\n      try {\n        this.shutdown();\n      }\n      catch (Throwable t) {\n        startupError.addSuppressed(t);\n      }\n      throw startupError;\n    }\n\n    waitForAllNodes(numServers, 60);\n\n    solrClient = buildSolrClient();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"043df2e9a841864922c32756a44c939ed768cb89":["9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe"],"29887daf839649150d96855b142b76f5c45d60d2":["c609c76a49c17e5c1c8a5d5cd2d685be9f306a47"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["d470c8182e92b264680e34081b75e70a9f2b3c89","5a02c54923e5f4de08097fa9028e09e8cf5caa82"],"9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe":["f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54"],"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"0ad30c6a479e764150a3316e57263319775f1df2":["b6284684320a9808c41a5e43de958b2da22f89bd","5b4df85b7268ca40452d6c01343d8eb00ed1f70a"],"f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"320888923ec13b91f53082558f01f4c9960dd226":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","c609c76a49c17e5c1c8a5d5cd2d685be9f306a47"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b6284684320a9808c41a5e43de958b2da22f89bd","1967bed916cc89da82a1c2085f27976da6d08cbd"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["b6284684320a9808c41a5e43de958b2da22f89bd","0ad30c6a479e764150a3316e57263319775f1df2"],"b6284684320a9808c41a5e43de958b2da22f89bd":["9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe","043df2e9a841864922c32756a44c939ed768cb89"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["320888923ec13b91f53082558f01f4c9960dd226","29887daf839649150d96855b142b76f5c45d60d2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["b6284684320a9808c41a5e43de958b2da22f89bd"],"5a02c54923e5f4de08097fa9028e09e8cf5caa82":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["29887daf839649150d96855b142b76f5c45d60d2"]},"commit2Childs":{"043df2e9a841864922c32756a44c939ed768cb89":["b6284684320a9808c41a5e43de958b2da22f89bd"],"29887daf839649150d96855b142b76f5c45d60d2":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["c609c76a49c17e5c1c8a5d5cd2d685be9f306a47","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe":["043df2e9a841864922c32756a44c939ed768cb89","b6284684320a9808c41a5e43de958b2da22f89bd"],"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47":["29887daf839649150d96855b142b76f5c45d60d2","320888923ec13b91f53082558f01f4c9960dd226"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54":["9f1a5871b8ff5e2e0c0bf62340337c7f3801cffe"],"320888923ec13b91f53082558f01f4c9960dd226":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["320888923ec13b91f53082558f01f4c9960dd226"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["1967bed916cc89da82a1c2085f27976da6d08cbd","5a02c54923e5f4de08097fa9028e09e8cf5caa82"],"b6284684320a9808c41a5e43de958b2da22f89bd":["0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","5b4df85b7268ca40452d6c01343d8eb00ed1f70a"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54"],"5a02c54923e5f4de08097fa9028e09e8cf5caa82":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["0ad30c6a479e764150a3316e57263319775f1df2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}