{"path":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean doFlush = false;\n    boolean success = false;\n    try {\n      try {\n        doFlush = docWriter.addDocument(doc, analyzer);\n        success = true;\n      } finally {\n        if (!success) {\n\n          if (infoStream != null)\n            message(\"hit exception adding document\");\n\n          synchronized (this) {\n            // If docWriter has some aborted files that were\n            // never incref'd, then we clean them up here\n            if (docWriter != null) {\n              final Collection<String> files = docWriter.abortedFiles();\n              if (files != null)\n                deleter.deleteNewFiles(files);\n            }\n          }\n        }\n      }\n      if (doFlush)\n        flush(true, false, false);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"addDocument\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean doFlush = false;\n    boolean success = false;\n    try {\n      try {\n        doFlush = docWriter.addDocument(doc, analyzer);\n        success = true;\n      } finally {\n        if (!success) {\n\n          if (infoStream != null)\n            message(\"hit exception adding document\");\n\n          synchronized (this) {\n            // If docWriter has some aborted files that were\n            // never incref'd, then we clean them up here\n            if (docWriter != null) {\n              final Collection<String> files = docWriter.abortedFiles();\n              if (files != null)\n                deleter.deleteNewFiles(files);\n            }\n          }\n        }\n      }\n      if (doFlush)\n        flush(true, false, false);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"addDocument\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#addDocument(Document,Analyzer).mjava","sourceNew":null,"sourceOld":"  /**\n   * Adds a document to this index, using the provided analyzer instead of the\n   * value of {@link #getAnalyzer()}.  If the document contains more than\n   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are\n   * discarded.\n   *\n   * <p>See {@link #addDocument(Document)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public void addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean doFlush = false;\n    boolean success = false;\n    try {\n      try {\n        doFlush = docWriter.addDocument(doc, analyzer);\n        success = true;\n      } finally {\n        if (!success) {\n\n          if (infoStream != null)\n            message(\"hit exception adding document\");\n\n          synchronized (this) {\n            // If docWriter has some aborted files that were\n            // never incref'd, then we clean them up here\n            if (docWriter != null) {\n              final Collection<String> files = docWriter.abortedFiles();\n              if (files != null)\n                deleter.deleteNewFiles(files);\n            }\n          }\n        }\n      }\n      if (doFlush)\n        flush(true, false, false);\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"addDocument\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}