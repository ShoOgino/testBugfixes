{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer#recount(FacetResultNode,ScoredDocIDs).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer#recount(FacetResultNode,ScoredDocIDs).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer#recount(FacetResultNode,ScoredDocIDs).mjava","sourceNew":"  /**\n   * Internal utility: recount for a facet result node\n   * \n   * @param fresNode\n   *          result node to be recounted\n   * @param docIds\n   *          full set of matching documents.\n   * @throws IOException\n   */\n  private void recount(FacetResultNode fresNode, ScoredDocIDs docIds)\n      throws IOException {\n    // TODO (Facet): change from void to return the new, smaller docSet, and use\n    // that for the children, as this will make their intersection ops faster.\n    // can do this only when the new set is \"sufficiently\" smaller.\n    \n    /* We need the category's path name in order to do its recounting.\n     * If it is missing, because the option to label only part of the\n     * facet results was exercise, we need to calculate them anyway, so\n     * in essence sampling with recounting spends some extra cycles for\n     * labeling results for which labels are not required. */\n    CategoryPath catPath = fresNode.getLabel(taxonomyReader); // force labeling\n\n    Term drillDownTerm = DrillDown.term(searchParams, catPath);\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n    int updatedCount = countIntersection(MultiFields.getTermDocsEnum(indexReader, liveDocs,\n                                                                     drillDownTerm.field(), drillDownTerm.bytes(),\n                                                                     false),\n                                         docIds.iterator());\n\n    fresNode.setValue(updatedCount);\n  }\n\n","sourceOld":"  /**\n   * Internal utility: recount for a facet result node\n   * \n   * @param fresNode\n   *          result node to be recounted\n   * @param docIds\n   *          full set of matching documents.\n   * @throws IOException\n   */\n  private void recount(FacetResultNode fresNode, ScoredDocIDs docIds)\n      throws IOException {\n    // TODO (Facet): change from void to return the new, smaller docSet, and use\n    // that for the children, as this will make their intersection ops faster.\n    // can do this only when the new set is \"sufficiently\" smaller.\n    \n    /* We need the category's path name in order to do its recounting.\n     * If it is missing, because the option to label only part of the\n     * facet results was exercise, we need to calculate them anyway, so\n     * in essence sampling with recounting spends some extra cycles for\n     * labeling results for which labels are not required. */\n    CategoryPath catPath = fresNode.getLabel(taxonomyReader); // force labeling\n\n    Term drillDownTerm = DrillDown.term(searchParams, catPath);\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n    int updatedCount = countIntersection(MultiFields.getTermDocsEnum(indexReader, liveDocs,\n                                                                     drillDownTerm.field(), drillDownTerm.bytes(),\n                                                                     false),\n                                         docIds.iterator());\n\n    fresNode.setValue(updatedCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer#recount(FacetResultNode,ScoredDocIDs).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer#recount(FacetResultNode,ScoredDocIDs).mjava","sourceNew":"  /**\n   * Internal utility: recount for a facet result node\n   * \n   * @param fresNode\n   *          result node to be recounted\n   * @param docIds\n   *          full set of matching documents.\n   * @throws IOException\n   */\n  private void recount(FacetResultNode fresNode, ScoredDocIDs docIds)\n      throws IOException {\n    // TODO (Facet): change from void to return the new, smaller docSet, and use\n    // that for the children, as this will make their intersection ops faster.\n    // can do this only when the new set is \"sufficiently\" smaller.\n    \n    /* We need the category's path name in order to do its recounting.\n     * If it is missing, because the option to label only part of the\n     * facet results was exercise, we need to calculate them anyway, so\n     * in essence sampling with recounting spends some extra cycles for\n     * labeling results for which labels are not required. */\n    CategoryPath catPath = fresNode.getLabel(taxonomyReader); // force labeling\n\n    Term drillDownTerm = DrillDown.term(searchParams, catPath);\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n    int updatedCount = countIntersection(MultiFields.getTermDocsEnum(indexReader, liveDocs,\n                                                                     drillDownTerm.field(), drillDownTerm.bytes(),\n                                                                     0),\n                                         docIds.iterator());\n\n    fresNode.setValue(updatedCount);\n  }\n\n","sourceOld":"  /**\n   * Internal utility: recount for a facet result node\n   * \n   * @param fresNode\n   *          result node to be recounted\n   * @param docIds\n   *          full set of matching documents.\n   * @throws IOException\n   */\n  private void recount(FacetResultNode fresNode, ScoredDocIDs docIds)\n      throws IOException {\n    // TODO (Facet): change from void to return the new, smaller docSet, and use\n    // that for the children, as this will make their intersection ops faster.\n    // can do this only when the new set is \"sufficiently\" smaller.\n    \n    /* We need the category's path name in order to do its recounting.\n     * If it is missing, because the option to label only part of the\n     * facet results was exercise, we need to calculate them anyway, so\n     * in essence sampling with recounting spends some extra cycles for\n     * labeling results for which labels are not required. */\n    CategoryPath catPath = fresNode.getLabel(taxonomyReader); // force labeling\n\n    Term drillDownTerm = DrillDown.term(searchParams, catPath);\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n    int updatedCount = countIntersection(MultiFields.getTermDocsEnum(indexReader, liveDocs,\n                                                                     drillDownTerm.field(), drillDownTerm.bytes(),\n                                                                     false),\n                                         docIds.iterator());\n\n    fresNode.setValue(updatedCount);\n  }\n\n","bugFix":["872cff1d3a554e0cd64014cd97f88d3002b0f491"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer#recount(FacetResultNode,ScoredDocIDs).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer#recount(FacetResultNode,ScoredDocIDs).mjava","sourceNew":"  /**\n   * Internal utility: recount for a facet result node\n   * \n   * @param fresNode\n   *          result node to be recounted\n   * @param docIds\n   *          full set of matching documents.\n   * @throws IOException\n   */\n  private void recount(FacetResultNode fresNode, ScoredDocIDs docIds)\n      throws IOException {\n    // TODO (Facet): change from void to return the new, smaller docSet, and use\n    // that for the children, as this will make their intersection ops faster.\n    // can do this only when the new set is \"sufficiently\" smaller.\n    \n    /* We need the category's path name in order to do its recounting.\n     * If it is missing, because the option to label only part of the\n     * facet results was exercise, we need to calculate them anyway, so\n     * in essence sampling with recounting spends some extra cycles for\n     * labeling results for which labels are not required. */\n    CategoryPath catPath = fresNode.getLabel(taxonomyReader); // force labeling\n\n    Term drillDownTerm = DrillDown.term(searchParams, catPath);\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n    int updatedCount = countIntersection(MultiFields.getTermDocsEnum(indexReader, liveDocs,\n                                                                     drillDownTerm.field(), drillDownTerm.bytes(),\n                                                                     0),\n                                         docIds.iterator());\n\n    fresNode.setValue(updatedCount);\n  }\n\n","sourceOld":"  /**\n   * Internal utility: recount for a facet result node\n   * \n   * @param fresNode\n   *          result node to be recounted\n   * @param docIds\n   *          full set of matching documents.\n   * @throws IOException\n   */\n  private void recount(FacetResultNode fresNode, ScoredDocIDs docIds)\n      throws IOException {\n    // TODO (Facet): change from void to return the new, smaller docSet, and use\n    // that for the children, as this will make their intersection ops faster.\n    // can do this only when the new set is \"sufficiently\" smaller.\n    \n    /* We need the category's path name in order to do its recounting.\n     * If it is missing, because the option to label only part of the\n     * facet results was exercise, we need to calculate them anyway, so\n     * in essence sampling with recounting spends some extra cycles for\n     * labeling results for which labels are not required. */\n    CategoryPath catPath = fresNode.getLabel(taxonomyReader); // force labeling\n\n    Term drillDownTerm = DrillDown.term(searchParams, catPath);\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n    int updatedCount = countIntersection(MultiFields.getTermDocsEnum(indexReader, liveDocs,\n                                                                     drillDownTerm.field(), drillDownTerm.bytes(),\n                                                                     false),\n                                         docIds.iterator());\n\n    fresNode.setValue(updatedCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer#recount(FacetResultNode,ScoredDocIDs).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer#recount(FacetResultNode,ScoredDocIDs).mjava","sourceNew":"  /**\n   * Internal utility: recount for a facet result node\n   * \n   * @param fresNode\n   *          result node to be recounted\n   * @param docIds\n   *          full set of matching documents.\n   * @throws IOException\n   */\n  private void recount(FacetResultNode fresNode, ScoredDocIDs docIds)\n      throws IOException {\n    // TODO (Facet): change from void to return the new, smaller docSet, and use\n    // that for the children, as this will make their intersection ops faster.\n    // can do this only when the new set is \"sufficiently\" smaller.\n    \n    /* We need the category's path name in order to do its recounting.\n     * If it is missing, because the option to label only part of the\n     * facet results was exercise, we need to calculate them anyway, so\n     * in essence sampling with recounting spends some extra cycles for\n     * labeling results for which labels are not required. */\n    CategoryPath catPath = fresNode.getLabel(taxonomyReader); // force labeling\n\n    Term drillDownTerm = DrillDown.term(searchParams, catPath);\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n    int updatedCount = countIntersection(MultiFields.getTermDocsEnum(indexReader, liveDocs,\n                                                                     drillDownTerm.field(), drillDownTerm.bytes(),\n                                                                     0),\n                                         docIds.iterator());\n\n    fresNode.setValue(updatedCount);\n  }\n\n","sourceOld":"  /**\n   * Internal utility: recount for a facet result node\n   * \n   * @param fresNode\n   *          result node to be recounted\n   * @param docIds\n   *          full set of matching documents.\n   * @throws IOException\n   */\n  private void recount(FacetResultNode fresNode, ScoredDocIDs docIds)\n      throws IOException {\n    // TODO (Facet): change from void to return the new, smaller docSet, and use\n    // that for the children, as this will make their intersection ops faster.\n    // can do this only when the new set is \"sufficiently\" smaller.\n    \n    /* We need the category's path name in order to do its recounting.\n     * If it is missing, because the option to label only part of the\n     * facet results was exercise, we need to calculate them anyway, so\n     * in essence sampling with recounting spends some extra cycles for\n     * labeling results for which labels are not required. */\n    CategoryPath catPath = fresNode.getLabel(taxonomyReader); // force labeling\n\n    Term drillDownTerm = DrillDown.term(searchParams, catPath);\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n    int updatedCount = countIntersection(MultiFields.getTermDocsEnum(indexReader, liveDocs,\n                                                                     drillDownTerm.field(), drillDownTerm.bytes(),\n                                                                     false),\n                                         docIds.iterator());\n\n    fresNode.setValue(updatedCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer#recount(FacetResultNode,ScoredDocIDs).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer#recount(FacetResultNode,ScoredDocIDs).mjava","sourceNew":"  /**\n   * Internal utility: recount for a facet result node\n   * \n   * @param fresNode\n   *          result node to be recounted\n   * @param docIds\n   *          full set of matching documents.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  private void recount(FacetResultNode fresNode, ScoredDocIDs docIds)\n      throws IOException {\n    // TODO (Facet): change from void to return the new, smaller docSet, and use\n    // that for the children, as this will make their intersection ops faster.\n    // can do this only when the new set is \"sufficiently\" smaller.\n    \n    /* We need the category's path name in order to do its recounting.\n     * If it is missing, because the option to label only part of the\n     * facet results was exercise, we need to calculate them anyway, so\n     * in essence sampling with recounting spends some extra cycles for\n     * labeling results for which labels are not required. */\n    CategoryPath catPath = fresNode.getLabel(taxonomyReader); // force labeling\n\n    Term drillDownTerm = DrillDown.term(searchParams, catPath);\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n    int updatedCount = countIntersection(MultiFields.getTermDocsEnum(indexReader, liveDocs,\n                                                                     drillDownTerm.field(), drillDownTerm.bytes(),\n                                                                     0),\n                                         docIds.iterator());\n\n    fresNode.setValue(updatedCount);\n  }\n\n","sourceOld":"  /**\n   * Internal utility: recount for a facet result node\n   * \n   * @param fresNode\n   *          result node to be recounted\n   * @param docIds\n   *          full set of matching documents.\n   * @throws IOException\n   */\n  private void recount(FacetResultNode fresNode, ScoredDocIDs docIds)\n      throws IOException {\n    // TODO (Facet): change from void to return the new, smaller docSet, and use\n    // that for the children, as this will make their intersection ops faster.\n    // can do this only when the new set is \"sufficiently\" smaller.\n    \n    /* We need the category's path name in order to do its recounting.\n     * If it is missing, because the option to label only part of the\n     * facet results was exercise, we need to calculate them anyway, so\n     * in essence sampling with recounting spends some extra cycles for\n     * labeling results for which labels are not required. */\n    CategoryPath catPath = fresNode.getLabel(taxonomyReader); // force labeling\n\n    Term drillDownTerm = DrillDown.term(searchParams, catPath);\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n    int updatedCount = countIntersection(MultiFields.getTermDocsEnum(indexReader, liveDocs,\n                                                                     drillDownTerm.field(), drillDownTerm.bytes(),\n                                                                     0),\n                                         docIds.iterator());\n\n    fresNode.setValue(updatedCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42f51b3ab4258ff4623227b0db011b8bb83db5c7","date":1358164991,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer#recount(FacetResultNode,ScoredDocIDs).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer#recount(FacetResultNode,ScoredDocIDs).mjava","sourceNew":"  /**\n   * Internal utility: recount for a facet result node\n   * \n   * @param fresNode\n   *          result node to be recounted\n   * @param docIds\n   *          full set of matching documents.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  private void recount(FacetResultNode fresNode, ScoredDocIDs docIds) throws IOException {\n    // TODO (Facet): change from void to return the new, smaller docSet, and use\n    // that for the children, as this will make their intersection ops faster.\n    // can do this only when the new set is \"sufficiently\" smaller.\n    \n    /* We need the category's path name in order to do its recounting.\n     * If it is missing, because the option to label only part of the\n     * facet results was exercise, we need to calculate them anyway, so\n     * in essence sampling with recounting spends some extra cycles for\n     * labeling results for which labels are not required. */\n    CategoryPath catPath = fresNode.getLabel(taxonomyReader); // force labeling\n\n    Term drillDownTerm = DrillDown.term(searchParams, catPath);\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n    int updatedCount = countIntersection(MultiFields.getTermDocsEnum(indexReader, liveDocs,\n                                                                     drillDownTerm.field(), drillDownTerm.bytes(),\n                                                                     0), docIds.iterator());\n\n    fresNode.setValue(updatedCount);\n  }\n\n","sourceOld":"  /**\n   * Internal utility: recount for a facet result node\n   * \n   * @param fresNode\n   *          result node to be recounted\n   * @param docIds\n   *          full set of matching documents.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  private void recount(FacetResultNode fresNode, ScoredDocIDs docIds)\n      throws IOException {\n    // TODO (Facet): change from void to return the new, smaller docSet, and use\n    // that for the children, as this will make their intersection ops faster.\n    // can do this only when the new set is \"sufficiently\" smaller.\n    \n    /* We need the category's path name in order to do its recounting.\n     * If it is missing, because the option to label only part of the\n     * facet results was exercise, we need to calculate them anyway, so\n     * in essence sampling with recounting spends some extra cycles for\n     * labeling results for which labels are not required. */\n    CategoryPath catPath = fresNode.getLabel(taxonomyReader); // force labeling\n\n    Term drillDownTerm = DrillDown.term(searchParams, catPath);\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n    int updatedCount = countIntersection(MultiFields.getTermDocsEnum(indexReader, liveDocs,\n                                                                     drillDownTerm.field(), drillDownTerm.bytes(),\n                                                                     0),\n                                         docIds.iterator());\n\n    fresNode.setValue(updatedCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer#recount(FacetResultNode,ScoredDocIDs).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer#recount(FacetResultNode,ScoredDocIDs).mjava","sourceNew":"  /**\n   * Internal utility: recount for a facet result node\n   * \n   * @param fresNode\n   *          result node to be recounted\n   * @param docIds\n   *          full set of matching documents.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  private void recount(FacetResultNode fresNode, ScoredDocIDs docIds) throws IOException {\n    // TODO (Facet): change from void to return the new, smaller docSet, and use\n    // that for the children, as this will make their intersection ops faster.\n    // can do this only when the new set is \"sufficiently\" smaller.\n    \n    /* We need the category's path name in order to do its recounting.\n     * If it is missing, because the option to label only part of the\n     * facet results was exercise, we need to calculate them anyway, so\n     * in essence sampling with recounting spends some extra cycles for\n     * labeling results for which labels are not required. */\n    CategoryPath catPath = fresNode.getLabel(taxonomyReader); // force labeling\n\n    Term drillDownTerm = DrillDown.term(searchParams, catPath);\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n    int updatedCount = countIntersection(MultiFields.getTermDocsEnum(indexReader, liveDocs,\n                                                                     drillDownTerm.field(), drillDownTerm.bytes(),\n                                                                     0), docIds.iterator());\n\n    fresNode.setValue(updatedCount);\n  }\n\n","sourceOld":"  /**\n   * Internal utility: recount for a facet result node\n   * \n   * @param fresNode\n   *          result node to be recounted\n   * @param docIds\n   *          full set of matching documents.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  private void recount(FacetResultNode fresNode, ScoredDocIDs docIds)\n      throws IOException {\n    // TODO (Facet): change from void to return the new, smaller docSet, and use\n    // that for the children, as this will make their intersection ops faster.\n    // can do this only when the new set is \"sufficiently\" smaller.\n    \n    /* We need the category's path name in order to do its recounting.\n     * If it is missing, because the option to label only part of the\n     * facet results was exercise, we need to calculate them anyway, so\n     * in essence sampling with recounting spends some extra cycles for\n     * labeling results for which labels are not required. */\n    CategoryPath catPath = fresNode.getLabel(taxonomyReader); // force labeling\n\n    Term drillDownTerm = DrillDown.term(searchParams, catPath);\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n    int updatedCount = countIntersection(MultiFields.getTermDocsEnum(indexReader, liveDocs,\n                                                                     drillDownTerm.field(), drillDownTerm.bytes(),\n                                                                     0),\n                                         docIds.iterator());\n\n    fresNode.setValue(updatedCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"811cdb4a80352766eb0c762e48972707a924e5cd","date":1358767313,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer#recount(FacetResultNode,ScoredDocIDs).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer#recount(FacetResultNode,ScoredDocIDs).mjava","sourceNew":"  /**\n   * Internal utility: recount for a facet result node\n   * \n   * @param fresNode\n   *          result node to be recounted\n   * @param docIds\n   *          full set of matching documents.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  private void recount(FacetResultNode fresNode, ScoredDocIDs docIds) throws IOException {\n    // TODO (Facet): change from void to return the new, smaller docSet, and use\n    // that for the children, as this will make their intersection ops faster.\n    // can do this only when the new set is \"sufficiently\" smaller.\n    \n    /* We need the category's path name in order to do its recounting.\n     * If it is missing, because the option to label only part of the\n     * facet results was exercise, we need to calculate them anyway, so\n     * in essence sampling with recounting spends some extra cycles for\n     * labeling results for which labels are not required. */\n    if (fresNode.label == null) {\n      fresNode.label = taxonomyReader.getPath(fresNode.ordinal);\n    }\n    CategoryPath catPath = fresNode.label;\n\n    Term drillDownTerm = DrillDown.term(searchParams, catPath);\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n    int updatedCount = countIntersection(MultiFields.getTermDocsEnum(indexReader, liveDocs,\n                                                                     drillDownTerm.field(), drillDownTerm.bytes(),\n                                                                     0), docIds.iterator());\n    fresNode.value = updatedCount;\n  }\n\n","sourceOld":"  /**\n   * Internal utility: recount for a facet result node\n   * \n   * @param fresNode\n   *          result node to be recounted\n   * @param docIds\n   *          full set of matching documents.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  private void recount(FacetResultNode fresNode, ScoredDocIDs docIds) throws IOException {\n    // TODO (Facet): change from void to return the new, smaller docSet, and use\n    // that for the children, as this will make their intersection ops faster.\n    // can do this only when the new set is \"sufficiently\" smaller.\n    \n    /* We need the category's path name in order to do its recounting.\n     * If it is missing, because the option to label only part of the\n     * facet results was exercise, we need to calculate them anyway, so\n     * in essence sampling with recounting spends some extra cycles for\n     * labeling results for which labels are not required. */\n    CategoryPath catPath = fresNode.getLabel(taxonomyReader); // force labeling\n\n    Term drillDownTerm = DrillDown.term(searchParams, catPath);\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n    int updatedCount = countIntersection(MultiFields.getTermDocsEnum(indexReader, liveDocs,\n                                                                     drillDownTerm.field(), drillDownTerm.bytes(),\n                                                                     0), docIds.iterator());\n\n    fresNode.setValue(updatedCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer#recount(FacetResultNode,ScoredDocIDs).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer#recount(FacetResultNode,ScoredDocIDs).mjava","sourceNew":"  /**\n   * Internal utility: recount for a facet result node\n   * \n   * @param fresNode\n   *          result node to be recounted\n   * @param docIds\n   *          full set of matching documents.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  private void recount(FacetResultNode fresNode, ScoredDocIDs docIds) throws IOException {\n    // TODO (Facet): change from void to return the new, smaller docSet, and use\n    // that for the children, as this will make their intersection ops faster.\n    // can do this only when the new set is \"sufficiently\" smaller.\n    \n    /* We need the category's path name in order to do its recounting.\n     * If it is missing, because the option to label only part of the\n     * facet results was exercise, we need to calculate them anyway, so\n     * in essence sampling with recounting spends some extra cycles for\n     * labeling results for which labels are not required. */\n    if (fresNode.label == null) {\n      fresNode.label = taxonomyReader.getPath(fresNode.ordinal);\n    }\n    CategoryPath catPath = fresNode.label;\n\n    Term drillDownTerm = DrillDown.term(searchParams, catPath);\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n    int updatedCount = countIntersection(MultiFields.getTermDocsEnum(indexReader, liveDocs,\n                                                                     drillDownTerm.field(), drillDownTerm.bytes(),\n                                                                     0), docIds.iterator());\n    fresNode.value = updatedCount;\n  }\n\n","sourceOld":"  /**\n   * Internal utility: recount for a facet result node\n   * \n   * @param fresNode\n   *          result node to be recounted\n   * @param docIds\n   *          full set of matching documents.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  private void recount(FacetResultNode fresNode, ScoredDocIDs docIds) throws IOException {\n    // TODO (Facet): change from void to return the new, smaller docSet, and use\n    // that for the children, as this will make their intersection ops faster.\n    // can do this only when the new set is \"sufficiently\" smaller.\n    \n    /* We need the category's path name in order to do its recounting.\n     * If it is missing, because the option to label only part of the\n     * facet results was exercise, we need to calculate them anyway, so\n     * in essence sampling with recounting spends some extra cycles for\n     * labeling results for which labels are not required. */\n    CategoryPath catPath = fresNode.getLabel(taxonomyReader); // force labeling\n\n    Term drillDownTerm = DrillDown.term(searchParams, catPath);\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n    int updatedCount = countIntersection(MultiFields.getTermDocsEnum(indexReader, liveDocs,\n                                                                     drillDownTerm.field(), drillDownTerm.bytes(),\n                                                                     0), docIds.iterator());\n\n    fresNode.setValue(updatedCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sampling/TakmiSampleFixer#recount(FacetResultNode,ScoredDocIDs).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer#recount(FacetResultNode,ScoredDocIDs).mjava","sourceNew":"  /**\n   * Internal utility: recount for a facet result node\n   * \n   * @param fresNode\n   *          result node to be recounted\n   * @param docIds\n   *          full set of matching documents.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  private void recount(FacetResultNode fresNode, ScoredDocIDs docIds) throws IOException {\n    // TODO (Facet): change from void to return the new, smaller docSet, and use\n    // that for the children, as this will make their intersection ops faster.\n    // can do this only when the new set is \"sufficiently\" smaller.\n    \n    /* We need the category's path name in order to do its recounting.\n     * If it is missing, because the option to label only part of the\n     * facet results was exercise, we need to calculate them anyway, so\n     * in essence sampling with recounting spends some extra cycles for\n     * labeling results for which labels are not required. */\n    if (fresNode.label == null) {\n      fresNode.label = taxonomyReader.getPath(fresNode.ordinal);\n    }\n    CategoryPath catPath = fresNode.label;\n\n    Term drillDownTerm = DrillDown.term(searchParams, catPath);\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n    int updatedCount = countIntersection(MultiFields.getTermDocsEnum(indexReader, liveDocs,\n                                                                     drillDownTerm.field(), drillDownTerm.bytes(),\n                                                                     0), docIds.iterator());\n    fresNode.value = updatedCount;\n  }\n\n","sourceOld":"  /**\n   * Internal utility: recount for a facet result node\n   * \n   * @param fresNode\n   *          result node to be recounted\n   * @param docIds\n   *          full set of matching documents.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  private void recount(FacetResultNode fresNode, ScoredDocIDs docIds) throws IOException {\n    // TODO (Facet): change from void to return the new, smaller docSet, and use\n    // that for the children, as this will make their intersection ops faster.\n    // can do this only when the new set is \"sufficiently\" smaller.\n    \n    /* We need the category's path name in order to do its recounting.\n     * If it is missing, because the option to label only part of the\n     * facet results was exercise, we need to calculate them anyway, so\n     * in essence sampling with recounting spends some extra cycles for\n     * labeling results for which labels are not required. */\n    if (fresNode.label == null) {\n      fresNode.label = taxonomyReader.getPath(fresNode.ordinal);\n    }\n    CategoryPath catPath = fresNode.label;\n\n    Term drillDownTerm = DrillDown.term(searchParams, catPath);\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n    int updatedCount = countIntersection(MultiFields.getTermDocsEnum(indexReader, liveDocs,\n                                                                     drillDownTerm.field(), drillDownTerm.bytes(),\n                                                                     0), docIds.iterator());\n    fresNode.value = updatedCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["02331260bb246364779cb6f04919ca47900d01bb"],"607428da722dcb3e86bbd11c63de8986e6275c36":["811cdb4a80352766eb0c762e48972707a924e5cd"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"42f51b3ab4258ff4623227b0db011b8bb83db5c7":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["b89678825b68eccaf09e6ab71675fc0b0af1e099","02331260bb246364779cb6f04919ca47900d01bb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","02331260bb246364779cb6f04919ca47900d01bb"],"07155cdd910937cdf6877e48884d5782845c8b8b":["8917bfede3b4ca30f4305c1e391e9218959cd723","811cdb4a80352766eb0c762e48972707a924e5cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"],"811cdb4a80352766eb0c762e48972707a924e5cd":["42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"02331260bb246364779cb6f04919ca47900d01bb":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["42f51b3ab4258ff4623227b0db011b8bb83db5c7","8917bfede3b4ca30f4305c1e391e9218959cd723"],"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","02331260bb246364779cb6f04919ca47900d01bb"],"42f51b3ab4258ff4623227b0db011b8bb83db5c7":["8917bfede3b4ca30f4305c1e391e9218959cd723","811cdb4a80352766eb0c762e48972707a924e5cd"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["07155cdd910937cdf6877e48884d5782845c8b8b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"07155cdd910937cdf6877e48884d5782845c8b8b":[],"02331260bb246364779cb6f04919ca47900d01bb":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"811cdb4a80352766eb0c762e48972707a924e5cd":["607428da722dcb3e86bbd11c63de8986e6275c36","07155cdd910937cdf6877e48884d5782845c8b8b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","07155cdd910937cdf6877e48884d5782845c8b8b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}