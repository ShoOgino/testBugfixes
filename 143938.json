{"path":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#verifyShards(int[],TopGroups[BytesRef]).mjava","commits":[{"id":"d4aa50b979cd392e00e5bc0f23f78cbd106cb968","date":1308150768,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#verifyShards(int[],TopGroups[BytesRef]).mjava","pathOld":"/dev/null","sourceNew":"  private void verifyShards(int[] docStarts, TopGroups<BytesRef> topGroups) {\n    for(GroupDocs group : topGroups.groups) {\n      assertTrue(group instanceof GroupDocsAndShards);\n      GroupDocsAndShards withShards = (GroupDocsAndShards) group;\n      for(int hitIDX=0;hitIDX<withShards.scoreDocs.length;hitIDX++) {\n        final ScoreDoc sd = withShards.scoreDocs[hitIDX];\n        assertEquals(\"doc=\" + sd.doc + \" wrong shard\",\n                     ReaderUtil.subIndex(sd.doc, docStarts),\n                     withShards.shardIndex[hitIDX]);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5d731d304e051cf7ed37410c1431e942f41c09b","date":1308235976,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#verifyShards(int[],TopGroups[BytesRef]).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#verifyShards(int[],TopGroups[BytesRef]).mjava","sourceNew":"  private void verifyShards(int[] docStarts, TopGroups<BytesRef> topGroups) {\n    for(GroupDocs group : topGroups.groups) {\n      for(int hitIDX=0;hitIDX<group.scoreDocs.length;hitIDX++) {\n        final ScoreDoc sd = group.scoreDocs[hitIDX];\n        assertEquals(\"doc=\" + sd.doc + \" wrong shard\",\n                     ReaderUtil.subIndex(sd.doc, docStarts),\n                     sd.shardIndex);\n      }\n    }\n  }\n\n","sourceOld":"  private void verifyShards(int[] docStarts, TopGroups<BytesRef> topGroups) {\n    for(GroupDocs group : topGroups.groups) {\n      assertTrue(group instanceof GroupDocsAndShards);\n      GroupDocsAndShards withShards = (GroupDocsAndShards) group;\n      for(int hitIDX=0;hitIDX<withShards.scoreDocs.length;hitIDX++) {\n        final ScoreDoc sd = withShards.scoreDocs[hitIDX];\n        assertEquals(\"doc=\" + sd.doc + \" wrong shard\",\n                     ReaderUtil.subIndex(sd.doc, docStarts),\n                     withShards.shardIndex[hitIDX]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","date":1308291005,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#verifyShards(int[],TopGroups[BytesRef]).mjava","pathOld":"/dev/null","sourceNew":"  private void verifyShards(int[] docStarts, TopGroups<BytesRef> topGroups) {\n    for(GroupDocs group : topGroups.groups) {\n      for(int hitIDX=0;hitIDX<group.scoreDocs.length;hitIDX++) {\n        final ScoreDoc sd = group.scoreDocs[hitIDX];\n        assertEquals(\"doc=\" + sd.doc + \" wrong shard\",\n                     ReaderUtil.subIndex(sd.doc, docStarts),\n                     sd.shardIndex);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6005b05c19356dfca18f39979caeeb6b85bc88bb","date":1331204804,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#verifyShards(int[],TopGroups[BytesRef]).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#verifyShards(int[],TopGroups[BytesRef]).mjava","sourceNew":"  private void verifyShards(int[] docStarts, TopGroups<BytesRef> topGroups) {\n    for(GroupDocs<?> group : topGroups.groups) {\n      for(int hitIDX=0;hitIDX<group.scoreDocs.length;hitIDX++) {\n        final ScoreDoc sd = group.scoreDocs[hitIDX];\n        assertEquals(\"doc=\" + sd.doc + \" wrong shard\",\n                     ReaderUtil.subIndex(sd.doc, docStarts),\n                     sd.shardIndex);\n      }\n    }\n  }\n\n","sourceOld":"  private void verifyShards(int[] docStarts, TopGroups<BytesRef> topGroups) {\n    for(GroupDocs group : topGroups.groups) {\n      for(int hitIDX=0;hitIDX<group.scoreDocs.length;hitIDX++) {\n        final ScoreDoc sd = group.scoreDocs[hitIDX];\n        assertEquals(\"doc=\" + sd.doc + \" wrong shard\",\n                     ReaderUtil.subIndex(sd.doc, docStarts),\n                     sd.shardIndex);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#verifyShards(int[],TopGroups[BytesRef]).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#verifyShards(int[],TopGroups[BytesRef]).mjava","sourceNew":"  private void verifyShards(int[] docStarts, TopGroups<BytesRef> topGroups) {\n    for(GroupDocs<?> group : topGroups.groups) {\n      for(int hitIDX=0;hitIDX<group.scoreDocs.length;hitIDX++) {\n        final ScoreDoc sd = group.scoreDocs[hitIDX];\n        assertEquals(\"doc=\" + sd.doc + \" wrong shard\",\n                     ReaderUtil.subIndex(sd.doc, docStarts),\n                     sd.shardIndex);\n      }\n    }\n  }\n\n","sourceOld":"  private void verifyShards(int[] docStarts, TopGroups<BytesRef> topGroups) {\n    for(GroupDocs group : topGroups.groups) {\n      for(int hitIDX=0;hitIDX<group.scoreDocs.length;hitIDX++) {\n        final ScoreDoc sd = group.scoreDocs[hitIDX];\n        assertEquals(\"doc=\" + sd.doc + \" wrong shard\",\n                     ReaderUtil.subIndex(sd.doc, docStarts),\n                     sd.shardIndex);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#verifyShards(int[],TopGroups[BytesRef]).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#verifyShards(int[],TopGroups[BytesRef]).mjava","sourceNew":"  private void verifyShards(int[] docStarts, TopGroups<BytesRef> topGroups) {\n    for(GroupDocs<?> group : topGroups.groups) {\n      for(int hitIDX=0;hitIDX<group.scoreDocs.length;hitIDX++) {\n        final ScoreDoc sd = group.scoreDocs[hitIDX];\n        assertEquals(\"doc=\" + sd.doc + \" wrong shard\",\n                     ReaderUtil.subIndex(sd.doc, docStarts),\n                     sd.shardIndex);\n      }\n    }\n  }\n\n","sourceOld":"  private void verifyShards(int[] docStarts, TopGroups<BytesRef> topGroups) {\n    for(GroupDocs<?> group : topGroups.groups) {\n      for(int hitIDX=0;hitIDX<group.scoreDocs.length;hitIDX++) {\n        final ScoreDoc sd = group.scoreDocs[hitIDX];\n        assertEquals(\"doc=\" + sd.doc + \" wrong shard\",\n                     ReaderUtil.subIndex(sd.doc, docStarts),\n                     sd.shardIndex);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["e5d731d304e051cf7ed37410c1431e942f41c09b","6005b05c19356dfca18f39979caeeb6b85bc88bb"],"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e5d731d304e051cf7ed37410c1431e942f41c09b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["6005b05c19356dfca18f39979caeeb6b85bc88bb"],"6005b05c19356dfca18f39979caeeb6b85bc88bb":["e5d731d304e051cf7ed37410c1431e942f41c09b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d4aa50b979cd392e00e5bc0f23f78cbd106cb968":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e5d731d304e051cf7ed37410c1431e942f41c09b":["d4aa50b979cd392e00e5bc0f23f78cbd106cb968"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6005b05c19356dfca18f39979caeeb6b85bc88bb":["38e3b736c7ca086d61b7dbb841c905ee115490da","b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","d4aa50b979cd392e00e5bc0f23f78cbd106cb968"],"d4aa50b979cd392e00e5bc0f23f78cbd106cb968":["e5d731d304e051cf7ed37410c1431e942f41c09b"],"e5d731d304e051cf7ed37410c1431e942f41c09b":["38e3b736c7ca086d61b7dbb841c905ee115490da","0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","6005b05c19356dfca18f39979caeeb6b85bc88bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}