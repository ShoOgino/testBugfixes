{"path":"src/java/org/apache/lucene/index/TermsHash#flush(Map[InvertedDocConsumerPerThread,Collection[InvertedDocConsumerPerField]],SegmentWriteState).mjava","commits":[{"id":"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d","date":1255859449,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermsHash#flush(Map[InvertedDocConsumerPerThread,Collection[InvertedDocConsumerPerField]],SegmentWriteState).mjava","pathOld":"src/java/org/apache/lucene/index/TermsHash#flush(Map,SegmentWriteState).mjava","sourceNew":"  synchronized void flush(Map<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n    Map childThreadsAndFields = new HashMap();\n    Map nextThreadsAndFields;\n\n    if (nextTermsHash != null)\n      nextThreadsAndFields = new HashMap();\n    else\n      nextThreadsAndFields = null;\n\n    Iterator it = threadsAndFields.entrySet().iterator();\n    while(it.hasNext()) {\n\n      Map.Entry entry = (Map.Entry) it.next();\n\n      TermsHashPerThread perThread = (TermsHashPerThread) entry.getKey();\n\n      Collection fields = (Collection) entry.getValue();\n\n      Iterator fieldsIt = fields.iterator();\n      Collection childFields = new HashSet();\n      Collection nextChildFields;\n\n      if (nextTermsHash != null)\n        nextChildFields = new HashSet();\n      else\n        nextChildFields = null;\n\n      while(fieldsIt.hasNext()) {\n        TermsHashPerField perField = (TermsHashPerField) fieldsIt.next();\n        childFields.add(perField.consumer);\n        if (nextTermsHash != null)\n          nextChildFields.add(perField.nextPerField);\n      }\n\n      childThreadsAndFields.put(perThread.consumer, childFields);\n      if (nextTermsHash != null)\n        nextThreadsAndFields.put(perThread.nextPerThread, nextChildFields);\n    }\n    \n    consumer.flush(childThreadsAndFields, state);\n\n    shrinkFreePostings(threadsAndFields, state);\n    \n    if (nextTermsHash != null)\n      nextTermsHash.flush(nextThreadsAndFields, state);\n  }\n\n","sourceOld":"  synchronized void flush(Map threadsAndFields, final SegmentWriteState state) throws IOException {\n    Map childThreadsAndFields = new HashMap();\n    Map nextThreadsAndFields;\n\n    if (nextTermsHash != null)\n      nextThreadsAndFields = new HashMap();\n    else\n      nextThreadsAndFields = null;\n\n    Iterator it = threadsAndFields.entrySet().iterator();\n    while(it.hasNext()) {\n\n      Map.Entry entry = (Map.Entry) it.next();\n\n      TermsHashPerThread perThread = (TermsHashPerThread) entry.getKey();\n\n      Collection fields = (Collection) entry.getValue();\n\n      Iterator fieldsIt = fields.iterator();\n      Collection childFields = new HashSet();\n      Collection nextChildFields;\n\n      if (nextTermsHash != null)\n        nextChildFields = new HashSet();\n      else\n        nextChildFields = null;\n\n      while(fieldsIt.hasNext()) {\n        TermsHashPerField perField = (TermsHashPerField) fieldsIt.next();\n        childFields.add(perField.consumer);\n        if (nextTermsHash != null)\n          nextChildFields.add(perField.nextPerField);\n      }\n\n      childThreadsAndFields.put(perThread.consumer, childFields);\n      if (nextTermsHash != null)\n        nextThreadsAndFields.put(perThread.nextPerThread, nextChildFields);\n    }\n    \n    consumer.flush(childThreadsAndFields, state);\n\n    shrinkFreePostings(threadsAndFields, state);\n    \n    if (nextTermsHash != null)\n      nextTermsHash.flush(nextThreadsAndFields, state);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermsHash#flush(Map[InvertedDocConsumerPerThread,Collection[InvertedDocConsumerPerField]],SegmentWriteState).mjava","pathOld":"src/java/org/apache/lucene/index/TermsHash#flush(Map[InvertedDocConsumerPerThread,Collection[InvertedDocConsumerPerField]],SegmentWriteState).mjava","sourceNew":"  @Override\n  synchronized void flush(Map<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n    Map childThreadsAndFields = new HashMap();\n    Map nextThreadsAndFields;\n\n    if (nextTermsHash != null)\n      nextThreadsAndFields = new HashMap();\n    else\n      nextThreadsAndFields = null;\n\n    Iterator it = threadsAndFields.entrySet().iterator();\n    while(it.hasNext()) {\n\n      Map.Entry entry = (Map.Entry) it.next();\n\n      TermsHashPerThread perThread = (TermsHashPerThread) entry.getKey();\n\n      Collection fields = (Collection) entry.getValue();\n\n      Iterator fieldsIt = fields.iterator();\n      Collection childFields = new HashSet();\n      Collection nextChildFields;\n\n      if (nextTermsHash != null)\n        nextChildFields = new HashSet();\n      else\n        nextChildFields = null;\n\n      while(fieldsIt.hasNext()) {\n        TermsHashPerField perField = (TermsHashPerField) fieldsIt.next();\n        childFields.add(perField.consumer);\n        if (nextTermsHash != null)\n          nextChildFields.add(perField.nextPerField);\n      }\n\n      childThreadsAndFields.put(perThread.consumer, childFields);\n      if (nextTermsHash != null)\n        nextThreadsAndFields.put(perThread.nextPerThread, nextChildFields);\n    }\n    \n    consumer.flush(childThreadsAndFields, state);\n\n    shrinkFreePostings(threadsAndFields, state);\n    \n    if (nextTermsHash != null)\n      nextTermsHash.flush(nextThreadsAndFields, state);\n  }\n\n","sourceOld":"  synchronized void flush(Map<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n    Map childThreadsAndFields = new HashMap();\n    Map nextThreadsAndFields;\n\n    if (nextTermsHash != null)\n      nextThreadsAndFields = new HashMap();\n    else\n      nextThreadsAndFields = null;\n\n    Iterator it = threadsAndFields.entrySet().iterator();\n    while(it.hasNext()) {\n\n      Map.Entry entry = (Map.Entry) it.next();\n\n      TermsHashPerThread perThread = (TermsHashPerThread) entry.getKey();\n\n      Collection fields = (Collection) entry.getValue();\n\n      Iterator fieldsIt = fields.iterator();\n      Collection childFields = new HashSet();\n      Collection nextChildFields;\n\n      if (nextTermsHash != null)\n        nextChildFields = new HashSet();\n      else\n        nextChildFields = null;\n\n      while(fieldsIt.hasNext()) {\n        TermsHashPerField perField = (TermsHashPerField) fieldsIt.next();\n        childFields.add(perField.consumer);\n        if (nextTermsHash != null)\n          nextChildFields.add(perField.nextPerField);\n      }\n\n      childThreadsAndFields.put(perThread.consumer, childFields);\n      if (nextTermsHash != null)\n        nextThreadsAndFields.put(perThread.nextPerThread, nextChildFields);\n    }\n    \n    consumer.flush(childThreadsAndFields, state);\n\n    shrinkFreePostings(threadsAndFields, state);\n    \n    if (nextTermsHash != null)\n      nextTermsHash.flush(nextThreadsAndFields, state);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60cdc0e643184821eb066795a8791cd82559f46e","date":1257941914,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermsHash#flush(Map[InvertedDocConsumerPerThread,Collection[InvertedDocConsumerPerField]],SegmentWriteState).mjava","pathOld":"src/java/org/apache/lucene/index/TermsHash#flush(Map[InvertedDocConsumerPerThread,Collection[InvertedDocConsumerPerField]],SegmentWriteState).mjava","sourceNew":"  @Override\n  synchronized void flush(Map<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n    Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> childThreadsAndFields = new HashMap<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>>();\n    Map<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> nextThreadsAndFields;\n\n    if (nextTermsHash != null)\n      nextThreadsAndFields = new HashMap<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>>();\n    else\n      nextThreadsAndFields = null;\n\n    for (final Map.Entry<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      TermsHashPerThread perThread = (TermsHashPerThread) entry.getKey();\n\n      Collection<InvertedDocConsumerPerField> fields = entry.getValue();\n\n      Iterator<InvertedDocConsumerPerField> fieldsIt = fields.iterator();\n      Collection<TermsHashConsumerPerField> childFields = new HashSet<TermsHashConsumerPerField>();\n      Collection<InvertedDocConsumerPerField> nextChildFields;\n\n      if (nextTermsHash != null)\n        nextChildFields = new HashSet<InvertedDocConsumerPerField>();\n      else\n        nextChildFields = null;\n\n      while(fieldsIt.hasNext()) {\n        TermsHashPerField perField = (TermsHashPerField) fieldsIt.next();\n        childFields.add(perField.consumer);\n        if (nextTermsHash != null)\n          nextChildFields.add(perField.nextPerField);\n      }\n\n      childThreadsAndFields.put(perThread.consumer, childFields);\n      if (nextTermsHash != null)\n        nextThreadsAndFields.put(perThread.nextPerThread, nextChildFields);\n    }\n    \n    consumer.flush(childThreadsAndFields, state);\n\n    shrinkFreePostings(threadsAndFields, state);\n    \n    if (nextTermsHash != null)\n      nextTermsHash.flush(nextThreadsAndFields, state);\n  }\n\n","sourceOld":"  @Override\n  synchronized void flush(Map<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n    Map childThreadsAndFields = new HashMap();\n    Map nextThreadsAndFields;\n\n    if (nextTermsHash != null)\n      nextThreadsAndFields = new HashMap();\n    else\n      nextThreadsAndFields = null;\n\n    Iterator it = threadsAndFields.entrySet().iterator();\n    while(it.hasNext()) {\n\n      Map.Entry entry = (Map.Entry) it.next();\n\n      TermsHashPerThread perThread = (TermsHashPerThread) entry.getKey();\n\n      Collection fields = (Collection) entry.getValue();\n\n      Iterator fieldsIt = fields.iterator();\n      Collection childFields = new HashSet();\n      Collection nextChildFields;\n\n      if (nextTermsHash != null)\n        nextChildFields = new HashSet();\n      else\n        nextChildFields = null;\n\n      while(fieldsIt.hasNext()) {\n        TermsHashPerField perField = (TermsHashPerField) fieldsIt.next();\n        childFields.add(perField.consumer);\n        if (nextTermsHash != null)\n          nextChildFields.add(perField.nextPerField);\n      }\n\n      childThreadsAndFields.put(perThread.consumer, childFields);\n      if (nextTermsHash != null)\n        nextThreadsAndFields.put(perThread.nextPerThread, nextChildFields);\n    }\n    \n    consumer.flush(childThreadsAndFields, state);\n\n    shrinkFreePostings(threadsAndFields, state);\n    \n    if (nextTermsHash != null)\n      nextTermsHash.flush(nextThreadsAndFields, state);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermsHash#flush(Map[InvertedDocConsumerPerThread,Collection[InvertedDocConsumerPerField]],SegmentWriteState).mjava","pathOld":"src/java/org/apache/lucene/index/TermsHash#flush(Map[InvertedDocConsumerPerThread,Collection[InvertedDocConsumerPerField]],SegmentWriteState).mjava","sourceNew":"  @Override\n  synchronized void flush(Map<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n    Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> childThreadsAndFields = new HashMap<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>>();\n    Map<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> nextThreadsAndFields;\n\n    if (nextTermsHash != null)\n      nextThreadsAndFields = new HashMap<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>>();\n    else\n      nextThreadsAndFields = null;\n\n    for (final Map.Entry<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      TermsHashPerThread perThread = (TermsHashPerThread) entry.getKey();\n\n      Collection<InvertedDocConsumerPerField> fields = entry.getValue();\n\n      Iterator<InvertedDocConsumerPerField> fieldsIt = fields.iterator();\n      Collection<TermsHashConsumerPerField> childFields = new HashSet<TermsHashConsumerPerField>();\n      Collection<InvertedDocConsumerPerField> nextChildFields;\n\n      if (nextTermsHash != null)\n        nextChildFields = new HashSet<InvertedDocConsumerPerField>();\n      else\n        nextChildFields = null;\n\n      while(fieldsIt.hasNext()) {\n        TermsHashPerField perField = (TermsHashPerField) fieldsIt.next();\n        childFields.add(perField.consumer);\n        if (nextTermsHash != null)\n          nextChildFields.add(perField.nextPerField);\n      }\n\n      childThreadsAndFields.put(perThread.consumer, childFields);\n      if (nextTermsHash != null)\n        nextThreadsAndFields.put(perThread.nextPerThread, nextChildFields);\n    }\n    \n    consumer.flush(childThreadsAndFields, state);\n\n    shrinkFreePostings(threadsAndFields, state);\n    \n    if (nextTermsHash != null)\n      nextTermsHash.flush(nextThreadsAndFields, state);\n  }\n\n","sourceOld":"  @Override\n  synchronized void flush(Map<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> threadsAndFields, final SegmentWriteState state) throws IOException {\n    Map<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>> childThreadsAndFields = new HashMap<TermsHashConsumerPerThread,Collection<TermsHashConsumerPerField>>();\n    Map<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> nextThreadsAndFields;\n\n    if (nextTermsHash != null)\n      nextThreadsAndFields = new HashMap<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>>();\n    else\n      nextThreadsAndFields = null;\n\n    for (final Map.Entry<InvertedDocConsumerPerThread,Collection<InvertedDocConsumerPerField>> entry : threadsAndFields.entrySet()) {\n\n      TermsHashPerThread perThread = (TermsHashPerThread) entry.getKey();\n\n      Collection<InvertedDocConsumerPerField> fields = entry.getValue();\n\n      Iterator<InvertedDocConsumerPerField> fieldsIt = fields.iterator();\n      Collection<TermsHashConsumerPerField> childFields = new HashSet<TermsHashConsumerPerField>();\n      Collection<InvertedDocConsumerPerField> nextChildFields;\n\n      if (nextTermsHash != null)\n        nextChildFields = new HashSet<InvertedDocConsumerPerField>();\n      else\n        nextChildFields = null;\n\n      while(fieldsIt.hasNext()) {\n        TermsHashPerField perField = (TermsHashPerField) fieldsIt.next();\n        childFields.add(perField.consumer);\n        if (nextTermsHash != null)\n          nextChildFields.add(perField.nextPerField);\n      }\n\n      childThreadsAndFields.put(perThread.consumer, childFields);\n      if (nextTermsHash != null)\n        nextThreadsAndFields.put(perThread.nextPerThread, nextChildFields);\n    }\n    \n    consumer.flush(childThreadsAndFields, state);\n\n    shrinkFreePostings(threadsAndFields, state);\n    \n    if (nextTermsHash != null)\n      nextTermsHash.flush(nextThreadsAndFields, state);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60cdc0e643184821eb066795a8791cd82559f46e":["8a9e385641d717e641408d8fbbc62be8fc766357"],"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8a9e385641d717e641408d8fbbc62be8fc766357":["fa27b750ee9a51ec4bed93ef328aef9ca1e2153d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["60cdc0e643184821eb066795a8791cd82559f46e"]},"commit2Childs":{"60cdc0e643184821eb066795a8791cd82559f46e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fa27b750ee9a51ec4bed93ef328aef9ca1e2153d":["8a9e385641d717e641408d8fbbc62be8fc766357"],"8a9e385641d717e641408d8fbbc62be8fc766357":["60cdc0e643184821eb066795a8791cd82559f46e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fa27b750ee9a51ec4bed93ef328aef9ca1e2153d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}