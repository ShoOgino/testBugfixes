{"path":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState).mjava","commits":[{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    List<SortedSetDocValues> toMerge = new ArrayList<>();\n    for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n      SortedSetDocValues values = null;\n      DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n      if (docValuesProducer != null) {\n        FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n        if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n          values = docValuesProducer.getSortedSet(fieldInfo);\n        }\n      }\n      if (values == null) {\n        values = DocValues.emptySortedSet();\n      }\n      toMerge.add(values);\n    }\n\n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[toMerge.size()];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      SortedSetDocValues dv = toMerge.get(sub);\n      Bits liveDocs = mergeState.liveDocs[sub];\n      int maxDoc = mergeState.maxDocs[sub];\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        int docID;\n        while ((docID = dv.nextDoc()) != NO_MORE_DOCS) {\n          if (liveDocs.get(docID)) {\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(this, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(mergeFieldInfo,\n                      new EmptyDocValuesProducer() {\n                        @Override\n                        public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) {\n                          if (fieldInfo != mergeFieldInfo) {\n                            throw new IllegalArgumentException(\"wrong FieldInfo\");\n                          }\n\n                          // We must make new iterators + DocIDMerger for each iterator:\n                          List<SortedSetDocValuesSub> subs = new ArrayList<>();\n\n                          long cost = 0;\n                          \n                          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                            SortedSetDocValues values = null;\n                            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                            if (docValuesProducer != null) {\n                              FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                              if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n                                try {\n                                  values = docValuesProducer.getSortedSet(readerFieldInfo);\n                                } catch (IOException ioe) {\n                                  throw new RuntimeException(ioe);\n                                }\n                              }\n                            }\n                            if (values == null) {\n                              values = DocValues.emptySortedSet();\n                            }\n                            cost += values.cost();\n                            subs.add(new SortedSetDocValuesSub(mergeState.docMaps[i], values, map.getGlobalOrds(i)));\n                          }\n            \n                          final DocIDMerger<SortedSetDocValuesSub> docIDMerger;\n                          try {\n                            docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n                          } catch (IOException ioe) {\n                            throw new RuntimeException(ioe);\n                          }\n                          \n                          final long finalCost = cost;\n\n                          return new SortedSetDocValues() {\n                            private int docID = -1;\n                            private SortedSetDocValuesSub currentSub;\n\n                            @Override\n                            public int docID() {\n                              return docID;\n                            }\n\n                            @Override\n                            public int nextDoc() throws IOException {\n                              currentSub = docIDMerger.next();\n                              if (currentSub == null) {\n                                docID = NO_MORE_DOCS;\n                              } else {\n                                docID = currentSub.mappedDocID;\n                              }\n\n                              return docID;\n                            }\n\n                            @Override\n                            public int advance(int target) throws IOException {\n                              throw new UnsupportedOperationException();\n                            }\n\n                            @Override\n                            public long nextOrd() throws IOException {\n                              long subOrd = currentSub.values.nextOrd();\n                              if (subOrd == NO_MORE_ORDS) {\n                                return NO_MORE_ORDS;\n                              }\n                              return currentSub.map.get(subOrd);\n                            }\n\n                            @Override\n                            public long cost() {\n                              return finalCost;\n                            }\n\n                            @Override\n                            public BytesRef lookupOrd(long ord) {\n                              int segmentNumber = map.getFirstSegmentNumber(ord);\n                              long segmentOrd = map.getFirstSegmentOrd(ord);\n                              return toMerge.get(segmentNumber).lookupOrd(segmentOrd);\n                            }\n\n                            @Override\n                            public long getValueCount() {\n                              return map.getValueCount();\n                            }\n                          };\n                        }\n                      });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f7558b5077dd4abd457be151475f13b541f4f13e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    List<SortedSetDocValues> toMerge = new ArrayList<>();\n    for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n      SortedSetDocValues values = null;\n      DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n      if (docValuesProducer != null) {\n        FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n        if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n          values = docValuesProducer.getSortedSet(fieldInfo);\n        }\n      }\n      if (values == null) {\n        values = DocValues.emptySortedSet();\n      }\n      toMerge.add(values);\n    }\n\n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[toMerge.size()];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      SortedSetDocValues dv = toMerge.get(sub);\n      Bits liveDocs = mergeState.liveDocs[sub];\n      int maxDoc = mergeState.maxDocs[sub];\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        int docID;\n        while ((docID = dv.nextDoc()) != NO_MORE_DOCS) {\n          if (liveDocs.get(docID)) {\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(this, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(mergeFieldInfo,\n                      new EmptyDocValuesProducer() {\n                        @Override\n                        public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) {\n                          if (fieldInfo != mergeFieldInfo) {\n                            throw new IllegalArgumentException(\"wrong FieldInfo\");\n                          }\n\n                          // We must make new iterators + DocIDMerger for each iterator:\n                          List<SortedSetDocValuesSub> subs = new ArrayList<>();\n\n                          long cost = 0;\n                          \n                          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                            SortedSetDocValues values = null;\n                            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                            if (docValuesProducer != null) {\n                              FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                              if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n                                try {\n                                  values = docValuesProducer.getSortedSet(readerFieldInfo);\n                                } catch (IOException ioe) {\n                                  throw new RuntimeException(ioe);\n                                }\n                              }\n                            }\n                            if (values == null) {\n                              values = DocValues.emptySortedSet();\n                            }\n                            cost += values.cost();\n                            subs.add(new SortedSetDocValuesSub(mergeState.docMaps[i], values, map.getGlobalOrds(i)));\n                          }\n            \n                          final DocIDMerger<SortedSetDocValuesSub> docIDMerger;\n                          try {\n                            docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n                          } catch (IOException ioe) {\n                            throw new RuntimeException(ioe);\n                          }\n                          \n                          final long finalCost = cost;\n\n                          return new SortedSetDocValues() {\n                            private int docID = -1;\n                            private SortedSetDocValuesSub currentSub;\n\n                            @Override\n                            public int docID() {\n                              return docID;\n                            }\n\n                            @Override\n                            public int nextDoc() throws IOException {\n                              currentSub = docIDMerger.next();\n                              if (currentSub == null) {\n                                docID = NO_MORE_DOCS;\n                              } else {\n                                docID = currentSub.mappedDocID;\n                              }\n\n                              return docID;\n                            }\n\n                            @Override\n                            public int advance(int target) throws IOException {\n                              throw new UnsupportedOperationException();\n                            }\n\n                            @Override\n                            public long nextOrd() throws IOException {\n                              long subOrd = currentSub.values.nextOrd();\n                              if (subOrd == NO_MORE_ORDS) {\n                                return NO_MORE_ORDS;\n                              }\n                              return currentSub.map.get(subOrd);\n                            }\n\n                            @Override\n                            public long cost() {\n                              return finalCost;\n                            }\n\n                            @Override\n                            public BytesRef lookupOrd(long ord) {\n                              int segmentNumber = map.getFirstSegmentNumber(ord);\n                              long segmentOrd = map.getFirstSegmentOrd(ord);\n                              return toMerge.get(segmentNumber).lookupOrd(segmentOrd);\n                            }\n\n                            @Override\n                            public long getValueCount() {\n                              return map.getValueCount();\n                            }\n                          };\n                        }\n                      });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5d217880fb207e1a26143863d06cf461c7cabeec","date":1475691535,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState).mjava","sourceNew":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    List<SortedSetDocValues> toMerge = new ArrayList<>();\n    for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n      SortedSetDocValues values = null;\n      DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n      if (docValuesProducer != null) {\n        FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n        if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n          values = docValuesProducer.getSortedSet(fieldInfo);\n        }\n      }\n      if (values == null) {\n        values = DocValues.emptySortedSet();\n      }\n      toMerge.add(values);\n    }\n\n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[toMerge.size()];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      SortedSetDocValues dv = toMerge.get(sub);\n      Bits liveDocs = mergeState.liveDocs[sub];\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        int docID;\n        while ((docID = dv.nextDoc()) != NO_MORE_DOCS) {\n          if (liveDocs.get(docID)) {\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(this, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(mergeFieldInfo,\n                      new EmptyDocValuesProducer() {\n                        @Override\n                        public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) {\n                          if (fieldInfo != mergeFieldInfo) {\n                            throw new IllegalArgumentException(\"wrong FieldInfo\");\n                          }\n\n                          // We must make new iterators + DocIDMerger for each iterator:\n                          List<SortedSetDocValuesSub> subs = new ArrayList<>();\n\n                          long cost = 0;\n                          \n                          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                            SortedSetDocValues values = null;\n                            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                            if (docValuesProducer != null) {\n                              FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                              if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n                                try {\n                                  values = docValuesProducer.getSortedSet(readerFieldInfo);\n                                } catch (IOException ioe) {\n                                  throw new RuntimeException(ioe);\n                                }\n                              }\n                            }\n                            if (values == null) {\n                              values = DocValues.emptySortedSet();\n                            }\n                            cost += values.cost();\n                            subs.add(new SortedSetDocValuesSub(mergeState.docMaps[i], values, map.getGlobalOrds(i)));\n                          }\n            \n                          final DocIDMerger<SortedSetDocValuesSub> docIDMerger;\n                          try {\n                            docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n                          } catch (IOException ioe) {\n                            throw new RuntimeException(ioe);\n                          }\n                          \n                          final long finalCost = cost;\n\n                          return new SortedSetDocValues() {\n                            private int docID = -1;\n                            private SortedSetDocValuesSub currentSub;\n\n                            @Override\n                            public int docID() {\n                              return docID;\n                            }\n\n                            @Override\n                            public int nextDoc() throws IOException {\n                              currentSub = docIDMerger.next();\n                              if (currentSub == null) {\n                                docID = NO_MORE_DOCS;\n                              } else {\n                                docID = currentSub.mappedDocID;\n                              }\n\n                              return docID;\n                            }\n\n                            @Override\n                            public int advance(int target) throws IOException {\n                              throw new UnsupportedOperationException();\n                            }\n\n                            @Override\n                            public long nextOrd() throws IOException {\n                              long subOrd = currentSub.values.nextOrd();\n                              if (subOrd == NO_MORE_ORDS) {\n                                return NO_MORE_ORDS;\n                              }\n                              return currentSub.map.get(subOrd);\n                            }\n\n                            @Override\n                            public long cost() {\n                              return finalCost;\n                            }\n\n                            @Override\n                            public BytesRef lookupOrd(long ord) {\n                              int segmentNumber = map.getFirstSegmentNumber(ord);\n                              long segmentOrd = map.getFirstSegmentOrd(ord);\n                              return toMerge.get(segmentNumber).lookupOrd(segmentOrd);\n                            }\n\n                            @Override\n                            public long getValueCount() {\n                              return map.getValueCount();\n                            }\n                          };\n                        }\n                      });\n  }\n\n","sourceOld":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    List<SortedSetDocValues> toMerge = new ArrayList<>();\n    for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n      SortedSetDocValues values = null;\n      DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n      if (docValuesProducer != null) {\n        FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n        if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n          values = docValuesProducer.getSortedSet(fieldInfo);\n        }\n      }\n      if (values == null) {\n        values = DocValues.emptySortedSet();\n      }\n      toMerge.add(values);\n    }\n\n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[toMerge.size()];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      SortedSetDocValues dv = toMerge.get(sub);\n      Bits liveDocs = mergeState.liveDocs[sub];\n      int maxDoc = mergeState.maxDocs[sub];\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        int docID;\n        while ((docID = dv.nextDoc()) != NO_MORE_DOCS) {\n          if (liveDocs.get(docID)) {\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(this, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(mergeFieldInfo,\n                      new EmptyDocValuesProducer() {\n                        @Override\n                        public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) {\n                          if (fieldInfo != mergeFieldInfo) {\n                            throw new IllegalArgumentException(\"wrong FieldInfo\");\n                          }\n\n                          // We must make new iterators + DocIDMerger for each iterator:\n                          List<SortedSetDocValuesSub> subs = new ArrayList<>();\n\n                          long cost = 0;\n                          \n                          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                            SortedSetDocValues values = null;\n                            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                            if (docValuesProducer != null) {\n                              FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                              if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n                                try {\n                                  values = docValuesProducer.getSortedSet(readerFieldInfo);\n                                } catch (IOException ioe) {\n                                  throw new RuntimeException(ioe);\n                                }\n                              }\n                            }\n                            if (values == null) {\n                              values = DocValues.emptySortedSet();\n                            }\n                            cost += values.cost();\n                            subs.add(new SortedSetDocValuesSub(mergeState.docMaps[i], values, map.getGlobalOrds(i)));\n                          }\n            \n                          final DocIDMerger<SortedSetDocValuesSub> docIDMerger;\n                          try {\n                            docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n                          } catch (IOException ioe) {\n                            throw new RuntimeException(ioe);\n                          }\n                          \n                          final long finalCost = cost;\n\n                          return new SortedSetDocValues() {\n                            private int docID = -1;\n                            private SortedSetDocValuesSub currentSub;\n\n                            @Override\n                            public int docID() {\n                              return docID;\n                            }\n\n                            @Override\n                            public int nextDoc() throws IOException {\n                              currentSub = docIDMerger.next();\n                              if (currentSub == null) {\n                                docID = NO_MORE_DOCS;\n                              } else {\n                                docID = currentSub.mappedDocID;\n                              }\n\n                              return docID;\n                            }\n\n                            @Override\n                            public int advance(int target) throws IOException {\n                              throw new UnsupportedOperationException();\n                            }\n\n                            @Override\n                            public long nextOrd() throws IOException {\n                              long subOrd = currentSub.values.nextOrd();\n                              if (subOrd == NO_MORE_ORDS) {\n                                return NO_MORE_ORDS;\n                              }\n                              return currentSub.map.get(subOrd);\n                            }\n\n                            @Override\n                            public long cost() {\n                              return finalCost;\n                            }\n\n                            @Override\n                            public BytesRef lookupOrd(long ord) {\n                              int segmentNumber = map.getFirstSegmentNumber(ord);\n                              long segmentOrd = map.getFirstSegmentOrd(ord);\n                              return toMerge.get(segmentNumber).lookupOrd(segmentOrd);\n                            }\n\n                            @Override\n                            public long getValueCount() {\n                              return map.getValueCount();\n                            }\n                          };\n                        }\n                      });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7558b5077dd4abd457be151475f13b541f4f13e","date":1475830751,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState).mjava","sourceNew":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    List<SortedSetDocValues> toMerge = new ArrayList<>();\n    for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n      SortedSetDocValues values = null;\n      DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n      if (docValuesProducer != null) {\n        FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n        if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n          values = docValuesProducer.getSortedSet(fieldInfo);\n        }\n      }\n      if (values == null) {\n        values = DocValues.emptySortedSet();\n      }\n      toMerge.add(values);\n    }\n\n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[toMerge.size()];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      SortedSetDocValues dv = toMerge.get(sub);\n      Bits liveDocs = mergeState.liveDocs[sub];\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        int docID;\n        while ((docID = dv.nextDoc()) != NO_MORE_DOCS) {\n          if (liveDocs.get(docID)) {\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(this, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(mergeFieldInfo,\n                      new EmptyDocValuesProducer() {\n                        @Override\n                        public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) {\n                          if (fieldInfo != mergeFieldInfo) {\n                            throw new IllegalArgumentException(\"wrong FieldInfo\");\n                          }\n\n                          // We must make new iterators + DocIDMerger for each iterator:\n                          List<SortedSetDocValuesSub> subs = new ArrayList<>();\n\n                          long cost = 0;\n                          \n                          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                            SortedSetDocValues values = null;\n                            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                            if (docValuesProducer != null) {\n                              FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                              if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n                                try {\n                                  values = docValuesProducer.getSortedSet(readerFieldInfo);\n                                } catch (IOException ioe) {\n                                  throw new RuntimeException(ioe);\n                                }\n                              }\n                            }\n                            if (values == null) {\n                              values = DocValues.emptySortedSet();\n                            }\n                            cost += values.cost();\n                            subs.add(new SortedSetDocValuesSub(mergeState.docMaps[i], values, map.getGlobalOrds(i)));\n                          }\n            \n                          final DocIDMerger<SortedSetDocValuesSub> docIDMerger;\n                          try {\n                            docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n                          } catch (IOException ioe) {\n                            throw new RuntimeException(ioe);\n                          }\n                          \n                          final long finalCost = cost;\n\n                          return new SortedSetDocValues() {\n                            private int docID = -1;\n                            private SortedSetDocValuesSub currentSub;\n\n                            @Override\n                            public int docID() {\n                              return docID;\n                            }\n\n                            @Override\n                            public int nextDoc() throws IOException {\n                              currentSub = docIDMerger.next();\n                              if (currentSub == null) {\n                                docID = NO_MORE_DOCS;\n                              } else {\n                                docID = currentSub.mappedDocID;\n                              }\n\n                              return docID;\n                            }\n\n                            @Override\n                            public int advance(int target) throws IOException {\n                              throw new UnsupportedOperationException();\n                            }\n\n                            @Override\n                            public long nextOrd() throws IOException {\n                              long subOrd = currentSub.values.nextOrd();\n                              if (subOrd == NO_MORE_ORDS) {\n                                return NO_MORE_ORDS;\n                              }\n                              return currentSub.map.get(subOrd);\n                            }\n\n                            @Override\n                            public long cost() {\n                              return finalCost;\n                            }\n\n                            @Override\n                            public BytesRef lookupOrd(long ord) throws IOException {\n                              int segmentNumber = map.getFirstSegmentNumber(ord);\n                              long segmentOrd = map.getFirstSegmentOrd(ord);\n                              return toMerge.get(segmentNumber).lookupOrd(segmentOrd);\n                            }\n\n                            @Override\n                            public long getValueCount() {\n                              return map.getValueCount();\n                            }\n                          };\n                        }\n                      });\n  }\n\n","sourceOld":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    List<SortedSetDocValues> toMerge = new ArrayList<>();\n    for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n      SortedSetDocValues values = null;\n      DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n      if (docValuesProducer != null) {\n        FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n        if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n          values = docValuesProducer.getSortedSet(fieldInfo);\n        }\n      }\n      if (values == null) {\n        values = DocValues.emptySortedSet();\n      }\n      toMerge.add(values);\n    }\n\n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[toMerge.size()];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      SortedSetDocValues dv = toMerge.get(sub);\n      Bits liveDocs = mergeState.liveDocs[sub];\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        int docID;\n        while ((docID = dv.nextDoc()) != NO_MORE_DOCS) {\n          if (liveDocs.get(docID)) {\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(this, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(mergeFieldInfo,\n                      new EmptyDocValuesProducer() {\n                        @Override\n                        public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) {\n                          if (fieldInfo != mergeFieldInfo) {\n                            throw new IllegalArgumentException(\"wrong FieldInfo\");\n                          }\n\n                          // We must make new iterators + DocIDMerger for each iterator:\n                          List<SortedSetDocValuesSub> subs = new ArrayList<>();\n\n                          long cost = 0;\n                          \n                          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                            SortedSetDocValues values = null;\n                            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                            if (docValuesProducer != null) {\n                              FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                              if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n                                try {\n                                  values = docValuesProducer.getSortedSet(readerFieldInfo);\n                                } catch (IOException ioe) {\n                                  throw new RuntimeException(ioe);\n                                }\n                              }\n                            }\n                            if (values == null) {\n                              values = DocValues.emptySortedSet();\n                            }\n                            cost += values.cost();\n                            subs.add(new SortedSetDocValuesSub(mergeState.docMaps[i], values, map.getGlobalOrds(i)));\n                          }\n            \n                          final DocIDMerger<SortedSetDocValuesSub> docIDMerger;\n                          try {\n                            docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n                          } catch (IOException ioe) {\n                            throw new RuntimeException(ioe);\n                          }\n                          \n                          final long finalCost = cost;\n\n                          return new SortedSetDocValues() {\n                            private int docID = -1;\n                            private SortedSetDocValuesSub currentSub;\n\n                            @Override\n                            public int docID() {\n                              return docID;\n                            }\n\n                            @Override\n                            public int nextDoc() throws IOException {\n                              currentSub = docIDMerger.next();\n                              if (currentSub == null) {\n                                docID = NO_MORE_DOCS;\n                              } else {\n                                docID = currentSub.mappedDocID;\n                              }\n\n                              return docID;\n                            }\n\n                            @Override\n                            public int advance(int target) throws IOException {\n                              throw new UnsupportedOperationException();\n                            }\n\n                            @Override\n                            public long nextOrd() throws IOException {\n                              long subOrd = currentSub.values.nextOrd();\n                              if (subOrd == NO_MORE_ORDS) {\n                                return NO_MORE_ORDS;\n                              }\n                              return currentSub.map.get(subOrd);\n                            }\n\n                            @Override\n                            public long cost() {\n                              return finalCost;\n                            }\n\n                            @Override\n                            public BytesRef lookupOrd(long ord) {\n                              int segmentNumber = map.getFirstSegmentNumber(ord);\n                              long segmentOrd = map.getFirstSegmentOrd(ord);\n                              return toMerge.get(segmentNumber).lookupOrd(segmentOrd);\n                            }\n\n                            @Override\n                            public long getValueCount() {\n                              return map.getValueCount();\n                            }\n                          };\n                        }\n                      });\n  }\n\n","bugFix":["6652c74b2358a0b13223817a6a793bf1c9d0749d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23e44daeaa8b89694d10df5999956c8e14a7dd09","date":1476689300,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState).mjava","sourceNew":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    List<SortedSetDocValues> toMerge = new ArrayList<>();\n    for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n      SortedSetDocValues values = null;\n      DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n      if (docValuesProducer != null) {\n        FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n        if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n          values = docValuesProducer.getSortedSet(fieldInfo);\n        }\n      }\n      if (values == null) {\n        values = DocValues.emptySortedSet();\n      }\n      toMerge.add(values);\n    }\n\n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[toMerge.size()];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      SortedSetDocValues dv = toMerge.get(sub);\n      Bits liveDocs = mergeState.liveDocs[sub];\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        int docID;\n        while ((docID = dv.nextDoc()) != NO_MORE_DOCS) {\n          if (liveDocs.get(docID)) {\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(this, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(mergeFieldInfo,\n                      new EmptyDocValuesProducer() {\n                        @Override\n                        public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n                          if (fieldInfo != mergeFieldInfo) {\n                            throw new IllegalArgumentException(\"wrong FieldInfo\");\n                          }\n\n                          // We must make new iterators + DocIDMerger for each iterator:\n                          List<SortedSetDocValuesSub> subs = new ArrayList<>();\n\n                          long cost = 0;\n                          \n                          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                            SortedSetDocValues values = null;\n                            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                            if (docValuesProducer != null) {\n                              FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                              if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n                                values = docValuesProducer.getSortedSet(readerFieldInfo);\n                              }\n                            }\n                            if (values == null) {\n                              values = DocValues.emptySortedSet();\n                            }\n                            cost += values.cost();\n                            subs.add(new SortedSetDocValuesSub(mergeState.docMaps[i], values, map.getGlobalOrds(i)));\n                          }\n            \n                          final DocIDMerger<SortedSetDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n                          \n                          final long finalCost = cost;\n\n                          return new SortedSetDocValues() {\n                            private int docID = -1;\n                            private SortedSetDocValuesSub currentSub;\n\n                            @Override\n                            public int docID() {\n                              return docID;\n                            }\n\n                            @Override\n                            public int nextDoc() throws IOException {\n                              currentSub = docIDMerger.next();\n                              if (currentSub == null) {\n                                docID = NO_MORE_DOCS;\n                              } else {\n                                docID = currentSub.mappedDocID;\n                              }\n\n                              return docID;\n                            }\n\n                            @Override\n                            public int advance(int target) throws IOException {\n                              throw new UnsupportedOperationException();\n                            }\n\n                            @Override\n                            public long nextOrd() throws IOException {\n                              long subOrd = currentSub.values.nextOrd();\n                              if (subOrd == NO_MORE_ORDS) {\n                                return NO_MORE_ORDS;\n                              }\n                              return currentSub.map.get(subOrd);\n                            }\n\n                            @Override\n                            public long cost() {\n                              return finalCost;\n                            }\n\n                            @Override\n                            public BytesRef lookupOrd(long ord) throws IOException {\n                              int segmentNumber = map.getFirstSegmentNumber(ord);\n                              long segmentOrd = map.getFirstSegmentOrd(ord);\n                              return toMerge.get(segmentNumber).lookupOrd(segmentOrd);\n                            }\n\n                            @Override\n                            public long getValueCount() {\n                              return map.getValueCount();\n                            }\n                          };\n                        }\n                      });\n  }\n\n","sourceOld":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    List<SortedSetDocValues> toMerge = new ArrayList<>();\n    for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n      SortedSetDocValues values = null;\n      DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n      if (docValuesProducer != null) {\n        FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n        if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n          values = docValuesProducer.getSortedSet(fieldInfo);\n        }\n      }\n      if (values == null) {\n        values = DocValues.emptySortedSet();\n      }\n      toMerge.add(values);\n    }\n\n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[toMerge.size()];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      SortedSetDocValues dv = toMerge.get(sub);\n      Bits liveDocs = mergeState.liveDocs[sub];\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        int docID;\n        while ((docID = dv.nextDoc()) != NO_MORE_DOCS) {\n          if (liveDocs.get(docID)) {\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(this, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(mergeFieldInfo,\n                      new EmptyDocValuesProducer() {\n                        @Override\n                        public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) {\n                          if (fieldInfo != mergeFieldInfo) {\n                            throw new IllegalArgumentException(\"wrong FieldInfo\");\n                          }\n\n                          // We must make new iterators + DocIDMerger for each iterator:\n                          List<SortedSetDocValuesSub> subs = new ArrayList<>();\n\n                          long cost = 0;\n                          \n                          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                            SortedSetDocValues values = null;\n                            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                            if (docValuesProducer != null) {\n                              FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                              if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n                                try {\n                                  values = docValuesProducer.getSortedSet(readerFieldInfo);\n                                } catch (IOException ioe) {\n                                  throw new RuntimeException(ioe);\n                                }\n                              }\n                            }\n                            if (values == null) {\n                              values = DocValues.emptySortedSet();\n                            }\n                            cost += values.cost();\n                            subs.add(new SortedSetDocValuesSub(mergeState.docMaps[i], values, map.getGlobalOrds(i)));\n                          }\n            \n                          final DocIDMerger<SortedSetDocValuesSub> docIDMerger;\n                          try {\n                            docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n                          } catch (IOException ioe) {\n                            throw new RuntimeException(ioe);\n                          }\n                          \n                          final long finalCost = cost;\n\n                          return new SortedSetDocValues() {\n                            private int docID = -1;\n                            private SortedSetDocValuesSub currentSub;\n\n                            @Override\n                            public int docID() {\n                              return docID;\n                            }\n\n                            @Override\n                            public int nextDoc() throws IOException {\n                              currentSub = docIDMerger.next();\n                              if (currentSub == null) {\n                                docID = NO_MORE_DOCS;\n                              } else {\n                                docID = currentSub.mappedDocID;\n                              }\n\n                              return docID;\n                            }\n\n                            @Override\n                            public int advance(int target) throws IOException {\n                              throw new UnsupportedOperationException();\n                            }\n\n                            @Override\n                            public long nextOrd() throws IOException {\n                              long subOrd = currentSub.values.nextOrd();\n                              if (subOrd == NO_MORE_ORDS) {\n                                return NO_MORE_ORDS;\n                              }\n                              return currentSub.map.get(subOrd);\n                            }\n\n                            @Override\n                            public long cost() {\n                              return finalCost;\n                            }\n\n                            @Override\n                            public BytesRef lookupOrd(long ord) throws IOException {\n                              int segmentNumber = map.getFirstSegmentNumber(ord);\n                              long segmentOrd = map.getFirstSegmentOrd(ord);\n                              return toMerge.get(segmentNumber).lookupOrd(segmentOrd);\n                            }\n\n                            @Override\n                            public long getValueCount() {\n                              return map.getValueCount();\n                            }\n                          };\n                        }\n                      });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    List<SortedSetDocValues> toMerge = new ArrayList<>();\n    for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n      SortedSetDocValues values = null;\n      DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n      if (docValuesProducer != null) {\n        FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n        if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n          values = docValuesProducer.getSortedSet(fieldInfo);\n        }\n      }\n      if (values == null) {\n        values = DocValues.emptySortedSet();\n      }\n      toMerge.add(values);\n    }\n\n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[toMerge.size()];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      SortedSetDocValues dv = toMerge.get(sub);\n      Bits liveDocs = mergeState.liveDocs[sub];\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        int docID;\n        while ((docID = dv.nextDoc()) != NO_MORE_DOCS) {\n          if (liveDocs.get(docID)) {\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(this, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(mergeFieldInfo,\n                      new EmptyDocValuesProducer() {\n                        @Override\n                        public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n                          if (fieldInfo != mergeFieldInfo) {\n                            throw new IllegalArgumentException(\"wrong FieldInfo\");\n                          }\n\n                          // We must make new iterators + DocIDMerger for each iterator:\n                          List<SortedSetDocValuesSub> subs = new ArrayList<>();\n\n                          long cost = 0;\n                          \n                          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                            SortedSetDocValues values = null;\n                            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                            if (docValuesProducer != null) {\n                              FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                              if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n                                values = docValuesProducer.getSortedSet(readerFieldInfo);\n                              }\n                            }\n                            if (values == null) {\n                              values = DocValues.emptySortedSet();\n                            }\n                            cost += values.cost();\n                            subs.add(new SortedSetDocValuesSub(mergeState.docMaps[i], values, map.getGlobalOrds(i)));\n                          }\n            \n                          final DocIDMerger<SortedSetDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n                          \n                          final long finalCost = cost;\n\n                          return new SortedSetDocValues() {\n                            private int docID = -1;\n                            private SortedSetDocValuesSub currentSub;\n\n                            @Override\n                            public int docID() {\n                              return docID;\n                            }\n\n                            @Override\n                            public int nextDoc() throws IOException {\n                              currentSub = docIDMerger.next();\n                              if (currentSub == null) {\n                                docID = NO_MORE_DOCS;\n                              } else {\n                                docID = currentSub.mappedDocID;\n                              }\n\n                              return docID;\n                            }\n\n                            @Override\n                            public int advance(int target) throws IOException {\n                              throw new UnsupportedOperationException();\n                            }\n\n                            @Override\n                            public long nextOrd() throws IOException {\n                              long subOrd = currentSub.values.nextOrd();\n                              if (subOrd == NO_MORE_ORDS) {\n                                return NO_MORE_ORDS;\n                              }\n                              return currentSub.map.get(subOrd);\n                            }\n\n                            @Override\n                            public long cost() {\n                              return finalCost;\n                            }\n\n                            @Override\n                            public BytesRef lookupOrd(long ord) throws IOException {\n                              int segmentNumber = map.getFirstSegmentNumber(ord);\n                              long segmentOrd = map.getFirstSegmentOrd(ord);\n                              return toMerge.get(segmentNumber).lookupOrd(segmentOrd);\n                            }\n\n                            @Override\n                            public long getValueCount() {\n                              return map.getValueCount();\n                            }\n                          };\n                        }\n                      });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11134e449dabe11d6d0ff6a564d84b82cbe93722","date":1477299083,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState).mjava","sourceNew":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    List<SortedSetDocValues> toMerge = new ArrayList<>();\n    for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n      SortedSetDocValues values = null;\n      DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n      if (docValuesProducer != null) {\n        FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n        if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n          values = docValuesProducer.getSortedSet(fieldInfo);\n        }\n      }\n      if (values == null) {\n        values = DocValues.emptySortedSet();\n      }\n      toMerge.add(values);\n    }\n\n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[toMerge.size()];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      SortedSetDocValues dv = toMerge.get(sub);\n      Bits liveDocs = mergeState.liveDocs[sub];\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        int docID;\n        while ((docID = dv.nextDoc()) != NO_MORE_DOCS) {\n          if (liveDocs.get(docID)) {\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(this, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(mergeFieldInfo,\n                      new EmptyDocValuesProducer() {\n                        @Override\n                        public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n                          if (fieldInfo != mergeFieldInfo) {\n                            throw new IllegalArgumentException(\"wrong FieldInfo\");\n                          }\n\n                          // We must make new iterators + DocIDMerger for each iterator:\n                          List<SortedSetDocValuesSub> subs = new ArrayList<>();\n\n                          long cost = 0;\n                          \n                          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                            SortedSetDocValues values = null;\n                            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                            if (docValuesProducer != null) {\n                              FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                              if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n                                values = docValuesProducer.getSortedSet(readerFieldInfo);\n                              }\n                            }\n                            if (values == null) {\n                              values = DocValues.emptySortedSet();\n                            }\n                            cost += values.cost();\n                            subs.add(new SortedSetDocValuesSub(mergeState.docMaps[i], values, map.getGlobalOrds(i)));\n                          }\n            \n                          final DocIDMerger<SortedSetDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n                          \n                          final long finalCost = cost;\n\n                          return new SortedSetDocValues() {\n                            private int docID = -1;\n                            private SortedSetDocValuesSub currentSub;\n\n                            @Override\n                            public int docID() {\n                              return docID;\n                            }\n\n                            @Override\n                            public int nextDoc() throws IOException {\n                              currentSub = docIDMerger.next();\n                              if (currentSub == null) {\n                                docID = NO_MORE_DOCS;\n                              } else {\n                                docID = currentSub.mappedDocID;\n                              }\n\n                              return docID;\n                            }\n\n                            @Override\n                            public int advance(int target) throws IOException {\n                              throw new UnsupportedOperationException();\n                            }\n\n                            @Override\n                            public boolean advanceExact(int target) throws IOException {\n                              throw new UnsupportedOperationException();\n                            }\n\n                            @Override\n                            public long nextOrd() throws IOException {\n                              long subOrd = currentSub.values.nextOrd();\n                              if (subOrd == NO_MORE_ORDS) {\n                                return NO_MORE_ORDS;\n                              }\n                              return currentSub.map.get(subOrd);\n                            }\n\n                            @Override\n                            public long cost() {\n                              return finalCost;\n                            }\n\n                            @Override\n                            public BytesRef lookupOrd(long ord) throws IOException {\n                              int segmentNumber = map.getFirstSegmentNumber(ord);\n                              long segmentOrd = map.getFirstSegmentOrd(ord);\n                              return toMerge.get(segmentNumber).lookupOrd(segmentOrd);\n                            }\n\n                            @Override\n                            public long getValueCount() {\n                              return map.getValueCount();\n                            }\n                          };\n                        }\n                      });\n  }\n\n","sourceOld":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    List<SortedSetDocValues> toMerge = new ArrayList<>();\n    for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n      SortedSetDocValues values = null;\n      DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n      if (docValuesProducer != null) {\n        FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n        if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n          values = docValuesProducer.getSortedSet(fieldInfo);\n        }\n      }\n      if (values == null) {\n        values = DocValues.emptySortedSet();\n      }\n      toMerge.add(values);\n    }\n\n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[toMerge.size()];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      SortedSetDocValues dv = toMerge.get(sub);\n      Bits liveDocs = mergeState.liveDocs[sub];\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        int docID;\n        while ((docID = dv.nextDoc()) != NO_MORE_DOCS) {\n          if (liveDocs.get(docID)) {\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(this, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(mergeFieldInfo,\n                      new EmptyDocValuesProducer() {\n                        @Override\n                        public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n                          if (fieldInfo != mergeFieldInfo) {\n                            throw new IllegalArgumentException(\"wrong FieldInfo\");\n                          }\n\n                          // We must make new iterators + DocIDMerger for each iterator:\n                          List<SortedSetDocValuesSub> subs = new ArrayList<>();\n\n                          long cost = 0;\n                          \n                          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                            SortedSetDocValues values = null;\n                            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                            if (docValuesProducer != null) {\n                              FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                              if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n                                values = docValuesProducer.getSortedSet(readerFieldInfo);\n                              }\n                            }\n                            if (values == null) {\n                              values = DocValues.emptySortedSet();\n                            }\n                            cost += values.cost();\n                            subs.add(new SortedSetDocValuesSub(mergeState.docMaps[i], values, map.getGlobalOrds(i)));\n                          }\n            \n                          final DocIDMerger<SortedSetDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n                          \n                          final long finalCost = cost;\n\n                          return new SortedSetDocValues() {\n                            private int docID = -1;\n                            private SortedSetDocValuesSub currentSub;\n\n                            @Override\n                            public int docID() {\n                              return docID;\n                            }\n\n                            @Override\n                            public int nextDoc() throws IOException {\n                              currentSub = docIDMerger.next();\n                              if (currentSub == null) {\n                                docID = NO_MORE_DOCS;\n                              } else {\n                                docID = currentSub.mappedDocID;\n                              }\n\n                              return docID;\n                            }\n\n                            @Override\n                            public int advance(int target) throws IOException {\n                              throw new UnsupportedOperationException();\n                            }\n\n                            @Override\n                            public long nextOrd() throws IOException {\n                              long subOrd = currentSub.values.nextOrd();\n                              if (subOrd == NO_MORE_ORDS) {\n                                return NO_MORE_ORDS;\n                              }\n                              return currentSub.map.get(subOrd);\n                            }\n\n                            @Override\n                            public long cost() {\n                              return finalCost;\n                            }\n\n                            @Override\n                            public BytesRef lookupOrd(long ord) throws IOException {\n                              int segmentNumber = map.getFirstSegmentNumber(ord);\n                              long segmentOrd = map.getFirstSegmentOrd(ord);\n                              return toMerge.get(segmentNumber).lookupOrd(segmentOrd);\n                            }\n\n                            @Override\n                            public long getValueCount() {\n                              return map.getValueCount();\n                            }\n                          };\n                        }\n                      });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2714c85633b642b29871cf5ff8d17d3ba7bfd76","date":1477307753,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState).mjava","sourceNew":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    List<SortedSetDocValues> toMerge = new ArrayList<>();\n    for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n      SortedSetDocValues values = null;\n      DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n      if (docValuesProducer != null) {\n        FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n        if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n          values = docValuesProducer.getSortedSet(fieldInfo);\n        }\n      }\n      if (values == null) {\n        values = DocValues.emptySortedSet();\n      }\n      toMerge.add(values);\n    }\n\n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[toMerge.size()];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      SortedSetDocValues dv = toMerge.get(sub);\n      Bits liveDocs = mergeState.liveDocs[sub];\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        int docID;\n        while ((docID = dv.nextDoc()) != NO_MORE_DOCS) {\n          if (liveDocs.get(docID)) {\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(this, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(mergeFieldInfo,\n                      new EmptyDocValuesProducer() {\n                        @Override\n                        public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n                          if (fieldInfo != mergeFieldInfo) {\n                            throw new IllegalArgumentException(\"wrong FieldInfo\");\n                          }\n\n                          // We must make new iterators + DocIDMerger for each iterator:\n                          List<SortedSetDocValuesSub> subs = new ArrayList<>();\n\n                          long cost = 0;\n                          \n                          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                            SortedSetDocValues values = null;\n                            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                            if (docValuesProducer != null) {\n                              FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                              if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n                                values = docValuesProducer.getSortedSet(readerFieldInfo);\n                              }\n                            }\n                            if (values == null) {\n                              values = DocValues.emptySortedSet();\n                            }\n                            cost += values.cost();\n                            subs.add(new SortedSetDocValuesSub(mergeState.docMaps[i], values, map.getGlobalOrds(i)));\n                          }\n            \n                          final DocIDMerger<SortedSetDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n                          \n                          final long finalCost = cost;\n\n                          return new SortedSetDocValues() {\n                            private int docID = -1;\n                            private SortedSetDocValuesSub currentSub;\n\n                            @Override\n                            public int docID() {\n                              return docID;\n                            }\n\n                            @Override\n                            public int nextDoc() throws IOException {\n                              currentSub = docIDMerger.next();\n                              if (currentSub == null) {\n                                docID = NO_MORE_DOCS;\n                              } else {\n                                docID = currentSub.mappedDocID;\n                              }\n\n                              return docID;\n                            }\n\n                            @Override\n                            public int advance(int target) throws IOException {\n                              throw new UnsupportedOperationException();\n                            }\n\n                            @Override\n                            public boolean advanceExact(int target) throws IOException {\n                              throw new UnsupportedOperationException();\n                            }\n\n                            @Override\n                            public long nextOrd() throws IOException {\n                              long subOrd = currentSub.values.nextOrd();\n                              if (subOrd == NO_MORE_ORDS) {\n                                return NO_MORE_ORDS;\n                              }\n                              return currentSub.map.get(subOrd);\n                            }\n\n                            @Override\n                            public long cost() {\n                              return finalCost;\n                            }\n\n                            @Override\n                            public BytesRef lookupOrd(long ord) throws IOException {\n                              int segmentNumber = map.getFirstSegmentNumber(ord);\n                              long segmentOrd = map.getFirstSegmentOrd(ord);\n                              return toMerge.get(segmentNumber).lookupOrd(segmentOrd);\n                            }\n\n                            @Override\n                            public long getValueCount() {\n                              return map.getValueCount();\n                            }\n                          };\n                        }\n                      });\n  }\n\n","sourceOld":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    List<SortedSetDocValues> toMerge = new ArrayList<>();\n    for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n      SortedSetDocValues values = null;\n      DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n      if (docValuesProducer != null) {\n        FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n        if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n          values = docValuesProducer.getSortedSet(fieldInfo);\n        }\n      }\n      if (values == null) {\n        values = DocValues.emptySortedSet();\n      }\n      toMerge.add(values);\n    }\n\n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[toMerge.size()];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      SortedSetDocValues dv = toMerge.get(sub);\n      Bits liveDocs = mergeState.liveDocs[sub];\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        int docID;\n        while ((docID = dv.nextDoc()) != NO_MORE_DOCS) {\n          if (liveDocs.get(docID)) {\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(this, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(mergeFieldInfo,\n                      new EmptyDocValuesProducer() {\n                        @Override\n                        public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n                          if (fieldInfo != mergeFieldInfo) {\n                            throw new IllegalArgumentException(\"wrong FieldInfo\");\n                          }\n\n                          // We must make new iterators + DocIDMerger for each iterator:\n                          List<SortedSetDocValuesSub> subs = new ArrayList<>();\n\n                          long cost = 0;\n                          \n                          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                            SortedSetDocValues values = null;\n                            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                            if (docValuesProducer != null) {\n                              FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                              if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n                                values = docValuesProducer.getSortedSet(readerFieldInfo);\n                              }\n                            }\n                            if (values == null) {\n                              values = DocValues.emptySortedSet();\n                            }\n                            cost += values.cost();\n                            subs.add(new SortedSetDocValuesSub(mergeState.docMaps[i], values, map.getGlobalOrds(i)));\n                          }\n            \n                          final DocIDMerger<SortedSetDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n                          \n                          final long finalCost = cost;\n\n                          return new SortedSetDocValues() {\n                            private int docID = -1;\n                            private SortedSetDocValuesSub currentSub;\n\n                            @Override\n                            public int docID() {\n                              return docID;\n                            }\n\n                            @Override\n                            public int nextDoc() throws IOException {\n                              currentSub = docIDMerger.next();\n                              if (currentSub == null) {\n                                docID = NO_MORE_DOCS;\n                              } else {\n                                docID = currentSub.mappedDocID;\n                              }\n\n                              return docID;\n                            }\n\n                            @Override\n                            public int advance(int target) throws IOException {\n                              throw new UnsupportedOperationException();\n                            }\n\n                            @Override\n                            public long nextOrd() throws IOException {\n                              long subOrd = currentSub.values.nextOrd();\n                              if (subOrd == NO_MORE_ORDS) {\n                                return NO_MORE_ORDS;\n                              }\n                              return currentSub.map.get(subOrd);\n                            }\n\n                            @Override\n                            public long cost() {\n                              return finalCost;\n                            }\n\n                            @Override\n                            public BytesRef lookupOrd(long ord) throws IOException {\n                              int segmentNumber = map.getFirstSegmentNumber(ord);\n                              long segmentOrd = map.getFirstSegmentOrd(ord);\n                              return toMerge.get(segmentNumber).lookupOrd(segmentOrd);\n                            }\n\n                            @Override\n                            public long getValueCount() {\n                              return map.getValueCount();\n                            }\n                          };\n                        }\n                      });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState).mjava","sourceNew":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    List<SortedSetDocValues> toMerge = new ArrayList<>();\n    for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n      SortedSetDocValues values = null;\n      DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n      if (docValuesProducer != null) {\n        FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n        if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n          values = docValuesProducer.getSortedSet(fieldInfo);\n        }\n      }\n      if (values == null) {\n        values = DocValues.emptySortedSet();\n      }\n      toMerge.add(values);\n    }\n\n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[toMerge.size()];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      SortedSetDocValues dv = toMerge.get(sub);\n      Bits liveDocs = mergeState.liveDocs[sub];\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        int docID;\n        while ((docID = dv.nextDoc()) != NO_MORE_DOCS) {\n          if (liveDocs.get(docID)) {\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(this, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(mergeFieldInfo,\n                      new EmptyDocValuesProducer() {\n                        @Override\n                        public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n                          if (fieldInfo != mergeFieldInfo) {\n                            throw new IllegalArgumentException(\"wrong FieldInfo\");\n                          }\n\n                          // We must make new iterators + DocIDMerger for each iterator:\n                          List<SortedSetDocValuesSub> subs = new ArrayList<>();\n\n                          long cost = 0;\n                          \n                          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                            SortedSetDocValues values = null;\n                            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                            if (docValuesProducer != null) {\n                              FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                              if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n                                values = docValuesProducer.getSortedSet(readerFieldInfo);\n                              }\n                            }\n                            if (values == null) {\n                              values = DocValues.emptySortedSet();\n                            }\n                            cost += values.cost();\n                            subs.add(new SortedSetDocValuesSub(mergeState.docMaps[i], values, map.getGlobalOrds(i)));\n                          }\n            \n                          final DocIDMerger<SortedSetDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n                          \n                          final long finalCost = cost;\n\n                          return new SortedSetDocValues() {\n                            private int docID = -1;\n                            private SortedSetDocValuesSub currentSub;\n\n                            @Override\n                            public int docID() {\n                              return docID;\n                            }\n\n                            @Override\n                            public int nextDoc() throws IOException {\n                              currentSub = docIDMerger.next();\n                              if (currentSub == null) {\n                                docID = NO_MORE_DOCS;\n                              } else {\n                                docID = currentSub.mappedDocID;\n                              }\n\n                              return docID;\n                            }\n\n                            @Override\n                            public int advance(int target) throws IOException {\n                              throw new UnsupportedOperationException();\n                            }\n\n                            @Override\n                            public boolean advanceExact(int target) throws IOException {\n                              throw new UnsupportedOperationException();\n                            }\n\n                            @Override\n                            public long nextOrd() throws IOException {\n                              long subOrd = currentSub.values.nextOrd();\n                              if (subOrd == NO_MORE_ORDS) {\n                                return NO_MORE_ORDS;\n                              }\n                              return currentSub.map.get(subOrd);\n                            }\n\n                            @Override\n                            public long cost() {\n                              return finalCost;\n                            }\n\n                            @Override\n                            public BytesRef lookupOrd(long ord) throws IOException {\n                              int segmentNumber = map.getFirstSegmentNumber(ord);\n                              long segmentOrd = map.getFirstSegmentOrd(ord);\n                              return toMerge.get(segmentNumber).lookupOrd(segmentOrd);\n                            }\n\n                            @Override\n                            public long getValueCount() {\n                              return map.getValueCount();\n                            }\n                          };\n                        }\n                      });\n  }\n\n","sourceOld":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    List<SortedSetDocValues> toMerge = new ArrayList<>();\n    for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n      SortedSetDocValues values = null;\n      DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n      if (docValuesProducer != null) {\n        FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n        if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n          values = docValuesProducer.getSortedSet(fieldInfo);\n        }\n      }\n      if (values == null) {\n        values = DocValues.emptySortedSet();\n      }\n      toMerge.add(values);\n    }\n\n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[toMerge.size()];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      SortedSetDocValues dv = toMerge.get(sub);\n      Bits liveDocs = mergeState.liveDocs[sub];\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        int docID;\n        while ((docID = dv.nextDoc()) != NO_MORE_DOCS) {\n          if (liveDocs.get(docID)) {\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(this, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(mergeFieldInfo,\n                      new EmptyDocValuesProducer() {\n                        @Override\n                        public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n                          if (fieldInfo != mergeFieldInfo) {\n                            throw new IllegalArgumentException(\"wrong FieldInfo\");\n                          }\n\n                          // We must make new iterators + DocIDMerger for each iterator:\n                          List<SortedSetDocValuesSub> subs = new ArrayList<>();\n\n                          long cost = 0;\n                          \n                          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                            SortedSetDocValues values = null;\n                            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                            if (docValuesProducer != null) {\n                              FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                              if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n                                values = docValuesProducer.getSortedSet(readerFieldInfo);\n                              }\n                            }\n                            if (values == null) {\n                              values = DocValues.emptySortedSet();\n                            }\n                            cost += values.cost();\n                            subs.add(new SortedSetDocValuesSub(mergeState.docMaps[i], values, map.getGlobalOrds(i)));\n                          }\n            \n                          final DocIDMerger<SortedSetDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n                          \n                          final long finalCost = cost;\n\n                          return new SortedSetDocValues() {\n                            private int docID = -1;\n                            private SortedSetDocValuesSub currentSub;\n\n                            @Override\n                            public int docID() {\n                              return docID;\n                            }\n\n                            @Override\n                            public int nextDoc() throws IOException {\n                              currentSub = docIDMerger.next();\n                              if (currentSub == null) {\n                                docID = NO_MORE_DOCS;\n                              } else {\n                                docID = currentSub.mappedDocID;\n                              }\n\n                              return docID;\n                            }\n\n                            @Override\n                            public int advance(int target) throws IOException {\n                              throw new UnsupportedOperationException();\n                            }\n\n                            @Override\n                            public long nextOrd() throws IOException {\n                              long subOrd = currentSub.values.nextOrd();\n                              if (subOrd == NO_MORE_ORDS) {\n                                return NO_MORE_ORDS;\n                              }\n                              return currentSub.map.get(subOrd);\n                            }\n\n                            @Override\n                            public long cost() {\n                              return finalCost;\n                            }\n\n                            @Override\n                            public BytesRef lookupOrd(long ord) throws IOException {\n                              int segmentNumber = map.getFirstSegmentNumber(ord);\n                              long segmentOrd = map.getFirstSegmentOrd(ord);\n                              return toMerge.get(segmentNumber).lookupOrd(segmentOrd);\n                            }\n\n                            @Override\n                            public long getValueCount() {\n                              return map.getValueCount();\n                            }\n                          };\n                        }\n                      });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"653128722fb3b4713ac331c621491a93f34a4a22","date":1479841816,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState).mjava","sourceNew":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    List<SortedSetDocValues> toMerge = new ArrayList<>();\n    for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n      SortedSetDocValues values = null;\n      DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n      if (docValuesProducer != null) {\n        FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n        if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n          values = docValuesProducer.getSortedSet(fieldInfo);\n        }\n      }\n      if (values == null) {\n        values = DocValues.emptySortedSet();\n      }\n      toMerge.add(values);\n    }\n\n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[toMerge.size()];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      SortedSetDocValues dv = toMerge.get(sub);\n      Bits liveDocs = mergeState.liveDocs[sub];\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        int docID;\n        while ((docID = dv.nextDoc()) != NO_MORE_DOCS) {\n          if (liveDocs.get(docID)) {\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(this, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(mergeFieldInfo,\n                      new EmptyDocValuesProducer() {\n                        @Override\n                        public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n                          if (fieldInfo != mergeFieldInfo) {\n                            throw new IllegalArgumentException(\"wrong FieldInfo\");\n                          }\n\n                          // We must make new iterators + DocIDMerger for each iterator:\n                          List<SortedSetDocValuesSub> subs = new ArrayList<>();\n\n                          long cost = 0;\n                          \n                          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                            SortedSetDocValues values = null;\n                            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                            if (docValuesProducer != null) {\n                              FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                              if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n                                values = docValuesProducer.getSortedSet(readerFieldInfo);\n                              }\n                            }\n                            if (values == null) {\n                              values = DocValues.emptySortedSet();\n                            }\n                            cost += values.cost();\n                            subs.add(new SortedSetDocValuesSub(mergeState.docMaps[i], values, map.getGlobalOrds(i)));\n                          }\n            \n                          final DocIDMerger<SortedSetDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.needsIndexSort);\n                          \n                          final long finalCost = cost;\n\n                          return new SortedSetDocValues() {\n                            private int docID = -1;\n                            private SortedSetDocValuesSub currentSub;\n\n                            @Override\n                            public int docID() {\n                              return docID;\n                            }\n\n                            @Override\n                            public int nextDoc() throws IOException {\n                              currentSub = docIDMerger.next();\n                              if (currentSub == null) {\n                                docID = NO_MORE_DOCS;\n                              } else {\n                                docID = currentSub.mappedDocID;\n                              }\n\n                              return docID;\n                            }\n\n                            @Override\n                            public int advance(int target) throws IOException {\n                              throw new UnsupportedOperationException();\n                            }\n\n                            @Override\n                            public boolean advanceExact(int target) throws IOException {\n                              throw new UnsupportedOperationException();\n                            }\n\n                            @Override\n                            public long nextOrd() throws IOException {\n                              long subOrd = currentSub.values.nextOrd();\n                              if (subOrd == NO_MORE_ORDS) {\n                                return NO_MORE_ORDS;\n                              }\n                              return currentSub.map.get(subOrd);\n                            }\n\n                            @Override\n                            public long cost() {\n                              return finalCost;\n                            }\n\n                            @Override\n                            public BytesRef lookupOrd(long ord) throws IOException {\n                              int segmentNumber = map.getFirstSegmentNumber(ord);\n                              long segmentOrd = map.getFirstSegmentOrd(ord);\n                              return toMerge.get(segmentNumber).lookupOrd(segmentOrd);\n                            }\n\n                            @Override\n                            public long getValueCount() {\n                              return map.getValueCount();\n                            }\n                          };\n                        }\n                      });\n  }\n\n","sourceOld":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    List<SortedSetDocValues> toMerge = new ArrayList<>();\n    for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n      SortedSetDocValues values = null;\n      DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n      if (docValuesProducer != null) {\n        FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n        if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n          values = docValuesProducer.getSortedSet(fieldInfo);\n        }\n      }\n      if (values == null) {\n        values = DocValues.emptySortedSet();\n      }\n      toMerge.add(values);\n    }\n\n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[toMerge.size()];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      SortedSetDocValues dv = toMerge.get(sub);\n      Bits liveDocs = mergeState.liveDocs[sub];\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        int docID;\n        while ((docID = dv.nextDoc()) != NO_MORE_DOCS) {\n          if (liveDocs.get(docID)) {\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(this, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(mergeFieldInfo,\n                      new EmptyDocValuesProducer() {\n                        @Override\n                        public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n                          if (fieldInfo != mergeFieldInfo) {\n                            throw new IllegalArgumentException(\"wrong FieldInfo\");\n                          }\n\n                          // We must make new iterators + DocIDMerger for each iterator:\n                          List<SortedSetDocValuesSub> subs = new ArrayList<>();\n\n                          long cost = 0;\n                          \n                          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                            SortedSetDocValues values = null;\n                            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                            if (docValuesProducer != null) {\n                              FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                              if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n                                values = docValuesProducer.getSortedSet(readerFieldInfo);\n                              }\n                            }\n                            if (values == null) {\n                              values = DocValues.emptySortedSet();\n                            }\n                            cost += values.cost();\n                            subs.add(new SortedSetDocValuesSub(mergeState.docMaps[i], values, map.getGlobalOrds(i)));\n                          }\n            \n                          final DocIDMerger<SortedSetDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n                          \n                          final long finalCost = cost;\n\n                          return new SortedSetDocValues() {\n                            private int docID = -1;\n                            private SortedSetDocValuesSub currentSub;\n\n                            @Override\n                            public int docID() {\n                              return docID;\n                            }\n\n                            @Override\n                            public int nextDoc() throws IOException {\n                              currentSub = docIDMerger.next();\n                              if (currentSub == null) {\n                                docID = NO_MORE_DOCS;\n                              } else {\n                                docID = currentSub.mappedDocID;\n                              }\n\n                              return docID;\n                            }\n\n                            @Override\n                            public int advance(int target) throws IOException {\n                              throw new UnsupportedOperationException();\n                            }\n\n                            @Override\n                            public boolean advanceExact(int target) throws IOException {\n                              throw new UnsupportedOperationException();\n                            }\n\n                            @Override\n                            public long nextOrd() throws IOException {\n                              long subOrd = currentSub.values.nextOrd();\n                              if (subOrd == NO_MORE_ORDS) {\n                                return NO_MORE_ORDS;\n                              }\n                              return currentSub.map.get(subOrd);\n                            }\n\n                            @Override\n                            public long cost() {\n                              return finalCost;\n                            }\n\n                            @Override\n                            public BytesRef lookupOrd(long ord) throws IOException {\n                              int segmentNumber = map.getFirstSegmentNumber(ord);\n                              long segmentOrd = map.getFirstSegmentOrd(ord);\n                              return toMerge.get(segmentNumber).lookupOrd(segmentOrd);\n                            }\n\n                            @Override\n                            public long getValueCount() {\n                              return map.getValueCount();\n                            }\n                          };\n                        }\n                      });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState).mjava","sourceNew":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    List<SortedSetDocValues> toMerge = new ArrayList<>();\n    for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n      SortedSetDocValues values = null;\n      DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n      if (docValuesProducer != null) {\n        FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n        if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n          values = docValuesProducer.getSortedSet(fieldInfo);\n        }\n      }\n      if (values == null) {\n        values = DocValues.emptySortedSet();\n      }\n      toMerge.add(values);\n    }\n\n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[toMerge.size()];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      SortedSetDocValues dv = toMerge.get(sub);\n      Bits liveDocs = mergeState.liveDocs[sub];\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        int docID;\n        while ((docID = dv.nextDoc()) != NO_MORE_DOCS) {\n          if (liveDocs.get(docID)) {\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(this, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(mergeFieldInfo,\n                      new EmptyDocValuesProducer() {\n                        @Override\n                        public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n                          if (fieldInfo != mergeFieldInfo) {\n                            throw new IllegalArgumentException(\"wrong FieldInfo\");\n                          }\n\n                          // We must make new iterators + DocIDMerger for each iterator:\n                          List<SortedSetDocValuesSub> subs = new ArrayList<>();\n\n                          long cost = 0;\n                          \n                          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                            SortedSetDocValues values = null;\n                            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                            if (docValuesProducer != null) {\n                              FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                              if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n                                values = docValuesProducer.getSortedSet(readerFieldInfo);\n                              }\n                            }\n                            if (values == null) {\n                              values = DocValues.emptySortedSet();\n                            }\n                            cost += values.cost();\n                            subs.add(new SortedSetDocValuesSub(mergeState.docMaps[i], values, map.getGlobalOrds(i)));\n                          }\n            \n                          final DocIDMerger<SortedSetDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.needsIndexSort);\n                          \n                          final long finalCost = cost;\n\n                          return new SortedSetDocValues() {\n                            private int docID = -1;\n                            private SortedSetDocValuesSub currentSub;\n\n                            @Override\n                            public int docID() {\n                              return docID;\n                            }\n\n                            @Override\n                            public int nextDoc() throws IOException {\n                              currentSub = docIDMerger.next();\n                              if (currentSub == null) {\n                                docID = NO_MORE_DOCS;\n                              } else {\n                                docID = currentSub.mappedDocID;\n                              }\n\n                              return docID;\n                            }\n\n                            @Override\n                            public int advance(int target) throws IOException {\n                              throw new UnsupportedOperationException();\n                            }\n\n                            @Override\n                            public boolean advanceExact(int target) throws IOException {\n                              throw new UnsupportedOperationException();\n                            }\n\n                            @Override\n                            public long nextOrd() throws IOException {\n                              long subOrd = currentSub.values.nextOrd();\n                              if (subOrd == NO_MORE_ORDS) {\n                                return NO_MORE_ORDS;\n                              }\n                              return currentSub.map.get(subOrd);\n                            }\n\n                            @Override\n                            public long cost() {\n                              return finalCost;\n                            }\n\n                            @Override\n                            public BytesRef lookupOrd(long ord) throws IOException {\n                              int segmentNumber = map.getFirstSegmentNumber(ord);\n                              long segmentOrd = map.getFirstSegmentOrd(ord);\n                              return toMerge.get(segmentNumber).lookupOrd(segmentOrd);\n                            }\n\n                            @Override\n                            public long getValueCount() {\n                              return map.getValueCount();\n                            }\n                          };\n                        }\n                      });\n  }\n\n","sourceOld":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    List<SortedSetDocValues> toMerge = new ArrayList<>();\n    for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n      SortedSetDocValues values = null;\n      DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n      if (docValuesProducer != null) {\n        FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n        if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n          values = docValuesProducer.getSortedSet(fieldInfo);\n        }\n      }\n      if (values == null) {\n        values = DocValues.emptySortedSet();\n      }\n      toMerge.add(values);\n    }\n\n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[toMerge.size()];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      SortedSetDocValues dv = toMerge.get(sub);\n      Bits liveDocs = mergeState.liveDocs[sub];\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        int docID;\n        while ((docID = dv.nextDoc()) != NO_MORE_DOCS) {\n          if (liveDocs.get(docID)) {\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(this, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(mergeFieldInfo,\n                      new EmptyDocValuesProducer() {\n                        @Override\n                        public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n                          if (fieldInfo != mergeFieldInfo) {\n                            throw new IllegalArgumentException(\"wrong FieldInfo\");\n                          }\n\n                          // We must make new iterators + DocIDMerger for each iterator:\n                          List<SortedSetDocValuesSub> subs = new ArrayList<>();\n\n                          long cost = 0;\n                          \n                          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                            SortedSetDocValues values = null;\n                            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                            if (docValuesProducer != null) {\n                              FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                              if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n                                values = docValuesProducer.getSortedSet(readerFieldInfo);\n                              }\n                            }\n                            if (values == null) {\n                              values = DocValues.emptySortedSet();\n                            }\n                            cost += values.cost();\n                            subs.add(new SortedSetDocValuesSub(mergeState.docMaps[i], values, map.getGlobalOrds(i)));\n                          }\n            \n                          final DocIDMerger<SortedSetDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);\n                          \n                          final long finalCost = cost;\n\n                          return new SortedSetDocValues() {\n                            private int docID = -1;\n                            private SortedSetDocValuesSub currentSub;\n\n                            @Override\n                            public int docID() {\n                              return docID;\n                            }\n\n                            @Override\n                            public int nextDoc() throws IOException {\n                              currentSub = docIDMerger.next();\n                              if (currentSub == null) {\n                                docID = NO_MORE_DOCS;\n                              } else {\n                                docID = currentSub.mappedDocID;\n                              }\n\n                              return docID;\n                            }\n\n                            @Override\n                            public int advance(int target) throws IOException {\n                              throw new UnsupportedOperationException();\n                            }\n\n                            @Override\n                            public boolean advanceExact(int target) throws IOException {\n                              throw new UnsupportedOperationException();\n                            }\n\n                            @Override\n                            public long nextOrd() throws IOException {\n                              long subOrd = currentSub.values.nextOrd();\n                              if (subOrd == NO_MORE_ORDS) {\n                                return NO_MORE_ORDS;\n                              }\n                              return currentSub.map.get(subOrd);\n                            }\n\n                            @Override\n                            public long cost() {\n                              return finalCost;\n                            }\n\n                            @Override\n                            public BytesRef lookupOrd(long ord) throws IOException {\n                              int segmentNumber = map.getFirstSegmentNumber(ord);\n                              long segmentOrd = map.getFirstSegmentOrd(ord);\n                              return toMerge.get(segmentNumber).lookupOrd(segmentOrd);\n                            }\n\n                            @Override\n                            public long getValueCount() {\n                              return map.getValueCount();\n                            }\n                          };\n                        }\n                      });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d85b6e22926e7564c040d2a864f4887f6c59fa92","date":1482349496,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState).mjava","sourceNew":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    List<SortedSetDocValues> toMerge = new ArrayList<>();\n    for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n      SortedSetDocValues values = null;\n      DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n      if (docValuesProducer != null) {\n        FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n        if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n          values = docValuesProducer.getSortedSet(fieldInfo);\n        }\n      }\n      if (values == null) {\n        values = DocValues.emptySortedSet();\n      }\n      toMerge.add(values);\n    }\n\n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[toMerge.size()];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      SortedSetDocValues dv = toMerge.get(sub);\n      Bits liveDocs = mergeState.liveDocs[sub];\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        int docID;\n        while ((docID = dv.nextDoc()) != NO_MORE_DOCS) {\n          if (liveDocs.get(docID)) {\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(this, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(mergeFieldInfo,\n                      new EmptyDocValuesProducer() {\n                        @Override\n                        public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n                          if (fieldInfo != mergeFieldInfo) {\n                            throw new IllegalArgumentException(\"wrong FieldInfo\");\n                          }\n\n                          // We must make new iterators + DocIDMerger for each iterator:\n                          List<SortedSetDocValuesSub> subs = new ArrayList<>();\n\n                          long cost = 0;\n                          \n                          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                            SortedSetDocValues values = null;\n                            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                            if (docValuesProducer != null) {\n                              FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                              if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n                                values = docValuesProducer.getSortedSet(readerFieldInfo);\n                              }\n                            }\n                            if (values == null) {\n                              values = DocValues.emptySortedSet();\n                            }\n                            cost += values.cost();\n                            subs.add(new SortedSetDocValuesSub(mergeState.docMaps[i], values, map.getGlobalOrds(i)));\n                          }\n            \n                          final DocIDMerger<SortedSetDocValuesSub> docIDMerger = DocIDMerger.of(subs, mergeState.needsIndexSort);\n                          \n                          final long finalCost = cost;\n\n                          return new SortedSetDocValues() {\n                            private int docID = -1;\n                            private SortedSetDocValuesSub currentSub;\n\n                            @Override\n                            public int docID() {\n                              return docID;\n                            }\n\n                            @Override\n                            public int nextDoc() throws IOException {\n                              currentSub = docIDMerger.next();\n                              if (currentSub == null) {\n                                docID = NO_MORE_DOCS;\n                              } else {\n                                docID = currentSub.mappedDocID;\n                              }\n\n                              return docID;\n                            }\n\n                            @Override\n                            public int advance(int target) throws IOException {\n                              throw new UnsupportedOperationException();\n                            }\n\n                            @Override\n                            public boolean advanceExact(int target) throws IOException {\n                              throw new UnsupportedOperationException();\n                            }\n\n                            @Override\n                            public long nextOrd() throws IOException {\n                              long subOrd = currentSub.values.nextOrd();\n                              if (subOrd == NO_MORE_ORDS) {\n                                return NO_MORE_ORDS;\n                              }\n                              return currentSub.map.get(subOrd);\n                            }\n\n                            @Override\n                            public long cost() {\n                              return finalCost;\n                            }\n\n                            @Override\n                            public BytesRef lookupOrd(long ord) throws IOException {\n                              int segmentNumber = map.getFirstSegmentNumber(ord);\n                              long segmentOrd = map.getFirstSegmentOrd(ord);\n                              return toMerge.get(segmentNumber).lookupOrd(segmentOrd);\n                            }\n\n                            @Override\n                            public long getValueCount() {\n                              return map.getValueCount();\n                            }\n                          };\n                        }\n                      });\n  }\n\n","sourceOld":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    List<SortedSetDocValues> toMerge = new ArrayList<>();\n    for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n      SortedSetDocValues values = null;\n      DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n      if (docValuesProducer != null) {\n        FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n        if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n          values = docValuesProducer.getSortedSet(fieldInfo);\n        }\n      }\n      if (values == null) {\n        values = DocValues.emptySortedSet();\n      }\n      toMerge.add(values);\n    }\n\n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[toMerge.size()];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      SortedSetDocValues dv = toMerge.get(sub);\n      Bits liveDocs = mergeState.liveDocs[sub];\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        int docID;\n        while ((docID = dv.nextDoc()) != NO_MORE_DOCS) {\n          if (liveDocs.get(docID)) {\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(this, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(mergeFieldInfo,\n                      new EmptyDocValuesProducer() {\n                        @Override\n                        public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n                          if (fieldInfo != mergeFieldInfo) {\n                            throw new IllegalArgumentException(\"wrong FieldInfo\");\n                          }\n\n                          // We must make new iterators + DocIDMerger for each iterator:\n                          List<SortedSetDocValuesSub> subs = new ArrayList<>();\n\n                          long cost = 0;\n                          \n                          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                            SortedSetDocValues values = null;\n                            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                            if (docValuesProducer != null) {\n                              FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                              if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n                                values = docValuesProducer.getSortedSet(readerFieldInfo);\n                              }\n                            }\n                            if (values == null) {\n                              values = DocValues.emptySortedSet();\n                            }\n                            cost += values.cost();\n                            subs.add(new SortedSetDocValuesSub(mergeState.docMaps[i], values, map.getGlobalOrds(i)));\n                          }\n            \n                          final DocIDMerger<SortedSetDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.needsIndexSort);\n                          \n                          final long finalCost = cost;\n\n                          return new SortedSetDocValues() {\n                            private int docID = -1;\n                            private SortedSetDocValuesSub currentSub;\n\n                            @Override\n                            public int docID() {\n                              return docID;\n                            }\n\n                            @Override\n                            public int nextDoc() throws IOException {\n                              currentSub = docIDMerger.next();\n                              if (currentSub == null) {\n                                docID = NO_MORE_DOCS;\n                              } else {\n                                docID = currentSub.mappedDocID;\n                              }\n\n                              return docID;\n                            }\n\n                            @Override\n                            public int advance(int target) throws IOException {\n                              throw new UnsupportedOperationException();\n                            }\n\n                            @Override\n                            public boolean advanceExact(int target) throws IOException {\n                              throw new UnsupportedOperationException();\n                            }\n\n                            @Override\n                            public long nextOrd() throws IOException {\n                              long subOrd = currentSub.values.nextOrd();\n                              if (subOrd == NO_MORE_ORDS) {\n                                return NO_MORE_ORDS;\n                              }\n                              return currentSub.map.get(subOrd);\n                            }\n\n                            @Override\n                            public long cost() {\n                              return finalCost;\n                            }\n\n                            @Override\n                            public BytesRef lookupOrd(long ord) throws IOException {\n                              int segmentNumber = map.getFirstSegmentNumber(ord);\n                              long segmentOrd = map.getFirstSegmentOrd(ord);\n                              return toMerge.get(segmentNumber).lookupOrd(segmentOrd);\n                            }\n\n                            @Override\n                            public long getValueCount() {\n                              return map.getValueCount();\n                            }\n                          };\n                        }\n                      });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState).mjava","sourceNew":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    List<SortedSetDocValues> toMerge = new ArrayList<>();\n    for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n      SortedSetDocValues values = null;\n      DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n      if (docValuesProducer != null) {\n        FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n        if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n          values = docValuesProducer.getSortedSet(fieldInfo);\n        }\n      }\n      if (values == null) {\n        values = DocValues.emptySortedSet();\n      }\n      toMerge.add(values);\n    }\n\n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[toMerge.size()];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      SortedSetDocValues dv = toMerge.get(sub);\n      Bits liveDocs = mergeState.liveDocs[sub];\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        int docID;\n        while ((docID = dv.nextDoc()) != NO_MORE_DOCS) {\n          if (liveDocs.get(docID)) {\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(this, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(mergeFieldInfo,\n                      new EmptyDocValuesProducer() {\n                        @Override\n                        public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n                          if (fieldInfo != mergeFieldInfo) {\n                            throw new IllegalArgumentException(\"wrong FieldInfo\");\n                          }\n\n                          // We must make new iterators + DocIDMerger for each iterator:\n                          List<SortedSetDocValuesSub> subs = new ArrayList<>();\n\n                          long cost = 0;\n                          \n                          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                            SortedSetDocValues values = null;\n                            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                            if (docValuesProducer != null) {\n                              FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                              if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n                                values = docValuesProducer.getSortedSet(readerFieldInfo);\n                              }\n                            }\n                            if (values == null) {\n                              values = DocValues.emptySortedSet();\n                            }\n                            cost += values.cost();\n                            subs.add(new SortedSetDocValuesSub(mergeState.docMaps[i], values, map.getGlobalOrds(i)));\n                          }\n            \n                          final DocIDMerger<SortedSetDocValuesSub> docIDMerger = DocIDMerger.of(subs, mergeState.needsIndexSort);\n                          \n                          final long finalCost = cost;\n\n                          return new SortedSetDocValues() {\n                            private int docID = -1;\n                            private SortedSetDocValuesSub currentSub;\n\n                            @Override\n                            public int docID() {\n                              return docID;\n                            }\n\n                            @Override\n                            public int nextDoc() throws IOException {\n                              currentSub = docIDMerger.next();\n                              if (currentSub == null) {\n                                docID = NO_MORE_DOCS;\n                              } else {\n                                docID = currentSub.mappedDocID;\n                              }\n\n                              return docID;\n                            }\n\n                            @Override\n                            public int advance(int target) throws IOException {\n                              throw new UnsupportedOperationException();\n                            }\n\n                            @Override\n                            public boolean advanceExact(int target) throws IOException {\n                              throw new UnsupportedOperationException();\n                            }\n\n                            @Override\n                            public long nextOrd() throws IOException {\n                              long subOrd = currentSub.values.nextOrd();\n                              if (subOrd == NO_MORE_ORDS) {\n                                return NO_MORE_ORDS;\n                              }\n                              return currentSub.map.get(subOrd);\n                            }\n\n                            @Override\n                            public long cost() {\n                              return finalCost;\n                            }\n\n                            @Override\n                            public BytesRef lookupOrd(long ord) throws IOException {\n                              int segmentNumber = map.getFirstSegmentNumber(ord);\n                              long segmentOrd = map.getFirstSegmentOrd(ord);\n                              return toMerge.get(segmentNumber).lookupOrd(segmentOrd);\n                            }\n\n                            @Override\n                            public long getValueCount() {\n                              return map.getValueCount();\n                            }\n                          };\n                        }\n                      });\n  }\n\n","sourceOld":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    List<SortedSetDocValues> toMerge = new ArrayList<>();\n    for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n      SortedSetDocValues values = null;\n      DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n      if (docValuesProducer != null) {\n        FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n        if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n          values = docValuesProducer.getSortedSet(fieldInfo);\n        }\n      }\n      if (values == null) {\n        values = DocValues.emptySortedSet();\n      }\n      toMerge.add(values);\n    }\n\n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[toMerge.size()];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      SortedSetDocValues dv = toMerge.get(sub);\n      Bits liveDocs = mergeState.liveDocs[sub];\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        int docID;\n        while ((docID = dv.nextDoc()) != NO_MORE_DOCS) {\n          if (liveDocs.get(docID)) {\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(this, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(mergeFieldInfo,\n                      new EmptyDocValuesProducer() {\n                        @Override\n                        public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n                          if (fieldInfo != mergeFieldInfo) {\n                            throw new IllegalArgumentException(\"wrong FieldInfo\");\n                          }\n\n                          // We must make new iterators + DocIDMerger for each iterator:\n                          List<SortedSetDocValuesSub> subs = new ArrayList<>();\n\n                          long cost = 0;\n                          \n                          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                            SortedSetDocValues values = null;\n                            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                            if (docValuesProducer != null) {\n                              FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                              if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n                                values = docValuesProducer.getSortedSet(readerFieldInfo);\n                              }\n                            }\n                            if (values == null) {\n                              values = DocValues.emptySortedSet();\n                            }\n                            cost += values.cost();\n                            subs.add(new SortedSetDocValuesSub(mergeState.docMaps[i], values, map.getGlobalOrds(i)));\n                          }\n            \n                          final DocIDMerger<SortedSetDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.needsIndexSort);\n                          \n                          final long finalCost = cost;\n\n                          return new SortedSetDocValues() {\n                            private int docID = -1;\n                            private SortedSetDocValuesSub currentSub;\n\n                            @Override\n                            public int docID() {\n                              return docID;\n                            }\n\n                            @Override\n                            public int nextDoc() throws IOException {\n                              currentSub = docIDMerger.next();\n                              if (currentSub == null) {\n                                docID = NO_MORE_DOCS;\n                              } else {\n                                docID = currentSub.mappedDocID;\n                              }\n\n                              return docID;\n                            }\n\n                            @Override\n                            public int advance(int target) throws IOException {\n                              throw new UnsupportedOperationException();\n                            }\n\n                            @Override\n                            public boolean advanceExact(int target) throws IOException {\n                              throw new UnsupportedOperationException();\n                            }\n\n                            @Override\n                            public long nextOrd() throws IOException {\n                              long subOrd = currentSub.values.nextOrd();\n                              if (subOrd == NO_MORE_ORDS) {\n                                return NO_MORE_ORDS;\n                              }\n                              return currentSub.map.get(subOrd);\n                            }\n\n                            @Override\n                            public long cost() {\n                              return finalCost;\n                            }\n\n                            @Override\n                            public BytesRef lookupOrd(long ord) throws IOException {\n                              int segmentNumber = map.getFirstSegmentNumber(ord);\n                              long segmentOrd = map.getFirstSegmentOrd(ord);\n                              return toMerge.get(segmentNumber).lookupOrd(segmentOrd);\n                            }\n\n                            @Override\n                            public long getValueCount() {\n                              return map.getValueCount();\n                            }\n                          };\n                        }\n                      });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d211216c83f01894810543d1c107160a9ae3650b","date":1488289605,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState).mjava","sourceNew":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    List<SortedSetDocValues> toMerge = new ArrayList<>();\n    for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n      SortedSetDocValues values = null;\n      DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n      if (docValuesProducer != null) {\n        FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n        if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n          values = docValuesProducer.getSortedSet(fieldInfo);\n        }\n      }\n      if (values == null) {\n        values = DocValues.emptySortedSet();\n      }\n      toMerge.add(values);\n    }\n\n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[toMerge.size()];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      SortedSetDocValues dv = toMerge.get(sub);\n      Bits liveDocs = mergeState.liveDocs[sub];\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        int docID;\n        while ((docID = dv.nextDoc()) != NO_MORE_DOCS) {\n          if (liveDocs.get(docID)) {\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(null, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(mergeFieldInfo,\n                      new EmptyDocValuesProducer() {\n                        @Override\n                        public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n                          if (fieldInfo != mergeFieldInfo) {\n                            throw new IllegalArgumentException(\"wrong FieldInfo\");\n                          }\n\n                          // We must make new iterators + DocIDMerger for each iterator:\n                          List<SortedSetDocValuesSub> subs = new ArrayList<>();\n\n                          long cost = 0;\n                          \n                          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                            SortedSetDocValues values = null;\n                            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                            if (docValuesProducer != null) {\n                              FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                              if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n                                values = docValuesProducer.getSortedSet(readerFieldInfo);\n                              }\n                            }\n                            if (values == null) {\n                              values = DocValues.emptySortedSet();\n                            }\n                            cost += values.cost();\n                            subs.add(new SortedSetDocValuesSub(mergeState.docMaps[i], values, map.getGlobalOrds(i)));\n                          }\n            \n                          final DocIDMerger<SortedSetDocValuesSub> docIDMerger = DocIDMerger.of(subs, mergeState.needsIndexSort);\n                          \n                          final long finalCost = cost;\n\n                          return new SortedSetDocValues() {\n                            private int docID = -1;\n                            private SortedSetDocValuesSub currentSub;\n\n                            @Override\n                            public int docID() {\n                              return docID;\n                            }\n\n                            @Override\n                            public int nextDoc() throws IOException {\n                              currentSub = docIDMerger.next();\n                              if (currentSub == null) {\n                                docID = NO_MORE_DOCS;\n                              } else {\n                                docID = currentSub.mappedDocID;\n                              }\n\n                              return docID;\n                            }\n\n                            @Override\n                            public int advance(int target) throws IOException {\n                              throw new UnsupportedOperationException();\n                            }\n\n                            @Override\n                            public boolean advanceExact(int target) throws IOException {\n                              throw new UnsupportedOperationException();\n                            }\n\n                            @Override\n                            public long nextOrd() throws IOException {\n                              long subOrd = currentSub.values.nextOrd();\n                              if (subOrd == NO_MORE_ORDS) {\n                                return NO_MORE_ORDS;\n                              }\n                              return currentSub.map.get(subOrd);\n                            }\n\n                            @Override\n                            public long cost() {\n                              return finalCost;\n                            }\n\n                            @Override\n                            public BytesRef lookupOrd(long ord) throws IOException {\n                              int segmentNumber = map.getFirstSegmentNumber(ord);\n                              long segmentOrd = map.getFirstSegmentOrd(ord);\n                              return toMerge.get(segmentNumber).lookupOrd(segmentOrd);\n                            }\n\n                            @Override\n                            public long getValueCount() {\n                              return map.getValueCount();\n                            }\n                          };\n                        }\n                      });\n  }\n\n","sourceOld":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    List<SortedSetDocValues> toMerge = new ArrayList<>();\n    for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n      SortedSetDocValues values = null;\n      DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n      if (docValuesProducer != null) {\n        FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n        if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n          values = docValuesProducer.getSortedSet(fieldInfo);\n        }\n      }\n      if (values == null) {\n        values = DocValues.emptySortedSet();\n      }\n      toMerge.add(values);\n    }\n\n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[toMerge.size()];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      SortedSetDocValues dv = toMerge.get(sub);\n      Bits liveDocs = mergeState.liveDocs[sub];\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        int docID;\n        while ((docID = dv.nextDoc()) != NO_MORE_DOCS) {\n          if (liveDocs.get(docID)) {\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(this, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(mergeFieldInfo,\n                      new EmptyDocValuesProducer() {\n                        @Override\n                        public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n                          if (fieldInfo != mergeFieldInfo) {\n                            throw new IllegalArgumentException(\"wrong FieldInfo\");\n                          }\n\n                          // We must make new iterators + DocIDMerger for each iterator:\n                          List<SortedSetDocValuesSub> subs = new ArrayList<>();\n\n                          long cost = 0;\n                          \n                          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                            SortedSetDocValues values = null;\n                            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                            if (docValuesProducer != null) {\n                              FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                              if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n                                values = docValuesProducer.getSortedSet(readerFieldInfo);\n                              }\n                            }\n                            if (values == null) {\n                              values = DocValues.emptySortedSet();\n                            }\n                            cost += values.cost();\n                            subs.add(new SortedSetDocValuesSub(mergeState.docMaps[i], values, map.getGlobalOrds(i)));\n                          }\n            \n                          final DocIDMerger<SortedSetDocValuesSub> docIDMerger = DocIDMerger.of(subs, mergeState.needsIndexSort);\n                          \n                          final long finalCost = cost;\n\n                          return new SortedSetDocValues() {\n                            private int docID = -1;\n                            private SortedSetDocValuesSub currentSub;\n\n                            @Override\n                            public int docID() {\n                              return docID;\n                            }\n\n                            @Override\n                            public int nextDoc() throws IOException {\n                              currentSub = docIDMerger.next();\n                              if (currentSub == null) {\n                                docID = NO_MORE_DOCS;\n                              } else {\n                                docID = currentSub.mappedDocID;\n                              }\n\n                              return docID;\n                            }\n\n                            @Override\n                            public int advance(int target) throws IOException {\n                              throw new UnsupportedOperationException();\n                            }\n\n                            @Override\n                            public boolean advanceExact(int target) throws IOException {\n                              throw new UnsupportedOperationException();\n                            }\n\n                            @Override\n                            public long nextOrd() throws IOException {\n                              long subOrd = currentSub.values.nextOrd();\n                              if (subOrd == NO_MORE_ORDS) {\n                                return NO_MORE_ORDS;\n                              }\n                              return currentSub.map.get(subOrd);\n                            }\n\n                            @Override\n                            public long cost() {\n                              return finalCost;\n                            }\n\n                            @Override\n                            public BytesRef lookupOrd(long ord) throws IOException {\n                              int segmentNumber = map.getFirstSegmentNumber(ord);\n                              long segmentOrd = map.getFirstSegmentOrd(ord);\n                              return toMerge.get(segmentNumber).lookupOrd(segmentOrd);\n                            }\n\n                            @Override\n                            public long getValueCount() {\n                              return map.getValueCount();\n                            }\n                          };\n                        }\n                      });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d17b85cbd031b3de6ef1ad212cc89055e04761f","date":1578297702,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState).mjava","sourceNew":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    List<SortedSetDocValues> toMerge = new ArrayList<>();\n    for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n      SortedSetDocValues values = null;\n      DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n      if (docValuesProducer != null) {\n        FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n        if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n          values = docValuesProducer.getSortedSet(fieldInfo);\n        }\n      }\n      if (values == null) {\n        values = DocValues.emptySortedSet();\n      }\n      toMerge.add(values);\n    }\n\n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[toMerge.size()];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      SortedSetDocValues dv = toMerge.get(sub);\n      Bits liveDocs = mergeState.liveDocs[sub];\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        int docID;\n        while ((docID = dv.nextDoc()) != NO_MORE_DOCS) {\n          if (liveDocs.get(docID)) {\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(null, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(mergeFieldInfo,\n                      new EmptyDocValuesProducer() {\n                        @Override\n                        public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n                          if (fieldInfo != mergeFieldInfo) {\n                            throw new IllegalArgumentException(\"wrong FieldInfo\");\n                          }\n\n                          // We must make new iterators + DocIDMerger for each iterator:\n                          List<SortedSetDocValuesSub> subs = new ArrayList<>();\n\n                          long cost = 0;\n                          \n                          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                            SortedSetDocValues values = null;\n                            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                            if (docValuesProducer != null) {\n                              FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                              if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n                                values = docValuesProducer.getSortedSet(readerFieldInfo);\n                              }\n                            }\n                            if (values == null) {\n                              values = DocValues.emptySortedSet();\n                            }\n                            cost += values.cost();\n                            subs.add(new SortedSetDocValuesSub(mergeState.docMaps[i], values, map.getGlobalOrds(i)));\n                          }\n            \n                          final DocIDMerger<SortedSetDocValuesSub> docIDMerger = DocIDMerger.of(subs, mergeState.needsIndexSort);\n                          \n                          final long finalCost = cost;\n\n                          return new SortedSetDocValues() {\n                            private int docID = -1;\n                            private SortedSetDocValuesSub currentSub;\n\n                            @Override\n                            public int docID() {\n                              return docID;\n                            }\n\n                            @Override\n                            public int nextDoc() throws IOException {\n                              currentSub = docIDMerger.next();\n                              if (currentSub == null) {\n                                docID = NO_MORE_DOCS;\n                              } else {\n                                docID = currentSub.mappedDocID;\n                              }\n\n                              return docID;\n                            }\n\n                            @Override\n                            public int advance(int target) throws IOException {\n                              throw new UnsupportedOperationException();\n                            }\n\n                            @Override\n                            public boolean advanceExact(int target) throws IOException {\n                              throw new UnsupportedOperationException();\n                            }\n\n                            @Override\n                            public long nextOrd() throws IOException {\n                              long subOrd = currentSub.values.nextOrd();\n                              if (subOrd == NO_MORE_ORDS) {\n                                return NO_MORE_ORDS;\n                              }\n                              return currentSub.map.get(subOrd);\n                            }\n\n                            @Override\n                            public long cost() {\n                              return finalCost;\n                            }\n\n                            @Override\n                            public BytesRef lookupOrd(long ord) throws IOException {\n                              int segmentNumber = map.getFirstSegmentNumber(ord);\n                              long segmentOrd = map.getFirstSegmentOrd(ord);\n                              return toMerge.get(segmentNumber).lookupOrd(segmentOrd);\n                            }\n\n                            @Override\n                            public long getValueCount() {\n                              return map.getValueCount();\n                            }\n\n                            @Override\n                            public TermsEnum termsEnum() throws IOException {\n                              TermsEnum[] subs = new TermsEnum[toMerge.size()];\n                              for (int sub = 0; sub < subs.length; ++sub) {\n                                subs[sub] = toMerge.get(sub).termsEnum();\n                              }\n                              return new MergedTermsEnum(map, subs);\n                            }\n                          };\n                        }\n                      });\n  }\n\n","sourceOld":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    List<SortedSetDocValues> toMerge = new ArrayList<>();\n    for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n      SortedSetDocValues values = null;\n      DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n      if (docValuesProducer != null) {\n        FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n        if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n          values = docValuesProducer.getSortedSet(fieldInfo);\n        }\n      }\n      if (values == null) {\n        values = DocValues.emptySortedSet();\n      }\n      toMerge.add(values);\n    }\n\n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[toMerge.size()];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      SortedSetDocValues dv = toMerge.get(sub);\n      Bits liveDocs = mergeState.liveDocs[sub];\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        int docID;\n        while ((docID = dv.nextDoc()) != NO_MORE_DOCS) {\n          if (liveDocs.get(docID)) {\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(null, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(mergeFieldInfo,\n                      new EmptyDocValuesProducer() {\n                        @Override\n                        public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n                          if (fieldInfo != mergeFieldInfo) {\n                            throw new IllegalArgumentException(\"wrong FieldInfo\");\n                          }\n\n                          // We must make new iterators + DocIDMerger for each iterator:\n                          List<SortedSetDocValuesSub> subs = new ArrayList<>();\n\n                          long cost = 0;\n                          \n                          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                            SortedSetDocValues values = null;\n                            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                            if (docValuesProducer != null) {\n                              FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                              if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n                                values = docValuesProducer.getSortedSet(readerFieldInfo);\n                              }\n                            }\n                            if (values == null) {\n                              values = DocValues.emptySortedSet();\n                            }\n                            cost += values.cost();\n                            subs.add(new SortedSetDocValuesSub(mergeState.docMaps[i], values, map.getGlobalOrds(i)));\n                          }\n            \n                          final DocIDMerger<SortedSetDocValuesSub> docIDMerger = DocIDMerger.of(subs, mergeState.needsIndexSort);\n                          \n                          final long finalCost = cost;\n\n                          return new SortedSetDocValues() {\n                            private int docID = -1;\n                            private SortedSetDocValuesSub currentSub;\n\n                            @Override\n                            public int docID() {\n                              return docID;\n                            }\n\n                            @Override\n                            public int nextDoc() throws IOException {\n                              currentSub = docIDMerger.next();\n                              if (currentSub == null) {\n                                docID = NO_MORE_DOCS;\n                              } else {\n                                docID = currentSub.mappedDocID;\n                              }\n\n                              return docID;\n                            }\n\n                            @Override\n                            public int advance(int target) throws IOException {\n                              throw new UnsupportedOperationException();\n                            }\n\n                            @Override\n                            public boolean advanceExact(int target) throws IOException {\n                              throw new UnsupportedOperationException();\n                            }\n\n                            @Override\n                            public long nextOrd() throws IOException {\n                              long subOrd = currentSub.values.nextOrd();\n                              if (subOrd == NO_MORE_ORDS) {\n                                return NO_MORE_ORDS;\n                              }\n                              return currentSub.map.get(subOrd);\n                            }\n\n                            @Override\n                            public long cost() {\n                              return finalCost;\n                            }\n\n                            @Override\n                            public BytesRef lookupOrd(long ord) throws IOException {\n                              int segmentNumber = map.getFirstSegmentNumber(ord);\n                              long segmentOrd = map.getFirstSegmentOrd(ord);\n                              return toMerge.get(segmentNumber).lookupOrd(segmentOrd);\n                            }\n\n                            @Override\n                            public long getValueCount() {\n                              return map.getValueCount();\n                            }\n                          };\n                        }\n                      });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca62564055241632cd20d65b5ecb8c8e93bd60c4","date":1578383112,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/DocValuesConsumer#mergeSortedSetField(FieldInfo,MergeState).mjava","sourceNew":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    List<SortedSetDocValues> toMerge = new ArrayList<>();\n    for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n      SortedSetDocValues values = null;\n      DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n      if (docValuesProducer != null) {\n        FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n        if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n          values = docValuesProducer.getSortedSet(fieldInfo);\n        }\n      }\n      if (values == null) {\n        values = DocValues.emptySortedSet();\n      }\n      toMerge.add(values);\n    }\n\n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[toMerge.size()];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      SortedSetDocValues dv = toMerge.get(sub);\n      Bits liveDocs = mergeState.liveDocs[sub];\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        int docID;\n        while ((docID = dv.nextDoc()) != NO_MORE_DOCS) {\n          if (liveDocs.get(docID)) {\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(null, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(mergeFieldInfo,\n                      new EmptyDocValuesProducer() {\n                        @Override\n                        public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n                          if (fieldInfo != mergeFieldInfo) {\n                            throw new IllegalArgumentException(\"wrong FieldInfo\");\n                          }\n\n                          // We must make new iterators + DocIDMerger for each iterator:\n                          List<SortedSetDocValuesSub> subs = new ArrayList<>();\n\n                          long cost = 0;\n                          \n                          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                            SortedSetDocValues values = null;\n                            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                            if (docValuesProducer != null) {\n                              FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                              if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n                                values = docValuesProducer.getSortedSet(readerFieldInfo);\n                              }\n                            }\n                            if (values == null) {\n                              values = DocValues.emptySortedSet();\n                            }\n                            cost += values.cost();\n                            subs.add(new SortedSetDocValuesSub(mergeState.docMaps[i], values, map.getGlobalOrds(i)));\n                          }\n            \n                          final DocIDMerger<SortedSetDocValuesSub> docIDMerger = DocIDMerger.of(subs, mergeState.needsIndexSort);\n                          \n                          final long finalCost = cost;\n\n                          return new SortedSetDocValues() {\n                            private int docID = -1;\n                            private SortedSetDocValuesSub currentSub;\n\n                            @Override\n                            public int docID() {\n                              return docID;\n                            }\n\n                            @Override\n                            public int nextDoc() throws IOException {\n                              currentSub = docIDMerger.next();\n                              if (currentSub == null) {\n                                docID = NO_MORE_DOCS;\n                              } else {\n                                docID = currentSub.mappedDocID;\n                              }\n\n                              return docID;\n                            }\n\n                            @Override\n                            public int advance(int target) throws IOException {\n                              throw new UnsupportedOperationException();\n                            }\n\n                            @Override\n                            public boolean advanceExact(int target) throws IOException {\n                              throw new UnsupportedOperationException();\n                            }\n\n                            @Override\n                            public long nextOrd() throws IOException {\n                              long subOrd = currentSub.values.nextOrd();\n                              if (subOrd == NO_MORE_ORDS) {\n                                return NO_MORE_ORDS;\n                              }\n                              return currentSub.map.get(subOrd);\n                            }\n\n                            @Override\n                            public long cost() {\n                              return finalCost;\n                            }\n\n                            @Override\n                            public BytesRef lookupOrd(long ord) throws IOException {\n                              int segmentNumber = map.getFirstSegmentNumber(ord);\n                              long segmentOrd = map.getFirstSegmentOrd(ord);\n                              return toMerge.get(segmentNumber).lookupOrd(segmentOrd);\n                            }\n\n                            @Override\n                            public long getValueCount() {\n                              return map.getValueCount();\n                            }\n\n                            @Override\n                            public TermsEnum termsEnum() throws IOException {\n                              TermsEnum[] subs = new TermsEnum[toMerge.size()];\n                              for (int sub = 0; sub < subs.length; ++sub) {\n                                subs[sub] = toMerge.get(sub).termsEnum();\n                              }\n                              return new MergedTermsEnum(map, subs);\n                            }\n                          };\n                        }\n                      });\n  }\n\n","sourceOld":"  /**\n   * Merges the sortedset docvalues from <code>toMerge</code>.\n   * <p>\n   * The default implementation calls {@link #addSortedSetField}, passing\n   * an Iterable that merges ordinals and values and filters deleted documents .\n   */\n  public void mergeSortedSetField(FieldInfo mergeFieldInfo, final MergeState mergeState) throws IOException {\n\n    List<SortedSetDocValues> toMerge = new ArrayList<>();\n    for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n      SortedSetDocValues values = null;\n      DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n      if (docValuesProducer != null) {\n        FieldInfo fieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n        if (fieldInfo != null && fieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n          values = docValuesProducer.getSortedSet(fieldInfo);\n        }\n      }\n      if (values == null) {\n        values = DocValues.emptySortedSet();\n      }\n      toMerge.add(values);\n    }\n\n    // step 1: iterate thru each sub and mark terms still in use\n    TermsEnum liveTerms[] = new TermsEnum[toMerge.size()];\n    long[] weights = new long[liveTerms.length];\n    for (int sub = 0; sub < liveTerms.length; sub++) {\n      SortedSetDocValues dv = toMerge.get(sub);\n      Bits liveDocs = mergeState.liveDocs[sub];\n      if (liveDocs == null) {\n        liveTerms[sub] = dv.termsEnum();\n        weights[sub] = dv.getValueCount();\n      } else {\n        LongBitSet bitset = new LongBitSet(dv.getValueCount());\n        int docID;\n        while ((docID = dv.nextDoc()) != NO_MORE_DOCS) {\n          if (liveDocs.get(docID)) {\n            long ord;\n            while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n              bitset.set(ord);\n            }\n          }\n        }\n        liveTerms[sub] = new BitsFilteredTermsEnum(dv.termsEnum(), bitset);\n        weights[sub] = bitset.cardinality();\n      }\n    }\n    \n    // step 2: create ordinal map (this conceptually does the \"merging\")\n    final OrdinalMap map = OrdinalMap.build(null, liveTerms, weights, PackedInts.COMPACT);\n    \n    // step 3: add field\n    addSortedSetField(mergeFieldInfo,\n                      new EmptyDocValuesProducer() {\n                        @Override\n                        public SortedSetDocValues getSortedSet(FieldInfo fieldInfo) throws IOException {\n                          if (fieldInfo != mergeFieldInfo) {\n                            throw new IllegalArgumentException(\"wrong FieldInfo\");\n                          }\n\n                          // We must make new iterators + DocIDMerger for each iterator:\n                          List<SortedSetDocValuesSub> subs = new ArrayList<>();\n\n                          long cost = 0;\n                          \n                          for (int i=0;i<mergeState.docValuesProducers.length;i++) {\n                            SortedSetDocValues values = null;\n                            DocValuesProducer docValuesProducer = mergeState.docValuesProducers[i];\n                            if (docValuesProducer != null) {\n                              FieldInfo readerFieldInfo = mergeState.fieldInfos[i].fieldInfo(mergeFieldInfo.name);\n                              if (readerFieldInfo != null && readerFieldInfo.getDocValuesType() == DocValuesType.SORTED_SET) {\n                                values = docValuesProducer.getSortedSet(readerFieldInfo);\n                              }\n                            }\n                            if (values == null) {\n                              values = DocValues.emptySortedSet();\n                            }\n                            cost += values.cost();\n                            subs.add(new SortedSetDocValuesSub(mergeState.docMaps[i], values, map.getGlobalOrds(i)));\n                          }\n            \n                          final DocIDMerger<SortedSetDocValuesSub> docIDMerger = DocIDMerger.of(subs, mergeState.needsIndexSort);\n                          \n                          final long finalCost = cost;\n\n                          return new SortedSetDocValues() {\n                            private int docID = -1;\n                            private SortedSetDocValuesSub currentSub;\n\n                            @Override\n                            public int docID() {\n                              return docID;\n                            }\n\n                            @Override\n                            public int nextDoc() throws IOException {\n                              currentSub = docIDMerger.next();\n                              if (currentSub == null) {\n                                docID = NO_MORE_DOCS;\n                              } else {\n                                docID = currentSub.mappedDocID;\n                              }\n\n                              return docID;\n                            }\n\n                            @Override\n                            public int advance(int target) throws IOException {\n                              throw new UnsupportedOperationException();\n                            }\n\n                            @Override\n                            public boolean advanceExact(int target) throws IOException {\n                              throw new UnsupportedOperationException();\n                            }\n\n                            @Override\n                            public long nextOrd() throws IOException {\n                              long subOrd = currentSub.values.nextOrd();\n                              if (subOrd == NO_MORE_ORDS) {\n                                return NO_MORE_ORDS;\n                              }\n                              return currentSub.map.get(subOrd);\n                            }\n\n                            @Override\n                            public long cost() {\n                              return finalCost;\n                            }\n\n                            @Override\n                            public BytesRef lookupOrd(long ord) throws IOException {\n                              int segmentNumber = map.getFirstSegmentNumber(ord);\n                              long segmentOrd = map.getFirstSegmentOrd(ord);\n                              return toMerge.get(segmentNumber).lookupOrd(segmentOrd);\n                            }\n\n                            @Override\n                            public long getValueCount() {\n                              return map.getValueCount();\n                            }\n                          };\n                        }\n                      });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f7558b5077dd4abd457be151475f13b541f4f13e":["5d217880fb207e1a26143863d06cf461c7cabeec"],"23e44daeaa8b89694d10df5999956c8e14a7dd09":["f7558b5077dd4abd457be151475f13b541f4f13e"],"d85b6e22926e7564c040d2a864f4887f6c59fa92":["653128722fb3b4713ac331c621491a93f34a4a22"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":["d211216c83f01894810543d1c107160a9ae3650b","9d17b85cbd031b3de6ef1ad212cc89055e04761f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","23e44daeaa8b89694d10df5999956c8e14a7dd09"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["727bb765ff2542275f6d31f67be18d7104bae148","d85b6e22926e7564c040d2a864f4887f6c59fa92"],"9d17b85cbd031b3de6ef1ad212cc89055e04761f":["d211216c83f01894810543d1c107160a9ae3650b"],"727bb765ff2542275f6d31f67be18d7104bae148":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","653128722fb3b4713ac331c621491a93f34a4a22"],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["23e44daeaa8b89694d10df5999956c8e14a7dd09"],"d211216c83f01894810543d1c107160a9ae3650b":["d85b6e22926e7564c040d2a864f4887f6c59fa92"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"5d217880fb207e1a26143863d06cf461c7cabeec":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"653128722fb3b4713ac331c621491a93f34a4a22":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["23e44daeaa8b89694d10df5999956c8e14a7dd09","11134e449dabe11d6d0ff6a564d84b82cbe93722"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9d17b85cbd031b3de6ef1ad212cc89055e04761f"]},"commit2Childs":{"f7558b5077dd4abd457be151475f13b541f4f13e":["23e44daeaa8b89694d10df5999956c8e14a7dd09"],"23e44daeaa8b89694d10df5999956c8e14a7dd09":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","11134e449dabe11d6d0ff6a564d84b82cbe93722","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"d85b6e22926e7564c040d2a864f4887f6c59fa92":["f03e4bed5023ec3ef93a771b8888cae991cf448d","d211216c83f01894810543d1c107160a9ae3650b"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"9d17b85cbd031b3de6ef1ad212cc89055e04761f":["ca62564055241632cd20d65b5ecb8c8e93bd60c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"727bb765ff2542275f6d31f67be18d7104bae148":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"d211216c83f01894810543d1c107160a9ae3650b":["ca62564055241632cd20d65b5ecb8c8e93bd60c4","9d17b85cbd031b3de6ef1ad212cc89055e04761f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["727bb765ff2542275f6d31f67be18d7104bae148"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["5d217880fb207e1a26143863d06cf461c7cabeec"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"5d217880fb207e1a26143863d06cf461c7cabeec":["f7558b5077dd4abd457be151475f13b541f4f13e"],"653128722fb3b4713ac331c621491a93f34a4a22":["d85b6e22926e7564c040d2a864f4887f6c59fa92","727bb765ff2542275f6d31f67be18d7104bae148"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","653128722fb3b4713ac331c621491a93f34a4a22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ca62564055241632cd20d65b5ecb8c8e93bd60c4","f03e4bed5023ec3ef93a771b8888cae991cf448d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}