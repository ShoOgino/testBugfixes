{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testEscaped().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testEscaped().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testEscaped().mjava","sourceNew":"  public void testEscaped() throws Exception {\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    \n    /*assertQueryEquals(\"\\\\[brackets\", a, \"\\\\[brackets\");\n    assertQueryEquals(\"\\\\[brackets\", null, \"brackets\");\n    assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\\\\\");\n    assertQueryEquals(\"\\\\+blah\", a, \"\\\\+blah\");\n    assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n\n    assertQueryEquals(\"\\\\-blah\", a, \"\\\\-blah\");\n    assertQueryEquals(\"\\\\!blah\", a, \"\\\\!blah\");\n    assertQueryEquals(\"\\\\{blah\", a, \"\\\\{blah\");\n    assertQueryEquals(\"\\\\}blah\", a, \"\\\\}blah\");\n    assertQueryEquals(\"\\\\:blah\", a, \"\\\\:blah\");\n    assertQueryEquals(\"\\\\^blah\", a, \"\\\\^blah\");\n    assertQueryEquals(\"\\\\[blah\", a, \"\\\\[blah\");\n    assertQueryEquals(\"\\\\]blah\", a, \"\\\\]blah\");\n    assertQueryEquals(\"\\\\\\\"blah\", a, \"\\\\\\\"blah\");\n    assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n    assertQueryEquals(\"\\\\)blah\", a, \"\\\\)blah\");\n    assertQueryEquals(\"\\\\~blah\", a, \"\\\\~blah\");\n    assertQueryEquals(\"\\\\*blah\", a, \"\\\\*blah\");\n    assertQueryEquals(\"\\\\?blah\", a, \"\\\\?blah\");\n    //assertQueryEquals(\"foo \\\\&\\\\& bar\", a, \"foo \\\\&\\\\& bar\");\n    //assertQueryEquals(\"foo \\\\|| bar\", a, \"foo \\\\|| bar\");\n    //assertQueryEquals(\"foo \\\\AND bar\", a, \"foo \\\\AND bar\");*/\n\n    assertQueryEquals(\"\\\\a\", a, \"a\");\n    \n    assertQueryEquals(\"a\\\\-b:c\", a, \"a-b:c\");\n    assertQueryEquals(\"a\\\\+b:c\", a, \"a+b:c\");\n    assertQueryEquals(\"a\\\\:b:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a\\\\\\\\b:c\", a, \"a\\\\b:c\");\n\n    assertQueryEquals(\"a:b\\\\-c\", a, \"a:b-c\");\n    assertQueryEquals(\"a:b\\\\+c\", a, \"a:b+c\");\n    assertQueryEquals(\"a:b\\\\:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a:b\\\\\\\\c\", a, \"a:b\\\\c\");\n\n    assertQueryEquals(\"a:b\\\\-c*\", a, \"a:b-c*\");\n    assertQueryEquals(\"a:b\\\\+c*\", a, \"a:b+c*\");\n    assertQueryEquals(\"a:b\\\\:c*\", a, \"a:b:c*\");\n\n    assertQueryEquals(\"a:b\\\\\\\\c*\", a, \"a:b\\\\c*\");\n\n    assertQueryEquals(\"a:b\\\\-?c\", a, \"a:b\\\\-?c\");\n    assertQueryEquals(\"a:b\\\\+?c\", a, \"a:b\\\\+?c\");\n    assertQueryEquals(\"a:b\\\\:?c\", a, \"a:b\\\\:?c\");\n\n    assertQueryEquals(\"a:b\\\\\\\\?c\", a, \"a:b\\\\\\\\?c\");\n\n    assertQueryEquals(\"a:b\\\\-c~\", a, \"a:b-c~2.0\");\n    assertQueryEquals(\"a:b\\\\+c~\", a, \"a:b+c~2.0\");\n    assertQueryEquals(\"a:b\\\\:c~\", a, \"a:b:c~2.0\");\n    assertQueryEquals(\"a:b\\\\\\\\c~\", a, \"a:b\\\\c~2.0\");\n\n    assertQueryEquals(\"[ a\\\\- TO a\\\\+ ]\", null, \"[a- TO a+]\");\n    assertQueryEquals(\"[ a\\\\: TO a\\\\~ ]\", null, \"[a: TO a~]\");\n    assertQueryEquals(\"[ a\\\\\\\\ TO a\\\\* ]\", null, \"[a\\\\ TO a*]\");\n\n    assertQueryEquals(\"[\\\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo0.txt\\\" TO \\\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo9.txt\\\"]\", a, \n                      \"[c:\\\\temp\\\\~foo0.txt TO c:\\\\temp\\\\~foo9.txt]\");\n    \n    assertQueryEquals(\"a\\\\\\\\\\\\+b\", a, \"a\\\\+b\");\n    \n    assertQueryEquals(\"a \\\\\\\"b c\\\\\\\" d\", a, \"a \\\"b c\\\" d\");\n    assertQueryEquals(\"\\\"a \\\\\\\"b c\\\\\\\" d\\\"\", a, \"\\\"a \\\"b c\\\" d\\\"\");\n    assertQueryEquals(\"\\\"a \\\\+b c d\\\"\", a, \"\\\"a +b c d\\\"\");\n    \n    assertQueryEquals(\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo.txt\", a, \"c:\\\\temp\\\\~foo.txt\");\n    \n    assertParseException(\"XY\\\\\"); // there must be a character after the escape char\n    \n    // test unicode escaping\n    assertQueryEquals(\"a\\\\u0062c\", a, \"abc\");\n    assertQueryEquals(\"XY\\\\u005a\", a, \"XYZ\");\n    assertQueryEquals(\"XY\\\\u005A\", a, \"XYZ\");\n    assertQueryEquals(\"\\\"a \\\\\\\\\\\\u0028\\\\u0062\\\\\\\" c\\\"\", a, \"\\\"a \\\\(b\\\" c\\\"\");\n    \n    assertParseException(\"XY\\\\u005G\");  // test non-hex character in escaped unicode sequence\n    assertParseException(\"XY\\\\u005\");   // test incomplete escaped unicode sequence\n    \n    // Tests bug LUCENE-800\n    assertQueryEquals(\"(item:\\\\\\\\ item:ABCD\\\\\\\\)\", a, \"item:\\\\ item:ABCD\\\\\");\n    assertParseException(\"(item:\\\\\\\\ item:ABCD\\\\\\\\))\"); // unmatched closing paranthesis \n    assertQueryEquals(\"\\\\*\", a, \"*\");\n    assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\");  // escaped backslash\n    \n    assertParseException(\"\\\\\"); // a backslash must always be escaped\n    \n    // LUCENE-1189\n    assertQueryEquals(\"(\\\"a\\\\\\\\\\\") or (\\\"b\\\")\", a ,\"a\\\\ or b\");\n  }\n\n","sourceOld":"  public void testEscaped() throws Exception {\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    \n    /*assertQueryEquals(\"\\\\[brackets\", a, \"\\\\[brackets\");\n    assertQueryEquals(\"\\\\[brackets\", null, \"brackets\");\n    assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\\\\\");\n    assertQueryEquals(\"\\\\+blah\", a, \"\\\\+blah\");\n    assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n\n    assertQueryEquals(\"\\\\-blah\", a, \"\\\\-blah\");\n    assertQueryEquals(\"\\\\!blah\", a, \"\\\\!blah\");\n    assertQueryEquals(\"\\\\{blah\", a, \"\\\\{blah\");\n    assertQueryEquals(\"\\\\}blah\", a, \"\\\\}blah\");\n    assertQueryEquals(\"\\\\:blah\", a, \"\\\\:blah\");\n    assertQueryEquals(\"\\\\^blah\", a, \"\\\\^blah\");\n    assertQueryEquals(\"\\\\[blah\", a, \"\\\\[blah\");\n    assertQueryEquals(\"\\\\]blah\", a, \"\\\\]blah\");\n    assertQueryEquals(\"\\\\\\\"blah\", a, \"\\\\\\\"blah\");\n    assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n    assertQueryEquals(\"\\\\)blah\", a, \"\\\\)blah\");\n    assertQueryEquals(\"\\\\~blah\", a, \"\\\\~blah\");\n    assertQueryEquals(\"\\\\*blah\", a, \"\\\\*blah\");\n    assertQueryEquals(\"\\\\?blah\", a, \"\\\\?blah\");\n    //assertQueryEquals(\"foo \\\\&\\\\& bar\", a, \"foo \\\\&\\\\& bar\");\n    //assertQueryEquals(\"foo \\\\|| bar\", a, \"foo \\\\|| bar\");\n    //assertQueryEquals(\"foo \\\\AND bar\", a, \"foo \\\\AND bar\");*/\n\n    assertQueryEquals(\"\\\\a\", a, \"a\");\n    \n    assertQueryEquals(\"a\\\\-b:c\", a, \"a-b:c\");\n    assertQueryEquals(\"a\\\\+b:c\", a, \"a+b:c\");\n    assertQueryEquals(\"a\\\\:b:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a\\\\\\\\b:c\", a, \"a\\\\b:c\");\n\n    assertQueryEquals(\"a:b\\\\-c\", a, \"a:b-c\");\n    assertQueryEquals(\"a:b\\\\+c\", a, \"a:b+c\");\n    assertQueryEquals(\"a:b\\\\:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a:b\\\\\\\\c\", a, \"a:b\\\\c\");\n\n    assertQueryEquals(\"a:b\\\\-c*\", a, \"a:b-c*\");\n    assertQueryEquals(\"a:b\\\\+c*\", a, \"a:b+c*\");\n    assertQueryEquals(\"a:b\\\\:c*\", a, \"a:b:c*\");\n\n    assertQueryEquals(\"a:b\\\\\\\\c*\", a, \"a:b\\\\c*\");\n\n    assertQueryEquals(\"a:b\\\\-?c\", a, \"a:b\\\\-?c\");\n    assertQueryEquals(\"a:b\\\\+?c\", a, \"a:b\\\\+?c\");\n    assertQueryEquals(\"a:b\\\\:?c\", a, \"a:b\\\\:?c\");\n\n    assertQueryEquals(\"a:b\\\\\\\\?c\", a, \"a:b\\\\\\\\?c\");\n\n    assertQueryEquals(\"a:b\\\\-c~\", a, \"a:b-c~2.0\");\n    assertQueryEquals(\"a:b\\\\+c~\", a, \"a:b+c~2.0\");\n    assertQueryEquals(\"a:b\\\\:c~\", a, \"a:b:c~2.0\");\n    assertQueryEquals(\"a:b\\\\\\\\c~\", a, \"a:b\\\\c~2.0\");\n\n    assertQueryEquals(\"[ a\\\\- TO a\\\\+ ]\", null, \"[a- TO a+]\");\n    assertQueryEquals(\"[ a\\\\: TO a\\\\~ ]\", null, \"[a: TO a~]\");\n    assertQueryEquals(\"[ a\\\\\\\\ TO a\\\\* ]\", null, \"[a\\\\ TO a*]\");\n\n    assertQueryEquals(\"[\\\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo0.txt\\\" TO \\\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo9.txt\\\"]\", a, \n                      \"[c:\\\\temp\\\\~foo0.txt TO c:\\\\temp\\\\~foo9.txt]\");\n    \n    assertQueryEquals(\"a\\\\\\\\\\\\+b\", a, \"a\\\\+b\");\n    \n    assertQueryEquals(\"a \\\\\\\"b c\\\\\\\" d\", a, \"a \\\"b c\\\" d\");\n    assertQueryEquals(\"\\\"a \\\\\\\"b c\\\\\\\" d\\\"\", a, \"\\\"a \\\"b c\\\" d\\\"\");\n    assertQueryEquals(\"\\\"a \\\\+b c d\\\"\", a, \"\\\"a +b c d\\\"\");\n    \n    assertQueryEquals(\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo.txt\", a, \"c:\\\\temp\\\\~foo.txt\");\n    \n    assertParseException(\"XY\\\\\"); // there must be a character after the escape char\n    \n    // test unicode escaping\n    assertQueryEquals(\"a\\\\u0062c\", a, \"abc\");\n    assertQueryEquals(\"XY\\\\u005a\", a, \"XYZ\");\n    assertQueryEquals(\"XY\\\\u005A\", a, \"XYZ\");\n    assertQueryEquals(\"\\\"a \\\\\\\\\\\\u0028\\\\u0062\\\\\\\" c\\\"\", a, \"\\\"a \\\\(b\\\" c\\\"\");\n    \n    assertParseException(\"XY\\\\u005G\");  // test non-hex character in escaped unicode sequence\n    assertParseException(\"XY\\\\u005\");   // test incomplete escaped unicode sequence\n    \n    // Tests bug LUCENE-800\n    assertQueryEquals(\"(item:\\\\\\\\ item:ABCD\\\\\\\\)\", a, \"item:\\\\ item:ABCD\\\\\");\n    assertParseException(\"(item:\\\\\\\\ item:ABCD\\\\\\\\))\"); // unmatched closing paranthesis \n    assertQueryEquals(\"\\\\*\", a, \"*\");\n    assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\");  // escaped backslash\n    \n    assertParseException(\"\\\\\"); // a backslash must always be escaped\n    \n    // LUCENE-1189\n    assertQueryEquals(\"(\\\"a\\\\\\\\\\\") or (\\\"b\\\")\", a ,\"a\\\\ or b\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d374631bb6f5665bd5907a6186a9bb283a315f7d","date":1336345692,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testEscaped().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testEscaped().mjava","sourceNew":"  public void testEscaped() throws Exception {\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    \n    /*assertQueryEquals(\"\\\\[brackets\", a, \"\\\\[brackets\");\n    assertQueryEquals(\"\\\\[brackets\", null, \"brackets\");\n    assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\\\\\");\n    assertQueryEquals(\"\\\\+blah\", a, \"\\\\+blah\");\n    assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n\n    assertQueryEquals(\"\\\\-blah\", a, \"\\\\-blah\");\n    assertQueryEquals(\"\\\\!blah\", a, \"\\\\!blah\");\n    assertQueryEquals(\"\\\\{blah\", a, \"\\\\{blah\");\n    assertQueryEquals(\"\\\\}blah\", a, \"\\\\}blah\");\n    assertQueryEquals(\"\\\\:blah\", a, \"\\\\:blah\");\n    assertQueryEquals(\"\\\\^blah\", a, \"\\\\^blah\");\n    assertQueryEquals(\"\\\\[blah\", a, \"\\\\[blah\");\n    assertQueryEquals(\"\\\\]blah\", a, \"\\\\]blah\");\n    assertQueryEquals(\"\\\\\\\"blah\", a, \"\\\\\\\"blah\");\n    assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n    assertQueryEquals(\"\\\\)blah\", a, \"\\\\)blah\");\n    assertQueryEquals(\"\\\\~blah\", a, \"\\\\~blah\");\n    assertQueryEquals(\"\\\\*blah\", a, \"\\\\*blah\");\n    assertQueryEquals(\"\\\\?blah\", a, \"\\\\?blah\");\n    //assertQueryEquals(\"foo \\\\&\\\\& bar\", a, \"foo \\\\&\\\\& bar\");\n    //assertQueryEquals(\"foo \\\\|| bar\", a, \"foo \\\\|| bar\");\n    //assertQueryEquals(\"foo \\\\AND bar\", a, \"foo \\\\AND bar\");*/\n\n    assertQueryEquals(\"\\\\a\", a, \"a\");\n    \n    assertQueryEquals(\"a\\\\-b:c\", a, \"a-b:c\");\n    assertQueryEquals(\"a\\\\+b:c\", a, \"a+b:c\");\n    assertQueryEquals(\"a\\\\:b:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a\\\\\\\\b:c\", a, \"a\\\\b:c\");\n\n    assertQueryEquals(\"a:b\\\\-c\", a, \"a:b-c\");\n    assertQueryEquals(\"a:b\\\\+c\", a, \"a:b+c\");\n    assertQueryEquals(\"a:b\\\\:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a:b\\\\\\\\c\", a, \"a:b\\\\c\");\n\n    assertQueryEquals(\"a:b\\\\-c*\", a, \"a:b-c*\");\n    assertQueryEquals(\"a:b\\\\+c*\", a, \"a:b+c*\");\n    assertQueryEquals(\"a:b\\\\:c*\", a, \"a:b:c*\");\n\n    assertQueryEquals(\"a:b\\\\\\\\c*\", a, \"a:b\\\\c*\");\n\n    assertQueryEquals(\"a:b\\\\-?c\", a, \"a:b\\\\-?c\");\n    assertQueryEquals(\"a:b\\\\+?c\", a, \"a:b\\\\+?c\");\n    assertQueryEquals(\"a:b\\\\:?c\", a, \"a:b\\\\:?c\");\n\n    assertQueryEquals(\"a:b\\\\\\\\?c\", a, \"a:b\\\\\\\\?c\");\n\n    assertQueryEquals(\"a:b\\\\-c~\", a, \"a:b-c~2\");\n    assertQueryEquals(\"a:b\\\\+c~\", a, \"a:b+c~2\");\n    assertQueryEquals(\"a:b\\\\:c~\", a, \"a:b:c~2\");\n    assertQueryEquals(\"a:b\\\\\\\\c~\", a, \"a:b\\\\c~2\");\n\n    assertQueryEquals(\"[ a\\\\- TO a\\\\+ ]\", null, \"[a- TO a+]\");\n    assertQueryEquals(\"[ a\\\\: TO a\\\\~ ]\", null, \"[a: TO a~]\");\n    assertQueryEquals(\"[ a\\\\\\\\ TO a\\\\* ]\", null, \"[a\\\\ TO a*]\");\n\n    assertQueryEquals(\"[\\\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo0.txt\\\" TO \\\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo9.txt\\\"]\", a, \n                      \"[c:\\\\temp\\\\~foo0.txt TO c:\\\\temp\\\\~foo9.txt]\");\n    \n    assertQueryEquals(\"a\\\\\\\\\\\\+b\", a, \"a\\\\+b\");\n    \n    assertQueryEquals(\"a \\\\\\\"b c\\\\\\\" d\", a, \"a \\\"b c\\\" d\");\n    assertQueryEquals(\"\\\"a \\\\\\\"b c\\\\\\\" d\\\"\", a, \"\\\"a \\\"b c\\\" d\\\"\");\n    assertQueryEquals(\"\\\"a \\\\+b c d\\\"\", a, \"\\\"a +b c d\\\"\");\n    \n    assertQueryEquals(\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo.txt\", a, \"c:\\\\temp\\\\~foo.txt\");\n    \n    assertParseException(\"XY\\\\\"); // there must be a character after the escape char\n    \n    // test unicode escaping\n    assertQueryEquals(\"a\\\\u0062c\", a, \"abc\");\n    assertQueryEquals(\"XY\\\\u005a\", a, \"XYZ\");\n    assertQueryEquals(\"XY\\\\u005A\", a, \"XYZ\");\n    assertQueryEquals(\"\\\"a \\\\\\\\\\\\u0028\\\\u0062\\\\\\\" c\\\"\", a, \"\\\"a \\\\(b\\\" c\\\"\");\n    \n    assertParseException(\"XY\\\\u005G\");  // test non-hex character in escaped unicode sequence\n    assertParseException(\"XY\\\\u005\");   // test incomplete escaped unicode sequence\n    \n    // Tests bug LUCENE-800\n    assertQueryEquals(\"(item:\\\\\\\\ item:ABCD\\\\\\\\)\", a, \"item:\\\\ item:ABCD\\\\\");\n    assertParseException(\"(item:\\\\\\\\ item:ABCD\\\\\\\\))\"); // unmatched closing paranthesis \n    assertQueryEquals(\"\\\\*\", a, \"*\");\n    assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\");  // escaped backslash\n    \n    assertParseException(\"\\\\\"); // a backslash must always be escaped\n    \n    // LUCENE-1189\n    assertQueryEquals(\"(\\\"a\\\\\\\\\\\") or (\\\"b\\\")\", a ,\"a\\\\ or b\");\n  }\n\n","sourceOld":"  public void testEscaped() throws Exception {\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    \n    /*assertQueryEquals(\"\\\\[brackets\", a, \"\\\\[brackets\");\n    assertQueryEquals(\"\\\\[brackets\", null, \"brackets\");\n    assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\\\\\");\n    assertQueryEquals(\"\\\\+blah\", a, \"\\\\+blah\");\n    assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n\n    assertQueryEquals(\"\\\\-blah\", a, \"\\\\-blah\");\n    assertQueryEquals(\"\\\\!blah\", a, \"\\\\!blah\");\n    assertQueryEquals(\"\\\\{blah\", a, \"\\\\{blah\");\n    assertQueryEquals(\"\\\\}blah\", a, \"\\\\}blah\");\n    assertQueryEquals(\"\\\\:blah\", a, \"\\\\:blah\");\n    assertQueryEquals(\"\\\\^blah\", a, \"\\\\^blah\");\n    assertQueryEquals(\"\\\\[blah\", a, \"\\\\[blah\");\n    assertQueryEquals(\"\\\\]blah\", a, \"\\\\]blah\");\n    assertQueryEquals(\"\\\\\\\"blah\", a, \"\\\\\\\"blah\");\n    assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n    assertQueryEquals(\"\\\\)blah\", a, \"\\\\)blah\");\n    assertQueryEquals(\"\\\\~blah\", a, \"\\\\~blah\");\n    assertQueryEquals(\"\\\\*blah\", a, \"\\\\*blah\");\n    assertQueryEquals(\"\\\\?blah\", a, \"\\\\?blah\");\n    //assertQueryEquals(\"foo \\\\&\\\\& bar\", a, \"foo \\\\&\\\\& bar\");\n    //assertQueryEquals(\"foo \\\\|| bar\", a, \"foo \\\\|| bar\");\n    //assertQueryEquals(\"foo \\\\AND bar\", a, \"foo \\\\AND bar\");*/\n\n    assertQueryEquals(\"\\\\a\", a, \"a\");\n    \n    assertQueryEquals(\"a\\\\-b:c\", a, \"a-b:c\");\n    assertQueryEquals(\"a\\\\+b:c\", a, \"a+b:c\");\n    assertQueryEquals(\"a\\\\:b:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a\\\\\\\\b:c\", a, \"a\\\\b:c\");\n\n    assertQueryEquals(\"a:b\\\\-c\", a, \"a:b-c\");\n    assertQueryEquals(\"a:b\\\\+c\", a, \"a:b+c\");\n    assertQueryEquals(\"a:b\\\\:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a:b\\\\\\\\c\", a, \"a:b\\\\c\");\n\n    assertQueryEquals(\"a:b\\\\-c*\", a, \"a:b-c*\");\n    assertQueryEquals(\"a:b\\\\+c*\", a, \"a:b+c*\");\n    assertQueryEquals(\"a:b\\\\:c*\", a, \"a:b:c*\");\n\n    assertQueryEquals(\"a:b\\\\\\\\c*\", a, \"a:b\\\\c*\");\n\n    assertQueryEquals(\"a:b\\\\-?c\", a, \"a:b\\\\-?c\");\n    assertQueryEquals(\"a:b\\\\+?c\", a, \"a:b\\\\+?c\");\n    assertQueryEquals(\"a:b\\\\:?c\", a, \"a:b\\\\:?c\");\n\n    assertQueryEquals(\"a:b\\\\\\\\?c\", a, \"a:b\\\\\\\\?c\");\n\n    assertQueryEquals(\"a:b\\\\-c~\", a, \"a:b-c~2.0\");\n    assertQueryEquals(\"a:b\\\\+c~\", a, \"a:b+c~2.0\");\n    assertQueryEquals(\"a:b\\\\:c~\", a, \"a:b:c~2.0\");\n    assertQueryEquals(\"a:b\\\\\\\\c~\", a, \"a:b\\\\c~2.0\");\n\n    assertQueryEquals(\"[ a\\\\- TO a\\\\+ ]\", null, \"[a- TO a+]\");\n    assertQueryEquals(\"[ a\\\\: TO a\\\\~ ]\", null, \"[a: TO a~]\");\n    assertQueryEquals(\"[ a\\\\\\\\ TO a\\\\* ]\", null, \"[a\\\\ TO a*]\");\n\n    assertQueryEquals(\"[\\\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo0.txt\\\" TO \\\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo9.txt\\\"]\", a, \n                      \"[c:\\\\temp\\\\~foo0.txt TO c:\\\\temp\\\\~foo9.txt]\");\n    \n    assertQueryEquals(\"a\\\\\\\\\\\\+b\", a, \"a\\\\+b\");\n    \n    assertQueryEquals(\"a \\\\\\\"b c\\\\\\\" d\", a, \"a \\\"b c\\\" d\");\n    assertQueryEquals(\"\\\"a \\\\\\\"b c\\\\\\\" d\\\"\", a, \"\\\"a \\\"b c\\\" d\\\"\");\n    assertQueryEquals(\"\\\"a \\\\+b c d\\\"\", a, \"\\\"a +b c d\\\"\");\n    \n    assertQueryEquals(\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo.txt\", a, \"c:\\\\temp\\\\~foo.txt\");\n    \n    assertParseException(\"XY\\\\\"); // there must be a character after the escape char\n    \n    // test unicode escaping\n    assertQueryEquals(\"a\\\\u0062c\", a, \"abc\");\n    assertQueryEquals(\"XY\\\\u005a\", a, \"XYZ\");\n    assertQueryEquals(\"XY\\\\u005A\", a, \"XYZ\");\n    assertQueryEquals(\"\\\"a \\\\\\\\\\\\u0028\\\\u0062\\\\\\\" c\\\"\", a, \"\\\"a \\\\(b\\\" c\\\"\");\n    \n    assertParseException(\"XY\\\\u005G\");  // test non-hex character in escaped unicode sequence\n    assertParseException(\"XY\\\\u005\");   // test incomplete escaped unicode sequence\n    \n    // Tests bug LUCENE-800\n    assertQueryEquals(\"(item:\\\\\\\\ item:ABCD\\\\\\\\)\", a, \"item:\\\\ item:ABCD\\\\\");\n    assertParseException(\"(item:\\\\\\\\ item:ABCD\\\\\\\\))\"); // unmatched closing paranthesis \n    assertQueryEquals(\"\\\\*\", a, \"*\");\n    assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\");  // escaped backslash\n    \n    assertParseException(\"\\\\\"); // a backslash must always be escaped\n    \n    // LUCENE-1189\n    assertQueryEquals(\"(\\\"a\\\\\\\\\\\") or (\\\"b\\\")\", a ,\"a\\\\ or b\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ee76d213d935c68932ca13b55fa0a8a32bf6af1a","date":1343572717,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testEscaped().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testEscaped().mjava","sourceNew":"  public void testEscaped() throws Exception {\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    \n    /*assertQueryEquals(\"\\\\[brackets\", a, \"\\\\[brackets\");\n    assertQueryEquals(\"\\\\[brackets\", null, \"brackets\");\n    assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\\\\\");\n    assertQueryEquals(\"\\\\+blah\", a, \"\\\\+blah\");\n    assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n\n    assertQueryEquals(\"\\\\-blah\", a, \"\\\\-blah\");\n    assertQueryEquals(\"\\\\!blah\", a, \"\\\\!blah\");\n    assertQueryEquals(\"\\\\{blah\", a, \"\\\\{blah\");\n    assertQueryEquals(\"\\\\}blah\", a, \"\\\\}blah\");\n    assertQueryEquals(\"\\\\:blah\", a, \"\\\\:blah\");\n    assertQueryEquals(\"\\\\^blah\", a, \"\\\\^blah\");\n    assertQueryEquals(\"\\\\[blah\", a, \"\\\\[blah\");\n    assertQueryEquals(\"\\\\]blah\", a, \"\\\\]blah\");\n    assertQueryEquals(\"\\\\\\\"blah\", a, \"\\\\\\\"blah\");\n    assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n    assertQueryEquals(\"\\\\)blah\", a, \"\\\\)blah\");\n    assertQueryEquals(\"\\\\~blah\", a, \"\\\\~blah\");\n    assertQueryEquals(\"\\\\*blah\", a, \"\\\\*blah\");\n    assertQueryEquals(\"\\\\?blah\", a, \"\\\\?blah\");\n    //assertQueryEquals(\"foo \\\\&\\\\& bar\", a, \"foo \\\\&\\\\& bar\");\n    //assertQueryEquals(\"foo \\\\|| bar\", a, \"foo \\\\|| bar\");\n    //assertQueryEquals(\"foo \\\\AND bar\", a, \"foo \\\\AND bar\");*/\n\n    assertQueryEquals(\"\\\\a\", a, \"a\");\n    \n    assertQueryEquals(\"a\\\\-b:c\", a, \"a-b:c\");\n    assertQueryEquals(\"a\\\\+b:c\", a, \"a+b:c\");\n    assertQueryEquals(\"a\\\\:b:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a\\\\\\\\b:c\", a, \"a\\\\b:c\");\n\n    assertQueryEquals(\"a:b\\\\-c\", a, \"a:b-c\");\n    assertQueryEquals(\"a:b\\\\+c\", a, \"a:b+c\");\n    assertQueryEquals(\"a:b\\\\:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a:b\\\\\\\\c\", a, \"a:b\\\\c\");\n\n    assertQueryEquals(\"a:b\\\\-c*\", a, \"a:b-c*\");\n    assertQueryEquals(\"a:b\\\\+c*\", a, \"a:b+c*\");\n    assertQueryEquals(\"a:b\\\\:c*\", a, \"a:b:c*\");\n\n    assertQueryEquals(\"a:b\\\\\\\\c*\", a, \"a:b\\\\c*\");\n\n    assertQueryEquals(\"a:b\\\\-c~\", a, \"a:b-c~2\");\n    assertQueryEquals(\"a:b\\\\+c~\", a, \"a:b+c~2\");\n    assertQueryEquals(\"a:b\\\\:c~\", a, \"a:b:c~2\");\n    assertQueryEquals(\"a:b\\\\\\\\c~\", a, \"a:b\\\\c~2\");\n\n    assertQueryEquals(\"[ a\\\\- TO a\\\\+ ]\", null, \"[a- TO a+]\");\n    assertQueryEquals(\"[ a\\\\: TO a\\\\~ ]\", null, \"[a: TO a~]\");\n    assertQueryEquals(\"[ a\\\\\\\\ TO a\\\\* ]\", null, \"[a\\\\ TO a*]\");\n\n    assertQueryEquals(\"[\\\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo0.txt\\\" TO \\\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo9.txt\\\"]\", a, \n                      \"[c:\\\\temp\\\\~foo0.txt TO c:\\\\temp\\\\~foo9.txt]\");\n    \n    assertQueryEquals(\"a\\\\\\\\\\\\+b\", a, \"a\\\\+b\");\n    \n    assertQueryEquals(\"a \\\\\\\"b c\\\\\\\" d\", a, \"a \\\"b c\\\" d\");\n    assertQueryEquals(\"\\\"a \\\\\\\"b c\\\\\\\" d\\\"\", a, \"\\\"a \\\"b c\\\" d\\\"\");\n    assertQueryEquals(\"\\\"a \\\\+b c d\\\"\", a, \"\\\"a +b c d\\\"\");\n    \n    assertQueryEquals(\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo.txt\", a, \"c:\\\\temp\\\\~foo.txt\");\n    \n    assertParseException(\"XY\\\\\"); // there must be a character after the escape char\n    \n    // test unicode escaping\n    assertQueryEquals(\"a\\\\u0062c\", a, \"abc\");\n    assertQueryEquals(\"XY\\\\u005a\", a, \"XYZ\");\n    assertQueryEquals(\"XY\\\\u005A\", a, \"XYZ\");\n    assertQueryEquals(\"\\\"a \\\\\\\\\\\\u0028\\\\u0062\\\\\\\" c\\\"\", a, \"\\\"a \\\\(b\\\" c\\\"\");\n    \n    assertParseException(\"XY\\\\u005G\");  // test non-hex character in escaped unicode sequence\n    assertParseException(\"XY\\\\u005\");   // test incomplete escaped unicode sequence\n    \n    // Tests bug LUCENE-800\n    assertQueryEquals(\"(item:\\\\\\\\ item:ABCD\\\\\\\\)\", a, \"item:\\\\ item:ABCD\\\\\");\n    assertParseException(\"(item:\\\\\\\\ item:ABCD\\\\\\\\))\"); // unmatched closing paranthesis \n    assertQueryEquals(\"\\\\*\", a, \"*\");\n    assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\");  // escaped backslash\n    \n    assertParseException(\"\\\\\"); // a backslash must always be escaped\n    \n    // LUCENE-1189\n    assertQueryEquals(\"(\\\"a\\\\\\\\\\\") or (\\\"b\\\")\", a ,\"a\\\\ or b\");\n  }\n\n","sourceOld":"  public void testEscaped() throws Exception {\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    \n    /*assertQueryEquals(\"\\\\[brackets\", a, \"\\\\[brackets\");\n    assertQueryEquals(\"\\\\[brackets\", null, \"brackets\");\n    assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\\\\\");\n    assertQueryEquals(\"\\\\+blah\", a, \"\\\\+blah\");\n    assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n\n    assertQueryEquals(\"\\\\-blah\", a, \"\\\\-blah\");\n    assertQueryEquals(\"\\\\!blah\", a, \"\\\\!blah\");\n    assertQueryEquals(\"\\\\{blah\", a, \"\\\\{blah\");\n    assertQueryEquals(\"\\\\}blah\", a, \"\\\\}blah\");\n    assertQueryEquals(\"\\\\:blah\", a, \"\\\\:blah\");\n    assertQueryEquals(\"\\\\^blah\", a, \"\\\\^blah\");\n    assertQueryEquals(\"\\\\[blah\", a, \"\\\\[blah\");\n    assertQueryEquals(\"\\\\]blah\", a, \"\\\\]blah\");\n    assertQueryEquals(\"\\\\\\\"blah\", a, \"\\\\\\\"blah\");\n    assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n    assertQueryEquals(\"\\\\)blah\", a, \"\\\\)blah\");\n    assertQueryEquals(\"\\\\~blah\", a, \"\\\\~blah\");\n    assertQueryEquals(\"\\\\*blah\", a, \"\\\\*blah\");\n    assertQueryEquals(\"\\\\?blah\", a, \"\\\\?blah\");\n    //assertQueryEquals(\"foo \\\\&\\\\& bar\", a, \"foo \\\\&\\\\& bar\");\n    //assertQueryEquals(\"foo \\\\|| bar\", a, \"foo \\\\|| bar\");\n    //assertQueryEquals(\"foo \\\\AND bar\", a, \"foo \\\\AND bar\");*/\n\n    assertQueryEquals(\"\\\\a\", a, \"a\");\n    \n    assertQueryEquals(\"a\\\\-b:c\", a, \"a-b:c\");\n    assertQueryEquals(\"a\\\\+b:c\", a, \"a+b:c\");\n    assertQueryEquals(\"a\\\\:b:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a\\\\\\\\b:c\", a, \"a\\\\b:c\");\n\n    assertQueryEquals(\"a:b\\\\-c\", a, \"a:b-c\");\n    assertQueryEquals(\"a:b\\\\+c\", a, \"a:b+c\");\n    assertQueryEquals(\"a:b\\\\:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a:b\\\\\\\\c\", a, \"a:b\\\\c\");\n\n    assertQueryEquals(\"a:b\\\\-c*\", a, \"a:b-c*\");\n    assertQueryEquals(\"a:b\\\\+c*\", a, \"a:b+c*\");\n    assertQueryEquals(\"a:b\\\\:c*\", a, \"a:b:c*\");\n\n    assertQueryEquals(\"a:b\\\\\\\\c*\", a, \"a:b\\\\c*\");\n\n    assertQueryEquals(\"a:b\\\\-?c\", a, \"a:b\\\\-?c\");\n    assertQueryEquals(\"a:b\\\\+?c\", a, \"a:b\\\\+?c\");\n    assertQueryEquals(\"a:b\\\\:?c\", a, \"a:b\\\\:?c\");\n\n    assertQueryEquals(\"a:b\\\\\\\\?c\", a, \"a:b\\\\\\\\?c\");\n\n    assertQueryEquals(\"a:b\\\\-c~\", a, \"a:b-c~2\");\n    assertQueryEquals(\"a:b\\\\+c~\", a, \"a:b+c~2\");\n    assertQueryEquals(\"a:b\\\\:c~\", a, \"a:b:c~2\");\n    assertQueryEquals(\"a:b\\\\\\\\c~\", a, \"a:b\\\\c~2\");\n\n    assertQueryEquals(\"[ a\\\\- TO a\\\\+ ]\", null, \"[a- TO a+]\");\n    assertQueryEquals(\"[ a\\\\: TO a\\\\~ ]\", null, \"[a: TO a~]\");\n    assertQueryEquals(\"[ a\\\\\\\\ TO a\\\\* ]\", null, \"[a\\\\ TO a*]\");\n\n    assertQueryEquals(\"[\\\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo0.txt\\\" TO \\\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo9.txt\\\"]\", a, \n                      \"[c:\\\\temp\\\\~foo0.txt TO c:\\\\temp\\\\~foo9.txt]\");\n    \n    assertQueryEquals(\"a\\\\\\\\\\\\+b\", a, \"a\\\\+b\");\n    \n    assertQueryEquals(\"a \\\\\\\"b c\\\\\\\" d\", a, \"a \\\"b c\\\" d\");\n    assertQueryEquals(\"\\\"a \\\\\\\"b c\\\\\\\" d\\\"\", a, \"\\\"a \\\"b c\\\" d\\\"\");\n    assertQueryEquals(\"\\\"a \\\\+b c d\\\"\", a, \"\\\"a +b c d\\\"\");\n    \n    assertQueryEquals(\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo.txt\", a, \"c:\\\\temp\\\\~foo.txt\");\n    \n    assertParseException(\"XY\\\\\"); // there must be a character after the escape char\n    \n    // test unicode escaping\n    assertQueryEquals(\"a\\\\u0062c\", a, \"abc\");\n    assertQueryEquals(\"XY\\\\u005a\", a, \"XYZ\");\n    assertQueryEquals(\"XY\\\\u005A\", a, \"XYZ\");\n    assertQueryEquals(\"\\\"a \\\\\\\\\\\\u0028\\\\u0062\\\\\\\" c\\\"\", a, \"\\\"a \\\\(b\\\" c\\\"\");\n    \n    assertParseException(\"XY\\\\u005G\");  // test non-hex character in escaped unicode sequence\n    assertParseException(\"XY\\\\u005\");   // test incomplete escaped unicode sequence\n    \n    // Tests bug LUCENE-800\n    assertQueryEquals(\"(item:\\\\\\\\ item:ABCD\\\\\\\\)\", a, \"item:\\\\ item:ABCD\\\\\");\n    assertParseException(\"(item:\\\\\\\\ item:ABCD\\\\\\\\))\"); // unmatched closing paranthesis \n    assertQueryEquals(\"\\\\*\", a, \"*\");\n    assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\");  // escaped backslash\n    \n    assertParseException(\"\\\\\"); // a backslash must always be escaped\n    \n    // LUCENE-1189\n    assertQueryEquals(\"(\\\"a\\\\\\\\\\\") or (\\\"b\\\")\", a ,\"a\\\\ or b\");\n  }\n\n","bugFix":["23a9c25687aa751efff1049f8b18ae27091ec453","02f9424edb9eccc558626693e4a4cd43f8ce2622","650b17f01c10ab9fa635c0fb398d760c64463d17"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testEscaped().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testEscaped().mjava","sourceNew":"  public void testEscaped() throws Exception {\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    \n    /*assertQueryEquals(\"\\\\[brackets\", a, \"\\\\[brackets\");\n    assertQueryEquals(\"\\\\[brackets\", null, \"brackets\");\n    assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\\\\\");\n    assertQueryEquals(\"\\\\+blah\", a, \"\\\\+blah\");\n    assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n\n    assertQueryEquals(\"\\\\-blah\", a, \"\\\\-blah\");\n    assertQueryEquals(\"\\\\!blah\", a, \"\\\\!blah\");\n    assertQueryEquals(\"\\\\{blah\", a, \"\\\\{blah\");\n    assertQueryEquals(\"\\\\}blah\", a, \"\\\\}blah\");\n    assertQueryEquals(\"\\\\:blah\", a, \"\\\\:blah\");\n    assertQueryEquals(\"\\\\^blah\", a, \"\\\\^blah\");\n    assertQueryEquals(\"\\\\[blah\", a, \"\\\\[blah\");\n    assertQueryEquals(\"\\\\]blah\", a, \"\\\\]blah\");\n    assertQueryEquals(\"\\\\\\\"blah\", a, \"\\\\\\\"blah\");\n    assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n    assertQueryEquals(\"\\\\)blah\", a, \"\\\\)blah\");\n    assertQueryEquals(\"\\\\~blah\", a, \"\\\\~blah\");\n    assertQueryEquals(\"\\\\*blah\", a, \"\\\\*blah\");\n    assertQueryEquals(\"\\\\?blah\", a, \"\\\\?blah\");\n    //assertQueryEquals(\"foo \\\\&\\\\& bar\", a, \"foo \\\\&\\\\& bar\");\n    //assertQueryEquals(\"foo \\\\|| bar\", a, \"foo \\\\|| bar\");\n    //assertQueryEquals(\"foo \\\\AND bar\", a, \"foo \\\\AND bar\");*/\n\n    assertQueryEquals(\"\\\\a\", a, \"a\");\n    \n    assertQueryEquals(\"a\\\\-b:c\", a, \"a-b:c\");\n    assertQueryEquals(\"a\\\\+b:c\", a, \"a+b:c\");\n    assertQueryEquals(\"a\\\\:b:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a\\\\\\\\b:c\", a, \"a\\\\b:c\");\n\n    assertQueryEquals(\"a:b\\\\-c\", a, \"a:b-c\");\n    assertQueryEquals(\"a:b\\\\+c\", a, \"a:b+c\");\n    assertQueryEquals(\"a:b\\\\:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a:b\\\\\\\\c\", a, \"a:b\\\\c\");\n\n    assertQueryEquals(\"a:b\\\\-c*\", a, \"a:b-c*\");\n    assertQueryEquals(\"a:b\\\\+c*\", a, \"a:b+c*\");\n    assertQueryEquals(\"a:b\\\\:c*\", a, \"a:b:c*\");\n\n    assertQueryEquals(\"a:b\\\\\\\\c*\", a, \"a:b\\\\c*\");\n\n    assertQueryEquals(\"a:b\\\\-c~\", a, \"a:b-c~2\");\n    assertQueryEquals(\"a:b\\\\+c~\", a, \"a:b+c~2\");\n    assertQueryEquals(\"a:b\\\\:c~\", a, \"a:b:c~2\");\n    assertQueryEquals(\"a:b\\\\\\\\c~\", a, \"a:b\\\\c~2\");\n\n    assertQueryEquals(\"[ a\\\\- TO a\\\\+ ]\", null, \"[a- TO a+]\");\n    assertQueryEquals(\"[ a\\\\: TO a\\\\~ ]\", null, \"[a: TO a~]\");\n    assertQueryEquals(\"[ a\\\\\\\\ TO a\\\\* ]\", null, \"[a\\\\ TO a*]\");\n\n    assertQueryEquals(\"[\\\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo0.txt\\\" TO \\\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo9.txt\\\"]\", a, \n                      \"[c:\\\\temp\\\\~foo0.txt TO c:\\\\temp\\\\~foo9.txt]\");\n    \n    assertQueryEquals(\"a\\\\\\\\\\\\+b\", a, \"a\\\\+b\");\n    \n    assertQueryEquals(\"a \\\\\\\"b c\\\\\\\" d\", a, \"a \\\"b c\\\" d\");\n    assertQueryEquals(\"\\\"a \\\\\\\"b c\\\\\\\" d\\\"\", a, \"\\\"a \\\"b c\\\" d\\\"\");\n    assertQueryEquals(\"\\\"a \\\\+b c d\\\"\", a, \"\\\"a +b c d\\\"\");\n    \n    assertQueryEquals(\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo.txt\", a, \"c:\\\\temp\\\\~foo.txt\");\n    \n    assertParseException(\"XY\\\\\"); // there must be a character after the escape char\n    \n    // test unicode escaping\n    assertQueryEquals(\"a\\\\u0062c\", a, \"abc\");\n    assertQueryEquals(\"XY\\\\u005a\", a, \"XYZ\");\n    assertQueryEquals(\"XY\\\\u005A\", a, \"XYZ\");\n    assertQueryEquals(\"\\\"a \\\\\\\\\\\\u0028\\\\u0062\\\\\\\" c\\\"\", a, \"\\\"a \\\\(b\\\" c\\\"\");\n    \n    assertParseException(\"XY\\\\u005G\");  // test non-hex character in escaped unicode sequence\n    assertParseException(\"XY\\\\u005\");   // test incomplete escaped unicode sequence\n    \n    // Tests bug LUCENE-800\n    assertQueryEquals(\"(item:\\\\\\\\ item:ABCD\\\\\\\\)\", a, \"item:\\\\ item:ABCD\\\\\");\n    assertParseException(\"(item:\\\\\\\\ item:ABCD\\\\\\\\))\"); // unmatched closing paranthesis \n    assertQueryEquals(\"\\\\*\", a, \"*\");\n    assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\");  // escaped backslash\n    \n    assertParseException(\"\\\\\"); // a backslash must always be escaped\n    \n    // LUCENE-1189\n    assertQueryEquals(\"(\\\"a\\\\\\\\\\\") or (\\\"b\\\")\", a ,\"a\\\\ or b\");\n  }\n\n","sourceOld":"  public void testEscaped() throws Exception {\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    \n    /*assertQueryEquals(\"\\\\[brackets\", a, \"\\\\[brackets\");\n    assertQueryEquals(\"\\\\[brackets\", null, \"brackets\");\n    assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\\\\\");\n    assertQueryEquals(\"\\\\+blah\", a, \"\\\\+blah\");\n    assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n\n    assertQueryEquals(\"\\\\-blah\", a, \"\\\\-blah\");\n    assertQueryEquals(\"\\\\!blah\", a, \"\\\\!blah\");\n    assertQueryEquals(\"\\\\{blah\", a, \"\\\\{blah\");\n    assertQueryEquals(\"\\\\}blah\", a, \"\\\\}blah\");\n    assertQueryEquals(\"\\\\:blah\", a, \"\\\\:blah\");\n    assertQueryEquals(\"\\\\^blah\", a, \"\\\\^blah\");\n    assertQueryEquals(\"\\\\[blah\", a, \"\\\\[blah\");\n    assertQueryEquals(\"\\\\]blah\", a, \"\\\\]blah\");\n    assertQueryEquals(\"\\\\\\\"blah\", a, \"\\\\\\\"blah\");\n    assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n    assertQueryEquals(\"\\\\)blah\", a, \"\\\\)blah\");\n    assertQueryEquals(\"\\\\~blah\", a, \"\\\\~blah\");\n    assertQueryEquals(\"\\\\*blah\", a, \"\\\\*blah\");\n    assertQueryEquals(\"\\\\?blah\", a, \"\\\\?blah\");\n    //assertQueryEquals(\"foo \\\\&\\\\& bar\", a, \"foo \\\\&\\\\& bar\");\n    //assertQueryEquals(\"foo \\\\|| bar\", a, \"foo \\\\|| bar\");\n    //assertQueryEquals(\"foo \\\\AND bar\", a, \"foo \\\\AND bar\");*/\n\n    assertQueryEquals(\"\\\\a\", a, \"a\");\n    \n    assertQueryEquals(\"a\\\\-b:c\", a, \"a-b:c\");\n    assertQueryEquals(\"a\\\\+b:c\", a, \"a+b:c\");\n    assertQueryEquals(\"a\\\\:b:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a\\\\\\\\b:c\", a, \"a\\\\b:c\");\n\n    assertQueryEquals(\"a:b\\\\-c\", a, \"a:b-c\");\n    assertQueryEquals(\"a:b\\\\+c\", a, \"a:b+c\");\n    assertQueryEquals(\"a:b\\\\:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a:b\\\\\\\\c\", a, \"a:b\\\\c\");\n\n    assertQueryEquals(\"a:b\\\\-c*\", a, \"a:b-c*\");\n    assertQueryEquals(\"a:b\\\\+c*\", a, \"a:b+c*\");\n    assertQueryEquals(\"a:b\\\\:c*\", a, \"a:b:c*\");\n\n    assertQueryEquals(\"a:b\\\\\\\\c*\", a, \"a:b\\\\c*\");\n\n    assertQueryEquals(\"a:b\\\\-?c\", a, \"a:b\\\\-?c\");\n    assertQueryEquals(\"a:b\\\\+?c\", a, \"a:b\\\\+?c\");\n    assertQueryEquals(\"a:b\\\\:?c\", a, \"a:b\\\\:?c\");\n\n    assertQueryEquals(\"a:b\\\\\\\\?c\", a, \"a:b\\\\\\\\?c\");\n\n    assertQueryEquals(\"a:b\\\\-c~\", a, \"a:b-c~2\");\n    assertQueryEquals(\"a:b\\\\+c~\", a, \"a:b+c~2\");\n    assertQueryEquals(\"a:b\\\\:c~\", a, \"a:b:c~2\");\n    assertQueryEquals(\"a:b\\\\\\\\c~\", a, \"a:b\\\\c~2\");\n\n    assertQueryEquals(\"[ a\\\\- TO a\\\\+ ]\", null, \"[a- TO a+]\");\n    assertQueryEquals(\"[ a\\\\: TO a\\\\~ ]\", null, \"[a: TO a~]\");\n    assertQueryEquals(\"[ a\\\\\\\\ TO a\\\\* ]\", null, \"[a\\\\ TO a*]\");\n\n    assertQueryEquals(\"[\\\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo0.txt\\\" TO \\\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo9.txt\\\"]\", a, \n                      \"[c:\\\\temp\\\\~foo0.txt TO c:\\\\temp\\\\~foo9.txt]\");\n    \n    assertQueryEquals(\"a\\\\\\\\\\\\+b\", a, \"a\\\\+b\");\n    \n    assertQueryEquals(\"a \\\\\\\"b c\\\\\\\" d\", a, \"a \\\"b c\\\" d\");\n    assertQueryEquals(\"\\\"a \\\\\\\"b c\\\\\\\" d\\\"\", a, \"\\\"a \\\"b c\\\" d\\\"\");\n    assertQueryEquals(\"\\\"a \\\\+b c d\\\"\", a, \"\\\"a +b c d\\\"\");\n    \n    assertQueryEquals(\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo.txt\", a, \"c:\\\\temp\\\\~foo.txt\");\n    \n    assertParseException(\"XY\\\\\"); // there must be a character after the escape char\n    \n    // test unicode escaping\n    assertQueryEquals(\"a\\\\u0062c\", a, \"abc\");\n    assertQueryEquals(\"XY\\\\u005a\", a, \"XYZ\");\n    assertQueryEquals(\"XY\\\\u005A\", a, \"XYZ\");\n    assertQueryEquals(\"\\\"a \\\\\\\\\\\\u0028\\\\u0062\\\\\\\" c\\\"\", a, \"\\\"a \\\\(b\\\" c\\\"\");\n    \n    assertParseException(\"XY\\\\u005G\");  // test non-hex character in escaped unicode sequence\n    assertParseException(\"XY\\\\u005\");   // test incomplete escaped unicode sequence\n    \n    // Tests bug LUCENE-800\n    assertQueryEquals(\"(item:\\\\\\\\ item:ABCD\\\\\\\\)\", a, \"item:\\\\ item:ABCD\\\\\");\n    assertParseException(\"(item:\\\\\\\\ item:ABCD\\\\\\\\))\"); // unmatched closing paranthesis \n    assertQueryEquals(\"\\\\*\", a, \"*\");\n    assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\");  // escaped backslash\n    \n    assertParseException(\"\\\\\"); // a backslash must always be escaped\n    \n    // LUCENE-1189\n    assertQueryEquals(\"(\\\"a\\\\\\\\\\\") or (\\\"b\\\")\", a ,\"a\\\\ or b\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testEscaped().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testEscaped().mjava","sourceNew":"  public void testEscaped() throws Exception {\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    \n    /*assertQueryEquals(\"\\\\[brackets\", a, \"\\\\[brackets\");\n    assertQueryEquals(\"\\\\[brackets\", null, \"brackets\");\n    assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\\\\\");\n    assertQueryEquals(\"\\\\+blah\", a, \"\\\\+blah\");\n    assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n\n    assertQueryEquals(\"\\\\-blah\", a, \"\\\\-blah\");\n    assertQueryEquals(\"\\\\!blah\", a, \"\\\\!blah\");\n    assertQueryEquals(\"\\\\{blah\", a, \"\\\\{blah\");\n    assertQueryEquals(\"\\\\}blah\", a, \"\\\\}blah\");\n    assertQueryEquals(\"\\\\:blah\", a, \"\\\\:blah\");\n    assertQueryEquals(\"\\\\^blah\", a, \"\\\\^blah\");\n    assertQueryEquals(\"\\\\[blah\", a, \"\\\\[blah\");\n    assertQueryEquals(\"\\\\]blah\", a, \"\\\\]blah\");\n    assertQueryEquals(\"\\\\\\\"blah\", a, \"\\\\\\\"blah\");\n    assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n    assertQueryEquals(\"\\\\)blah\", a, \"\\\\)blah\");\n    assertQueryEquals(\"\\\\~blah\", a, \"\\\\~blah\");\n    assertQueryEquals(\"\\\\*blah\", a, \"\\\\*blah\");\n    assertQueryEquals(\"\\\\?blah\", a, \"\\\\?blah\");\n    //assertQueryEquals(\"foo \\\\&\\\\& bar\", a, \"foo \\\\&\\\\& bar\");\n    //assertQueryEquals(\"foo \\\\|| bar\", a, \"foo \\\\|| bar\");\n    //assertQueryEquals(\"foo \\\\AND bar\", a, \"foo \\\\AND bar\");*/\n\n    assertQueryEquals(\"\\\\a\", a, \"a\");\n    \n    assertQueryEquals(\"a\\\\-b:c\", a, \"a-b:c\");\n    assertQueryEquals(\"a\\\\+b:c\", a, \"a+b:c\");\n    assertQueryEquals(\"a\\\\:b:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a\\\\\\\\b:c\", a, \"a\\\\b:c\");\n\n    assertQueryEquals(\"a:b\\\\-c\", a, \"a:b-c\");\n    assertQueryEquals(\"a:b\\\\+c\", a, \"a:b+c\");\n    assertQueryEquals(\"a:b\\\\:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a:b\\\\\\\\c\", a, \"a:b\\\\c\");\n\n    assertQueryEquals(\"a:b\\\\-c*\", a, \"a:b-c*\");\n    assertQueryEquals(\"a:b\\\\+c*\", a, \"a:b+c*\");\n    assertQueryEquals(\"a:b\\\\:c*\", a, \"a:b:c*\");\n\n    assertQueryEquals(\"a:b\\\\\\\\c*\", a, \"a:b\\\\c*\");\n\n    assertQueryEquals(\"a:b\\\\-c~\", a, \"a:b-c~2\");\n    assertQueryEquals(\"a:b\\\\+c~\", a, \"a:b+c~2\");\n    assertQueryEquals(\"a:b\\\\:c~\", a, \"a:b:c~2\");\n    assertQueryEquals(\"a:b\\\\\\\\c~\", a, \"a:b\\\\c~2\");\n\n    assertQueryEquals(\"[ a\\\\- TO a\\\\+ ]\", null, \"[a- TO a+]\");\n    assertQueryEquals(\"[ a\\\\: TO a\\\\~ ]\", null, \"[a: TO a~]\");\n    assertQueryEquals(\"[ a\\\\\\\\ TO a\\\\* ]\", null, \"[a\\\\ TO a*]\");\n\n    assertQueryEquals(\"[\\\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo0.txt\\\" TO \\\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo9.txt\\\"]\", a, \n                      \"[c:\\\\temp\\\\~foo0.txt TO c:\\\\temp\\\\~foo9.txt]\");\n    \n    assertQueryEquals(\"a\\\\\\\\\\\\+b\", a, \"a\\\\+b\");\n    \n    assertQueryEquals(\"a \\\\\\\"b c\\\\\\\" d\", a, \"a \\\"b c\\\" d\");\n    assertQueryEquals(\"\\\"a \\\\\\\"b c\\\\\\\" d\\\"\", a, \"\\\"a \\\"b c\\\" d\\\"\");\n    assertQueryEquals(\"\\\"a \\\\+b c d\\\"\", a, \"\\\"a +b c d\\\"\");\n    \n    assertQueryEquals(\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo.txt\", a, \"c:\\\\temp\\\\~foo.txt\");\n    \n    assertParseException(\"XY\\\\\"); // there must be a character after the escape char\n    \n    // test unicode escaping\n    assertQueryEquals(\"a\\\\u0062c\", a, \"abc\");\n    assertQueryEquals(\"XY\\\\u005a\", a, \"XYZ\");\n    assertQueryEquals(\"XY\\\\u005A\", a, \"XYZ\");\n    assertQueryEquals(\"\\\"a \\\\\\\\\\\\u0028\\\\u0062\\\\\\\" c\\\"\", a, \"\\\"a \\\\(b\\\" c\\\"\");\n    \n    assertParseException(\"XY\\\\u005G\");  // test non-hex character in escaped unicode sequence\n    assertParseException(\"XY\\\\u005\");   // test incomplete escaped unicode sequence\n    \n    // Tests bug LUCENE-800\n    assertQueryEquals(\"(item:\\\\\\\\ item:ABCD\\\\\\\\)\", a, \"item:\\\\ item:ABCD\\\\\");\n    assertParseException(\"(item:\\\\\\\\ item:ABCD\\\\\\\\))\"); // unmatched closing paranthesis \n    assertQueryEquals(\"\\\\*\", a, \"*\");\n    assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\");  // escaped backslash\n    \n    assertParseException(\"\\\\\"); // a backslash must always be escaped\n    \n    // LUCENE-1189\n    assertQueryEquals(\"(\\\"a\\\\\\\\\\\") or (\\\"b\\\")\", a ,\"a\\\\ or b\");\n  }\n\n","sourceOld":"  public void testEscaped() throws Exception {\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    \n    /*assertQueryEquals(\"\\\\[brackets\", a, \"\\\\[brackets\");\n    assertQueryEquals(\"\\\\[brackets\", null, \"brackets\");\n    assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\\\\\");\n    assertQueryEquals(\"\\\\+blah\", a, \"\\\\+blah\");\n    assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n\n    assertQueryEquals(\"\\\\-blah\", a, \"\\\\-blah\");\n    assertQueryEquals(\"\\\\!blah\", a, \"\\\\!blah\");\n    assertQueryEquals(\"\\\\{blah\", a, \"\\\\{blah\");\n    assertQueryEquals(\"\\\\}blah\", a, \"\\\\}blah\");\n    assertQueryEquals(\"\\\\:blah\", a, \"\\\\:blah\");\n    assertQueryEquals(\"\\\\^blah\", a, \"\\\\^blah\");\n    assertQueryEquals(\"\\\\[blah\", a, \"\\\\[blah\");\n    assertQueryEquals(\"\\\\]blah\", a, \"\\\\]blah\");\n    assertQueryEquals(\"\\\\\\\"blah\", a, \"\\\\\\\"blah\");\n    assertQueryEquals(\"\\\\(blah\", a, \"\\\\(blah\");\n    assertQueryEquals(\"\\\\)blah\", a, \"\\\\)blah\");\n    assertQueryEquals(\"\\\\~blah\", a, \"\\\\~blah\");\n    assertQueryEquals(\"\\\\*blah\", a, \"\\\\*blah\");\n    assertQueryEquals(\"\\\\?blah\", a, \"\\\\?blah\");\n    //assertQueryEquals(\"foo \\\\&\\\\& bar\", a, \"foo \\\\&\\\\& bar\");\n    //assertQueryEquals(\"foo \\\\|| bar\", a, \"foo \\\\|| bar\");\n    //assertQueryEquals(\"foo \\\\AND bar\", a, \"foo \\\\AND bar\");*/\n\n    assertQueryEquals(\"\\\\a\", a, \"a\");\n    \n    assertQueryEquals(\"a\\\\-b:c\", a, \"a-b:c\");\n    assertQueryEquals(\"a\\\\+b:c\", a, \"a+b:c\");\n    assertQueryEquals(\"a\\\\:b:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a\\\\\\\\b:c\", a, \"a\\\\b:c\");\n\n    assertQueryEquals(\"a:b\\\\-c\", a, \"a:b-c\");\n    assertQueryEquals(\"a:b\\\\+c\", a, \"a:b+c\");\n    assertQueryEquals(\"a:b\\\\:c\", a, \"a:b:c\");\n    assertQueryEquals(\"a:b\\\\\\\\c\", a, \"a:b\\\\c\");\n\n    assertQueryEquals(\"a:b\\\\-c*\", a, \"a:b-c*\");\n    assertQueryEquals(\"a:b\\\\+c*\", a, \"a:b+c*\");\n    assertQueryEquals(\"a:b\\\\:c*\", a, \"a:b:c*\");\n\n    assertQueryEquals(\"a:b\\\\\\\\c*\", a, \"a:b\\\\c*\");\n\n    assertQueryEquals(\"a:b\\\\-?c\", a, \"a:b\\\\-?c\");\n    assertQueryEquals(\"a:b\\\\+?c\", a, \"a:b\\\\+?c\");\n    assertQueryEquals(\"a:b\\\\:?c\", a, \"a:b\\\\:?c\");\n\n    assertQueryEquals(\"a:b\\\\\\\\?c\", a, \"a:b\\\\\\\\?c\");\n\n    assertQueryEquals(\"a:b\\\\-c~\", a, \"a:b-c~2\");\n    assertQueryEquals(\"a:b\\\\+c~\", a, \"a:b+c~2\");\n    assertQueryEquals(\"a:b\\\\:c~\", a, \"a:b:c~2\");\n    assertQueryEquals(\"a:b\\\\\\\\c~\", a, \"a:b\\\\c~2\");\n\n    assertQueryEquals(\"[ a\\\\- TO a\\\\+ ]\", null, \"[a- TO a+]\");\n    assertQueryEquals(\"[ a\\\\: TO a\\\\~ ]\", null, \"[a: TO a~]\");\n    assertQueryEquals(\"[ a\\\\\\\\ TO a\\\\* ]\", null, \"[a\\\\ TO a*]\");\n\n    assertQueryEquals(\"[\\\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo0.txt\\\" TO \\\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo9.txt\\\"]\", a, \n                      \"[c:\\\\temp\\\\~foo0.txt TO c:\\\\temp\\\\~foo9.txt]\");\n    \n    assertQueryEquals(\"a\\\\\\\\\\\\+b\", a, \"a\\\\+b\");\n    \n    assertQueryEquals(\"a \\\\\\\"b c\\\\\\\" d\", a, \"a \\\"b c\\\" d\");\n    assertQueryEquals(\"\\\"a \\\\\\\"b c\\\\\\\" d\\\"\", a, \"\\\"a \\\"b c\\\" d\\\"\");\n    assertQueryEquals(\"\\\"a \\\\+b c d\\\"\", a, \"\\\"a +b c d\\\"\");\n    \n    assertQueryEquals(\"c\\\\:\\\\\\\\temp\\\\\\\\\\\\~foo.txt\", a, \"c:\\\\temp\\\\~foo.txt\");\n    \n    assertParseException(\"XY\\\\\"); // there must be a character after the escape char\n    \n    // test unicode escaping\n    assertQueryEquals(\"a\\\\u0062c\", a, \"abc\");\n    assertQueryEquals(\"XY\\\\u005a\", a, \"XYZ\");\n    assertQueryEquals(\"XY\\\\u005A\", a, \"XYZ\");\n    assertQueryEquals(\"\\\"a \\\\\\\\\\\\u0028\\\\u0062\\\\\\\" c\\\"\", a, \"\\\"a \\\\(b\\\" c\\\"\");\n    \n    assertParseException(\"XY\\\\u005G\");  // test non-hex character in escaped unicode sequence\n    assertParseException(\"XY\\\\u005\");   // test incomplete escaped unicode sequence\n    \n    // Tests bug LUCENE-800\n    assertQueryEquals(\"(item:\\\\\\\\ item:ABCD\\\\\\\\)\", a, \"item:\\\\ item:ABCD\\\\\");\n    assertParseException(\"(item:\\\\\\\\ item:ABCD\\\\\\\\))\"); // unmatched closing paranthesis \n    assertQueryEquals(\"\\\\*\", a, \"*\");\n    assertQueryEquals(\"\\\\\\\\\", a, \"\\\\\");  // escaped backslash\n    \n    assertParseException(\"\\\\\"); // a backslash must always be escaped\n    \n    // LUCENE-1189\n    assertQueryEquals(\"(\\\"a\\\\\\\\\\\") or (\\\"b\\\")\", a ,\"a\\\\ or b\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ee76d213d935c68932ca13b55fa0a8a32bf6af1a":["d374631bb6f5665bd5907a6186a9bb283a315f7d"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["d374631bb6f5665bd5907a6186a9bb283a315f7d","ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["d374631bb6f5665bd5907a6186a9bb283a315f7d","ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"d374631bb6f5665bd5907a6186a9bb283a315f7d":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a"]},"commit2Childs":{"ee76d213d935c68932ca13b55fa0a8a32bf6af1a":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d374631bb6f5665bd5907a6186a9bb283a315f7d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"d374631bb6f5665bd5907a6186a9bb283a315f7d":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}