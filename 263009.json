{"path":"lucene/src/test/org/apache/lucene/util/TestVersionComparator#testVersions().mjava","commits":[{"id":"30599b72ecc4636f5738da2aadbc740848f86e67","date":1305726532,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestVersionComparator#testVersions().mjava","pathOld":"/dev/null","sourceNew":"  public void testVersions() {\n    Comparator<String> comp = StringHelper.getVersionComparator();\n    assertTrue(comp.compare(\"1\", \"2\") < 0);\n    assertTrue(comp.compare(\"1\", \"1\") == 0);\n    assertTrue(comp.compare(\"2\", \"1\") > 0);\n    \n    assertTrue(comp.compare(\"1.1\", \"1\") > 0);\n    assertTrue(comp.compare(\"1\", \"1.1\") < 0);\n    assertTrue(comp.compare(\"1.1\", \"1.1\") == 0);\n    \n    assertTrue(comp.compare(\"1.0\", \"1\") == 0);\n    assertTrue(comp.compare(\"1\", \"1.0\") == 0);\n    assertTrue(comp.compare(\"1.0.1\", \"1.0\") > 0);\n    assertTrue(comp.compare(\"1.0\", \"1.0.1\") < 0);\n    \n    assertTrue(comp.compare(\"1.02.003\", \"1.2.3.0\") == 0);\n    assertTrue(comp.compare(\"1.2.3.0\", \"1.02.003\") == 0);\n    \n    assertTrue(comp.compare(\"1.10\", \"1.9\") > 0);\n    assertTrue(comp.compare(\"1.9\", \"1.10\") < 0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestVersionComparator#testVersions().mjava","pathOld":"/dev/null","sourceNew":"  public void testVersions() {\n    Comparator<String> comp = StringHelper.getVersionComparator();\n    assertTrue(comp.compare(\"1\", \"2\") < 0);\n    assertTrue(comp.compare(\"1\", \"1\") == 0);\n    assertTrue(comp.compare(\"2\", \"1\") > 0);\n    \n    assertTrue(comp.compare(\"1.1\", \"1\") > 0);\n    assertTrue(comp.compare(\"1\", \"1.1\") < 0);\n    assertTrue(comp.compare(\"1.1\", \"1.1\") == 0);\n    \n    assertTrue(comp.compare(\"1.0\", \"1\") == 0);\n    assertTrue(comp.compare(\"1\", \"1.0\") == 0);\n    assertTrue(comp.compare(\"1.0.1\", \"1.0\") > 0);\n    assertTrue(comp.compare(\"1.0\", \"1.0.1\") < 0);\n    \n    assertTrue(comp.compare(\"1.02.003\", \"1.2.3.0\") == 0);\n    assertTrue(comp.compare(\"1.2.3.0\", \"1.02.003\") == 0);\n    \n    assertTrue(comp.compare(\"1.10\", \"1.9\") > 0);\n    assertTrue(comp.compare(\"1.9\", \"1.10\") < 0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestVersionComparator#testVersions().mjava","pathOld":"/dev/null","sourceNew":"  public void testVersions() {\n    Comparator<String> comp = StringHelper.getVersionComparator();\n    assertTrue(comp.compare(\"1\", \"2\") < 0);\n    assertTrue(comp.compare(\"1\", \"1\") == 0);\n    assertTrue(comp.compare(\"2\", \"1\") > 0);\n    \n    assertTrue(comp.compare(\"1.1\", \"1\") > 0);\n    assertTrue(comp.compare(\"1\", \"1.1\") < 0);\n    assertTrue(comp.compare(\"1.1\", \"1.1\") == 0);\n    \n    assertTrue(comp.compare(\"1.0\", \"1\") == 0);\n    assertTrue(comp.compare(\"1\", \"1.0\") == 0);\n    assertTrue(comp.compare(\"1.0.1\", \"1.0\") > 0);\n    assertTrue(comp.compare(\"1.0\", \"1.0.1\") < 0);\n    \n    assertTrue(comp.compare(\"1.02.003\", \"1.2.3.0\") == 0);\n    assertTrue(comp.compare(\"1.2.3.0\", \"1.02.003\") == 0);\n    \n    assertTrue(comp.compare(\"1.10\", \"1.9\") > 0);\n    assertTrue(comp.compare(\"1.9\", \"1.10\") < 0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3e5cfcd920648fdd531192a41ad4087285aecc1","date":1308920374,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestVersionComparator#testVersions().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestVersionComparator#testVersions().mjava","sourceNew":"  public void testVersions() {\n    Comparator<String> comp = StringHelper.getVersionComparator();\n    assertTrue(comp.compare(\"1\", \"2\") < 0);\n    assertTrue(comp.compare(\"1\", \"1\") == 0);\n    assertTrue(comp.compare(\"2\", \"1\") > 0);\n    \n    assertTrue(comp.compare(\"1.1\", \"1\") > 0);\n    assertTrue(comp.compare(\"1\", \"1.1\") < 0);\n    assertTrue(comp.compare(\"1.1\", \"1.1\") == 0);\n    \n    assertTrue(comp.compare(\"1.0\", \"1\") == 0);\n    assertTrue(comp.compare(\"1\", \"1.0\") == 0);\n    assertTrue(comp.compare(\"1.0.1\", \"1.0\") > 0);\n    assertTrue(comp.compare(\"1.0\", \"1.0.1\") < 0);\n    \n    assertTrue(comp.compare(\"1.02.003\", \"1.2.3.0\") == 0);\n    assertTrue(comp.compare(\"1.2.3.0\", \"1.02.003\") == 0);\n    \n    assertTrue(comp.compare(\"1.10\", \"1.9\") > 0);\n    assertTrue(comp.compare(\"1.9\", \"1.10\") < 0);\n    \n    assertTrue(comp.compare(\"0\", \"1.0\") < 0);\n    assertTrue(comp.compare(\"00\", \"1.0\") < 0);\n    assertTrue(comp.compare(\"-1.0\", \"1.0\") < 0);\n    assertTrue(comp.compare(\"3.0\", Integer.toString(Integer.MIN_VALUE)) > 0);\n  }\n\n","sourceOld":"  public void testVersions() {\n    Comparator<String> comp = StringHelper.getVersionComparator();\n    assertTrue(comp.compare(\"1\", \"2\") < 0);\n    assertTrue(comp.compare(\"1\", \"1\") == 0);\n    assertTrue(comp.compare(\"2\", \"1\") > 0);\n    \n    assertTrue(comp.compare(\"1.1\", \"1\") > 0);\n    assertTrue(comp.compare(\"1\", \"1.1\") < 0);\n    assertTrue(comp.compare(\"1.1\", \"1.1\") == 0);\n    \n    assertTrue(comp.compare(\"1.0\", \"1\") == 0);\n    assertTrue(comp.compare(\"1\", \"1.0\") == 0);\n    assertTrue(comp.compare(\"1.0.1\", \"1.0\") > 0);\n    assertTrue(comp.compare(\"1.0\", \"1.0.1\") < 0);\n    \n    assertTrue(comp.compare(\"1.02.003\", \"1.2.3.0\") == 0);\n    assertTrue(comp.compare(\"1.2.3.0\", \"1.02.003\") == 0);\n    \n    assertTrue(comp.compare(\"1.10\", \"1.9\") > 0);\n    assertTrue(comp.compare(\"1.9\", \"1.10\") < 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestVersionComparator#testVersions().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestVersionComparator#testVersions().mjava","sourceNew":"  public void testVersions() {\n    Comparator<String> comp = StringHelper.getVersionComparator();\n    assertTrue(comp.compare(\"1\", \"2\") < 0);\n    assertTrue(comp.compare(\"1\", \"1\") == 0);\n    assertTrue(comp.compare(\"2\", \"1\") > 0);\n    \n    assertTrue(comp.compare(\"1.1\", \"1\") > 0);\n    assertTrue(comp.compare(\"1\", \"1.1\") < 0);\n    assertTrue(comp.compare(\"1.1\", \"1.1\") == 0);\n    \n    assertTrue(comp.compare(\"1.0\", \"1\") == 0);\n    assertTrue(comp.compare(\"1\", \"1.0\") == 0);\n    assertTrue(comp.compare(\"1.0.1\", \"1.0\") > 0);\n    assertTrue(comp.compare(\"1.0\", \"1.0.1\") < 0);\n    \n    assertTrue(comp.compare(\"1.02.003\", \"1.2.3.0\") == 0);\n    assertTrue(comp.compare(\"1.2.3.0\", \"1.02.003\") == 0);\n    \n    assertTrue(comp.compare(\"1.10\", \"1.9\") > 0);\n    assertTrue(comp.compare(\"1.9\", \"1.10\") < 0);\n    \n    assertTrue(comp.compare(\"0\", \"1.0\") < 0);\n    assertTrue(comp.compare(\"00\", \"1.0\") < 0);\n    assertTrue(comp.compare(\"-1.0\", \"1.0\") < 0);\n    assertTrue(comp.compare(\"3.0\", Integer.toString(Integer.MIN_VALUE)) > 0);\n  }\n\n","sourceOld":"  public void testVersions() {\n    Comparator<String> comp = StringHelper.getVersionComparator();\n    assertTrue(comp.compare(\"1\", \"2\") < 0);\n    assertTrue(comp.compare(\"1\", \"1\") == 0);\n    assertTrue(comp.compare(\"2\", \"1\") > 0);\n    \n    assertTrue(comp.compare(\"1.1\", \"1\") > 0);\n    assertTrue(comp.compare(\"1\", \"1.1\") < 0);\n    assertTrue(comp.compare(\"1.1\", \"1.1\") == 0);\n    \n    assertTrue(comp.compare(\"1.0\", \"1\") == 0);\n    assertTrue(comp.compare(\"1\", \"1.0\") == 0);\n    assertTrue(comp.compare(\"1.0.1\", \"1.0\") > 0);\n    assertTrue(comp.compare(\"1.0\", \"1.0.1\") < 0);\n    \n    assertTrue(comp.compare(\"1.02.003\", \"1.2.3.0\") == 0);\n    assertTrue(comp.compare(\"1.2.3.0\", \"1.02.003\") == 0);\n    \n    assertTrue(comp.compare(\"1.10\", \"1.9\") > 0);\n    assertTrue(comp.compare(\"1.9\", \"1.10\") < 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestVersionComparator#testVersions().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestVersionComparator#testVersions().mjava","sourceNew":"  public void testVersions() {\n    Comparator<String> comp = StringHelper.getVersionComparator();\n    assertTrue(comp.compare(\"1\", \"2\") < 0);\n    assertTrue(comp.compare(\"1\", \"1\") == 0);\n    assertTrue(comp.compare(\"2\", \"1\") > 0);\n    \n    assertTrue(comp.compare(\"1.1\", \"1\") > 0);\n    assertTrue(comp.compare(\"1\", \"1.1\") < 0);\n    assertTrue(comp.compare(\"1.1\", \"1.1\") == 0);\n    \n    assertTrue(comp.compare(\"1.0\", \"1\") == 0);\n    assertTrue(comp.compare(\"1\", \"1.0\") == 0);\n    assertTrue(comp.compare(\"1.0.1\", \"1.0\") > 0);\n    assertTrue(comp.compare(\"1.0\", \"1.0.1\") < 0);\n    \n    assertTrue(comp.compare(\"1.02.003\", \"1.2.3.0\") == 0);\n    assertTrue(comp.compare(\"1.2.3.0\", \"1.02.003\") == 0);\n    \n    assertTrue(comp.compare(\"1.10\", \"1.9\") > 0);\n    assertTrue(comp.compare(\"1.9\", \"1.10\") < 0);\n    \n    assertTrue(comp.compare(\"0\", \"1.0\") < 0);\n    assertTrue(comp.compare(\"00\", \"1.0\") < 0);\n    assertTrue(comp.compare(\"-1.0\", \"1.0\") < 0);\n    assertTrue(comp.compare(\"3.0\", Integer.toString(Integer.MIN_VALUE)) > 0);\n  }\n\n","sourceOld":"  public void testVersions() {\n    Comparator<String> comp = StringHelper.getVersionComparator();\n    assertTrue(comp.compare(\"1\", \"2\") < 0);\n    assertTrue(comp.compare(\"1\", \"1\") == 0);\n    assertTrue(comp.compare(\"2\", \"1\") > 0);\n    \n    assertTrue(comp.compare(\"1.1\", \"1\") > 0);\n    assertTrue(comp.compare(\"1\", \"1.1\") < 0);\n    assertTrue(comp.compare(\"1.1\", \"1.1\") == 0);\n    \n    assertTrue(comp.compare(\"1.0\", \"1\") == 0);\n    assertTrue(comp.compare(\"1\", \"1.0\") == 0);\n    assertTrue(comp.compare(\"1.0.1\", \"1.0\") > 0);\n    assertTrue(comp.compare(\"1.0\", \"1.0.1\") < 0);\n    \n    assertTrue(comp.compare(\"1.02.003\", \"1.2.3.0\") == 0);\n    assertTrue(comp.compare(\"1.2.3.0\", \"1.02.003\") == 0);\n    \n    assertTrue(comp.compare(\"1.10\", \"1.9\") > 0);\n    assertTrue(comp.compare(\"1.9\", \"1.10\") < 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestVersionComparator#testVersions().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestVersionComparator#testVersions().mjava","sourceNew":"  public void testVersions() {\n    Comparator<String> comp = StringHelper.getVersionComparator();\n    assertTrue(comp.compare(\"1\", \"2\") < 0);\n    assertTrue(comp.compare(\"1\", \"1\") == 0);\n    assertTrue(comp.compare(\"2\", \"1\") > 0);\n    \n    assertTrue(comp.compare(\"1.1\", \"1\") > 0);\n    assertTrue(comp.compare(\"1\", \"1.1\") < 0);\n    assertTrue(comp.compare(\"1.1\", \"1.1\") == 0);\n    \n    assertTrue(comp.compare(\"1.0\", \"1\") == 0);\n    assertTrue(comp.compare(\"1\", \"1.0\") == 0);\n    assertTrue(comp.compare(\"1.0.1\", \"1.0\") > 0);\n    assertTrue(comp.compare(\"1.0\", \"1.0.1\") < 0);\n    \n    assertTrue(comp.compare(\"1.02.003\", \"1.2.3.0\") == 0);\n    assertTrue(comp.compare(\"1.2.3.0\", \"1.02.003\") == 0);\n    \n    assertTrue(comp.compare(\"1.10\", \"1.9\") > 0);\n    assertTrue(comp.compare(\"1.9\", \"1.10\") < 0);\n    \n    assertTrue(comp.compare(\"0\", \"1.0\") < 0);\n    assertTrue(comp.compare(\"00\", \"1.0\") < 0);\n    assertTrue(comp.compare(\"-1.0\", \"1.0\") < 0);\n    assertTrue(comp.compare(\"3.0\", Integer.toString(Integer.MIN_VALUE)) > 0);\n  }\n\n","sourceOld":"  public void testVersions() {\n    Comparator<String> comp = StringHelper.getVersionComparator();\n    assertTrue(comp.compare(\"1\", \"2\") < 0);\n    assertTrue(comp.compare(\"1\", \"1\") == 0);\n    assertTrue(comp.compare(\"2\", \"1\") > 0);\n    \n    assertTrue(comp.compare(\"1.1\", \"1\") > 0);\n    assertTrue(comp.compare(\"1\", \"1.1\") < 0);\n    assertTrue(comp.compare(\"1.1\", \"1.1\") == 0);\n    \n    assertTrue(comp.compare(\"1.0\", \"1\") == 0);\n    assertTrue(comp.compare(\"1\", \"1.0\") == 0);\n    assertTrue(comp.compare(\"1.0.1\", \"1.0\") > 0);\n    assertTrue(comp.compare(\"1.0\", \"1.0.1\") < 0);\n    \n    assertTrue(comp.compare(\"1.02.003\", \"1.2.3.0\") == 0);\n    assertTrue(comp.compare(\"1.2.3.0\", \"1.02.003\") == 0);\n    \n    assertTrue(comp.compare(\"1.10\", \"1.9\") > 0);\n    assertTrue(comp.compare(\"1.9\", \"1.10\") < 0);\n    \n    assertTrue(comp.compare(\"0\", \"1.0\") < 0);\n    assertTrue(comp.compare(\"00\", \"1.0\") < 0);\n    assertTrue(comp.compare(\"-1.0\", \"1.0\") < 0);\n    assertTrue(comp.compare(\"3.0\", Integer.toString(Integer.MIN_VALUE)) > 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c3a8a449466c1ff7ce2274fe73dab487256964b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","30599b72ecc4636f5738da2aadbc740848f86e67"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e3e5cfcd920648fdd531192a41ad4087285aecc1"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","30599b72ecc4636f5738da2aadbc740848f86e67"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30599b72ecc4636f5738da2aadbc740848f86e67":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2553b00f699380c64959ccb27991289aae87be2e":["a3776dccca01c11e7046323cfad46a3b4a471233","e3e5cfcd920648fdd531192a41ad4087285aecc1"],"e3e5cfcd920648fdd531192a41ad4087285aecc1":["30599b72ecc4636f5738da2aadbc740848f86e67"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["30599b72ecc4636f5738da2aadbc740848f86e67","e3e5cfcd920648fdd531192a41ad4087285aecc1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":["2553b00f699380c64959ccb27991289aae87be2e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","30599b72ecc4636f5738da2aadbc740848f86e67"],"30599b72ecc4636f5738da2aadbc740848f86e67":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","e3e5cfcd920648fdd531192a41ad4087285aecc1","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"2553b00f699380c64959ccb27991289aae87be2e":[],"e3e5cfcd920648fdd531192a41ad4087285aecc1":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}