{"path":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter.MockIndexWriter#MockIndexWriter(Random,Directory,IndexWriterConfig).mjava","commits":[{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter.MockIndexWriter#MockIndexWriter(Random,Directory,IndexWriterConfig).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter.MockIndexWriter#MockIndexWriter(Random,Directory,IndexWriterConfig).mjava","sourceNew":"    public MockIndexWriter(Random r,Directory dir, IndexWriterConfig conf) throws IOException {\n      super(dir, conf);\n      // must make a private random since our methods are\n      // called from different threads; else test failures may\n      // not be reproducible from the original seed\n      this.r = new Random(r.nextInt());\n    }\n\n","sourceOld":"    public MockIndexWriter(Random r,Directory dir, IndexWriterConfig conf) throws IOException {\n      super(dir, conf);\n      // must make a private random since our methods are\n      // called from different threads; else test failures may\n      // not be reproducible from the original seed\n      this.r = new Random(r.nextInt());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter.MockIndexWriter#MockIndexWriter(Random,Directory,IndexWriterConfig).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter.MockIndexWriter#MockIndexWriter(Random,Directory,IndexWriterConfig).mjava","sourceNew":"    public MockIndexWriter(Random r,Directory dir, IndexWriterConfig conf) throws IOException {\n      super(dir, conf);\n      // must make a private random since our methods are\n      // called from different threads; else test failures may\n      // not be reproducible from the original seed\n      this.r = new Random(r.nextInt());\n    }\n\n","sourceOld":"    public MockIndexWriter(Random r,Directory dir, IndexWriterConfig conf) throws IOException {\n      super(dir, conf);\n      // must make a private random since our methods are\n      // called from different threads; else test failures may\n      // not be reproducible from the original seed\n      this.r = new Random(r.nextInt());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter.MockIndexWriter#MockIndexWriter(Random,Directory,IndexWriterConfig).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter.MockIndexWriter#MockIndexWriter(Random,Directory,IndexWriterConfig).mjava","sourceNew":"    public MockIndexWriter(Random r,Directory dir, IndexWriterConfig conf) throws IOException {\n      super(dir, conf);\n      // must make a private random since our methods are\n      // called from different threads; else test failures may\n      // not be reproducible from the original seed\n      this.r = new Random(r.nextInt());\n    }\n\n","sourceOld":"    public MockIndexWriter(Random r,Directory dir, IndexWriterConfig conf) throws IOException {\n      super(dir, conf);\n      // must make a private random since our methods are\n      // called from different threads; else test failures may\n      // not be reproducible from the original seed\n      this.r = new Random(r.nextInt());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0150c6e116b24d66f02d63fcb0758f336e8791e2","date":1307283797,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter.MockIndexWriter#MockIndexWriter(Random,Directory,IndexWriterConfig).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter.MockIndexWriter#MockIndexWriter(Random,Directory,IndexWriterConfig).mjava","sourceNew":"    public MockIndexWriter(Random r,Directory dir, IndexWriterConfig conf) throws IOException {\n      super(dir, conf);\n      // must make a private random since our methods are\n      // called from different threads; else test failures may\n      // not be reproducible from the original seed\n      this.r = new Random(r.nextInt());\n\n      if (r.nextBoolean()) {\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"NOTE: RIW ctor is setting new CodecProvider().copyFrom\");\n        }\n        // Just to test CP.copyFrom:\n        conf.setCodecProvider(new CodecProvider().copyFrom(conf.getCodecProvider()));\n      }\n    }\n\n","sourceOld":"    public MockIndexWriter(Random r,Directory dir, IndexWriterConfig conf) throws IOException {\n      super(dir, conf);\n      // must make a private random since our methods are\n      // called from different threads; else test failures may\n      // not be reproducible from the original seed\n      this.r = new Random(r.nextInt());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e3a8ce369ceb94bf000a72d53cee9dfdbaf0a23","date":1307284460,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter.MockIndexWriter#MockIndexWriter(Random,Directory,IndexWriterConfig).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter.MockIndexWriter#MockIndexWriter(Random,Directory,IndexWriterConfig).mjava","sourceNew":"    public MockIndexWriter(Random r,Directory dir, IndexWriterConfig conf) throws IOException {\n      super(dir, conf);\n      // must make a private random since our methods are\n      // called from different threads; else test failures may\n      // not be reproducible from the original seed\n      this.r = new Random(r.nextInt());\n    }\n\n","sourceOld":"    public MockIndexWriter(Random r,Directory dir, IndexWriterConfig conf) throws IOException {\n      super(dir, conf);\n      // must make a private random since our methods are\n      // called from different threads; else test failures may\n      // not be reproducible from the original seed\n      this.r = new Random(r.nextInt());\n\n      if (r.nextBoolean()) {\n        if (LuceneTestCase.VERBOSE) {\n          System.out.println(\"NOTE: RIW ctor is setting new CodecProvider().copyFrom\");\n        }\n        // Just to test CP.copyFrom:\n        conf.setCodecProvider(new CodecProvider().copyFrom(conf.getCodecProvider()));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter.MockIndexWriter#MockIndexWriter(Random,Directory,IndexWriterConfig).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter.MockIndexWriter#MockIndexWriter(Random,Directory,IndexWriterConfig).mjava","sourceNew":"    public MockIndexWriter(Random r, Directory dir, IndexWriterConfig conf) throws IOException {\n      super(dir, conf);\n      // must make a private random since our methods are\n      // called from different threads; else test failures may\n      // not be reproducible from the original seed\n      this.r = new Random(r.nextInt());\n    }\n\n","sourceOld":"    public MockIndexWriter(Random r,Directory dir, IndexWriterConfig conf) throws IOException {\n      super(dir, conf);\n      // must make a private random since our methods are\n      // called from different threads; else test failures may\n      // not be reproducible from the original seed\n      this.r = new Random(r.nextInt());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/index/RandomIndexWriter.MockIndexWriter#MockIndexWriter(Random,Directory,IndexWriterConfig).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter.MockIndexWriter#MockIndexWriter(Random,Directory,IndexWriterConfig).mjava","sourceNew":"    public MockIndexWriter(Random r, Directory dir, IndexWriterConfig conf) throws IOException {\n      super(dir, conf);\n      // must make a private random since our methods are\n      // called from different threads; else test failures may\n      // not be reproducible from the original seed\n      this.r = new Random(r.nextInt());\n    }\n\n","sourceOld":"    public MockIndexWriter(Random r, Directory dir, IndexWriterConfig conf) throws IOException {\n      super(dir, conf);\n      // must make a private random since our methods are\n      // called from different threads; else test failures may\n      // not be reproducible from the original seed\n      this.r = new Random(r.nextInt());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"7b91922b55d15444d554721b352861d028eb8278":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"4e3a8ce369ceb94bf000a72d53cee9dfdbaf0a23":["0150c6e116b24d66f02d63fcb0758f336e8791e2"],"0150c6e116b24d66f02d63fcb0758f336e8791e2":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["7b91922b55d15444d554721b352861d028eb8278"],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e3a8ce369ceb94bf000a72d53cee9dfdbaf0a23":[],"0150c6e116b24d66f02d63fcb0758f336e8791e2":["4e3a8ce369ceb94bf000a72d53cee9dfdbaf0a23"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["0150c6e116b24d66f02d63fcb0758f336e8791e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["60ba444201d2570214b6fcf1d15600dc1a01f548","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4e3a8ce369ceb94bf000a72d53cee9dfdbaf0a23","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}