{"path":"lucene/src/test/org/apache/lucene/util/TestArrayUtil#testMergeSortStability().mjava","commits":[{"id":"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b","date":1288192616,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestArrayUtil#testMergeSortStability().mjava","pathOld":"/dev/null","sourceNew":"  public void testMergeSortStability() {\n    Item[] items = new Item[100];\n    for (int i = 0; i < items.length; i++) {\n      // half of the items have value but same order. The value of this items is sorted,\n      // so they should always be in order after sorting.\n      // The other half has defined order, but no (-1) value (they should appear after\n      // all above, when sorted).\n      final boolean equal = random.nextBoolean();\n      items[i] = new Item(equal ? (i+1) : -1, equal ? 0 : (random.nextInt(1000)+1));\n    }\n    \n    if (VERBOSE) System.out.println(\"Before: \" + Arrays.toString(items));\n    // if you replace this with ArrayUtil.quickSort(), test should fail:\n    ArrayUtil.mergeSort(items);\n    if (VERBOSE) System.out.println(\"Sorted: \" + Arrays.toString(items));\n    \n    Item last = items[0];\n    for (int i = 1; i < items.length; i++) {\n      final Item act = items[i];\n      if (act.order == 0) {\n        // order of \"equal\" items should be not mixed up\n        assertTrue(act.val > last.val);\n      }\n      assertTrue(act.order >= last.order);\n      last = act;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d","date":1288424244,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestArrayUtil#testMergeSortStability().mjava","pathOld":"/dev/null","sourceNew":"  public void testMergeSortStability() {\n    Item[] items = new Item[100];\n    for (int i = 0; i < items.length; i++) {\n      // half of the items have value but same order. The value of this items is sorted,\n      // so they should always be in order after sorting.\n      // The other half has defined order, but no (-1) value (they should appear after\n      // all above, when sorted).\n      final boolean equal = random.nextBoolean();\n      items[i] = new Item(equal ? (i+1) : -1, equal ? 0 : (random.nextInt(1000)+1));\n    }\n    \n    if (VERBOSE) System.out.println(\"Before: \" + Arrays.toString(items));\n    // if you replace this with ArrayUtil.quickSort(), test should fail:\n    ArrayUtil.mergeSort(items);\n    if (VERBOSE) System.out.println(\"Sorted: \" + Arrays.toString(items));\n    \n    Item last = items[0];\n    for (int i = 1; i < items.length; i++) {\n      final Item act = items[i];\n      if (act.order == 0) {\n        // order of \"equal\" items should be not mixed up\n        assertTrue(act.val > last.val);\n      }\n      assertTrue(act.order >= last.order);\n      last = act;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestArrayUtil#testMergeSortStability().mjava","pathOld":"/dev/null","sourceNew":"  public void testMergeSortStability() {\n    Item[] items = new Item[100];\n    for (int i = 0; i < items.length; i++) {\n      // half of the items have value but same order. The value of this items is sorted,\n      // so they should always be in order after sorting.\n      // The other half has defined order, but no (-1) value (they should appear after\n      // all above, when sorted).\n      final boolean equal = random.nextBoolean();\n      items[i] = new Item(equal ? (i+1) : -1, equal ? 0 : (random.nextInt(1000)+1));\n    }\n    \n    if (VERBOSE) System.out.println(\"Before: \" + Arrays.toString(items));\n    // if you replace this with ArrayUtil.quickSort(), test should fail:\n    ArrayUtil.mergeSort(items);\n    if (VERBOSE) System.out.println(\"Sorted: \" + Arrays.toString(items));\n    \n    Item last = items[0];\n    for (int i = 1; i < items.length; i++) {\n      final Item act = items[i];\n      if (act.order == 0) {\n        // order of \"equal\" items should be not mixed up\n        assertTrue(act.val > last.val);\n      }\n      assertTrue(act.order >= last.order);\n      last = act;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestArrayUtil#testMergeSortStability().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestArrayUtil#testMergeSortStability().mjava","sourceNew":"  public void testMergeSortStability() {\n    Item[] items = new Item[100];\n    for (int i = 0; i < items.length; i++) {\n      // half of the items have value but same order. The value of this items is sorted,\n      // so they should always be in order after sorting.\n      // The other half has defined order, but no (-1) value (they should appear after\n      // all above, when sorted).\n      final boolean equal = random.nextBoolean();\n      items[i] = new Item(equal ? (i+1) : -1, equal ? 0 : (random.nextInt(1000)+1));\n    }\n    \n    if (VERBOSE) System.out.println(\"Before: \" + Arrays.toString(items));\n    // if you replace this with ArrayUtil.quickSort(), test should fail:\n    ArrayUtil.mergeSort(items);\n    if (VERBOSE) System.out.println(\"Sorted: \" + Arrays.toString(items));\n    \n    Item last = items[0];\n    for (int i = 1; i < items.length; i++) {\n      final Item act = items[i];\n      if (act.order == 0) {\n        // order of \"equal\" items should be not mixed up\n        assertTrue(act.val > last.val);\n      }\n      assertTrue(act.order >= last.order);\n      last = act;\n    }\n  }\n\n","sourceOld":"  public void testMergeSortStability() {\n    Item[] items = new Item[100];\n    for (int i = 0; i < items.length; i++) {\n      // half of the items have value but same order. The value of this items is sorted,\n      // so they should always be in order after sorting.\n      // The other half has defined order, but no (-1) value (they should appear after\n      // all above, when sorted).\n      final boolean equal = random.nextBoolean();\n      items[i] = new Item(equal ? (i+1) : -1, equal ? 0 : (random.nextInt(1000)+1));\n    }\n    \n    if (VERBOSE) System.out.println(\"Before: \" + Arrays.toString(items));\n    // if you replace this with ArrayUtil.quickSort(), test should fail:\n    ArrayUtil.mergeSort(items);\n    if (VERBOSE) System.out.println(\"Sorted: \" + Arrays.toString(items));\n    \n    Item last = items[0];\n    for (int i = 1; i < items.length; i++) {\n      final Item act = items[i];\n      if (act.order == 0) {\n        // order of \"equal\" items should be not mixed up\n        assertTrue(act.val > last.val);\n      }\n      assertTrue(act.order >= last.order);\n      last = act;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}