{"path":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","commits":[{"id":"d7052f725a053aa55424f966831826f61b798bf1","date":1158258681,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","pathOld":"/dev/null","sourceNew":"  private void checkInvariants(IndexWriter writer) {\n    int maxBufferedDocs = writer.getMaxBufferedDocs();\n    int mergeFactor = writer.getMergeFactor();\n    int maxMergeDocs = writer.getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getRAMSegmentCount();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = 0;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        segmentCount++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(numSegments < mergeFactor);\n        }\n\n        lowerBound = upperBound;\n        upperBound *= mergeFactor;\n        segmentCount = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db98d4535286b6e306e0cf1d1d4bfff5933fdc3c","date":1158614762,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","sourceNew":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    int maxBufferedDocs = writer.getMaxBufferedDocs();\n    int mergeFactor = writer.getMergeFactor();\n    int maxMergeDocs = writer.getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getRAMSegmentCount();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = 0;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(docCount > lowerBound || docCount == 0);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(numSegments < mergeFactor);\n        }\n\n        lowerBound = upperBound;\n        upperBound *= mergeFactor;\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n\n    String[] files = writer.getDirectory().list();\n    int segmentCfsCount = 0;\n    for (int i = 0; i < files.length; i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        segmentCfsCount++;\n      }\n    }\n    assertEquals(segmentCount, segmentCfsCount);\n  }\n\n","sourceOld":"  private void checkInvariants(IndexWriter writer) {\n    int maxBufferedDocs = writer.getMaxBufferedDocs();\n    int mergeFactor = writer.getMergeFactor();\n    int maxMergeDocs = writer.getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getRAMSegmentCount();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = 0;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        segmentCount++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(numSegments < mergeFactor);\n        }\n\n        lowerBound = upperBound;\n        upperBound *= mergeFactor;\n        segmentCount = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n  }\n\n","bugFix":null,"bugIntro":["8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5","4d3e8520fd031bab31fd0e4d480e55958bc45efe","d54c7739bfe85d68f0352823cd70c10c619fad38"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"938d1493cf2f269d3b9e66e932c07ee784e00022","date":1161902835,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","sourceNew":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    int maxBufferedDocs = writer.getMaxBufferedDocs();\n    int mergeFactor = writer.getMergeFactor();\n    int maxMergeDocs = writer.getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getRAMSegmentCount();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n\n    String[] files = writer.getDirectory().list();\n    int segmentCfsCount = 0;\n    for (int i = 0; i < files.length; i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        segmentCfsCount++;\n      }\n    }\n    assertEquals(segmentCount, segmentCfsCount);\n  }\n\n","sourceOld":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    int maxBufferedDocs = writer.getMaxBufferedDocs();\n    int mergeFactor = writer.getMergeFactor();\n    int maxMergeDocs = writer.getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getRAMSegmentCount();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = 0;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(docCount > lowerBound || docCount == 0);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(numSegments < mergeFactor);\n        }\n\n        lowerBound = upperBound;\n        upperBound *= mergeFactor;\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n\n    String[] files = writer.getDirectory().list();\n    int segmentCfsCount = 0;\n    for (int i = 0; i < files.length; i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        segmentCfsCount++;\n      }\n    }\n    assertEquals(segmentCount, segmentCfsCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"42a18cb0bca2c4ac9747f31c7a74fac90c661f39","date":1171363388,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","sourceNew":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    int maxBufferedDocs = writer.getMaxBufferedDocs();\n    int mergeFactor = writer.getMergeFactor();\n    int maxMergeDocs = writer.getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getRamSegmentCount();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n\n    String[] files = writer.getDirectory().list();\n    int segmentCfsCount = 0;\n    for (int i = 0; i < files.length; i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        segmentCfsCount++;\n      }\n    }\n    assertEquals(segmentCount, segmentCfsCount);\n  }\n\n","sourceOld":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    int maxBufferedDocs = writer.getMaxBufferedDocs();\n    int mergeFactor = writer.getMergeFactor();\n    int maxMergeDocs = writer.getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getRAMSegmentCount();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n\n    String[] files = writer.getDirectory().list();\n    int segmentCfsCount = 0;\n    for (int i = 0; i < files.length; i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        segmentCfsCount++;\n      }\n    }\n    assertEquals(segmentCount, segmentCfsCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","sourceNew":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    int maxBufferedDocs = writer.getMaxBufferedDocs();\n    int mergeFactor = writer.getMergeFactor();\n    int maxMergeDocs = writer.getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n\n    String[] files = writer.getDirectory().list();\n    int segmentCfsCount = 0;\n    for (int i = 0; i < files.length; i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        segmentCfsCount++;\n      }\n    }\n    assertEquals(segmentCount, segmentCfsCount);\n  }\n\n","sourceOld":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    int maxBufferedDocs = writer.getMaxBufferedDocs();\n    int mergeFactor = writer.getMergeFactor();\n    int maxMergeDocs = writer.getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getRamSegmentCount();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n\n    String[] files = writer.getDirectory().list();\n    int segmentCfsCount = 0;\n    for (int i = 0; i < files.length; i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        segmentCfsCount++;\n      }\n    }\n    assertEquals(segmentCount, segmentCfsCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b1405362241b561f5590ff4a87d5d6e173bcd9cf","date":1190107634,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","sourceNew":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    _TestUtil.syncConcurrentMerges(writer);\n    int maxBufferedDocs = writer.getMaxBufferedDocs();\n    int mergeFactor = writer.getMergeFactor();\n    int maxMergeDocs = writer.getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n\n    String[] files = writer.getDirectory().list();\n    int segmentCfsCount = 0;\n    for (int i = 0; i < files.length; i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        segmentCfsCount++;\n      }\n    }\n    assertEquals(segmentCount, segmentCfsCount);\n  }\n\n","sourceOld":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    int maxBufferedDocs = writer.getMaxBufferedDocs();\n    int mergeFactor = writer.getMergeFactor();\n    int maxMergeDocs = writer.getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n\n    String[] files = writer.getDirectory().list();\n    int segmentCfsCount = 0;\n    for (int i = 0; i < files.length; i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        segmentCfsCount++;\n      }\n    }\n    assertEquals(segmentCount, segmentCfsCount);\n  }\n\n","bugFix":null,"bugIntro":["8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d54c7739bfe85d68f0352823cd70c10c619fad38","date":1228496593,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","sourceNew":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    _TestUtil.syncConcurrentMerges(writer);\n    int maxBufferedDocs = writer.getMaxBufferedDocs();\n    int mergeFactor = writer.getMergeFactor();\n    int maxMergeDocs = writer.getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n\n    String[] files = writer.getDirectory().listAll();\n    int segmentCfsCount = 0;\n    for (int i = 0; i < files.length; i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        segmentCfsCount++;\n      }\n    }\n    assertEquals(segmentCount, segmentCfsCount);\n  }\n\n","sourceOld":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    _TestUtil.syncConcurrentMerges(writer);\n    int maxBufferedDocs = writer.getMaxBufferedDocs();\n    int mergeFactor = writer.getMergeFactor();\n    int maxMergeDocs = writer.getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n\n    String[] files = writer.getDirectory().list();\n    int segmentCfsCount = 0;\n    for (int i = 0; i < files.length; i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        segmentCfsCount++;\n      }\n    }\n    assertEquals(segmentCount, segmentCfsCount);\n  }\n\n","bugFix":["db98d4535286b6e306e0cf1d1d4bfff5933fdc3c"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0b61705e8b6f53166be23f1116da516414af3a8d","date":1258107048,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","sourceNew":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    _TestUtil.syncConcurrentMerges(writer);\n    int maxBufferedDocs = writer.getMaxBufferedDocs();\n    int mergeFactor = writer.getMergeFactor();\n    int maxMergeDocs = writer.getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"numSegments=\" + numSegments + \" vs mergeFactor=\" + mergeFactor, numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n\n    String[] files = writer.getDirectory().listAll();\n    int segmentCfsCount = 0;\n    for (int i = 0; i < files.length; i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        segmentCfsCount++;\n      }\n    }\n    assertEquals(segmentCount, segmentCfsCount);\n  }\n\n","sourceOld":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    _TestUtil.syncConcurrentMerges(writer);\n    int maxBufferedDocs = writer.getMaxBufferedDocs();\n    int mergeFactor = writer.getMergeFactor();\n    int maxMergeDocs = writer.getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n\n    String[] files = writer.getDirectory().listAll();\n    int segmentCfsCount = 0;\n    for (int i = 0; i < files.length; i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        segmentCfsCount++;\n      }\n    }\n    assertEquals(segmentCount, segmentCfsCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bfbd9d539d7a8e4ddb09e4ee8ef7f1a6cedaecba","date":1258109808,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","sourceNew":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    _TestUtil.syncConcurrentMerges(writer);\n    int maxBufferedDocs = writer.getMaxBufferedDocs();\n    int mergeFactor = writer.getMergeFactor();\n    int maxMergeDocs = writer.getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor, numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n\n    String[] files = writer.getDirectory().listAll();\n    int segmentCfsCount = 0;\n    for (int i = 0; i < files.length; i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        segmentCfsCount++;\n      }\n    }\n    assertEquals(segmentCount, segmentCfsCount);\n  }\n\n","sourceOld":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    _TestUtil.syncConcurrentMerges(writer);\n    int maxBufferedDocs = writer.getMaxBufferedDocs();\n    int mergeFactor = writer.getMergeFactor();\n    int maxMergeDocs = writer.getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"numSegments=\" + numSegments + \" vs mergeFactor=\" + mergeFactor, numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n\n    String[] files = writer.getDirectory().listAll();\n    int segmentCfsCount = 0;\n    for (int i = 0; i < files.length; i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        segmentCfsCount++;\n      }\n    }\n    assertEquals(segmentCount, segmentCfsCount);\n  }\n\n","bugFix":null,"bugIntro":["9588f5ef5717062545e97a3d61da71f182f10b5c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9588f5ef5717062545e97a3d61da71f182f10b5c","date":1260717217,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","sourceNew":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    _TestUtil.syncConcurrentMerges(writer);\n    int maxBufferedDocs = writer.getMaxBufferedDocs();\n    int mergeFactor = writer.getMergeFactor();\n    int maxMergeDocs = writer.getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n\n    String[] files = writer.getDirectory().listAll();\n    int segmentCfsCount = 0;\n    for (int i = 0; i < files.length; i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        segmentCfsCount++;\n      }\n    }\n    assertEquals(segmentCount, segmentCfsCount);\n  }\n\n","sourceOld":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    _TestUtil.syncConcurrentMerges(writer);\n    int maxBufferedDocs = writer.getMaxBufferedDocs();\n    int mergeFactor = writer.getMergeFactor();\n    int maxMergeDocs = writer.getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor, numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n\n    String[] files = writer.getDirectory().listAll();\n    int segmentCfsCount = 0;\n    for (int i = 0; i < files.length; i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        segmentCfsCount++;\n      }\n    }\n    assertEquals(segmentCount, segmentCfsCount);\n  }\n\n","bugFix":["bfbd9d539d7a8e4ddb09e4ee8ef7f1a6cedaecba"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","sourceNew":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    _TestUtil.syncConcurrentMerges(writer);\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n\n    String[] files = writer.getDirectory().listAll();\n    int segmentCfsCount = 0;\n    for (int i = 0; i < files.length; i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        segmentCfsCount++;\n      }\n    }\n    assertEquals(segmentCount, segmentCfsCount);\n  }\n\n","sourceOld":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    _TestUtil.syncConcurrentMerges(writer);\n    int maxBufferedDocs = writer.getMaxBufferedDocs();\n    int mergeFactor = writer.getMergeFactor();\n    int maxMergeDocs = writer.getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n\n    String[] files = writer.getDirectory().listAll();\n    int segmentCfsCount = 0;\n    for (int i = 0; i < files.length; i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        segmentCfsCount++;\n      }\n    }\n    assertEquals(segmentCount, segmentCfsCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","sourceNew":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    _TestUtil.syncConcurrentMerges(writer);\n    int maxBufferedDocs = writer.getMaxBufferedDocs();\n    int mergeFactor = writer.getMergeFactor();\n    int maxMergeDocs = writer.getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n\n    String[] files = writer.getDirectory().listAll();\n    int segmentCfsCount = 0;\n    for (int i = 0; i < files.length; i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        segmentCfsCount++;\n      }\n    }\n    assertEquals(segmentCount, segmentCfsCount);\n  }\n\n","sourceOld":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    _TestUtil.syncConcurrentMerges(writer);\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n\n    String[] files = writer.getDirectory().listAll();\n    int segmentCfsCount = 0;\n    for (int i = 0; i < files.length; i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        segmentCfsCount++;\n      }\n    }\n    assertEquals(segmentCount, segmentCfsCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","sourceNew":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    _TestUtil.syncConcurrentMerges(writer);\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n\n    String[] files = writer.getDirectory().listAll();\n    int segmentCfsCount = 0;\n    for (int i = 0; i < files.length; i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        segmentCfsCount++;\n      }\n    }\n    assertEquals(segmentCount, segmentCfsCount);\n  }\n\n","sourceOld":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    _TestUtil.syncConcurrentMerges(writer);\n    int maxBufferedDocs = writer.getMaxBufferedDocs();\n    int mergeFactor = writer.getMergeFactor();\n    int maxMergeDocs = writer.getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n\n    String[] files = writer.getDirectory().listAll();\n    int segmentCfsCount = 0;\n    for (int i = 0; i < files.length; i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        segmentCfsCount++;\n      }\n    }\n    assertEquals(segmentCount, segmentCfsCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#checkInvariants(IndexWriter).mjava","sourceNew":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    _TestUtil.syncConcurrentMerges(writer);\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n\n    String[] files = writer.getDirectory().listAll();\n    int segmentCfsCount = 0;\n    for (int i = 0; i < files.length; i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        segmentCfsCount++;\n      }\n    }\n    assertEquals(segmentCount, segmentCfsCount);\n  }\n\n","sourceOld":"  private void checkInvariants(IndexWriter writer) throws IOException {\n    _TestUtil.syncConcurrentMerges(writer);\n    int maxBufferedDocs = writer.getConfig().getMaxBufferedDocs();\n    int mergeFactor = ((LogMergePolicy) writer.getMergePolicy()).getMergeFactor();\n    int maxMergeDocs = ((LogMergePolicy) writer.getMergePolicy()).getMaxMergeDocs();\n\n    int ramSegmentCount = writer.getNumBufferedDocuments();\n    assertTrue(ramSegmentCount < maxBufferedDocs);\n\n    int lowerBound = -1;\n    int upperBound = maxBufferedDocs;\n    int numSegments = 0;\n\n    int segmentCount = writer.getSegmentCount();\n    for (int i = segmentCount - 1; i >= 0; i--) {\n      int docCount = writer.getDocCount(i);\n      assertTrue(docCount > lowerBound);\n\n      if (docCount <= upperBound) {\n        numSegments++;\n      } else {\n        if (upperBound * mergeFactor <= maxMergeDocs) {\n          assertTrue(\"maxMergeDocs=\" + maxMergeDocs + \"; numSegments=\" + numSegments + \"; upperBound=\" + upperBound + \"; mergeFactor=\" + mergeFactor + \"; segs=\" + writer.segString(), numSegments < mergeFactor);\n        }\n\n        do {\n          lowerBound = upperBound;\n          upperBound *= mergeFactor;\n        } while (docCount > upperBound);\n        numSegments = 1;\n      }\n    }\n    if (upperBound * mergeFactor <= maxMergeDocs) {\n      assertTrue(numSegments < mergeFactor);\n    }\n\n    String[] files = writer.getDirectory().listAll();\n    int segmentCfsCount = 0;\n    for (int i = 0; i < files.length; i++) {\n      if (files[i].endsWith(\".cfs\")) {\n        segmentCfsCount++;\n      }\n    }\n    assertEquals(segmentCount, segmentCfsCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d7052f725a053aa55424f966831826f61b798bf1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0b61705e8b6f53166be23f1116da516414af3a8d":["d54c7739bfe85d68f0352823cd70c10c619fad38"],"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"db98d4535286b6e306e0cf1d1d4bfff5933fdc3c":["d7052f725a053aa55424f966831826f61b798bf1"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["9588f5ef5717062545e97a3d61da71f182f10b5c"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"bfbd9d539d7a8e4ddb09e4ee8ef7f1a6cedaecba":["0b61705e8b6f53166be23f1116da516414af3a8d"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["42a18cb0bca2c4ac9747f31c7a74fac90c661f39"],"d54c7739bfe85d68f0352823cd70c10c619fad38":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"42a18cb0bca2c4ac9747f31c7a74fac90c661f39":["938d1493cf2f269d3b9e66e932c07ee784e00022"],"938d1493cf2f269d3b9e66e932c07ee784e00022":["db98d4535286b6e306e0cf1d1d4bfff5933fdc3c"],"9588f5ef5717062545e97a3d61da71f182f10b5c":["bfbd9d539d7a8e4ddb09e4ee8ef7f1a6cedaecba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"d7052f725a053aa55424f966831826f61b798bf1":["db98d4535286b6e306e0cf1d1d4bfff5933fdc3c"],"0b61705e8b6f53166be23f1116da516414af3a8d":["bfbd9d539d7a8e4ddb09e4ee8ef7f1a6cedaecba"],"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["d54c7739bfe85d68f0352823cd70c10c619fad38"],"db98d4535286b6e306e0cf1d1d4bfff5933fdc3c":["938d1493cf2f269d3b9e66e932c07ee784e00022"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"bfbd9d539d7a8e4ddb09e4ee8ef7f1a6cedaecba":["9588f5ef5717062545e97a3d61da71f182f10b5c"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"d54c7739bfe85d68f0352823cd70c10c619fad38":["0b61705e8b6f53166be23f1116da516414af3a8d"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"42a18cb0bca2c4ac9747f31c7a74fac90c661f39":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"938d1493cf2f269d3b9e66e932c07ee784e00022":["42a18cb0bca2c4ac9747f31c7a74fac90c661f39"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d7052f725a053aa55424f966831826f61b798bf1"],"9588f5ef5717062545e97a3d61da71f182f10b5c":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}