{"path":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#init(IndexSchema,Map[String,String]).mjava","commits":[{"id":"f107636c2cc82350a2607d774c092da5b73152e5","date":1498227268,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#init(IndexSchema,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    if (this.isMultiValued()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          getClass().getSimpleName() + \" types can not be multiValued: \" + this.typeName);\n    }\n    this.schema = schema;\n\n    this.defaultCurrency = args.get(PARAM_DEFAULT_CURRENCY);\n    if (this.defaultCurrency == null) {\n      this.defaultCurrency = DEFAULT_DEFAULT_CURRENCY;\n    } else {\n      args.remove(PARAM_DEFAULT_CURRENCY);\n    }\n    if (null == getCurrency(this.defaultCurrency)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Default currency code is not supported by this JVM: \" + this.defaultCurrency);\n    }\n\n    this.exchangeRateProviderClass = args.get(PARAM_RATE_PROVIDER_CLASS);\n    if (this.exchangeRateProviderClass == null) {\n      this.exchangeRateProviderClass = DEFAULT_RATE_PROVIDER_CLASS;\n    } else {\n      args.remove(PARAM_RATE_PROVIDER_CLASS);\n    }\n    try {\n      Class<? extends ExchangeRateProvider> c\n          = schema.getResourceLoader().findClass(exchangeRateProviderClass, ExchangeRateProvider.class);\n      provider = c.newInstance();\n      provider.init(args);\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error instantiating exchange rate provider \" + exchangeRateProviderClass + \": \" + e.getMessage(), e);\n    }\n\n    if (fieldTypeAmountRaw == null) {      // Don't initialize if subclass already has done so\n      fieldSuffixAmountRaw = args.get(PARAM_FIELD_SUFFIX_AMOUNT_RAW);\n      if (fieldSuffixAmountRaw == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Missing required param \" + PARAM_FIELD_SUFFIX_AMOUNT_RAW);\n      } else {\n        args.remove(PARAM_FIELD_SUFFIX_AMOUNT_RAW);\n      }\n    }\n    \n    if (fieldTypeCurrency == null) {       // Don't initialize if subclass already has done so\n      fieldSuffixCurrency = args.get(PARAM_FIELD_SUFFIX_CURRENCY);\n      if (fieldSuffixCurrency == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Missing required param \" + PARAM_FIELD_SUFFIX_CURRENCY);\n      } else {\n        args.remove(PARAM_FIELD_SUFFIX_CURRENCY);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#init(IndexSchema,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    if (this.isMultiValued()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          getClass().getSimpleName() + \" types can not be multiValued: \" + this.typeName);\n    }\n    this.schema = schema;\n\n    this.defaultCurrency = args.get(PARAM_DEFAULT_CURRENCY);\n    if (this.defaultCurrency == null) {\n      this.defaultCurrency = DEFAULT_DEFAULT_CURRENCY;\n    } else {\n      args.remove(PARAM_DEFAULT_CURRENCY);\n    }\n    if (null == getCurrency(this.defaultCurrency)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Default currency code is not supported by this JVM: \" + this.defaultCurrency);\n    }\n\n    this.exchangeRateProviderClass = args.get(PARAM_RATE_PROVIDER_CLASS);\n    if (this.exchangeRateProviderClass == null) {\n      this.exchangeRateProviderClass = DEFAULT_RATE_PROVIDER_CLASS;\n    } else {\n      args.remove(PARAM_RATE_PROVIDER_CLASS);\n    }\n    try {\n      Class<? extends ExchangeRateProvider> c\n          = schema.getResourceLoader().findClass(exchangeRateProviderClass, ExchangeRateProvider.class);\n      provider = c.newInstance();\n      provider.init(args);\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error instantiating exchange rate provider \" + exchangeRateProviderClass + \": \" + e.getMessage(), e);\n    }\n\n    if (fieldTypeAmountRaw == null) {      // Don't initialize if subclass already has done so\n      fieldSuffixAmountRaw = args.get(PARAM_FIELD_SUFFIX_AMOUNT_RAW);\n      if (fieldSuffixAmountRaw == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Missing required param \" + PARAM_FIELD_SUFFIX_AMOUNT_RAW);\n      } else {\n        args.remove(PARAM_FIELD_SUFFIX_AMOUNT_RAW);\n      }\n    }\n    \n    if (fieldTypeCurrency == null) {       // Don't initialize if subclass already has done so\n      fieldSuffixCurrency = args.get(PARAM_FIELD_SUFFIX_CURRENCY);\n      if (fieldSuffixCurrency == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Missing required param \" + PARAM_FIELD_SUFFIX_CURRENCY);\n      } else {\n        args.remove(PARAM_FIELD_SUFFIX_CURRENCY);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#init(IndexSchema,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    if (this.isMultiValued()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          getClass().getSimpleName() + \" types can not be multiValued: \" + this.typeName);\n    }\n    this.schema = schema;\n\n    this.defaultCurrency = args.get(PARAM_DEFAULT_CURRENCY);\n    if (this.defaultCurrency == null) {\n      this.defaultCurrency = DEFAULT_DEFAULT_CURRENCY;\n    } else {\n      args.remove(PARAM_DEFAULT_CURRENCY);\n    }\n    if (null == getCurrency(this.defaultCurrency)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Default currency code is not supported by this JVM: \" + this.defaultCurrency);\n    }\n\n    this.exchangeRateProviderClass = args.get(PARAM_RATE_PROVIDER_CLASS);\n    if (this.exchangeRateProviderClass == null) {\n      this.exchangeRateProviderClass = DEFAULT_RATE_PROVIDER_CLASS;\n    } else {\n      args.remove(PARAM_RATE_PROVIDER_CLASS);\n    }\n    try {\n      Class<? extends ExchangeRateProvider> c\n          = schema.getResourceLoader().findClass(exchangeRateProviderClass, ExchangeRateProvider.class);\n      provider = c.newInstance();\n      provider.init(args);\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error instantiating exchange rate provider \" + exchangeRateProviderClass + \": \" + e.getMessage(), e);\n    }\n\n    if (fieldTypeAmountRaw == null) {      // Don't initialize if subclass already has done so\n      fieldSuffixAmountRaw = args.get(PARAM_FIELD_SUFFIX_AMOUNT_RAW);\n      if (fieldSuffixAmountRaw == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Missing required param \" + PARAM_FIELD_SUFFIX_AMOUNT_RAW);\n      } else {\n        args.remove(PARAM_FIELD_SUFFIX_AMOUNT_RAW);\n      }\n    }\n    \n    if (fieldTypeCurrency == null) {       // Don't initialize if subclass already has done so\n      fieldSuffixCurrency = args.get(PARAM_FIELD_SUFFIX_CURRENCY);\n      if (fieldSuffixCurrency == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Missing required param \" + PARAM_FIELD_SUFFIX_CURRENCY);\n      } else {\n        args.remove(PARAM_FIELD_SUFFIX_CURRENCY);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    if (this.isMultiValued()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          getClass().getSimpleName() + \" types can not be multiValued: \" + this.typeName);\n    }\n    this.schema = schema;\n\n    this.defaultCurrency = args.get(PARAM_DEFAULT_CURRENCY);\n    if (this.defaultCurrency == null) {\n      this.defaultCurrency = DEFAULT_DEFAULT_CURRENCY;\n    } else {\n      args.remove(PARAM_DEFAULT_CURRENCY);\n    }\n    if (null == getCurrency(this.defaultCurrency)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Default currency code is not supported by this JVM: \" + this.defaultCurrency);\n    }\n\n    this.exchangeRateProviderClass = args.get(PARAM_RATE_PROVIDER_CLASS);\n    if (this.exchangeRateProviderClass == null) {\n      this.exchangeRateProviderClass = DEFAULT_RATE_PROVIDER_CLASS;\n    } else {\n      args.remove(PARAM_RATE_PROVIDER_CLASS);\n    }\n    try {\n      Class<? extends ExchangeRateProvider> c\n          = schema.getResourceLoader().findClass(exchangeRateProviderClass, ExchangeRateProvider.class);\n      provider = c.getConstructor().newInstance();\n      provider.init(args);\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error instantiating exchange rate provider \" + exchangeRateProviderClass + \": \" + e.getMessage(), e);\n    }\n\n    if (fieldTypeAmountRaw == null) {      // Don't initialize if subclass already has done so\n      fieldSuffixAmountRaw = args.get(PARAM_FIELD_SUFFIX_AMOUNT_RAW);\n      if (fieldSuffixAmountRaw == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Missing required param \" + PARAM_FIELD_SUFFIX_AMOUNT_RAW);\n      } else {\n        args.remove(PARAM_FIELD_SUFFIX_AMOUNT_RAW);\n      }\n    }\n    \n    if (fieldTypeCurrency == null) {       // Don't initialize if subclass already has done so\n      fieldSuffixCurrency = args.get(PARAM_FIELD_SUFFIX_CURRENCY);\n      if (fieldSuffixCurrency == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Missing required param \" + PARAM_FIELD_SUFFIX_CURRENCY);\n      } else {\n        args.remove(PARAM_FIELD_SUFFIX_CURRENCY);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    if (this.isMultiValued()) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          getClass().getSimpleName() + \" types can not be multiValued: \" + this.typeName);\n    }\n    this.schema = schema;\n\n    this.defaultCurrency = args.get(PARAM_DEFAULT_CURRENCY);\n    if (this.defaultCurrency == null) {\n      this.defaultCurrency = DEFAULT_DEFAULT_CURRENCY;\n    } else {\n      args.remove(PARAM_DEFAULT_CURRENCY);\n    }\n    if (null == getCurrency(this.defaultCurrency)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Default currency code is not supported by this JVM: \" + this.defaultCurrency);\n    }\n\n    this.exchangeRateProviderClass = args.get(PARAM_RATE_PROVIDER_CLASS);\n    if (this.exchangeRateProviderClass == null) {\n      this.exchangeRateProviderClass = DEFAULT_RATE_PROVIDER_CLASS;\n    } else {\n      args.remove(PARAM_RATE_PROVIDER_CLASS);\n    }\n    try {\n      Class<? extends ExchangeRateProvider> c\n          = schema.getResourceLoader().findClass(exchangeRateProviderClass, ExchangeRateProvider.class);\n      provider = c.newInstance();\n      provider.init(args);\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\n          \"Error instantiating exchange rate provider \" + exchangeRateProviderClass + \": \" + e.getMessage(), e);\n    }\n\n    if (fieldTypeAmountRaw == null) {      // Don't initialize if subclass already has done so\n      fieldSuffixAmountRaw = args.get(PARAM_FIELD_SUFFIX_AMOUNT_RAW);\n      if (fieldSuffixAmountRaw == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Missing required param \" + PARAM_FIELD_SUFFIX_AMOUNT_RAW);\n      } else {\n        args.remove(PARAM_FIELD_SUFFIX_AMOUNT_RAW);\n      }\n    }\n    \n    if (fieldTypeCurrency == null) {       // Don't initialize if subclass already has done so\n      fieldSuffixCurrency = args.get(PARAM_FIELD_SUFFIX_CURRENCY);\n      if (fieldSuffixCurrency == null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Missing required param \" + PARAM_FIELD_SUFFIX_CURRENCY);\n      } else {\n        args.remove(PARAM_FIELD_SUFFIX_CURRENCY);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f107636c2cc82350a2607d774c092da5b73152e5"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f107636c2cc82350a2607d774c092da5b73152e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"f107636c2cc82350a2607d774c092da5b73152e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","f107636c2cc82350a2607d774c092da5b73152e5"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"f107636c2cc82350a2607d774c092da5b73152e5":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}