{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","commits":[{"id":"1ebcfbd9662f54e73fdfe1f4d675ea39531fb9b0","date":1174485154,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","pathOld":"/dev/null","sourceNew":"  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = (Analyzer) Class.forName(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\")).newInstance();\n    String defaultField = config.get(\"file.query.maker.default.field\", \"body\");\n    QueryParser qp = new QueryParser(defaultField, anlzr);\n\n    List qq = new ArrayList();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      if (file != null && file.exists())\n      {\n        reader = new FileReader(file);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = new InputStreamReader(asStream);\n        }\n      }\n      if (reader != null) {\n        BufferedReader buffered = new BufferedReader(reader);\n        String line = null;\n        int lineNum = 0;\n        while ((line = buffered.readLine()) != null)\n        {\n          line = line.trim();\n          if (!line.equals(\"\") && !line.startsWith(\"#\"))\n          {\n            Query query = null;\n            try {\n              query = qp.parse(line);\n            } catch (ParseException e) {\n              System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n            }\n            qq.add(query);\n          }\n          lineNum++;\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n    }\n    Query [] result = (Query[]) qq.toArray(new Query[qq.size()]) ;\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c528d38c8d9b2452e932321931b11e7c19a96d5","date":1185353698,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","sourceNew":"  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = (Analyzer) Class.forName(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\")).newInstance();\n    String defaultField = config.get(\"file.query.maker.default.field\", BasicDocMaker.BODY_FIELD);\n    QueryParser qp = new QueryParser(defaultField, anlzr);\n\n    List qq = new ArrayList();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      if (file != null && file.exists())\n      {\n        reader = new FileReader(file);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = new InputStreamReader(asStream);\n        }\n      }\n      if (reader != null) {\n        BufferedReader buffered = new BufferedReader(reader);\n        String line = null;\n        int lineNum = 0;\n        while ((line = buffered.readLine()) != null)\n        {\n          line = line.trim();\n          if (!line.equals(\"\") && !line.startsWith(\"#\"))\n          {\n            Query query = null;\n            try {\n              query = qp.parse(line);\n            } catch (ParseException e) {\n              System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n            }\n            qq.add(query);\n          }\n          lineNum++;\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n    }\n    Query [] result = (Query[]) qq.toArray(new Query[qq.size()]) ;\n    return result;\n  }\n\n","sourceOld":"  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = (Analyzer) Class.forName(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\")).newInstance();\n    String defaultField = config.get(\"file.query.maker.default.field\", \"body\");\n    QueryParser qp = new QueryParser(defaultField, anlzr);\n\n    List qq = new ArrayList();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      if (file != null && file.exists())\n      {\n        reader = new FileReader(file);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = new InputStreamReader(asStream);\n        }\n      }\n      if (reader != null) {\n        BufferedReader buffered = new BufferedReader(reader);\n        String line = null;\n        int lineNum = 0;\n        while ((line = buffered.readLine()) != null)\n        {\n          line = line.trim();\n          if (!line.equals(\"\") && !line.startsWith(\"#\"))\n          {\n            Query query = null;\n            try {\n              query = qp.parse(line);\n            } catch (ParseException e) {\n              System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n            }\n            qq.add(query);\n          }\n          lineNum++;\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n    }\n    Query [] result = (Query[]) qq.toArray(new Query[qq.size()]) ;\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b","date":1245355139,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","sourceNew":"  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = (Analyzer) Class.forName(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\")).newInstance();\n    String defaultField = config.get(\"file.query.maker.default.field\", DocMaker.BODY_FIELD);\n    QueryParser qp = new QueryParser(defaultField, anlzr);\n\n    List qq = new ArrayList();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      if (file.exists()) {\n        reader = new FileReader(file);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = new InputStreamReader(asStream);\n        }\n      }\n      if (reader != null) {\n        BufferedReader buffered = new BufferedReader(reader);\n        String line = null;\n        int lineNum = 0;\n        while ((line = buffered.readLine()) != null)\n        {\n          line = line.trim();\n          if (!line.equals(\"\") && !line.startsWith(\"#\"))\n          {\n            Query query = null;\n            try {\n              query = qp.parse(line);\n            } catch (ParseException e) {\n              System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n            }\n            qq.add(query);\n          }\n          lineNum++;\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n    }\n    Query [] result = (Query[]) qq.toArray(new Query[qq.size()]) ;\n    return result;\n  }\n\n","sourceOld":"  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = (Analyzer) Class.forName(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\")).newInstance();\n    String defaultField = config.get(\"file.query.maker.default.field\", BasicDocMaker.BODY_FIELD);\n    QueryParser qp = new QueryParser(defaultField, anlzr);\n\n    List qq = new ArrayList();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      if (file != null && file.exists())\n      {\n        reader = new FileReader(file);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = new InputStreamReader(asStream);\n        }\n      }\n      if (reader != null) {\n        BufferedReader buffered = new BufferedReader(reader);\n        String line = null;\n        int lineNum = 0;\n        while ((line = buffered.readLine()) != null)\n        {\n          line = line.trim();\n          if (!line.equals(\"\") && !line.startsWith(\"#\"))\n          {\n            Query query = null;\n            try {\n              query = qp.parse(line);\n            } catch (ParseException e) {\n              System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n            }\n            qq.add(query);\n          }\n          lineNum++;\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n    }\n    Query [] result = (Query[]) qq.toArray(new Query[qq.size()]) ;\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16c13e703fa8a2f8dbbc5b694a621ba5956c8059","date":1246802474,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","sourceNew":"  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = (Analyzer) Class.forName(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\")).newInstance();\n    String defaultField = config.get(\"file.query.maker.default.field\", DocMaker.BODY_FIELD);\n    QueryParser qp = new QueryParser(defaultField, anlzr);\n\n    List qq = new ArrayList();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      if (file.exists()) {\n        reader = new FileReader(file);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = new InputStreamReader(asStream);\n        }\n      }\n      if (reader != null) {\n        try {\n          BufferedReader buffered = new BufferedReader(reader);\n          String line = null;\n          int lineNum = 0;\n          while ((line = buffered.readLine()) != null)\n          {\n            line = line.trim();\n            if (!line.equals(\"\") && !line.startsWith(\"#\"))\n            {\n              Query query = null;\n              try {\n                query = qp.parse(line);\n              } catch (ParseException e) {\n                System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n              }\n              qq.add(query);\n            }\n            lineNum++;\n          }\n        } finally {\n          reader.close();\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n      \n    }\n    Query [] result = (Query[]) qq.toArray(new Query[qq.size()]) ;\n    return result;\n  }\n\n","sourceOld":"  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = (Analyzer) Class.forName(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\")).newInstance();\n    String defaultField = config.get(\"file.query.maker.default.field\", DocMaker.BODY_FIELD);\n    QueryParser qp = new QueryParser(defaultField, anlzr);\n\n    List qq = new ArrayList();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      if (file.exists()) {\n        reader = new FileReader(file);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = new InputStreamReader(asStream);\n        }\n      }\n      if (reader != null) {\n        BufferedReader buffered = new BufferedReader(reader);\n        String line = null;\n        int lineNum = 0;\n        while ((line = buffered.readLine()) != null)\n        {\n          line = line.trim();\n          if (!line.equals(\"\") && !line.startsWith(\"#\"))\n          {\n            Query query = null;\n            try {\n              query = qp.parse(line);\n            } catch (ParseException e) {\n              System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n            }\n            qq.add(query);\n          }\n          lineNum++;\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n    }\n    Query [] result = (Query[]) qq.toArray(new Query[qq.size()]) ;\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","sourceNew":"  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    String defaultField = config.get(\"file.query.maker.default.field\", DocMaker.BODY_FIELD);\n    QueryParser qp = new QueryParser(defaultField, anlzr);\n\n    List qq = new ArrayList();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      if (file.exists()) {\n        reader = new FileReader(file);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = new InputStreamReader(asStream);\n        }\n      }\n      if (reader != null) {\n        try {\n          BufferedReader buffered = new BufferedReader(reader);\n          String line = null;\n          int lineNum = 0;\n          while ((line = buffered.readLine()) != null)\n          {\n            line = line.trim();\n            if (!line.equals(\"\") && !line.startsWith(\"#\"))\n            {\n              Query query = null;\n              try {\n                query = qp.parse(line);\n              } catch (ParseException e) {\n                System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n              }\n              qq.add(query);\n            }\n            lineNum++;\n          }\n        } finally {\n          reader.close();\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n      \n    }\n    Query [] result = (Query[]) qq.toArray(new Query[qq.size()]) ;\n    return result;\n  }\n\n","sourceOld":"  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = (Analyzer) Class.forName(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\")).newInstance();\n    String defaultField = config.get(\"file.query.maker.default.field\", DocMaker.BODY_FIELD);\n    QueryParser qp = new QueryParser(defaultField, anlzr);\n\n    List qq = new ArrayList();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      if (file.exists()) {\n        reader = new FileReader(file);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = new InputStreamReader(asStream);\n        }\n      }\n      if (reader != null) {\n        try {\n          BufferedReader buffered = new BufferedReader(reader);\n          String line = null;\n          int lineNum = 0;\n          while ((line = buffered.readLine()) != null)\n          {\n            line = line.trim();\n            if (!line.equals(\"\") && !line.startsWith(\"#\"))\n            {\n              Query query = null;\n              try {\n                query = qp.parse(line);\n              } catch (ParseException e) {\n                System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n              }\n              qq.add(query);\n            }\n            lineNum++;\n          }\n        } finally {\n          reader.close();\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n      \n    }\n    Query [] result = (Query[]) qq.toArray(new Query[qq.size()]) ;\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","sourceNew":"  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    String defaultField = config.get(\"file.query.maker.default.field\", DocMaker.BODY_FIELD);\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, defaultField, anlzr);\n\n    List qq = new ArrayList();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      if (file.exists()) {\n        reader = new FileReader(file);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = new InputStreamReader(asStream);\n        }\n      }\n      if (reader != null) {\n        try {\n          BufferedReader buffered = new BufferedReader(reader);\n          String line = null;\n          int lineNum = 0;\n          while ((line = buffered.readLine()) != null)\n          {\n            line = line.trim();\n            if (!line.equals(\"\") && !line.startsWith(\"#\"))\n            {\n              Query query = null;\n              try {\n                query = qp.parse(line);\n              } catch (ParseException e) {\n                System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n              }\n              qq.add(query);\n            }\n            lineNum++;\n          }\n        } finally {\n          reader.close();\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n      \n    }\n    Query [] result = (Query[]) qq.toArray(new Query[qq.size()]) ;\n    return result;\n  }\n\n","sourceOld":"  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    String defaultField = config.get(\"file.query.maker.default.field\", DocMaker.BODY_FIELD);\n    QueryParser qp = new QueryParser(defaultField, anlzr);\n\n    List qq = new ArrayList();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      if (file.exists()) {\n        reader = new FileReader(file);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = new InputStreamReader(asStream);\n        }\n      }\n      if (reader != null) {\n        try {\n          BufferedReader buffered = new BufferedReader(reader);\n          String line = null;\n          int lineNum = 0;\n          while ((line = buffered.readLine()) != null)\n          {\n            line = line.trim();\n            if (!line.equals(\"\") && !line.startsWith(\"#\"))\n            {\n              Query query = null;\n              try {\n                query = qp.parse(line);\n              } catch (ParseException e) {\n                System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n              }\n              qq.add(query);\n            }\n            lineNum++;\n          }\n        } finally {\n          reader.close();\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n      \n    }\n    Query [] result = (Query[]) qq.toArray(new Query[qq.size()]) ;\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ffdf794cee8d43eb612df752c592cef2dc3e75ae","date":1256465578,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","sourceNew":"  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    String defaultField = config.get(\"file.query.maker.default.field\", DocMaker.BODY_FIELD);\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, defaultField, anlzr);\n\n    List<Query> qq = new ArrayList<Query>();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      if (file.exists()) {\n        reader = new FileReader(file);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = new InputStreamReader(asStream);\n        }\n      }\n      if (reader != null) {\n        try {\n          BufferedReader buffered = new BufferedReader(reader);\n          String line = null;\n          int lineNum = 0;\n          while ((line = buffered.readLine()) != null)\n          {\n            line = line.trim();\n            if (!line.equals(\"\") && !line.startsWith(\"#\"))\n            {\n              Query query = null;\n              try {\n                query = qp.parse(line);\n              } catch (ParseException e) {\n                System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n              }\n              qq.add(query);\n            }\n            lineNum++;\n          }\n        } finally {\n          reader.close();\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n      \n    }\n    return qq.toArray(new Query[qq.size()]) ;\n  }\n\n","sourceOld":"  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    String defaultField = config.get(\"file.query.maker.default.field\", DocMaker.BODY_FIELD);\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, defaultField, anlzr);\n\n    List qq = new ArrayList();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      if (file.exists()) {\n        reader = new FileReader(file);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = new InputStreamReader(asStream);\n        }\n      }\n      if (reader != null) {\n        try {\n          BufferedReader buffered = new BufferedReader(reader);\n          String line = null;\n          int lineNum = 0;\n          while ((line = buffered.readLine()) != null)\n          {\n            line = line.trim();\n            if (!line.equals(\"\") && !line.startsWith(\"#\"))\n            {\n              Query query = null;\n              try {\n                query = qp.parse(line);\n              } catch (ParseException e) {\n                System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n              }\n              qq.add(query);\n            }\n            lineNum++;\n          }\n        } finally {\n          reader.close();\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n      \n    }\n    Query [] result = (Query[]) qq.toArray(new Query[qq.size()]) ;\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","sourceNew":"  @Override\n  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    String defaultField = config.get(\"file.query.maker.default.field\", DocMaker.BODY_FIELD);\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, defaultField, anlzr);\n\n    List<Query> qq = new ArrayList<Query>();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      if (file.exists()) {\n        reader = new FileReader(file);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = new InputStreamReader(asStream);\n        }\n      }\n      if (reader != null) {\n        try {\n          BufferedReader buffered = new BufferedReader(reader);\n          String line = null;\n          int lineNum = 0;\n          while ((line = buffered.readLine()) != null)\n          {\n            line = line.trim();\n            if (!line.equals(\"\") && !line.startsWith(\"#\"))\n            {\n              Query query = null;\n              try {\n                query = qp.parse(line);\n              } catch (ParseException e) {\n                System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n              }\n              qq.add(query);\n            }\n            lineNum++;\n          }\n        } finally {\n          reader.close();\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n      \n    }\n    return qq.toArray(new Query[qq.size()]) ;\n  }\n\n","sourceOld":"  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    String defaultField = config.get(\"file.query.maker.default.field\", DocMaker.BODY_FIELD);\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, defaultField, anlzr);\n\n    List<Query> qq = new ArrayList<Query>();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      if (file.exists()) {\n        reader = new FileReader(file);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = new InputStreamReader(asStream);\n        }\n      }\n      if (reader != null) {\n        try {\n          BufferedReader buffered = new BufferedReader(reader);\n          String line = null;\n          int lineNum = 0;\n          while ((line = buffered.readLine()) != null)\n          {\n            line = line.trim();\n            if (!line.equals(\"\") && !line.startsWith(\"#\"))\n            {\n              Query query = null;\n              try {\n                query = qp.parse(line);\n              } catch (ParseException e) {\n                System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n              }\n              qq.add(query);\n            }\n            lineNum++;\n          }\n        } finally {\n          reader.close();\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n      \n    }\n    return qq.toArray(new Query[qq.size()]) ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker#prepareQueries().mjava","sourceNew":"  @Override\n  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    String defaultField = config.get(\"file.query.maker.default.field\", DocMaker.BODY_FIELD);\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, defaultField, anlzr);\n\n    List<Query> qq = new ArrayList<Query>();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      if (file.exists()) {\n        reader = new FileReader(file);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = new InputStreamReader(asStream);\n        }\n      }\n      if (reader != null) {\n        try {\n          BufferedReader buffered = new BufferedReader(reader);\n          String line = null;\n          int lineNum = 0;\n          while ((line = buffered.readLine()) != null)\n          {\n            line = line.trim();\n            if (!line.equals(\"\") && !line.startsWith(\"#\"))\n            {\n              Query query = null;\n              try {\n                query = qp.parse(line);\n              } catch (ParseException e) {\n                System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n              }\n              qq.add(query);\n            }\n            lineNum++;\n          }\n        } finally {\n          reader.close();\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n      \n    }\n    return qq.toArray(new Query[qq.size()]) ;\n  }\n\n","sourceOld":"  @Override\n  protected Query[] prepareQueries() throws Exception {\n\n    Analyzer anlzr = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n            \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    String defaultField = config.get(\"file.query.maker.default.field\", DocMaker.BODY_FIELD);\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, defaultField, anlzr);\n\n    List<Query> qq = new ArrayList<Query>();\n    String fileName = config.get(\"file.query.maker.file\", null);\n    if (fileName != null)\n    {\n      File file = new File(fileName);\n      Reader reader = null;\n      if (file.exists()) {\n        reader = new FileReader(file);\n      } else {\n        //see if we can find it as a resource\n        InputStream asStream = FileBasedQueryMaker.class.getClassLoader().getResourceAsStream(fileName);\n        if (asStream != null) {\n          reader = new InputStreamReader(asStream);\n        }\n      }\n      if (reader != null) {\n        try {\n          BufferedReader buffered = new BufferedReader(reader);\n          String line = null;\n          int lineNum = 0;\n          while ((line = buffered.readLine()) != null)\n          {\n            line = line.trim();\n            if (!line.equals(\"\") && !line.startsWith(\"#\"))\n            {\n              Query query = null;\n              try {\n                query = qp.parse(line);\n              } catch (ParseException e) {\n                System.err.println(\"Exception: \" + e.getMessage() + \" occurred while parsing line: \" + lineNum + \" Text: \" + line);\n              }\n              qq.add(query);\n            }\n            lineNum++;\n          }\n        } finally {\n          reader.close();\n        }\n      } else {\n        System.err.println(\"No Reader available for: \" + fileName);\n      }\n      \n    }\n    return qq.toArray(new Query[qq.size()]) ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3c528d38c8d9b2452e932321931b11e7c19a96d5":["1ebcfbd9662f54e73fdfe1f4d675ea39531fb9b0"],"1ebcfbd9662f54e73fdfe1f4d675ea39531fb9b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ffdf794cee8d43eb612df752c592cef2dc3e75ae":["ba1116b3450a9c1642c89445d131b37344055245"],"16c13e703fa8a2f8dbbc5b694a621ba5956c8059":["6944b9fa6d8ef96b83ae2d3a4332d03b3857355b"],"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b":["3c528d38c8d9b2452e932321931b11e7c19a96d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["ffdf794cee8d43eb612df752c592cef2dc3e75ae"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["16c13e703fa8a2f8dbbc5b694a621ba5956c8059"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"ba1116b3450a9c1642c89445d131b37344055245":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"]},"commit2Childs":{"3c528d38c8d9b2452e932321931b11e7c19a96d5":["6944b9fa6d8ef96b83ae2d3a4332d03b3857355b"],"1ebcfbd9662f54e73fdfe1f4d675ea39531fb9b0":["3c528d38c8d9b2452e932321931b11e7c19a96d5"],"ffdf794cee8d43eb612df752c592cef2dc3e75ae":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"16c13e703fa8a2f8dbbc5b694a621ba5956c8059":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b":["16c13e703fa8a2f8dbbc5b694a621ba5956c8059"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1ebcfbd9662f54e73fdfe1f4d675ea39531fb9b0"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["ba1116b3450a9c1642c89445d131b37344055245"],"ba1116b3450a9c1642c89445d131b37344055245":["ffdf794cee8d43eb612df752c592cef2dc3e75ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}