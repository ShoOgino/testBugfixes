{"path":"contrib/collation/src/java/org/apache/lucene/collation/ICUCollationKeyFilter#next(Token).mjava","commits":[{"id":"73b24dd99dc72171f84ace6f141e71e669f0221b","date":1237459915,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/collation/src/java/org/apache/lucene/collation/ICUCollationKeyFilter#next(Token).mjava","pathOld":"/dev/null","sourceNew":"  public final Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    Token nextToken = input.next(reusableToken);\n    if (nextToken != null) {\n      char[] termBuffer = nextToken.termBuffer();\n      String termText = new String(termBuffer, 0, nextToken.termLength());\n      byte[] collationKey = collator.getCollationKey(termText).toByteArray();\n      ByteBuffer collationKeyBuf = ByteBuffer.wrap(collationKey);\n      int encodedLength\n        = IndexableBinaryStringTools.getEncodedLength(collationKeyBuf);\n      if (encodedLength > termBuffer.length) {\n        nextToken.resizeTermBuffer(encodedLength);\n      }\n      nextToken.setTermLength(encodedLength);\n      CharBuffer wrappedTermBuffer = CharBuffer.wrap(nextToken.termBuffer());\n      IndexableBinaryStringTools.encode(collationKeyBuf, wrappedTermBuffer);\n    }\n    return nextToken;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"656a4b68d678c2f92983d95dd125a02340579784","date":1242726624,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/collation/src/java/org/apache/lucene/collation/ICUCollationKeyFilter#next(Token).mjava","pathOld":"contrib/collation/src/java/org/apache/lucene/collation/ICUCollationKeyFilter#next(Token).mjava","sourceNew":"  public final Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    Token nextToken = input.next(reusableToken);\n    if (nextToken != null) {\n      char[] termBuffer = nextToken.termBuffer();\n      String termText = new String(termBuffer, 0, nextToken.termLength());\n      collator.getRawCollationKey(termText, reusableKey);\n      ByteBuffer collationKeyBuf = ByteBuffer.wrap(reusableKey.bytes, 0, reusableKey.size);\n      int encodedLength\n        = IndexableBinaryStringTools.getEncodedLength(collationKeyBuf);\n      if (encodedLength > termBuffer.length) {\n        nextToken.resizeTermBuffer(encodedLength);\n      }\n      nextToken.setTermLength(encodedLength);\n      CharBuffer wrappedTermBuffer = CharBuffer.wrap(nextToken.termBuffer());\n      IndexableBinaryStringTools.encode(collationKeyBuf, wrappedTermBuffer);\n    }\n    return nextToken;\n  }\n\n","sourceOld":"  public final Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    Token nextToken = input.next(reusableToken);\n    if (nextToken != null) {\n      char[] termBuffer = nextToken.termBuffer();\n      String termText = new String(termBuffer, 0, nextToken.termLength());\n      byte[] collationKey = collator.getCollationKey(termText).toByteArray();\n      ByteBuffer collationKeyBuf = ByteBuffer.wrap(collationKey);\n      int encodedLength\n        = IndexableBinaryStringTools.getEncodedLength(collationKeyBuf);\n      if (encodedLength > termBuffer.length) {\n        nextToken.resizeTermBuffer(encodedLength);\n      }\n      nextToken.setTermLength(encodedLength);\n      CharBuffer wrappedTermBuffer = CharBuffer.wrap(nextToken.termBuffer());\n      IndexableBinaryStringTools.encode(collationKeyBuf, wrappedTermBuffer);\n    }\n    return nextToken;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":5,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/collation/src/java/org/apache/lucene/collation/ICUCollationKeyFilter#incrementToken().mjava","pathOld":"contrib/collation/src/java/org/apache/lucene/collation/ICUCollationKeyFilter#next(Token).mjava","sourceNew":"  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] termBuffer = termAtt.termBuffer();\n      String termText = new String(termBuffer, 0, termAtt.termLength());\n      collator.getRawCollationKey(termText, reusableKey);\n      ByteBuffer collationKeyBuf = ByteBuffer.wrap(reusableKey.bytes, 0, reusableKey.size);\n      int encodedLength\n        = IndexableBinaryStringTools.getEncodedLength(collationKeyBuf);\n      if (encodedLength > termBuffer.length) {\n        termAtt.resizeTermBuffer(encodedLength);\n      }\n      termAtt.setTermLength(encodedLength);\n      CharBuffer wrappedTermBuffer = CharBuffer.wrap(termAtt.termBuffer());\n      IndexableBinaryStringTools.encode(collationKeyBuf, wrappedTermBuffer);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  public final Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    Token nextToken = input.next(reusableToken);\n    if (nextToken != null) {\n      char[] termBuffer = nextToken.termBuffer();\n      String termText = new String(termBuffer, 0, nextToken.termLength());\n      collator.getRawCollationKey(termText, reusableKey);\n      ByteBuffer collationKeyBuf = ByteBuffer.wrap(reusableKey.bytes, 0, reusableKey.size);\n      int encodedLength\n        = IndexableBinaryStringTools.getEncodedLength(collationKeyBuf);\n      if (encodedLength > termBuffer.length) {\n        nextToken.resizeTermBuffer(encodedLength);\n      }\n      nextToken.setTermLength(encodedLength);\n      CharBuffer wrappedTermBuffer = CharBuffer.wrap(nextToken.termBuffer());\n      IndexableBinaryStringTools.encode(collationKeyBuf, wrappedTermBuffer);\n    }\n    return nextToken;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"73b24dd99dc72171f84ace6f141e71e669f0221b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["656a4b68d678c2f92983d95dd125a02340579784"],"656a4b68d678c2f92983d95dd125a02340579784":["73b24dd99dc72171f84ace6f141e71e669f0221b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9b5756469957918cac40a831acec9cf01c8c2bb3"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73b24dd99dc72171f84ace6f141e71e669f0221b"],"73b24dd99dc72171f84ace6f141e71e669f0221b":["656a4b68d678c2f92983d95dd125a02340579784"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"656a4b68d678c2f92983d95dd125a02340579784":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}