{"path":"lucene/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#setField(FieldInfo).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#setField(FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsWriter#setField(FieldInfo).mjava","sourceNew":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    this.indexOptions = fieldInfo.indexOptions;\n    if (DEBUG) System.out.println(\"PW field=\" + fieldInfo.name + \" indexOptions=\" + indexOptions);\n    storePayloads = fieldInfo.storePayloads;\n    wrappedPostingsWriter.setField(fieldInfo);\n    //DEBUG = BlockTreeTermsWriter.DEBUG;\n  }\n\n","sourceOld":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    this.indexOptions = fieldInfo.indexOptions;\n    if (DEBUG) System.out.println(\"PW field=\" + fieldInfo.name + \" indexOptions=\" + indexOptions);\n    storePayloads = fieldInfo.storePayloads;\n    wrappedPostingsWriter.setField(fieldInfo);\n    //DEBUG = BlockTreeTermsWriter.DEBUG;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31f025ae60076ae95274433f3fe8e6ace2857a87","date":1326669465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#setField(FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#setField(FieldInfo).mjava","sourceNew":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    this.indexOptions = fieldInfo.indexOptions;\n    if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n      throw new IllegalArgumentException(\"this codec cannot index offsets: \" + indexOptions);\n    }\n    if (DEBUG) System.out.println(\"PW field=\" + fieldInfo.name + \" indexOptions=\" + indexOptions);\n    storePayloads = fieldInfo.storePayloads;\n    wrappedPostingsWriter.setField(fieldInfo);\n    //DEBUG = BlockTreeTermsWriter.DEBUG;\n  }\n\n","sourceOld":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    this.indexOptions = fieldInfo.indexOptions;\n    if (DEBUG) System.out.println(\"PW field=\" + fieldInfo.name + \" indexOptions=\" + indexOptions);\n    storePayloads = fieldInfo.storePayloads;\n    wrappedPostingsWriter.setField(fieldInfo);\n    //DEBUG = BlockTreeTermsWriter.DEBUG;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"583596a9662157d0b1a004cc19c70f54e6201e51","date":1326672050,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#setField(FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#setField(FieldInfo).mjava","sourceNew":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    this.indexOptions = fieldInfo.indexOptions;\n    if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n      throw new UnsupportedOperationException(\"this codec cannot index offsets: \" + indexOptions);\n    }\n    if (DEBUG) System.out.println(\"PW field=\" + fieldInfo.name + \" indexOptions=\" + indexOptions);\n    storePayloads = fieldInfo.storePayloads;\n    wrappedPostingsWriter.setField(fieldInfo);\n    //DEBUG = BlockTreeTermsWriter.DEBUG;\n  }\n\n","sourceOld":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    this.indexOptions = fieldInfo.indexOptions;\n    if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n      throw new IllegalArgumentException(\"this codec cannot index offsets: \" + indexOptions);\n    }\n    if (DEBUG) System.out.println(\"PW field=\" + fieldInfo.name + \" indexOptions=\" + indexOptions);\n    storePayloads = fieldInfo.storePayloads;\n    wrappedPostingsWriter.setField(fieldInfo);\n    //DEBUG = BlockTreeTermsWriter.DEBUG;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#setField(FieldInfo).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#setField(FieldInfo).mjava","sourceNew":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    this.indexOptions = fieldInfo.indexOptions;\n    if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n      throw new UnsupportedOperationException(\"this codec cannot index offsets: \" + indexOptions);\n    }\n    if (DEBUG) System.out.println(\"PW field=\" + fieldInfo.name + \" indexOptions=\" + indexOptions);\n    storePayloads = fieldInfo.storePayloads;\n    wrappedPostingsWriter.setField(fieldInfo);\n    //DEBUG = BlockTreeTermsWriter.DEBUG;\n  }\n\n","sourceOld":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    this.indexOptions = fieldInfo.indexOptions;\n    if (indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0) {\n      throw new UnsupportedOperationException(\"this codec cannot index offsets: \" + indexOptions);\n    }\n    if (DEBUG) System.out.println(\"PW field=\" + fieldInfo.name + \" indexOptions=\" + indexOptions);\n    storePayloads = fieldInfo.storePayloads;\n    wrappedPostingsWriter.setField(fieldInfo);\n    //DEBUG = BlockTreeTermsWriter.DEBUG;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"583596a9662157d0b1a004cc19c70f54e6201e51":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["583596a9662157d0b1a004cc19c70f54e6201e51"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"583596a9662157d0b1a004cc19c70f54e6201e51":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["583596a9662157d0b1a004cc19c70f54e6201e51"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}