{"path":"solr/contrib/analysis-extras/src/test/java/org/apache/solr/analysis/TestICUTransformFilterFactory#testDirection().mjava","commits":[{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/analysis-extras/src/test/java/org/apache/solr/analysis/TestICUTransformFilterFactory#testDirection().mjava","pathOld":"solr/contrib/analysis-extras/src/test/org/apache/solr/analysis/TestICUTransformFilterFactory#testDirection().mjava","sourceNew":"  /** test forward and reverse direction */\n  public void testDirection() throws Exception {\n    // forward\n    Reader reader = new StringReader(\"Российская Федерация\");\n    ICUTransformFilterFactory factory = new ICUTransformFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"id\", \"Cyrillic-Latin\");\n    factory.init(args);\n    Tokenizer tokenizer = new WhitespaceTokenizer(DEFAULT_VERSION, reader);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"Rossijskaâ\",  \"Federaciâ\" });\n    \n    // backward (invokes Latin-Cyrillic)\n    reader = new StringReader(\"Rossijskaâ Federaciâ\");\n    args.put(\"direction\", \"reverse\");\n    factory.init(args);\n    tokenizer = new WhitespaceTokenizer(DEFAULT_VERSION, reader);\n    stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"Российская\", \"Федерация\" });\n  }\n\n","sourceOld":"  /** test forward and reverse direction */\n  public void testDirection() throws Exception {\n    // forward\n    Reader reader = new StringReader(\"Российская Федерация\");\n    ICUTransformFilterFactory factory = new ICUTransformFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"id\", \"Cyrillic-Latin\");\n    factory.init(args);\n    Tokenizer tokenizer = new WhitespaceTokenizer(DEFAULT_VERSION, reader);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"Rossijskaâ\",  \"Federaciâ\" });\n    \n    // backward (invokes Latin-Cyrillic)\n    reader = new StringReader(\"Rossijskaâ Federaciâ\");\n    args.put(\"direction\", \"reverse\");\n    factory.init(args);\n    tokenizer = new WhitespaceTokenizer(DEFAULT_VERSION, reader);\n    stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"Российская\", \"Федерация\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/analysis-extras/src/test/org/apache/solr/analysis/TestICUTransformFilterFactory#testDirection().mjava","pathOld":"solr/contrib/analysis-extras/src/test/java/org/apache/solr/analysis/TestICUTransformFilterFactory#testDirection().mjava","sourceNew":"  /** test forward and reverse direction */\n  public void testDirection() throws Exception {\n    // forward\n    Reader reader = new StringReader(\"Российская Федерация\");\n    ICUTransformFilterFactory factory = new ICUTransformFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"id\", \"Cyrillic-Latin\");\n    factory.init(args);\n    Tokenizer tokenizer = new WhitespaceTokenizer(DEFAULT_VERSION, reader);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"Rossijskaâ\",  \"Federaciâ\" });\n    \n    // backward (invokes Latin-Cyrillic)\n    reader = new StringReader(\"Rossijskaâ Federaciâ\");\n    args.put(\"direction\", \"reverse\");\n    factory.init(args);\n    tokenizer = new WhitespaceTokenizer(DEFAULT_VERSION, reader);\n    stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"Российская\", \"Федерация\" });\n  }\n\n","sourceOld":"  /** test forward and reverse direction */\n  public void testDirection() throws Exception {\n    // forward\n    Reader reader = new StringReader(\"Российская Федерация\");\n    ICUTransformFilterFactory factory = new ICUTransformFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"id\", \"Cyrillic-Latin\");\n    factory.init(args);\n    Tokenizer tokenizer = new WhitespaceTokenizer(DEFAULT_VERSION, reader);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"Rossijskaâ\",  \"Federaciâ\" });\n    \n    // backward (invokes Latin-Cyrillic)\n    reader = new StringReader(\"Rossijskaâ Federaciâ\");\n    args.put(\"direction\", \"reverse\");\n    factory.init(args);\n    tokenizer = new WhitespaceTokenizer(DEFAULT_VERSION, reader);\n    stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, new String[] { \"Российская\", \"Федерация\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}