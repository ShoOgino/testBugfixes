{"path":"backwards/src/java/org/apache/lucene/search/ExactPhraseScorer#phraseFreq().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/search/ExactPhraseScorer#phraseFreq().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected final float phraseFreq() throws IOException {\n    // sort list with pq\n    pq.clear();\n    for (PhrasePositions pp = first; pp != null; pp = pp.next) {\n      pp.firstPosition();\n      pq.add(pp);\t\t\t\t  // build pq from list\n    }\n    pqToList();\t\t\t\t\t  // rebuild list from pq\n\n    // for counting how many times the exact phrase is found in current document,\n    // just count how many times all PhrasePosition's have exactly the same position.   \n    int freq = 0;\n    do {\t\t\t\t\t  // find position w/ all terms\n      while (first.position < last.position) {\t  // scan forward in first\n\t    do {\n\t      if (!first.nextPosition())\n\t        return freq;\n\t    } while (first.position < last.position);\n\t      firstToLast();\n      }\n      freq++;\t\t\t\t\t  // all equal: a match\n    } while (last.nextPosition());\n  \n    return freq;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/ExactPhraseScorer#phraseFreq().mjava","pathOld":"backwards/src/java/org/apache/lucene/search/ExactPhraseScorer#phraseFreq().mjava","sourceNew":"  @Override\n  protected final float phraseFreq() throws IOException {\n    // sort list with pq\n    pq.clear();\n    for (PhrasePositions pp = first; pp != null; pp = pp.next) {\n      pp.firstPosition();\n      pq.add(pp);\t\t\t\t  // build pq from list\n    }\n    pqToList();\t\t\t\t\t  // rebuild list from pq\n\n    // for counting how many times the exact phrase is found in current document,\n    // just count how many times all PhrasePosition's have exactly the same position.   \n    int freq = 0;\n    do {\t\t\t\t\t  // find position w/ all terms\n      while (first.position < last.position) {\t  // scan forward in first\n\t    do {\n\t      if (!first.nextPosition())\n\t        return freq;\n\t    } while (first.position < last.position);\n\t      firstToLast();\n      }\n      freq++;\t\t\t\t\t  // all equal: a match\n    } while (last.nextPosition());\n  \n    return freq;\n  }\n\n","sourceOld":"  @Override\n  protected final float phraseFreq() throws IOException {\n    // sort list with pq\n    pq.clear();\n    for (PhrasePositions pp = first; pp != null; pp = pp.next) {\n      pp.firstPosition();\n      pq.add(pp);\t\t\t\t  // build pq from list\n    }\n    pqToList();\t\t\t\t\t  // rebuild list from pq\n\n    // for counting how many times the exact phrase is found in current document,\n    // just count how many times all PhrasePosition's have exactly the same position.   \n    int freq = 0;\n    do {\t\t\t\t\t  // find position w/ all terms\n      while (first.position < last.position) {\t  // scan forward in first\n\t    do {\n\t      if (!first.nextPosition())\n\t        return freq;\n\t    } while (first.position < last.position);\n\t      firstToLast();\n      }\n      freq++;\t\t\t\t\t  // all equal: a match\n    } while (last.nextPosition());\n  \n    return freq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}