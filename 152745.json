{"path":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#updateToken(Token,List[Token],int,List[Row],List[Token]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#updateToken(Token,List[Token],int,List[Row],List[Token]).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#updateToken(Token,List[Token],int,List[Row],List[Token]).mjava","sourceNew":"  /**\n   * Final touch of a shingle token before it is passed on to the consumer from method {@link #incrementToken()}.\n   *\n   * Calculates and sets type, flags, position increment, start/end offsets and weight.\n   *\n   * @param token Shingle token\n   * @param shingle Tokens used to produce the shingle token.\n   * @param currentPermutationStartOffset Start offset in parameter currentPermutationTokens\n   * @param currentPermutationRows index to Matrix.Column.Row from the position of tokens in parameter currentPermutationTokens\n   * @param currentPermuationTokens tokens of the current permutation of rows in the matrix.\n   */\n  public void updateToken(Token token, List<Token> shingle, int currentPermutationStartOffset, List<Row> currentPermutationRows, List<Token> currentPermuationTokens) {\n    token.setType(ShingleMatrixFilter.class.getName());\n    token.setFlags(0);\n    token.setPositionIncrement(1);\n    token.setStartOffset(shingle.get(0).startOffset());\n    token.setEndOffset(shingle.get(shingle.size() - 1).endOffset());\n    settingsCodec.setWeight(token, calculateShingleWeight(token, shingle, currentPermutationStartOffset, currentPermutationRows, currentPermuationTokens));\n  }\n\n","sourceOld":"  /**\n   * Final touch of a shingle token before it is passed on to the consumer from method {@link #incrementToken()}.\n   *\n   * Calculates and sets type, flags, position increment, start/end offsets and weight.\n   *\n   * @param token Shingle token\n   * @param shingle Tokens used to produce the shingle token.\n   * @param currentPermutationStartOffset Start offset in parameter currentPermutationTokens\n   * @param currentPermutationRows index to Matrix.Column.Row from the position of tokens in parameter currentPermutationTokens\n   * @param currentPermuationTokens tokens of the current permutation of rows in the matrix.\n   */\n  public void updateToken(Token token, List<Token> shingle, int currentPermutationStartOffset, List<Row> currentPermutationRows, List<Token> currentPermuationTokens) {\n    token.setType(ShingleMatrixFilter.class.getName());\n    token.setFlags(0);\n    token.setPositionIncrement(1);\n    token.setStartOffset(shingle.get(0).startOffset());\n    token.setEndOffset(shingle.get(shingle.size() - 1).endOffset());\n    settingsCodec.setWeight(token, calculateShingleWeight(token, shingle, currentPermutationStartOffset, currentPermutationRows, currentPermuationTokens));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#updateToken(Token,List[Token],int,List[Row],List[Token]).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#updateToken(Token,List[Token],int,List[Row],List[Token]).mjava","sourceNew":"  /**\n   * Final touch of a shingle token before it is passed on to the consumer from method {@link #incrementToken()}.\n   *\n   * Calculates and sets type, flags, position increment, start/end offsets and weight.\n   *\n   * @param token Shingle token\n   * @param shingle Tokens used to produce the shingle token.\n   * @param currentPermutationStartOffset Start offset in parameter currentPermutationTokens\n   * @param currentPermutationRows index to Matrix.Column.Row from the position of tokens in parameter currentPermutationTokens\n   * @param currentPermuationTokens tokens of the current permutation of rows in the matrix.\n   */\n  public void updateToken(Token token, List<Token> shingle, int currentPermutationStartOffset, List<Row> currentPermutationRows, List<Token> currentPermuationTokens) {\n    token.setType(ShingleMatrixFilter.class.getName());\n    token.setFlags(0);\n    token.setPositionIncrement(1);\n    token.setStartOffset(shingle.get(0).startOffset());\n    token.setEndOffset(shingle.get(shingle.size() - 1).endOffset());\n    settingsCodec.setWeight(token, calculateShingleWeight(token, shingle, currentPermutationStartOffset, currentPermutationRows, currentPermuationTokens));\n  }\n\n","sourceOld":"  /**\n   * Final touch of a shingle token before it is passed on to the consumer from method {@link #incrementToken()}.\n   *\n   * Calculates and sets type, flags, position increment, start/end offsets and weight.\n   *\n   * @param token Shingle token\n   * @param shingle Tokens used to produce the shingle token.\n   * @param currentPermutationStartOffset Start offset in parameter currentPermutationTokens\n   * @param currentPermutationRows index to Matrix.Column.Row from the position of tokens in parameter currentPermutationTokens\n   * @param currentPermuationTokens tokens of the current permutation of rows in the matrix.\n   */\n  public void updateToken(Token token, List<Token> shingle, int currentPermutationStartOffset, List<Row> currentPermutationRows, List<Token> currentPermuationTokens) {\n    token.setType(ShingleMatrixFilter.class.getName());\n    token.setFlags(0);\n    token.setPositionIncrement(1);\n    token.setStartOffset(shingle.get(0).startOffset());\n    token.setEndOffset(shingle.get(shingle.size() - 1).endOffset());\n    settingsCodec.setWeight(token, calculateShingleWeight(token, shingle, currentPermutationStartOffset, currentPermutationRows, currentPermuationTokens));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}