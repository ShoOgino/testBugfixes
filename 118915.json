{"path":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizer.Lattice#addNode(Type,int,int,int).mjava","commits":[{"id":"f2b45d6769cfaeb4456b4b66cdd5e25c8940f2a4","date":1449124064,"type":0,"author":"Christian Moen","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizer.Lattice#addNode(Type,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"    private int addNode(Type dicType, int wordID, int left, int right) {\n      if (VERBOSE) {\n        System.out.printf(\"DEBUG: addNode: dicType=%s, wordID=%d, left=%d, right=%d, str=%s\\n\",\n                          dicType.toString(), wordID, left, right,\n                          left == -1 ? \"BOS\" : right == -1 ? \"EOS\" : new String(fragment, left, right - left));\n      }\n      assert nodeCount < capacity;\n      assert left == -1 || right == -1 || left < right;\n      assert left == -1 || (0 <= left && left < rootSize);\n      assert right == -1 || (0 <= right && right < rootSize);\n\n      int node = nodeCount++;\n\n      if (VERBOSE) {\n        System.out.printf(\"DEBUG: addNode: node=%d\\n\", node);\n      }\n\n      nodeDicType[node] = dicType;\n      nodeWordID[node] = wordID;\n      nodeMark[node] = 0;\n\n      if (wordID < 0) {\n        nodeWordCost[node] = 0;\n        nodeLeftCost[node] = 0;\n        nodeRightCost[node] = 0;\n        nodeLeftID[node] = 0;\n        nodeRightID[node] = 0;\n      } else {\n        Dictionary dic = dictionaryMap.get(dicType);\n        nodeWordCost[node] = dic.getWordCost(wordID);\n        nodeLeftID[node] = dic.getLeftId(wordID);\n        nodeRightID[node] = dic.getRightId(wordID);\n      }\n\n      if (VERBOSE) {\n        System.out.printf(\"DEBUG: addNode: wordCost=%d, leftID=%d, rightID=%d\\n\",\n                          nodeWordCost[node], nodeLeftID[node], nodeRightID[node]);\n      }\n\n      nodeLeft[node] = left;\n      nodeRight[node] = right;\n      if (0 <= left) {\n        nodeLeftChain[node] = lRoot[left];\n        lRoot[left] = node;\n      } else {\n        nodeLeftChain[node] = -1;\n      }\n      if (0 <= right) {\n        nodeRightChain[node] = rRoot[right];\n        rRoot[right] = node;\n      } else {\n        nodeRightChain[node] = -1;\n      }\n      return node;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f2b45d6769cfaeb4456b4b66cdd5e25c8940f2a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f2b45d6769cfaeb4456b4b66cdd5e25c8940f2a4"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f2b45d6769cfaeb4456b4b66cdd5e25c8940f2a4"],"f2b45d6769cfaeb4456b4b66cdd5e25c8940f2a4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}