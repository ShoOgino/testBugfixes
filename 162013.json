{"path":"backwards/src/test/org/apache/lucene/util/TestAttributeSource#testToStringAndMultiAttributeImplementations().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/util/TestAttributeSource#testToStringAndMultiAttributeImplementations().mjava","pathOld":"/dev/null","sourceNew":"  public void testToStringAndMultiAttributeImplementations() {\n    AttributeSource src = new AttributeSource();\n    TermAttribute termAtt = src.addAttribute(TermAttribute.class);\n    TypeAttribute typeAtt = src.addAttribute(TypeAttribute.class);\n    termAtt.setTermBuffer(\"TestTerm\");\n    typeAtt.setType(\"TestType\");    \n    assertEquals(\"Attributes should appear in original order\", \"(\"+termAtt.toString()+\",\"+typeAtt.toString()+\")\", src.toString());\n    Iterator<AttributeImpl> it = src.getAttributeImplsIterator();\n    assertTrue(\"Iterator should have 2 attributes left\", it.hasNext());\n    assertSame(\"First AttributeImpl from iterator should be termAtt\", termAtt, it.next());\n    assertTrue(\"Iterator should have 1 attributes left\", it.hasNext());\n    assertSame(\"Second AttributeImpl from iterator should be typeAtt\", typeAtt, it.next());\n    assertFalse(\"Iterator should have 0 attributes left\", it.hasNext());\n\n    src = new AttributeSource();\n    src.addAttributeImpl(new Token());\n    // this should not add a new attribute as Token implements TermAttribute, too\n    termAtt = src.addAttribute(TermAttribute.class);\n    assertTrue(\"TermAttribute should be implemented by Token\", termAtt instanceof Token);\n    // get the Token attribute and check, that it is the only one\n    it = src.getAttributeImplsIterator();\n    Token tok = (Token) it.next();\n    assertFalse(\"There should be only one attribute implementation instance\", it.hasNext());\n    \n    termAtt.setTermBuffer(\"TestTerm\");\n    assertEquals(\"Token should only printed once\", \"(\"+tok.toString()+\")\", src.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/util/TestAttributeSource#testToStringAndMultiAttributeImplementations().mjava","pathOld":"backwards/src/test/org/apache/lucene/util/TestAttributeSource#testToStringAndMultiAttributeImplementations().mjava","sourceNew":"  public void testToStringAndMultiAttributeImplementations() {\n    AttributeSource src = new AttributeSource();\n    TermAttribute termAtt = src.addAttribute(TermAttribute.class);\n    TypeAttribute typeAtt = src.addAttribute(TypeAttribute.class);\n    termAtt.setTermBuffer(\"TestTerm\");\n    typeAtt.setType(\"TestType\");    \n    assertEquals(\"Attributes should appear in original order\", \"(\"+termAtt.toString()+\",\"+typeAtt.toString()+\")\", src.toString());\n    Iterator<AttributeImpl> it = src.getAttributeImplsIterator();\n    assertTrue(\"Iterator should have 2 attributes left\", it.hasNext());\n    assertSame(\"First AttributeImpl from iterator should be termAtt\", termAtt, it.next());\n    assertTrue(\"Iterator should have 1 attributes left\", it.hasNext());\n    assertSame(\"Second AttributeImpl from iterator should be typeAtt\", typeAtt, it.next());\n    assertFalse(\"Iterator should have 0 attributes left\", it.hasNext());\n\n    src = new AttributeSource();\n    src.addAttributeImpl(new Token());\n    // this should not add a new attribute as Token implements TermAttribute, too\n    termAtt = src.addAttribute(TermAttribute.class);\n    assertTrue(\"TermAttribute should be implemented by Token\", termAtt instanceof Token);\n    // get the Token attribute and check, that it is the only one\n    it = src.getAttributeImplsIterator();\n    Token tok = (Token) it.next();\n    assertFalse(\"There should be only one attribute implementation instance\", it.hasNext());\n    \n    termAtt.setTermBuffer(\"TestTerm\");\n    assertEquals(\"Token should only printed once\", \"(\"+tok.toString()+\")\", src.toString());\n  }\n\n","sourceOld":"  public void testToStringAndMultiAttributeImplementations() {\n    AttributeSource src = new AttributeSource();\n    TermAttribute termAtt = src.addAttribute(TermAttribute.class);\n    TypeAttribute typeAtt = src.addAttribute(TypeAttribute.class);\n    termAtt.setTermBuffer(\"TestTerm\");\n    typeAtt.setType(\"TestType\");    \n    assertEquals(\"Attributes should appear in original order\", \"(\"+termAtt.toString()+\",\"+typeAtt.toString()+\")\", src.toString());\n    Iterator<AttributeImpl> it = src.getAttributeImplsIterator();\n    assertTrue(\"Iterator should have 2 attributes left\", it.hasNext());\n    assertSame(\"First AttributeImpl from iterator should be termAtt\", termAtt, it.next());\n    assertTrue(\"Iterator should have 1 attributes left\", it.hasNext());\n    assertSame(\"Second AttributeImpl from iterator should be typeAtt\", typeAtt, it.next());\n    assertFalse(\"Iterator should have 0 attributes left\", it.hasNext());\n\n    src = new AttributeSource();\n    src.addAttributeImpl(new Token());\n    // this should not add a new attribute as Token implements TermAttribute, too\n    termAtt = src.addAttribute(TermAttribute.class);\n    assertTrue(\"TermAttribute should be implemented by Token\", termAtt instanceof Token);\n    // get the Token attribute and check, that it is the only one\n    it = src.getAttributeImplsIterator();\n    Token tok = (Token) it.next();\n    assertFalse(\"There should be only one attribute implementation instance\", it.hasNext());\n    \n    termAtt.setTermBuffer(\"TestTerm\");\n    assertEquals(\"Token should only printed once\", \"(\"+tok.toString()+\")\", src.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}