{"path":"lucene/core/src/java/org/apache/lucene/document/Document#getFields(String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Document#getFields(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/Document#getFields(String).mjava","sourceNew":"  /**\n   * Returns an array of {@link IndexableField}s with the given name.\n   * This method returns an empty array when there are no\n   * matching fields.  It never returns null.\n   *\n   * @param name the name of the field\n   * @return a <code>Fieldable[]</code> array\n   */\n  public IndexableField[] getFields(String name) {\n    List<IndexableField> result = new ArrayList<IndexableField>();\n    for (IndexableField field : fields) {\n      if (field.name().equals(name)) {\n        result.add(field);\n      }\n    }\n\n    return result.toArray(new IndexableField[result.size()]);\n  }\n\n","sourceOld":"  /**\n   * Returns an array of {@link IndexableField}s with the given name.\n   * This method returns an empty array when there are no\n   * matching fields.  It never returns null.\n   *\n   * @param name the name of the field\n   * @return a <code>Fieldable[]</code> array\n   */\n  public IndexableField[] getFields(String name) {\n    List<IndexableField> result = new ArrayList<IndexableField>();\n    for (IndexableField field : fields) {\n      if (field.name().equals(name)) {\n        result.add(field);\n      }\n    }\n\n    return result.toArray(new IndexableField[result.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"409324b31a1419d7c05a38211168cf317e39be77","date":1344866765,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Document#getFields(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Document#getFields(String).mjava","sourceNew":"  /**\n   * Returns an array of {@link IndexableField}s with the given name.\n   * This method returns an empty array when there are no\n   * matching fields.  It never returns null.\n   *\n   * @param name the name of the field\n   * @return a <code>Fieldable[]</code> array\n   */\n  public Field[] getFields(String name) {\n    List<Field> result = new ArrayList<Field>();\n    for (Field field : fields) {\n      if (field.name().equals(name)) {\n        result.add(field);\n      }\n    }\n\n    return result.toArray(new Field[result.size()]);\n  }\n\n","sourceOld":"  /**\n   * Returns an array of {@link IndexableField}s with the given name.\n   * This method returns an empty array when there are no\n   * matching fields.  It never returns null.\n   *\n   * @param name the name of the field\n   * @return a <code>Fieldable[]</code> array\n   */\n  public IndexableField[] getFields(String name) {\n    List<IndexableField> result = new ArrayList<IndexableField>();\n    for (IndexableField field : fields) {\n      if (field.name().equals(name)) {\n        result.add(field);\n      }\n    }\n\n    return result.toArray(new IndexableField[result.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Document#getFields(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Document#getFields(String).mjava","sourceNew":"  /**\n   * Returns an array of {@link IndexableField}s with the given name.\n   * This method returns an empty array when there are no\n   * matching fields.  It never returns null.\n   *\n   * @param name the name of the field\n   * @return a <code>Fieldable[]</code> array\n   */\n  public Field[] getFields(String name) {\n    List<Field> result = new ArrayList<Field>();\n    for (Field field : fields) {\n      if (field.name().equals(name)) {\n        result.add(field);\n      }\n    }\n\n    return result.toArray(new Field[result.size()]);\n  }\n\n","sourceOld":"  /**\n   * Returns an array of {@link IndexableField}s with the given name.\n   * This method returns an empty array when there are no\n   * matching fields.  It never returns null.\n   *\n   * @param name the name of the field\n   * @return a <code>Fieldable[]</code> array\n   */\n  public IndexableField[] getFields(String name) {\n    List<IndexableField> result = new ArrayList<IndexableField>();\n    for (IndexableField field : fields) {\n      if (field.name().equals(name)) {\n        result.add(field);\n      }\n    }\n\n    return result.toArray(new IndexableField[result.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7700602b07ba0daa0256f95affa493eb41629722","date":1347547529,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Document#getFields(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Document#getFields(String).mjava","sourceNew":"  /**\n   * Returns an array of {@link IndexableField}s with the given name.\n   * This method returns an empty array when there are no\n   * matching fields.  It never returns null.\n   *\n   * @param name the name of the field\n   * @return a <code>Field[]</code> array\n   */\n  public Field[] getFields(String name) {\n    List<Field> result = new ArrayList<Field>();\n    for (Field field : fields) {\n      if (field.name().equals(name)) {\n        result.add(field);\n      }\n    }\n\n    return result.toArray(new Field[result.size()]);\n  }\n\n","sourceOld":"  /**\n   * Returns an array of {@link IndexableField}s with the given name.\n   * This method returns an empty array when there are no\n   * matching fields.  It never returns null.\n   *\n   * @param name the name of the field\n   * @return a <code>Fieldable[]</code> array\n   */\n  public Field[] getFields(String name) {\n    List<Field> result = new ArrayList<Field>();\n    for (Field field : fields) {\n      if (field.name().equals(name)) {\n        result.add(field);\n      }\n    }\n\n    return result.toArray(new Field[result.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Document#getFields(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Document#getFields(String).mjava","sourceNew":"  /**\n   * Returns an array of {@link IndexableField}s with the given name.\n   * This method returns an empty array when there are no\n   * matching fields.  It never returns null.\n   *\n   * @param name the name of the field\n   * @return a <code>Field[]</code> array\n   */\n  public Field[] getFields(String name) {\n    List<Field> result = new ArrayList<>();\n    for (Field field : fields) {\n      if (field.name().equals(name)) {\n        result.add(field);\n      }\n    }\n\n    return result.toArray(new Field[result.size()]);\n  }\n\n","sourceOld":"  /**\n   * Returns an array of {@link IndexableField}s with the given name.\n   * This method returns an empty array when there are no\n   * matching fields.  It never returns null.\n   *\n   * @param name the name of the field\n   * @return a <code>Field[]</code> array\n   */\n  public Field[] getFields(String name) {\n    List<Field> result = new ArrayList<Field>();\n    for (Field field : fields) {\n      if (field.name().equals(name)) {\n        result.add(field);\n      }\n    }\n\n    return result.toArray(new Field[result.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Document#getFields(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Document#getFields(String).mjava","sourceNew":"  /**\n   * Returns an array of {@link IndexableField}s with the given name.\n   * This method returns an empty array when there are no\n   * matching fields.  It never returns null.\n   *\n   * @param name the name of the field\n   * @return a <code>Field[]</code> array\n   */\n  public IndexableField[] getFields(String name) {\n    List<IndexableField> result = new ArrayList<>();\n    for (IndexableField field : fields) {\n      if (field.name().equals(name)) {\n        result.add(field);\n      }\n    }\n\n    return result.toArray(new IndexableField[result.size()]);\n  }\n\n","sourceOld":"  /**\n   * Returns an array of {@link IndexableField}s with the given name.\n   * This method returns an empty array when there are no\n   * matching fields.  It never returns null.\n   *\n   * @param name the name of the field\n   * @return a <code>Field[]</code> array\n   */\n  public Field[] getFields(String name) {\n    List<Field> result = new ArrayList<>();\n    for (Field field : fields) {\n      if (field.name().equals(name)) {\n        result.add(field);\n      }\n    }\n\n    return result.toArray(new Field[result.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"409324b31a1419d7c05a38211168cf317e39be77":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7700602b07ba0daa0256f95affa493eb41629722"],"1d028314cced5858683a1bb4741423d0f934257b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","409324b31a1419d7c05a38211168cf317e39be77"],"7700602b07ba0daa0256f95affa493eb41629722":["1d028314cced5858683a1bb4741423d0f934257b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"409324b31a1419d7c05a38211168cf317e39be77":["1d028314cced5858683a1bb4741423d0f934257b"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"1d028314cced5858683a1bb4741423d0f934257b":["7700602b07ba0daa0256f95affa493eb41629722"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["409324b31a1419d7c05a38211168cf317e39be77","1d028314cced5858683a1bb4741423d0f934257b"],"7700602b07ba0daa0256f95affa493eb41629722":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}