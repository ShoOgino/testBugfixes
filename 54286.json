{"path":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#internalComponentRelateTriangle(double,double,double,double,double,double).mjava","commits":[{"id":"e4fccad460342b1af30cb328cc8297751a218d78","date":1541177339,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#internalComponentRelateTriangle(double,double,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  private Relation internalComponentRelateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    // compute bounding box of triangle\n    double minLat = StrictMath.min(StrictMath.min(ay, by), cy);\n    double minLon = StrictMath.min(StrictMath.min(ax, bx), cx);\n    double maxLat = StrictMath.max(StrictMath.max(ay, by), cy);\n    double maxLon = StrictMath.max(StrictMath.max(ax, bx), cx);\n    if (maxLon < this.minLon || minLon > this.maxLon || maxLat < this.minLat || minLat > this.maxLat) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n\n    Relation shapeRelation = componentRelateTriangle(ax, ay, bx, by, cx, cy);\n    if (shapeRelation != null) {\n      return shapeRelation;\n    }\n\n    // we cross\n    if (tree.crossesTriangle(ax, ay, bx, by, cx, cy)) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a5ee4d410ec4b99dc713f05e20a22e802b89a92f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2876300d536c5dc264af3b279464bb01bd71f3a0","date":1548228350,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#internalComponentRelateTriangle(double,double,double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#internalComponentRelateTriangle(double,double,double,double,double,double).mjava","sourceNew":"  private Relation internalComponentRelateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    // compute bounding box of triangle\n    double minLat = StrictMath.min(StrictMath.min(ay, by), cy);\n    double minLon = StrictMath.min(StrictMath.min(ax, bx), cx);\n    double maxLat = StrictMath.max(StrictMath.max(ay, by), cy);\n    double maxLon = StrictMath.max(StrictMath.max(ax, bx), cx);\n    if (maxLon < this.minLon || minLon > this.maxLon || maxLat < this.minLat || minLat > this.maxLat) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n\n    Relation shapeRelation = componentRelateTriangle(ax, ay, bx, by, cx, cy);\n    if (shapeRelation != null) {\n      return shapeRelation;\n    }\n\n    // we cross\n    if (tree.crossesTriangle(ax, ay, bx, by, cx, cy)) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n\n    if (pointInTriangle(tree.lon1, tree.lat1, ax, ay, bx, by, cx, cy) == true) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n\n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","sourceOld":"  private Relation internalComponentRelateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    // compute bounding box of triangle\n    double minLat = StrictMath.min(StrictMath.min(ay, by), cy);\n    double minLon = StrictMath.min(StrictMath.min(ax, bx), cx);\n    double maxLat = StrictMath.max(StrictMath.max(ay, by), cy);\n    double maxLon = StrictMath.max(StrictMath.max(ax, bx), cx);\n    if (maxLon < this.minLon || minLon > this.maxLon || maxLat < this.minLat || minLat > this.maxLat) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n\n    Relation shapeRelation = componentRelateTriangle(ax, ay, bx, by, cx, cy);\n    if (shapeRelation != null) {\n      return shapeRelation;\n    }\n\n    // we cross\n    if (tree.crossesTriangle(ax, ay, bx, by, cx, cy)) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2682a1cd25864ccdc1b44bf047bd08700f28ba06","date":1548321910,"type":3,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#internalComponentRelateTriangle(double,double,double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#internalComponentRelateTriangle(double,double,double,double,double,double).mjava","sourceNew":"  private Relation internalComponentRelateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    // compute bounding box of triangle\n    double minLat = StrictMath.min(StrictMath.min(ay, by), cy);\n    double minLon = StrictMath.min(StrictMath.min(ax, bx), cx);\n    double maxLat = StrictMath.max(StrictMath.max(ay, by), cy);\n    double maxLon = StrictMath.max(StrictMath.max(ax, bx), cx);\n    if (maxLon < this.minLon || minLon > this.maxLon || maxLat < this.minLat || minLat > this.maxLat) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n\n    Relation shapeRelation = componentRelateTriangle(ax, ay, bx, by, cx, cy);\n    if (shapeRelation != null) {\n      return shapeRelation;\n    }\n\n    // we cross\n    if (tree.crossesTriangle(ax, ay, bx, by, cx, cy)) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n\n    if (pointInTriangle(tree.lon1, tree.lat1, ax, ay, bx, by, cx, cy) == true) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n\n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","sourceOld":"  private Relation internalComponentRelateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    // compute bounding box of triangle\n    double minLat = StrictMath.min(StrictMath.min(ay, by), cy);\n    double minLon = StrictMath.min(StrictMath.min(ax, bx), cx);\n    double maxLat = StrictMath.max(StrictMath.max(ay, by), cy);\n    double maxLon = StrictMath.max(StrictMath.max(ax, bx), cx);\n    if (maxLon < this.minLon || minLon > this.maxLon || maxLat < this.minLat || minLat > this.maxLat) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n\n    Relation shapeRelation = componentRelateTriangle(ax, ay, bx, by, cx, cy);\n    if (shapeRelation != null) {\n      return shapeRelation;\n    }\n\n    // we cross\n    if (tree.crossesTriangle(ax, ay, bx, by, cx, cy)) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5ee4d410ec4b99dc713f05e20a22e802b89a92f","date":1548973182,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#internalComponentRelateTriangle(double,double,double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#internalComponentRelateTriangle(double,double,double,double,double,double).mjava","sourceNew":"  private Relation internalComponentRelateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    // compute bounding box of triangle\n    double minLat = StrictMath.min(StrictMath.min(ay, by), cy);\n    double minLon = StrictMath.min(StrictMath.min(ax, bx), cx);\n    double maxLat = StrictMath.max(StrictMath.max(ay, by), cy);\n    double maxLon = StrictMath.max(StrictMath.max(ax, bx), cx);\n    if (maxLon < this.minLon || minLon > this.maxLon || maxLat < this.minLat || minLat > this.maxLat) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n\n    Relation shapeRelation = componentRelateTriangle(ax, ay, bx, by, cx, cy);\n    if (shapeRelation != null) {\n      return shapeRelation;\n    }\n\n    // we cross\n    if ((shapeRelation = tree.relateTriangle(ax, ay, bx, by, cx, cy)) != Relation.CELL_OUTSIDE_QUERY) {\n      return shapeRelation;\n    }\n\n    if (pointInTriangle(tree.lon1, tree.lat1, ax, ay, bx, by, cx, cy) == true) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n\n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","sourceOld":"  private Relation internalComponentRelateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    // compute bounding box of triangle\n    double minLat = StrictMath.min(StrictMath.min(ay, by), cy);\n    double minLon = StrictMath.min(StrictMath.min(ax, bx), cx);\n    double maxLat = StrictMath.max(StrictMath.max(ay, by), cy);\n    double maxLon = StrictMath.max(StrictMath.max(ax, bx), cx);\n    if (maxLon < this.minLon || minLon > this.maxLon || maxLat < this.minLat || minLat > this.maxLat) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n\n    Relation shapeRelation = componentRelateTriangle(ax, ay, bx, by, cx, cy);\n    if (shapeRelation != null) {\n      return shapeRelation;\n    }\n\n    // we cross\n    if (tree.crossesTriangle(ax, ay, bx, by, cx, cy)) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n\n    if (pointInTriangle(tree.lon1, tree.lat1, ax, ay, bx, by, cx, cy) == true) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n\n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","bugFix":["e4fccad460342b1af30cb328cc8297751a218d78"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1277bce5122ddd82fb8cce58045ae85df0714a4","date":1549639178,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#internalComponentRelateTriangle(double,double,double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#internalComponentRelateTriangle(double,double,double,double,double,double).mjava","sourceNew":"  private Relation internalComponentRelateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    // compute bounding box of triangle\n    double minLat = StrictMath.min(StrictMath.min(ay, by), cy);\n    double minLon = StrictMath.min(StrictMath.min(ax, bx), cx);\n    double maxLat = StrictMath.max(StrictMath.max(ay, by), cy);\n    double maxLon = StrictMath.max(StrictMath.max(ax, bx), cx);\n    if (maxLon < this.minLon || minLon > this.maxLon || maxLat < this.minLat || minLat > this.maxLat) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    return componentRelateTriangle(ax, ay, bx, by, cx, cy);\n  }\n\n","sourceOld":"  private Relation internalComponentRelateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    // compute bounding box of triangle\n    double minLat = StrictMath.min(StrictMath.min(ay, by), cy);\n    double minLon = StrictMath.min(StrictMath.min(ax, bx), cx);\n    double maxLat = StrictMath.max(StrictMath.max(ay, by), cy);\n    double maxLon = StrictMath.max(StrictMath.max(ax, bx), cx);\n    if (maxLon < this.minLon || minLon > this.maxLon || maxLat < this.minLat || minLat > this.maxLat) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n\n    Relation shapeRelation = componentRelateTriangle(ax, ay, bx, by, cx, cy);\n    if (shapeRelation != null) {\n      return shapeRelation;\n    }\n\n    // we cross\n    if ((shapeRelation = tree.relateTriangle(ax, ay, bx, by, cx, cy)) != Relation.CELL_OUTSIDE_QUERY) {\n      return shapeRelation;\n    }\n\n    if (pointInTriangle(tree.lon1, tree.lat1, ax, ay, bx, by, cx, cy) == true) {\n      return Relation.CELL_CROSSES_QUERY;\n    }\n\n    return Relation.CELL_OUTSIDE_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1ecb4377bcd108b858446b50f3696ca50f94409","date":1555611307,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#internalComponentRelateTriangle(double,double,double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#internalComponentRelateTriangle(double,double,double,double,double,double).mjava","sourceNew":"  private Relation internalComponentRelateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    // compute bounding box of triangle\n    double minLat = StrictMath.min(StrictMath.min(ay, by), cy);\n    double minLon = StrictMath.min(StrictMath.min(ax, bx), cx);\n    double maxLat = StrictMath.max(StrictMath.max(ay, by), cy);\n    double maxLon = StrictMath.max(StrictMath.max(ax, bx), cx);\n    if (maxLon < this.minLon || minLon > this.maxLon || maxLat < this.minLat || minLat > this.maxLat) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    } else if (bx == cx && by == cy) {\n      return componentRelateTriangle(bx, by, ax, ay, cx, cy);\n    }\n    return componentRelateTriangle(ax, ay, bx, by, cx, cy);\n  }\n\n","sourceOld":"  private Relation internalComponentRelateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    // compute bounding box of triangle\n    double minLat = StrictMath.min(StrictMath.min(ay, by), cy);\n    double minLon = StrictMath.min(StrictMath.min(ax, bx), cx);\n    double maxLat = StrictMath.max(StrictMath.max(ay, by), cy);\n    double maxLon = StrictMath.max(StrictMath.max(ax, bx), cx);\n    if (maxLon < this.minLon || minLon > this.maxLon || maxLat < this.minLat || minLat > this.maxLat) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    return componentRelateTriangle(ax, ay, bx, by, cx, cy);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14bd821c908f0941102e66f07ea507abda6d7f05","date":1562698194,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#internalComponentRelateTriangle(double,double,double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#internalComponentRelateTriangle(double,double,double,double,double,double).mjava","sourceNew":"  private Relation internalComponentRelateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    // compute bounding box of triangle\n    double minLat = StrictMath.min(StrictMath.min(ay, by), cy);\n    double minLon = StrictMath.min(StrictMath.min(ax, bx), cx);\n    double maxLat = StrictMath.max(StrictMath.max(ay, by), cy);\n    double maxLon = StrictMath.max(StrictMath.max(ax, bx), cx);\n    if (maxLon < this.minLon || minLon > this.maxLon || maxLat < this.minLat || minLat > this.maxLat) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    } else if (bx == cx && by == cy) {\n      return componentRelateTriangle(bx, by, ax, ay, cx, cy);\n    } else if (ax == bx && ay == by) {\n      return componentRelateTriangle(bx, by, cx, cy, ax, ay);\n    }\n    return componentRelateTriangle(ax, ay, bx, by, cx, cy);\n  }\n\n","sourceOld":"  private Relation internalComponentRelateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    // compute bounding box of triangle\n    double minLat = StrictMath.min(StrictMath.min(ay, by), cy);\n    double minLon = StrictMath.min(StrictMath.min(ax, bx), cx);\n    double maxLat = StrictMath.max(StrictMath.max(ay, by), cy);\n    double maxLon = StrictMath.max(StrictMath.max(ax, bx), cx);\n    if (maxLon < this.minLon || minLon > this.maxLon || maxLat < this.minLat || minLat > this.maxLat) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    } else if (bx == cx && by == cy) {\n      return componentRelateTriangle(bx, by, ax, ay, cx, cy);\n    }\n    return componentRelateTriangle(ax, ay, bx, by, cx, cy);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","date":1571074565,"type":4,"author":"Ignacio Vera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#internalComponentRelateTriangle(double,double,double,double,double,double).mjava","sourceNew":null,"sourceOld":"  private Relation internalComponentRelateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    // compute bounding box of triangle\n    double minLat = StrictMath.min(StrictMath.min(ay, by), cy);\n    double minLon = StrictMath.min(StrictMath.min(ax, bx), cx);\n    double maxLat = StrictMath.max(StrictMath.max(ay, by), cy);\n    double maxLon = StrictMath.max(StrictMath.max(ax, bx), cx);\n    if (maxLon < this.minLon || minLon > this.maxLon || maxLat < this.minLat || minLat > this.maxLat) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    } else if (bx == cx && by == cy) {\n      return componentRelateTriangle(bx, by, ax, ay, cx, cy);\n    } else if (ax == bx && ay == by) {\n      return componentRelateTriangle(bx, by, cx, cy, ax, ay);\n    }\n    return componentRelateTriangle(ax, ay, bx, by, cx, cy);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":4,"author":"jimczi","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#internalComponentRelateTriangle(double,double,double,double,double,double).mjava","sourceNew":null,"sourceOld":"  private Relation internalComponentRelateTriangle(double ax, double ay, double bx, double by, double cx, double cy) {\n    // compute bounding box of triangle\n    double minLat = StrictMath.min(StrictMath.min(ay, by), cy);\n    double minLon = StrictMath.min(StrictMath.min(ax, bx), cx);\n    double maxLat = StrictMath.max(StrictMath.max(ay, by), cy);\n    double maxLon = StrictMath.max(StrictMath.max(ax, bx), cx);\n    if (maxLon < this.minLon || minLon > this.maxLon || maxLat < this.minLat || minLat > this.maxLat) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    } else if (bx == cx && by == cy) {\n      return componentRelateTriangle(bx, by, ax, ay, cx, cy);\n    } else if (ax == bx && ay == by) {\n      return componentRelateTriangle(bx, by, cx, cy, ax, ay);\n    }\n    return componentRelateTriangle(ax, ay, bx, by, cx, cy);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["14bd821c908f0941102e66f07ea507abda6d7f05"],"14bd821c908f0941102e66f07ea507abda6d7f05":["d1ecb4377bcd108b858446b50f3696ca50f94409"],"2876300d536c5dc264af3b279464bb01bd71f3a0":["e4fccad460342b1af30cb328cc8297751a218d78"],"d1ecb4377bcd108b858446b50f3696ca50f94409":["f1277bce5122ddd82fb8cce58045ae85df0714a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e4fccad460342b1af30cb328cc8297751a218d78":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f1277bce5122ddd82fb8cce58045ae85df0714a4":["a5ee4d410ec4b99dc713f05e20a22e802b89a92f"],"a5ee4d410ec4b99dc713f05e20a22e802b89a92f":["2876300d536c5dc264af3b279464bb01bd71f3a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"],"b0b597c65628ca9e73913a07e81691f8229bae35":["14bd821c908f0941102e66f07ea507abda6d7f05","b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":["e4fccad460342b1af30cb328cc8297751a218d78","2876300d536c5dc264af3b279464bb01bd71f3a0"]},"commit2Childs":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"14bd821c908f0941102e66f07ea507abda6d7f05":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","b0b597c65628ca9e73913a07e81691f8229bae35"],"2876300d536c5dc264af3b279464bb01bd71f3a0":["a5ee4d410ec4b99dc713f05e20a22e802b89a92f","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"d1ecb4377bcd108b858446b50f3696ca50f94409":["14bd821c908f0941102e66f07ea507abda6d7f05"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e4fccad460342b1af30cb328cc8297751a218d78"],"e4fccad460342b1af30cb328cc8297751a218d78":["2876300d536c5dc264af3b279464bb01bd71f3a0","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"f1277bce5122ddd82fb8cce58045ae85df0714a4":["d1ecb4377bcd108b858446b50f3696ca50f94409"],"a5ee4d410ec4b99dc713f05e20a22e802b89a92f":["f1277bce5122ddd82fb8cce58045ae85df0714a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}