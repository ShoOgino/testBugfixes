{"path":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#DisjunctionMaxQuery(Collection,float).mjava","commits":[{"id":"56a4f6c0b5b34949ecbc9153ebc1a71ab870bb15","date":1132291431,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#DisjunctionMaxQuery(Collection,float).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#DisjunctionMaxQuery(Iterable,float).mjava","sourceNew":"  /**\r\n   * Creates a new DisjunctionMaxQuery\r\n   * @param disjuncts a Collection<Query> of all the disjuncts to add\r\n   * @param tieBreakerMultiplier   the weight to give to each matching non-maximum disjunct\r\n   */\r\n  public DisjunctionMaxQuery(Collection disjuncts, float tieBreakerMultiplier) {\r\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\r\n    add(disjuncts);\r\n  }\r\n\n","sourceOld":"  /**\r\n   * Creates a new DisjunctionMaxQuery\r\n   * @param disjuncts an Iterable<Query> of all the disjuncts to add\r\n   * @param tieBreakerMultiplier   the weight to give to each matching non-maximum disjunct\r\n   */\r\n  public DisjunctionMaxQuery(Iterable disjuncts, float tieBreakerMultiplier) {\r\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\r\n    add(disjuncts);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2123bddbd65dea198cac380540636ce43a880403","date":1211269254,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#DisjunctionMaxQuery(Collection,float).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#DisjunctionMaxQuery(Collection,float).mjava","sourceNew":"  /**\n   * Creates a new DisjunctionMaxQuery\n   * @param disjuncts a Collection<Query> of all the disjuncts to add\n   * @param tieBreakerMultiplier   the weight to give to each matching non-maximum disjunct\n   */\n  public DisjunctionMaxQuery(Collection disjuncts, float tieBreakerMultiplier) {\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    add(disjuncts);\n  }\n\n","sourceOld":"  /**\r\n   * Creates a new DisjunctionMaxQuery\r\n   * @param disjuncts a Collection<Query> of all the disjuncts to add\r\n   * @param tieBreakerMultiplier   the weight to give to each matching non-maximum disjunct\r\n   */\r\n  public DisjunctionMaxQuery(Collection disjuncts, float tieBreakerMultiplier) {\r\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\r\n    add(disjuncts);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0d3ac29cb12b76130b702427d6bcd355e68d126","date":1255699234,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#DisjunctionMaxQuery(Collection[Query],float).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#DisjunctionMaxQuery(Collection,float).mjava","sourceNew":"  /**\n   * Creates a new DisjunctionMaxQuery\n   * @param disjuncts a Collection<Query> of all the disjuncts to add\n   * @param tieBreakerMultiplier   the weight to give to each matching non-maximum disjunct\n   */\n  public DisjunctionMaxQuery(Collection<Query> disjuncts, float tieBreakerMultiplier) {\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    add(disjuncts);\n  }\n\n","sourceOld":"  /**\n   * Creates a new DisjunctionMaxQuery\n   * @param disjuncts a Collection<Query> of all the disjuncts to add\n   * @param tieBreakerMultiplier   the weight to give to each matching non-maximum disjunct\n   */\n  public DisjunctionMaxQuery(Collection disjuncts, float tieBreakerMultiplier) {\n    this.tieBreakerMultiplier = tieBreakerMultiplier;\n    add(disjuncts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"56a4f6c0b5b34949ecbc9153ebc1a71ab870bb15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e0d3ac29cb12b76130b702427d6bcd355e68d126":["2123bddbd65dea198cac380540636ce43a880403"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2123bddbd65dea198cac380540636ce43a880403":["56a4f6c0b5b34949ecbc9153ebc1a71ab870bb15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e0d3ac29cb12b76130b702427d6bcd355e68d126"]},"commit2Childs":{"56a4f6c0b5b34949ecbc9153ebc1a71ab870bb15":["2123bddbd65dea198cac380540636ce43a880403"],"e0d3ac29cb12b76130b702427d6bcd355e68d126":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["56a4f6c0b5b34949ecbc9153ebc1a71ab870bb15"],"2123bddbd65dea198cac380540636ce43a880403":["e0d3ac29cb12b76130b702427d6bcd355e68d126"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}