{"path":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesStandalone#testComputeInPlaceUpdatableFields().mjava","commits":[{"id":"415bbbe7da8065dd3c477bdc3c703c6425622998","date":1485393793,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesStandalone#testComputeInPlaceUpdatableFields().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * @see #callComputeInPlaceUpdatableFields\n   * @see AtomicUpdateDocumentMerger#computeInPlaceUpdatableFields \n   */\n  @Test\n  public void testComputeInPlaceUpdatableFields() throws Exception {\n    Set<String> inPlaceUpdatedFields = new HashSet<String>();\n\n    // these asserts should hold true regardless of type, or wether the field has a default\n    List<String> fieldsToCheck = Arrays.asList(\"inplace_updatable_float\",\n                                               \"inplace_updatable_int\",\n                                               \"inplace_updatable_float_with_default\",\n                                               \"inplace_updatable_int_with_default\");\n    Collections.shuffle(fieldsToCheck, random()); // ... and regardless of order checked\n    for (String field : fieldsToCheck) {\n      // In-place updatable field updated before it exists SHOULD NOT BE in-place updated:\n      inPlaceUpdatedFields = callComputeInPlaceUpdatableFields(sdoc(\"id\", \"1\", \"_version_\", 42L,\n                                                                    field, map(\"set\", 10)));\n      assertFalse(field, inPlaceUpdatedFields.contains(field));\n      \n      // In-place updatable field updated after it exists SHOULD BE in-place updated:\n      addAndGetVersion(sdoc(\"id\", \"1\", field, \"0\"), params()); // setting up the dv\n      inPlaceUpdatedFields = callComputeInPlaceUpdatableFields(sdoc(\"id\", \"1\", \"_version_\", 42L,\n                                                                    field, map(\"set\", 10)));\n      assertTrue(field, inPlaceUpdatedFields.contains(field));\n\n      inPlaceUpdatedFields = callComputeInPlaceUpdatableFields(sdoc(\"id\", \"1\", \"_version_\", 42L,\n                                                                    field, map(\"inc\", 10)));\n      assertTrue(field, inPlaceUpdatedFields.contains(field));\n\n      final String altFieldWithDefault = field.contains(\"float\") ?\n        \"inplace_updatable_int_with_default\" : \"inplace_updatable_int_with_default\";\n      \n      // Updating an in-place updatable field (with a default) for the first time.\n      // DV for it should have been already created when first document was indexed (above),\n      // since it has a default value\n      inPlaceUpdatedFields = callComputeInPlaceUpdatableFields(sdoc(\"id\", \"1\", \"_version_\", 42L,\n                                                                    altFieldWithDefault, map(\"set\", 10)));\n      assertTrue(field + \" -> \" + altFieldWithDefault, inPlaceUpdatedFields.contains(altFieldWithDefault));\n      \n      deleteAllAndCommit();\n    }\n  \n    // Non in-place updates\n    addAndGetVersion(sdoc(\"id\", \"1\", \"stored_i\", \"0\"), params()); // setting up the dv\n    assertTrue(\"stored field updated\",\n               callComputeInPlaceUpdatableFields(sdoc(\"id\", \"1\", \"_version_\", 42L,\n                                                      \"stored_i\", map(\"inc\", 1))).isEmpty());\n    \n    assertTrue(\"full document update\",\n               callComputeInPlaceUpdatableFields(sdoc(\"id\", \"1\", \"_version_\", 42L,\n                                                      \"inplace_updatable_int_with_default\", \"100\")).isEmpty());\n  \n    assertTrue(\"non existent dynamic dv field updated first time\",\n               callComputeInPlaceUpdatableFields(sdoc(\"id\", \"1\", \"_version_\", 42L,\n                                                      \"new_updatable_int_i_dvo\", map(\"set\", 10))).isEmpty());\n    \n    // After adding a full document with the dynamic dv field, in-place update should work\n    addAndGetVersion(sdoc(\"id\", \"2\", \"new_updatable_int_i_dvo\", \"0\"), params()); // setting up the dv\n    if (random().nextBoolean()) {\n      assertU(commit(\"softCommit\", \"false\"));\n    }\n    inPlaceUpdatedFields = callComputeInPlaceUpdatableFields(sdoc(\"id\", \"2\", \"_version_\", 42L,\n                                                                  \"new_updatable_int_i_dvo\", map(\"set\", 10)));\n    assertTrue(inPlaceUpdatedFields.contains(\"new_updatable_int_i_dvo\"));\n\n    // for copy fields, regardless of wether the source & target support inplace updates,\n    // it won't be inplace if the DVs don't exist yet...\n    assertTrue(\"inplace fields should be empty when doc has no copyfield src values yet\",\n               callComputeInPlaceUpdatableFields(sdoc(\"id\", \"1\", \"_version_\", 42L,\n                                                      \"copyfield1_src__both_updatable\", map(\"set\", 1),\n                                                      \"copyfield2_src__only_src_updatable\", map(\"set\", 2))).isEmpty());\n\n    // now add a doc that *does* have the src field for each copyfield...\n    addAndGetVersion(sdoc(\"id\", \"3\",\n                          \"copyfield1_src__both_updatable\", -13,\n                          \"copyfield2_src__only_src_updatable\", -15), params()); \n    if (random().nextBoolean()) {\n      assertU(commit(\"softCommit\", \"false\"));\n    }\n    \n    // If a supported dv field has a copyField target which is supported, it should be an in-place update\n    inPlaceUpdatedFields = callComputeInPlaceUpdatableFields(sdoc(\"id\", \"3\", \"_version_\", 42L,\n                                                                  \"copyfield1_src__both_updatable\", map(\"set\", 10)));\n    assertTrue(inPlaceUpdatedFields.contains(\"copyfield1_src__both_updatable\"));\n\n    // If a supported dv field has a copyField target which is not supported, it should not be an in-place update\n    inPlaceUpdatedFields = callComputeInPlaceUpdatableFields(sdoc(\"id\", \"3\", \"_version_\", 42L,\n                                                                  \"copyfield2_src__only_src_updatable\", map(\"set\", 10)));\n    assertTrue(inPlaceUpdatedFields.isEmpty());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesStandalone#testComputeInPlaceUpdatableFields().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * @see #callComputeInPlaceUpdatableFields\n   * @see AtomicUpdateDocumentMerger#computeInPlaceUpdatableFields \n   */\n  @Test\n  public void testComputeInPlaceUpdatableFields() throws Exception {\n    Set<String> inPlaceUpdatedFields = new HashSet<String>();\n\n    // these asserts should hold true regardless of type, or wether the field has a default\n    List<String> fieldsToCheck = Arrays.asList(\"inplace_updatable_float\",\n                                               \"inplace_updatable_int\",\n                                               \"inplace_updatable_float_with_default\",\n                                               \"inplace_updatable_int_with_default\");\n    Collections.shuffle(fieldsToCheck, random()); // ... and regardless of order checked\n    for (String field : fieldsToCheck) {\n      // In-place updatable field updated before it exists SHOULD NOT BE in-place updated:\n      inPlaceUpdatedFields = callComputeInPlaceUpdatableFields(sdoc(\"id\", \"1\", \"_version_\", 42L,\n                                                                    field, map(\"set\", 10)));\n      assertFalse(field, inPlaceUpdatedFields.contains(field));\n      \n      // In-place updatable field updated after it exists SHOULD BE in-place updated:\n      addAndGetVersion(sdoc(\"id\", \"1\", field, \"0\"), params()); // setting up the dv\n      inPlaceUpdatedFields = callComputeInPlaceUpdatableFields(sdoc(\"id\", \"1\", \"_version_\", 42L,\n                                                                    field, map(\"set\", 10)));\n      assertTrue(field, inPlaceUpdatedFields.contains(field));\n\n      inPlaceUpdatedFields = callComputeInPlaceUpdatableFields(sdoc(\"id\", \"1\", \"_version_\", 42L,\n                                                                    field, map(\"inc\", 10)));\n      assertTrue(field, inPlaceUpdatedFields.contains(field));\n\n      final String altFieldWithDefault = field.contains(\"float\") ?\n        \"inplace_updatable_int_with_default\" : \"inplace_updatable_int_with_default\";\n      \n      // Updating an in-place updatable field (with a default) for the first time.\n      // DV for it should have been already created when first document was indexed (above),\n      // since it has a default value\n      inPlaceUpdatedFields = callComputeInPlaceUpdatableFields(sdoc(\"id\", \"1\", \"_version_\", 42L,\n                                                                    altFieldWithDefault, map(\"set\", 10)));\n      assertTrue(field + \" -> \" + altFieldWithDefault, inPlaceUpdatedFields.contains(altFieldWithDefault));\n      \n      deleteAllAndCommit();\n    }\n  \n    // Non in-place updates\n    addAndGetVersion(sdoc(\"id\", \"1\", \"stored_i\", \"0\"), params()); // setting up the dv\n    assertTrue(\"stored field updated\",\n               callComputeInPlaceUpdatableFields(sdoc(\"id\", \"1\", \"_version_\", 42L,\n                                                      \"stored_i\", map(\"inc\", 1))).isEmpty());\n    \n    assertTrue(\"full document update\",\n               callComputeInPlaceUpdatableFields(sdoc(\"id\", \"1\", \"_version_\", 42L,\n                                                      \"inplace_updatable_int_with_default\", \"100\")).isEmpty());\n  \n    assertTrue(\"non existent dynamic dv field updated first time\",\n               callComputeInPlaceUpdatableFields(sdoc(\"id\", \"1\", \"_version_\", 42L,\n                                                      \"new_updatable_int_i_dvo\", map(\"set\", 10))).isEmpty());\n    \n    // After adding a full document with the dynamic dv field, in-place update should work\n    addAndGetVersion(sdoc(\"id\", \"2\", \"new_updatable_int_i_dvo\", \"0\"), params()); // setting up the dv\n    if (random().nextBoolean()) {\n      assertU(commit(\"softCommit\", \"false\"));\n    }\n    inPlaceUpdatedFields = callComputeInPlaceUpdatableFields(sdoc(\"id\", \"2\", \"_version_\", 42L,\n                                                                  \"new_updatable_int_i_dvo\", map(\"set\", 10)));\n    assertTrue(inPlaceUpdatedFields.contains(\"new_updatable_int_i_dvo\"));\n\n    // for copy fields, regardless of wether the source & target support inplace updates,\n    // it won't be inplace if the DVs don't exist yet...\n    assertTrue(\"inplace fields should be empty when doc has no copyfield src values yet\",\n               callComputeInPlaceUpdatableFields(sdoc(\"id\", \"1\", \"_version_\", 42L,\n                                                      \"copyfield1_src__both_updatable\", map(\"set\", 1),\n                                                      \"copyfield2_src__only_src_updatable\", map(\"set\", 2))).isEmpty());\n\n    // now add a doc that *does* have the src field for each copyfield...\n    addAndGetVersion(sdoc(\"id\", \"3\",\n                          \"copyfield1_src__both_updatable\", -13,\n                          \"copyfield2_src__only_src_updatable\", -15), params()); \n    if (random().nextBoolean()) {\n      assertU(commit(\"softCommit\", \"false\"));\n    }\n    \n    // If a supported dv field has a copyField target which is supported, it should be an in-place update\n    inPlaceUpdatedFields = callComputeInPlaceUpdatableFields(sdoc(\"id\", \"3\", \"_version_\", 42L,\n                                                                  \"copyfield1_src__both_updatable\", map(\"set\", 10)));\n    assertTrue(inPlaceUpdatedFields.contains(\"copyfield1_src__both_updatable\"));\n\n    // If a supported dv field has a copyField target which is not supported, it should not be an in-place update\n    inPlaceUpdatedFields = callComputeInPlaceUpdatableFields(sdoc(\"id\", \"3\", \"_version_\", 42L,\n                                                                  \"copyfield2_src__only_src_updatable\", map(\"set\", 10)));\n    assertTrue(inPlaceUpdatedFields.isEmpty());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c14208216474e190dcec6327766fd749b8aa965","date":1563380115,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesStandalone#testComputeInPlaceUpdatableFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesStandalone#testComputeInPlaceUpdatableFields().mjava","sourceNew":"  /** \n   * @see #callComputeInPlaceUpdatableFields\n   * @see AtomicUpdateDocumentMerger#computeInPlaceUpdatableFields \n   */\n  @Test\n  public void testComputeInPlaceUpdatableFields() throws Exception {\n    Set<String> inPlaceUpdatedFields = new HashSet<String>();\n\n    // these asserts should hold true regardless of type, or wether the field has a default\n    List<String> fieldsToCheck = Arrays.asList(\"inplace_updatable_float\",\n                                               \"inplace_updatable_int\",\n                                               \"inplace_updatable_float_with_default\",\n                                               \"inplace_updatable_int_with_default\");\n    Collections.shuffle(fieldsToCheck, random()); // ... and regardless of order checked\n    for (String field : fieldsToCheck) {\n      // In-place updatable field updated before it exists SHOULD NOW BE in-place updated (since LUCENE-8316):\n      inPlaceUpdatedFields = callComputeInPlaceUpdatableFields(sdoc(\"id\", \"1\", \"_version_\", 42L,\n                                                                    field, map(\"set\", 10)));\n      assertTrue(field, inPlaceUpdatedFields.contains(field));\n      \n      // In-place updatable field updated after it exists SHOULD BE in-place updated:\n      addAndGetVersion(sdoc(\"id\", \"1\", field, \"0\"), params()); // setting up the dv\n      inPlaceUpdatedFields = callComputeInPlaceUpdatableFields(sdoc(\"id\", \"1\", \"_version_\", 42L,\n                                                                    field, map(\"set\", 10)));\n      assertTrue(field, inPlaceUpdatedFields.contains(field));\n\n      inPlaceUpdatedFields = callComputeInPlaceUpdatableFields(sdoc(\"id\", \"1\", \"_version_\", 42L,\n                                                                    field, map(\"inc\", 10)));\n      assertTrue(field, inPlaceUpdatedFields.contains(field));\n\n      final String altFieldWithDefault = field.contains(\"float\") ?\n        \"inplace_updatable_int_with_default\" : \"inplace_updatable_int_with_default\";\n      \n      // Updating an in-place updatable field (with a default) for the first time.\n      // DV for it should have been already created when first document was indexed (above),\n      // since it has a default value\n      inPlaceUpdatedFields = callComputeInPlaceUpdatableFields(sdoc(\"id\", \"1\", \"_version_\", 42L,\n                                                                    altFieldWithDefault, map(\"set\", 10)));\n      assertTrue(field + \" -> \" + altFieldWithDefault, inPlaceUpdatedFields.contains(altFieldWithDefault));\n      \n      deleteAllAndCommit();\n    }\n  \n    // Non in-place updates\n    addAndGetVersion(sdoc(\"id\", \"1\", \"stored_i\", \"0\"), params()); // setting up the dv\n    assertTrue(\"stored field updated\",\n               callComputeInPlaceUpdatableFields(sdoc(\"id\", \"1\", \"_version_\", 42L,\n                                                      \"stored_i\", map(\"inc\", 1))).isEmpty());\n    \n    assertTrue(\"full document update\",\n               callComputeInPlaceUpdatableFields(sdoc(\"id\", \"1\", \"_version_\", 42L,\n                                                      \"inplace_updatable_int_with_default\", \"100\")).isEmpty());\n  \n    assertFalse(\"non existent dynamic dv field updated first time\",\n               callComputeInPlaceUpdatableFields(sdoc(\"id\", \"1\", \"_version_\", 42L,\n                                                      \"new_updatable_int_i_dvo\", map(\"set\", 10))).isEmpty());\n    \n    // After adding a full document with the dynamic dv field, in-place update should work\n    addAndGetVersion(sdoc(\"id\", \"2\", \"new_updatable_int_i_dvo\", \"0\"), params()); // setting up the dv\n    if (random().nextBoolean()) {\n      assertU(commit(\"softCommit\", \"false\"));\n    }\n    inPlaceUpdatedFields = callComputeInPlaceUpdatableFields(sdoc(\"id\", \"2\", \"_version_\", 42L,\n                                                                  \"new_updatable_int_i_dvo\", map(\"set\", 10)));\n    assertTrue(inPlaceUpdatedFields.contains(\"new_updatable_int_i_dvo\"));\n\n    // for copy fields, regardless of whether the source & target support inplace updates,\n    // it won't be inplace if the DVs don't exist yet...\n    assertTrue(\"inplace fields should be empty when doc has no copyfield src values yet\",\n               callComputeInPlaceUpdatableFields(sdoc(\"id\", \"1\", \"_version_\", 42L,\n                                                      \"copyfield1_src__both_updatable\", map(\"set\", 1),\n                                                      \"copyfield2_src__only_src_updatable\", map(\"set\", 2))).isEmpty());\n\n    // now add a doc that *does* have the src field for each copyfield...\n    addAndGetVersion(sdoc(\"id\", \"3\",\n                          \"copyfield1_src__both_updatable\", -13,\n                          \"copyfield2_src__only_src_updatable\", -15), params()); \n    if (random().nextBoolean()) {\n      assertU(commit(\"softCommit\", \"false\"));\n    }\n    \n    // If a supported dv field has a copyField target which is supported, it should be an in-place update\n    inPlaceUpdatedFields = callComputeInPlaceUpdatableFields(sdoc(\"id\", \"3\", \"_version_\", 42L,\n                                                                  \"copyfield1_src__both_updatable\", map(\"set\", 10)));\n    assertTrue(inPlaceUpdatedFields.contains(\"copyfield1_src__both_updatable\"));\n\n    // If a supported dv field has a copyField target which is not supported, it should not be an in-place update\n    inPlaceUpdatedFields = callComputeInPlaceUpdatableFields(sdoc(\"id\", \"3\", \"_version_\", 42L,\n                                                                  \"copyfield2_src__only_src_updatable\", map(\"set\", 10)));\n    assertTrue(inPlaceUpdatedFields.isEmpty());\n  }\n\n","sourceOld":"  /** \n   * @see #callComputeInPlaceUpdatableFields\n   * @see AtomicUpdateDocumentMerger#computeInPlaceUpdatableFields \n   */\n  @Test\n  public void testComputeInPlaceUpdatableFields() throws Exception {\n    Set<String> inPlaceUpdatedFields = new HashSet<String>();\n\n    // these asserts should hold true regardless of type, or wether the field has a default\n    List<String> fieldsToCheck = Arrays.asList(\"inplace_updatable_float\",\n                                               \"inplace_updatable_int\",\n                                               \"inplace_updatable_float_with_default\",\n                                               \"inplace_updatable_int_with_default\");\n    Collections.shuffle(fieldsToCheck, random()); // ... and regardless of order checked\n    for (String field : fieldsToCheck) {\n      // In-place updatable field updated before it exists SHOULD NOT BE in-place updated:\n      inPlaceUpdatedFields = callComputeInPlaceUpdatableFields(sdoc(\"id\", \"1\", \"_version_\", 42L,\n                                                                    field, map(\"set\", 10)));\n      assertFalse(field, inPlaceUpdatedFields.contains(field));\n      \n      // In-place updatable field updated after it exists SHOULD BE in-place updated:\n      addAndGetVersion(sdoc(\"id\", \"1\", field, \"0\"), params()); // setting up the dv\n      inPlaceUpdatedFields = callComputeInPlaceUpdatableFields(sdoc(\"id\", \"1\", \"_version_\", 42L,\n                                                                    field, map(\"set\", 10)));\n      assertTrue(field, inPlaceUpdatedFields.contains(field));\n\n      inPlaceUpdatedFields = callComputeInPlaceUpdatableFields(sdoc(\"id\", \"1\", \"_version_\", 42L,\n                                                                    field, map(\"inc\", 10)));\n      assertTrue(field, inPlaceUpdatedFields.contains(field));\n\n      final String altFieldWithDefault = field.contains(\"float\") ?\n        \"inplace_updatable_int_with_default\" : \"inplace_updatable_int_with_default\";\n      \n      // Updating an in-place updatable field (with a default) for the first time.\n      // DV for it should have been already created when first document was indexed (above),\n      // since it has a default value\n      inPlaceUpdatedFields = callComputeInPlaceUpdatableFields(sdoc(\"id\", \"1\", \"_version_\", 42L,\n                                                                    altFieldWithDefault, map(\"set\", 10)));\n      assertTrue(field + \" -> \" + altFieldWithDefault, inPlaceUpdatedFields.contains(altFieldWithDefault));\n      \n      deleteAllAndCommit();\n    }\n  \n    // Non in-place updates\n    addAndGetVersion(sdoc(\"id\", \"1\", \"stored_i\", \"0\"), params()); // setting up the dv\n    assertTrue(\"stored field updated\",\n               callComputeInPlaceUpdatableFields(sdoc(\"id\", \"1\", \"_version_\", 42L,\n                                                      \"stored_i\", map(\"inc\", 1))).isEmpty());\n    \n    assertTrue(\"full document update\",\n               callComputeInPlaceUpdatableFields(sdoc(\"id\", \"1\", \"_version_\", 42L,\n                                                      \"inplace_updatable_int_with_default\", \"100\")).isEmpty());\n  \n    assertTrue(\"non existent dynamic dv field updated first time\",\n               callComputeInPlaceUpdatableFields(sdoc(\"id\", \"1\", \"_version_\", 42L,\n                                                      \"new_updatable_int_i_dvo\", map(\"set\", 10))).isEmpty());\n    \n    // After adding a full document with the dynamic dv field, in-place update should work\n    addAndGetVersion(sdoc(\"id\", \"2\", \"new_updatable_int_i_dvo\", \"0\"), params()); // setting up the dv\n    if (random().nextBoolean()) {\n      assertU(commit(\"softCommit\", \"false\"));\n    }\n    inPlaceUpdatedFields = callComputeInPlaceUpdatableFields(sdoc(\"id\", \"2\", \"_version_\", 42L,\n                                                                  \"new_updatable_int_i_dvo\", map(\"set\", 10)));\n    assertTrue(inPlaceUpdatedFields.contains(\"new_updatable_int_i_dvo\"));\n\n    // for copy fields, regardless of wether the source & target support inplace updates,\n    // it won't be inplace if the DVs don't exist yet...\n    assertTrue(\"inplace fields should be empty when doc has no copyfield src values yet\",\n               callComputeInPlaceUpdatableFields(sdoc(\"id\", \"1\", \"_version_\", 42L,\n                                                      \"copyfield1_src__both_updatable\", map(\"set\", 1),\n                                                      \"copyfield2_src__only_src_updatable\", map(\"set\", 2))).isEmpty());\n\n    // now add a doc that *does* have the src field for each copyfield...\n    addAndGetVersion(sdoc(\"id\", \"3\",\n                          \"copyfield1_src__both_updatable\", -13,\n                          \"copyfield2_src__only_src_updatable\", -15), params()); \n    if (random().nextBoolean()) {\n      assertU(commit(\"softCommit\", \"false\"));\n    }\n    \n    // If a supported dv field has a copyField target which is supported, it should be an in-place update\n    inPlaceUpdatedFields = callComputeInPlaceUpdatableFields(sdoc(\"id\", \"3\", \"_version_\", 42L,\n                                                                  \"copyfield1_src__both_updatable\", map(\"set\", 10)));\n    assertTrue(inPlaceUpdatedFields.contains(\"copyfield1_src__both_updatable\"));\n\n    // If a supported dv field has a copyField target which is not supported, it should not be an in-place update\n    inPlaceUpdatedFields = callComputeInPlaceUpdatableFields(sdoc(\"id\", \"3\", \"_version_\", 42L,\n                                                                  \"copyfield2_src__only_src_updatable\", map(\"set\", 10)));\n    assertTrue(inPlaceUpdatedFields.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"598b5d23aa7c9732bf473c21a9cd309c44599394":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","415bbbe7da8065dd3c477bdc3c703c6425622998"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9c14208216474e190dcec6327766fd749b8aa965":["415bbbe7da8065dd3c477bdc3c703c6425622998"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9c14208216474e190dcec6327766fd749b8aa965"]},"commit2Childs":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["598b5d23aa7c9732bf473c21a9cd309c44599394","9c14208216474e190dcec6327766fd749b8aa965"],"598b5d23aa7c9732bf473c21a9cd309c44599394":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["415bbbe7da8065dd3c477bdc3c703c6425622998","598b5d23aa7c9732bf473c21a9cd309c44599394"],"9c14208216474e190dcec6327766fd749b8aa965":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["598b5d23aa7c9732bf473c21a9cd309c44599394","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}