{"path":"solr/core/src/java/org/apache/solr/util/hll/BigEndianAscendingWordSerializer#BigEndianAscendingWordSerializer(int,int,int).mjava","commits":[{"id":"6d8714f9ceaaff94f0968d1c2d037978c3fde569","date":1437042727,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/hll/BigEndianAscendingWordSerializer#BigEndianAscendingWordSerializer(int,int,int).mjava","pathOld":"/dev/null","sourceNew":"    // ========================================================================\n    /**\n     * @param wordLength the length in bits of the words to be serialized. Must\n     *        be greater than or equal to 1 and less than or equal to 64.\n     * @param wordCount the number of words to be serialized. Must be greater than\n     *        or equal to zero.\n     * @param bytePadding the number of leading bytes that should pad the\n     *        serialized words. Must be greater than or equal to zero.\n     */\n    public BigEndianAscendingWordSerializer(final int wordLength, final int wordCount, final int bytePadding) {\n        if((wordLength < 1) || (wordLength > 64)) {\n            throw new IllegalArgumentException(\"Word length must be >= 1 and <= 64. (was: \" + wordLength + \")\");\n        }\n        if(wordCount < 0) {\n            throw new IllegalArgumentException(\"Word count must be >= 0. (was: \" + wordCount + \")\");\n        }\n        if(bytePadding < 0) {\n            throw new IllegalArgumentException(\"Byte padding must be must be >= 0. (was: \" + bytePadding + \")\");\n        }\n\n        this.wordLength = wordLength;\n        this.wordCount = wordCount;\n\n        final long bitsRequired = (wordLength * wordCount);\n        final boolean leftoverBits = ((bitsRequired % BITS_PER_BYTE) != 0);\n        final int bytesRequired = (int)(bitsRequired / BITS_PER_BYTE) + (leftoverBits ? 1 : 0) + bytePadding;\n        bytes = new byte[bytesRequired];\n\n        bitsLeftInByte = BITS_PER_BYTE;\n        byteIndex = bytePadding;\n        wordsWritten = 0;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a81b342a33a0e68d2bb194ebcc3dfadcc69868b2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b5ee4c66244bdfcc4796a114519d47701b2c026","date":1437132013,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/hll/BigEndianAscendingWordSerializer#BigEndianAscendingWordSerializer(int,int,int).mjava","pathOld":"/dev/null","sourceNew":"    // ========================================================================\n    /**\n     * @param wordLength the length in bits of the words to be serialized. Must\n     *        be greater than or equal to 1 and less than or equal to 64.\n     * @param wordCount the number of words to be serialized. Must be greater than\n     *        or equal to zero.\n     * @param bytePadding the number of leading bytes that should pad the\n     *        serialized words. Must be greater than or equal to zero.\n     */\n    public BigEndianAscendingWordSerializer(final int wordLength, final int wordCount, final int bytePadding) {\n        if((wordLength < 1) || (wordLength > 64)) {\n            throw new IllegalArgumentException(\"Word length must be >= 1 and <= 64. (was: \" + wordLength + \")\");\n        }\n        if(wordCount < 0) {\n            throw new IllegalArgumentException(\"Word count must be >= 0. (was: \" + wordCount + \")\");\n        }\n        if(bytePadding < 0) {\n            throw new IllegalArgumentException(\"Byte padding must be must be >= 0. (was: \" + bytePadding + \")\");\n        }\n\n        this.wordLength = wordLength;\n        this.wordCount = wordCount;\n\n        final long bitsRequired = (wordLength * wordCount);\n        final boolean leftoverBits = ((bitsRequired % BITS_PER_BYTE) != 0);\n        final int bytesRequired = (int)(bitsRequired / BITS_PER_BYTE) + (leftoverBits ? 1 : 0) + bytePadding;\n        bytes = new byte[bytesRequired];\n\n        bitsLeftInByte = BITS_PER_BYTE;\n        byteIndex = bytePadding;\n        wordsWritten = 0;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a81b342a33a0e68d2bb194ebcc3dfadcc69868b2","date":1440606819,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/hll/BigEndianAscendingWordSerializer#BigEndianAscendingWordSerializer(int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/hll/BigEndianAscendingWordSerializer#BigEndianAscendingWordSerializer(int,int,int).mjava","sourceNew":"    // ========================================================================\n    /**\n     * @param wordLength the length in bits of the words to be serialized. Must\n     *        be greater than or equal to 1 and less than or equal to 64.\n     * @param wordCount the number of words to be serialized. Must be greater than\n     *        or equal to zero.\n     * @param bytePadding the number of leading bytes that should pad the\n     *        serialized words. Must be greater than or equal to zero.\n     */\n    public BigEndianAscendingWordSerializer(final int wordLength, final int wordCount, final int bytePadding) {\n        if((wordLength < 1) || (wordLength > 64)) {\n            throw new IllegalArgumentException(\"Word length must be >= 1 and <= 64. (was: \" + wordLength + \")\");\n        }\n        if(wordCount < 0) {\n            throw new IllegalArgumentException(\"Word count must be >= 0. (was: \" + wordCount + \")\");\n        }\n        if(bytePadding < 0) {\n            throw new IllegalArgumentException(\"Byte padding must be must be >= 0. (was: \" + bytePadding + \")\");\n        }\n\n        this.wordLength = wordLength;\n        this.wordCount = wordCount;\n\n        final long bitsRequired = ((long)wordLength) * ((long)wordCount);\n        final boolean leftoverBits = ((bitsRequired % BITS_PER_BYTE) != 0);\n        final int bytesRequired = (int)(bitsRequired / BITS_PER_BYTE) + (leftoverBits ? 1 : 0) + bytePadding;\n        bytes = new byte[bytesRequired];\n\n        bitsLeftInByte = BITS_PER_BYTE;\n        byteIndex = bytePadding;\n        wordsWritten = 0;\n    }\n\n","sourceOld":"    // ========================================================================\n    /**\n     * @param wordLength the length in bits of the words to be serialized. Must\n     *        be greater than or equal to 1 and less than or equal to 64.\n     * @param wordCount the number of words to be serialized. Must be greater than\n     *        or equal to zero.\n     * @param bytePadding the number of leading bytes that should pad the\n     *        serialized words. Must be greater than or equal to zero.\n     */\n    public BigEndianAscendingWordSerializer(final int wordLength, final int wordCount, final int bytePadding) {\n        if((wordLength < 1) || (wordLength > 64)) {\n            throw new IllegalArgumentException(\"Word length must be >= 1 and <= 64. (was: \" + wordLength + \")\");\n        }\n        if(wordCount < 0) {\n            throw new IllegalArgumentException(\"Word count must be >= 0. (was: \" + wordCount + \")\");\n        }\n        if(bytePadding < 0) {\n            throw new IllegalArgumentException(\"Byte padding must be must be >= 0. (was: \" + bytePadding + \")\");\n        }\n\n        this.wordLength = wordLength;\n        this.wordCount = wordCount;\n\n        final long bitsRequired = (wordLength * wordCount);\n        final boolean leftoverBits = ((bitsRequired % BITS_PER_BYTE) != 0);\n        final int bytesRequired = (int)(bitsRequired / BITS_PER_BYTE) + (leftoverBits ? 1 : 0) + bytePadding;\n        bytes = new byte[bytesRequired];\n\n        bitsLeftInByte = BITS_PER_BYTE;\n        byteIndex = bytePadding;\n        wordsWritten = 0;\n    }\n\n","bugFix":["6d8714f9ceaaff94f0968d1c2d037978c3fde569"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a81b342a33a0e68d2bb194ebcc3dfadcc69868b2":["3b5ee4c66244bdfcc4796a114519d47701b2c026"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6d8714f9ceaaff94f0968d1c2d037978c3fde569"],"6d8714f9ceaaff94f0968d1c2d037978c3fde569":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a81b342a33a0e68d2bb194ebcc3dfadcc69868b2"]},"commit2Childs":{"a81b342a33a0e68d2bb194ebcc3dfadcc69868b2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b5ee4c66244bdfcc4796a114519d47701b2c026","6d8714f9ceaaff94f0968d1c2d037978c3fde569"],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["a81b342a33a0e68d2bb194ebcc3dfadcc69868b2"],"6d8714f9ceaaff94f0968d1c2d037978c3fde569":["3b5ee4c66244bdfcc4796a114519d47701b2c026"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}