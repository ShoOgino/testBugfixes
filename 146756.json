{"path":"lucene/src/java/org/apache/lucene/util/automaton/BasicAutomata#between(String,String,int,Collection[State],boolean).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/BasicAutomata#between(String,String,int,Collection[State],boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructs sub-automaton corresponding to decimal numbers of value between\n   * x.substring(n) and y.substring(n) and of length x.substring(n).length()\n   * (which must be equal to y.substring(n).length()).\n   */\n  private static State between(String x, String y, int n,\n      Collection<State> initials, boolean zeros) {\n    State s = new State();\n    if (x.length() == n) s.setAccept(true);\n    else {\n      if (zeros) initials.add(s);\n      char cx = x.charAt(n);\n      char cy = y.charAt(n);\n      if (cx == cy) s.addTransition(new Transition(cx, between(x, y, n + 1,\n          initials, zeros && cx == '0')));\n      else { // cx<cy\n        s.addTransition(new Transition(cx, atLeast(x, n + 1, initials, zeros\n            && cx == '0')));\n        s.addTransition(new Transition(cy, atMost(y, n + 1)));\n        if (cx + 1 < cy) s.addTransition(new Transition((char) (cx + 1),\n            (char) (cy - 1), anyOfRightLength(x, n + 1)));\n      }\n    }\n    return s;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicAutomata#between(String,String,int,Collection[State],boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/BasicAutomata#between(String,String,int,Collection[State],boolean).mjava","sourceNew":"  /**\n   * Constructs sub-automaton corresponding to decimal numbers of value between\n   * x.substring(n) and y.substring(n) and of length x.substring(n).length()\n   * (which must be equal to y.substring(n).length()).\n   */\n  private static State between(String x, String y, int n,\n      Collection<State> initials, boolean zeros) {\n    State s = new State();\n    if (x.length() == n) s.setAccept(true);\n    else {\n      if (zeros) initials.add(s);\n      char cx = x.charAt(n);\n      char cy = y.charAt(n);\n      if (cx == cy) s.addTransition(new Transition(cx, between(x, y, n + 1,\n          initials, zeros && cx == '0')));\n      else { // cx<cy\n        s.addTransition(new Transition(cx, atLeast(x, n + 1, initials, zeros\n            && cx == '0')));\n        s.addTransition(new Transition(cy, atMost(y, n + 1)));\n        if (cx + 1 < cy) s.addTransition(new Transition((char) (cx + 1),\n            (char) (cy - 1), anyOfRightLength(x, n + 1)));\n      }\n    }\n    return s;\n  }\n\n","sourceOld":"  /**\n   * Constructs sub-automaton corresponding to decimal numbers of value between\n   * x.substring(n) and y.substring(n) and of length x.substring(n).length()\n   * (which must be equal to y.substring(n).length()).\n   */\n  private static State between(String x, String y, int n,\n      Collection<State> initials, boolean zeros) {\n    State s = new State();\n    if (x.length() == n) s.setAccept(true);\n    else {\n      if (zeros) initials.add(s);\n      char cx = x.charAt(n);\n      char cy = y.charAt(n);\n      if (cx == cy) s.addTransition(new Transition(cx, between(x, y, n + 1,\n          initials, zeros && cx == '0')));\n      else { // cx<cy\n        s.addTransition(new Transition(cx, atLeast(x, n + 1, initials, zeros\n            && cx == '0')));\n        s.addTransition(new Transition(cy, atMost(y, n + 1)));\n        if (cx + 1 < cy) s.addTransition(new Transition((char) (cx + 1),\n            (char) (cy - 1), anyOfRightLength(x, n + 1)));\n      }\n    }\n    return s;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}