{"path":"lucene/src/java/org/apache/lucene/index/BufferedDeletes.Num#setNum(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletes.Num#setNum(int).mjava","pathOld":"src/java/org/apache/lucene/index/BufferedDeletes.Num#setNum(int).mjava","sourceNew":"    void setNum(int num) {\n      // Only record the new number if it's greater than the\n      // current one.  This is important because if multiple\n      // threads are replacing the same doc at nearly the\n      // same time, it's possible that one thread that got a\n      // higher docID is scheduled before the other\n      // threads.\n      if (num > this.num)\n        this.num = num;\n    }\n\n","sourceOld":"    void setNum(int num) {\n      // Only record the new number if it's greater than the\n      // current one.  This is important because if multiple\n      // threads are replacing the same doc at nearly the\n      // same time, it's possible that one thread that got a\n      // higher docID is scheduled before the other\n      // threads.\n      if (num > this.num)\n        this.num = num;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c18273ea5b3974d2f30117f46f1ae416c28f727","date":1279708040,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletes.Num#setNum(int).mjava","sourceNew":null,"sourceOld":"    void setNum(int num) {\n      // Only record the new number if it's greater than the\n      // current one.  This is important because if multiple\n      // threads are replacing the same doc at nearly the\n      // same time, it's possible that one thread that got a\n      // higher docID is scheduled before the other\n      // threads.\n      if (num > this.num)\n        this.num = num;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44fcbde6fb2ac44ee3b45e013e54a42911e689ff","date":1292065621,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentDeletes#addTerm(Term,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletes.Num#setNum(int).mjava","sourceNew":"  public void addTerm(Term term, int docIDUpto) {\n    Integer current = terms.get(term);\n    if (current != null && docIDUpto < current) {\n      // Only record the new number if it's greater than the\n      // current one.  This is important because if multiple\n      // threads are replacing the same doc at nearly the\n      // same time, it's possible that one thread that got a\n      // higher docID is scheduled before the other\n      // threads.  If we blindly replace than we can get\n      // double-doc in the segment.\n      return;\n    }\n\n    terms.put(term, Integer.valueOf(docIDUpto));\n    numTermDeletes.incrementAndGet();\n    if (current == null) {\n      bytesUsed.addAndGet(BYTES_PER_DEL_TERM + term.bytes.length);\n    }\n  }\n\n","sourceOld":"    void setNum(int num) {\n      // Only record the new number if it's greater than the\n      // current one.  This is important because if multiple\n      // threads are replacing the same doc at nearly the\n      // same time, it's possible that one thread that got a\n      // higher docID is scheduled before the other\n      // threads.\n      if (num > this.num)\n        this.num = num;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentDeletes#addTerm(Term,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletes.Num#setNum(int).mjava","sourceNew":"  public void addTerm(Term term, int docIDUpto) {\n    Integer current = terms.get(term);\n    if (current != null && docIDUpto < current) {\n      // Only record the new number if it's greater than the\n      // current one.  This is important because if multiple\n      // threads are replacing the same doc at nearly the\n      // same time, it's possible that one thread that got a\n      // higher docID is scheduled before the other\n      // threads.  If we blindly replace than we can get\n      // double-doc in the segment.\n      return;\n    }\n\n    terms.put(term, Integer.valueOf(docIDUpto));\n    numTermDeletes.incrementAndGet();\n    if (current == null) {\n      bytesUsed.addAndGet(BYTES_PER_DEL_TERM + term.bytes.length);\n    }\n  }\n\n","sourceOld":"    void setNum(int num) {\n      // Only record the new number if it's greater than the\n      // current one.  This is important because if multiple\n      // threads are replacing the same doc at nearly the\n      // same time, it's possible that one thread that got a\n      // higher docID is scheduled before the other\n      // threads.\n      if (num > this.num)\n        this.num = num;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"6c18273ea5b3974d2f30117f46f1ae416c28f727":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["9454a6510e2db155fb01faa5c049b06ece95fab9","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6c18273ea5b3974d2f30117f46f1ae416c28f727":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","6c18273ea5b3974d2f30117f46f1ae416c28f727","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6c18273ea5b3974d2f30117f46f1ae416c28f727","ab5cb6a74aefb78aa0569857970b9151dfe2e787","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}