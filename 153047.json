{"path":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testSortByFunc().mjava","commits":[{"id":"0883328ff2cc09b5c999d05c04e16530d819c627","date":1285860918,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testSortByFunc().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSortByFunc() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_i\", \"100\"));\n    assertU(adoc(\"id\", \"2\", \"x_i\", \"300\"));\n    assertU(adoc(\"id\", \"3\", \"x_i\", \"200\"));\n    assertU(commit());\n\n    String desc = \"/response/docs==[{'x_i':300},{'x_i':200},{'x_i':100}]\";\n    String asc =  \"/response/docs==[{'x_i':100},{'x_i':200},{'x_i':300}]\";\n\n    String q = \"id:[1 TO 3]\";\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\",\"add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // param sub of entire function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"$x asc\", \"x\",\"add(x_i,x_i)\")\n      ,asc\n    );\n\n    // multiple functions\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"$x asc, $y desc\", \"x\", \"5\", \"y\",\"add(x_i,x_i)\")\n      ,desc\n    );\n\n    // multiple functions inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"add( 10 , 10 ) asc, add(x_i , $const) desc\", \"const\",\"50\")\n      ,desc\n    );\n\n    // test function w/ local params + func inline\n     assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=foo}add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // test multiple functions w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar}add(10,20) asc, {!key=foo}add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // test multiple functions w/ local param value not inlined\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1} asc, {!key=foo v=$s2} desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99a0a11f7c74df84d85cdc7a8e0a62f2813e179a","date":1292262017,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testSortByFunc().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testSortByFunc().mjava","sourceNew":"  @Test\n  public void testSortByFunc() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"const_s\", \"xx\", \"x_i\", \"100\", \"1_s\", \"a\"));\n    assertU(adoc(\"id\", \"2\", \"const_s\", \"xx\", \"x_i\", \"300\", \"1_s\", \"c\"));\n    assertU(adoc(\"id\", \"3\", \"const_s\", \"xx\", \"x_i\", \"200\", \"1_s\", \"b\"));\n    assertU(commit());\n\n    String desc = \"/response/docs==[{'x_i':300},{'x_i':200},{'x_i':100}]\";\n    String asc =  \"/response/docs==[{'x_i':100},{'x_i':200},{'x_i':300}]\";\n\n    String threeonetwo =  \"/response/docs==[{'x_i':200},{'x_i':100},{'x_i':300}]\";\n\n    String q = \"id:[1 TO 3]\";\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\",\"add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // param sub of entire function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"const_s asc, $x asc\", \"x\",\"add(x_i,x_i)\")\n      ,asc\n    );\n\n    // multiple functions\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"$x asc, const_s asc, $y desc\", \"x\", \"5\", \"y\",\"add(x_i,x_i)\")\n      ,desc\n    );\n\n    // multiple functions inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"add( 10 , 10 ) asc, const_s asc, add(x_i , $const) desc\", \"const\",\"50\")\n      ,desc\n    );\n\n    // test function w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"const_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!key=foo}add(x_i,x_i) desc, const_s asc\")\n             ,desc\n    );\n\n    // test multiple functions w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar}add(10,20) asc, const_s asc, {!key=foo}add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // test multiple functions w/ local param value not inlined\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1} asc, {!key=foo v=$s2} desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // no space between inlined localparams and sort order\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1}asc,const_s asc,{!key=foo v=$s2}desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // field name that isn't a legal java Identifier \n    // and starts with a number to trick function parser\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"1_s asc\")\n             ,asc\n    );\n\n    // really ugly field name that isn't a java Id, and can't be \n    // parsed as a func, but sorted fine in Solr 1.4\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"[]_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    // use localparms to sort by a lucene query, then a function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!lucene v='id:3'}desc, {!key=foo}add(x_i,x_i) asc\")\n             ,threeonetwo\n    );\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testSortByFunc() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_i\", \"100\"));\n    assertU(adoc(\"id\", \"2\", \"x_i\", \"300\"));\n    assertU(adoc(\"id\", \"3\", \"x_i\", \"200\"));\n    assertU(commit());\n\n    String desc = \"/response/docs==[{'x_i':300},{'x_i':200},{'x_i':100}]\";\n    String asc =  \"/response/docs==[{'x_i':100},{'x_i':200},{'x_i':300}]\";\n\n    String q = \"id:[1 TO 3]\";\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\",\"add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // param sub of entire function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"$x asc\", \"x\",\"add(x_i,x_i)\")\n      ,asc\n    );\n\n    // multiple functions\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"$x asc, $y desc\", \"x\", \"5\", \"y\",\"add(x_i,x_i)\")\n      ,desc\n    );\n\n    // multiple functions inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"add( 10 , 10 ) asc, add(x_i , $const) desc\", \"const\",\"50\")\n      ,desc\n    );\n\n    // test function w/ local params + func inline\n     assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=foo}add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // test multiple functions w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar}add(10,20) asc, {!key=foo}add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // test multiple functions w/ local param value not inlined\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1} asc, {!key=foo v=$s2} desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n  }\n\n","bugFix":null,"bugIntro":["a66bd69cd26cbc71647b0971089f240b2ea82edc","a66bd69cd26cbc71647b0971089f240b2ea82edc","a66bd69cd26cbc71647b0971089f240b2ea82edc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testSortByFunc().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testSortByFunc().mjava","sourceNew":"  @Test\n  public void testSortByFunc() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"const_s\", \"xx\", \"x_i\", \"100\", \"1_s\", \"a\"));\n    assertU(adoc(\"id\", \"2\", \"const_s\", \"xx\", \"x_i\", \"300\", \"1_s\", \"c\"));\n    assertU(adoc(\"id\", \"3\", \"const_s\", \"xx\", \"x_i\", \"200\", \"1_s\", \"b\"));\n    assertU(commit());\n\n    String desc = \"/response/docs==[{'x_i':300},{'x_i':200},{'x_i':100}]\";\n    String asc =  \"/response/docs==[{'x_i':100},{'x_i':200},{'x_i':300}]\";\n\n    String threeonetwo =  \"/response/docs==[{'x_i':200},{'x_i':100},{'x_i':300}]\";\n\n    String q = \"id:[1 TO 3]\";\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\",\"add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // param sub of entire function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"const_s asc, $x asc\", \"x\",\"add(x_i,x_i)\")\n      ,asc\n    );\n\n    // multiple functions\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"$x asc, const_s asc, $y desc\", \"x\", \"5\", \"y\",\"add(x_i,x_i)\")\n      ,desc\n    );\n\n    // multiple functions inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"add( 10 , 10 ) asc, const_s asc, add(x_i , $const) desc\", \"const\",\"50\")\n      ,desc\n    );\n\n    // test function w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"const_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!key=foo}add(x_i,x_i) desc, const_s asc\")\n             ,desc\n    );\n\n    // test multiple functions w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar}add(10,20) asc, const_s asc, {!key=foo}add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // test multiple functions w/ local param value not inlined\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1} asc, {!key=foo v=$s2} desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // no space between inlined localparams and sort order\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1}asc,const_s asc,{!key=foo v=$s2}desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // field name that isn't a legal java Identifier \n    // and starts with a number to trick function parser\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"1_s asc\")\n             ,asc\n    );\n\n    // really ugly field name that isn't a java Id, and can't be \n    // parsed as a func, but sorted fine in Solr 1.4\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"[]_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    // use localparms to sort by a lucene query, then a function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!lucene v='id:3'}desc, {!key=foo}add(x_i,x_i) asc\")\n             ,threeonetwo\n    );\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testSortByFunc() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"x_i\", \"100\"));\n    assertU(adoc(\"id\", \"2\", \"x_i\", \"300\"));\n    assertU(adoc(\"id\", \"3\", \"x_i\", \"200\"));\n    assertU(commit());\n\n    String desc = \"/response/docs==[{'x_i':300},{'x_i':200},{'x_i':100}]\";\n    String asc =  \"/response/docs==[{'x_i':100},{'x_i':200},{'x_i':300}]\";\n\n    String q = \"id:[1 TO 3]\";\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\",\"add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // param sub of entire function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"$x asc\", \"x\",\"add(x_i,x_i)\")\n      ,asc\n    );\n\n    // multiple functions\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"$x asc, $y desc\", \"x\", \"5\", \"y\",\"add(x_i,x_i)\")\n      ,desc\n    );\n\n    // multiple functions inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"add( 10 , 10 ) asc, add(x_i , $const) desc\", \"const\",\"50\")\n      ,desc\n    );\n\n    // test function w/ local params + func inline\n     assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=foo}add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // test multiple functions w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar}add(10,20) asc, {!key=foo}add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // test multiple functions w/ local param value not inlined\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1} asc, {!key=foo v=$s2} desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testSortByFunc().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSortByFunc() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"const_s\", \"xx\", \"x_i\", \"100\", \"1_s\", \"a\"));\n    assertU(adoc(\"id\", \"2\", \"const_s\", \"xx\", \"x_i\", \"300\", \"1_s\", \"c\"));\n    assertU(adoc(\"id\", \"3\", \"const_s\", \"xx\", \"x_i\", \"200\", \"1_s\", \"b\"));\n    assertU(commit());\n\n    String desc = \"/response/docs==[{'x_i':300},{'x_i':200},{'x_i':100}]\";\n    String asc =  \"/response/docs==[{'x_i':100},{'x_i':200},{'x_i':300}]\";\n\n    String threeonetwo =  \"/response/docs==[{'x_i':200},{'x_i':100},{'x_i':300}]\";\n\n    String q = \"id:[1 TO 3]\";\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\",\"add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // param sub of entire function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"const_s asc, $x asc\", \"x\",\"add(x_i,x_i)\")\n      ,asc\n    );\n\n    // multiple functions\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"$x asc, const_s asc, $y desc\", \"x\", \"5\", \"y\",\"add(x_i,x_i)\")\n      ,desc\n    );\n\n    // multiple functions inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"add( 10 , 10 ) asc, const_s asc, add(x_i , $const) desc\", \"const\",\"50\")\n      ,desc\n    );\n\n    // test function w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"const_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!key=foo}add(x_i,x_i) desc, const_s asc\")\n             ,desc\n    );\n\n    // test multiple functions w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar}add(10,20) asc, const_s asc, {!key=foo}add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // test multiple functions w/ local param value not inlined\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1} asc, {!key=foo v=$s2} desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // no space between inlined localparams and sort order\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1}asc,const_s asc,{!key=foo v=$s2}desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // field name that isn't a legal java Identifier \n    // and starts with a number to trick function parser\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"1_s asc\")\n             ,asc\n    );\n\n    // really ugly field name that isn't a java Id, and can't be \n    // parsed as a func, but sorted fine in Solr 1.4\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"[]_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    // use localparms to sort by a lucene query, then a function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!lucene v='id:3'}desc, {!key=foo}add(x_i,x_i) asc\")\n             ,threeonetwo\n    );\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testSortByFunc().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testSortByFunc().mjava","sourceNew":"  @Test\n  public void testSortByFunc() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"const_s\", \"xx\", \"x_i\", \"100\", \"1_s\", \"a\"));\n    assertU(adoc(\"id\", \"2\", \"const_s\", \"xx\", \"x_i\", \"300\", \"1_s\", \"c\"));\n    assertU(adoc(\"id\", \"3\", \"const_s\", \"xx\", \"x_i\", \"200\", \"1_s\", \"b\"));\n    assertU(commit());\n\n    String desc = \"/response/docs==[{'x_i':300},{'x_i':200},{'x_i':100}]\";\n    String asc =  \"/response/docs==[{'x_i':100},{'x_i':200},{'x_i':300}]\";\n\n    String threeonetwo =  \"/response/docs==[{'x_i':200},{'x_i':100},{'x_i':300}]\";\n\n    String q = \"id:[1 TO 3]\";\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\",\"add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // param sub of entire function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"const_s asc, $x asc\", \"x\",\"add(x_i,x_i)\")\n      ,asc\n    );\n\n    // multiple functions\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"$x asc, const_s asc, $y desc\", \"x\", \"5\", \"y\",\"add(x_i,x_i)\")\n      ,desc\n    );\n\n    // multiple functions inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"add( 10 , 10 ) asc, const_s asc, add(x_i , $const) desc\", \"const\",\"50\")\n      ,desc\n    );\n\n    // test function w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"const_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!key=foo}add(x_i,x_i) desc, const_s asc\")\n             ,desc\n    );\n\n    // test multiple functions w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar}add(10,20) asc, const_s asc, {!key=foo}add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // test multiple functions w/ local param value not inlined\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1} asc, {!key=foo v=$s2} desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // no space between inlined localparams and sort order\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1}asc,const_s asc,{!key=foo v=$s2}desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // field name that isn't a legal java Identifier \n    // and starts with a number to trick function parser\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"1_s asc\")\n             ,asc\n    );\n\n    // really ugly field name that isn't a java Id, and can't be \n    // parsed as a func, but sorted fine in Solr 1.4\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"[]_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    // use localparms to sort by a lucene query, then a function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!lucene v='id:3'}desc, {!key=foo}add(x_i,x_i) asc\")\n             ,threeonetwo\n    );\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testSortByFunc() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"const_s\", \"xx\", \"x_i\", \"100\", \"1_s\", \"a\"));\n    assertU(adoc(\"id\", \"2\", \"const_s\", \"xx\", \"x_i\", \"300\", \"1_s\", \"c\"));\n    assertU(adoc(\"id\", \"3\", \"const_s\", \"xx\", \"x_i\", \"200\", \"1_s\", \"b\"));\n    assertU(commit());\n\n    String desc = \"/response/docs==[{'x_i':300},{'x_i':200},{'x_i':100}]\";\n    String asc =  \"/response/docs==[{'x_i':100},{'x_i':200},{'x_i':300}]\";\n\n    String threeonetwo =  \"/response/docs==[{'x_i':200},{'x_i':100},{'x_i':300}]\";\n\n    String q = \"id:[1 TO 3]\";\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\",\"add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // param sub of entire function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"const_s asc, $x asc\", \"x\",\"add(x_i,x_i)\")\n      ,asc\n    );\n\n    // multiple functions\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"$x asc, const_s asc, $y desc\", \"x\", \"5\", \"y\",\"add(x_i,x_i)\")\n      ,desc\n    );\n\n    // multiple functions inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"add( 10 , 10 ) asc, const_s asc, add(x_i , $const) desc\", \"const\",\"50\")\n      ,desc\n    );\n\n    // test function w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"const_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!key=foo}add(x_i,x_i) desc, const_s asc\")\n             ,desc\n    );\n\n    // test multiple functions w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar}add(10,20) asc, const_s asc, {!key=foo}add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // test multiple functions w/ local param value not inlined\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1} asc, {!key=foo v=$s2} desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // no space between inlined localparams and sort order\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1}asc,const_s asc,{!key=foo v=$s2}desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // field name that isn't a legal java Identifier \n    // and starts with a number to trick function parser\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"1_s asc\")\n             ,asc\n    );\n\n    // really ugly field name that isn't a java Id, and can't be \n    // parsed as a func, but sorted fine in Solr 1.4\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"[]_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    // use localparms to sort by a lucene query, then a function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!lucene v='id:3'}desc, {!key=foo}add(x_i,x_i) asc\")\n             ,threeonetwo\n    );\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testSortByFunc().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testSortByFunc().mjava","sourceNew":"  @Test\n  public void testSortByFunc() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"const_s\", \"xx\", \"x_i\", \"100\", \"1_s\", \"a\"));\n    assertU(adoc(\"id\", \"2\", \"const_s\", \"xx\", \"x_i\", \"300\", \"1_s\", \"c\"));\n    assertU(adoc(\"id\", \"3\", \"const_s\", \"xx\", \"x_i\", \"200\", \"1_s\", \"b\"));\n    assertU(commit());\n\n    String desc = \"/response/docs==[{'x_i':300},{'x_i':200},{'x_i':100}]\";\n    String asc =  \"/response/docs==[{'x_i':100},{'x_i':200},{'x_i':300}]\";\n\n    String threeonetwo =  \"/response/docs==[{'x_i':200},{'x_i':100},{'x_i':300}]\";\n\n    String q = \"id:[1 TO 3]\";\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\",\"add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // param sub of entire function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"const_s asc, $x asc\", \"x\",\"add(x_i,x_i)\")\n      ,asc\n    );\n\n    // multiple functions\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"$x asc, const_s asc, $y desc\", \"x\", \"5\", \"y\",\"add(x_i,x_i)\")\n      ,desc\n    );\n\n    // multiple functions inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"add( 10 , 10 ) asc, const_s asc, add(x_i , $const) desc\", \"const\",\"50\")\n      ,desc\n    );\n\n    // test function w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"const_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!key=foo}add(x_i,x_i) desc, const_s asc\")\n             ,desc\n    );\n\n    // test multiple functions w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar}add(10,20) asc, const_s asc, {!key=foo}add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // test multiple functions w/ local param value not inlined\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1} asc, {!key=foo v=$s2} desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // no space between inlined localparams and sort order\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1}asc,const_s asc,{!key=foo v=$s2}desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // field name that isn't a legal java Identifier \n    // and starts with a number to trick function parser\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"1_s asc\")\n             ,asc\n    );\n\n    // really ugly field name that isn't a java Id, and can't be \n    // parsed as a func, but sorted fine in Solr 1.4\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"[]_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    // use localparms to sort by a lucene query, then a function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!lucene v='id:3'}desc, {!key=foo}add(x_i,x_i) asc\")\n             ,threeonetwo\n    );\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testSortByFunc() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"const_s\", \"xx\", \"x_i\", \"100\", \"1_s\", \"a\"));\n    assertU(adoc(\"id\", \"2\", \"const_s\", \"xx\", \"x_i\", \"300\", \"1_s\", \"c\"));\n    assertU(adoc(\"id\", \"3\", \"const_s\", \"xx\", \"x_i\", \"200\", \"1_s\", \"b\"));\n    assertU(commit());\n\n    String desc = \"/response/docs==[{'x_i':300},{'x_i':200},{'x_i':100}]\";\n    String asc =  \"/response/docs==[{'x_i':100},{'x_i':200},{'x_i':300}]\";\n\n    String threeonetwo =  \"/response/docs==[{'x_i':200},{'x_i':100},{'x_i':300}]\";\n\n    String q = \"id:[1 TO 3]\";\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\",\"add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // param sub of entire function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"const_s asc, $x asc\", \"x\",\"add(x_i,x_i)\")\n      ,asc\n    );\n\n    // multiple functions\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"$x asc, const_s asc, $y desc\", \"x\", \"5\", \"y\",\"add(x_i,x_i)\")\n      ,desc\n    );\n\n    // multiple functions inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"add( 10 , 10 ) asc, const_s asc, add(x_i , $const) desc\", \"const\",\"50\")\n      ,desc\n    );\n\n    // test function w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"const_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!key=foo}add(x_i,x_i) desc, const_s asc\")\n             ,desc\n    );\n\n    // test multiple functions w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar}add(10,20) asc, const_s asc, {!key=foo}add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // test multiple functions w/ local param value not inlined\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1} asc, {!key=foo v=$s2} desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // no space between inlined localparams and sort order\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1}asc,const_s asc,{!key=foo v=$s2}desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // field name that isn't a legal java Identifier \n    // and starts with a number to trick function parser\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"1_s asc\")\n             ,asc\n    );\n\n    // really ugly field name that isn't a java Id, and can't be \n    // parsed as a func, but sorted fine in Solr 1.4\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"[]_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    // use localparms to sort by a lucene query, then a function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!lucene v='id:3'}desc, {!key=foo}add(x_i,x_i) asc\")\n             ,threeonetwo\n    );\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testSortByFunc().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testSortByFunc().mjava","sourceNew":"  @Test\n  public void testSortByFunc() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"const_s\", \"xx\", \"x_i\", \"100\", \"1_s\", \"a\"));\n    assertU(adoc(\"id\", \"2\", \"const_s\", \"xx\", \"x_i\", \"300\", \"1_s\", \"c\"));\n    assertU(adoc(\"id\", \"3\", \"const_s\", \"xx\", \"x_i\", \"200\", \"1_s\", \"b\"));\n    assertU(commit());\n\n    String desc = \"/response/docs==[{'x_i':300},{'x_i':200},{'x_i':100}]\";\n    String asc =  \"/response/docs==[{'x_i':100},{'x_i':200},{'x_i':300}]\";\n\n    String threeonetwo =  \"/response/docs==[{'x_i':200},{'x_i':100},{'x_i':300}]\";\n\n    String q = \"id:[1 TO 3]\";\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\",\"add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // param sub of entire function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"const_s asc, $x asc\", \"x\",\"add(x_i,x_i)\")\n      ,asc\n    );\n\n    // multiple functions\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"$x asc, const_s asc, $y desc\", \"x\", \"5\", \"y\",\"add(x_i,x_i)\")\n      ,desc\n    );\n\n    // multiple functions inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"add( 10 , 10 ) asc, const_s asc, add(x_i , $const) desc\", \"const\",\"50\")\n      ,desc\n    );\n\n    // test function w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"const_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!key=foo}add(x_i,x_i) desc, const_s asc\")\n             ,desc\n    );\n\n    // test multiple functions w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar}add(10,20) asc, const_s asc, {!key=foo}add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // test multiple functions w/ local param value not inlined\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1} asc, {!key=foo v=$s2} desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // no space between inlined localparams and sort order\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1}asc,const_s asc,{!key=foo v=$s2}desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // field name that isn't a legal java Identifier \n    // and starts with a number to trick function parser\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"1_s asc\")\n             ,asc\n    );\n\n    // really ugly field name that isn't a java Id, and can't be \n    // parsed as a func, but sorted fine in Solr 1.4\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"[]_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    // use localparms to sort by a lucene query, then a function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!lucene v='id:3'}desc, {!key=foo}add(x_i,x_i) asc\")\n             ,threeonetwo\n    );\n\n\n  }\n\n","sourceOld":"  @Test\n  public void testSortByFunc() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"const_s\", \"xx\", \"x_i\", \"100\", \"1_s\", \"a\"));\n    assertU(adoc(\"id\", \"2\", \"const_s\", \"xx\", \"x_i\", \"300\", \"1_s\", \"c\"));\n    assertU(adoc(\"id\", \"3\", \"const_s\", \"xx\", \"x_i\", \"200\", \"1_s\", \"b\"));\n    assertU(commit());\n\n    String desc = \"/response/docs==[{'x_i':300},{'x_i':200},{'x_i':100}]\";\n    String asc =  \"/response/docs==[{'x_i':100},{'x_i':200},{'x_i':300}]\";\n\n    String threeonetwo =  \"/response/docs==[{'x_i':200},{'x_i':100},{'x_i':300}]\";\n\n    String q = \"id:[1 TO 3]\";\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\",\"add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // param sub of entire function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"const_s asc, $x asc\", \"x\",\"add(x_i,x_i)\")\n      ,asc\n    );\n\n    // multiple functions\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"$x asc, const_s asc, $y desc\", \"x\", \"5\", \"y\",\"add(x_i,x_i)\")\n      ,desc\n    );\n\n    // multiple functions inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"add( 10 , 10 ) asc, const_s asc, add(x_i , $const) desc\", \"const\",\"50\")\n      ,desc\n    );\n\n    // test function w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"const_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!key=foo}add(x_i,x_i) desc, const_s asc\")\n             ,desc\n    );\n\n    // test multiple functions w/ local params + func inline\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar}add(10,20) asc, const_s asc, {!key=foo}add(x_i,x_i) desc\")\n      ,desc\n    );\n\n    // test multiple functions w/ local param value not inlined\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1} asc, {!key=foo v=$s2} desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // no space between inlined localparams and sort order\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"{!key=bar v=$s1}asc,const_s asc,{!key=foo v=$s2}desc\", \"s1\",\"add(3,4)\", \"s2\",\"add(x_i,5)\")\n      ,desc\n    );\n\n    // field name that isn't a legal java Identifier \n    // and starts with a number to trick function parser\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \"sort\", \"1_s asc\")\n             ,asc\n    );\n\n    // really ugly field name that isn't a java Id, and can't be \n    // parsed as a func, but sorted fine in Solr 1.4\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"[]_s asc, {!key=foo}add(x_i,x_i) desc\")\n             ,desc\n    );\n    // use localparms to sort by a lucene query, then a function\n    assertJQ(req(\"q\",q,  \"fl\",\"x_i\", \n                 \"sort\", \"{!lucene v='id:3'}desc, {!key=foo}add(x_i,x_i) asc\")\n             ,threeonetwo\n    );\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0883328ff2cc09b5c999d05c04e16530d819c627":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["99a0a11f7c74df84d85cdc7a8e0a62f2813e179a"],"c26f00b574427b55127e869b935845554afde1fa":["99a0a11f7c74df84d85cdc7a8e0a62f2813e179a","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["0883328ff2cc09b5c999d05c04e16530d819c627","99a0a11f7c74df84d85cdc7a8e0a62f2813e179a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["99a0a11f7c74df84d85cdc7a8e0a62f2813e179a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","99a0a11f7c74df84d85cdc7a8e0a62f2813e179a"],"99a0a11f7c74df84d85cdc7a8e0a62f2813e179a":["0883328ff2cc09b5c999d05c04e16530d819c627"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"0883328ff2cc09b5c999d05c04e16530d819c627":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","99a0a11f7c74df84d85cdc7a8e0a62f2813e179a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0883328ff2cc09b5c999d05c04e16530d819c627","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"99a0a11f7c74df84d85cdc7a8e0a62f2813e179a":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","ab5cb6a74aefb78aa0569857970b9151dfe2e787","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}