{"path":"solr/core/src/java/org/apache/solr/search/facet/MaxSlotAcc[SlotAcc]#collect(int,int).mjava","commits":[{"id":"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","date":1426480823,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/MaxSlotAcc[SlotAcc]#collect(int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void collect(int doc, int slotNum) {\n    double val = values.doubleVal(doc);\n    if (val == 0 && !values.exists(doc)) return;  // depend on fact that non existing values return 0 for func query\n\n    double currMax = result[slotNum];\n    if (!(val <= currMax)) {  // reversed order to handle NaN\n      result[slotNum] = val;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/MaxSlotAcc[SlotAcc]#collect(int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void collect(int doc, int slotNum) {\n    double val = values.doubleVal(doc);\n    if (val == 0 && !values.exists(doc)) return;  // depend on fact that non existing values return 0 for func query\n\n    double currMax = result[slotNum];\n    if (!(val <= currMax)) {  // reversed order to handle NaN\n      result[slotNum] = val;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/MaxSlotAcc[SlotAcc]#collect(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/MaxSlotAcc[SlotAcc]#collect(int,int).mjava","sourceNew":"  @Override\n  public void collect(int doc, int slotNum) throws IOException {\n    double val = values.doubleVal(doc);\n    if (val == 0 && !values.exists(doc)) return;  // depend on fact that non existing values return 0 for func query\n\n    double currMax = result[slotNum];\n    if (!(val <= currMax)) {  // reversed order to handle NaN\n      result[slotNum] = val;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc, int slotNum) {\n    double val = values.doubleVal(doc);\n    if (val == 0 && !values.exists(doc)) return;  // depend on fact that non existing values return 0 for func query\n\n    double currMax = result[slotNum];\n    if (!(val <= currMax)) {  // reversed order to handle NaN\n      result[slotNum] = val;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/MaxSlotAcc[SlotAcc]#collect(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/MaxSlotAcc[SlotAcc]#collect(int,int).mjava","sourceNew":"  @Override\n  public void collect(int doc, int slotNum) throws IOException {\n    double val = values.doubleVal(doc);\n    if (val == 0 && !values.exists(doc)) return;  // depend on fact that non existing values return 0 for func query\n\n    double currMax = result[slotNum];\n    if (!(val <= currMax)) {  // reversed order to handle NaN\n      result[slotNum] = val;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc, int slotNum) {\n    double val = values.doubleVal(doc);\n    if (val == 0 && !values.exists(doc)) return;  // depend on fact that non existing values return 0 for func query\n\n    double currMax = result[slotNum];\n    if (!(val <= currMax)) {  // reversed order to handle NaN\n      result[slotNum] = val;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/MaxSlotAcc[SlotAcc]#collect(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/MaxSlotAcc[SlotAcc]#collect(int,int).mjava","sourceNew":"  @Override\n  public void collect(int doc, int slotNum) throws IOException {\n    double val = values.doubleVal(doc);\n    if (val == 0 && !values.exists(doc)) return;  // depend on fact that non existing values return 0 for func query\n\n    double currMax = result[slotNum];\n    if (!(val <= currMax)) {  // reversed order to handle NaN\n      result[slotNum] = val;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc, int slotNum) {\n    double val = values.doubleVal(doc);\n    if (val == 0 && !values.exists(doc)) return;  // depend on fact that non existing values return 0 for func query\n\n    double currMax = result[slotNum];\n    if (!(val <= currMax)) {  // reversed order to handle NaN\n      result[slotNum] = val;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de0d7af063e5c03bbc9db87e7e708da8102fdbc3","date":1492482629,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/MaxSlotAcc[SlotAcc]#collect(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/MaxSlotAcc[SlotAcc]#collect(int,int).mjava","sourceNew":"  @Override\n  public void collect(int doc, int slotNum) throws IOException {\n    double val = values.doubleVal(doc);\n    if (val == 0 && !values.exists(doc)) return; // depend on fact that non existing values return 0 for func query\n\n    double currMax = result[slotNum];\n    if (!(val <= currMax)) { // reversed order to handle NaN\n      result[slotNum] = val;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc, int slotNum) throws IOException {\n    double val = values.doubleVal(doc);\n    if (val == 0 && !values.exists(doc)) return;  // depend on fact that non existing values return 0 for func query\n\n    double currMax = result[slotNum];\n    if (!(val <= currMax)) {  // reversed order to handle NaN\n      result[slotNum] = val;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/MaxSlotAcc[SlotAcc]#collect(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/MaxSlotAcc[SlotAcc]#collect(int,int).mjava","sourceNew":"  @Override\n  public void collect(int doc, int slotNum) throws IOException {\n    double val = values.doubleVal(doc);\n    if (val == 0 && !values.exists(doc)) return; // depend on fact that non existing values return 0 for func query\n\n    double currMax = result[slotNum];\n    if (!(val <= currMax)) { // reversed order to handle NaN\n      result[slotNum] = val;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc, int slotNum) throws IOException {\n    double val = values.doubleVal(doc);\n    if (val == 0 && !values.exists(doc)) return;  // depend on fact that non existing values return 0 for func query\n\n    double currMax = result[slotNum];\n    if (!(val <= currMax)) {  // reversed order to handle NaN\n      result[slotNum] = val;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b08da0118b8113cffc8f260d0a6c137013c65568","date":1494064335,"type":4,"author":"yonik","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/facet/MaxSlotAcc[SlotAcc]#collect(int,int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void collect(int doc, int slotNum) throws IOException {\n    double val = values.doubleVal(doc);\n    if (val == 0 && !values.exists(doc)) return; // depend on fact that non existing values return 0 for func query\n\n    double currMax = result[slotNum];\n    if (!(val <= currMax)) { // reversed order to handle NaN\n      result[slotNum] = val;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/facet/MaxSlotAcc[SlotAcc]#collect(int,int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void collect(int doc, int slotNum) throws IOException {\n    double val = values.doubleVal(doc);\n    if (val == 0 && !values.exists(doc)) return; // depend on fact that non existing values return 0 for func query\n\n    double currMax = result[slotNum];\n    if (!(val <= currMax)) { // reversed order to handle NaN\n      result[slotNum] = val;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"de0d7af063e5c03bbc9db87e7e708da8102fdbc3":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","b08da0118b8113cffc8f260d0a6c137013c65568"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"b08da0118b8113cffc8f260d0a6c137013c65568":["de0d7af063e5c03bbc9db87e7e708da8102fdbc3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b08da0118b8113cffc8f260d0a6c137013c65568"]},"commit2Childs":{"de0d7af063e5c03bbc9db87e7e708da8102fdbc3":["b08da0118b8113cffc8f260d0a6c137013c65568"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b08da0118b8113cffc8f260d0a6c137013c65568":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["de0d7af063e5c03bbc9db87e7e708da8102fdbc3","54ca69905c5d9d1529286f06ab1d12c68f6c13cb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}