{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsConsumer#write(Fields,NormsProducer).mjava","commits":[{"id":"622a708571e534680618b3c5e0c28ac539a47776","date":1517406892,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsConsumer#write(Fields,NormsProducer).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsConsumer#write(Fields).mjava","sourceNew":"    @Override\n    public void write(Fields fields, NormsProducer norms) throws IOException {\n\n      // Delegate must write first: it may have opened files\n      // on creating the class\n      // (e.g. Lucene41PostingsConsumer), and write() will\n      // close them; alternatively, if we delayed pulling\n      // the fields consumer until here, we could do it\n      // afterwards:\n      delegateFieldsConsumer.write(fields, norms);\n\n      for(String field : fields) {\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);\n        TermsEnum termsEnum = terms.iterator();\n\n        FuzzySet bloomFilter = null;\n\n        PostingsEnum postingsEnum = null;\n        while (true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (bloomFilter == null) {\n            bloomFilter = bloomFilterFactory.getSetForField(state, fieldInfo);\n            if (bloomFilter == null) {\n              // Field not bloom'd\n              break;\n            }\n            assert bloomFilters.containsKey(field) == false;\n            bloomFilters.put(fieldInfo, bloomFilter);\n          }\n          // Make sure there's at least one doc for this term:\n          postingsEnum = termsEnum.postings(postingsEnum, 0);\n          if (postingsEnum.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n            bloomFilter.addValue(term);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void write(Fields fields) throws IOException {\n\n      // Delegate must write first: it may have opened files\n      // on creating the class\n      // (e.g. Lucene41PostingsConsumer), and write() will\n      // close them; alternatively, if we delayed pulling\n      // the fields consumer until here, we could do it\n      // afterwards:\n      delegateFieldsConsumer.write(fields);\n\n      for(String field : fields) {\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);\n        TermsEnum termsEnum = terms.iterator();\n\n        FuzzySet bloomFilter = null;\n\n        PostingsEnum postingsEnum = null;\n        while (true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (bloomFilter == null) {\n            bloomFilter = bloomFilterFactory.getSetForField(state, fieldInfo);\n            if (bloomFilter == null) {\n              // Field not bloom'd\n              break;\n            }\n            assert bloomFilters.containsKey(field) == false;\n            bloomFilters.put(fieldInfo, bloomFilter);\n          }\n          // Make sure there's at least one doc for this term:\n          postingsEnum = termsEnum.postings(postingsEnum, 0);\n          if (postingsEnum.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n            bloomFilter.addValue(term);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9f94c392daa8f5708186bede16c84eafad4cdd2","date":1599578873,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsConsumer#write(Fields,NormsProducer).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.BloomFilteredFieldsConsumer#write(Fields,NormsProducer).mjava","sourceNew":"    @Override\n    public void write(Fields fields, NormsProducer norms) throws IOException {\n\n      // Delegate must write first: it may have opened files\n      // on creating the class\n      // (e.g. Lucene41PostingsConsumer), and write() will\n      // close them; alternatively, if we delayed pulling\n      // the fields consumer until here, we could do it\n      // afterwards:\n      delegateFieldsConsumer.write(fields, norms);\n\n      for(String field : fields) {\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);\n        TermsEnum termsEnum = terms.iterator();\n\n        FuzzySet bloomFilter = null;\n\n        PostingsEnum postingsEnum = null;\n        while (true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (bloomFilter == null) {\n            bloomFilter = bloomFilterFactory.getSetForField(state, fieldInfo);\n            if (bloomFilter == null) {\n              // Field not bloom'd\n              break;\n            }\n            assert bloomFilters.containsKey(fieldInfo) == false;\n            bloomFilters.put(fieldInfo, bloomFilter);\n          }\n          // Make sure there's at least one doc for this term:\n          postingsEnum = termsEnum.postings(postingsEnum, 0);\n          if (postingsEnum.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n            bloomFilter.addValue(term);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void write(Fields fields, NormsProducer norms) throws IOException {\n\n      // Delegate must write first: it may have opened files\n      // on creating the class\n      // (e.g. Lucene41PostingsConsumer), and write() will\n      // close them; alternatively, if we delayed pulling\n      // the fields consumer until here, we could do it\n      // afterwards:\n      delegateFieldsConsumer.write(fields, norms);\n\n      for(String field : fields) {\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);\n        TermsEnum termsEnum = terms.iterator();\n\n        FuzzySet bloomFilter = null;\n\n        PostingsEnum postingsEnum = null;\n        while (true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          if (bloomFilter == null) {\n            bloomFilter = bloomFilterFactory.getSetForField(state, fieldInfo);\n            if (bloomFilter == null) {\n              // Field not bloom'd\n              break;\n            }\n            assert bloomFilters.containsKey(field) == false;\n            bloomFilters.put(fieldInfo, bloomFilter);\n          }\n          // Make sure there's at least one doc for this term:\n          postingsEnum = termsEnum.postings(postingsEnum, 0);\n          if (postingsEnum.nextDoc() != PostingsEnum.NO_MORE_DOCS) {\n            bloomFilter.addValue(term);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c9f94c392daa8f5708186bede16c84eafad4cdd2":["622a708571e534680618b3c5e0c28ac539a47776"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"622a708571e534680618b3c5e0c28ac539a47776":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9f94c392daa8f5708186bede16c84eafad4cdd2"]},"commit2Childs":{"c9f94c392daa8f5708186bede16c84eafad4cdd2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["622a708571e534680618b3c5e0c28ac539a47776"],"622a708571e534680618b3c5e0c28ac539a47776":["c9f94c392daa8f5708186bede16c84eafad4cdd2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}