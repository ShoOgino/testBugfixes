{"path":"modules/queries/src/java/org/apache/lucene/queries/BooleanFilter#getDocIdSet(AtomicReaderContext).mjava","commits":[{"id":"1f9f2355d68aab1348539f7a1603279405e566a4","date":1313634992,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/BooleanFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    OpenBitSetDISI res = null;\n    final IndexReader reader = context.reader;\n    if (shouldFilters != null) {\n      for (int i = 0; i < shouldFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(shouldFilters, i, context), reader.maxDoc());\n        } else { \n          DocIdSet dis = shouldFilters.get(i).getDocIdSet(context);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.or((OpenBitSet) dis);\n          } else {\n            res.inPlaceOr(getDISI(shouldFilters, i, context));\n          }\n        }\n      }\n    }\n    \n    if (notFilters != null) {\n      for (int i = 0; i < notFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(notFilters, i, context), reader.maxDoc());\n          res.flip(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        } else {\n          DocIdSet dis = notFilters.get(i).getDocIdSet(context);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.andNot((OpenBitSet) dis);\n          } else {\n            res.inPlaceNot(getDISI(notFilters, i, context));\n          }\n        }\n      }\n    }\n    \n    if (mustFilters != null) {\n      for (int i = 0; i < mustFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(mustFilters, i, context), reader.maxDoc());\n        } else {\n          DocIdSet dis = mustFilters.get(i).getDocIdSet(context);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.and((OpenBitSet) dis);\n          } else {\n            res.inPlaceAnd(getDISI(mustFilters, i, context));\n          }\n        }\n      }\n    }\n\n    return res != null ? res : DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","sourceOld":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    OpenBitSetDISI res = null;\n    final IndexReader reader = context.reader;\n    if (shouldFilters != null) {\n      for (int i = 0; i < shouldFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(shouldFilters, i, context), reader.maxDoc());\n        } else { \n          DocIdSet dis = shouldFilters.get(i).getDocIdSet(context);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.or((OpenBitSet) dis);\n          } else {\n            res.inPlaceOr(getDISI(shouldFilters, i, context));\n          }\n        }\n      }\n    }\n    \n    if (notFilters != null) {\n      for (int i = 0; i < notFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(notFilters, i, context), reader.maxDoc());\n          res.flip(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        } else {\n          DocIdSet dis = notFilters.get(i).getDocIdSet(context);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.andNot((OpenBitSet) dis);\n          } else {\n            res.inPlaceNot(getDISI(notFilters, i, context));\n          }\n        }\n      }\n    }\n    \n    if (mustFilters != null) {\n      for (int i = 0; i < mustFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(mustFilters, i, context), reader.maxDoc());\n        } else {\n          DocIdSet dis = mustFilters.get(i).getDocIdSet(context);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.and((OpenBitSet) dis);\n          } else {\n            res.inPlaceAnd(getDISI(mustFilters, i, context));\n          }\n        }\n      }\n    }\n\n    return res != null ? res : DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4f5ec97a7b7e3e63d7c80c6e71db06e7ed0797b","date":1316724540,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/BooleanFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/BooleanFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    FixedBitSet res = null;\n    final IndexReader reader = context.reader;\n    if (shouldFilters != null) {\n      for (int i = 0; i < shouldFilters.size(); i++) {\n        final DocIdSetIterator disi = getDISI(shouldFilters, i, context);\n        if (disi == null) continue;\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n        }\n        res.or(disi);\n      }\n    }\n    \n    if (notFilters != null) {\n      for (int i = 0; i < notFilters.size(); i++) {\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n          res.set(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        }\n        final DocIdSetIterator disi = getDISI(notFilters, i, context);\n        if (disi != null) {\n          res.andNot(disi);\n        }\n      }\n    }\n    \n    if (mustFilters != null) {\n      for (int i = 0; i < mustFilters.size(); i++) {\n        final DocIdSetIterator disi = getDISI(mustFilters, i, context);\n        if (disi == null) {\n          return DocIdSet.EMPTY_DOCIDSET; // no documents can match\n        }\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n          res.or(disi);\n        } else {\n          res.and(disi);\n        }\n      }\n    }\n\n    return res != null ? res : DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","sourceOld":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    OpenBitSetDISI res = null;\n    final IndexReader reader = context.reader;\n    if (shouldFilters != null) {\n      for (int i = 0; i < shouldFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(shouldFilters, i, context), reader.maxDoc());\n        } else { \n          DocIdSet dis = shouldFilters.get(i).getDocIdSet(context);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.or((OpenBitSet) dis);\n          } else {\n            res.inPlaceOr(getDISI(shouldFilters, i, context));\n          }\n        }\n      }\n    }\n    \n    if (notFilters != null) {\n      for (int i = 0; i < notFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(notFilters, i, context), reader.maxDoc());\n          res.flip(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        } else {\n          DocIdSet dis = notFilters.get(i).getDocIdSet(context);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.andNot((OpenBitSet) dis);\n          } else {\n            res.inPlaceNot(getDISI(notFilters, i, context));\n          }\n        }\n      }\n    }\n    \n    if (mustFilters != null) {\n      for (int i = 0; i < mustFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(mustFilters, i, context), reader.maxDoc());\n        } else {\n          DocIdSet dis = mustFilters.get(i).getDocIdSet(context);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.and((OpenBitSet) dis);\n          } else {\n            res.inPlaceAnd(getDISI(mustFilters, i, context));\n          }\n        }\n      }\n    }\n\n    return res != null ? res : DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a577e6c0f434f9db36661dde6ceabdb75ce92b86","date":1316954936,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/BooleanFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/BooleanFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    FixedBitSet res = null;\n    final IndexReader reader = context.reader;\n    \n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.SHOULD) {\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi == null) continue;\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n        }\n        res.or(disi);\n      }\n    }\n    \n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.MUST_NOT) {\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n          res.set(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        }\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi != null) {\n          res.andNot(disi);\n        }\n      }\n    }\n    \n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.MUST) {\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi == null) {\n          return DocIdSet.EMPTY_DOCIDSET; // no documents can match\n        }\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n          res.or(disi);\n        } else {\n          res.and(disi);\n        }\n      }\n    }\n\n    return res != null ? res : DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","sourceOld":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    FixedBitSet res = null;\n    final IndexReader reader = context.reader;\n    if (shouldFilters != null) {\n      for (int i = 0; i < shouldFilters.size(); i++) {\n        final DocIdSetIterator disi = getDISI(shouldFilters, i, context);\n        if (disi == null) continue;\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n        }\n        res.or(disi);\n      }\n    }\n    \n    if (notFilters != null) {\n      for (int i = 0; i < notFilters.size(); i++) {\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n          res.set(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        }\n        final DocIdSetIterator disi = getDISI(notFilters, i, context);\n        if (disi != null) {\n          res.andNot(disi);\n        }\n      }\n    }\n    \n    if (mustFilters != null) {\n      for (int i = 0; i < mustFilters.size(); i++) {\n        final DocIdSetIterator disi = getDISI(mustFilters, i, context);\n        if (disi == null) {\n          return DocIdSet.EMPTY_DOCIDSET; // no documents can match\n        }\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n          res.or(disi);\n        } else {\n          res.and(disi);\n        }\n      }\n    }\n\n    return res != null ? res : DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/BooleanFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/BooleanFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n    FixedBitSet res = null;\n    final IndexReader reader = context.reader;\n    \n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.SHOULD) {\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi == null) continue;\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n        }\n        res.or(disi);\n      }\n    }\n    \n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.MUST_NOT) {\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n          res.set(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        }\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi != null) {\n          res.andNot(disi);\n        }\n      }\n    }\n    \n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.MUST) {\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi == null) {\n          return DocIdSet.EMPTY_DOCIDSET; // no documents can match\n        }\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n          res.or(disi);\n        } else {\n          res.and(disi);\n        }\n      }\n    }\n\n    return res != null ? BitsFilteredDocIdSet.wrap(res, acceptDocs) : DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","sourceOld":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n    FixedBitSet res = null;\n    final IndexReader reader = context.reader;\n    \n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.SHOULD) {\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi == null) continue;\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n        }\n        res.or(disi);\n      }\n    }\n    \n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.MUST_NOT) {\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n          res.set(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        }\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi != null) {\n          res.andNot(disi);\n        }\n      }\n    }\n    \n    for (final FilterClause fc : clauses) {\n      if (fc.getOccur() == Occur.MUST) {\n        final DocIdSetIterator disi = getDISI(fc.getFilter(), context);\n        if (disi == null) {\n          return DocIdSet.EMPTY_DOCIDSET; // no documents can match\n        }\n        if (res == null) {\n          res = new FixedBitSet(reader.maxDoc());\n          res.or(disi);\n        } else {\n          res.and(disi);\n        }\n      }\n    }\n\n    return res != null ? res : DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a577e6c0f434f9db36661dde6ceabdb75ce92b86":["a4f5ec97a7b7e3e63d7c80c6e71db06e7ed0797b"],"6620df8541b174097b1133a4fc370adb2e570524":["a577e6c0f434f9db36661dde6ceabdb75ce92b86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a4f5ec97a7b7e3e63d7c80c6e71db06e7ed0797b":["1f9f2355d68aab1348539f7a1603279405e566a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6620df8541b174097b1133a4fc370adb2e570524"],"1f9f2355d68aab1348539f7a1603279405e566a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a577e6c0f434f9db36661dde6ceabdb75ce92b86":["6620df8541b174097b1133a4fc370adb2e570524"],"6620df8541b174097b1133a4fc370adb2e570524":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f9f2355d68aab1348539f7a1603279405e566a4"],"a4f5ec97a7b7e3e63d7c80c6e71db06e7ed0797b":["a577e6c0f434f9db36661dde6ceabdb75ce92b86"],"1f9f2355d68aab1348539f7a1603279405e566a4":["a4f5ec97a7b7e3e63d7c80c6e71db06e7ed0797b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}