{"path":"lucene/core/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    Field f1 = newField(\"field\", \"word\", TextField.TYPE_STORED);\n    Field f2 = newField(\"field\", \"word\", TextField.TYPE_STORED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 2; i++) {\n      if (VERBOSE) {\n        System.out.println(searcher.explain(new TermQuery(new Term(\"field\", \"word\")), i));\n      }\n      assertTrue(\"score: \" + scores[i] + \" should be > lastScore: \" + lastScore, scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    Field f1 = newField(\"field\", \"word\", TextField.TYPE_STORED);\n    Field f2 = newField(\"field\", \"word\", TextField.TYPE_STORED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 2; i++) {\n      if (VERBOSE) {\n        System.out.println(searcher.explain(new TermQuery(new Term(\"field\", \"word\")), i));\n      }\n      assertTrue(\"score: \" + scores[i] + \" should be > lastScore: \" + lastScore, scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    Field f1 = newField(\"field\", \"word\", TextField.TYPE_STORED);\n    Field f2 = newField(\"field\", \"word\", TextField.TYPE_STORED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 2; i++) {\n      if (VERBOSE) {\n        System.out.println(searcher.explain(new TermQuery(new Term(\"field\", \"word\")), i));\n      }\n      assertTrue(\"score: \" + scores[i] + \" should be > lastScore: \" + lastScore, scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    Field f1 = newField(\"field\", \"word\", TextField.TYPE_STORED);\n    Field f2 = newField(\"field\", \"word\", TextField.TYPE_STORED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 2; i++) {\n      if (VERBOSE) {\n        System.out.println(searcher.explain(new TermQuery(new Term(\"field\", \"word\")), i));\n      }\n      assertTrue(\"score: \" + scores[i] + \" should be > lastScore: \" + lastScore, scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    Field f1 = newTextField(\"field\", \"word\", Field.Store.YES);\n    Field f2 = newTextField(\"field\", \"word\", Field.Store.YES);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 2; i++) {\n      if (VERBOSE) {\n        System.out.println(searcher.explain(new TermQuery(new Term(\"field\", \"word\")), i));\n      }\n      assertTrue(\"score: \" + scores[i] + \" should be > lastScore: \" + lastScore, scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    Field f1 = newField(\"field\", \"word\", TextField.TYPE_STORED);\n    Field f2 = newField(\"field\", \"word\", TextField.TYPE_STORED);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 2; i++) {\n      if (VERBOSE) {\n        System.out.println(searcher.explain(new TermQuery(new Term(\"field\", \"word\")), i));\n      }\n      assertTrue(\"score: \" + scores[i] + \" should be > lastScore: \" + lastScore, scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    Field f1 = newTextField(\"field\", \"word\", Field.Store.YES);\n    Field f2 = newTextField(\"field\", \"word\", Field.Store.YES);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 2; i++) {\n      if (VERBOSE) {\n        System.out.println(searcher.explain(new TermQuery(new Term(\"field\", \"word\")), i));\n      }\n      assertTrue(\"score: \" + scores[i] + \" should be > lastScore: \" + lastScore, scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    Field f1 = newTextField(\"field\", \"word\", Field.Store.YES);\n    Field f2 = newTextField(\"field\", \"word\", Field.Store.YES);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 2; i++) {\n      if (VERBOSE) {\n        System.out.println(searcher.explain(new TermQuery(new Term(\"field\", \"word\")), i));\n      }\n      assertTrue(\"score: \" + scores[i] + \" should be > lastScore: \" + lastScore, scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    Field f1 = newTextField(\"field\", \"word\", Field.Store.YES);\n    Field f2 = newTextField(\"field\", \"word\", Field.Store.YES);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 2; i++) {\n      if (VERBOSE) {\n        System.out.println(searcher.explain(new TermQuery(new Term(\"field\", \"word\")), i));\n      }\n      assertTrue(\"score: \" + scores[i] + \" should be > lastScore: \" + lastScore, scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    Field f1 = newTextField(\"field\", \"word\", Field.Store.YES);\n    Field f2 = newTextField(\"field\", \"word\", Field.Store.YES);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 2; i++) {\n      if (VERBOSE) {\n        System.out.println(searcher.explain(new TermQuery(new Term(\"field\", \"word\")), i));\n      }\n      assertTrue(\"score: \" + scores[i] + \" should be > lastScore: \" + lastScore, scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae73da626f97850c922c42736f808d0378e165f0","date":1396625460,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    Field f1 = newTextField(\"field\", \"word\", Field.Store.YES);\n    Field f2 = newTextField(\"field\", \"word\", Field.Store.YES);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new SimpleCollector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         protected void doSetNextReader(AtomicReaderContext context) throws IOException {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 2; i++) {\n      if (VERBOSE) {\n        System.out.println(searcher.explain(new TermQuery(new Term(\"field\", \"word\")), i));\n      }\n      assertTrue(\"score: \" + scores[i] + \" should be > lastScore: \" + lastScore, scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    Field f1 = newTextField(\"field\", \"word\", Field.Store.YES);\n    Field f2 = newTextField(\"field\", \"word\", Field.Store.YES);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 2; i++) {\n      if (VERBOSE) {\n        System.out.println(searcher.explain(new TermQuery(new Term(\"field\", \"word\")), i));\n      }\n      assertTrue(\"score: \" + scores[i] + \" should be > lastScore: \" + lastScore, scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    Field f1 = newTextField(\"field\", \"word\", Field.Store.YES);\n    Field f2 = newTextField(\"field\", \"word\", Field.Store.YES);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new SimpleCollector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         protected void doSetNextReader(AtomicReaderContext context) throws IOException {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 2; i++) {\n      if (VERBOSE) {\n        System.out.println(searcher.explain(new TermQuery(new Term(\"field\", \"word\")), i));\n      }\n      assertTrue(\"score: \" + scores[i] + \" should be > lastScore: \" + lastScore, scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    Field f1 = newTextField(\"field\", \"word\", Field.Store.YES);\n    Field f2 = newTextField(\"field\", \"word\", Field.Store.YES);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(AtomicReaderContext context) {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 2; i++) {\n      if (VERBOSE) {\n        System.out.println(searcher.explain(new TermQuery(new Term(\"field\", \"word\")), i));\n      }\n      assertTrue(\"score: \" + scores[i] + \" should be > lastScore: \" + lastScore, scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    Field f1 = newTextField(\"field\", \"word\", Field.Store.YES);\n    Field f2 = newTextField(\"field\", \"word\", Field.Store.YES);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n\n    IndexReader reader = writer.getReader();\n    writer.shutdown();\n\n    final float[] scores = new float[4];\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new SimpleCollector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         protected void doSetNextReader(AtomicReaderContext context) throws IOException {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 2; i++) {\n      if (VERBOSE) {\n        System.out.println(searcher.explain(new TermQuery(new Term(\"field\", \"word\")), i));\n      }\n      assertTrue(\"score: \" + scores[i] + \" should be > lastScore: \" + lastScore, scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    Field f1 = newTextField(\"field\", \"word\", Field.Store.YES);\n    Field f2 = newTextField(\"field\", \"word\", Field.Store.YES);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new SimpleCollector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         protected void doSetNextReader(AtomicReaderContext context) throws IOException {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 2; i++) {\n      if (VERBOSE) {\n        System.out.println(searcher.explain(new TermQuery(new Term(\"field\", \"word\")), i));\n      }\n      assertTrue(\"score: \" + scores[i] + \" should be > lastScore: \" + lastScore, scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    Field f1 = newTextField(\"field\", \"word\", Field.Store.YES);\n    Field f2 = newTextField(\"field\", \"word\", Field.Store.YES);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n\n    IndexReader reader = writer.getReader();\n    writer.shutdown();\n\n    final float[] scores = new float[4];\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new SimpleCollector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         protected void doSetNextReader(AtomicReaderContext context) throws IOException {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 2; i++) {\n      if (VERBOSE) {\n        System.out.println(searcher.explain(new TermQuery(new Term(\"field\", \"word\")), i));\n      }\n      assertTrue(\"score: \" + scores[i] + \" should be > lastScore: \" + lastScore, scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    Field f1 = newTextField(\"field\", \"word\", Field.Store.YES);\n    Field f2 = newTextField(\"field\", \"word\", Field.Store.YES);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n\n    IndexReader reader = writer.getReader();\n    writer.shutdown();\n\n    final float[] scores = new float[4];\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new SimpleCollector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         protected void doSetNextReader(AtomicReaderContext context) throws IOException {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 2; i++) {\n      if (VERBOSE) {\n        System.out.println(searcher.explain(new TermQuery(new Term(\"field\", \"word\")), i));\n      }\n      assertTrue(\"score: \" + scores[i] + \" should be > lastScore: \" + lastScore, scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    Field f1 = newTextField(\"field\", \"word\", Field.Store.YES);\n    Field f2 = newTextField(\"field\", \"word\", Field.Store.YES);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new SimpleCollector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         protected void doSetNextReader(AtomicReaderContext context) throws IOException {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 2; i++) {\n      if (VERBOSE) {\n        System.out.println(searcher.explain(new TermQuery(new Term(\"field\", \"word\")), i));\n      }\n      assertTrue(\"score: \" + scores[i] + \" should be > lastScore: \" + lastScore, scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    Field f1 = newTextField(\"field\", \"word\", Field.Store.YES);\n    Field f2 = newTextField(\"field\", \"word\", Field.Store.YES);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n\n    IndexReader reader = writer.getReader();\n    writer.shutdown();\n\n    final float[] scores = new float[4];\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new SimpleCollector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         protected void doSetNextReader(AtomicReaderContext context) throws IOException {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 2; i++) {\n      if (VERBOSE) {\n        System.out.println(searcher.explain(new TermQuery(new Term(\"field\", \"word\")), i));\n      }\n      assertTrue(\"score: \" + scores[i] + \" should be > lastScore: \" + lastScore, scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    Field f1 = newTextField(\"field\", \"word\", Field.Store.YES);\n    Field f2 = newTextField(\"field\", \"word\", Field.Store.YES);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new SimpleCollector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         protected void doSetNextReader(LeafReaderContext context) throws IOException {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 2; i++) {\n      if (VERBOSE) {\n        System.out.println(searcher.explain(new TermQuery(new Term(\"field\", \"word\")), i));\n      }\n      assertTrue(\"score: \" + scores[i] + \" should be > lastScore: \" + lastScore, scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    Field f1 = newTextField(\"field\", \"word\", Field.Store.YES);\n    Field f2 = newTextField(\"field\", \"word\", Field.Store.YES);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new SimpleCollector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         protected void doSetNextReader(AtomicReaderContext context) throws IOException {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 2; i++) {\n      if (VERBOSE) {\n        System.out.println(searcher.explain(new TermQuery(new Term(\"field\", \"word\")), i));\n      }\n      assertTrue(\"score: \" + scores[i] + \" should be > lastScore: \" + lastScore, scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    Field f1 = newTextField(\"field\", \"word\", Field.Store.YES);\n    Field f2 = newTextField(\"field\", \"word\", Field.Store.YES);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new SimpleCollector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         protected void doSetNextReader(LeafReaderContext context) throws IOException {\n           base = context.docBase;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 2; i++) {\n      if (VERBOSE) {\n        System.out.println(searcher.explain(new TermQuery(new Term(\"field\", \"word\")), i));\n      }\n      assertTrue(\"score: \" + scores[i] + \" should be > lastScore: \" + lastScore, scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    Field f1 = newTextField(\"field\", \"word\", Field.Store.YES);\n    Field f2 = newTextField(\"field\", \"word\", Field.Store.YES);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new SimpleCollector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         protected void doSetNextReader(LeafReaderContext context) throws IOException {\n           base = context.docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 2; i++) {\n      if (VERBOSE) {\n        System.out.println(searcher.explain(new TermQuery(new Term(\"field\", \"word\")), i));\n      }\n      assertTrue(\"score: \" + scores[i] + \" should be > lastScore: \" + lastScore, scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    Field f1 = newTextField(\"field\", \"word\", Field.Store.YES);\n    Field f2 = newTextField(\"field\", \"word\", Field.Store.YES);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new SimpleCollector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         protected void doSetNextReader(LeafReaderContext context) throws IOException {\n           base = context.docBase;\n         }\n         @Override\n         public boolean needsScores() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 2; i++) {\n      if (VERBOSE) {\n        System.out.println(searcher.explain(new TermQuery(new Term(\"field\", \"word\")), i));\n      }\n      assertTrue(\"score: \" + scores[i] + \" should be > lastScore: \" + lastScore, scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    Field f1 = newTextField(\"field\", \"word\", Field.Store.YES);\n    Field f2 = newTextField(\"field\", \"word\", Field.Store.YES);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new SimpleCollector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         protected void doSetNextReader(LeafReaderContext context) throws IOException {\n           base = context.docBase;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 2; i++) {\n      if (VERBOSE) {\n        System.out.println(searcher.explain(new TermQuery(new Term(\"field\", \"word\")), i));\n      }\n      assertTrue(\"score: \" + scores[i] + \" should be > lastScore: \" + lastScore, scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe72d64ac8249b8a4f2072c192b3a3f14c616884","date":1453214671,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    Field f1 = newTextField(\"field\", \"word\", Field.Store.YES);\n    Field f2 = newTextField(\"field\", \"word\", Field.Store.YES);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new SimpleCollector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         protected void doSetNextReader(LeafReaderContext context) throws IOException {\n           base = context.docBase;\n         }\n         @Override\n         public boolean needsScores() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 2; i++) {\n      if (VERBOSE) {\n        System.out.println(searcher.explain(new TermQuery(new Term(\"field\", \"word\")), i));\n      }\n      if (scores[i] != 0.0) {\n        assertTrue(\"score: \" + scores[i] + \" should be > lastScore: \" + lastScore, scores[i] > lastScore);\n      }\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    Field f1 = newTextField(\"field\", \"word\", Field.Store.YES);\n    Field f2 = newTextField(\"field\", \"word\", Field.Store.YES);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new SimpleCollector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         protected void doSetNextReader(LeafReaderContext context) throws IOException {\n           base = context.docBase;\n         }\n         @Override\n         public boolean needsScores() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 2; i++) {\n      if (VERBOSE) {\n        System.out.println(searcher.explain(new TermQuery(new Term(\"field\", \"word\")), i));\n      }\n      assertTrue(\"score: \" + scores[i] + \" should be > lastScore: \" + lastScore, scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8744c9f7e635666dc8c90c4d87c04c1131c7fb4","date":1478975474,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    Field f1 = newTextField(\"field\", \"word\", Field.Store.YES);\n    Field f2 = newTextField(\"field\", \"word\", Field.Store.YES);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new BM25Similarity());\n    searcher.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new SimpleCollector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         protected void doSetNextReader(LeafReaderContext context) throws IOException {\n           base = context.docBase;\n         }\n         @Override\n         public boolean needsScores() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 2; i++) {\n      if (VERBOSE) {\n        System.out.println(searcher.explain(new TermQuery(new Term(\"field\", \"word\")), i));\n      }\n      if (scores[i] != 0.0) {\n        assertTrue(\"score: \" + scores[i] + \" should be > lastScore: \" + lastScore, scores[i] > lastScore);\n      }\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    Field f1 = newTextField(\"field\", \"word\", Field.Store.YES);\n    Field f2 = newTextField(\"field\", \"word\", Field.Store.YES);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new SimpleCollector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         protected void doSetNextReader(LeafReaderContext context) throws IOException {\n           base = context.docBase;\n         }\n         @Override\n         public boolean needsScores() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 2; i++) {\n      if (VERBOSE) {\n        System.out.println(searcher.explain(new TermQuery(new Term(\"field\", \"word\")), i));\n      }\n      if (scores[i] != 0.0) {\n        assertTrue(\"score: \" + scores[i] + \" should be > lastScore: \" + lastScore, scores[i] > lastScore);\n      }\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ce66578801350eee9a71156693f12f1037baf25","date":1479075186,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","sourceNew":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    Field f1 = newTextField(\"field\", \"word\", Field.Store.YES);\n    Field f2 = newTextField(\"field\", \"word\", Field.Store.YES);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new SimpleCollector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         protected void doSetNextReader(LeafReaderContext context) throws IOException {\n           base = context.docBase;\n         }\n         @Override\n         public boolean needsScores() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 2; i++) {\n      if (VERBOSE) {\n        System.out.println(searcher.explain(new TermQuery(new Term(\"field\", \"word\")), i));\n      }\n      if (scores[i] != 0.0) {\n        assertTrue(\"score: \" + scores[i] + \" should be > lastScore: \" + lastScore, scores[i] > lastScore);\n      }\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    Field f1 = newTextField(\"field\", \"word\", Field.Store.YES);\n    Field f2 = newTextField(\"field\", \"word\", Field.Store.YES);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setSimilarity(new BM25Similarity());\n    searcher.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new SimpleCollector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         protected void doSetNextReader(LeafReaderContext context) throws IOException {\n           base = context.docBase;\n         }\n         @Override\n         public boolean needsScores() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 2; i++) {\n      if (VERBOSE) {\n        System.out.println(searcher.explain(new TermQuery(new Term(\"field\", \"word\")), i));\n      }\n      if (scores[i] != 0.0) {\n        assertTrue(\"score: \" + scores[i] + \" should be > lastScore: \" + lastScore, scores[i] > lastScore);\n      }\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDocBoost#testDocBoost().mjava","sourceNew":null,"sourceOld":"  public void testDocBoost() throws Exception {\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), store, newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n\n    Field f1 = newTextField(\"field\", \"word\", Field.Store.YES);\n    Field f2 = newTextField(\"field\", \"word\", Field.Store.YES);\n    f2.setBoost(2.0f);\n\n    Document d1 = new Document();\n    Document d2 = new Document();\n\n    d1.add(f1);                                 // boost = 1\n    d2.add(f2);                                 // boost = 2\n\n    writer.addDocument(d1);\n    writer.addDocument(d2);\n\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    final float[] scores = new float[4];\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new SimpleCollector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         protected void doSetNextReader(LeafReaderContext context) throws IOException {\n           base = context.docBase;\n         }\n         @Override\n         public boolean needsScores() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 2; i++) {\n      if (VERBOSE) {\n        System.out.println(searcher.explain(new TermQuery(new Term(\"field\", \"word\")), i));\n      }\n      if (scores[i] != 0.0) {\n        assertTrue(\"score: \" + scores[i] + \" should be > lastScore: \" + lastScore, scores[i] > lastScore);\n      }\n      lastScore = scores[i];\n    }\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe72d64ac8249b8a4f2072c192b3a3f14c616884":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"7ce66578801350eee9a71156693f12f1037baf25":["f8744c9f7e635666dc8c90c4d87c04c1131c7fb4"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","ae73da626f97850c922c42736f808d0378e165f0"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["04f07771a2a7dd3a395700665ed839c3dae2def2","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae73da626f97850c922c42736f808d0378e165f0":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"f8744c9f7e635666dc8c90c4d87c04c1131c7fb4":["fe72d64ac8249b8a4f2072c192b3a3f14c616884"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["ae73da626f97850c922c42736f808d0378e165f0"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"acd9883560fd89e6448b2b447302fe543040cd4f":["fe72d64ac8249b8a4f2072c192b3a3f14c616884"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acd9883560fd89e6448b2b447302fe543040cd4f"]},"commit2Childs":{"fe72d64ac8249b8a4f2072c192b3a3f14c616884":["f8744c9f7e635666dc8c90c4d87c04c1131c7fb4","acd9883560fd89e6448b2b447302fe543040cd4f"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"7ce66578801350eee9a71156693f12f1037baf25":[],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["fe72d64ac8249b8a4f2072c192b3a3f14c616884"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"ae73da626f97850c922c42736f808d0378e165f0":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"f8744c9f7e635666dc8c90c4d87c04c1131c7fb4":["7ce66578801350eee9a71156693f12f1037baf25"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","fe33227f6805edab2036cbb80645cc4e2d1fa424","ae73da626f97850c922c42736f808d0378e165f0"],"acd9883560fd89e6448b2b447302fe543040cd4f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7ce66578801350eee9a71156693f12f1037baf25","15e323346eac5e4685c0a9f2df85eb96b4239bbb","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}