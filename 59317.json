{"path":"src/java/org/apache/lucene/search/FieldCache#purgeAllCaches().mjava","commits":[{"id":"e69f59b863731d864bf3047235e718f0f88f8841","date":1250105498,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldCache#purgeAllCaches().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * <p>\n   * EXPERT: Instructs the FieldCache to forcibly expunge all entries \n   * from the underlying caches.  This is intended only to be used for \n   * test methods as a way to ensure a known base state of the Cache \n   * (with out needing to rely on GC to free WeakReferences).  \n   * It should not be relied on for \"Cache maintenance\" in general \n   * application code.\n   * </p>\n   * <p>\n   * <b>EXPERIMENTAL API:</b> This API is considered extremely advanced \n   * and experimental.  It may be removed or altered w/o warning in future \n   * releases \n   * of Lucene.\n   * </p>\n   */\n  public abstract void purgeAllCaches();\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e0ca16f14d94e05bda40e00ecb2a2c0225343c6","date":1264951226,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldCache#purgeAllCaches().mjava","pathOld":"src/java/org/apache/lucene/search/FieldCache#purgeAllCaches().mjava","sourceNew":"  /**\n   * <p>\n   * EXPERT: Instructs the FieldCache to forcibly expunge all entries \n   * from the underlying caches.  This is intended only to be used for \n   * test methods as a way to ensure a known base state of the Cache \n   * (with out needing to rely on GC to free WeakReferences).  \n   * It should not be relied on for \"Cache maintenance\" in general \n   * application code.\n   * </p>\n   * @lucene.experimental\n   */\n  public abstract void purgeAllCaches();\n\n","sourceOld":"  /**\n   * <p>\n   * EXPERT: Instructs the FieldCache to forcibly expunge all entries \n   * from the underlying caches.  This is intended only to be used for \n   * test methods as a way to ensure a known base state of the Cache \n   * (with out needing to rely on GC to free WeakReferences).  \n   * It should not be relied on for \"Cache maintenance\" in general \n   * application code.\n   * </p>\n   * <p>\n   * <b>EXPERIMENTAL API:</b> This API is considered extremely advanced \n   * and experimental.  It may be removed or altered w/o warning in future \n   * releases \n   * of Lucene.\n   * </p>\n   */\n  public abstract void purgeAllCaches();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldCache#purgeAllCaches().mjava","pathOld":"src/java/org/apache/lucene/search/FieldCache#purgeAllCaches().mjava","sourceNew":"  /**\n   * <p>\n   * EXPERT: Instructs the FieldCache to forcibly expunge all entries \n   * from the underlying caches.  This is intended only to be used for \n   * test methods as a way to ensure a known base state of the Cache \n   * (with out needing to rely on GC to free WeakReferences).  \n   * It should not be relied on for \"Cache maintenance\" in general \n   * application code.\n   * </p>\n   * @lucene.experimental\n   */\n  public abstract void purgeAllCaches();\n\n","sourceOld":"  /**\n   * <p>\n   * EXPERT: Instructs the FieldCache to forcibly expunge all entries \n   * from the underlying caches.  This is intended only to be used for \n   * test methods as a way to ensure a known base state of the Cache \n   * (with out needing to rely on GC to free WeakReferences).  \n   * It should not be relied on for \"Cache maintenance\" in general \n   * application code.\n   * </p>\n   * @lucene.experimental\n   */\n  public abstract void purgeAllCaches();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e0ca16f14d94e05bda40e00ecb2a2c0225343c6":["e69f59b863731d864bf3047235e718f0f88f8841"],"e69f59b863731d864bf3047235e718f0f88f8841":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1e0ca16f14d94e05bda40e00ecb2a2c0225343c6"]},"commit2Childs":{"1e0ca16f14d94e05bda40e00ecb2a2c0225343c6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e69f59b863731d864bf3047235e718f0f88f8841":["1e0ca16f14d94e05bda40e00ecb2a2c0225343c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e69f59b863731d864bf3047235e718f0f88f8841"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}