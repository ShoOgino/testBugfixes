{"path":"solr/core/src/test/org/apache/solr/cloud/TestCloudPseudoReturnFields#testMultiValued().mjava","commits":[{"id":"934e1c7ca2823f3ec2758cc0f0912eac404856f2","date":1467837741,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudPseudoReturnFields#testMultiValued().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultiValued() throws Exception {\n    // the response writers used to consult isMultiValued on the field\n    // but this doesn't work when you alias a single valued field to\n    // a multi valued field (the field value is copied first, then\n    // if the type lookup is done again later, we get the wrong thing). SOLR-4036\n\n    // score as psuedo field - precondition checks\n    for (String name : new String[] {\"score\", \"val_ss\"}) {\n      try {\n        FieldResponse frsp = new Field(name, params(\"includeDynamic\",\"true\",\n                                                    \"showDefaults\",\"true\")).process(CLOUD_CLIENT);\n        assertNotNull(\"Test depends on a (dynamic) field matching '\"+name+\"', Null response\", frsp);\n        assertEquals(\"Test depends on a (dynamic) field matching '\"+name+\"', bad status: \" + frsp.toString(),\n                     0, frsp.getStatus());\n        assertNotNull(\"Test depends on a (dynamic) field matching '\"+name+\n                      \"', schema was changed out from under us? ... \" + frsp.toString(), frsp.getField());\n        assertEquals(\"Test depends on a multivalued dynamic field matching '\"+name+\n                     \"', schema was changed out from under us? ... \" + frsp.toString(),\n                     Boolean.TRUE, frsp.getField().get(\"multiValued\"));\n      } catch (SolrServerException e) {\n        assertEquals(\"Couldn't fetch field for '\"+name+\"' ... schema changed out from under us?\",\n                     null, e);\n      }\n    }\n\n    SolrDocument doc = null;\n    \n    // score as psuedo field\n    doc = assertSearchOneDoc(params(\"q\",\"*:*\", \"fq\", \"id:42\", \"fl\",\"id,score,val_ss,val2_ss\"));\n    assertEquals(\"42\", doc.getFieldValue(\"id\"));\n    assertEquals(1.0F, doc.getFieldValue(\"score\"));\n    assertEquals(\"\"+doc, 2, doc.size()); // no value for val2_ss or val_ss ... yet...\n    \n    // TODO: update this test & TestPseudoReturnFields to index docs using a (multivalued) \"val_ss\" instead of \"ssto\"\n    //\n    // that way we can first sanity check a single value in a multivalued field is returned correctly\n    // as a \"List\" of one element, *AND* then we could be testing that a (single valued) psuedo-field correctly\n    // overrides that actual (real) value in a multivalued field (ie: not returning a an List)\n    //\n    // (NOTE: not doing this yet due to how it will impact most other tests, many of which are currently\n    // @AwaitsFix'ed)\n    //\n    //assertTrue(doc.getFieldValue(\"val_ss\").getClass().toString(),\n    //           doc.getFieldValue(\"val_ss\") instanceof List);\n    \n    // single value int using alias that matches multivalued dynamic field\n    doc = assertSearchOneDoc(params(\"q\",\"id:42\", \"fl\",\"val_ss:val_i, val2_ss:10\"));\n    assertEquals(\"\"+doc, 2, doc.size());\n    assertEquals(\"\"+doc, 1, doc.getFieldValue(\"val_ss\"));\n    assertEquals(\"\"+doc, 10L, doc.getFieldValue(\"val2_ss\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudPseudoReturnFields#testMultiValued().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultiValued() throws Exception {\n    // the response writers used to consult isMultiValued on the field\n    // but this doesn't work when you alias a single valued field to\n    // a multi valued field (the field value is copied first, then\n    // if the type lookup is done again later, we get the wrong thing). SOLR-4036\n\n    // score as psuedo field - precondition checks\n    for (String name : new String[] {\"score\", \"val_ss\"}) {\n      try {\n        FieldResponse frsp = new Field(name, params(\"includeDynamic\",\"true\",\n                                                    \"showDefaults\",\"true\")).process(CLOUD_CLIENT);\n        assertNotNull(\"Test depends on a (dynamic) field matching '\"+name+\"', Null response\", frsp);\n        assertEquals(\"Test depends on a (dynamic) field matching '\"+name+\"', bad status: \" + frsp.toString(),\n                     0, frsp.getStatus());\n        assertNotNull(\"Test depends on a (dynamic) field matching '\"+name+\n                      \"', schema was changed out from under us? ... \" + frsp.toString(), frsp.getField());\n        assertEquals(\"Test depends on a multivalued dynamic field matching '\"+name+\n                     \"', schema was changed out from under us? ... \" + frsp.toString(),\n                     Boolean.TRUE, frsp.getField().get(\"multiValued\"));\n      } catch (SolrServerException e) {\n        assertEquals(\"Couldn't fetch field for '\"+name+\"' ... schema changed out from under us?\",\n                     null, e);\n      }\n    }\n\n    SolrDocument doc = null;\n    \n    // score as psuedo field\n    doc = assertSearchOneDoc(params(\"q\",\"*:*\", \"fq\", \"id:42\", \"fl\",\"id,score,val_ss,val2_ss\"));\n    assertEquals(\"42\", doc.getFieldValue(\"id\"));\n    assertEquals(1.0F, doc.getFieldValue(\"score\"));\n    assertEquals(\"\"+doc, 2, doc.size()); // no value for val2_ss or val_ss ... yet...\n    \n    // TODO: update this test & TestPseudoReturnFields to index docs using a (multivalued) \"val_ss\" instead of \"ssto\"\n    //\n    // that way we can first sanity check a single value in a multivalued field is returned correctly\n    // as a \"List\" of one element, *AND* then we could be testing that a (single valued) psuedo-field correctly\n    // overrides that actual (real) value in a multivalued field (ie: not returning a an List)\n    //\n    // (NOTE: not doing this yet due to how it will impact most other tests, many of which are currently\n    // @AwaitsFix'ed)\n    //\n    //assertTrue(doc.getFieldValue(\"val_ss\").getClass().toString(),\n    //           doc.getFieldValue(\"val_ss\") instanceof List);\n    \n    // single value int using alias that matches multivalued dynamic field\n    doc = assertSearchOneDoc(params(\"q\",\"id:42\", \"fl\",\"val_ss:val_i, val2_ss:10\"));\n    assertEquals(\"\"+doc, 2, doc.size());\n    assertEquals(\"\"+doc, 1, doc.getFieldValue(\"val_ss\"));\n    assertEquals(\"\"+doc, 10L, doc.getFieldValue(\"val2_ss\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"934e1c7ca2823f3ec2758cc0f0912eac404856f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","934e1c7ca2823f3ec2758cc0f0912eac404856f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["934e1c7ca2823f3ec2758cc0f0912eac404856f2"]},"commit2Childs":{"934e1c7ca2823f3ec2758cc0f0912eac404856f2":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["934e1c7ca2823f3ec2758cc0f0912eac404856f2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}