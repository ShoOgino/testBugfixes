{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#StandardFacetsAccumulator(FacetSearchParams,IndexReader,TaxonomyReader,IntArrayAllocator,FloatArrayAllocator).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#StandardFacetsAccumulator(FacetSearchParams,IndexReader,TaxonomyReader,IntArrayAllocator,FloatArrayAllocator).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#StandardFacetsAccumulator(FacetSearchParams,IndexReader,TaxonomyReader,IntArrayAllocator,FloatArrayAllocator).mjava","sourceNew":"  public StandardFacetsAccumulator(FacetSearchParams searchParams, IndexReader indexReader,\n      TaxonomyReader taxonomyReader, IntArrayAllocator intArrayAllocator,\n      FloatArrayAllocator floatArrayAllocator) {\n    \n    super(searchParams,indexReader,taxonomyReader);\n    int realPartitionSize = intArrayAllocator == null || floatArrayAllocator == null \n              ? PartitionsUtils.partitionSize(searchParams, taxonomyReader) : -1; // -1 if not needed.\n    this.intArrayAllocator = intArrayAllocator != null \n        ? intArrayAllocator\n        // create a default one if null was provided\n        : new IntArrayAllocator(realPartitionSize, 1);\n    this.floatArrayAllocator = floatArrayAllocator != null \n        ? floatArrayAllocator\n        // create a default one if null provided\n        : new FloatArrayAllocator(realPartitionSize, 1);\n    // can only be computed later when docids size is known\n    isUsingComplements = false;\n    partitionSize = PartitionsUtils.partitionSize(searchParams, taxonomyReader);\n    maxPartitions = (int) Math.ceil(this.taxonomyReader.getSize() / (double) partitionSize);\n    accumulateGuard = new Object();\n  }\n\n","sourceOld":"  public StandardFacetsAccumulator(FacetSearchParams searchParams, IndexReader indexReader,\n      TaxonomyReader taxonomyReader, IntArrayAllocator intArrayAllocator,\n      FloatArrayAllocator floatArrayAllocator) {\n    \n    super(searchParams,indexReader,taxonomyReader);\n    int realPartitionSize = intArrayAllocator == null || floatArrayAllocator == null \n              ? PartitionsUtils.partitionSize(searchParams, taxonomyReader) : -1; // -1 if not needed.\n    this.intArrayAllocator = intArrayAllocator != null \n        ? intArrayAllocator\n        // create a default one if null was provided\n        : new IntArrayAllocator(realPartitionSize, 1);\n    this.floatArrayAllocator = floatArrayAllocator != null \n        ? floatArrayAllocator\n        // create a default one if null provided\n        : new FloatArrayAllocator(realPartitionSize, 1);\n    // can only be computed later when docids size is known\n    isUsingComplements = false;\n    partitionSize = PartitionsUtils.partitionSize(searchParams, taxonomyReader);\n    maxPartitions = (int) Math.ceil(this.taxonomyReader.getSize() / (double) partitionSize);\n    accumulateGuard = new Object();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a2548b7f050533ac9a884b31cab5fb6f0386fbb","date":1355233860,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#StandardFacetsAccumulator(FacetSearchParams,IndexReader,TaxonomyReader,FacetArrays).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#StandardFacetsAccumulator(FacetSearchParams,IndexReader,TaxonomyReader,IntArrayAllocator,FloatArrayAllocator).mjava","sourceNew":"  public StandardFacetsAccumulator(FacetSearchParams searchParams, IndexReader indexReader,\n      TaxonomyReader taxonomyReader, FacetArrays facetArrays) {\n    super(searchParams,indexReader,taxonomyReader);\n    \n    if (facetArrays == null) {\n      throw new IllegalArgumentException(\"facetArrays cannot be null\");\n    }\n    \n    this.facetArrays = facetArrays;\n    // can only be computed later when docids size is known\n    isUsingComplements = false;\n    partitionSize = PartitionsUtils.partitionSize(searchParams, taxonomyReader);\n    maxPartitions = (int) Math.ceil(this.taxonomyReader.getSize() / (double) partitionSize);\n    accumulateGuard = new Object();\n  }\n\n","sourceOld":"  public StandardFacetsAccumulator(FacetSearchParams searchParams, IndexReader indexReader,\n      TaxonomyReader taxonomyReader, IntArrayAllocator intArrayAllocator,\n      FloatArrayAllocator floatArrayAllocator) {\n    \n    super(searchParams,indexReader,taxonomyReader);\n    int realPartitionSize = intArrayAllocator == null || floatArrayAllocator == null \n              ? PartitionsUtils.partitionSize(searchParams, taxonomyReader) : -1; // -1 if not needed.\n    this.intArrayAllocator = intArrayAllocator != null \n        ? intArrayAllocator\n        // create a default one if null was provided\n        : new IntArrayAllocator(realPartitionSize, 1);\n    this.floatArrayAllocator = floatArrayAllocator != null \n        ? floatArrayAllocator\n        // create a default one if null provided\n        : new FloatArrayAllocator(realPartitionSize, 1);\n    // can only be computed later when docids size is known\n    isUsingComplements = false;\n    partitionSize = PartitionsUtils.partitionSize(searchParams, taxonomyReader);\n    maxPartitions = (int) Math.ceil(this.taxonomyReader.getSize() / (double) partitionSize);\n    accumulateGuard = new Object();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#StandardFacetsAccumulator(FacetSearchParams,IndexReader,TaxonomyReader,IntArrayAllocator,FloatArrayAllocator).mjava","sourceNew":null,"sourceOld":"  public StandardFacetsAccumulator(FacetSearchParams searchParams, IndexReader indexReader,\n      TaxonomyReader taxonomyReader, IntArrayAllocator intArrayAllocator,\n      FloatArrayAllocator floatArrayAllocator) {\n    \n    super(searchParams,indexReader,taxonomyReader);\n    int realPartitionSize = intArrayAllocator == null || floatArrayAllocator == null \n              ? PartitionsUtils.partitionSize(searchParams, taxonomyReader) : -1; // -1 if not needed.\n    this.intArrayAllocator = intArrayAllocator != null \n        ? intArrayAllocator\n        // create a default one if null was provided\n        : new IntArrayAllocator(realPartitionSize, 1);\n    this.floatArrayAllocator = floatArrayAllocator != null \n        ? floatArrayAllocator\n        // create a default one if null provided\n        : new FloatArrayAllocator(realPartitionSize, 1);\n    // can only be computed later when docids size is known\n    isUsingComplements = false;\n    partitionSize = PartitionsUtils.partitionSize(searchParams, taxonomyReader);\n    maxPartitions = (int) Math.ceil(this.taxonomyReader.getSize() / (double) partitionSize);\n    accumulateGuard = new Object();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2a2548b7f050533ac9a884b31cab5fb6f0386fbb"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2a2548b7f050533ac9a884b31cab5fb6f0386fbb":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2a2548b7f050533ac9a884b31cab5fb6f0386fbb"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","2a2548b7f050533ac9a884b31cab5fb6f0386fbb"],"2a2548b7f050533ac9a884b31cab5fb6f0386fbb":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}