{"path":"solr/core/src/test/org/apache/solr/cloud/TestCloudRecovery#beforeTest().mjava","commits":[{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudRecovery#beforeTest().mjava","pathOld":"/dev/null","sourceNew":"  @Before\n  public void beforeTest() throws Exception {\n    configureCluster(2)\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    onlyLeaderIndexes = random().nextBoolean();\n    nrtReplicas = 2; // onlyLeaderIndexes?0:2;\n    tlogReplicas = 0; // onlyLeaderIndexes?2:0; TODO: SOLR-12313 tlog replicas break tests because\n                          // TestInjection#waitForInSyncWithLeader is broken\n    CollectionAdminRequest\n        .createCollection(COLLECTION, \"config\", 2, nrtReplicas, tlogReplicas, 0)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 2 * (nrtReplicas + tlogReplicas));\n\n    // SOLR-12314 : assert that these values are from the solr.xml file and not UpdateShardHandlerConfig#DEFAULT\n    for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      UpdateShardHandler shardHandler = jettySolrRunner.getCoreContainer().getUpdateShardHandler();\n      int socketTimeout = shardHandler.getSocketTimeout();\n      int connectionTimeout = shardHandler.getConnectionTimeout();\n      assertEquals(340000, socketTimeout);\n      assertEquals(45000, connectionTimeout);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudRecovery#beforeTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudRecovery#beforeTest().mjava","sourceNew":"  @Before\n  public void beforeTest() throws Exception {\n    configureCluster(2)\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    onlyLeaderIndexes = random().nextBoolean();\n    nrtReplicas = 2; // onlyLeaderIndexes?0:2;\n    tlogReplicas = 0; // onlyLeaderIndexes?2:0; TODO: SOLR-12313 tlog replicas break tests because\n                          // TestInjection#waitForInSyncWithLeader is broken\n    CollectionAdminRequest\n        .createCollection(COLLECTION, \"config\", 2, nrtReplicas, tlogReplicas, 0)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 2 * (nrtReplicas + tlogReplicas));\n\n    // SOLR-12314 : assert that these values are from the solr.xml file and not UpdateShardHandlerConfig#DEFAULT\n    for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      UpdateShardHandler shardHandler = jettySolrRunner.getCoreContainer().getUpdateShardHandler();\n      int socketTimeout = shardHandler.getSocketTimeout();\n      int connectionTimeout = shardHandler.getConnectionTimeout();\n      assertEquals(340000, socketTimeout);\n      assertEquals(45000, connectionTimeout);\n    }\n  }\n\n","sourceOld":"  @Before\n  public void beforeTest() throws Exception {\n    configureCluster(2)\n        .addConfig(\"config\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    onlyLeaderIndexes = random().nextBoolean();\n    nrtReplicas = 2; // onlyLeaderIndexes?0:2;\n    tlogReplicas = 0; // onlyLeaderIndexes?2:0; TODO: SOLR-12313 tlog replicas break tests because\n                          // TestInjection#waitForInSyncWithLeader is broken\n    CollectionAdminRequest\n        .createCollection(COLLECTION, \"config\", 2, nrtReplicas, tlogReplicas, 0)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 2 * (nrtReplicas + tlogReplicas));\n\n    // SOLR-12314 : assert that these values are from the solr.xml file and not UpdateShardHandlerConfig#DEFAULT\n    for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      UpdateShardHandler shardHandler = jettySolrRunner.getCoreContainer().getUpdateShardHandler();\n      int socketTimeout = shardHandler.getSocketTimeout();\n      int connectionTimeout = shardHandler.getConnectionTimeout();\n      assertEquals(340000, socketTimeout);\n      assertEquals(45000, connectionTimeout);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}