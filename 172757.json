{"path":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery.SpanTermWeight#getSpans(LeafReaderContext,Bits,Postings).mjava","commits":[{"id":"29aea3139c4326c0501d75d51059855463220279","date":1433952060,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery.SpanTermWeight#getSpans(LeafReaderContext,Bits,Postings).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery.SpanTermWeight#getSpans(LeafReaderContext,Bits,SpanCollector).mjava","sourceNew":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Postings requiredPostings) throws IOException {\n\n      assert termContext.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termContext.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n\n      final TermState state = termContext.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert context.reader().docFreq(term) == 0 : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n\n      final Terms terms = context.reader().terms(term.field());\n      if (terms == null)\n        return null;\n      if (terms.hasPositions() == false)\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n\n      final TermsEnum termsEnum = terms.iterator();\n      termsEnum.seekExact(term.bytes(), state);\n\n      final PostingsEnum postings = termsEnum.postings(acceptDocs, null, requiredPostings.getRequiredPostings());\n      return new TermSpans(postings, term);\n    }\n\n","sourceOld":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, SpanCollector collector) throws IOException {\n\n      assert termContext.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termContext.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n\n      final TermState state = termContext.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert context.reader().docFreq(term) == 0 : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n\n      final Terms terms = context.reader().terms(term.field());\n      if (terms == null)\n        return null;\n      if (terms.hasPositions() == false)\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n\n      final TermsEnum termsEnum = terms.iterator();\n      termsEnum.seekExact(term.bytes(), state);\n\n      final PostingsEnum postings = termsEnum.postings(acceptDocs, null, collector.requiredPostings());\n      return new TermSpans(postings, term);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery.SpanTermWeight#getSpans(LeafReaderContext,Postings).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery.SpanTermWeight#getSpans(LeafReaderContext,Bits,Postings).mjava","sourceNew":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings) throws IOException {\n\n      assert termContext.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termContext.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n\n      final TermState state = termContext.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert context.reader().docFreq(term) == 0 : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n\n      final Terms terms = context.reader().terms(term.field());\n      if (terms == null)\n        return null;\n      if (terms.hasPositions() == false)\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n\n      final TermsEnum termsEnum = terms.iterator();\n      termsEnum.seekExact(term.bytes(), state);\n\n      final PostingsEnum postings = termsEnum.postings(null, requiredPostings.getRequiredPostings());\n      return new TermSpans(postings, term);\n    }\n\n","sourceOld":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Postings requiredPostings) throws IOException {\n\n      assert termContext.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termContext.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n\n      final TermState state = termContext.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert context.reader().docFreq(term) == 0 : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n\n      final Terms terms = context.reader().terms(term.field());\n      if (terms == null)\n        return null;\n      if (terms.hasPositions() == false)\n        throw new IllegalStateException(\"field \\\"\" + term.field() + \"\\\" was indexed without position data; cannot run SpanTermQuery (term=\" + term.text() + \")\");\n\n      final TermsEnum termsEnum = terms.iterator();\n      termsEnum.seekExact(term.bytes(), state);\n\n      final PostingsEnum postings = termsEnum.postings(acceptDocs, null, requiredPostings.getRequiredPostings());\n      return new TermSpans(postings, term);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["29aea3139c4326c0501d75d51059855463220279"],"29aea3139c4326c0501d75d51059855463220279":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4464508ee83288c8c4585b533f9faaa93aa314"]},"commit2Childs":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29aea3139c4326c0501d75d51059855463220279":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29aea3139c4326c0501d75d51059855463220279"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}