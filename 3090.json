{"path":"src/test/org/apache/lucene/search/TestTimeLimitedCollector#doTestMultiThreads(boolean).mjava","commits":[{"id":"ea73f58403a6c26bcb09b4933832348d80deb45b","date":1202849732,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTimeLimitedCollector#doTestMultiThreads(boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestMultiThreads(final boolean withTimeout) {\n    Thread [] threadArray = new Thread[N_THREADS];\n    final BitSet success = new BitSet(N_THREADS);\n    for( int i = 0; i < threadArray.length; ++i ) {\n      final int num = i;\n      threadArray[num] = new Thread() {\n          public void run() {\n            if (withTimeout) {\n              doTestTimeout(true);\n            } else {\n              doTestSearch();\n            }\n            success.set(num);\n          }\n      };\n    }\n    for( int i = 0; i < threadArray.length; ++i ) {\n      threadArray[i].start();\n    }\n    boolean interrupted = false;\n    for( int i = 0; i < threadArray.length; ++i ) {\n      try {\n        threadArray[i].join();\n      } catch (InterruptedException e) {\n        interrupted = true;\n      }\n    }\n    if (interrupted) {\n      Thread.currentThread().interrupt();\n    }\n    assertEquals(N_THREADS,success.cardinality());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e7f18e513f9984ff8d5c94dbdf877c5e21922c92"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f5ce8825677e635ae7c7529ca806883b0d0a4396","date":1202889042,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTimeLimitedCollector#doTestMultiThreads(boolean).mjava","pathOld":"src/test/org/apache/lucene/search/TestTimeLimitedCollector#doTestMultiThreads(boolean).mjava","sourceNew":"  private void doTestMultiThreads(final boolean withTimeout) {\n    Thread [] threadArray = new Thread[N_THREADS];\n    final BitSet success = new BitSet(N_THREADS);\n    for( int i = 0; i < threadArray.length; ++i ) {\n      final int num = i;\n      threadArray[num] = new Thread() {\n          public void run() {\n            if (withTimeout) {\n              doTestTimeout(true);\n            } else {\n              doTestSearch();\n            }\n            success.set(num);\n          }\n      };\n    }\n    for( int i = 0; i < threadArray.length; ++i ) {\n      threadArray[i].start();\n    }\n    boolean interrupted = false;\n    for( int i = 0; i < threadArray.length; ++i ) {\n      try {\n        threadArray[i].join();\n      } catch (InterruptedException e) {\n        interrupted = true;\n      }\n    }\n    if (interrupted) {\n      Thread.currentThread().interrupt();\n    }\n    assertEquals(\"some threads failed!\", N_THREADS,success.cardinality());\n  }\n\n","sourceOld":"  private void doTestMultiThreads(final boolean withTimeout) {\n    Thread [] threadArray = new Thread[N_THREADS];\n    final BitSet success = new BitSet(N_THREADS);\n    for( int i = 0; i < threadArray.length; ++i ) {\n      final int num = i;\n      threadArray[num] = new Thread() {\n          public void run() {\n            if (withTimeout) {\n              doTestTimeout(true);\n            } else {\n              doTestSearch();\n            }\n            success.set(num);\n          }\n      };\n    }\n    for( int i = 0; i < threadArray.length; ++i ) {\n      threadArray[i].start();\n    }\n    boolean interrupted = false;\n    for( int i = 0; i < threadArray.length; ++i ) {\n      try {\n        threadArray[i].join();\n      } catch (InterruptedException e) {\n        interrupted = true;\n      }\n    }\n    if (interrupted) {\n      Thread.currentThread().interrupt();\n    }\n    assertEquals(N_THREADS,success.cardinality());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e93c636aab7319e002a63a0a7fca7d509b05078","date":1202985391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTimeLimitedCollector#doTestMultiThreads(boolean).mjava","pathOld":"src/test/org/apache/lucene/search/TestTimeLimitedCollector#doTestMultiThreads(boolean).mjava","sourceNew":"  private void doTestMultiThreads(final boolean withTimeout) {\n    Thread [] threadArray = new Thread[N_THREADS];\n    final BitSet success = new BitSet(N_THREADS);\n    for( int i = 0; i < threadArray.length; ++i ) {\n      final int num = i;\n      threadArray[num] = new Thread() {\n          public void run() {\n            if (withTimeout) {\n              doTestTimeout(true);\n            } else {\n              doTestSearch();\n            }\n            synchronized(success) {\n              success.set(num);\n            }\n          }\n      };\n    }\n    for( int i = 0; i < threadArray.length; ++i ) {\n      threadArray[i].start();\n    }\n    boolean interrupted = false;\n    for( int i = 0; i < threadArray.length; ++i ) {\n      try {\n        threadArray[i].join();\n      } catch (InterruptedException e) {\n        interrupted = true;\n      }\n    }\n    if (interrupted) {\n      Thread.currentThread().interrupt();\n    }\n    assertEquals(\"some threads failed!\", N_THREADS,success.cardinality());\n  }\n\n","sourceOld":"  private void doTestMultiThreads(final boolean withTimeout) {\n    Thread [] threadArray = new Thread[N_THREADS];\n    final BitSet success = new BitSet(N_THREADS);\n    for( int i = 0; i < threadArray.length; ++i ) {\n      final int num = i;\n      threadArray[num] = new Thread() {\n          public void run() {\n            if (withTimeout) {\n              doTestTimeout(true);\n            } else {\n              doTestSearch();\n            }\n            success.set(num);\n          }\n      };\n    }\n    for( int i = 0; i < threadArray.length; ++i ) {\n      threadArray[i].start();\n    }\n    boolean interrupted = false;\n    for( int i = 0; i < threadArray.length; ++i ) {\n      try {\n        threadArray[i].join();\n      } catch (InterruptedException e) {\n        interrupted = true;\n      }\n    }\n    if (interrupted) {\n      Thread.currentThread().interrupt();\n    }\n    assertEquals(\"some threads failed!\", N_THREADS,success.cardinality());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7f18e513f9984ff8d5c94dbdf877c5e21922c92","date":1205874488,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTimeLimitedCollector#doTestMultiThreads(boolean).mjava","pathOld":"src/test/org/apache/lucene/search/TestTimeLimitedCollector#doTestMultiThreads(boolean).mjava","sourceNew":"  private void doTestMultiThreads(final boolean withTimeout) {\n    Thread [] threadArray = new Thread[N_THREADS];\n    final BitSet success = new BitSet(N_THREADS);\n    for( int i = 0; i < threadArray.length; ++i ) {\n      final int num = i;\n      threadArray[num] = new Thread() {\n          public void run() {\n            if (withTimeout) {\n              doTestTimeout(true,true);\n            } else {\n              doTestSearch();\n            }\n            synchronized(success) {\n              success.set(num);\n            }\n          }\n      };\n    }\n    for( int i = 0; i < threadArray.length; ++i ) {\n      threadArray[i].start();\n    }\n    boolean interrupted = false;\n    for( int i = 0; i < threadArray.length; ++i ) {\n      try {\n        threadArray[i].join();\n      } catch (InterruptedException e) {\n        interrupted = true;\n      }\n    }\n    if (interrupted) {\n      Thread.currentThread().interrupt();\n    }\n    assertEquals(\"some threads failed!\", N_THREADS,success.cardinality());\n  }\n\n","sourceOld":"  private void doTestMultiThreads(final boolean withTimeout) {\n    Thread [] threadArray = new Thread[N_THREADS];\n    final BitSet success = new BitSet(N_THREADS);\n    for( int i = 0; i < threadArray.length; ++i ) {\n      final int num = i;\n      threadArray[num] = new Thread() {\n          public void run() {\n            if (withTimeout) {\n              doTestTimeout(true);\n            } else {\n              doTestSearch();\n            }\n            synchronized(success) {\n              success.set(num);\n            }\n          }\n      };\n    }\n    for( int i = 0; i < threadArray.length; ++i ) {\n      threadArray[i].start();\n    }\n    boolean interrupted = false;\n    for( int i = 0; i < threadArray.length; ++i ) {\n      try {\n        threadArray[i].join();\n      } catch (InterruptedException e) {\n        interrupted = true;\n      }\n    }\n    if (interrupted) {\n      Thread.currentThread().interrupt();\n    }\n    assertEquals(\"some threads failed!\", N_THREADS,success.cardinality());\n  }\n\n","bugFix":["ea73f58403a6c26bcb09b4933832348d80deb45b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba7fd1181f778e9954547e8e6a47587ebf08e3fb","date":1238267455,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTimeLimitedCollector#doTestMultiThreads(boolean).mjava","pathOld":"src/test/org/apache/lucene/search/TestTimeLimitedCollector#doTestMultiThreads(boolean).mjava","sourceNew":"  private void doTestMultiThreads(final boolean withTimeout) throws Exception {\n    Thread [] threadArray = new Thread[N_THREADS];\n    final BitSet success = new BitSet(N_THREADS);\n    for( int i = 0; i < threadArray.length; ++i ) {\n      final int num = i;\n      threadArray[num] = new Thread() {\n          public void run() {\n            if (withTimeout) {\n              doTestTimeout(true,true);\n            } else {\n              doTestSearch();\n            }\n            synchronized(success) {\n              success.set(num);\n            }\n          }\n      };\n    }\n    for( int i = 0; i < threadArray.length; ++i ) {\n      threadArray[i].start();\n    }\n    for( int i = 0; i < threadArray.length; ++i ) {\n      threadArray[i].join();\n    }\n    assertEquals(\"some threads failed!\", N_THREADS,success.cardinality());\n  }\n\n","sourceOld":"  private void doTestMultiThreads(final boolean withTimeout) {\n    Thread [] threadArray = new Thread[N_THREADS];\n    final BitSet success = new BitSet(N_THREADS);\n    for( int i = 0; i < threadArray.length; ++i ) {\n      final int num = i;\n      threadArray[num] = new Thread() {\n          public void run() {\n            if (withTimeout) {\n              doTestTimeout(true,true);\n            } else {\n              doTestSearch();\n            }\n            synchronized(success) {\n              success.set(num);\n            }\n          }\n      };\n    }\n    for( int i = 0; i < threadArray.length; ++i ) {\n      threadArray[i].start();\n    }\n    boolean interrupted = false;\n    for( int i = 0; i < threadArray.length; ++i ) {\n      try {\n        threadArray[i].join();\n      } catch (InterruptedException e) {\n        interrupted = true;\n      }\n    }\n    if (interrupted) {\n      Thread.currentThread().interrupt();\n    }\n    assertEquals(\"some threads failed!\", N_THREADS,success.cardinality());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/search/TestTimeLimitedCollector#doTestMultiThreads(boolean).mjava","sourceNew":null,"sourceOld":"  private void doTestMultiThreads(final boolean withTimeout) throws Exception {\n    Thread [] threadArray = new Thread[N_THREADS];\n    final BitSet success = new BitSet(N_THREADS);\n    for( int i = 0; i < threadArray.length; ++i ) {\n      final int num = i;\n      threadArray[num] = new Thread() {\n          public void run() {\n            if (withTimeout) {\n              doTestTimeout(true,true);\n            } else {\n              doTestSearch();\n            }\n            synchronized(success) {\n              success.set(num);\n            }\n          }\n      };\n    }\n    for( int i = 0; i < threadArray.length; ++i ) {\n      threadArray[i].start();\n    }\n    for( int i = 0; i < threadArray.length; ++i ) {\n      threadArray[i].join();\n    }\n    assertEquals(\"some threads failed!\", N_THREADS,success.cardinality());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/search/TestTimeLimitedCollector#doTestMultiThreads(boolean).mjava","sourceNew":null,"sourceOld":"  private void doTestMultiThreads(final boolean withTimeout) throws Exception {\n    Thread [] threadArray = new Thread[N_THREADS];\n    final BitSet success = new BitSet(N_THREADS);\n    for( int i = 0; i < threadArray.length; ++i ) {\n      final int num = i;\n      threadArray[num] = new Thread() {\n          public void run() {\n            if (withTimeout) {\n              doTestTimeout(true,true);\n            } else {\n              doTestSearch();\n            }\n            synchronized(success) {\n              success.set(num);\n            }\n          }\n      };\n    }\n    for( int i = 0; i < threadArray.length; ++i ) {\n      threadArray[i].start();\n    }\n    for( int i = 0; i < threadArray.length; ++i ) {\n      threadArray[i].join();\n    }\n    assertEquals(\"some threads failed!\", N_THREADS,success.cardinality());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4e93c636aab7319e002a63a0a7fca7d509b05078":["f5ce8825677e635ae7c7529ca806883b0d0a4396"],"e7f18e513f9984ff8d5c94dbdf877c5e21922c92":["4e93c636aab7319e002a63a0a7fca7d509b05078"],"ea73f58403a6c26bcb09b4933832348d80deb45b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb"],"f5ce8825677e635ae7c7529ca806883b0d0a4396":["ea73f58403a6c26bcb09b4933832348d80deb45b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"ba7fd1181f778e9954547e8e6a47587ebf08e3fb":["e7f18e513f9984ff8d5c94dbdf877c5e21922c92"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a046c0c310bc77931fc8441bd920053b607dd14"]},"commit2Childs":{"4e93c636aab7319e002a63a0a7fca7d509b05078":["e7f18e513f9984ff8d5c94dbdf877c5e21922c92"],"e7f18e513f9984ff8d5c94dbdf877c5e21922c92":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb"],"ea73f58403a6c26bcb09b4933832348d80deb45b":["f5ce8825677e635ae7c7529ca806883b0d0a4396"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"f5ce8825677e635ae7c7529ca806883b0d0a4396":["4e93c636aab7319e002a63a0a7fca7d509b05078"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ea73f58403a6c26bcb09b4933832348d80deb45b"],"0a046c0c310bc77931fc8441bd920053b607dd14":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ba7fd1181f778e9954547e8e6a47587ebf08e3fb":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}