{"path":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2.IndexingThread#indexDoc().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2.IndexingThread#indexDoc().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2.IndexingThread#indexDoc().mjava","sourceNew":"    public void indexDoc() throws IOException {\n      Document d = new Document();\n\n      FieldType customType1 = new FieldType(TextField.TYPE_STORED);\n      customType1.setTokenized(false);\n      customType1.setOmitNorms(true);\n      \n      ArrayList<Field> fields = new ArrayList<Field>();      \n      String idString = getIdString();\n      Field idField =  newField(\"id\", idString, customType1);\n      fields.add(idField);\n\n      int nFields = nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n\n        FieldType customType = new FieldType();\n        switch (nextInt(4)) {\n        case 0:\n          break;\n        case 1:\n          customType.setStoreTermVectors(true);\n          break;\n        case 2:\n          customType.setStoreTermVectors(true);\n          customType.setStoreTermVectorPositions(true);\n          break;\n        case 3:\n          customType.setStoreTermVectors(true);\n          customType.setStoreTermVectorOffsets(true);\n          break;\n        }\n        \n        switch (nextInt(4)) {\n          case 0:\n            customType.setStored(true);\n            customType.setOmitNorms(true);\n            customType.setIndexed(true);\n            fields.add(newField(\"f\" + nextInt(100), getString(1), customType));\n            break;\n          case 1:\n            customType.setIndexed(true);\n            customType.setTokenized(true);\n            fields.add(newField(\"f\" + nextInt(100), getString(0), customType));\n            break;\n          case 2:\n            customType.setStored(true);\n            customType.setStoreTermVectors(false);\n            customType.setStoreTermVectorOffsets(false);\n            customType.setStoreTermVectorPositions(false);\n            fields.add(newField(\"f\" + nextInt(100), getString(0), customType));\n            break;\n          case 3:\n            customType.setStored(true);\n            customType.setIndexed(true);\n            customType.setTokenized(true);\n            fields.add(newField(\"f\" + nextInt(100), getString(bigFieldSize), customType));\n            break;          \n        }\n      }\n\n      if (sameFieldOrder) {\n        Collections.sort(fields, fieldNameComparator);\n      } else {\n        // random placement of id field also\n        Collections.swap(fields,nextInt(fields.size()), 0);\n      }\n\n      for (int i=0; i<fields.size(); i++) {\n        d.add(fields.get(i));\n      }\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": indexing id:\" + idString);\n      }\n      w.updateDocument(new Term(\"id\", idString), d);\n      //System.out.println(Thread.currentThread().getName() + \": indexing \"+d);\n      docs.put(idString, d);\n    }\n\n","sourceOld":"    public void indexDoc() throws IOException {\n      Document d = new Document();\n\n      FieldType customType1 = new FieldType(TextField.TYPE_STORED);\n      customType1.setTokenized(false);\n      customType1.setOmitNorms(true);\n      \n      ArrayList<Field> fields = new ArrayList<Field>();      \n      String idString = getIdString();\n      Field idField =  newField(\"id\", idString, customType1);\n      fields.add(idField);\n\n      int nFields = nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n\n        FieldType customType = new FieldType();\n        switch (nextInt(4)) {\n        case 0:\n          break;\n        case 1:\n          customType.setStoreTermVectors(true);\n          break;\n        case 2:\n          customType.setStoreTermVectors(true);\n          customType.setStoreTermVectorPositions(true);\n          break;\n        case 3:\n          customType.setStoreTermVectors(true);\n          customType.setStoreTermVectorOffsets(true);\n          break;\n        }\n        \n        switch (nextInt(4)) {\n          case 0:\n            customType.setStored(true);\n            customType.setOmitNorms(true);\n            customType.setIndexed(true);\n            fields.add(newField(\"f\" + nextInt(100), getString(1), customType));\n            break;\n          case 1:\n            customType.setIndexed(true);\n            customType.setTokenized(true);\n            fields.add(newField(\"f\" + nextInt(100), getString(0), customType));\n            break;\n          case 2:\n            customType.setStored(true);\n            customType.setStoreTermVectors(false);\n            customType.setStoreTermVectorOffsets(false);\n            customType.setStoreTermVectorPositions(false);\n            fields.add(newField(\"f\" + nextInt(100), getString(0), customType));\n            break;\n          case 3:\n            customType.setStored(true);\n            customType.setIndexed(true);\n            customType.setTokenized(true);\n            fields.add(newField(\"f\" + nextInt(100), getString(bigFieldSize), customType));\n            break;          \n        }\n      }\n\n      if (sameFieldOrder) {\n        Collections.sort(fields, fieldNameComparator);\n      } else {\n        // random placement of id field also\n        Collections.swap(fields,nextInt(fields.size()), 0);\n      }\n\n      for (int i=0; i<fields.size(); i++) {\n        d.add(fields.get(i));\n      }\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": indexing id:\" + idString);\n      }\n      w.updateDocument(new Term(\"id\", idString), d);\n      //System.out.println(Thread.currentThread().getName() + \": indexing \"+d);\n      docs.put(idString, d);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2.IndexingThread#indexDoc().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2.IndexingThread#indexDoc().mjava","sourceNew":"    public void indexDoc() throws IOException {\n      Document d = new Document();\n\n      FieldType customType1 = new FieldType(TextField.TYPE_STORED);\n      customType1.setTokenized(false);\n      customType1.setOmitNorms(true);\n      \n      ArrayList<Field> fields = new ArrayList<>();\n      String idString = getIdString();\n      Field idField =  newField(\"id\", idString, customType1);\n      fields.add(idField);\n\n      int nFields = nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n\n        FieldType customType = new FieldType();\n        switch (nextInt(4)) {\n        case 0:\n          break;\n        case 1:\n          customType.setStoreTermVectors(true);\n          break;\n        case 2:\n          customType.setStoreTermVectors(true);\n          customType.setStoreTermVectorPositions(true);\n          break;\n        case 3:\n          customType.setStoreTermVectors(true);\n          customType.setStoreTermVectorOffsets(true);\n          break;\n        }\n        \n        switch (nextInt(4)) {\n          case 0:\n            customType.setStored(true);\n            customType.setOmitNorms(true);\n            customType.setIndexed(true);\n            fields.add(newField(\"f\" + nextInt(100), getString(1), customType));\n            break;\n          case 1:\n            customType.setIndexed(true);\n            customType.setTokenized(true);\n            fields.add(newField(\"f\" + nextInt(100), getString(0), customType));\n            break;\n          case 2:\n            customType.setStored(true);\n            customType.setStoreTermVectors(false);\n            customType.setStoreTermVectorOffsets(false);\n            customType.setStoreTermVectorPositions(false);\n            fields.add(newField(\"f\" + nextInt(100), getString(0), customType));\n            break;\n          case 3:\n            customType.setStored(true);\n            customType.setIndexed(true);\n            customType.setTokenized(true);\n            fields.add(newField(\"f\" + nextInt(100), getString(bigFieldSize), customType));\n            break;          \n        }\n      }\n\n      if (sameFieldOrder) {\n        Collections.sort(fields, fieldNameComparator);\n      } else {\n        // random placement of id field also\n        Collections.swap(fields,nextInt(fields.size()), 0);\n      }\n\n      for (int i=0; i<fields.size(); i++) {\n        d.add(fields.get(i));\n      }\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": indexing id:\" + idString);\n      }\n      w.updateDocument(new Term(\"id\", idString), d);\n      //System.out.println(Thread.currentThread().getName() + \": indexing \"+d);\n      docs.put(idString, d);\n    }\n\n","sourceOld":"    public void indexDoc() throws IOException {\n      Document d = new Document();\n\n      FieldType customType1 = new FieldType(TextField.TYPE_STORED);\n      customType1.setTokenized(false);\n      customType1.setOmitNorms(true);\n      \n      ArrayList<Field> fields = new ArrayList<Field>();      \n      String idString = getIdString();\n      Field idField =  newField(\"id\", idString, customType1);\n      fields.add(idField);\n\n      int nFields = nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n\n        FieldType customType = new FieldType();\n        switch (nextInt(4)) {\n        case 0:\n          break;\n        case 1:\n          customType.setStoreTermVectors(true);\n          break;\n        case 2:\n          customType.setStoreTermVectors(true);\n          customType.setStoreTermVectorPositions(true);\n          break;\n        case 3:\n          customType.setStoreTermVectors(true);\n          customType.setStoreTermVectorOffsets(true);\n          break;\n        }\n        \n        switch (nextInt(4)) {\n          case 0:\n            customType.setStored(true);\n            customType.setOmitNorms(true);\n            customType.setIndexed(true);\n            fields.add(newField(\"f\" + nextInt(100), getString(1), customType));\n            break;\n          case 1:\n            customType.setIndexed(true);\n            customType.setTokenized(true);\n            fields.add(newField(\"f\" + nextInt(100), getString(0), customType));\n            break;\n          case 2:\n            customType.setStored(true);\n            customType.setStoreTermVectors(false);\n            customType.setStoreTermVectorOffsets(false);\n            customType.setStoreTermVectorPositions(false);\n            fields.add(newField(\"f\" + nextInt(100), getString(0), customType));\n            break;\n          case 3:\n            customType.setStored(true);\n            customType.setIndexed(true);\n            customType.setTokenized(true);\n            fields.add(newField(\"f\" + nextInt(100), getString(bigFieldSize), customType));\n            break;          \n        }\n      }\n\n      if (sameFieldOrder) {\n        Collections.sort(fields, fieldNameComparator);\n      } else {\n        // random placement of id field also\n        Collections.swap(fields,nextInt(fields.size()), 0);\n      }\n\n      for (int i=0; i<fields.size(); i++) {\n        d.add(fields.get(i));\n      }\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": indexing id:\" + idString);\n      }\n      w.updateDocument(new Term(\"id\", idString), d);\n      //System.out.println(Thread.currentThread().getName() + \": indexing \"+d);\n      docs.put(idString, d);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52c7e49be259508735752fba88085255014a6ecf","date":1398706273,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2.IndexingThread#indexDoc().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2.IndexingThread#indexDoc().mjava","sourceNew":"    public void indexDoc() throws IOException {\n      Document d = new Document();\n\n      FieldType customType1 = new FieldType(TextField.TYPE_STORED);\n      customType1.setTokenized(false);\n      customType1.setOmitNorms(true);\n      \n      ArrayList<Field> fields = new ArrayList<>();\n      String idString = getIdString();\n      Field idField =  newField(\"id\", idString, customType1);\n      fields.add(idField);\n\n      Map<String,FieldType> tvTypes = new HashMap<>();\n\n      int nFields = nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n\n        String fieldName = \"f\" + nextInt(100);\n        FieldType customType;\n\n        // Use the same term vector settings if we already\n        // added this field to the doc:\n        FieldType oldTVType = tvTypes.get(fieldName);\n        if (oldTVType != null) {\n          customType = new FieldType(oldTVType);\n        } else {\n          customType = new FieldType();\n          switch (nextInt(4)) {\n          case 0:\n            break;\n          case 1:\n            customType.setStoreTermVectors(true);\n            break;\n          case 2:\n            customType.setStoreTermVectors(true);\n            customType.setStoreTermVectorPositions(true);\n            break;\n          case 3:\n            customType.setStoreTermVectors(true);\n            customType.setStoreTermVectorOffsets(true);\n            break;\n          }\n          FieldType newType = new FieldType(customType);\n          newType.freeze();\n          tvTypes.put(fieldName, newType);\n        }\n        \n        switch (nextInt(4)) {\n          case 0:\n            customType.setStored(true);\n            customType.setOmitNorms(true);\n            customType.setIndexed(true);\n            customType.freeze();\n            fields.add(newField(fieldName, getString(1), customType));\n            break;\n          case 1:\n            customType.setIndexed(true);\n            customType.setTokenized(true);\n            customType.freeze();\n            fields.add(newField(fieldName, getString(0), customType));\n            break;\n          case 2:\n            customType.setStored(true);\n            customType.setStoreTermVectors(false);\n            customType.setStoreTermVectorOffsets(false);\n            customType.setStoreTermVectorPositions(false);\n            customType.freeze();\n            fields.add(newField(fieldName, getString(0), customType));\n            break;\n          case 3:\n            customType.setStored(true);\n            customType.setIndexed(true);\n            customType.setTokenized(true);\n            customType.freeze();\n            fields.add(newField(fieldName, getString(bigFieldSize), customType));\n            break;\n        }\n      }\n\n      if (sameFieldOrder) {\n        Collections.sort(fields, fieldNameComparator);\n      } else {\n        // random placement of id field also\n        Collections.swap(fields,nextInt(fields.size()), 0);\n      }\n\n      for (int i=0; i<fields.size(); i++) {\n        d.add(fields.get(i));\n      }\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": indexing id:\" + idString);\n      }\n      w.updateDocument(new Term(\"id\", idString), d);\n      //System.out.println(Thread.currentThread().getName() + \": indexing \"+d);\n      docs.put(idString, d);\n    }\n\n","sourceOld":"    public void indexDoc() throws IOException {\n      Document d = new Document();\n\n      FieldType customType1 = new FieldType(TextField.TYPE_STORED);\n      customType1.setTokenized(false);\n      customType1.setOmitNorms(true);\n      \n      ArrayList<Field> fields = new ArrayList<>();\n      String idString = getIdString();\n      Field idField =  newField(\"id\", idString, customType1);\n      fields.add(idField);\n\n      int nFields = nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n\n        FieldType customType = new FieldType();\n        switch (nextInt(4)) {\n        case 0:\n          break;\n        case 1:\n          customType.setStoreTermVectors(true);\n          break;\n        case 2:\n          customType.setStoreTermVectors(true);\n          customType.setStoreTermVectorPositions(true);\n          break;\n        case 3:\n          customType.setStoreTermVectors(true);\n          customType.setStoreTermVectorOffsets(true);\n          break;\n        }\n        \n        switch (nextInt(4)) {\n          case 0:\n            customType.setStored(true);\n            customType.setOmitNorms(true);\n            customType.setIndexed(true);\n            fields.add(newField(\"f\" + nextInt(100), getString(1), customType));\n            break;\n          case 1:\n            customType.setIndexed(true);\n            customType.setTokenized(true);\n            fields.add(newField(\"f\" + nextInt(100), getString(0), customType));\n            break;\n          case 2:\n            customType.setStored(true);\n            customType.setStoreTermVectors(false);\n            customType.setStoreTermVectorOffsets(false);\n            customType.setStoreTermVectorPositions(false);\n            fields.add(newField(\"f\" + nextInt(100), getString(0), customType));\n            break;\n          case 3:\n            customType.setStored(true);\n            customType.setIndexed(true);\n            customType.setTokenized(true);\n            fields.add(newField(\"f\" + nextInt(100), getString(bigFieldSize), customType));\n            break;          \n        }\n      }\n\n      if (sameFieldOrder) {\n        Collections.sort(fields, fieldNameComparator);\n      } else {\n        // random placement of id field also\n        Collections.swap(fields,nextInt(fields.size()), 0);\n      }\n\n      for (int i=0; i<fields.size(); i++) {\n        d.add(fields.get(i));\n      }\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": indexing id:\" + idString);\n      }\n      w.updateDocument(new Term(\"id\", idString), d);\n      //System.out.println(Thread.currentThread().getName() + \": indexing \"+d);\n      docs.put(idString, d);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3394716f52b34ab259ad5247e7595d9f9db6e935","date":1398791921,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2.IndexingThread#indexDoc().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2.IndexingThread#indexDoc().mjava","sourceNew":"    public void indexDoc() throws IOException {\n      Document d = new Document();\n\n      FieldType customType1 = new FieldType(TextField.TYPE_STORED);\n      customType1.setTokenized(false);\n      customType1.setOmitNorms(true);\n      \n      ArrayList<Field> fields = new ArrayList<>();\n      String idString = getIdString();\n      Field idField =  newField(\"id\", idString, customType1);\n      fields.add(idField);\n\n      Map<String,FieldType> tvTypes = new HashMap<>();\n\n      int nFields = nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n\n        String fieldName = \"f\" + nextInt(100);\n        FieldType customType;\n\n        // Use the same term vector settings if we already\n        // added this field to the doc:\n        FieldType oldTVType = tvTypes.get(fieldName);\n        if (oldTVType != null) {\n          customType = new FieldType(oldTVType);\n        } else {\n          customType = new FieldType();\n          switch (nextInt(4)) {\n          case 0:\n            break;\n          case 1:\n            customType.setStoreTermVectors(true);\n            break;\n          case 2:\n            customType.setStoreTermVectors(true);\n            customType.setStoreTermVectorPositions(true);\n            break;\n          case 3:\n            customType.setStoreTermVectors(true);\n            customType.setStoreTermVectorOffsets(true);\n            break;\n          }\n          FieldType newType = new FieldType(customType);\n          newType.freeze();\n          tvTypes.put(fieldName, newType);\n        }\n        \n        switch (nextInt(4)) {\n          case 0:\n            customType.setStored(true);\n            customType.setOmitNorms(true);\n            customType.setIndexed(true);\n            customType.freeze();\n            fields.add(newField(fieldName, getString(1), customType));\n            break;\n          case 1:\n            customType.setIndexed(true);\n            customType.setTokenized(true);\n            customType.freeze();\n            fields.add(newField(fieldName, getString(0), customType));\n            break;\n          case 2:\n            customType.setStored(true);\n            customType.setStoreTermVectors(false);\n            customType.setStoreTermVectorOffsets(false);\n            customType.setStoreTermVectorPositions(false);\n            customType.freeze();\n            fields.add(newField(fieldName, getString(0), customType));\n            break;\n          case 3:\n            customType.setStored(true);\n            customType.setIndexed(true);\n            customType.setTokenized(true);\n            customType.freeze();\n            fields.add(newField(fieldName, getString(bigFieldSize), customType));\n            break;\n        }\n      }\n\n      if (sameFieldOrder) {\n        Collections.sort(fields, fieldNameComparator);\n      } else {\n        // random placement of id field also\n        Collections.swap(fields,nextInt(fields.size()), 0);\n      }\n\n      for (int i=0; i<fields.size(); i++) {\n        d.add(fields.get(i));\n      }\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": indexing id:\" + idString);\n      }\n      w.updateDocument(new Term(\"id\", idString), d);\n      //System.out.println(Thread.currentThread().getName() + \": indexing \"+d);\n      docs.put(idString, d);\n    }\n\n","sourceOld":"    public void indexDoc() throws IOException {\n      Document d = new Document();\n\n      FieldType customType1 = new FieldType(TextField.TYPE_STORED);\n      customType1.setTokenized(false);\n      customType1.setOmitNorms(true);\n      \n      ArrayList<Field> fields = new ArrayList<>();\n      String idString = getIdString();\n      Field idField =  newField(\"id\", idString, customType1);\n      fields.add(idField);\n\n      int nFields = nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n\n        FieldType customType = new FieldType();\n        switch (nextInt(4)) {\n        case 0:\n          break;\n        case 1:\n          customType.setStoreTermVectors(true);\n          break;\n        case 2:\n          customType.setStoreTermVectors(true);\n          customType.setStoreTermVectorPositions(true);\n          break;\n        case 3:\n          customType.setStoreTermVectors(true);\n          customType.setStoreTermVectorOffsets(true);\n          break;\n        }\n        \n        switch (nextInt(4)) {\n          case 0:\n            customType.setStored(true);\n            customType.setOmitNorms(true);\n            customType.setIndexed(true);\n            fields.add(newField(\"f\" + nextInt(100), getString(1), customType));\n            break;\n          case 1:\n            customType.setIndexed(true);\n            customType.setTokenized(true);\n            fields.add(newField(\"f\" + nextInt(100), getString(0), customType));\n            break;\n          case 2:\n            customType.setStored(true);\n            customType.setStoreTermVectors(false);\n            customType.setStoreTermVectorOffsets(false);\n            customType.setStoreTermVectorPositions(false);\n            fields.add(newField(\"f\" + nextInt(100), getString(0), customType));\n            break;\n          case 3:\n            customType.setStored(true);\n            customType.setIndexed(true);\n            customType.setTokenized(true);\n            fields.add(newField(\"f\" + nextInt(100), getString(bigFieldSize), customType));\n            break;          \n        }\n      }\n\n      if (sameFieldOrder) {\n        Collections.sort(fields, fieldNameComparator);\n      } else {\n        // random placement of id field also\n        Collections.swap(fields,nextInt(fields.size()), 0);\n      }\n\n      for (int i=0; i<fields.size(); i++) {\n        d.add(fields.get(i));\n      }\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": indexing id:\" + idString);\n      }\n      w.updateDocument(new Term(\"id\", idString), d);\n      //System.out.println(Thread.currentThread().getName() + \": indexing \"+d);\n      docs.put(idString, d);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2.IndexingThread#indexDoc().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2.IndexingThread#indexDoc().mjava","sourceNew":"    public void indexDoc() throws IOException {\n      Document d = new Document();\n\n      FieldType customType1 = new FieldType(TextField.TYPE_STORED);\n      customType1.setTokenized(false);\n      customType1.setOmitNorms(true);\n      \n      ArrayList<Field> fields = new ArrayList<>();\n      String idString = getIdString();\n      Field idField =  newField(\"id\", idString, customType1);\n      fields.add(idField);\n\n      Map<String,FieldType> tvTypes = new HashMap<>();\n\n      int nFields = nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n\n        String fieldName = \"f\" + nextInt(100);\n        FieldType customType;\n\n        // Use the same term vector settings if we already\n        // added this field to the doc:\n        FieldType oldTVType = tvTypes.get(fieldName);\n        if (oldTVType != null) {\n          customType = new FieldType(oldTVType);\n        } else {\n          customType = new FieldType();\n          switch (nextInt(4)) {\n          case 0:\n            break;\n          case 1:\n            customType.setStoreTermVectors(true);\n            break;\n          case 2:\n            customType.setStoreTermVectors(true);\n            customType.setStoreTermVectorPositions(true);\n            break;\n          case 3:\n            customType.setStoreTermVectors(true);\n            customType.setStoreTermVectorOffsets(true);\n            break;\n          }\n          FieldType newType = new FieldType(customType);\n          newType.freeze();\n          tvTypes.put(fieldName, newType);\n        }\n        \n        switch (nextInt(4)) {\n          case 0:\n            customType.setStored(true);\n            customType.setOmitNorms(true);\n            customType.setIndexed(true);\n            customType.freeze();\n            fields.add(newField(fieldName, getString(1), customType));\n            break;\n          case 1:\n            customType.setIndexed(true);\n            customType.setTokenized(true);\n            customType.freeze();\n            fields.add(newField(fieldName, getString(0), customType));\n            break;\n          case 2:\n            customType.setStored(true);\n            customType.setStoreTermVectors(false);\n            customType.setStoreTermVectorOffsets(false);\n            customType.setStoreTermVectorPositions(false);\n            customType.freeze();\n            fields.add(newField(fieldName, getString(0), customType));\n            break;\n          case 3:\n            customType.setStored(true);\n            customType.setIndexed(true);\n            customType.setTokenized(true);\n            customType.freeze();\n            fields.add(newField(fieldName, getString(bigFieldSize), customType));\n            break;\n        }\n      }\n\n      if (sameFieldOrder) {\n        Collections.sort(fields, fieldNameComparator);\n      } else {\n        // random placement of id field also\n        Collections.swap(fields,nextInt(fields.size()), 0);\n      }\n\n      for (int i=0; i<fields.size(); i++) {\n        d.add(fields.get(i));\n      }\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": indexing id:\" + idString);\n      }\n      w.updateDocument(new Term(\"id\", idString), d);\n      //System.out.println(Thread.currentThread().getName() + \": indexing \"+d);\n      docs.put(idString, d);\n    }\n\n","sourceOld":"    public void indexDoc() throws IOException {\n      Document d = new Document();\n\n      FieldType customType1 = new FieldType(TextField.TYPE_STORED);\n      customType1.setTokenized(false);\n      customType1.setOmitNorms(true);\n      \n      ArrayList<Field> fields = new ArrayList<>();\n      String idString = getIdString();\n      Field idField =  newField(\"id\", idString, customType1);\n      fields.add(idField);\n\n      int nFields = nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n\n        FieldType customType = new FieldType();\n        switch (nextInt(4)) {\n        case 0:\n          break;\n        case 1:\n          customType.setStoreTermVectors(true);\n          break;\n        case 2:\n          customType.setStoreTermVectors(true);\n          customType.setStoreTermVectorPositions(true);\n          break;\n        case 3:\n          customType.setStoreTermVectors(true);\n          customType.setStoreTermVectorOffsets(true);\n          break;\n        }\n        \n        switch (nextInt(4)) {\n          case 0:\n            customType.setStored(true);\n            customType.setOmitNorms(true);\n            customType.setIndexed(true);\n            fields.add(newField(\"f\" + nextInt(100), getString(1), customType));\n            break;\n          case 1:\n            customType.setIndexed(true);\n            customType.setTokenized(true);\n            fields.add(newField(\"f\" + nextInt(100), getString(0), customType));\n            break;\n          case 2:\n            customType.setStored(true);\n            customType.setStoreTermVectors(false);\n            customType.setStoreTermVectorOffsets(false);\n            customType.setStoreTermVectorPositions(false);\n            fields.add(newField(\"f\" + nextInt(100), getString(0), customType));\n            break;\n          case 3:\n            customType.setStored(true);\n            customType.setIndexed(true);\n            customType.setTokenized(true);\n            fields.add(newField(\"f\" + nextInt(100), getString(bigFieldSize), customType));\n            break;          \n        }\n      }\n\n      if (sameFieldOrder) {\n        Collections.sort(fields, fieldNameComparator);\n      } else {\n        // random placement of id field also\n        Collections.swap(fields,nextInt(fields.size()), 0);\n      }\n\n      for (int i=0; i<fields.size(); i++) {\n        d.add(fields.get(i));\n      }\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": indexing id:\" + idString);\n      }\n      w.updateDocument(new Term(\"id\", idString), d);\n      //System.out.println(Thread.currentThread().getName() + \": indexing \"+d);\n      docs.put(idString, d);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3184874f7f3aca850248483485b4995343066875","date":1413876758,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2.IndexingThread#indexDoc().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2.IndexingThread#indexDoc().mjava","sourceNew":"    public void indexDoc() throws IOException {\n      Document d = new Document();\n\n      FieldType customType1 = new FieldType(TextField.TYPE_STORED);\n      customType1.setTokenized(false);\n      customType1.setOmitNorms(true);\n      \n      ArrayList<Field> fields = new ArrayList<>();\n      String idString = getIdString();\n      Field idField =  newField(\"id\", idString, customType1);\n      fields.add(idField);\n\n      Map<String,FieldType> tvTypes = new HashMap<>();\n\n      int nFields = nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n\n        String fieldName = \"f\" + nextInt(100);\n        FieldType customType;\n\n        // Use the same term vector settings if we already\n        // added this field to the doc:\n        FieldType oldTVType = tvTypes.get(fieldName);\n        if (oldTVType != null) {\n          customType = new FieldType(oldTVType);\n        } else {\n          customType = new FieldType();\n          switch (nextInt(4)) {\n          case 0:\n            break;\n          case 1:\n            customType.setStoreTermVectors(true);\n            break;\n          case 2:\n            customType.setStoreTermVectors(true);\n            customType.setStoreTermVectorPositions(true);\n            break;\n          case 3:\n            customType.setStoreTermVectors(true);\n            customType.setStoreTermVectorOffsets(true);\n            break;\n          }\n          FieldType newType = new FieldType(customType);\n          newType.freeze();\n          tvTypes.put(fieldName, newType);\n        }\n        \n        switch (nextInt(4)) {\n          case 0:\n            customType.setStored(true);\n            customType.setOmitNorms(true);\n            customType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n            customType.freeze();\n            fields.add(newField(fieldName, getString(1), customType));\n            break;\n          case 1:\n            customType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n            customType.setTokenized(true);\n            customType.freeze();\n            fields.add(newField(fieldName, getString(0), customType));\n            break;\n          case 2:\n            customType.setStored(true);\n            customType.setStoreTermVectors(false);\n            customType.setStoreTermVectorOffsets(false);\n            customType.setStoreTermVectorPositions(false);\n            customType.freeze();\n            fields.add(newField(fieldName, getString(0), customType));\n            break;\n          case 3:\n            customType.setStored(true);\n            customType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n            customType.setTokenized(true);\n            customType.freeze();\n            fields.add(newField(fieldName, getString(bigFieldSize), customType));\n            break;\n        }\n      }\n\n      if (sameFieldOrder) {\n        Collections.sort(fields, fieldNameComparator);\n      } else {\n        // random placement of id field also\n        Collections.swap(fields,nextInt(fields.size()), 0);\n      }\n\n      for (int i=0; i<fields.size(); i++) {\n        d.add(fields.get(i));\n      }\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": indexing id:\" + idString);\n      }\n      w.updateDocument(new Term(\"id\", idString), d);\n      //System.out.println(Thread.currentThread().getName() + \": indexing \"+d);\n      docs.put(idString, d);\n    }\n\n","sourceOld":"    public void indexDoc() throws IOException {\n      Document d = new Document();\n\n      FieldType customType1 = new FieldType(TextField.TYPE_STORED);\n      customType1.setTokenized(false);\n      customType1.setOmitNorms(true);\n      \n      ArrayList<Field> fields = new ArrayList<>();\n      String idString = getIdString();\n      Field idField =  newField(\"id\", idString, customType1);\n      fields.add(idField);\n\n      Map<String,FieldType> tvTypes = new HashMap<>();\n\n      int nFields = nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n\n        String fieldName = \"f\" + nextInt(100);\n        FieldType customType;\n\n        // Use the same term vector settings if we already\n        // added this field to the doc:\n        FieldType oldTVType = tvTypes.get(fieldName);\n        if (oldTVType != null) {\n          customType = new FieldType(oldTVType);\n        } else {\n          customType = new FieldType();\n          switch (nextInt(4)) {\n          case 0:\n            break;\n          case 1:\n            customType.setStoreTermVectors(true);\n            break;\n          case 2:\n            customType.setStoreTermVectors(true);\n            customType.setStoreTermVectorPositions(true);\n            break;\n          case 3:\n            customType.setStoreTermVectors(true);\n            customType.setStoreTermVectorOffsets(true);\n            break;\n          }\n          FieldType newType = new FieldType(customType);\n          newType.freeze();\n          tvTypes.put(fieldName, newType);\n        }\n        \n        switch (nextInt(4)) {\n          case 0:\n            customType.setStored(true);\n            customType.setOmitNorms(true);\n            customType.setIndexed(true);\n            customType.freeze();\n            fields.add(newField(fieldName, getString(1), customType));\n            break;\n          case 1:\n            customType.setIndexed(true);\n            customType.setTokenized(true);\n            customType.freeze();\n            fields.add(newField(fieldName, getString(0), customType));\n            break;\n          case 2:\n            customType.setStored(true);\n            customType.setStoreTermVectors(false);\n            customType.setStoreTermVectorOffsets(false);\n            customType.setStoreTermVectorPositions(false);\n            customType.freeze();\n            fields.add(newField(fieldName, getString(0), customType));\n            break;\n          case 3:\n            customType.setStored(true);\n            customType.setIndexed(true);\n            customType.setTokenized(true);\n            customType.freeze();\n            fields.add(newField(fieldName, getString(bigFieldSize), customType));\n            break;\n        }\n      }\n\n      if (sameFieldOrder) {\n        Collections.sort(fields, fieldNameComparator);\n      } else {\n        // random placement of id field also\n        Collections.swap(fields,nextInt(fields.size()), 0);\n      }\n\n      for (int i=0; i<fields.size(); i++) {\n        d.add(fields.get(i));\n      }\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": indexing id:\" + idString);\n      }\n      w.updateDocument(new Term(\"id\", idString), d);\n      //System.out.println(Thread.currentThread().getName() + \": indexing \"+d);\n      docs.put(idString, d);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2.IndexingThread#indexDoc().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2.IndexingThread#indexDoc().mjava","sourceNew":"    public void indexDoc() throws IOException {\n      Document d = new Document();\n\n      FieldType customType1 = new FieldType(TextField.TYPE_STORED);\n      customType1.setTokenized(false);\n      customType1.setOmitNorms(true);\n      \n      ArrayList<Field> fields = new ArrayList<>();\n      String idString = getIdString();\n      Field idField =  newField(\"id\", idString, customType1);\n      fields.add(idField);\n\n      Map<String,FieldType> tvTypes = new HashMap<>();\n\n      int nFields = nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n\n        String fieldName = \"f\" + nextInt(100);\n        FieldType customType;\n\n        // Use the same term vector settings if we already\n        // added this field to the doc:\n        FieldType oldTVType = tvTypes.get(fieldName);\n        if (oldTVType != null) {\n          customType = new FieldType(oldTVType);\n        } else {\n          customType = new FieldType();\n          switch (nextInt(4)) {\n          case 0:\n            break;\n          case 1:\n            customType.setStoreTermVectors(true);\n            break;\n          case 2:\n            customType.setStoreTermVectors(true);\n            customType.setStoreTermVectorPositions(true);\n            break;\n          case 3:\n            customType.setStoreTermVectors(true);\n            customType.setStoreTermVectorOffsets(true);\n            break;\n          }\n          FieldType newType = new FieldType(customType);\n          newType.freeze();\n          tvTypes.put(fieldName, newType);\n        }\n        \n        switch (nextInt(4)) {\n          case 0:\n            customType.setStored(true);\n            customType.setOmitNorms(true);\n            customType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n            customType.freeze();\n            fields.add(newField(fieldName, getString(1), customType));\n            break;\n          case 1:\n            customType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n            customType.setTokenized(true);\n            customType.freeze();\n            fields.add(newField(fieldName, getString(0), customType));\n            break;\n          case 2:\n            customType.setStored(true);\n            customType.setStoreTermVectors(false);\n            customType.setStoreTermVectorOffsets(false);\n            customType.setStoreTermVectorPositions(false);\n            customType.freeze();\n            fields.add(newField(fieldName, getString(0), customType));\n            break;\n          case 3:\n            customType.setStored(true);\n            customType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n            customType.setTokenized(true);\n            customType.freeze();\n            fields.add(newField(fieldName, getString(bigFieldSize), customType));\n            break;\n        }\n      }\n\n      if (sameFieldOrder) {\n        Collections.sort(fields, fieldNameComparator);\n      } else {\n        // random placement of id field also\n        Collections.swap(fields,nextInt(fields.size()), 0);\n      }\n\n      for (int i=0; i<fields.size(); i++) {\n        d.add(fields.get(i));\n      }\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": indexing id:\" + idString);\n      }\n      w.updateDocument(new Term(\"id\", idString), d);\n      //System.out.println(Thread.currentThread().getName() + \": indexing \"+d);\n      docs.put(idString, d);\n    }\n\n","sourceOld":"    public void indexDoc() throws IOException {\n      Document d = new Document();\n\n      FieldType customType1 = new FieldType(TextField.TYPE_STORED);\n      customType1.setTokenized(false);\n      customType1.setOmitNorms(true);\n      \n      ArrayList<Field> fields = new ArrayList<>();\n      String idString = getIdString();\n      Field idField =  newField(\"id\", idString, customType1);\n      fields.add(idField);\n\n      Map<String,FieldType> tvTypes = new HashMap<>();\n\n      int nFields = nextInt(maxFields);\n      for (int i=0; i<nFields; i++) {\n\n        String fieldName = \"f\" + nextInt(100);\n        FieldType customType;\n\n        // Use the same term vector settings if we already\n        // added this field to the doc:\n        FieldType oldTVType = tvTypes.get(fieldName);\n        if (oldTVType != null) {\n          customType = new FieldType(oldTVType);\n        } else {\n          customType = new FieldType();\n          switch (nextInt(4)) {\n          case 0:\n            break;\n          case 1:\n            customType.setStoreTermVectors(true);\n            break;\n          case 2:\n            customType.setStoreTermVectors(true);\n            customType.setStoreTermVectorPositions(true);\n            break;\n          case 3:\n            customType.setStoreTermVectors(true);\n            customType.setStoreTermVectorOffsets(true);\n            break;\n          }\n          FieldType newType = new FieldType(customType);\n          newType.freeze();\n          tvTypes.put(fieldName, newType);\n        }\n        \n        switch (nextInt(4)) {\n          case 0:\n            customType.setStored(true);\n            customType.setOmitNorms(true);\n            customType.setIndexed(true);\n            customType.freeze();\n            fields.add(newField(fieldName, getString(1), customType));\n            break;\n          case 1:\n            customType.setIndexed(true);\n            customType.setTokenized(true);\n            customType.freeze();\n            fields.add(newField(fieldName, getString(0), customType));\n            break;\n          case 2:\n            customType.setStored(true);\n            customType.setStoreTermVectors(false);\n            customType.setStoreTermVectorOffsets(false);\n            customType.setStoreTermVectorPositions(false);\n            customType.freeze();\n            fields.add(newField(fieldName, getString(0), customType));\n            break;\n          case 3:\n            customType.setStored(true);\n            customType.setIndexed(true);\n            customType.setTokenized(true);\n            customType.freeze();\n            fields.add(newField(fieldName, getString(bigFieldSize), customType));\n            break;\n        }\n      }\n\n      if (sameFieldOrder) {\n        Collections.sort(fields, fieldNameComparator);\n      } else {\n        // random placement of id field also\n        Collections.swap(fields,nextInt(fields.size()), 0);\n      }\n\n      for (int i=0; i<fields.size(); i++) {\n        d.add(fields.get(i));\n      }\n      if (VERBOSE) {\n        System.out.println(Thread.currentThread().getName() + \": indexing id:\" + idString);\n      }\n      w.updateDocument(new Term(\"id\", idString), d);\n      //System.out.println(Thread.currentThread().getName() + \": indexing \"+d);\n      docs.put(idString, d);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","52c7e49be259508735752fba88085255014a6ecf"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["3394716f52b34ab259ad5247e7595d9f9db6e935","3184874f7f3aca850248483485b4995343066875"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","3394716f52b34ab259ad5247e7595d9f9db6e935"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"52c7e49be259508735752fba88085255014a6ecf":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3184874f7f3aca850248483485b4995343066875":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3184874f7f3aca850248483485b4995343066875"]},"commit2Childs":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","3184874f7f3aca850248483485b4995343066875"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3394716f52b34ab259ad5247e7595d9f9db6e935","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","52c7e49be259508735752fba88085255014a6ecf"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"52c7e49be259508735752fba88085255014a6ecf":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"3184874f7f3aca850248483485b4995343066875":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}