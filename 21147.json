{"path":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#MultiFieldQueryParser(String[],Analyzer).mjava","commits":[{"id":"dd2b3692962ae7859a41fd229cfe7ed2ff550ac0","date":1102865269,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#MultiFieldQueryParser(String[],Analyzer).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * <p>Creates a MultiFieldQueryParser that will, when parse(String query)\n   * is called, construct a query like this (assuming the query consists of\n   * two terms and you specify the two fields <code>title</code> and <code>body</code>):</p>\n   * \n   * <code>\n   * (title:term1 body:term1) (title:term2 body:term2)\n   * </code>\n   *\n   * <p>When setDefaultOperator(AND_OPERATOR) is set, the result will be:</p>\n   *  \n   * <code>\n   * +(title:term1 body:term1) +(title:term2 body:term2)\n   * </code>\n   * \n   * <p>In other words, all the query's terms must appear, but it doesn't matter in\n   * what fields they appear.</p>\n   */\n  public MultiFieldQueryParser(String[] fields, Analyzer analyzer) {\n    super(null, analyzer);\n    this.fields = fields;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70cb8d0dda6f3d9d3ea0bf7d824a9389b99ad7c6","date":1113959089,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#MultiFieldQueryParser(String[],Analyzer).mjava","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#MultiFieldQueryParser(String[],Analyzer).mjava","sourceNew":"  /**\n   * Creates a MultiFieldQueryParser.\n   *\n   * <p>It that will, when parse(String query)\n   * is called, construct a query like this (assuming the query consists of\n   * two terms and you specify the two fields <code>title</code> and <code>body</code>):</p>\n   * \n   * <code>\n   * (title:term1 body:term1) (title:term2 body:term2)\n   * </code>\n   *\n   * <p>When setDefaultOperator(AND_OPERATOR) is set, the result will be:</p>\n   *  \n   * <code>\n   * +(title:term1 body:term1) +(title:term2 body:term2)\n   * </code>\n   * \n   * <p>In other words, all the query's terms must appear, but it doesn't matter in\n   * what fields they appear.</p>\n   */\n  public MultiFieldQueryParser(String[] fields, Analyzer analyzer) {\n    super(null, analyzer);\n    this.fields = fields;\n  }\n\n","sourceOld":"  /**\n   * <p>Creates a MultiFieldQueryParser that will, when parse(String query)\n   * is called, construct a query like this (assuming the query consists of\n   * two terms and you specify the two fields <code>title</code> and <code>body</code>):</p>\n   * \n   * <code>\n   * (title:term1 body:term1) (title:term2 body:term2)\n   * </code>\n   *\n   * <p>When setDefaultOperator(AND_OPERATOR) is set, the result will be:</p>\n   *  \n   * <code>\n   * +(title:term1 body:term1) +(title:term2 body:term2)\n   * </code>\n   * \n   * <p>In other words, all the query's terms must appear, but it doesn't matter in\n   * what fields they appear.</p>\n   */\n  public MultiFieldQueryParser(String[] fields, Analyzer analyzer) {\n    super(null, analyzer);\n    this.fields = fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c448339b0a093bc2a077c39f73d08e4c746def3a","date":1113959454,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#MultiFieldQueryParser(String[],Analyzer).mjava","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#MultiFieldQueryParser(String[],Analyzer).mjava","sourceNew":"  /**\n   * Creates a MultiFieldQueryParser.\n   *\n   * <p>It will, when parse(String query)\n   * is called, construct a query like this (assuming the query consists of\n   * two terms and you specify the two fields <code>title</code> and <code>body</code>):</p>\n   * \n   * <code>\n   * (title:term1 body:term1) (title:term2 body:term2)\n   * </code>\n   *\n   * <p>When setDefaultOperator(AND_OPERATOR) is set, the result will be:</p>\n   *  \n   * <code>\n   * +(title:term1 body:term1) +(title:term2 body:term2)\n   * </code>\n   * \n   * <p>In other words, all the query's terms must appear, but it doesn't matter in\n   * what fields they appear.</p>\n   */\n  public MultiFieldQueryParser(String[] fields, Analyzer analyzer) {\n    super(null, analyzer);\n    this.fields = fields;\n  }\n\n","sourceOld":"  /**\n   * Creates a MultiFieldQueryParser.\n   *\n   * <p>It that will, when parse(String query)\n   * is called, construct a query like this (assuming the query consists of\n   * two terms and you specify the two fields <code>title</code> and <code>body</code>):</p>\n   * \n   * <code>\n   * (title:term1 body:term1) (title:term2 body:term2)\n   * </code>\n   *\n   * <p>When setDefaultOperator(AND_OPERATOR) is set, the result will be:</p>\n   *  \n   * <code>\n   * +(title:term1 body:term1) +(title:term2 body:term2)\n   * </code>\n   * \n   * <p>In other words, all the query's terms must appear, but it doesn't matter in\n   * what fields they appear.</p>\n   */\n  public MultiFieldQueryParser(String[] fields, Analyzer analyzer) {\n    super(null, analyzer);\n    this.fields = fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#MultiFieldQueryParser(Version,String[],Analyzer).mjava","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#MultiFieldQueryParser(String[],Analyzer).mjava","sourceNew":"  /**\n   * Creates a MultiFieldQueryParser.\n   *\n   * <p>It will, when parse(String query)\n   * is called, construct a query like this (assuming the query consists of\n   * two terms and you specify the two fields <code>title</code> and <code>body</code>):</p>\n   * \n   * <code>\n   * (title:term1 body:term1) (title:term2 body:term2)\n   * </code>\n   *\n   * <p>When setDefaultOperator(AND_OPERATOR) is set, the result will be:</p>\n   *  \n   * <code>\n   * +(title:term1 body:term1) +(title:term2 body:term2)\n   * </code>\n   * \n   * <p>In other words, all the query's terms must appear, but it doesn't matter in\n   * what fields they appear.</p>\n   */\n  public MultiFieldQueryParser(Version matchVersion, String[] fields, Analyzer analyzer) {\n    super(matchVersion, null, analyzer);\n    this.fields = fields;\n  }\n\n","sourceOld":"  /**\n   * Creates a MultiFieldQueryParser.\n   *\n   * <p>It will, when parse(String query)\n   * is called, construct a query like this (assuming the query consists of\n   * two terms and you specify the two fields <code>title</code> and <code>body</code>):</p>\n   * \n   * <code>\n   * (title:term1 body:term1) (title:term2 body:term2)\n   * </code>\n   *\n   * <p>When setDefaultOperator(AND_OPERATOR) is set, the result will be:</p>\n   *  \n   * <code>\n   * +(title:term1 body:term1) +(title:term2 body:term2)\n   * </code>\n   * \n   * <p>In other words, all the query's terms must appear, but it doesn't matter in\n   * what fields they appear.</p>\n   */\n  public MultiFieldQueryParser(String[] fields, Analyzer analyzer) {\n    super(null, analyzer);\n    this.fields = fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70cb8d0dda6f3d9d3ea0bf7d824a9389b99ad7c6":["dd2b3692962ae7859a41fd229cfe7ed2ff550ac0"],"c448339b0a093bc2a077c39f73d08e4c746def3a":["70cb8d0dda6f3d9d3ea0bf7d824a9389b99ad7c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd2b3692962ae7859a41fd229cfe7ed2ff550ac0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba1116b3450a9c1642c89445d131b37344055245"],"ba1116b3450a9c1642c89445d131b37344055245":["c448339b0a093bc2a077c39f73d08e4c746def3a"]},"commit2Childs":{"70cb8d0dda6f3d9d3ea0bf7d824a9389b99ad7c6":["c448339b0a093bc2a077c39f73d08e4c746def3a"],"c448339b0a093bc2a077c39f73d08e4c746def3a":["ba1116b3450a9c1642c89445d131b37344055245"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd2b3692962ae7859a41fd229cfe7ed2ff550ac0"],"dd2b3692962ae7859a41fd229cfe7ed2ff550ac0":["70cb8d0dda6f3d9d3ea0bf7d824a9389b99ad7c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"ba1116b3450a9c1642c89445d131b37344055245":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}