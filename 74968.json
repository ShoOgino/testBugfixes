{"path":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed#testFacetIDs(int[],int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed#testFacetIDs(int[],int).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed#testFacetIDs(int[],int).mjava","sourceNew":"  private static void testFacetIDs(int[] facetIDs, int docID)\n      throws IOException {\n    int loopFactor = integers / facetIDs.length;\n    System.out\n        .println(\"\\nEstimating ~\"\n            + integers\n            + \" Integers compression time by\\nEncoding/decoding facets' ID payload of docID = \"\n            + docID + \" (unsorted, length of: \" + facetIDs.length\n            + \") \" + loopFactor + \" times.\");\n\n    System.out.println();\n    String header = String.format(headerFormat, \"Encoder\", \"Bits/Int\",\n        \"Encode Time\", \"Encode Time\", \"Decode Time\", \"Decode Time\");\n\n    System.out.println(header);\n    String header2 = String.format(headerFormat, \"\", \"\", \"[milliseconds]\",\n        \"[microsecond / int]\", \"[milliseconds]\", \"[microsecond / int]\");\n\n    System.out.println(header2);\n\n    char[] separator = header.toCharArray();\n    Arrays.fill(separator, '-');\n    System.out.println(separator);\n\n    encoderTest(new VInt8IntEncoder(), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new VInt8IntEncoder())), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new EightFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new FourFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(3)))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(4)))), facetIDs, loopFactor);\n\n    System.out.println();\n  }\n\n","sourceOld":"  private static void testFacetIDs(int[] facetIDs, int docID)\n      throws IOException {\n    int loopFactor = integers / facetIDs.length;\n    System.out\n        .println(\"\\nEstimating ~\"\n            + integers\n            + \" Integers compression time by\\nEncoding/decoding facets' ID payload of docID = \"\n            + docID + \" (unsorted, length of: \" + facetIDs.length\n            + \") \" + loopFactor + \" times.\");\n\n    System.out.println();\n    String header = String.format(headerFormat, \"Encoder\", \"Bits/Int\",\n        \"Encode Time\", \"Encode Time\", \"Decode Time\", \"Decode Time\");\n\n    System.out.println(header);\n    String header2 = String.format(headerFormat, \"\", \"\", \"[milliseconds]\",\n        \"[microsecond / int]\", \"[milliseconds]\", \"[microsecond / int]\");\n\n    System.out.println(header2);\n\n    char[] separator = header.toCharArray();\n    Arrays.fill(separator, '-');\n    System.out.println(separator);\n\n    encoderTest(new VInt8IntEncoder(), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new VInt8IntEncoder())), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new EightFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new FourFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(3)))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(4)))), facetIDs, loopFactor);\n\n    System.out.println();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c70cdb81dc660d90f9d0664dd91b473b7e66563","date":1341679310,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed#testFacetIDs(int[],int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed#testFacetIDs(int[],int).mjava","sourceNew":"  private static void testFacetIDs(int[] facetIDs, int docID)\n      throws IOException {\n    int loopFactor = integers / facetIDs.length;\n    System.out\n        .println(\"\\nEstimating ~\"\n            + integers\n            + \" Integers compression time by\\nEncoding/decoding facets' ID payload of docID = \"\n            + docID + \" (unsorted, length of: \" + facetIDs.length\n            + \") \" + loopFactor + \" times.\");\n\n    System.out.println();\n    String header = String.format(Locale.ROOT, headerFormat, \"Encoder\", \"Bits/Int\",\n        \"Encode Time\", \"Encode Time\", \"Decode Time\", \"Decode Time\");\n\n    System.out.println(header);\n    String header2 = String.format(Locale.ROOT, headerFormat, \"\", \"\", \"[milliseconds]\",\n        \"[microsecond / int]\", \"[milliseconds]\", \"[microsecond / int]\");\n\n    System.out.println(header2);\n\n    char[] separator = header.toCharArray();\n    Arrays.fill(separator, '-');\n    System.out.println(separator);\n\n    encoderTest(new VInt8IntEncoder(), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new VInt8IntEncoder())), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new EightFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new FourFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(3)))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(4)))), facetIDs, loopFactor);\n\n    System.out.println();\n  }\n\n","sourceOld":"  private static void testFacetIDs(int[] facetIDs, int docID)\n      throws IOException {\n    int loopFactor = integers / facetIDs.length;\n    System.out\n        .println(\"\\nEstimating ~\"\n            + integers\n            + \" Integers compression time by\\nEncoding/decoding facets' ID payload of docID = \"\n            + docID + \" (unsorted, length of: \" + facetIDs.length\n            + \") \" + loopFactor + \" times.\");\n\n    System.out.println();\n    String header = String.format(headerFormat, \"Encoder\", \"Bits/Int\",\n        \"Encode Time\", \"Encode Time\", \"Decode Time\", \"Decode Time\");\n\n    System.out.println(header);\n    String header2 = String.format(headerFormat, \"\", \"\", \"[milliseconds]\",\n        \"[microsecond / int]\", \"[milliseconds]\", \"[microsecond / int]\");\n\n    System.out.println(header2);\n\n    char[] separator = header.toCharArray();\n    Arrays.fill(separator, '-');\n    System.out.println(separator);\n\n    encoderTest(new VInt8IntEncoder(), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new VInt8IntEncoder())), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new EightFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new FourFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(3)))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(4)))), facetIDs, loopFactor);\n\n    System.out.println();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed#testFacetIDs(int[],int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed#testFacetIDs(int[],int).mjava","sourceNew":"  private static void testFacetIDs(int[] facetIDs, int docID)\n      throws IOException {\n    int loopFactor = integers / facetIDs.length;\n    System.out\n        .println(\"\\nEstimating ~\"\n            + integers\n            + \" Integers compression time by\\nEncoding/decoding facets' ID payload of docID = \"\n            + docID + \" (unsorted, length of: \" + facetIDs.length\n            + \") \" + loopFactor + \" times.\");\n\n    System.out.println();\n    String header = String.format(Locale.ROOT, headerFormat, \"Encoder\", \"Bits/Int\",\n        \"Encode Time\", \"Encode Time\", \"Decode Time\", \"Decode Time\");\n\n    System.out.println(header);\n    String header2 = String.format(Locale.ROOT, headerFormat, \"\", \"\", \"[milliseconds]\",\n        \"[microsecond / int]\", \"[milliseconds]\", \"[microsecond / int]\");\n\n    System.out.println(header2);\n\n    char[] separator = header.toCharArray();\n    Arrays.fill(separator, '-');\n    System.out.println(separator);\n\n    encoderTest(new VInt8IntEncoder(), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new VInt8IntEncoder())), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new EightFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new FourFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(3)))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(4)))), facetIDs, loopFactor);\n\n    System.out.println();\n  }\n\n","sourceOld":"  private static void testFacetIDs(int[] facetIDs, int docID)\n      throws IOException {\n    int loopFactor = integers / facetIDs.length;\n    System.out\n        .println(\"\\nEstimating ~\"\n            + integers\n            + \" Integers compression time by\\nEncoding/decoding facets' ID payload of docID = \"\n            + docID + \" (unsorted, length of: \" + facetIDs.length\n            + \") \" + loopFactor + \" times.\");\n\n    System.out.println();\n    String header = String.format(headerFormat, \"Encoder\", \"Bits/Int\",\n        \"Encode Time\", \"Encode Time\", \"Decode Time\", \"Decode Time\");\n\n    System.out.println(header);\n    String header2 = String.format(headerFormat, \"\", \"\", \"[milliseconds]\",\n        \"[microsecond / int]\", \"[milliseconds]\", \"[microsecond / int]\");\n\n    System.out.println(header2);\n\n    char[] separator = header.toCharArray();\n    Arrays.fill(separator, '-');\n    System.out.println(separator);\n\n    encoderTest(new VInt8IntEncoder(), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new VInt8IntEncoder())), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new EightFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new FourFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(3)))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(4)))), facetIDs, loopFactor);\n\n    System.out.println();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed#testFacetIDs(int[],int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed#testFacetIDs(int[],int).mjava","sourceNew":"  private static void testFacetIDs(int[] facetIDs, int docID)\n      throws IOException {\n    int loopFactor = integers / facetIDs.length;\n    System.out\n        .println(\"\\nEstimating ~\"\n            + integers\n            + \" Integers compression time by\\nEncoding/decoding facets' ID payload of docID = \"\n            + docID + \" (unsorted, length of: \" + facetIDs.length\n            + \") \" + loopFactor + \" times.\");\n\n    System.out.println();\n    String header = String.format(Locale.ROOT, headerFormat, \"Encoder\", \"Bits/Int\",\n        \"Encode Time\", \"Encode Time\", \"Decode Time\", \"Decode Time\");\n\n    System.out.println(header);\n    String header2 = String.format(Locale.ROOT, headerFormat, \"\", \"\", \"[milliseconds]\",\n        \"[microsecond / int]\", \"[milliseconds]\", \"[microsecond / int]\");\n\n    System.out.println(header2);\n\n    char[] separator = header.toCharArray();\n    Arrays.fill(separator, '-');\n    System.out.println(separator);\n\n    encoderTest(new VInt8IntEncoder(), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new VInt8IntEncoder())), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new EightFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new FourFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(3)))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(4)))), facetIDs, loopFactor);\n\n    System.out.println();\n  }\n\n","sourceOld":"  private static void testFacetIDs(int[] facetIDs, int docID)\n      throws IOException {\n    int loopFactor = integers / facetIDs.length;\n    System.out\n        .println(\"\\nEstimating ~\"\n            + integers\n            + \" Integers compression time by\\nEncoding/decoding facets' ID payload of docID = \"\n            + docID + \" (unsorted, length of: \" + facetIDs.length\n            + \") \" + loopFactor + \" times.\");\n\n    System.out.println();\n    String header = String.format(headerFormat, \"Encoder\", \"Bits/Int\",\n        \"Encode Time\", \"Encode Time\", \"Decode Time\", \"Decode Time\");\n\n    System.out.println(header);\n    String header2 = String.format(headerFormat, \"\", \"\", \"[milliseconds]\",\n        \"[microsecond / int]\", \"[milliseconds]\", \"[microsecond / int]\");\n\n    System.out.println(header2);\n\n    char[] separator = header.toCharArray();\n    Arrays.fill(separator, '-');\n    System.out.println(separator);\n\n    encoderTest(new VInt8IntEncoder(), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new VInt8IntEncoder())), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new EightFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new FourFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(3)))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(4)))), facetIDs, loopFactor);\n\n    System.out.println();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed#testFacetIDs(int[],int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed#testFacetIDs(int[],int).mjava","sourceNew":"  private static void testFacetIDs(int[] facetIDs, int docID)\n      throws IOException {\n    int loopFactor = integers / facetIDs.length;\n    System.out\n        .println(\"\\nEstimating ~\"\n            + integers\n            + \" Integers compression time by\\nEncoding/decoding facets' ID payload of docID = \"\n            + docID + \" (unsorted, length of: \" + facetIDs.length\n            + \") \" + loopFactor + \" times.\");\n\n    System.out.println();\n    String header = String.format(Locale.ROOT, headerFormat, \"Encoder\", \"Bits/Int\",\n        \"Encode Time\", \"Encode Time\", \"Decode Time\", \"Decode Time\");\n\n    System.out.println(header);\n    String header2 = String.format(Locale.ROOT, headerFormat, \"\", \"\", \"[milliseconds]\",\n        \"[microsecond / int]\", \"[milliseconds]\", \"[microsecond / int]\");\n\n    System.out.println(header2);\n\n    char[] separator = header.toCharArray();\n    Arrays.fill(separator, '-');\n    System.out.println(separator);\n\n    encoderTest(new VInt8IntEncoder(), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new VInt8IntEncoder())), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new EightFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new FourFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(3)))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(4)))), facetIDs, loopFactor);\n\n    System.out.println();\n  }\n\n","sourceOld":"  private static void testFacetIDs(int[] facetIDs, int docID)\n      throws IOException {\n    int loopFactor = integers / facetIDs.length;\n    System.out\n        .println(\"\\nEstimating ~\"\n            + integers\n            + \" Integers compression time by\\nEncoding/decoding facets' ID payload of docID = \"\n            + docID + \" (unsorted, length of: \" + facetIDs.length\n            + \") \" + loopFactor + \" times.\");\n\n    System.out.println();\n    String header = String.format(headerFormat, \"Encoder\", \"Bits/Int\",\n        \"Encode Time\", \"Encode Time\", \"Decode Time\", \"Decode Time\");\n\n    System.out.println(header);\n    String header2 = String.format(headerFormat, \"\", \"\", \"[milliseconds]\",\n        \"[microsecond / int]\", \"[milliseconds]\", \"[microsecond / int]\");\n\n    System.out.println(header2);\n\n    char[] separator = header.toCharArray();\n    Arrays.fill(separator, '-');\n    System.out.println(separator);\n\n    encoderTest(new VInt8IntEncoder(), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new VInt8IntEncoder())), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new EightFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new FourFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(3)))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(4)))), facetIDs, loopFactor);\n\n    System.out.println();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bceb02c33032dd9bbf107cd06d0b74e5db4f110a","date":1357909746,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed#testFacetIDs(int[],int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed#testFacetIDs(int[],int).mjava","sourceNew":"  private static void testFacetIDs(int[] facetIDs, int docID) throws IOException {\n    int loopFactor = integers / facetIDs.length;\n    System.out\n        .println(\"\\nEstimating ~\"\n            + integers\n            + \" Integers compression time by\\nEncoding/decoding facets' ID payload of docID = \"\n            + docID + \" (unsorted, length of: \" + facetIDs.length\n            + \") \" + loopFactor + \" times.\");\n\n    System.out.println();\n    String header = String.format(Locale.ROOT, headerFormat, \"Encoder\", \"Bits/Int\",\n        \"Encode Time\", \"Encode Time\", \"Decode Time\", \"Decode Time\");\n\n    System.out.println(header);\n    String header2 = String.format(Locale.ROOT, headerFormat, \"\", \"\", \"[milliseconds]\",\n        \"[microsecond / int]\", \"[milliseconds]\", \"[microsecond / int]\");\n\n    System.out.println(header2);\n\n    char[] separator = header.toCharArray();\n    Arrays.fill(separator, '-');\n    System.out.println(separator);\n\n    encoderTest(new VInt8IntEncoder(), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new VInt8IntEncoder())), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new EightFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new FourFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(3)))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(4)))), facetIDs, loopFactor);\n\n    System.out.println();\n  }\n\n","sourceOld":"  private static void testFacetIDs(int[] facetIDs, int docID)\n      throws IOException {\n    int loopFactor = integers / facetIDs.length;\n    System.out\n        .println(\"\\nEstimating ~\"\n            + integers\n            + \" Integers compression time by\\nEncoding/decoding facets' ID payload of docID = \"\n            + docID + \" (unsorted, length of: \" + facetIDs.length\n            + \") \" + loopFactor + \" times.\");\n\n    System.out.println();\n    String header = String.format(Locale.ROOT, headerFormat, \"Encoder\", \"Bits/Int\",\n        \"Encode Time\", \"Encode Time\", \"Decode Time\", \"Decode Time\");\n\n    System.out.println(header);\n    String header2 = String.format(Locale.ROOT, headerFormat, \"\", \"\", \"[milliseconds]\",\n        \"[microsecond / int]\", \"[milliseconds]\", \"[microsecond / int]\");\n\n    System.out.println(header2);\n\n    char[] separator = header.toCharArray();\n    Arrays.fill(separator, '-');\n    System.out.println(separator);\n\n    encoderTest(new VInt8IntEncoder(), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new VInt8IntEncoder())), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new EightFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new FourFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(3)))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(4)))), facetIDs, loopFactor);\n\n    System.out.println();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed#testFacetIDs(int[],int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed#testFacetIDs(int[],int).mjava","sourceNew":"  private static void testFacetIDs(int[] facetIDs, int docID) throws IOException {\n    int loopFactor = integers / facetIDs.length;\n    System.out\n        .println(\"\\nEstimating ~\"\n            + integers\n            + \" Integers compression time by\\nEncoding/decoding facets' ID payload of docID = \"\n            + docID + \" (unsorted, length of: \" + facetIDs.length\n            + \") \" + loopFactor + \" times.\");\n\n    System.out.println();\n    String header = String.format(Locale.ROOT, headerFormat, \"Encoder\", \"Bits/Int\",\n        \"Encode Time\", \"Encode Time\", \"Decode Time\", \"Decode Time\");\n\n    System.out.println(header);\n    String header2 = String.format(Locale.ROOT, headerFormat, \"\", \"\", \"[milliseconds]\",\n        \"[microsecond / int]\", \"[milliseconds]\", \"[microsecond / int]\");\n\n    System.out.println(header2);\n\n    char[] separator = header.toCharArray();\n    Arrays.fill(separator, '-');\n    System.out.println(separator);\n\n    encoderTest(new VInt8IntEncoder(), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new VInt8IntEncoder())), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new EightFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new FourFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(3)))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(4)))), facetIDs, loopFactor);\n\n    System.out.println();\n  }\n\n","sourceOld":"  private static void testFacetIDs(int[] facetIDs, int docID)\n      throws IOException {\n    int loopFactor = integers / facetIDs.length;\n    System.out\n        .println(\"\\nEstimating ~\"\n            + integers\n            + \" Integers compression time by\\nEncoding/decoding facets' ID payload of docID = \"\n            + docID + \" (unsorted, length of: \" + facetIDs.length\n            + \") \" + loopFactor + \" times.\");\n\n    System.out.println();\n    String header = String.format(Locale.ROOT, headerFormat, \"Encoder\", \"Bits/Int\",\n        \"Encode Time\", \"Encode Time\", \"Decode Time\", \"Decode Time\");\n\n    System.out.println(header);\n    String header2 = String.format(Locale.ROOT, headerFormat, \"\", \"\", \"[milliseconds]\",\n        \"[microsecond / int]\", \"[milliseconds]\", \"[microsecond / int]\");\n\n    System.out.println(header2);\n\n    char[] separator = header.toCharArray();\n    Arrays.fill(separator, '-');\n    System.out.println(separator);\n\n    encoderTest(new VInt8IntEncoder(), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new VInt8IntEncoder())), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new EightFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new FourFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(3)))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(4)))), facetIDs, loopFactor);\n\n    System.out.println();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f5af60d674d26c0be0ce66f8b291c6b569d5e4e","date":1358344590,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed#testFacetIDs(int[],int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed#testFacetIDs(int[],int).mjava","sourceNew":"  private static void testFacetIDs(int[] facetIDs, int docID) throws IOException {\n    int loopFactor = integers / facetIDs.length;\n    System.out\n        .println(\"\\nEstimating ~\"\n            + integers\n            + \" Integers compression time by\\nEncoding/decoding facets' ID payload of docID = \"\n            + docID + \" (unsorted, length of: \" + facetIDs.length\n            + \") \" + loopFactor + \" times.\");\n\n    System.out.println();\n    String header = String.format(Locale.ROOT, headerFormat, \"Encoder\", \"Bits/Int\",\n        \"Encode Time\", \"Encode Time\", \"Decode Time\", \"Decode Time\");\n\n    System.out.println(header);\n    String header2 = String.format(Locale.ROOT, headerFormat, \"\", \"\", \"[milliseconds]\",\n        \"[microsecond / int]\", \"[milliseconds]\", \"[microsecond / int]\");\n\n    System.out.println(header2);\n\n    char[] separator = header.toCharArray();\n    Arrays.fill(separator, '-');\n    System.out.println(separator);\n\n    encoderTest(new VInt8IntEncoder(), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new VInt8IntEncoder())), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapVInt8IntEncoder())), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new EightFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new FourFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(3)))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(4)))), facetIDs, loopFactor);\n\n    System.out.println();\n  }\n\n","sourceOld":"  private static void testFacetIDs(int[] facetIDs, int docID) throws IOException {\n    int loopFactor = integers / facetIDs.length;\n    System.out\n        .println(\"\\nEstimating ~\"\n            + integers\n            + \" Integers compression time by\\nEncoding/decoding facets' ID payload of docID = \"\n            + docID + \" (unsorted, length of: \" + facetIDs.length\n            + \") \" + loopFactor + \" times.\");\n\n    System.out.println();\n    String header = String.format(Locale.ROOT, headerFormat, \"Encoder\", \"Bits/Int\",\n        \"Encode Time\", \"Encode Time\", \"Decode Time\", \"Decode Time\");\n\n    System.out.println(header);\n    String header2 = String.format(Locale.ROOT, headerFormat, \"\", \"\", \"[milliseconds]\",\n        \"[microsecond / int]\", \"[milliseconds]\", \"[microsecond / int]\");\n\n    System.out.println(header2);\n\n    char[] separator = header.toCharArray();\n    Arrays.fill(separator, '-');\n    System.out.println(separator);\n\n    encoderTest(new VInt8IntEncoder(), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new VInt8IntEncoder())), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new EightFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new FourFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(3)))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(4)))), facetIDs, loopFactor);\n\n    System.out.println();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed#testFacetIDs(int[],int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed#testFacetIDs(int[],int).mjava","sourceNew":"  private static void testFacetIDs(int[] facetIDs, int docID) throws IOException {\n    int loopFactor = integers / facetIDs.length;\n    System.out\n        .println(\"\\nEstimating ~\"\n            + integers\n            + \" Integers compression time by\\nEncoding/decoding facets' ID payload of docID = \"\n            + docID + \" (unsorted, length of: \" + facetIDs.length\n            + \") \" + loopFactor + \" times.\");\n\n    System.out.println();\n    String header = String.format(Locale.ROOT, headerFormat, \"Encoder\", \"Bits/Int\",\n        \"Encode Time\", \"Encode Time\", \"Decode Time\", \"Decode Time\");\n\n    System.out.println(header);\n    String header2 = String.format(Locale.ROOT, headerFormat, \"\", \"\", \"[milliseconds]\",\n        \"[microsecond / int]\", \"[milliseconds]\", \"[microsecond / int]\");\n\n    System.out.println(header2);\n\n    char[] separator = header.toCharArray();\n    Arrays.fill(separator, '-');\n    System.out.println(separator);\n\n    encoderTest(new VInt8IntEncoder(), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new VInt8IntEncoder())), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapVInt8IntEncoder())), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new EightFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new FourFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(3)))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(4)))), facetIDs, loopFactor);\n\n    System.out.println();\n  }\n\n","sourceOld":"  private static void testFacetIDs(int[] facetIDs, int docID) throws IOException {\n    int loopFactor = integers / facetIDs.length;\n    System.out\n        .println(\"\\nEstimating ~\"\n            + integers\n            + \" Integers compression time by\\nEncoding/decoding facets' ID payload of docID = \"\n            + docID + \" (unsorted, length of: \" + facetIDs.length\n            + \") \" + loopFactor + \" times.\");\n\n    System.out.println();\n    String header = String.format(Locale.ROOT, headerFormat, \"Encoder\", \"Bits/Int\",\n        \"Encode Time\", \"Encode Time\", \"Decode Time\", \"Decode Time\");\n\n    System.out.println(header);\n    String header2 = String.format(Locale.ROOT, headerFormat, \"\", \"\", \"[milliseconds]\",\n        \"[microsecond / int]\", \"[milliseconds]\", \"[microsecond / int]\");\n\n    System.out.println(header2);\n\n    char[] separator = header.toCharArray();\n    Arrays.fill(separator, '-');\n    System.out.println(separator);\n\n    encoderTest(new VInt8IntEncoder(), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new VInt8IntEncoder())), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new EightFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new FourFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(3)))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(4)))), facetIDs, loopFactor);\n\n    System.out.println();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/encoding/EncodingSpeed#testFacetIDs(int[],int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingSpeed#testFacetIDs(int[],int).mjava","sourceNew":"  private static void testFacetIDs(int[] facetIDs, int docID) throws IOException {\n    int loopFactor = integers / facetIDs.length;\n    System.out\n        .println(\"\\nEstimating ~\"\n            + integers\n            + \" Integers compression time by\\nEncoding/decoding facets' ID payload of docID = \"\n            + docID + \" (unsorted, length of: \" + facetIDs.length\n            + \") \" + loopFactor + \" times.\");\n\n    System.out.println();\n    String header = String.format(Locale.ROOT, headerFormat, \"Encoder\", \"Bits/Int\",\n        \"Encode Time\", \"Encode Time\", \"Decode Time\", \"Decode Time\");\n\n    System.out.println(header);\n    String header2 = String.format(Locale.ROOT, headerFormat, \"\", \"\", \"[milliseconds]\",\n        \"[microsecond / int]\", \"[milliseconds]\", \"[microsecond / int]\");\n\n    System.out.println(header2);\n\n    char[] separator = header.toCharArray();\n    Arrays.fill(separator, '-');\n    System.out.println(separator);\n\n    encoderTest(new VInt8IntEncoder(), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new VInt8IntEncoder())), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapVInt8IntEncoder())), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new EightFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new FourFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(3)))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(4)))), facetIDs, loopFactor);\n\n    System.out.println();\n  }\n\n","sourceOld":"  private static void testFacetIDs(int[] facetIDs, int docID) throws IOException {\n    int loopFactor = integers / facetIDs.length;\n    System.out\n        .println(\"\\nEstimating ~\"\n            + integers\n            + \" Integers compression time by\\nEncoding/decoding facets' ID payload of docID = \"\n            + docID + \" (unsorted, length of: \" + facetIDs.length\n            + \") \" + loopFactor + \" times.\");\n\n    System.out.println();\n    String header = String.format(Locale.ROOT, headerFormat, \"Encoder\", \"Bits/Int\",\n        \"Encode Time\", \"Encode Time\", \"Decode Time\", \"Decode Time\");\n\n    System.out.println(header);\n    String header2 = String.format(Locale.ROOT, headerFormat, \"\", \"\", \"[milliseconds]\",\n        \"[microsecond / int]\", \"[milliseconds]\", \"[microsecond / int]\");\n\n    System.out.println(header2);\n\n    char[] separator = header.toCharArray();\n    Arrays.fill(separator, '-');\n    System.out.println(separator);\n\n    encoderTest(new VInt8IntEncoder(), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new VInt8IntEncoder())), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapVInt8IntEncoder())), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new EightFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new FourFlagsIntEncoder()))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(3)))), facetIDs, loopFactor);\n    encoderTest(new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new NOnesIntEncoder(4)))), facetIDs, loopFactor);\n\n    System.out.println();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["7f5af60d674d26c0be0ce66f8b291c6b569d5e4e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["4e6354dd7c71fe122926fc53d7d29f715b1283db","7f5af60d674d26c0be0ce66f8b291c6b569d5e4e"],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["2acf500f78aa12b92e371fd89c719291986b6b90"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f5af60d674d26c0be0ce66f8b291c6b569d5e4e":["bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"2acf500f78aa12b92e371fd89c719291986b6b90":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9c70cdb81dc660d90f9d0664dd91b473b7e66563"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["2acf500f78aa12b92e371fd89c719291986b6b90","bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"],"9c70cdb81dc660d90f9d0664dd91b473b7e66563":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"46d8ada1fff8d18cb197c38c7983225162599948":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","2acf500f78aa12b92e371fd89c719291986b6b90","9c70cdb81dc660d90f9d0664dd91b473b7e66563","46d8ada1fff8d18cb197c38c7983225162599948"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["7f5af60d674d26c0be0ce66f8b291c6b569d5e4e","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7f5af60d674d26c0be0ce66f8b291c6b569d5e4e":["607428da722dcb3e86bbd11c63de8986e6275c36","c4015cd39dff8d4dec562d909f9766debac53aa6"],"2acf500f78aa12b92e371fd89c719291986b6b90":["bceb02c33032dd9bbf107cd06d0b74e5db4f110a","fe33227f6805edab2036cbb80645cc4e2d1fa424","4e6354dd7c71fe122926fc53d7d29f715b1283db","46d8ada1fff8d18cb197c38c7983225162599948"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["c4015cd39dff8d4dec562d909f9766debac53aa6"],"9c70cdb81dc660d90f9d0664dd91b473b7e66563":["2acf500f78aa12b92e371fd89c719291986b6b90"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}