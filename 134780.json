{"path":"lucene/src/java/org/apache/lucene/search/TopScoreDocCollector#create(int,ScoreDoc,boolean).mjava","commits":[{"id":"c36f7a2dc9a2d9c7cff5a1e07a7e7f5ef93e6d15","date":1316561169,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TopScoreDocCollector#create(int,ScoreDoc,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new {@link TopScoreDocCollector} given the number of hits to\n   * collect, the bottom of the previous page, and whether documents are scored in order by the input\n   * {@link Scorer} to {@link #setScorer(Scorer)}.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>, and fill the array with sentinel\n   * objects.\n   */\n  public static TopScoreDocCollector create(int numHits, ScoreDoc after, boolean docsScoredInOrder) {\n    \n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n    \n    if (docsScoredInOrder) {\n      return after == null \n        ? new InOrderTopScoreDocCollector(numHits) \n        : new InOrderPagingScoreDocCollector(after, numHits);\n    } else {\n      return after == null\n        ? new OutOfOrderTopScoreDocCollector(numHits)\n        : new OutOfOrderPagingScoreDocCollector(after, numHits);\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopScoreDocCollector#create(int,ScoreDoc,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TopScoreDocCollector#create(int,ScoreDoc,boolean).mjava","sourceNew":"  /**\n   * Creates a new {@link TopScoreDocCollector} given the number of hits to\n   * collect, the bottom of the previous page, and whether documents are scored in order by the input\n   * {@link Scorer} to {@link #setScorer(Scorer)}.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>, and fill the array with sentinel\n   * objects.\n   */\n  public static TopScoreDocCollector create(int numHits, ScoreDoc after, boolean docsScoredInOrder) {\n    \n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n    \n    if (docsScoredInOrder) {\n      return after == null \n        ? new InOrderTopScoreDocCollector(numHits) \n        : new InOrderPagingScoreDocCollector(after, numHits);\n    } else {\n      return after == null\n        ? new OutOfOrderTopScoreDocCollector(numHits)\n        : new OutOfOrderPagingScoreDocCollector(after, numHits);\n    }\n    \n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link TopScoreDocCollector} given the number of hits to\n   * collect, the bottom of the previous page, and whether documents are scored in order by the input\n   * {@link Scorer} to {@link #setScorer(Scorer)}.\n   *\n   * <p><b>NOTE</b>: The instances returned by this method\n   * pre-allocate a full array of length\n   * <code>numHits</code>, and fill the array with sentinel\n   * objects.\n   */\n  public static TopScoreDocCollector create(int numHits, ScoreDoc after, boolean docsScoredInOrder) {\n    \n    if (numHits <= 0) {\n      throw new IllegalArgumentException(\"numHits must be > 0; please use TotalHitCountCollector if you just need the total hit count\");\n    }\n    \n    if (docsScoredInOrder) {\n      return after == null \n        ? new InOrderTopScoreDocCollector(numHits) \n        : new InOrderPagingScoreDocCollector(after, numHits);\n    } else {\n      return after == null\n        ? new OutOfOrderTopScoreDocCollector(numHits)\n        : new OutOfOrderPagingScoreDocCollector(after, numHits);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c36f7a2dc9a2d9c7cff5a1e07a7e7f5ef93e6d15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c36f7a2dc9a2d9c7cff5a1e07a7e7f5ef93e6d15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"c36f7a2dc9a2d9c7cff5a1e07a7e7f5ef93e6d15":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c36f7a2dc9a2d9c7cff5a1e07a7e7f5ef93e6d15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}