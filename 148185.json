{"path":"lucene/core/src/test/org/apache/lucene/index/Test2BPoints#test1D().mjava","commits":[{"id":"ff54c71021a45c90242ed438dd5d236c44c51fa1","date":1457533822,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BPoints#test1D().mjava","pathOld":"/dev/null","sourceNew":"  public void test1D() throws Exception {\n    Directory dir = FSDirectory.open(createTempDir(\"2BPoints1D\"));\n    System.out.println(\"DIR: \" + ((FSDirectory) dir).getDirectory());\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n        .setCodec(Codec.forName(\"Lucene60\"))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(64.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    long counter = 0;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      for (int j=0;j<26;j++) {\n        doc.add(new LongPoint(\"long\", counter));\n        counter++;\n      }\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(1250, s.count(LongPoint.newRangeQuery(\"long\", 33640828, 33673327)));\n    assertTrue(r.leaves().get(0).reader().getPointValues().size(\"long\") > Integer.MAX_VALUE);\n    r.close();\n    w.close();\n    System.out.println(\"TEST: now CheckIndex\");\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["2b84d416bbd661ae4b2a28d103bdfccb851e00de"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5df40d9bbc30a168c87a8a2f3d2b4044ed29f107","date":1457696910,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BPoints#test1D().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BPoints#test1D().mjava","sourceNew":"  public void test1D() throws Exception {\n    Directory dir = FSDirectory.open(createTempDir(\"2BPoints1D\"));\n    System.out.println(\"DIR: \" + ((FSDirectory) dir).getDirectory());\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n      .setCodec(getCodec())\n      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n      .setRAMBufferSizeMB(256.0)\n      .setMergeScheduler(new ConcurrentMergeScheduler())\n      .setMergePolicy(newLogMergePolicy(false, 10))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n\n    ((ConcurrentMergeScheduler) iwc.getMergeScheduler()).setMaxMergesAndThreads(6, 3);\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    long counter = 0;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      for (int j=0;j<26;j++) {\n        doc.add(new LongPoint(\"long\", counter));\n        counter++;\n      }\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(1250, s.count(LongPoint.newRangeQuery(\"long\", 33640828, 33673327)));\n    assertTrue(r.leaves().get(0).reader().getPointValues().size(\"long\") > Integer.MAX_VALUE);\n    r.close();\n    w.close();\n    System.out.println(\"TEST: now CheckIndex\");\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test1D() throws Exception {\n    Directory dir = FSDirectory.open(createTempDir(\"2BPoints1D\"));\n    System.out.println(\"DIR: \" + ((FSDirectory) dir).getDirectory());\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n        .setCodec(Codec.forName(\"Lucene60\"))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(64.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    long counter = 0;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      for (int j=0;j<26;j++) {\n        doc.add(new LongPoint(\"long\", counter));\n        counter++;\n      }\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(1250, s.count(LongPoint.newRangeQuery(\"long\", 33640828, 33673327)));\n    assertTrue(r.leaves().get(0).reader().getPointValues().size(\"long\") > Integer.MAX_VALUE);\n    r.close();\n    w.close();\n    System.out.println(\"TEST: now CheckIndex\");\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5bab390672c049be9259a87550b243010d8b8423","date":1457865679,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BPoints#test1D().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BPoints#test1D().mjava","sourceNew":"  public void test1D() throws Exception {\n    Directory dir = FSDirectory.open(createTempDir(\"2BPoints1D\"));\n    System.out.println(\"DIR: \" + ((FSDirectory) dir).getDirectory());\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n      .setCodec(getCodec())\n      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n      .setRAMBufferSizeMB(256.0)\n      .setMergeScheduler(new ConcurrentMergeScheduler())\n      .setMergePolicy(newLogMergePolicy(false, 10))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n\n    ((ConcurrentMergeScheduler) iwc.getMergeScheduler()).setMaxMergesAndThreads(6, 3);\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    int counter = 0;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      for (int j=0;j<26;j++) {\n        long x = (((long) random().nextInt() << 32)) | (long) counter;\n        doc.add(new LongPoint(\"long\", x));\n        counter++;\n      }\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(1250, s.count(LongPoint.newRangeQuery(\"long\", 33640828, 33673327)));\n    assertTrue(r.leaves().get(0).reader().getPointValues().size(\"long\") > Integer.MAX_VALUE);\n    r.close();\n    w.close();\n    System.out.println(\"TEST: now CheckIndex\");\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test1D() throws Exception {\n    Directory dir = FSDirectory.open(createTempDir(\"2BPoints1D\"));\n    System.out.println(\"DIR: \" + ((FSDirectory) dir).getDirectory());\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n      .setCodec(getCodec())\n      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n      .setRAMBufferSizeMB(256.0)\n      .setMergeScheduler(new ConcurrentMergeScheduler())\n      .setMergePolicy(newLogMergePolicy(false, 10))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n\n    ((ConcurrentMergeScheduler) iwc.getMergeScheduler()).setMaxMergesAndThreads(6, 3);\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    long counter = 0;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      for (int j=0;j<26;j++) {\n        doc.add(new LongPoint(\"long\", counter));\n        counter++;\n      }\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(1250, s.count(LongPoint.newRangeQuery(\"long\", 33640828, 33673327)));\n    assertTrue(r.leaves().get(0).reader().getPointValues().size(\"long\") > Integer.MAX_VALUE);\n    r.close();\n    w.close();\n    System.out.println(\"TEST: now CheckIndex\");\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"387b0bb5e7b29d4bd5e49de2c9b618f9ab88c89b","date":1457873811,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BPoints#test1D().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BPoints#test1D().mjava","sourceNew":"  public void test1D() throws Exception {\n    Directory dir = FSDirectory.open(createTempDir(\"2BPoints1D\"));\n    System.out.println(\"DIR: \" + ((FSDirectory) dir).getDirectory());\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n      .setCodec(getCodec())\n      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n      .setRAMBufferSizeMB(256.0)\n      .setMergeScheduler(new ConcurrentMergeScheduler())\n      .setMergePolicy(newLogMergePolicy(false, 10))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n\n    ((ConcurrentMergeScheduler) iwc.getMergeScheduler()).setMaxMergesAndThreads(6, 3);\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    int counter = 0;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      for (int j=0;j<26;j++) {\n        long x = (((long) random().nextInt() << 32)) | (long) counter;\n        doc.add(new LongPoint(\"long\", x));\n        counter++;\n      }\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(numDocs, s.count(LongPoint.newRangeQuery(\"long\", Long.MIN_VALUE, Long.MAX_VALUE)));\n    assertTrue(r.leaves().get(0).reader().getPointValues().size(\"long\") > Integer.MAX_VALUE);\n    r.close();\n    w.close();\n    System.out.println(\"TEST: now CheckIndex\");\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test1D() throws Exception {\n    Directory dir = FSDirectory.open(createTempDir(\"2BPoints1D\"));\n    System.out.println(\"DIR: \" + ((FSDirectory) dir).getDirectory());\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n      .setCodec(getCodec())\n      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n      .setRAMBufferSizeMB(256.0)\n      .setMergeScheduler(new ConcurrentMergeScheduler())\n      .setMergePolicy(newLogMergePolicy(false, 10))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n\n    ((ConcurrentMergeScheduler) iwc.getMergeScheduler()).setMaxMergesAndThreads(6, 3);\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    int counter = 0;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      for (int j=0;j<26;j++) {\n        long x = (((long) random().nextInt() << 32)) | (long) counter;\n        doc.add(new LongPoint(\"long\", x));\n        counter++;\n      }\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(1250, s.count(LongPoint.newRangeQuery(\"long\", 33640828, 33673327)));\n    assertTrue(r.leaves().get(0).reader().getPointValues().size(\"long\") > Integer.MAX_VALUE);\n    r.close();\n    w.close();\n    System.out.println(\"TEST: now CheckIndex\");\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2b84d416bbd661ae4b2a28d103bdfccb851e00de","date":1458041762,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BPoints#test1D().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BPoints#test1D().mjava","sourceNew":"  public void test1D() throws Exception {\n    Directory dir = FSDirectory.open(createTempDir(\"2BPoints1D\"));\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n      .setCodec(getCodec())\n      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n      .setRAMBufferSizeMB(256.0)\n      .setMergeScheduler(new ConcurrentMergeScheduler())\n      .setMergePolicy(newLogMergePolicy(false, 10))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n\n    ((ConcurrentMergeScheduler) iwc.getMergeScheduler()).setMaxMergesAndThreads(6, 3);\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    int counter = 0;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      for (int j=0;j<26;j++) {\n        long x = (((long) random().nextInt() << 32)) | (long) counter;\n        doc.add(new LongPoint(\"long\", x));\n        counter++;\n      }\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(numDocs, s.count(LongPoint.newRangeQuery(\"long\", Long.MIN_VALUE, Long.MAX_VALUE)));\n    assertTrue(r.leaves().get(0).reader().getPointValues().size(\"long\") > Integer.MAX_VALUE);\n    r.close();\n    w.close();\n    System.out.println(\"TEST: now CheckIndex\");\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test1D() throws Exception {\n    Directory dir = FSDirectory.open(createTempDir(\"2BPoints1D\"));\n    System.out.println(\"DIR: \" + ((FSDirectory) dir).getDirectory());\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n      .setCodec(getCodec())\n      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n      .setRAMBufferSizeMB(256.0)\n      .setMergeScheduler(new ConcurrentMergeScheduler())\n      .setMergePolicy(newLogMergePolicy(false, 10))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n\n    ((ConcurrentMergeScheduler) iwc.getMergeScheduler()).setMaxMergesAndThreads(6, 3);\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    int counter = 0;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      for (int j=0;j<26;j++) {\n        long x = (((long) random().nextInt() << 32)) | (long) counter;\n        doc.add(new LongPoint(\"long\", x));\n        counter++;\n      }\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(numDocs, s.count(LongPoint.newRangeQuery(\"long\", Long.MIN_VALUE, Long.MAX_VALUE)));\n    assertTrue(r.leaves().get(0).reader().getPointValues().size(\"long\") > Integer.MAX_VALUE);\n    r.close();\n    w.close();\n    System.out.println(\"TEST: now CheckIndex\");\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":["ff54c71021a45c90242ed438dd5d236c44c51fa1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"367f57e2ee85b7f7e28cfe73370a22cf67624f65","date":1476778467,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BPoints#test1D().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BPoints#test1D().mjava","sourceNew":"  public void test1D() throws Exception {\n    Directory dir = FSDirectory.open(createTempDir(\"2BPoints1D\"));\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n      .setCodec(getCodec())\n      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n      .setRAMBufferSizeMB(256.0)\n      .setMergeScheduler(new ConcurrentMergeScheduler())\n      .setMergePolicy(newLogMergePolicy(false, 10))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n\n    ((ConcurrentMergeScheduler) iwc.getMergeScheduler()).setMaxMergesAndThreads(6, 3);\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    int counter = 0;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      for (int j=0;j<26;j++) {\n        long x = (((long) random().nextInt() << 32)) | (long) counter;\n        doc.add(new LongPoint(\"long\", x));\n        counter++;\n      }\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(numDocs, s.count(LongPoint.newRangeQuery(\"long\", Long.MIN_VALUE, Long.MAX_VALUE)));\n    assertTrue(r.leaves().get(0).reader().getPointValues(\"long\").size() > Integer.MAX_VALUE);\n    r.close();\n    w.close();\n    System.out.println(\"TEST: now CheckIndex\");\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test1D() throws Exception {\n    Directory dir = FSDirectory.open(createTempDir(\"2BPoints1D\"));\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n      .setCodec(getCodec())\n      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n      .setRAMBufferSizeMB(256.0)\n      .setMergeScheduler(new ConcurrentMergeScheduler())\n      .setMergePolicy(newLogMergePolicy(false, 10))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n\n    ((ConcurrentMergeScheduler) iwc.getMergeScheduler()).setMaxMergesAndThreads(6, 3);\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    int counter = 0;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      for (int j=0;j<26;j++) {\n        long x = (((long) random().nextInt() << 32)) | (long) counter;\n        doc.add(new LongPoint(\"long\", x));\n        counter++;\n      }\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(numDocs, s.count(LongPoint.newRangeQuery(\"long\", Long.MIN_VALUE, Long.MAX_VALUE)));\n    assertTrue(r.leaves().get(0).reader().getPointValues().size(\"long\") > Integer.MAX_VALUE);\n    r.close();\n    w.close();\n    System.out.println(\"TEST: now CheckIndex\");\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BPoints#test1D().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BPoints#test1D().mjava","sourceNew":"  public void test1D() throws Exception {\n    Directory dir = FSDirectory.open(createTempDir(\"2BPoints1D\"));\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n      .setCodec(getCodec())\n      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n      .setRAMBufferSizeMB(256.0)\n      .setMergeScheduler(new ConcurrentMergeScheduler())\n      .setMergePolicy(newLogMergePolicy(false, 10))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n\n    ((ConcurrentMergeScheduler) iwc.getMergeScheduler()).setMaxMergesAndThreads(6, 3);\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    int counter = 0;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      for (int j=0;j<26;j++) {\n        long x = (((long) random().nextInt() << 32)) | (long) counter;\n        doc.add(new LongPoint(\"long\", x));\n        counter++;\n      }\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(numDocs, s.count(LongPoint.newRangeQuery(\"long\", Long.MIN_VALUE, Long.MAX_VALUE)));\n    assertTrue(r.leaves().get(0).reader().getPointValues(\"long\").size() > Integer.MAX_VALUE);\n    r.close();\n    w.close();\n    System.out.println(\"TEST: now CheckIndex\");\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  public void test1D() throws Exception {\n    Directory dir = FSDirectory.open(createTempDir(\"2BPoints1D\"));\n\n    IndexWriterConfig iwc = new IndexWriterConfig(new MockAnalyzer(random()))\n      .setCodec(getCodec())\n      .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n      .setRAMBufferSizeMB(256.0)\n      .setMergeScheduler(new ConcurrentMergeScheduler())\n      .setMergePolicy(newLogMergePolicy(false, 10))\n      .setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n\n    ((ConcurrentMergeScheduler) iwc.getMergeScheduler()).setMaxMergesAndThreads(6, 3);\n    \n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    int counter = 0;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      for (int j=0;j<26;j++) {\n        long x = (((long) random().nextInt() << 32)) | (long) counter;\n        doc.add(new LongPoint(\"long\", x));\n        counter++;\n      }\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    DirectoryReader r = DirectoryReader.open(w);\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(numDocs, s.count(LongPoint.newRangeQuery(\"long\", Long.MIN_VALUE, Long.MAX_VALUE)));\n    assertTrue(r.leaves().get(0).reader().getPointValues().size(\"long\") > Integer.MAX_VALUE);\n    r.close();\n    w.close();\n    System.out.println(\"TEST: now CheckIndex\");\n    TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5df40d9bbc30a168c87a8a2f3d2b4044ed29f107":["ff54c71021a45c90242ed438dd5d236c44c51fa1"],"387b0bb5e7b29d4bd5e49de2c9b618f9ab88c89b":["5bab390672c049be9259a87550b243010d8b8423"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["2b84d416bbd661ae4b2a28d103bdfccb851e00de"],"5bab390672c049be9259a87550b243010d8b8423":["5df40d9bbc30a168c87a8a2f3d2b4044ed29f107"],"2b84d416bbd661ae4b2a28d103bdfccb851e00de":["387b0bb5e7b29d4bd5e49de2c9b618f9ab88c89b"],"ff54c71021a45c90242ed438dd5d236c44c51fa1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2b84d416bbd661ae4b2a28d103bdfccb851e00de","367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["367f57e2ee85b7f7e28cfe73370a22cf67624f65"]},"commit2Childs":{"5df40d9bbc30a168c87a8a2f3d2b4044ed29f107":["5bab390672c049be9259a87550b243010d8b8423"],"387b0bb5e7b29d4bd5e49de2c9b618f9ab88c89b":["2b84d416bbd661ae4b2a28d103bdfccb851e00de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ff54c71021a45c90242ed438dd5d236c44c51fa1"],"5bab390672c049be9259a87550b243010d8b8423":["387b0bb5e7b29d4bd5e49de2c9b618f9ab88c89b"],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2b84d416bbd661ae4b2a28d103bdfccb851e00de":["367f57e2ee85b7f7e28cfe73370a22cf67624f65","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"ff54c71021a45c90242ed438dd5d236c44c51fa1":["5df40d9bbc30a168c87a8a2f3d2b4044ed29f107"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}