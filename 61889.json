{"path":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","commits":[{"id":"eeefd99c477417e5c7c574228461ebafe92469d4","date":1166460329,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n    \n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      long startDiskUsage = 0;\n      String[] files = dir.list();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      assertTrue(\"optimized used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (2*startDiskUsage) + \" (= 2X starting usage)\",\n                 maxDiskUsage <= 2*startDiskUsage);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d54c7739bfe85d68f0352823cd70c10c619fad38","d54c7739bfe85d68f0352823cd70c10c619fad38","8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5","8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d72db039743bd6a2da9be6306f57c71654ca1bf6","date":1173217255,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","sourceNew":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n    \n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      long startDiskUsage = 0;\n      String[] files = dir.list();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      assertTrue(\"optimized used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (2*startDiskUsage) + \" (= 2X starting usage)\",\n                 maxDiskUsage <= 2*startDiskUsage);\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n    \n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      long startDiskUsage = 0;\n      String[] files = dir.list();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      assertTrue(\"optimized used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (2*startDiskUsage) + \" (= 2X starting usage)\",\n                 maxDiskUsage <= 2*startDiskUsage);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd9aba6db0f2adde620bb61f591ed18dcfee36ac","date":1201778618,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","sourceNew":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n    \n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      long startDiskUsage = 0;\n      String[] files = dir.list();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      assertTrue(\"optimized used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (2*startDiskUsage) + \" (= 2X starting usage)\",\n                 maxDiskUsage <= 2*startDiskUsage);\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n    \n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      long startDiskUsage = 0;\n      String[] files = dir.list();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), false);\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      assertTrue(\"optimized used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (2*startDiskUsage) + \" (= 2X starting usage)\",\n                 maxDiskUsage <= 2*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d54c7739bfe85d68f0352823cd70c10c619fad38","date":1228496593,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","sourceNew":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n    \n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      assertTrue(\"optimized used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (2*startDiskUsage) + \" (= 2X starting usage)\",\n                 maxDiskUsage <= 2*startDiskUsage);\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n    \n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      long startDiskUsage = 0;\n      String[] files = dir.list();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      assertTrue(\"optimized used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (2*startDiskUsage) + \" (= 2X starting usage)\",\n                 maxDiskUsage <= 2*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":["eeefd99c477417e5c7c574228461ebafe92469d4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestOptimizeTempSpaceUsage().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","sourceNew":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void xxxtestOptimizeTempSpaceUsage() throws IOException {\n    \n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      assertTrue(\"optimized used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (2*startDiskUsage) + \" (= 2X starting usage)\",\n                 maxDiskUsage <= 2*startDiskUsage);\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n    \n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      assertTrue(\"optimized used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (2*startDiskUsage) + \" (= 2X starting usage)\",\n                 maxDiskUsage <= 2*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestOptimizeTempSpaceUsage().mjava","sourceNew":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n    \n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      assertTrue(\"optimized used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (2*startDiskUsage) + \" (= 2X starting usage)\",\n                 maxDiskUsage <= 2*startDiskUsage);\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void xxxtestOptimizeTempSpaceUsage() throws IOException {\n    \n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      assertTrue(\"optimized used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (2*startDiskUsage) + \" (= 2X starting usage)\",\n                 maxDiskUsage <= 2*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","sourceNew":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n    \n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      assertTrue(\"optimized used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (2*startDiskUsage) + \" (= 2X starting usage)\",\n                 maxDiskUsage <= 2*startDiskUsage);\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n    \n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      assertTrue(\"optimized used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (2*startDiskUsage) + \" (= 2X starting usage)\",\n                 maxDiskUsage <= 2*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","sourceNew":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n    \n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      assertTrue(\"optimized used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (2*startDiskUsage) + \" (= 2X starting usage)\",\n                 maxDiskUsage <= 2*startDiskUsage);\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n    \n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      assertTrue(\"optimized used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (2*startDiskUsage) + \" (= 2X starting usage)\",\n                 maxDiskUsage <= 2*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","sourceNew":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n    \n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      assertTrue(\"optimized used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (2*startDiskUsage) + \" (= 2X starting usage)\",\n                 maxDiskUsage <= 2*startDiskUsage);\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n    \n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      assertTrue(\"optimized used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (2*startDiskUsage) + \" (= 2X starting usage)\",\n                 maxDiskUsage <= 2*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","sourceNew":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n    \n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      assertTrue(\"optimized used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (2*startDiskUsage) + \" (= 2X starting usage)\",\n                 maxDiskUsage <= 2*startDiskUsage);\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n    \n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      assertTrue(\"optimized used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (2*startDiskUsage) + \" (= 2X starting usage)\",\n                 maxDiskUsage <= 2*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","sourceNew":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n    \n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      assertTrue(\"optimized used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (2*startDiskUsage) + \" (= 2X starting usage)\",\n                 maxDiskUsage <= 2*startDiskUsage);\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n    \n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      assertTrue(\"optimized used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (2*startDiskUsage) + \" (= 2X starting usage)\",\n                 maxDiskUsage <= 2*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeTempSpaceUsage().mjava","sourceNew":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n    \n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      assertTrue(\"optimized used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (2*startDiskUsage) + \" (= 2X starting usage)\",\n                 maxDiskUsage <= 2*startDiskUsage);\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure optimize doesn't use any more than 1X\n     * starting index size as its temporary free space\n     * required.\n     */\n    public void testOptimizeTempSpaceUsage() throws IOException {\n    \n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      for(int j=0;j<500;j++) {\n        addDocWithIndex(writer, j);\n      }\n      writer.close();\n\n      long startDiskUsage = 0;\n      String[] files = dir.listAll();\n      for(int i=0;i<files.length;i++) {\n        startDiskUsage += dir.fileLength(files[i]);\n      }\n\n      dir.resetMaxUsedSizeInBytes();\n      writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n      long maxDiskUsage = dir.getMaxUsedSizeInBytes();\n\n      assertTrue(\"optimized used too much temporary space: starting usage was \" + startDiskUsage + \" bytes; max temp usage was \" + maxDiskUsage + \" but should have been \" + (2*startDiskUsage) + \" (= 2X starting usage)\",\n                 maxDiskUsage <= 2*startDiskUsage);\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["d54c7739bfe85d68f0352823cd70c10c619fad38"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["d72db039743bd6a2da9be6306f57c71654ca1bf6"],"d54c7739bfe85d68f0352823cd70c10c619fad38":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"eeefd99c477417e5c7c574228461ebafe92469d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["09c482d1e63332617181729a225b215c452d8a79"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d72db039743bd6a2da9be6306f57c71654ca1bf6":["eeefd99c477417e5c7c574228461ebafe92469d4"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["d54c7739bfe85d68f0352823cd70c10c619fad38"],"d54c7739bfe85d68f0352823cd70c10c619fad38":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"eeefd99c477417e5c7c574228461ebafe92469d4":["d72db039743bd6a2da9be6306f57c71654ca1bf6"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eeefd99c477417e5c7c574228461ebafe92469d4"],"d72db039743bd6a2da9be6306f57c71654ca1bf6":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"09c482d1e63332617181729a225b215c452d8a79":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}