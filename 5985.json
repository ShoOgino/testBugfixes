{"path":"lucene/src/test/org/apache/lucene/search/TestSimpleExplanations#testTermQueryMultiSearcherExplain().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSimpleExplanations#testTermQueryMultiSearcherExplain().mjava","pathOld":"src/test/org/apache/lucene/search/TestSimpleExplanations#testTermQueryMultiSearcherExplain().mjava","sourceNew":"  public void testTermQueryMultiSearcherExplain() throws Exception {\n    // creating two directories for indices\n    Directory indexStoreA = new MockRAMDirectory();\n    Directory indexStoreB = new MockRAMDirectory();\n\n    Document lDoc = new Document();\n    lDoc.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc2 = new Document();\n    lDoc2.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc3 = new Document();\n    lDoc3.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n\n    IndexWriter writerA = new IndexWriter(indexStoreA, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(\n        TEST_VERSION_CURRENT)));\n    IndexWriter writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(\n        TEST_VERSION_CURRENT)));\n\n    writerA.addDocument(lDoc);\n    writerA.addDocument(lDoc2);\n    writerA.optimize();\n    writerA.close();\n\n    writerB.addDocument(lDoc3);\n    writerB.close();\n\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new StandardAnalyzer(TEST_VERSION_CURRENT));\n    Query query = parser.parse(\"handle:1\");\n\n    Searcher[] searchers = new Searcher[2];\n    searchers[0] = new IndexSearcher(indexStoreB, true);\n    searchers[1] = new IndexSearcher(indexStoreA, true);\n    Searcher mSearcher = new MultiSearcher(searchers);\n    ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    Explanation explain = mSearcher.explain(query, hits[0].doc);\n    String exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"maxDocs=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"docFreq=3\") > -1);\n    \n    query = parser.parse(\"handle:\\\"1 2\\\"\");\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    \n    query = new SpanNearQuery(new SpanQuery[] {\n        new SpanTermQuery(new Term(\"handle\", \"1\")),\n        new SpanTermQuery(new Term(\"handle\", \"2\")) }, 0, true);\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    mSearcher.close();\n  }\n\n","sourceOld":"  public void testTermQueryMultiSearcherExplain() throws Exception {\n    // creating two directories for indices\n    Directory indexStoreA = new MockRAMDirectory();\n    Directory indexStoreB = new MockRAMDirectory();\n\n    Document lDoc = new Document();\n    lDoc.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc2 = new Document();\n    lDoc2.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc3 = new Document();\n    lDoc3.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n\n    IndexWriter writerA = new IndexWriter(indexStoreA, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(\n        TEST_VERSION_CURRENT)));\n    IndexWriter writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(\n        TEST_VERSION_CURRENT)));\n\n    writerA.addDocument(lDoc);\n    writerA.addDocument(lDoc2);\n    writerA.optimize();\n    writerA.close();\n\n    writerB.addDocument(lDoc3);\n    writerB.close();\n\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new StandardAnalyzer(TEST_VERSION_CURRENT));\n    Query query = parser.parse(\"handle:1\");\n\n    Searcher[] searchers = new Searcher[2];\n    searchers[0] = new IndexSearcher(indexStoreB, true);\n    searchers[1] = new IndexSearcher(indexStoreA, true);\n    Searcher mSearcher = new MultiSearcher(searchers);\n    ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    Explanation explain = mSearcher.explain(query, hits[0].doc);\n    String exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"maxDocs=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"docFreq=3\") > -1);\n    \n    query = parser.parse(\"handle:\\\"1 2\\\"\");\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    \n    query = new SpanNearQuery(new SpanQuery[] {\n        new SpanTermQuery(new Term(\"handle\", \"1\")),\n        new SpanTermQuery(new Term(\"handle\", \"2\")) }, 0, true);\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    mSearcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSimpleExplanations#testTermQueryMultiSearcherExplain().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSimpleExplanations#testTermQueryMultiSearcherExplain().mjava","sourceNew":"  public void testTermQueryMultiSearcherExplain() throws Exception {\n    // creating two directories for indices\n    Directory indexStoreA = new MockRAMDirectory();\n    Directory indexStoreB = new MockRAMDirectory();\n\n    Document lDoc = new Document();\n    lDoc.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc2 = new Document();\n    lDoc2.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc3 = new Document();\n    lDoc3.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n\n    IndexWriter writerA = new IndexWriter(indexStoreA, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexWriter writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    writerA.addDocument(lDoc);\n    writerA.addDocument(lDoc2);\n    writerA.optimize();\n    writerA.close();\n\n    writerB.addDocument(lDoc3);\n    writerB.close();\n\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new MockAnalyzer());\n    Query query = parser.parse(\"handle:1\");\n\n    Searcher[] searchers = new Searcher[2];\n    searchers[0] = new IndexSearcher(indexStoreB, true);\n    searchers[1] = new IndexSearcher(indexStoreA, true);\n    Searcher mSearcher = new MultiSearcher(searchers);\n    ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    Explanation explain = mSearcher.explain(query, hits[0].doc);\n    String exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"maxDocs=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"docFreq=3\") > -1);\n    \n    query = parser.parse(\"handle:\\\"1 2\\\"\");\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    \n    query = new SpanNearQuery(new SpanQuery[] {\n        new SpanTermQuery(new Term(\"handle\", \"1\")),\n        new SpanTermQuery(new Term(\"handle\", \"2\")) }, 0, true);\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    mSearcher.close();\n  }\n\n","sourceOld":"  public void testTermQueryMultiSearcherExplain() throws Exception {\n    // creating two directories for indices\n    Directory indexStoreA = new MockRAMDirectory();\n    Directory indexStoreB = new MockRAMDirectory();\n\n    Document lDoc = new Document();\n    lDoc.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc2 = new Document();\n    lDoc2.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc3 = new Document();\n    lDoc3.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n\n    IndexWriter writerA = new IndexWriter(indexStoreA, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(\n        TEST_VERSION_CURRENT)));\n    IndexWriter writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(\n        TEST_VERSION_CURRENT)));\n\n    writerA.addDocument(lDoc);\n    writerA.addDocument(lDoc2);\n    writerA.optimize();\n    writerA.close();\n\n    writerB.addDocument(lDoc3);\n    writerB.close();\n\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new StandardAnalyzer(TEST_VERSION_CURRENT));\n    Query query = parser.parse(\"handle:1\");\n\n    Searcher[] searchers = new Searcher[2];\n    searchers[0] = new IndexSearcher(indexStoreB, true);\n    searchers[1] = new IndexSearcher(indexStoreA, true);\n    Searcher mSearcher = new MultiSearcher(searchers);\n    ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    Explanation explain = mSearcher.explain(query, hits[0].doc);\n    String exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"maxDocs=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"docFreq=3\") > -1);\n    \n    query = parser.parse(\"handle:\\\"1 2\\\"\");\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    \n    query = new SpanNearQuery(new SpanQuery[] {\n        new SpanTermQuery(new Term(\"handle\", \"1\")),\n        new SpanTermQuery(new Term(\"handle\", \"2\")) }, 0, true);\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    mSearcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSimpleExplanations#testTermQueryMultiSearcherExplain().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSimpleExplanations#testTermQueryMultiSearcherExplain().mjava","sourceNew":"  public void testTermQueryMultiSearcherExplain() throws Exception {\n    // creating two directories for indices\n    Directory indexStoreA = newDirectory(random);\n    Directory indexStoreB = newDirectory(random);\n\n    Document lDoc = new Document();\n    lDoc.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc2 = new Document();\n    lDoc2.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc3 = new Document();\n    lDoc3.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n\n    IndexWriter writerA = new IndexWriter(indexStoreA, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexWriter writerB = new IndexWriter(indexStoreB, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    writerA.addDocument(lDoc);\n    writerA.addDocument(lDoc2);\n    writerA.optimize();\n    writerA.close();\n\n    writerB.addDocument(lDoc3);\n    writerB.close();\n\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new MockAnalyzer());\n    Query query = parser.parse(\"handle:1\");\n\n    Searcher[] searchers = new Searcher[2];\n    searchers[0] = new IndexSearcher(indexStoreB, true);\n    searchers[1] = new IndexSearcher(indexStoreA, true);\n    Searcher mSearcher = new MultiSearcher(searchers);\n    ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    Explanation explain = mSearcher.explain(query, hits[0].doc);\n    String exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"maxDocs=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"docFreq=3\") > -1);\n    \n    query = parser.parse(\"handle:\\\"1 2\\\"\");\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    \n    query = new SpanNearQuery(new SpanQuery[] {\n        new SpanTermQuery(new Term(\"handle\", \"1\")),\n        new SpanTermQuery(new Term(\"handle\", \"2\")) }, 0, true);\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    mSearcher.close();\n    indexStoreA.close();\n    indexStoreB.close();\n  }\n\n","sourceOld":"  public void testTermQueryMultiSearcherExplain() throws Exception {\n    // creating two directories for indices\n    Directory indexStoreA = new MockRAMDirectory();\n    Directory indexStoreB = new MockRAMDirectory();\n\n    Document lDoc = new Document();\n    lDoc.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc2 = new Document();\n    lDoc2.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc3 = new Document();\n    lDoc3.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n\n    IndexWriter writerA = new IndexWriter(indexStoreA, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexWriter writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    writerA.addDocument(lDoc);\n    writerA.addDocument(lDoc2);\n    writerA.optimize();\n    writerA.close();\n\n    writerB.addDocument(lDoc3);\n    writerB.close();\n\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new MockAnalyzer());\n    Query query = parser.parse(\"handle:1\");\n\n    Searcher[] searchers = new Searcher[2];\n    searchers[0] = new IndexSearcher(indexStoreB, true);\n    searchers[1] = new IndexSearcher(indexStoreA, true);\n    Searcher mSearcher = new MultiSearcher(searchers);\n    ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    Explanation explain = mSearcher.explain(query, hits[0].doc);\n    String exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"maxDocs=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"docFreq=3\") > -1);\n    \n    query = parser.parse(\"handle:\\\"1 2\\\"\");\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    \n    query = new SpanNearQuery(new SpanQuery[] {\n        new SpanTermQuery(new Term(\"handle\", \"1\")),\n        new SpanTermQuery(new Term(\"handle\", \"2\")) }, 0, true);\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    mSearcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSimpleExplanations#testTermQueryMultiSearcherExplain().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSimpleExplanations#testTermQueryMultiSearcherExplain().mjava","sourceNew":"  public void testTermQueryMultiSearcherExplain() throws Exception {\n    // creating two directories for indices\n    Directory indexStoreA = newDirectory();\n    Directory indexStoreB = newDirectory();\n\n    Document lDoc = new Document();\n    lDoc.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc2 = new Document();\n    lDoc2.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc3 = new Document();\n    lDoc3.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n\n    IndexWriter writerA = new IndexWriter(indexStoreA, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexWriter writerB = new IndexWriter(indexStoreB, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    writerA.addDocument(lDoc);\n    writerA.addDocument(lDoc2);\n    writerA.optimize();\n    writerA.close();\n\n    writerB.addDocument(lDoc3);\n    writerB.close();\n\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new MockAnalyzer());\n    Query query = parser.parse(\"handle:1\");\n\n    Searcher[] searchers = new Searcher[2];\n    searchers[0] = new IndexSearcher(indexStoreB, true);\n    searchers[1] = new IndexSearcher(indexStoreA, true);\n    Searcher mSearcher = new MultiSearcher(searchers);\n    ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    Explanation explain = mSearcher.explain(query, hits[0].doc);\n    String exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"maxDocs=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"docFreq=3\") > -1);\n    \n    query = parser.parse(\"handle:\\\"1 2\\\"\");\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    \n    query = new SpanNearQuery(new SpanQuery[] {\n        new SpanTermQuery(new Term(\"handle\", \"1\")),\n        new SpanTermQuery(new Term(\"handle\", \"2\")) }, 0, true);\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    mSearcher.close();\n    indexStoreA.close();\n    indexStoreB.close();\n  }\n\n","sourceOld":"  public void testTermQueryMultiSearcherExplain() throws Exception {\n    // creating two directories for indices\n    Directory indexStoreA = newDirectory(random);\n    Directory indexStoreB = newDirectory(random);\n\n    Document lDoc = new Document();\n    lDoc.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc2 = new Document();\n    lDoc2.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc3 = new Document();\n    lDoc3.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n\n    IndexWriter writerA = new IndexWriter(indexStoreA, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexWriter writerB = new IndexWriter(indexStoreB, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    writerA.addDocument(lDoc);\n    writerA.addDocument(lDoc2);\n    writerA.optimize();\n    writerA.close();\n\n    writerB.addDocument(lDoc3);\n    writerB.close();\n\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new MockAnalyzer());\n    Query query = parser.parse(\"handle:1\");\n\n    Searcher[] searchers = new Searcher[2];\n    searchers[0] = new IndexSearcher(indexStoreB, true);\n    searchers[1] = new IndexSearcher(indexStoreA, true);\n    Searcher mSearcher = new MultiSearcher(searchers);\n    ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    Explanation explain = mSearcher.explain(query, hits[0].doc);\n    String exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"maxDocs=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"docFreq=3\") > -1);\n    \n    query = parser.parse(\"handle:\\\"1 2\\\"\");\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    \n    query = new SpanNearQuery(new SpanQuery[] {\n        new SpanTermQuery(new Term(\"handle\", \"1\")),\n        new SpanTermQuery(new Term(\"handle\", \"2\")) }, 0, true);\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    mSearcher.close();\n    indexStoreA.close();\n    indexStoreB.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSimpleExplanations#testTermQueryMultiSearcherExplain().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSimpleExplanations#testTermQueryMultiSearcherExplain().mjava","sourceNew":"  public void testTermQueryMultiSearcherExplain() throws Exception {\n    // creating two directories for indices\n    Directory indexStoreA = newDirectory();\n    Directory indexStoreB = newDirectory();\n\n    Document lDoc = new Document();\n    lDoc.add(newField(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc2 = new Document();\n    lDoc2.add(newField(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc3 = new Document();\n    lDoc3.add(newField(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n\n    IndexWriter writerA = new IndexWriter(indexStoreA, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexWriter writerB = new IndexWriter(indexStoreB, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    writerA.addDocument(lDoc);\n    writerA.addDocument(lDoc2);\n    writerA.optimize();\n    writerA.close();\n\n    writerB.addDocument(lDoc3);\n    writerB.close();\n\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new MockAnalyzer());\n    Query query = parser.parse(\"handle:1\");\n\n    Searcher[] searchers = new Searcher[2];\n    searchers[0] = new IndexSearcher(indexStoreB, true);\n    searchers[1] = new IndexSearcher(indexStoreA, true);\n    Searcher mSearcher = new MultiSearcher(searchers);\n    ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    Explanation explain = mSearcher.explain(query, hits[0].doc);\n    String exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"maxDocs=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"docFreq=3\") > -1);\n    \n    query = parser.parse(\"handle:\\\"1 2\\\"\");\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    \n    query = new SpanNearQuery(new SpanQuery[] {\n        new SpanTermQuery(new Term(\"handle\", \"1\")),\n        new SpanTermQuery(new Term(\"handle\", \"2\")) }, 0, true);\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    mSearcher.close();\n    indexStoreA.close();\n    indexStoreB.close();\n  }\n\n","sourceOld":"  public void testTermQueryMultiSearcherExplain() throws Exception {\n    // creating two directories for indices\n    Directory indexStoreA = newDirectory();\n    Directory indexStoreB = newDirectory();\n\n    Document lDoc = new Document();\n    lDoc.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc2 = new Document();\n    lDoc2.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc3 = new Document();\n    lDoc3.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n\n    IndexWriter writerA = new IndexWriter(indexStoreA, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexWriter writerB = new IndexWriter(indexStoreB, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    writerA.addDocument(lDoc);\n    writerA.addDocument(lDoc2);\n    writerA.optimize();\n    writerA.close();\n\n    writerB.addDocument(lDoc3);\n    writerB.close();\n\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new MockAnalyzer());\n    Query query = parser.parse(\"handle:1\");\n\n    Searcher[] searchers = new Searcher[2];\n    searchers[0] = new IndexSearcher(indexStoreB, true);\n    searchers[1] = new IndexSearcher(indexStoreA, true);\n    Searcher mSearcher = new MultiSearcher(searchers);\n    ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    Explanation explain = mSearcher.explain(query, hits[0].doc);\n    String exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"maxDocs=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"docFreq=3\") > -1);\n    \n    query = parser.parse(\"handle:\\\"1 2\\\"\");\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    \n    query = new SpanNearQuery(new SpanQuery[] {\n        new SpanTermQuery(new Term(\"handle\", \"1\")),\n        new SpanTermQuery(new Term(\"handle\", \"2\")) }, 0, true);\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    mSearcher.close();\n    indexStoreA.close();\n    indexStoreB.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSimpleExplanations#testTermQueryMultiSearcherExplain().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSimpleExplanations#testTermQueryMultiSearcherExplain().mjava","sourceNew":"  public void testTermQueryMultiSearcherExplain() throws Exception {\n    // creating two directories for indices\n    Directory indexStoreA = newDirectory();\n    Directory indexStoreB = newDirectory();\n\n    Document lDoc = new Document();\n    lDoc.add(newField(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc2 = new Document();\n    lDoc2.add(newField(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc3 = new Document();\n    lDoc3.add(newField(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n\n    IndexWriter writerA = new IndexWriter(indexStoreA, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexWriter writerB = new IndexWriter(indexStoreB, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    writerA.addDocument(lDoc);\n    writerA.addDocument(lDoc2);\n    writerA.optimize();\n    writerA.close();\n\n    writerB.addDocument(lDoc3);\n    writerB.close();\n\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new MockAnalyzer());\n    Query query = parser.parse(\"handle:1\");\n\n    Searcher[] searchers = new Searcher[2];\n    searchers[0] = new IndexSearcher(indexStoreB, true);\n    searchers[1] = new IndexSearcher(indexStoreA, true);\n    Searcher mSearcher = new MultiSearcher(searchers);\n    ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    Explanation explain = mSearcher.explain(query, hits[0].doc);\n    String exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"maxDocs=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"docFreq=3\") > -1);\n    \n    query = parser.parse(\"handle:\\\"1 2\\\"\");\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    \n    query = new SpanNearQuery(new SpanQuery[] {\n        new SpanTermQuery(new Term(\"handle\", \"1\")),\n        new SpanTermQuery(new Term(\"handle\", \"2\")) }, 0, true);\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    mSearcher.close();\n    indexStoreA.close();\n    indexStoreB.close();\n  }\n\n","sourceOld":"  public void testTermQueryMultiSearcherExplain() throws Exception {\n    // creating two directories for indices\n    Directory indexStoreA = new MockRAMDirectory();\n    Directory indexStoreB = new MockRAMDirectory();\n\n    Document lDoc = new Document();\n    lDoc.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc2 = new Document();\n    lDoc2.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc3 = new Document();\n    lDoc3.add(new Field(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n\n    IndexWriter writerA = new IndexWriter(indexStoreA, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexWriter writerB = new IndexWriter(indexStoreB, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    writerA.addDocument(lDoc);\n    writerA.addDocument(lDoc2);\n    writerA.optimize();\n    writerA.close();\n\n    writerB.addDocument(lDoc3);\n    writerB.close();\n\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new MockAnalyzer());\n    Query query = parser.parse(\"handle:1\");\n\n    Searcher[] searchers = new Searcher[2];\n    searchers[0] = new IndexSearcher(indexStoreB, true);\n    searchers[1] = new IndexSearcher(indexStoreA, true);\n    Searcher mSearcher = new MultiSearcher(searchers);\n    ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    Explanation explain = mSearcher.explain(query, hits[0].doc);\n    String exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"maxDocs=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"docFreq=3\") > -1);\n    \n    query = parser.parse(\"handle:\\\"1 2\\\"\");\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    \n    query = new SpanNearQuery(new SpanQuery[] {\n        new SpanTermQuery(new Term(\"handle\", \"1\")),\n        new SpanTermQuery(new Term(\"handle\", \"2\")) }, 0, true);\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    mSearcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestSimpleExplanations#testTermQueryMultiSearcherExplain().mjava","sourceNew":null,"sourceOld":"  public void testTermQueryMultiSearcherExplain() throws Exception {\n    // creating two directories for indices\n    Directory indexStoreA = newDirectory();\n    Directory indexStoreB = newDirectory();\n\n    Document lDoc = new Document();\n    lDoc.add(newField(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc2 = new Document();\n    lDoc2.add(newField(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc3 = new Document();\n    lDoc3.add(newField(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n\n    IndexWriter writerA = new IndexWriter(indexStoreA, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexWriter writerB = new IndexWriter(indexStoreB, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    writerA.addDocument(lDoc);\n    writerA.addDocument(lDoc2);\n    writerA.optimize();\n    writerA.close();\n\n    writerB.addDocument(lDoc3);\n    writerB.close();\n\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new MockAnalyzer());\n    Query query = parser.parse(\"handle:1\");\n\n    Searcher[] searchers = new Searcher[2];\n    searchers[0] = new IndexSearcher(indexStoreB, true);\n    searchers[1] = new IndexSearcher(indexStoreA, true);\n    Searcher mSearcher = new MultiSearcher(searchers);\n    ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    Explanation explain = mSearcher.explain(query, hits[0].doc);\n    String exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"maxDocs=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"docFreq=3\") > -1);\n    \n    query = parser.parse(\"handle:\\\"1 2\\\"\");\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    \n    query = new SpanNearQuery(new SpanQuery[] {\n        new SpanTermQuery(new Term(\"handle\", \"1\")),\n        new SpanTermQuery(new Term(\"handle\", \"2\")) }, 0, true);\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    mSearcher.close();\n    indexStoreA.close();\n    indexStoreB.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestSimpleExplanations#testTermQueryMultiSearcherExplain().mjava","sourceNew":null,"sourceOld":"  public void testTermQueryMultiSearcherExplain() throws Exception {\n    // creating two directories for indices\n    Directory indexStoreA = newDirectory();\n    Directory indexStoreB = newDirectory();\n\n    Document lDoc = new Document();\n    lDoc.add(newField(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc2 = new Document();\n    lDoc2.add(newField(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc3 = new Document();\n    lDoc3.add(newField(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n\n    IndexWriter writerA = new IndexWriter(indexStoreA, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexWriter writerB = new IndexWriter(indexStoreB, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    writerA.addDocument(lDoc);\n    writerA.addDocument(lDoc2);\n    writerA.optimize();\n    writerA.close();\n\n    writerB.addDocument(lDoc3);\n    writerB.close();\n\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new MockAnalyzer());\n    Query query = parser.parse(\"handle:1\");\n\n    Searcher[] searchers = new Searcher[2];\n    searchers[0] = new IndexSearcher(indexStoreB, true);\n    searchers[1] = new IndexSearcher(indexStoreA, true);\n    Searcher mSearcher = new MultiSearcher(searchers);\n    ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    Explanation explain = mSearcher.explain(query, hits[0].doc);\n    String exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"maxDocs=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"docFreq=3\") > -1);\n    \n    query = parser.parse(\"handle:\\\"1 2\\\"\");\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    \n    query = new SpanNearQuery(new SpanQuery[] {\n        new SpanTermQuery(new Term(\"handle\", \"1\")),\n        new SpanTermQuery(new Term(\"handle\", \"2\")) }, 0, true);\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    mSearcher.close();\n    indexStoreA.close();\n    indexStoreB.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestSimpleExplanations#testTermQueryMultiSearcherExplain().mjava","sourceNew":null,"sourceOld":"  public void testTermQueryMultiSearcherExplain() throws Exception {\n    // creating two directories for indices\n    Directory indexStoreA = newDirectory();\n    Directory indexStoreB = newDirectory();\n\n    Document lDoc = new Document();\n    lDoc.add(newField(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc2 = new Document();\n    lDoc2.add(newField(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n    Document lDoc3 = new Document();\n    lDoc3.add(newField(\"handle\", \"1 2\", Field.Store.YES, Field.Index.ANALYZED));\n\n    IndexWriter writerA = new IndexWriter(indexStoreA, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexWriter writerB = new IndexWriter(indexStoreB, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    writerA.addDocument(lDoc);\n    writerA.addDocument(lDoc2);\n    writerA.optimize();\n    writerA.close();\n\n    writerB.addDocument(lDoc3);\n    writerB.close();\n\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"fulltext\", new MockAnalyzer());\n    Query query = parser.parse(\"handle:1\");\n\n    Searcher[] searchers = new Searcher[2];\n    searchers[0] = new IndexSearcher(indexStoreB, true);\n    searchers[1] = new IndexSearcher(indexStoreA, true);\n    Searcher mSearcher = new MultiSearcher(searchers);\n    ScoreDoc[] hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    Explanation explain = mSearcher.explain(query, hits[0].doc);\n    String exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"maxDocs=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"docFreq=3\") > -1);\n    \n    query = parser.parse(\"handle:\\\"1 2\\\"\");\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    \n    query = new SpanNearQuery(new SpanQuery[] {\n        new SpanTermQuery(new Term(\"handle\", \"1\")),\n        new SpanTermQuery(new Term(\"handle\", \"2\")) }, 0, true);\n    hits = mSearcher.search(query, null, 1000).scoreDocs;\n\n    assertEquals(3, hits.length);\n\n    explain = mSearcher.explain(query, hits[0].doc);\n    exp = explain.toString(0);\n    assertTrue(exp, exp.indexOf(\"1=3\") > -1);\n    assertTrue(exp, exp.indexOf(\"2=3\") > -1);\n    mSearcher.close();\n    indexStoreA.close();\n    indexStoreB.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["132903c28af3aa6f67284b78de91c0f0a99488c2","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["d572389229127c297dd1fa5ce4758e1cec41e799"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","132903c28af3aa6f67284b78de91c0f0a99488c2"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d572389229127c297dd1fa5ce4758e1cec41e799":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}