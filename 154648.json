{"path":"solr/core/src/test/org/apache/solr/search/TestRecovery#testLogReplayWithInPlaceUpdatesAndDeletes().mjava","commits":[{"id":"415bbbe7da8065dd3c477bdc3c703c6425622998","date":1485393793,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testLogReplayWithInPlaceUpdatesAndDeletes().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testLogReplayWithInPlaceUpdatesAndDeletes() throws Exception {\n\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      \n      // DBQ of updated document using id\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A2\", \"val_i_dvo\", \"1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A2\", \"val_i_dvo\", map(\"set\", 2)), null)); // in-place update\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A2\", null));\n\n      // DBQ of updated document using updated value\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A3\", \"val_i_dvo\", \"101\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A3\", \"val_i_dvo\", map(\"set\", 102)), null)); // in-place update\n      versions.addFirst(deleteByQueryAndGetVersion(\"val_i_dvo:102\", null));\n\n      // DBQ using an intermediate update value (shouldn't delete anything)\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A4\", \"val_i_dvo\", \"200\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A4\", \"val_i_dvo\", map(\"inc\", \"1\")), null)); // in-place update\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A4\", \"val_i_dvo\", map(\"inc\", \"1\")), null)); // in-place update\n      versions.addFirst(deleteByQueryAndGetVersion(\"val_i_dvo:201\", null));\n\n      // DBI of updated document\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A5\", \"val_i_dvo\", \"300\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A5\", \"val_i_dvo\", map(\"inc\", \"1\")), null)); // in-place update\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A5\", \"val_i_dvo\", map(\"inc\", \"1\")), null)); // in-place update\n      versions.addFirst(deleteAndGetVersion(\"A5\", null));\n      \n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n      \n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after a restart\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // make sure we can still access versions during recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"val_i_dvo:202\") ,\"/response/numFound==1\"); // assert that in-place update is retained\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==2\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A3\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A4\") ,\"/response/numFound==1\");\n      assertJQ(req(\"q\",\"id:A5\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A10\"));\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A3\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A4\") ,\"/response/numFound==1\");\n      assertJQ(req(\"q\",\"id:A5\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A10\"),\"/response/numFound==1\");\n      \n      // no updates, so insure that recovery does not run\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n      assertJQ(req(\"q\",\"val_i_dvo:202\") ,\"/response/numFound==1\"); // assert that in-place update is retained\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A3\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A4\") ,\"/response/numFound==1\");\n      assertJQ(req(\"q\",\"id:A5\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A10\"),\"/response/numFound==1\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); // no updates, so insure that recovery didn't run\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testLogReplayWithInPlaceUpdatesAndDeletes().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testLogReplayWithInPlaceUpdatesAndDeletes() throws Exception {\n\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      \n      // DBQ of updated document using id\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A2\", \"val_i_dvo\", \"1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A2\", \"val_i_dvo\", map(\"set\", 2)), null)); // in-place update\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A2\", null));\n\n      // DBQ of updated document using updated value\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A3\", \"val_i_dvo\", \"101\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A3\", \"val_i_dvo\", map(\"set\", 102)), null)); // in-place update\n      versions.addFirst(deleteByQueryAndGetVersion(\"val_i_dvo:102\", null));\n\n      // DBQ using an intermediate update value (shouldn't delete anything)\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A4\", \"val_i_dvo\", \"200\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A4\", \"val_i_dvo\", map(\"inc\", \"1\")), null)); // in-place update\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A4\", \"val_i_dvo\", map(\"inc\", \"1\")), null)); // in-place update\n      versions.addFirst(deleteByQueryAndGetVersion(\"val_i_dvo:201\", null));\n\n      // DBI of updated document\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A5\", \"val_i_dvo\", \"300\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A5\", \"val_i_dvo\", map(\"inc\", \"1\")), null)); // in-place update\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A5\", \"val_i_dvo\", map(\"inc\", \"1\")), null)); // in-place update\n      versions.addFirst(deleteAndGetVersion(\"A5\", null));\n      \n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n      \n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after a restart\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // make sure we can still access versions during recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"val_i_dvo:202\") ,\"/response/numFound==1\"); // assert that in-place update is retained\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==2\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A3\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A4\") ,\"/response/numFound==1\");\n      assertJQ(req(\"q\",\"id:A5\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A10\"));\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A3\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A4\") ,\"/response/numFound==1\");\n      assertJQ(req(\"q\",\"id:A5\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A10\"),\"/response/numFound==1\");\n      \n      // no updates, so insure that recovery does not run\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n      assertJQ(req(\"q\",\"val_i_dvo:202\") ,\"/response/numFound==1\"); // assert that in-place update is retained\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A3\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A4\") ,\"/response/numFound==1\");\n      assertJQ(req(\"q\",\"id:A5\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A10\"),\"/response/numFound==1\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); // no updates, so insure that recovery didn't run\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1","date":1579200426,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecovery#testLogReplayWithInPlaceUpdatesAndDeletes().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecovery#testLogReplayWithInPlaceUpdatesAndDeletes().mjava","sourceNew":"  @Test\n  public void testLogReplayWithInPlaceUpdatesAndDeletes() throws Exception {\n\n    try {\n\n      TestInjection.skipIndexWriterCommitOnClose = true;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      \n      // DBQ of updated document using id\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A2\", \"val_i_dvo\", \"1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A2\", \"val_i_dvo\", map(\"set\", 2)), null)); // in-place update\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A2\", null));\n\n      // DBQ of updated document using updated value\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A3\", \"val_i_dvo\", \"101\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A3\", \"val_i_dvo\", map(\"set\", 102)), null)); // in-place update\n      versions.addFirst(deleteByQueryAndGetVersion(\"val_i_dvo:102\", null));\n\n      // DBQ using an intermediate update value (shouldn't delete anything)\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A4\", \"val_i_dvo\", \"200\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A4\", \"val_i_dvo\", map(\"inc\", \"1\")), null)); // in-place update\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A4\", \"val_i_dvo\", map(\"inc\", \"1\")), null)); // in-place update\n      versions.addFirst(deleteByQueryAndGetVersion(\"val_i_dvo:201\", null));\n\n      // DBI of updated document\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A5\", \"val_i_dvo\", \"300\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A5\", \"val_i_dvo\", map(\"inc\", \"1\")), null)); // in-place update\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A5\", \"val_i_dvo\", map(\"inc\", \"1\")), null)); // in-place update\n      versions.addFirst(deleteAndGetVersion(\"A5\", null));\n      \n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n      \n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after a restart\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // make sure we can still access versions during recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"val_i_dvo:202\") ,\"/response/numFound==1\"); // assert that in-place update is retained\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==2\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A3\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A4\") ,\"/response/numFound==1\");\n      assertJQ(req(\"q\",\"id:A5\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A10\"));\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A3\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A4\") ,\"/response/numFound==1\");\n      assertJQ(req(\"q\",\"id:A5\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A10\"),\"/response/numFound==1\");\n      \n      // no updates, so insure that recovery does not run\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n      assertJQ(req(\"q\",\"val_i_dvo:202\") ,\"/response/numFound==1\"); // assert that in-place update is retained\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A3\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A4\") ,\"/response/numFound==1\");\n      assertJQ(req(\"q\",\"id:A5\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A10\"),\"/response/numFound==1\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); // no updates, so insure that recovery didn't run\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testLogReplayWithInPlaceUpdatesAndDeletes() throws Exception {\n\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      \n      // DBQ of updated document using id\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A2\", \"val_i_dvo\", \"1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A2\", \"val_i_dvo\", map(\"set\", 2)), null)); // in-place update\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A2\", null));\n\n      // DBQ of updated document using updated value\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A3\", \"val_i_dvo\", \"101\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A3\", \"val_i_dvo\", map(\"set\", 102)), null)); // in-place update\n      versions.addFirst(deleteByQueryAndGetVersion(\"val_i_dvo:102\", null));\n\n      // DBQ using an intermediate update value (shouldn't delete anything)\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A4\", \"val_i_dvo\", \"200\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A4\", \"val_i_dvo\", map(\"inc\", \"1\")), null)); // in-place update\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A4\", \"val_i_dvo\", map(\"inc\", \"1\")), null)); // in-place update\n      versions.addFirst(deleteByQueryAndGetVersion(\"val_i_dvo:201\", null));\n\n      // DBI of updated document\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A5\", \"val_i_dvo\", \"300\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A5\", \"val_i_dvo\", map(\"inc\", \"1\")), null)); // in-place update\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A5\", \"val_i_dvo\", map(\"inc\", \"1\")), null)); // in-place update\n      versions.addFirst(deleteAndGetVersion(\"A5\", null));\n      \n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n      \n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // verify that previous close didn't do a commit\n      // recovery should be blocked by our hook\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after a restart\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // unblock recovery\n      logReplay.release(1000);\n\n      // make sure we can still access versions during recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"val_i_dvo:202\") ,\"/response/numFound==1\"); // assert that in-place update is retained\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==2\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A3\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A4\") ,\"/response/numFound==1\");\n      assertJQ(req(\"q\",\"id:A5\") ,\"/response/numFound==0\");\n\n      // make sure we can still access versions after recovery\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A10\"));\n\n      h.close();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      // wait until recovery has finished\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A3\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A4\") ,\"/response/numFound==1\");\n      assertJQ(req(\"q\",\"id:A5\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A10\"),\"/response/numFound==1\");\n      \n      // no updates, so insure that recovery does not run\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      // Solr should kick this off now\n      // h.getCore().getUpdateHandler().getUpdateLog().recoverFromLog();\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n      assertJQ(req(\"q\",\"val_i_dvo:202\") ,\"/response/numFound==1\"); // assert that in-place update is retained\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A3\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A4\") ,\"/response/numFound==1\");\n      assertJQ(req(\"q\",\"id:A5\") ,\"/response/numFound==0\");\n      assertJQ(req(\"q\",\"id:A10\"),\"/response/numFound==1\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); // no updates, so insure that recovery didn't run\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"598b5d23aa7c9732bf473c21a9cd309c44599394":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","415bbbe7da8065dd3c477bdc3c703c6425622998"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1":["415bbbe7da8065dd3c477bdc3c703c6425622998"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1"]},"commit2Childs":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["598b5d23aa7c9732bf473c21a9cd309c44599394","b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1"],"598b5d23aa7c9732bf473c21a9cd309c44599394":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["415bbbe7da8065dd3c477bdc3c703c6425622998","598b5d23aa7c9732bf473c21a9cd309c44599394"],"b6a0ad05ae2af8aa028b1a6099a8222fad0bc8c1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["598b5d23aa7c9732bf473c21a9cd309c44599394","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}