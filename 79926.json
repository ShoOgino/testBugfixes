{"path":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testWildcard().mjava","commits":[{"id":"97ee2282ff806e9bc9d705f389cf40451ab81c3e","date":1561721333,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testWildcard().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestIntervals#testWildcard().mjava","sourceNew":"  public void testWildcard() throws IOException {\n    IntervalsSource source = Intervals.wildcard(\"?ot\");\n    checkIntervals(source, \"field1\", 4, new int[][]{\n        {},\n        { 2, 2, 10, 10, 17, 17, 27, 27 },\n        { 5, 5, 10, 10, 21, 21 },\n        { 3, 3 },\n        { 2, 2, 10, 10, 17, 17 },\n        {}\n    });\n    MatchesIterator mi = getMatches(source, 4, \"field1\");\n    assertNotNull(mi);\n    assertMatch(mi, 2, 2, 15, 18);\n    assertMatch(mi, 10, 10, 63, 66);\n    assertMatch(mi, 17, 17, 97, 100);\n\n    IllegalStateException e = expectThrows(IllegalStateException.class, () -> {\n      IntervalsSource s = Intervals.wildcard(\"?ot\", 1);\n      for (LeafReaderContext ctx : searcher.getIndexReader().leaves()) {\n        s.intervals(\"field1\", ctx);\n      }\n    });\n    assertEquals(\"Automaton [?ot] expanded to too many terms (limit 1)\", e.getMessage());\n  }\n\n","sourceOld":"  public void testWildcard() throws IOException {\n    IntervalsSource source = Intervals.wildcard(\"?ot\");\n    checkIntervals(source, \"field1\", 4, new int[][]{\n        {},\n        { 2, 2, 10, 10, 17, 17, 27, 27 },\n        { 5, 5, 10, 10, 21, 21 },\n        { 3, 3 },\n        { 2, 2, 10, 10, 17, 17 },\n        {}\n    });\n    MatchesIterator mi = getMatches(source, 4, \"field1\");\n    assertNotNull(mi);\n    assertMatch(mi, 2, 2, 15, 18);\n    assertMatch(mi, 10, 10, 63, 66);\n    assertMatch(mi, 17, 17, 97, 100);\n\n    IllegalStateException e = expectThrows(IllegalStateException.class, () -> {\n      IntervalsSource s = Intervals.wildcard(\"?ot\", 1);\n      for (LeafReaderContext ctx : searcher.getIndexReader().leaves()) {\n        s.intervals(\"field1\", ctx);\n      }\n    });\n    assertEquals(\"Automaton [?ot] expanded to too many terms (limit 1)\", e.getMessage());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4dbf8f05456e82753f622c3ca7e5f0b9502aac0","date":1561967576,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testWildcard().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testWildcard().mjava","sourceNew":"  public void testWildcard() throws IOException {\n    IntervalsSource source = Intervals.wildcard(new BytesRef(\"?ot\"));\n    checkIntervals(source, \"field1\", 4, new int[][]{\n        {},\n        { 2, 2, 10, 10, 17, 17, 27, 27 },\n        { 5, 5, 10, 10, 21, 21 },\n        { 3, 3 },\n        { 2, 2, 10, 10, 17, 17 },\n        {}\n    });\n    MatchesIterator mi = getMatches(source, 4, \"field1\");\n    assertNotNull(mi);\n    assertMatch(mi, 2, 2, 15, 18);\n    assertMatch(mi, 10, 10, 63, 66);\n    assertMatch(mi, 17, 17, 97, 100);\n\n    IllegalStateException e = expectThrows(IllegalStateException.class, () -> {\n      IntervalsSource s = Intervals.wildcard(new BytesRef(\"?ot\"), 1);\n      for (LeafReaderContext ctx : searcher.getIndexReader().leaves()) {\n        s.intervals(\"field1\", ctx);\n      }\n    });\n    assertEquals(\"Automaton [?ot] expanded to too many terms (limit 1)\", e.getMessage());\n  }\n\n","sourceOld":"  public void testWildcard() throws IOException {\n    IntervalsSource source = Intervals.wildcard(\"?ot\");\n    checkIntervals(source, \"field1\", 4, new int[][]{\n        {},\n        { 2, 2, 10, 10, 17, 17, 27, 27 },\n        { 5, 5, 10, 10, 21, 21 },\n        { 3, 3 },\n        { 2, 2, 10, 10, 17, 17 },\n        {}\n    });\n    MatchesIterator mi = getMatches(source, 4, \"field1\");\n    assertNotNull(mi);\n    assertMatch(mi, 2, 2, 15, 18);\n    assertMatch(mi, 10, 10, 63, 66);\n    assertMatch(mi, 17, 17, 97, 100);\n\n    IllegalStateException e = expectThrows(IllegalStateException.class, () -> {\n      IntervalsSource s = Intervals.wildcard(\"?ot\", 1);\n      for (LeafReaderContext ctx : searcher.getIndexReader().leaves()) {\n        s.intervals(\"field1\", ctx);\n      }\n    });\n    assertEquals(\"Automaton [?ot] expanded to too many terms (limit 1)\", e.getMessage());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed67e557f509069144486ee34fd0275a6dcbe991","date":1574418540,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testWildcard().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testWildcard().mjava","sourceNew":"  public void testWildcard() throws IOException {\n    IntervalsSource source = Intervals.wildcard(new BytesRef(\"?ot\"));\n    checkIntervals(source, \"field1\", 4, new int[][]{\n        {},\n        { 2, 2, 10, 10, 17, 17, 27, 27 },\n        { 5, 5, 10, 10, 21, 21 },\n        { 3, 3 },\n        { 2, 2, 10, 10, 17, 17 },\n        {}\n    });\n    MatchesIterator mi = getMatches(source, 4, \"field1\");\n    assertNotNull(mi);\n    assertMatch(mi, 2, 2, 15, 18);\n    assertMatch(mi, 10, 10, 63, 66);\n    assertMatch(mi, 17, 17, 97, 100);\n\n    IllegalStateException e = expectThrows(IllegalStateException.class, () -> {\n      IntervalsSource s = Intervals.wildcard(new BytesRef(\"?ot\"), 1);\n      for (LeafReaderContext ctx : searcher.getIndexReader().leaves()) {\n        s.intervals(\"field1\", ctx);\n      }\n    });\n    assertEquals(\"Automaton [?ot] expanded to too many terms (limit 1)\", e.getMessage());\n\n    checkVisits(Intervals.wildcard(new BytesRef(\"p??\")), 1);\n  }\n\n","sourceOld":"  public void testWildcard() throws IOException {\n    IntervalsSource source = Intervals.wildcard(new BytesRef(\"?ot\"));\n    checkIntervals(source, \"field1\", 4, new int[][]{\n        {},\n        { 2, 2, 10, 10, 17, 17, 27, 27 },\n        { 5, 5, 10, 10, 21, 21 },\n        { 3, 3 },\n        { 2, 2, 10, 10, 17, 17 },\n        {}\n    });\n    MatchesIterator mi = getMatches(source, 4, \"field1\");\n    assertNotNull(mi);\n    assertMatch(mi, 2, 2, 15, 18);\n    assertMatch(mi, 10, 10, 63, 66);\n    assertMatch(mi, 17, 17, 97, 100);\n\n    IllegalStateException e = expectThrows(IllegalStateException.class, () -> {\n      IntervalsSource s = Intervals.wildcard(new BytesRef(\"?ot\"), 1);\n      for (LeafReaderContext ctx : searcher.getIndexReader().leaves()) {\n        s.intervals(\"field1\", ctx);\n      }\n    });\n    assertEquals(\"Automaton [?ot] expanded to too many terms (limit 1)\", e.getMessage());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4dbf8f05456e82753f622c3ca7e5f0b9502aac0":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ed67e557f509069144486ee34fd0275a6dcbe991":["f4dbf8f05456e82753f622c3ca7e5f0b9502aac0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ed67e557f509069144486ee34fd0275a6dcbe991"]},"commit2Childs":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["f4dbf8f05456e82753f622c3ca7e5f0b9502aac0"],"f4dbf8f05456e82753f622c3ca7e5f0b9502aac0":["ed67e557f509069144486ee34fd0275a6dcbe991"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"ed67e557f509069144486ee34fd0275a6dcbe991":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}