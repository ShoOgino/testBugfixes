{"path":"lucene/src/test-framework/java/org/apache/lucene/codecs/lucene3x/PreFlexRWNormsConsumer.Lucene3xNormsDocValuesConsumer#add(int,long).mjava","commits":[{"id":"e92a321a2612261e1010a4038c8586e30b081552","date":1328456689,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/codecs/lucene3x/PreFlexRWNormsConsumer.Lucene3xNormsDocValuesConsumer#add(int,long).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWNormsConsumer.Lucene3xNormsDocValuesConsumer#add(int,long).mjava","sourceNew":"    protected void add(int docID, long value) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1 + upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1 + upto);\n      }\n      norms[upto] = (byte) value;\n      \n      docIDs[upto] = docID;\n      upto++;\n    }\n\n","sourceOld":"    protected void add(int docID, long value) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1 + upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1 + upto);\n      }\n      norms[upto] = (byte) value;\n      \n      docIDs[upto] = docID;\n      upto++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreFlexRWNormsConsumer.Lucene3xNormsDocValuesConsumer#add(int,long).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/codecs/lucene3x/PreFlexRWNormsConsumer.Lucene3xNormsDocValuesConsumer#add(int,long).mjava","sourceNew":"    protected void add(int docID, long value) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1 + upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1 + upto);\n      }\n      norms[upto] = (byte) value;\n      \n      docIDs[upto] = docID;\n      upto++;\n    }\n\n","sourceOld":"    protected void add(int docID, long value) {\n      if (docIDs.length <= upto) {\n        assert docIDs.length == upto;\n        docIDs = ArrayUtil.grow(docIDs, 1 + upto);\n      }\n      if (norms.length <= upto) {\n        assert norms.length == upto;\n        norms = ArrayUtil.grow(norms, 1 + upto);\n      }\n      norms[upto] = (byte) value;\n      \n      docIDs[upto] = docID;\n      upto++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e92a321a2612261e1010a4038c8586e30b081552"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e92a321a2612261e1010a4038c8586e30b081552":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e92a321a2612261e1010a4038c8586e30b081552"],"e92a321a2612261e1010a4038c8586e30b081552":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}