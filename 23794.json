{"path":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#modifyRequestForRangeFacets(ShardRequest,FacetInfo).mjava","commits":[{"id":"8ff4734b6c86245e852fe8b6a286716d5e59d415","date":1410194063,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#modifyRequestForRangeFacets(ShardRequest,FacetInfo).mjava","pathOld":"/dev/null","sourceNew":"  // we must get all the range buckets back in order to have coherent lists at the end, see SOLR-6154\n  private void modifyRequestForRangeFacets(ShardRequest sreq, FacetInfo fi) {\n    // Collect all the range fields.\n    if (sreq.params.getParams(FacetParams.FACET_RANGE) == null) {\n      return;\n    }\n    List<String> rangeFields = new ArrayList<>();\n    for (String field : sreq.params.getParams(FacetParams.FACET_RANGE)) {\n      rangeFields.add(field);\n    }\n\n    for (String field : rangeFields) {\n      sreq.params.remove(\"f.\" + field + \".facet.mincount\");\n      sreq.params.add(\"f.\" + field + \".facet.mincount\", \"0\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59d82b0be40ecfcc2c94c776b324e0903a62b844","date":1423535462,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#modifyRequestForRangeFacets(ShardRequest,FacetInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#modifyRequestForRangeFacets(ShardRequest,FacetInfo).mjava","sourceNew":"  // we must get all the range buckets back in order to have coherent lists at the end, see SOLR-6154\n  private void modifyRequestForRangeFacets(ShardRequest sreq, FacetInfo fi) {\n    // Collect all the range fields.\n    final String[] fields = sreq.params.getParams(FacetParams.FACET_RANGE);\n    if (fields != null) {\n      for (String field : fields) {\n        sreq.params.set(\"f.\" + field + \".facet.mincount\", \"0\");\n      }\n    }\n  }\n\n","sourceOld":"  // we must get all the range buckets back in order to have coherent lists at the end, see SOLR-6154\n  private void modifyRequestForRangeFacets(ShardRequest sreq, FacetInfo fi) {\n    // Collect all the range fields.\n    if (sreq.params.getParams(FacetParams.FACET_RANGE) == null) {\n      return;\n    }\n    List<String> rangeFields = new ArrayList<>();\n    for (String field : sreq.params.getParams(FacetParams.FACET_RANGE)) {\n      rangeFields.add(field);\n    }\n\n    for (String field : rangeFields) {\n      sreq.params.remove(\"f.\" + field + \".facet.mincount\");\n      sreq.params.add(\"f.\" + field + \".facet.mincount\", \"0\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa16b8f2a7bb28ece5a9fdc471357e89de17bc57","date":1423733077,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#modifyRequestForRangeFacets(ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#modifyRequestForRangeFacets(ShardRequest,FacetInfo).mjava","sourceNew":"  // we must get all the range buckets back in order to have coherent lists at the end, see SOLR-6154\n  private void modifyRequestForRangeFacets(ShardRequest sreq) {\n    // Collect all the range fields.\n    final String[] fields = sreq.params.getParams(FacetParams.FACET_RANGE);\n    if (fields != null) {\n      for (String field : fields) {\n        sreq.params.set(\"f.\" + field + \".facet.mincount\", \"0\");\n      }\n    }\n  }\n\n","sourceOld":"  // we must get all the range buckets back in order to have coherent lists at the end, see SOLR-6154\n  private void modifyRequestForRangeFacets(ShardRequest sreq, FacetInfo fi) {\n    // Collect all the range fields.\n    final String[] fields = sreq.params.getParams(FacetParams.FACET_RANGE);\n    if (fields != null) {\n      for (String field : fields) {\n        sreq.params.set(\"f.\" + field + \".facet.mincount\", \"0\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"59d82b0be40ecfcc2c94c776b324e0903a62b844":["8ff4734b6c86245e852fe8b6a286716d5e59d415"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8ff4734b6c86245e852fe8b6a286716d5e59d415":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fa16b8f2a7bb28ece5a9fdc471357e89de17bc57":["59d82b0be40ecfcc2c94c776b324e0903a62b844"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa16b8f2a7bb28ece5a9fdc471357e89de17bc57"]},"commit2Childs":{"59d82b0be40ecfcc2c94c776b324e0903a62b844":["fa16b8f2a7bb28ece5a9fdc471357e89de17bc57"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ff4734b6c86245e852fe8b6a286716d5e59d415"],"8ff4734b6c86245e852fe8b6a286716d5e59d415":["59d82b0be40ecfcc2c94c776b324e0903a62b844"],"fa16b8f2a7bb28ece5a9fdc471357e89de17bc57":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}