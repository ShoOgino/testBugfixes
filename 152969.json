{"path":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase#testSamePointManyTimes().mjava","commits":[{"id":"3c1d0e98e69e3b34294528b2f9ce96fe46b3e77a","date":1445465230,"type":0,"author":"Nick Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase#testSamePointManyTimes().mjava","pathOld":"/dev/null","sourceNew":"  // A particularly tricky adversary for BKD tree:\n  @Nightly\n  public void testSamePointManyTimes() throws Exception {\n    int numPoints = atLeast(1000);\n    // TODO: GeoUtils are potentially slow if we use small=false with heavy testing\n    boolean small = random().nextBoolean();\n\n    // Every doc has 2 points:\n    double theLat = randomLat(small);\n    double theLon = randomLon(small);\n\n    double[] lats = new double[numPoints];\n    Arrays.fill(lats, theLat);\n\n    double[] lons = new double[numPoints];\n    Arrays.fill(lons, theLon);\n\n    verify(small, lats, lons);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase#testSamePointManyTimes().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase#testSamePointManyTimes().mjava","sourceNew":"  // A particularly tricky adversary for BKD tree:\n  public void testSamePointManyTimes() throws Exception {\n\n    // For GeoPointQuery, only run this test nightly:\n    assumeTrue(\"GeoPoint*Query is too slow otherwise\", TEST_NIGHTLY || forceSmall() == false);\n\n    int numPoints = atLeast(1000);\n    boolean small = random().nextBoolean();\n\n    // Every doc has 2 points:\n    double theLat = randomLat(small);\n    double theLon = randomLon(small);\n\n    double[] lats = new double[numPoints];\n    Arrays.fill(lats, theLat);\n\n    double[] lons = new double[numPoints];\n    Arrays.fill(lons, theLon);\n\n    verify(small, lats, lons);\n  }\n\n","sourceOld":"  // A particularly tricky adversary for BKD tree:\n  @Nightly\n  public void testSamePointManyTimes() throws Exception {\n    int numPoints = atLeast(1000);\n    // TODO: GeoUtils are potentially slow if we use small=false with heavy testing\n    boolean small = random().nextBoolean();\n\n    // Every doc has 2 points:\n    double theLat = randomLat(small);\n    double theLon = randomLon(small);\n\n    double[] lats = new double[numPoints];\n    Arrays.fill(lats, theLat);\n\n    double[] lons = new double[numPoints];\n    Arrays.fill(lons, theLon);\n\n    verify(small, lats, lons);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#testSamePointManyTimes().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase#testSamePointManyTimes().mjava","sourceNew":"  // A particularly tricky adversary for BKD tree:\n  public void testSamePointManyTimes() throws Exception {\n\n    // For GeoPointQuery, only run this test nightly:\n    assumeTrue(\"GeoPoint*Query is too slow otherwise\", TEST_NIGHTLY || forceSmall() == false);\n\n    int numPoints = atLeast(1000);\n    boolean small = random().nextBoolean();\n\n    // Every doc has 2 points:\n    double theLat = randomLat(small);\n    double theLon = randomLon(small);\n\n    double[] lats = new double[numPoints];\n    Arrays.fill(lats, theLat);\n\n    double[] lons = new double[numPoints];\n    Arrays.fill(lons, theLon);\n\n    verify(small, lats, lons);\n  }\n\n","sourceOld":"  // A particularly tricky adversary for BKD tree:\n  public void testSamePointManyTimes() throws Exception {\n\n    // For GeoPointQuery, only run this test nightly:\n    assumeTrue(\"GeoPoint*Query is too slow otherwise\", TEST_NIGHTLY || forceSmall() == false);\n\n    int numPoints = atLeast(1000);\n    boolean small = random().nextBoolean();\n\n    // Every doc has 2 points:\n    double theLat = randomLat(small);\n    double theLon = randomLon(small);\n\n    double[] lats = new double[numPoints];\n    Arrays.fill(lats, theLat);\n\n    double[] lons = new double[numPoints];\n    Arrays.fill(lons, theLon);\n\n    verify(small, lats, lons);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#testSamePointManyTimes().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/util/BaseGeoPointTestCase#testSamePointManyTimes().mjava","sourceNew":"  // A particularly tricky adversary for BKD tree:\n  public void testSamePointManyTimes() throws Exception {\n\n    // For GeoPointQuery, only run this test nightly:\n    assumeTrue(\"GeoPoint*Query is too slow otherwise\", TEST_NIGHTLY || forceSmall() == false);\n\n    int numPoints = atLeast(1000);\n    boolean small = random().nextBoolean();\n\n    // Every doc has 2 points:\n    double theLat = randomLat(small);\n    double theLon = randomLon(small);\n\n    double[] lats = new double[numPoints];\n    Arrays.fill(lats, theLat);\n\n    double[] lons = new double[numPoints];\n    Arrays.fill(lons, theLon);\n\n    verify(small, lats, lons);\n  }\n\n","sourceOld":"  // A particularly tricky adversary for BKD tree:\n  public void testSamePointManyTimes() throws Exception {\n\n    // For GeoPointQuery, only run this test nightly:\n    assumeTrue(\"GeoPoint*Query is too slow otherwise\", TEST_NIGHTLY || forceSmall() == false);\n\n    int numPoints = atLeast(1000);\n    boolean small = random().nextBoolean();\n\n    // Every doc has 2 points:\n    double theLat = randomLat(small);\n    double theLon = randomLon(small);\n\n    double[] lats = new double[numPoints];\n    Arrays.fill(lats, theLat);\n\n    double[] lons = new double[numPoints];\n    Arrays.fill(lons, theLon);\n\n    verify(small, lats, lons);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3c1d0e98e69e3b34294528b2f9ce96fe46b3e77a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["1904709ea0185dc04e3d77ea01c79e909caf2796","937923083e4d137932336fc80f3d78758ff698a6"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["3c1d0e98e69e3b34294528b2f9ce96fe46b3e77a"],"937923083e4d137932336fc80f3d78758ff698a6":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["937923083e4d137932336fc80f3d78758ff698a6"]},"commit2Childs":{"3c1d0e98e69e3b34294528b2f9ce96fe46b3e77a":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3c1d0e98e69e3b34294528b2f9ce96fe46b3e77a"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"1904709ea0185dc04e3d77ea01c79e909caf2796":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","937923083e4d137932336fc80f3d78758ff698a6"],"937923083e4d137932336fc80f3d78758ff698a6":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}