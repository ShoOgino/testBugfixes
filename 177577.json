{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseTokenizer#next(Token).mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseTokenizer#next(Token).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/ChineseTokenizer#next(Token).mjava","sourceNew":"    public final Token next(final Token reusableToken) throws java.io.IOException {\n        assert reusableToken != null;\n\n        length = 0;\n        start = offset;\n\n\n        while (true) {\n\n            final char c;\n            offset++;\n\n            if (bufferIndex >= dataLen) {\n                dataLen = input.read(ioBuffer);\n                bufferIndex = 0;\n            }\n\n            if (dataLen == -1) return flush(reusableToken);\n            else\n                c = ioBuffer[bufferIndex++];\n\n\n            switch(Character.getType(c)) {\n\n            case Character.DECIMAL_DIGIT_NUMBER:\n            case Character.LOWERCASE_LETTER:\n            case Character.UPPERCASE_LETTER:\n                push(c);\n                if (length == MAX_WORD_LEN) return flush(reusableToken);\n                break;\n\n            case Character.OTHER_LETTER:\n                if (length>0) {\n                    bufferIndex--;\n                    offset--;\n                    return flush(reusableToken);\n                }\n                push(c);\n                return flush(reusableToken);\n\n            default:\n                if (length>0) return flush(reusableToken);\n                break;\n            }\n        }\n\n    }\n\n","sourceOld":"    public final Token next(final Token reusableToken) throws java.io.IOException {\n        assert reusableToken != null;\n\n        length = 0;\n        start = offset;\n\n\n        while (true) {\n\n            final char c;\n            offset++;\n\n            if (bufferIndex >= dataLen) {\n                dataLen = input.read(ioBuffer);\n                bufferIndex = 0;\n            }\n\n            if (dataLen == -1) return flush(reusableToken);\n            else\n                c = ioBuffer[bufferIndex++];\n\n\n            switch(Character.getType(c)) {\n\n            case Character.DECIMAL_DIGIT_NUMBER:\n            case Character.LOWERCASE_LETTER:\n            case Character.UPPERCASE_LETTER:\n                push(c);\n                if (length == MAX_WORD_LEN) return flush(reusableToken);\n                break;\n\n            case Character.OTHER_LETTER:\n                if (length>0) {\n                    bufferIndex--;\n                    offset--;\n                    return flush(reusableToken);\n                }\n                push(c);\n                return flush(reusableToken);\n\n            default:\n                if (length>0) return flush(reusableToken);\n                break;\n            }\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":5,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseTokenizer#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseTokenizer#next(Token).mjava","sourceNew":"    public boolean incrementToken() throws IOException {\n\n        length = 0;\n        start = offset;\n\n\n        while (true) {\n\n            final char c;\n            offset++;\n\n            if (bufferIndex >= dataLen) {\n                dataLen = input.read(ioBuffer);\n                bufferIndex = 0;\n            }\n\n            if (dataLen == -1) return flush();\n            else\n                c = ioBuffer[bufferIndex++];\n\n\n            switch(Character.getType(c)) {\n\n            case Character.DECIMAL_DIGIT_NUMBER:\n            case Character.LOWERCASE_LETTER:\n            case Character.UPPERCASE_LETTER:\n                push(c);\n                if (length == MAX_WORD_LEN) return flush();\n                break;\n\n            case Character.OTHER_LETTER:\n                if (length>0) {\n                    bufferIndex--;\n                    offset--;\n                    return flush();\n                }\n                push(c);\n                return flush();\n\n            default:\n                if (length>0) return flush();\n                break;\n            }\n        }\n\n    }\n\n","sourceOld":"    public final Token next(final Token reusableToken) throws java.io.IOException {\n        assert reusableToken != null;\n\n        length = 0;\n        start = offset;\n\n\n        while (true) {\n\n            final char c;\n            offset++;\n\n            if (bufferIndex >= dataLen) {\n                dataLen = input.read(ioBuffer);\n                bufferIndex = 0;\n            }\n\n            if (dataLen == -1) return flush(reusableToken);\n            else\n                c = ioBuffer[bufferIndex++];\n\n\n            switch(Character.getType(c)) {\n\n            case Character.DECIMAL_DIGIT_NUMBER:\n            case Character.LOWERCASE_LETTER:\n            case Character.UPPERCASE_LETTER:\n                push(c);\n                if (length == MAX_WORD_LEN) return flush(reusableToken);\n                break;\n\n            case Character.OTHER_LETTER:\n                if (length>0) {\n                    bufferIndex--;\n                    offset--;\n                    return flush(reusableToken);\n                }\n                push(c);\n                return flush(reusableToken);\n\n            default:\n                if (length>0) return flush(reusableToken);\n                break;\n            }\n        }\n\n    }\n\n","bugFix":null,"bugIntro":["e64a71406348a5942a2166256238aff8313d0914"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b5756469957918cac40a831acec9cf01c8c2bb3":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9b5756469957918cac40a831acec9cf01c8c2bb3"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}