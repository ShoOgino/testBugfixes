{"path":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#process(ResponseBuilder).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#process(ResponseBuilder).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/ClusteringComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n    String name = getClusteringEngineName(rb);\n    boolean useResults = params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false);\n    if (useResults == true) {\n      SearchClusteringEngine engine = getSearchClusteringEngine(rb);\n      if (engine != null) {\n        DocListAndSet results = rb.getResults();\n        Map<SolrDocument,Integer> docIds = new HashMap<SolrDocument, Integer>(results.docList.size());\n        SolrDocumentList solrDocList = engine.getSolrDocumentList(results.docList, rb.req, docIds);\n        Object clusters = engine.cluster(rb.getQuery(), solrDocList, docIds, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        log.warn(\"No engine for: \" + name);\n      }\n    }\n    boolean useCollection = params.getBool(ClusteringParams.USE_COLLECTION, false);\n    if (useCollection == true) {\n      DocumentClusteringEngine engine = documentClusteringEngines.get(name);\n      if (engine != null) {\n        boolean useDocSet = params.getBool(ClusteringParams.USE_DOC_SET, false);\n        NamedList nl = null;\n\n        //TODO: This likely needs to be made into a background task that runs in an executor\n        if (useDocSet == true) {\n          nl = engine.cluster(rb.getResults().docSet, params);\n        } else {\n          nl = engine.cluster(params);\n        }\n        rb.rsp.add(\"clusters\", nl);\n      } else {\n        log.warn(\"No engine for \" + name);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n    String name = getClusteringEngineName(rb);\n    boolean useResults = params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false);\n    if (useResults == true) {\n      SearchClusteringEngine engine = getSearchClusteringEngine(rb);\n      if (engine != null) {\n        DocListAndSet results = rb.getResults();\n        Map<SolrDocument,Integer> docIds = new HashMap<SolrDocument, Integer>(results.docList.size());\n        SolrDocumentList solrDocList = engine.getSolrDocumentList(results.docList, rb.req, docIds);\n        Object clusters = engine.cluster(rb.getQuery(), solrDocList, docIds, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        log.warn(\"No engine for: \" + name);\n      }\n    }\n    boolean useCollection = params.getBool(ClusteringParams.USE_COLLECTION, false);\n    if (useCollection == true) {\n      DocumentClusteringEngine engine = documentClusteringEngines.get(name);\n      if (engine != null) {\n        boolean useDocSet = params.getBool(ClusteringParams.USE_DOC_SET, false);\n        NamedList nl = null;\n\n        //TODO: This likely needs to be made into a background task that runs in an executor\n        if (useDocSet == true) {\n          nl = engine.cluster(rb.getResults().docSet, params);\n        } else {\n          nl = engine.cluster(params);\n        }\n        rb.rsp.add(\"clusters\", nl);\n      } else {\n        log.warn(\"No engine for \" + name);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#process(ResponseBuilder).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/ClusteringComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n    String name = getClusteringEngineName(rb);\n    boolean useResults = params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false);\n    if (useResults == true) {\n      SearchClusteringEngine engine = getSearchClusteringEngine(rb);\n      if (engine != null) {\n        DocListAndSet results = rb.getResults();\n        Map<SolrDocument,Integer> docIds = new HashMap<SolrDocument, Integer>(results.docList.size());\n        SolrDocumentList solrDocList = engine.getSolrDocumentList(results.docList, rb.req, docIds);\n        Object clusters = engine.cluster(rb.getQuery(), solrDocList, docIds, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        log.warn(\"No engine for: \" + name);\n      }\n    }\n    boolean useCollection = params.getBool(ClusteringParams.USE_COLLECTION, false);\n    if (useCollection == true) {\n      DocumentClusteringEngine engine = documentClusteringEngines.get(name);\n      if (engine != null) {\n        boolean useDocSet = params.getBool(ClusteringParams.USE_DOC_SET, false);\n        NamedList nl = null;\n\n        //TODO: This likely needs to be made into a background task that runs in an executor\n        if (useDocSet == true) {\n          nl = engine.cluster(rb.getResults().docSet, params);\n        } else {\n          nl = engine.cluster(params);\n        }\n        rb.rsp.add(\"clusters\", nl);\n      } else {\n        log.warn(\"No engine for \" + name);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n    String name = getClusteringEngineName(rb);\n    boolean useResults = params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false);\n    if (useResults == true) {\n      SearchClusteringEngine engine = getSearchClusteringEngine(rb);\n      if (engine != null) {\n        DocListAndSet results = rb.getResults();\n        Map<SolrDocument,Integer> docIds = new HashMap<SolrDocument, Integer>(results.docList.size());\n        SolrDocumentList solrDocList = engine.getSolrDocumentList(results.docList, rb.req, docIds);\n        Object clusters = engine.cluster(rb.getQuery(), solrDocList, docIds, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        log.warn(\"No engine for: \" + name);\n      }\n    }\n    boolean useCollection = params.getBool(ClusteringParams.USE_COLLECTION, false);\n    if (useCollection == true) {\n      DocumentClusteringEngine engine = documentClusteringEngines.get(name);\n      if (engine != null) {\n        boolean useDocSet = params.getBool(ClusteringParams.USE_DOC_SET, false);\n        NamedList nl = null;\n\n        //TODO: This likely needs to be made into a background task that runs in an executor\n        if (useDocSet == true) {\n          nl = engine.cluster(rb.getResults().docSet, params);\n        } else {\n          nl = engine.cluster(params);\n        }\n        rb.rsp.add(\"clusters\", nl);\n      } else {\n        log.warn(\"No engine for \" + name);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"788184b02a01588fb0bca602e39018a580397a99","date":1378925127,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#process(ResponseBuilder).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n    String name = getClusteringEngineName(rb);\n    boolean useResults = params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false);\n    if (useResults == true) {\n      SearchClusteringEngine engine = getSearchClusteringEngine(rb);\n      if (engine != null) {\n        DocListAndSet results = rb.getResults();\n        Map<SolrDocument,Integer> docIds = new HashMap<SolrDocument, Integer>(results.docList.size());\n        SolrDocumentList solrDocList = engine.getSolrDocumentList(results.docList, rb.req, docIds);\n        Object clusters = engine.cluster(rb.getQuery(), solrDocList, docIds, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        log.warn(\"No engine for: \" + name);\n      }\n    }\n    boolean useCollection = params.getBool(ClusteringParams.USE_COLLECTION, false);\n    if (useCollection == true) {\n      DocumentClusteringEngine engine = documentClusteringEngines.get(name);\n      if (engine != null) {\n        boolean useDocSet = params.getBool(ClusteringParams.USE_DOC_SET, false);\n        NamedList<?> nl = null;\n\n        // TODO: This likely needs to be made into a background task that runs in an executor\n        if (useDocSet == true) {\n          nl = engine.cluster(rb.getResults().docSet, params);\n        } else {\n          nl = engine.cluster(params);\n        }\n        rb.rsp.add(\"clusters\", nl);\n      } else {\n        log.warn(\"No engine for \" + name);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n    String name = getClusteringEngineName(rb);\n    boolean useResults = params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false);\n    if (useResults == true) {\n      SearchClusteringEngine engine = getSearchClusteringEngine(rb);\n      if (engine != null) {\n        DocListAndSet results = rb.getResults();\n        Map<SolrDocument,Integer> docIds = new HashMap<SolrDocument, Integer>(results.docList.size());\n        SolrDocumentList solrDocList = engine.getSolrDocumentList(results.docList, rb.req, docIds);\n        Object clusters = engine.cluster(rb.getQuery(), solrDocList, docIds, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        log.warn(\"No engine for: \" + name);\n      }\n    }\n    boolean useCollection = params.getBool(ClusteringParams.USE_COLLECTION, false);\n    if (useCollection == true) {\n      DocumentClusteringEngine engine = documentClusteringEngines.get(name);\n      if (engine != null) {\n        boolean useDocSet = params.getBool(ClusteringParams.USE_DOC_SET, false);\n        NamedList nl = null;\n\n        //TODO: This likely needs to be made into a background task that runs in an executor\n        if (useDocSet == true) {\n          nl = engine.cluster(rb.getResults().docSet, params);\n        } else {\n          nl = engine.cluster(params);\n        }\n        rb.rsp.add(\"clusters\", nl);\n      } else {\n        log.warn(\"No engine for \" + name);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2f15ce56e25538825682a41ccb854c1d82e0e95","date":1378972163,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#process(ResponseBuilder).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n    String name = getClusteringEngineName(rb);\n    boolean useResults = params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false);\n    if (useResults == true) {\n      SearchClusteringEngine engine = getSearchClusteringEngine(rb);\n      if (engine != null) {\n        DocListAndSet results = rb.getResults();\n        Map<SolrDocument,Integer> docIds = Maps.newHashMapWithExpectedSize(results.docList.size());\n        SolrDocumentList solrDocList = SolrPluginUtils.docListToSolrDocumentList(\n            results.docList, rb.req.getSearcher(), engine.getFieldsToLoad(rb.req), docIds);\n        Object clusters = engine.cluster(rb.getQuery(), solrDocList, docIds, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        log.warn(\"No engine for: \" + name);\n      }\n    }\n    boolean useCollection = params.getBool(ClusteringParams.USE_COLLECTION, false);\n    if (useCollection == true) {\n      DocumentClusteringEngine engine = documentClusteringEngines.get(name);\n      if (engine != null) {\n        boolean useDocSet = params.getBool(ClusteringParams.USE_DOC_SET, false);\n        NamedList<?> nl = null;\n\n        // TODO: This likely needs to be made into a background task that runs in an executor\n        if (useDocSet == true) {\n          nl = engine.cluster(rb.getResults().docSet, params);\n        } else {\n          nl = engine.cluster(params);\n        }\n        rb.rsp.add(\"clusters\", nl);\n      } else {\n        log.warn(\"No engine for \" + name);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n    String name = getClusteringEngineName(rb);\n    boolean useResults = params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false);\n    if (useResults == true) {\n      SearchClusteringEngine engine = getSearchClusteringEngine(rb);\n      if (engine != null) {\n        DocListAndSet results = rb.getResults();\n        Map<SolrDocument,Integer> docIds = new HashMap<SolrDocument, Integer>(results.docList.size());\n        SolrDocumentList solrDocList = engine.getSolrDocumentList(results.docList, rb.req, docIds);\n        Object clusters = engine.cluster(rb.getQuery(), solrDocList, docIds, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        log.warn(\"No engine for: \" + name);\n      }\n    }\n    boolean useCollection = params.getBool(ClusteringParams.USE_COLLECTION, false);\n    if (useCollection == true) {\n      DocumentClusteringEngine engine = documentClusteringEngines.get(name);\n      if (engine != null) {\n        boolean useDocSet = params.getBool(ClusteringParams.USE_DOC_SET, false);\n        NamedList<?> nl = null;\n\n        // TODO: This likely needs to be made into a background task that runs in an executor\n        if (useDocSet == true) {\n          nl = engine.cluster(rb.getResults().docSet, params);\n        } else {\n          nl = engine.cluster(params);\n        }\n        rb.rsp.add(\"clusters\", nl);\n      } else {\n        log.warn(\"No engine for \" + name);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5275eb9c84ba42bd01ecb9ab2b5f7e42519a97b5","date":1440505299,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#process(ResponseBuilder).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n\n    final String name = getClusteringEngineName(rb);\n    boolean useResults = params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false);\n    if (useResults == true) {\n      SearchClusteringEngine engine = searchClusteringEngines.get(name);\n      if (engine != null) {\n        checkAvailable(name, engine);\n        DocListAndSet results = rb.getResults();\n        Map<SolrDocument,Integer> docIds = Maps.newHashMapWithExpectedSize(results.docList.size());\n        SolrDocumentList solrDocList = SolrPluginUtils.docListToSolrDocumentList(\n            results.docList, rb.req.getSearcher(), engine.getFieldsToLoad(rb.req), docIds);\n        Object clusters = engine.cluster(rb.getQuery(), solrDocList, docIds, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        log.warn(\"No engine named: \" + name);\n      }\n    }\n\n    boolean useCollection = params.getBool(ClusteringParams.USE_COLLECTION, false);\n    if (useCollection == true) {\n      DocumentClusteringEngine engine = documentClusteringEngines.get(name);\n      if (engine != null) {\n        checkAvailable(name, engine);\n        boolean useDocSet = params.getBool(ClusteringParams.USE_DOC_SET, false);\n        NamedList<?> nl = null;\n\n        // TODO: This likely needs to be made into a background task that runs in an executor\n        if (useDocSet == true) {\n          nl = engine.cluster(rb.getResults().docSet, params);\n        } else {\n          nl = engine.cluster(params);\n        }\n        rb.rsp.add(\"clusters\", nl);\n      } else {\n        log.warn(\"No engine named: \" + name);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n    String name = getClusteringEngineName(rb);\n    boolean useResults = params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false);\n    if (useResults == true) {\n      SearchClusteringEngine engine = getSearchClusteringEngine(rb);\n      if (engine != null) {\n        DocListAndSet results = rb.getResults();\n        Map<SolrDocument,Integer> docIds = Maps.newHashMapWithExpectedSize(results.docList.size());\n        SolrDocumentList solrDocList = SolrPluginUtils.docListToSolrDocumentList(\n            results.docList, rb.req.getSearcher(), engine.getFieldsToLoad(rb.req), docIds);\n        Object clusters = engine.cluster(rb.getQuery(), solrDocList, docIds, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        log.warn(\"No engine for: \" + name);\n      }\n    }\n    boolean useCollection = params.getBool(ClusteringParams.USE_COLLECTION, false);\n    if (useCollection == true) {\n      DocumentClusteringEngine engine = documentClusteringEngines.get(name);\n      if (engine != null) {\n        boolean useDocSet = params.getBool(ClusteringParams.USE_DOC_SET, false);\n        NamedList<?> nl = null;\n\n        // TODO: This likely needs to be made into a background task that runs in an executor\n        if (useDocSet == true) {\n          nl = engine.cluster(rb.getResults().docSet, params);\n        } else {\n          nl = engine.cluster(params);\n        }\n        rb.rsp.add(\"clusters\", nl);\n      } else {\n        log.warn(\"No engine for \" + name);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7290fa7ae2cc2a80abb6aecc0b0dd90cbfde2b7f","date":1478271720,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#process(ResponseBuilder).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n\n    final String name = getClusteringEngineName(rb);\n    boolean useResults = params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false);\n    if (useResults == true) {\n      SearchClusteringEngine engine = searchClusteringEngines.get(name);\n      if (engine != null) {\n        checkAvailable(name, engine);\n        DocListAndSet results = rb.getResults();\n        Map<SolrDocument,Integer> docIds = new HashMap<>(results.docList.size());\n        SolrDocumentList solrDocList = SolrPluginUtils.docListToSolrDocumentList(\n            results.docList, rb.req.getSearcher(), engine.getFieldsToLoad(rb.req), docIds);\n        Object clusters = engine.cluster(rb.getQuery(), solrDocList, docIds, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        log.warn(\"No engine named: \" + name);\n      }\n    }\n\n    boolean useCollection = params.getBool(ClusteringParams.USE_COLLECTION, false);\n    if (useCollection == true) {\n      DocumentClusteringEngine engine = documentClusteringEngines.get(name);\n      if (engine != null) {\n        checkAvailable(name, engine);\n        boolean useDocSet = params.getBool(ClusteringParams.USE_DOC_SET, false);\n        NamedList<?> nl = null;\n\n        // TODO: This likely needs to be made into a background task that runs in an executor\n        if (useDocSet == true) {\n          nl = engine.cluster(rb.getResults().docSet, params);\n        } else {\n          nl = engine.cluster(params);\n        }\n        rb.rsp.add(\"clusters\", nl);\n      } else {\n        log.warn(\"No engine named: \" + name);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n\n    final String name = getClusteringEngineName(rb);\n    boolean useResults = params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false);\n    if (useResults == true) {\n      SearchClusteringEngine engine = searchClusteringEngines.get(name);\n      if (engine != null) {\n        checkAvailable(name, engine);\n        DocListAndSet results = rb.getResults();\n        Map<SolrDocument,Integer> docIds = Maps.newHashMapWithExpectedSize(results.docList.size());\n        SolrDocumentList solrDocList = SolrPluginUtils.docListToSolrDocumentList(\n            results.docList, rb.req.getSearcher(), engine.getFieldsToLoad(rb.req), docIds);\n        Object clusters = engine.cluster(rb.getQuery(), solrDocList, docIds, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        log.warn(\"No engine named: \" + name);\n      }\n    }\n\n    boolean useCollection = params.getBool(ClusteringParams.USE_COLLECTION, false);\n    if (useCollection == true) {\n      DocumentClusteringEngine engine = documentClusteringEngines.get(name);\n      if (engine != null) {\n        checkAvailable(name, engine);\n        boolean useDocSet = params.getBool(ClusteringParams.USE_DOC_SET, false);\n        NamedList<?> nl = null;\n\n        // TODO: This likely needs to be made into a background task that runs in an executor\n        if (useDocSet == true) {\n          nl = engine.cluster(rb.getResults().docSet, params);\n        } else {\n          nl = engine.cluster(params);\n        }\n        rb.rsp.add(\"clusters\", nl);\n      } else {\n        log.warn(\"No engine named: \" + name);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#process(ResponseBuilder).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n\n    final String name = getClusteringEngineName(rb);\n    boolean useResults = params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false);\n    if (useResults == true) {\n      SearchClusteringEngine engine = searchClusteringEngines.get(name);\n      if (engine != null) {\n        checkAvailable(name, engine);\n        DocListAndSet results = rb.getResults();\n        Map<SolrDocument,Integer> docIds = new HashMap<>(results.docList.size());\n        SolrDocumentList solrDocList = SolrPluginUtils.docListToSolrDocumentList(\n            results.docList, rb.req.getSearcher(), engine.getFieldsToLoad(rb.req), docIds);\n        Object clusters = engine.cluster(rb.getQuery(), solrDocList, docIds, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        log.warn(\"No engine named: \" + name);\n      }\n    }\n\n    boolean useCollection = params.getBool(ClusteringParams.USE_COLLECTION, false);\n    if (useCollection == true) {\n      DocumentClusteringEngine engine = documentClusteringEngines.get(name);\n      if (engine != null) {\n        checkAvailable(name, engine);\n        boolean useDocSet = params.getBool(ClusteringParams.USE_DOC_SET, false);\n        NamedList<?> nl = null;\n\n        // TODO: This likely needs to be made into a background task that runs in an executor\n        if (useDocSet == true) {\n          nl = engine.cluster(rb.getResults().docSet, params);\n        } else {\n          nl = engine.cluster(params);\n        }\n        rb.rsp.add(\"clusters\", nl);\n      } else {\n        log.warn(\"No engine named: \" + name);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n\n    final String name = getClusteringEngineName(rb);\n    boolean useResults = params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false);\n    if (useResults == true) {\n      SearchClusteringEngine engine = searchClusteringEngines.get(name);\n      if (engine != null) {\n        checkAvailable(name, engine);\n        DocListAndSet results = rb.getResults();\n        Map<SolrDocument,Integer> docIds = Maps.newHashMapWithExpectedSize(results.docList.size());\n        SolrDocumentList solrDocList = SolrPluginUtils.docListToSolrDocumentList(\n            results.docList, rb.req.getSearcher(), engine.getFieldsToLoad(rb.req), docIds);\n        Object clusters = engine.cluster(rb.getQuery(), solrDocList, docIds, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        log.warn(\"No engine named: \" + name);\n      }\n    }\n\n    boolean useCollection = params.getBool(ClusteringParams.USE_COLLECTION, false);\n    if (useCollection == true) {\n      DocumentClusteringEngine engine = documentClusteringEngines.get(name);\n      if (engine != null) {\n        checkAvailable(name, engine);\n        boolean useDocSet = params.getBool(ClusteringParams.USE_DOC_SET, false);\n        NamedList<?> nl = null;\n\n        // TODO: This likely needs to be made into a background task that runs in an executor\n        if (useDocSet == true) {\n          nl = engine.cluster(rb.getResults().docSet, params);\n        } else {\n          nl = engine.cluster(params);\n        }\n        rb.rsp.add(\"clusters\", nl);\n      } else {\n        log.warn(\"No engine named: \" + name);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63a9344cff6a72bc4c1ef080c69e10ad0635b811","date":1490410892,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#process(ResponseBuilder).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n\n    final String name = getClusteringEngineName(rb);\n    boolean useResults = params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false);\n    if (useResults == true) {\n      SearchClusteringEngine engine = searchClusteringEngines.get(name);\n      if (engine != null) {\n        checkAvailable(name, engine);\n        DocListAndSet results = rb.getResults();\n        Map<SolrDocument,Integer> docIds = new HashMap<>(results.docList.size());\n        SolrDocumentList solrDocList = docListToSolrDocumentList(\n            results.docList, rb.req.getSearcher(), engine.getFieldsToLoad(rb.req), docIds);\n        Object clusters = engine.cluster(rb.getQuery(), solrDocList, docIds, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        log.warn(\"No engine named: \" + name);\n      }\n    }\n\n    boolean useCollection = params.getBool(ClusteringParams.USE_COLLECTION, false);\n    if (useCollection == true) {\n      DocumentClusteringEngine engine = documentClusteringEngines.get(name);\n      if (engine != null) {\n        checkAvailable(name, engine);\n        boolean useDocSet = params.getBool(ClusteringParams.USE_DOC_SET, false);\n        NamedList<?> nl = null;\n\n        // TODO: This likely needs to be made into a background task that runs in an executor\n        if (useDocSet == true) {\n          nl = engine.cluster(rb.getResults().docSet, params);\n        } else {\n          nl = engine.cluster(params);\n        }\n        rb.rsp.add(\"clusters\", nl);\n      } else {\n        log.warn(\"No engine named: \" + name);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n\n    final String name = getClusteringEngineName(rb);\n    boolean useResults = params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false);\n    if (useResults == true) {\n      SearchClusteringEngine engine = searchClusteringEngines.get(name);\n      if (engine != null) {\n        checkAvailable(name, engine);\n        DocListAndSet results = rb.getResults();\n        Map<SolrDocument,Integer> docIds = new HashMap<>(results.docList.size());\n        SolrDocumentList solrDocList = SolrPluginUtils.docListToSolrDocumentList(\n            results.docList, rb.req.getSearcher(), engine.getFieldsToLoad(rb.req), docIds);\n        Object clusters = engine.cluster(rb.getQuery(), solrDocList, docIds, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        log.warn(\"No engine named: \" + name);\n      }\n    }\n\n    boolean useCollection = params.getBool(ClusteringParams.USE_COLLECTION, false);\n    if (useCollection == true) {\n      DocumentClusteringEngine engine = documentClusteringEngines.get(name);\n      if (engine != null) {\n        checkAvailable(name, engine);\n        boolean useDocSet = params.getBool(ClusteringParams.USE_DOC_SET, false);\n        NamedList<?> nl = null;\n\n        // TODO: This likely needs to be made into a background task that runs in an executor\n        if (useDocSet == true) {\n          nl = engine.cluster(rb.getResults().docSet, params);\n        } else {\n          nl = engine.cluster(params);\n        }\n        rb.rsp.add(\"clusters\", nl);\n      } else {\n        log.warn(\"No engine named: \" + name);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de548de3ce5405595899f548152d4b93ac9eb9cc","date":1490594650,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#process(ResponseBuilder).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n\n    final String name = getClusteringEngineName(rb);\n    boolean useResults = params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false);\n    if (useResults == true) {\n      SearchClusteringEngine engine = searchClusteringEngines.get(name);\n      if (engine != null) {\n        checkAvailable(name, engine);\n        DocListAndSet results = rb.getResults();\n        Map<SolrDocument,Integer> docIds = new HashMap<>(results.docList.size());\n        SolrDocumentList solrDocList = docListToSolrDocumentList(\n            results.docList, rb.req.getSearcher(), engine.getFieldsToLoad(rb.req), docIds);\n        Object clusters = engine.cluster(rb.getQuery(), solrDocList, docIds, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        log.warn(\"No engine named: \" + name);\n      }\n    }\n\n    boolean useCollection = params.getBool(ClusteringParams.USE_COLLECTION, false);\n    if (useCollection == true) {\n      DocumentClusteringEngine engine = documentClusteringEngines.get(name);\n      if (engine != null) {\n        checkAvailable(name, engine);\n        boolean useDocSet = params.getBool(ClusteringParams.USE_DOC_SET, false);\n        NamedList<?> nl = null;\n\n        // TODO: This likely needs to be made into a background task that runs in an executor\n        if (useDocSet == true) {\n          nl = engine.cluster(rb.getResults().docSet, params);\n        } else {\n          nl = engine.cluster(params);\n        }\n        rb.rsp.add(\"clusters\", nl);\n      } else {\n        log.warn(\"No engine named: \" + name);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n\n    final String name = getClusteringEngineName(rb);\n    boolean useResults = params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false);\n    if (useResults == true) {\n      SearchClusteringEngine engine = searchClusteringEngines.get(name);\n      if (engine != null) {\n        checkAvailable(name, engine);\n        DocListAndSet results = rb.getResults();\n        Map<SolrDocument,Integer> docIds = new HashMap<>(results.docList.size());\n        SolrDocumentList solrDocList = SolrPluginUtils.docListToSolrDocumentList(\n            results.docList, rb.req.getSearcher(), engine.getFieldsToLoad(rb.req), docIds);\n        Object clusters = engine.cluster(rb.getQuery(), solrDocList, docIds, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        log.warn(\"No engine named: \" + name);\n      }\n    }\n\n    boolean useCollection = params.getBool(ClusteringParams.USE_COLLECTION, false);\n    if (useCollection == true) {\n      DocumentClusteringEngine engine = documentClusteringEngines.get(name);\n      if (engine != null) {\n        checkAvailable(name, engine);\n        boolean useDocSet = params.getBool(ClusteringParams.USE_DOC_SET, false);\n        NamedList<?> nl = null;\n\n        // TODO: This likely needs to be made into a background task that runs in an executor\n        if (useDocSet == true) {\n          nl = engine.cluster(rb.getResults().docSet, params);\n        } else {\n          nl = engine.cluster(params);\n        }\n        rb.rsp.add(\"clusters\", nl);\n      } else {\n        log.warn(\"No engine named: \" + name);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#process(ResponseBuilder).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/ClusteringComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n\n    final String name = getClusteringEngineName(rb);\n    boolean useResults = params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false);\n    if (useResults == true) {\n      SearchClusteringEngine engine = searchClusteringEngines.get(name);\n      if (engine != null) {\n        checkAvailable(name, engine);\n        DocListAndSet results = rb.getResults();\n        Map<SolrDocument,Integer> docIds = new HashMap<>(results.docList.size());\n        SolrDocumentList solrDocList = docListToSolrDocumentList(\n            results.docList, rb.req.getSearcher(), engine.getFieldsToLoad(rb.req), docIds);\n        Object clusters = engine.cluster(rb.getQuery(), solrDocList, docIds, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        log.warn(\"No engine named: {}\", name);\n      }\n    }\n\n    boolean useCollection = params.getBool(ClusteringParams.USE_COLLECTION, false);\n    if (useCollection == true) {\n      DocumentClusteringEngine engine = documentClusteringEngines.get(name);\n      if (engine != null) {\n        checkAvailable(name, engine);\n        boolean useDocSet = params.getBool(ClusteringParams.USE_DOC_SET, false);\n        NamedList<?> nl = null;\n\n        // TODO: This likely needs to be made into a background task that runs in an executor\n        if (useDocSet == true) {\n          nl = engine.cluster(rb.getResults().docSet, params);\n        } else {\n          nl = engine.cluster(params);\n        }\n        rb.rsp.add(\"clusters\", nl);\n      } else {\n        log.warn(\"No engine named: {}\", name);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false)) {\n      return;\n    }\n\n    final String name = getClusteringEngineName(rb);\n    boolean useResults = params.getBool(ClusteringParams.USE_SEARCH_RESULTS, false);\n    if (useResults == true) {\n      SearchClusteringEngine engine = searchClusteringEngines.get(name);\n      if (engine != null) {\n        checkAvailable(name, engine);\n        DocListAndSet results = rb.getResults();\n        Map<SolrDocument,Integer> docIds = new HashMap<>(results.docList.size());\n        SolrDocumentList solrDocList = docListToSolrDocumentList(\n            results.docList, rb.req.getSearcher(), engine.getFieldsToLoad(rb.req), docIds);\n        Object clusters = engine.cluster(rb.getQuery(), solrDocList, docIds, rb.req);\n        rb.rsp.add(\"clusters\", clusters);\n      } else {\n        log.warn(\"No engine named: \" + name);\n      }\n    }\n\n    boolean useCollection = params.getBool(ClusteringParams.USE_COLLECTION, false);\n    if (useCollection == true) {\n      DocumentClusteringEngine engine = documentClusteringEngines.get(name);\n      if (engine != null) {\n        checkAvailable(name, engine);\n        boolean useDocSet = params.getBool(ClusteringParams.USE_DOC_SET, false);\n        NamedList<?> nl = null;\n\n        // TODO: This likely needs to be made into a background task that runs in an executor\n        if (useDocSet == true) {\n          nl = engine.cluster(rb.getResults().docSet, params);\n        } else {\n          nl = engine.cluster(params);\n        }\n        rb.rsp.add(\"clusters\", nl);\n      } else {\n        log.warn(\"No engine named: \" + name);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"de548de3ce5405595899f548152d4b93ac9eb9cc":["7290fa7ae2cc2a80abb6aecc0b0dd90cbfde2b7f"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"63a9344cff6a72bc4c1ef080c69e10ad0635b811":["7290fa7ae2cc2a80abb6aecc0b0dd90cbfde2b7f"],"7290fa7ae2cc2a80abb6aecc0b0dd90cbfde2b7f":["5275eb9c84ba42bd01ecb9ab2b5f7e42519a97b5"],"c2f15ce56e25538825682a41ccb854c1d82e0e95":["788184b02a01588fb0bca602e39018a580397a99"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"788184b02a01588fb0bca602e39018a580397a99":["c26f00b574427b55127e869b935845554afde1fa"],"5275eb9c84ba42bd01ecb9ab2b5f7e42519a97b5":["c2f15ce56e25538825682a41ccb854c1d82e0e95"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["5275eb9c84ba42bd01ecb9ab2b5f7e42519a97b5","7290fa7ae2cc2a80abb6aecc0b0dd90cbfde2b7f"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["63a9344cff6a72bc4c1ef080c69e10ad0635b811"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"de548de3ce5405595899f548152d4b93ac9eb9cc":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"7290fa7ae2cc2a80abb6aecc0b0dd90cbfde2b7f":["de548de3ce5405595899f548152d4b93ac9eb9cc","63a9344cff6a72bc4c1ef080c69e10ad0635b811","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"63a9344cff6a72bc4c1ef080c69e10ad0635b811":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"c2f15ce56e25538825682a41ccb854c1d82e0e95":["5275eb9c84ba42bd01ecb9ab2b5f7e42519a97b5"],"c26f00b574427b55127e869b935845554afde1fa":["788184b02a01588fb0bca602e39018a580397a99"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"788184b02a01588fb0bca602e39018a580397a99":["c2f15ce56e25538825682a41ccb854c1d82e0e95"],"5275eb9c84ba42bd01ecb9ab2b5f7e42519a97b5":["7290fa7ae2cc2a80abb6aecc0b0dd90cbfde2b7f","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["de548de3ce5405595899f548152d4b93ac9eb9cc","199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}