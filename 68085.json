{"path":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/projections/CartesianTierPlotter#bestFit(double).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/projections/CartesianTierPlotter#bestFit(double).mjava","pathOld":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/projections/CartesianTierPlotter#bestFit(double).mjava","sourceNew":"  /**\n   * Find the tier with the best fit for a bounding box\n   * Best fit is defined as the ceiling of\n   *  log2 (circumference of earth / distance) \n   *  distance is defined as the smallest box fitting\n   *  the corner between a radius and a bounding box.\n   *  \n   *  Distances less than a mile return 15, finer granularity is\n   *  in accurate\n   */\n  public int bestFit(double miles){\n    \n    //28,892 a rough circumference of the earth\n    int circ = 28892;\n    \n    double r = miles / 2.0;\n    \n    double corner = r - Math.sqrt(Math.pow(r, 2) / 2.0d);\n    double times = circ / corner;\n    int bestFit =  (int)Math.ceil(log2(times)) + 1;\n    \n    if (bestFit > 15) {\n      // 15 is the granularity of about 1 mile\n      // finer granularity isn't accurate with standard java math\n      return 15;\n    }\n    return bestFit;\n  }\n\n","sourceOld":"  /**\n   * Find the tier with the best fit for a bounding box\n   * Best fit is defined as the ceiling of\n   *  log2 (circumference of earth / distance) \n   *  distance is defined as the smallest box fitting\n   *  the corner between a radius and a bounding box.\n   *  \n   *  Distances less than a mile return 15, finer granularity is\n   *  in accurate\n   */\n  public int bestFit(double miles){\n    \n    //28,892 a rough circumference of the earth\n    int circ = 28892;\n    \n    double r = miles / 2.0;\n    \n    double corner = r - Math.sqrt(Math.pow(r, 2) / 2.0d);\n    double times = circ / corner;\n    int bestFit =  (int)Math.ceil(log2(times)) + 1;\n    \n    if (bestFit > 15) {\n      // 15 is the granularity of about 1 mile\n      // finer granularity isn't accurate with standard java math\n      return 15;\n    }\n    return bestFit;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b6f51785c57651e9e1864b7b883037f24541c76","date":1271186480,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/projections/CartesianTierPlotter#bestFit(double).mjava","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/projections/CartesianTierPlotter#bestFit(double).mjava","sourceNew":"  /**\n   * Find the tier with the best fit for a bounding box\n   * Best fit is defined as the ceiling of\n   *  log2 (circumference of earth / distance) \n   *  distance is defined as the smallest box fitting\n   *  the corner between a radius and a bounding box.\n   *  \n   *  Distances less than a mile return 15, finer granularity is\n   *  in accurate\n   */\n  static public int bestFit(double range) {\n    return bestFit(range, DistanceUnits.MILES);\n  }\n\n","sourceOld":"  /**\n   * Find the tier with the best fit for a bounding box\n   * Best fit is defined as the ceiling of\n   *  log2 (circumference of earth / distance) \n   *  distance is defined as the smallest box fitting\n   *  the corner between a radius and a bounding box.\n   *  \n   *  Distances less than a mile return 15, finer granularity is\n   *  in accurate\n   */\n  public int bestFit(double miles){\n    \n    //28,892 a rough circumference of the earth\n    int circ = 28892;\n    \n    double r = miles / 2.0;\n    \n    double corner = r - Math.sqrt(Math.pow(r, 2) / 2.0d);\n    double times = circ / corner;\n    int bestFit =  (int)Math.ceil(log2(times)) + 1;\n    \n    if (bestFit > 15) {\n      // 15 is the granularity of about 1 mile\n      // finer granularity isn't accurate with standard java math\n      return 15;\n    }\n    return bestFit;\n  }\n\n","bugFix":["04a4a94db1eb59c8583adb166acfe686a031bedc","d41c10b9c61bc826acd344f499e062fb46bc42ae"],"bugIntro":["ae346e1b9114f24145c75e8edf720c1e2db5b448"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2b0ba43649ebd893dd536677af71d1f5f59e2a4","date":1271241696,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/projections/CartesianTierPlotter#bestFit(double).mjava","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/projections/CartesianTierPlotter#bestFit(double).mjava","sourceNew":"  /**\n   * Find the tier with the best fit for a bounding box\n   * Best fit is defined as the ceiling of\n   *  log2 (circumference of earth / distance) \n   *  distance is defined as the smallest box fitting\n   *  the corner between a radius and a bounding box.\n   *  \n   *  Distances less than a mile return 15, finer granularity is\n   *  in accurate\n   */\n  static public int bestFit(double range) {\n    return bestFit(range, DEFALT_MIN_TIER, DEFALT_MAX_TIER, DistanceUnits.MILES);\n  }\n\n","sourceOld":"  /**\n   * Find the tier with the best fit for a bounding box\n   * Best fit is defined as the ceiling of\n   *  log2 (circumference of earth / distance) \n   *  distance is defined as the smallest box fitting\n   *  the corner between a radius and a bounding box.\n   *  \n   *  Distances less than a mile return 15, finer granularity is\n   *  in accurate\n   */\n  static public int bestFit(double range) {\n    return bestFit(range, DistanceUnits.MILES);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae346e1b9114f24145c75e8edf720c1e2db5b448","date":1271251510,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/projections/CartesianTierPlotter#bestFit(double).mjava","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/projections/CartesianTierPlotter#bestFit(double).mjava","sourceNew":"  /**\n   * Find the tier with the best fit for a bounding box\n   * Best fit is defined as the ceiling of\n   *  log2 (circumference of earth / distance) \n   *  distance is defined as the smallest box fitting\n   *  the corner between a radius and a bounding box.\n   *  \n   *  Distances less than a mile return 15, finer granularity is\n   *  in accurate\n   */\n  public static int bestFit(double range) {\n    return bestFit(range, DEFALT_MIN_TIER, DEFALT_MAX_TIER, DistanceUnits.MILES);\n  }\n\n","sourceOld":"  /**\n   * Find the tier with the best fit for a bounding box\n   * Best fit is defined as the ceiling of\n   *  log2 (circumference of earth / distance) \n   *  distance is defined as the smallest box fitting\n   *  the corner between a radius and a bounding box.\n   *  \n   *  Distances less than a mile return 15, finer granularity is\n   *  in accurate\n   */\n  static public int bestFit(double range) {\n    return bestFit(range, DEFALT_MIN_TIER, DEFALT_MAX_TIER, DistanceUnits.MILES);\n  }\n\n","bugFix":["3b6f51785c57651e9e1864b7b883037f24541c76"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8e6ff1dd868eee0c9202357a60a5636ad62cb0c5","date":1271290552,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/projections/CartesianTierPlotter#bestFit(double).mjava","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/projections/CartesianTierPlotter#bestFit(double).mjava","sourceNew":"  /**\n   * Find the tier with the best fit for a bounding box\n   * Best fit is defined as the ceiling of\n   *  log2 (circumference of earth / distance) \n   *  distance is defined as the smallest box fitting\n   *  the corner between a radius and a bounding box.\n   *  \n   *  Distances less than a mile return 15, finer granularity is\n   *  in accurate\n   */\n  public int bestFit(double miles){\n    \n    //28,892 a rough circumference of the earth\n    int circ = 28892;\n    \n    double r = miles / 2.0;\n    \n    double corner = r - Math.sqrt(Math.pow(r, 2) / 2.0d);\n    double times = circ / corner;\n    int bestFit =  (int)Math.ceil(log2(times)) + 1;\n    \n    if (bestFit > 15) {\n      // 15 is the granularity of about 1 mile\n      // finer granularity isn't accurate with standard java math\n      return 15;\n    }\n    return bestFit;\n  }\n\n","sourceOld":"  /**\n   * Find the tier with the best fit for a bounding box\n   * Best fit is defined as the ceiling of\n   *  log2 (circumference of earth / distance) \n   *  distance is defined as the smallest box fitting\n   *  the corner between a radius and a bounding box.\n   *  \n   *  Distances less than a mile return 15, finer granularity is\n   *  in accurate\n   */\n  public static int bestFit(double range) {\n    return bestFit(range, DEFALT_MIN_TIER, DEFALT_MAX_TIER, DistanceUnits.MILES);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fb7e38713d15939e085d376c6391e6e6262a81f","date":1329897272,"type":4,"author":"David Wayne Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/projections/CartesianTierPlotter#bestFit(double).mjava","sourceNew":null,"sourceOld":"  /**\n   * Find the tier with the best fit for a bounding box\n   * Best fit is defined as the ceiling of\n   *  log2 (circumference of earth / distance) \n   *  distance is defined as the smallest box fitting\n   *  the corner between a radius and a bounding box.\n   *  \n   *  Distances less than a mile return 15, finer granularity is\n   *  in accurate\n   */\n  public int bestFit(double miles){\n    \n    //28,892 a rough circumference of the earth\n    int circ = 28892;\n    \n    double r = miles / 2.0;\n    \n    double corner = r - Math.sqrt(Math.pow(r, 2) / 2.0d);\n    double times = circ / corner;\n    int bestFit =  (int)Math.ceil(log2(times)) + 1;\n    \n    if (bestFit > 15) {\n      // 15 is the granularity of about 1 mile\n      // finer granularity isn't accurate with standard java math\n      return 15;\n    }\n    return bestFit;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e47768b261c28e7e6032060e8331475c81057953","date":1331681297,"type":4,"author":"Ryan McKinley","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/projections/CartesianTierPlotter#bestFit(double).mjava","sourceNew":null,"sourceOld":"  /**\n   * Find the tier with the best fit for a bounding box\n   * Best fit is defined as the ceiling of\n   *  log2 (circumference of earth / distance) \n   *  distance is defined as the smallest box fitting\n   *  the corner between a radius and a bounding box.\n   *  \n   *  Distances less than a mile return 15, finer granularity is\n   *  in accurate\n   */\n  public int bestFit(double miles){\n    \n    //28,892 a rough circumference of the earth\n    int circ = 28892;\n    \n    double r = miles / 2.0;\n    \n    double corner = r - Math.sqrt(Math.pow(r, 2) / 2.0d);\n    double times = circ / corner;\n    int bestFit =  (int)Math.ceil(log2(times)) + 1;\n    \n    if (bestFit > 15) {\n      // 15 is the granularity of about 1 mile\n      // finer granularity isn't accurate with standard java math\n      return 15;\n    }\n    return bestFit;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3b6f51785c57651e9e1864b7b883037f24541c76":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8e6ff1dd868eee0c9202357a60a5636ad62cb0c5":["ae346e1b9114f24145c75e8edf720c1e2db5b448"],"ae346e1b9114f24145c75e8edf720c1e2db5b448":["f2b0ba43649ebd893dd536677af71d1f5f59e2a4"],"f2b0ba43649ebd893dd536677af71d1f5f59e2a4":["3b6f51785c57651e9e1864b7b883037f24541c76"],"e47768b261c28e7e6032060e8331475c81057953":["8e6ff1dd868eee0c9202357a60a5636ad62cb0c5","2fb7e38713d15939e085d376c6391e6e6262a81f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e47768b261c28e7e6032060e8331475c81057953"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2fb7e38713d15939e085d376c6391e6e6262a81f":["8e6ff1dd868eee0c9202357a60a5636ad62cb0c5"]},"commit2Childs":{"3b6f51785c57651e9e1864b7b883037f24541c76":["f2b0ba43649ebd893dd536677af71d1f5f59e2a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8e6ff1dd868eee0c9202357a60a5636ad62cb0c5":["e47768b261c28e7e6032060e8331475c81057953","2fb7e38713d15939e085d376c6391e6e6262a81f"],"ae346e1b9114f24145c75e8edf720c1e2db5b448":["8e6ff1dd868eee0c9202357a60a5636ad62cb0c5"],"f2b0ba43649ebd893dd536677af71d1f5f59e2a4":["ae346e1b9114f24145c75e8edf720c1e2db5b448"],"e47768b261c28e7e6032060e8331475c81057953":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["3b6f51785c57651e9e1864b7b883037f24541c76"],"2fb7e38713d15939e085d376c6391e6e6262a81f":["e47768b261c28e7e6032060e8331475c81057953"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}