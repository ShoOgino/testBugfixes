{"path":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readNextArcLabel(Arc[T]).mjava","commits":[{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readNextArcLabel(Arc[T]).mjava","pathOld":"/dev/null","sourceNew":"  /** Peeks at next arc's label; does not alter arc.  Do\n   *  not call this if arc.isLast()! */\n  public int readNextArcLabel(Arc<T> arc) throws IOException {\n    assert !arc.isLast();\n\n    final BytesReader in;\n    if (arc.label == END_LABEL) {\n      //System.out.println(\"    nextArc fake \" + arc.nextArc);\n      in = getBytesReader(arc.nextArc);\n      byte flags = bytes[in.pos];\n      if (flag(flags, BIT_ARCS_AS_FIXED_ARRAY)) {\n        //System.out.println(\"    nextArc fake array\");\n        in.pos--;\n        in.readVInt();\n        in.readByte();\n      }\n    } else {\n      if (arc.bytesPerArc != 0) {\n        //System.out.println(\"    nextArc real array\");\n        // arcs are at fixed entries\n        in = getBytesReader(arc.posArcsStart - (1+arc.arcIdx)*arc.bytesPerArc);\n      } else {\n        // arcs are packed\n        //System.out.println(\"    nextArc real packed\");\n        in = getBytesReader(arc.nextArc);\n      }\n    }\n    // skip flags\n    in.readByte();\n    return readLabel(in);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readNextArcLabel(Arc[T]).mjava","pathOld":"/dev/null","sourceNew":"  /** Peeks at next arc's label; does not alter arc.  Do\n   *  not call this if arc.isLast()! */\n  public int readNextArcLabel(Arc<T> arc) throws IOException {\n    assert !arc.isLast();\n\n    final BytesReader in;\n    if (arc.label == END_LABEL) {\n      //System.out.println(\"    nextArc fake \" + arc.nextArc);\n      in = getBytesReader(arc.nextArc);\n      byte flags = bytes[in.pos];\n      if (flag(flags, BIT_ARCS_AS_FIXED_ARRAY)) {\n        //System.out.println(\"    nextArc fake array\");\n        in.pos--;\n        in.readVInt();\n        in.readByte();\n      }\n    } else {\n      if (arc.bytesPerArc != 0) {\n        //System.out.println(\"    nextArc real array\");\n        // arcs are at fixed entries\n        in = getBytesReader(arc.posArcsStart - (1+arc.arcIdx)*arc.bytesPerArc);\n      } else {\n        // arcs are packed\n        //System.out.println(\"    nextArc real packed\");\n        in = getBytesReader(arc.nextArc);\n      }\n    }\n    // skip flags\n    in.readByte();\n    return readLabel(in);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readNextArcLabel(Arc[T]).mjava","pathOld":"/dev/null","sourceNew":"  /** Peeks at next arc's label; does not alter arc.  Do\n   *  not call this if arc.isLast()! */\n  public int readNextArcLabel(Arc<T> arc) throws IOException {\n    assert !arc.isLast();\n\n    final BytesReader in;\n    if (arc.label == END_LABEL) {\n      //System.out.println(\"    nextArc fake \" + arc.nextArc);\n      in = getBytesReader(arc.nextArc);\n      byte flags = bytes[in.pos];\n      if (flag(flags, BIT_ARCS_AS_FIXED_ARRAY)) {\n        //System.out.println(\"    nextArc fake array\");\n        in.pos--;\n        in.readVInt();\n        in.readByte();\n      }\n    } else {\n      if (arc.bytesPerArc != 0) {\n        //System.out.println(\"    nextArc real array\");\n        // arcs are at fixed entries\n        in = getBytesReader(arc.posArcsStart - (1+arc.arcIdx)*arc.bytesPerArc);\n      } else {\n        // arcs are packed\n        //System.out.println(\"    nextArc real packed\");\n        in = getBytesReader(arc.nextArc);\n      }\n    }\n    // skip flags\n    in.readByte();\n    return readLabel(in);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#readNextArcLabel(Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readNextArcLabel(Arc[T]).mjava","sourceNew":"  /** Peeks at next arc's label; does not alter arc.  Do\n   *  not call this if arc.isLast()! */\n  public int readNextArcLabel(Arc<T> arc) throws IOException {\n    assert !arc.isLast();\n\n    final BytesReader in;\n    if (arc.label == END_LABEL) {\n      //System.out.println(\"    nextArc fake \" + arc.nextArc);\n      in = getBytesReader(arc.nextArc);\n      byte flags = bytes[in.pos];\n      if (flag(flags, BIT_ARCS_AS_FIXED_ARRAY)) {\n        //System.out.println(\"    nextArc fake array\");\n        in.pos--;\n        in.readVInt();\n        in.readByte();\n      }\n    } else {\n      if (arc.bytesPerArc != 0) {\n        //System.out.println(\"    nextArc real array\");\n        // arcs are at fixed entries\n        in = getBytesReader(arc.posArcsStart - (1+arc.arcIdx)*arc.bytesPerArc);\n      } else {\n        // arcs are packed\n        //System.out.println(\"    nextArc real packed\");\n        in = getBytesReader(arc.nextArc);\n      }\n    }\n    // skip flags\n    in.readByte();\n    return readLabel(in);\n  }\n\n","sourceOld":"  /** Peeks at next arc's label; does not alter arc.  Do\n   *  not call this if arc.isLast()! */\n  public int readNextArcLabel(Arc<T> arc) throws IOException {\n    assert !arc.isLast();\n\n    final BytesReader in;\n    if (arc.label == END_LABEL) {\n      //System.out.println(\"    nextArc fake \" + arc.nextArc);\n      in = getBytesReader(arc.nextArc);\n      byte flags = bytes[in.pos];\n      if (flag(flags, BIT_ARCS_AS_FIXED_ARRAY)) {\n        //System.out.println(\"    nextArc fake array\");\n        in.pos--;\n        in.readVInt();\n        in.readByte();\n      }\n    } else {\n      if (arc.bytesPerArc != 0) {\n        //System.out.println(\"    nextArc real array\");\n        // arcs are at fixed entries\n        in = getBytesReader(arc.posArcsStart - (1+arc.arcIdx)*arc.bytesPerArc);\n      } else {\n        // arcs are packed\n        //System.out.println(\"    nextArc real packed\");\n        in = getBytesReader(arc.nextArc);\n      }\n    }\n    // skip flags\n    in.readByte();\n    return readLabel(in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#readNextArcLabel(Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readNextArcLabel(Arc[T]).mjava","sourceNew":"  /** Peeks at next arc's label; does not alter arc.  Do\n   *  not call this if arc.isLast()! */\n  public int readNextArcLabel(Arc<T> arc) throws IOException {\n    assert !arc.isLast();\n\n    final BytesReader in;\n    if (arc.label == END_LABEL) {\n      //System.out.println(\"    nextArc fake \" + arc.nextArc);\n      in = getBytesReader(arc.nextArc);\n      byte flags = bytes[in.pos];\n      if (flag(flags, BIT_ARCS_AS_FIXED_ARRAY)) {\n        //System.out.println(\"    nextArc fake array\");\n        in.pos--;\n        in.readVInt();\n        in.readByte();\n      }\n    } else {\n      if (arc.bytesPerArc != 0) {\n        //System.out.println(\"    nextArc real array\");\n        // arcs are at fixed entries\n        in = getBytesReader(arc.posArcsStart - (1+arc.arcIdx)*arc.bytesPerArc);\n      } else {\n        // arcs are packed\n        //System.out.println(\"    nextArc real packed\");\n        in = getBytesReader(arc.nextArc);\n      }\n    }\n    // skip flags\n    in.readByte();\n    return readLabel(in);\n  }\n\n","sourceOld":"  /** Peeks at next arc's label; does not alter arc.  Do\n   *  not call this if arc.isLast()! */\n  public int readNextArcLabel(Arc<T> arc) throws IOException {\n    assert !arc.isLast();\n\n    final BytesReader in;\n    if (arc.label == END_LABEL) {\n      //System.out.println(\"    nextArc fake \" + arc.nextArc);\n      in = getBytesReader(arc.nextArc);\n      byte flags = bytes[in.pos];\n      if (flag(flags, BIT_ARCS_AS_FIXED_ARRAY)) {\n        //System.out.println(\"    nextArc fake array\");\n        in.pos--;\n        in.readVInt();\n        in.readByte();\n      }\n    } else {\n      if (arc.bytesPerArc != 0) {\n        //System.out.println(\"    nextArc real array\");\n        // arcs are at fixed entries\n        in = getBytesReader(arc.posArcsStart - (1+arc.arcIdx)*arc.bytesPerArc);\n      } else {\n        // arcs are packed\n        //System.out.println(\"    nextArc real packed\");\n        in = getBytesReader(arc.nextArc);\n      }\n    }\n    // skip flags\n    in.readByte();\n    return readLabel(in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#readNextArcLabel(Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#readNextArcLabel(Arc[T]).mjava","sourceNew":"  /** Peeks at next arc's label; does not alter arc.  Do\n   *  not call this if arc.isLast()! */\n  public int readNextArcLabel(Arc<T> arc) throws IOException {\n    assert !arc.isLast();\n\n    final BytesReader in;\n    if (arc.label == END_LABEL) {\n      //System.out.println(\"    nextArc fake \" + arc.nextArc);\n      in = getBytesReader(arc.nextArc);\n      byte flags = bytes[in.pos];\n      if (flag(flags, BIT_ARCS_AS_FIXED_ARRAY)) {\n        //System.out.println(\"    nextArc fake array\");\n        in.pos--;\n        in.readVInt();\n        in.readByte();\n      }\n    } else {\n      if (arc.bytesPerArc != 0) {\n        //System.out.println(\"    nextArc real array\");\n        // arcs are at fixed entries\n        in = getBytesReader(arc.posArcsStart - (1+arc.arcIdx)*arc.bytesPerArc);\n      } else {\n        // arcs are packed\n        //System.out.println(\"    nextArc real packed\");\n        in = getBytesReader(arc.nextArc);\n      }\n    }\n    // skip flags\n    in.readByte();\n    return readLabel(in);\n  }\n\n","sourceOld":"  /** Peeks at next arc's label; does not alter arc.  Do\n   *  not call this if arc.isLast()! */\n  public int readNextArcLabel(Arc<T> arc) throws IOException {\n    assert !arc.isLast();\n\n    final BytesReader in;\n    if (arc.label == END_LABEL) {\n      //System.out.println(\"    nextArc fake \" + arc.nextArc);\n      in = getBytesReader(arc.nextArc);\n      byte flags = bytes[in.pos];\n      if (flag(flags, BIT_ARCS_AS_FIXED_ARRAY)) {\n        //System.out.println(\"    nextArc fake array\");\n        in.pos--;\n        in.readVInt();\n        in.readByte();\n      }\n    } else {\n      if (arc.bytesPerArc != 0) {\n        //System.out.println(\"    nextArc real array\");\n        // arcs are at fixed entries\n        in = getBytesReader(arc.posArcsStart - (1+arc.arcIdx)*arc.bytesPerArc);\n      } else {\n        // arcs are packed\n        //System.out.println(\"    nextArc real packed\");\n        in = getBytesReader(arc.nextArc);\n      }\n    }\n    // skip flags\n    in.readByte();\n    return readLabel(in);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","56da903869515527852ee21ea7ef7bfe414cd40d"],"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["56da903869515527852ee21ea7ef7bfe414cd40d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["56da903869515527852ee21ea7ef7bfe414cd40d","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"56da903869515527852ee21ea7ef7bfe414cd40d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","56da903869515527852ee21ea7ef7bfe414cd40d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["70ad682703b8585f5d0a637efec044d57ec05efb","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"56da903869515527852ee21ea7ef7bfe414cd40d":["70ad682703b8585f5d0a637efec044d57ec05efb","8be6e1e4fbbc94d90b78f175c03ff389b6949373","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","56da903869515527852ee21ea7ef7bfe414cd40d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}