{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeMerger#sortBuckets().mjava","commits":[{"id":"1931d98b40b01d5075753b197c2461a5c2652689","date":1471971289,"type":0,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeMerger#sortBuckets().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void sortBuckets() {\n    // TODO: mincount>0 will mess up order?\n    sortedBuckets = new ArrayList<>( buckets.values() );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["459698d341a59ca453792f38503b2821b68e7d7b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeMerger#sortBuckets().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void sortBuckets() {\n    // TODO: mincount>0 will mess up order?\n    sortedBuckets = new ArrayList<>( buckets.values() );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeMerger#sortBuckets().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void sortBuckets() {\n    // TODO: mincount>0 will mess up order?\n    sortedBuckets = new ArrayList<>( buckets.values() );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"459698d341a59ca453792f38503b2821b68e7d7b","date":1515273825,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeMerger#sortBuckets().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeMerger#sortBuckets().mjava","sourceNew":"  @Override\n  public void sortBuckets() {\n    // regardless of mincount, every shard returns a consistent set of buckets which are already in the correct order\n    sortedBuckets = new ArrayList<>( buckets.values() );\n  }\n\n","sourceOld":"  @Override\n  public void sortBuckets() {\n    // TODO: mincount>0 will mess up order?\n    sortedBuckets = new ArrayList<>( buckets.values() );\n  }\n\n","bugFix":["1931d98b40b01d5075753b197c2461a5c2652689"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeMerger#sortBuckets().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeMerger#sortBuckets().mjava","sourceNew":"  @Override\n  public void sortBuckets() {\n    // regardless of mincount, every shard returns a consistent set of buckets which are already in the correct order\n    sortedBuckets = new ArrayList<>( buckets.values() );\n  }\n\n","sourceOld":"  @Override\n  public void sortBuckets() {\n    // TODO: mincount>0 will mess up order?\n    sortedBuckets = new ArrayList<>( buckets.values() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94ce69d020f939568b84a1dbbfbd11bfd9907b73","date":1543618146,"type":4,"author":"Chris Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeMerger#sortBuckets().mjava","sourceNew":null,"sourceOld":"  @Override\n  public void sortBuckets() {\n    // regardless of mincount, every shard returns a consistent set of buckets which are already in the correct order\n    sortedBuckets = new ArrayList<>( buckets.values() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","459698d341a59ca453792f38503b2821b68e7d7b"],"459698d341a59ca453792f38503b2821b68e7d7b":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1931d98b40b01d5075753b197c2461a5c2652689":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"94ce69d020f939568b84a1dbbfbd11bfd9907b73":["b94236357aaa22b76c10629851fe4e376e0cea82"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1931d98b40b01d5075753b197c2461a5c2652689"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["94ce69d020f939568b84a1dbbfbd11bfd9907b73"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["94ce69d020f939568b84a1dbbfbd11bfd9907b73"],"459698d341a59ca453792f38503b2821b68e7d7b":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1931d98b40b01d5075753b197c2461a5c2652689","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1931d98b40b01d5075753b197c2461a5c2652689":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"94ce69d020f939568b84a1dbbfbd11bfd9907b73":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["b94236357aaa22b76c10629851fe4e376e0cea82","459698d341a59ca453792f38503b2821b68e7d7b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}