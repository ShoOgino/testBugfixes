{"path":"modules/queryparser/src/java/org/apache/lucene/queryparser/ext/Extensions#splitExtensionField(String,String).mjava","commits":[{"id":"a53a291ad9b1cc050d846b68758c061a55d52734","date":1310437344,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/ext/Extensions#splitExtensionField(String,String).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/ext/Extensions#splitExtensionField(String,String).mjava","sourceNew":"  /**\n   * Splits a extension field and returns the field / extension part as a\n   * {@link Pair}. This method tries to split on the first occurrence of the\n   * extension field delimiter, if the delimiter is not present in the string\n   * the result will contain a <code>null</code> value for the extension key and\n   * the given field string as the field value. If the given extension field\n   * string contains no field identifier the result pair will carry the given\n   * default field as the field value.\n   * \n   * @param defaultField\n   *          the default query field\n   * @param field\n   *          the extension field string\n   * @return a {@link Pair} with the field name as the {@link Pair#cur} and the\n   *         extension key as the {@link Pair#cud}\n   */\n  public Pair<String,String> splitExtensionField(String defaultField,\n      String field) {\n    int indexOf = field.indexOf(this.extensionFieldDelimiter);\n    if (indexOf < 0)\n      return new Pair<String,String>(field, null);\n    final String indexField = indexOf == 0 ? defaultField : field.substring(0,\n        indexOf);\n    final String extensionKey = field.substring(indexOf + 1);\n    return new Pair<String,String>(indexField, extensionKey);\n\n  }\n\n","sourceOld":"  /**\n   * Splits a extension field and returns the field / extension part as a\n   * {@link Pair}. This method tries to split on the first occurrence of the\n   * extension field delimiter, if the delimiter is not present in the string\n   * the result will contain a <code>null</code> value for the extension key and\n   * the given field string as the field value. If the given extension field\n   * string contains no field identifier the result pair will carry the given\n   * default field as the field value.\n   * \n   * @param defaultField\n   *          the default query field\n   * @param field\n   *          the extension field string\n   * @return a {@link Pair} with the field name as the {@link Pair#cur} and the\n   *         extension key as the {@link Pair#cud}\n   */\n  public Pair<String,String> splitExtensionField(String defaultField,\n      String field) {\n    int indexOf = field.indexOf(this.extensionFieldDelimiter);\n    if (indexOf < 0)\n      return new Pair<String,String>(field, null);\n    final String indexField = indexOf == 0 ? defaultField : field.substring(0,\n        indexOf);\n    final String extensionKey = field.substring(indexOf + 1);\n    return new Pair<String,String>(indexField, extensionKey);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/ext/Extensions#splitExtensionField(String,String).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/ext/Extensions#splitExtensionField(String,String).mjava","sourceNew":"  /**\n   * Splits a extension field and returns the field / extension part as a\n   * {@link Pair}. This method tries to split on the first occurrence of the\n   * extension field delimiter, if the delimiter is not present in the string\n   * the result will contain a <code>null</code> value for the extension key and\n   * the given field string as the field value. If the given extension field\n   * string contains no field identifier the result pair will carry the given\n   * default field as the field value.\n   * \n   * @param defaultField\n   *          the default query field\n   * @param field\n   *          the extension field string\n   * @return a {@link Pair} with the field name as the {@link Pair#cur} and the\n   *         extension key as the {@link Pair#cud}\n   */\n  public Pair<String,String> splitExtensionField(String defaultField,\n      String field) {\n    int indexOf = field.indexOf(this.extensionFieldDelimiter);\n    if (indexOf < 0)\n      return new Pair<String,String>(field, null);\n    final String indexField = indexOf == 0 ? defaultField : field.substring(0,\n        indexOf);\n    final String extensionKey = field.substring(indexOf + 1);\n    return new Pair<String,String>(indexField, extensionKey);\n\n  }\n\n","sourceOld":"  /**\n   * Splits a extension field and returns the field / extension part as a\n   * {@link Pair}. This method tries to split on the first occurrence of the\n   * extension field delimiter, if the delimiter is not present in the string\n   * the result will contain a <code>null</code> value for the extension key and\n   * the given field string as the field value. If the given extension field\n   * string contains no field identifier the result pair will carry the given\n   * default field as the field value.\n   * \n   * @param defaultField\n   *          the default query field\n   * @param field\n   *          the extension field string\n   * @return a {@link Pair} with the field name as the {@link Pair#cur} and the\n   *         extension key as the {@link Pair#cud}\n   */\n  public Pair<String,String> splitExtensionField(String defaultField,\n      String field) {\n    int indexOf = field.indexOf(this.extensionFieldDelimiter);\n    if (indexOf < 0)\n      return new Pair<String,String>(field, null);\n    final String indexField = indexOf == 0 ? defaultField : field.substring(0,\n        indexOf);\n    final String extensionKey = field.substring(indexOf + 1);\n    return new Pair<String,String>(indexField, extensionKey);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a53a291ad9b1cc050d846b68758c061a55d52734"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a53a291ad9b1cc050d846b68758c061a55d52734":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a53a291ad9b1cc050d846b68758c061a55d52734"],"a53a291ad9b1cc050d846b68758c061a55d52734":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}