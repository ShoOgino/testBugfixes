{"path":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","commits":[{"id":"91814ce09be68efd0626969632e79ae47d8876d4","date":1425951537,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  public void inform(SolrCore core) {\n\n    core.addCloseHook( new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  public void inform(SolrCore core) {\n\n    core.addCloseHook( new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.CountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n    }\n\n     streamFactory\n      .withStreamFunction(\"search\", CloudSolrStream.class)\n      .withStreamFunction(\"merge\", MergeStream.class)\n      .withStreamFunction(\"unique\", UniqueStream.class)\n      .withStreamFunction(\"top\", RankStream.class)\n      .withStreamFunction(\"group\", ReducerStream.class)\n      .withStreamFunction(\"parallel\", ParallelStream.class);\n\n    \n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), ExpressibleStream.class);\n        streamFactory.withStreamFunction(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    core.addCloseHook( new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":["d7ced979f39d7651addfc7d805e1d9bfac215822"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e431b0806b8db369da896b66a74e304a49953c7b","date":1434740037,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.CountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n    }\n\n     streamFactory\n      .withStreamFunction(\"search\", CloudSolrStream.class)\n      .withStreamFunction(\"merge\", MergeStream.class)\n      .withStreamFunction(\"unique\", UniqueStream.class)\n      .withStreamFunction(\"top\", RankStream.class)\n      .withStreamFunction(\"group\", ReducerStream.class)\n      .withStreamFunction(\"parallel\", ParallelStream.class);\n\n    \n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withStreamFunction(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.CountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n    }\n\n     streamFactory\n      .withStreamFunction(\"search\", CloudSolrStream.class)\n      .withStreamFunction(\"merge\", MergeStream.class)\n      .withStreamFunction(\"unique\", UniqueStream.class)\n      .withStreamFunction(\"top\", RankStream.class)\n      .withStreamFunction(\"group\", ReducerStream.class)\n      .withStreamFunction(\"parallel\", ParallelStream.class);\n\n    \n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), ExpressibleStream.class);\n        streamFactory.withStreamFunction(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3078cad1008b796c6d573b743c586fdf9ef5660a","date":1436019875,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n    }\n\n     streamFactory\n       // streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      ;\n\n    \n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.CountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n    }\n\n     streamFactory\n      .withStreamFunction(\"search\", CloudSolrStream.class)\n      .withStreamFunction(\"merge\", MergeStream.class)\n      .withStreamFunction(\"unique\", UniqueStream.class)\n      .withStreamFunction(\"top\", RankStream.class)\n      .withStreamFunction(\"group\", ReducerStream.class)\n      .withStreamFunction(\"parallel\", ParallelStream.class);\n\n    \n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withStreamFunction(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":["74a180a9264fddbaf4727f75ded3b11d6b8f2bf7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ac446a120a3c5f1ac22f9a866256ad428c1821b","date":1447203034,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n    }\n\n     streamFactory\n       // streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      ;\n\n    \n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n    }\n\n     streamFactory\n       // streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      ;\n\n    \n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"333d804f5abfaf34c57493306a4cb2e01e55662d","date":1447206304,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n    }\n\n     streamFactory\n       // streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n      \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      ;\n\n    \n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n    }\n\n     streamFactory\n       // streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      ;\n\n    \n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"926350ae128ddfe1eb7570ed50a036f6bd5c66a6","date":1447286925,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n    }\n\n     streamFactory\n       // streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n     \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      ;\n    \n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n    }\n\n     streamFactory\n       // streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n      \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      ;\n\n    \n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74a180a9264fddbaf4727f75ded3b11d6b8f2bf7","date":1449800905,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n    }\n\n     streamFactory\n       // streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n         .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n     \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      ;\n    \n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n    }\n\n     streamFactory\n       // streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n     \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      ;\n    \n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":["3078cad1008b796c6d573b743c586fdf9ef5660a"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5287d62ad5da27d35a88ada646ae7d9adfb76826","date":1450041712,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n    }\n\n     streamFactory\n       // streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n         .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n     \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      ;\n    \n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n    }\n\n     streamFactory\n       // streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n         .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n     \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      ;\n    \n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a027750b86452a8dcd054ac993d54b203dae9102","date":1451953949,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n     streamFactory\n       // streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n         .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n     \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      ;\n    \n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n    }\n\n     streamFactory\n       // streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n         .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n     \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      ;\n    \n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c533b201163bd7b15aa8881f922f9289a7668187","date":1452268593,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n     streamFactory\n       // streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      ;\n    \n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n     streamFactory\n       // streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n         .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n     \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      ;\n    \n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fef6c45a8c2e0c4a323c0edc246d5d27fb3da298","date":1452706901,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n     streamFactory\n       // streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      ;\n    \n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n     streamFactory\n       // streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      ;\n    \n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b671049b6133b72a11a8b48321607e9623b41923","date":1453313296,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n     streamFactory\n       // streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      ;\n    \n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n     streamFactory\n       // streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      ;\n    \n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e81698e1493f01874d99b769bc4d9fc9f07555d6","date":1453489635,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n     streamFactory\n       // streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n         .withFunctionName(\"daemon\", DaemonStream.class)\n      \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      ;\n    \n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n     streamFactory\n       // streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      ;\n    \n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"10b9c6c42133576daaccbd79bd04c88511b9caca","date":1455930223,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n     streamFactory\n       // streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n         .withFunctionName(\"daemon\", DaemonStream.class)\n         .withFunctionName(\"topic\", TopicStream.class)\n\n\n    // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n     streamFactory\n       // streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n         .withFunctionName(\"daemon\", DaemonStream.class)\n      \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      ;\n    \n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9a7edeee192980cdc45735957606fc0dbf22d437","date":1459455891,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n     streamFactory\n       // streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n         .withFunctionName(\"daemon\", DaemonStream.class)\n         .withFunctionName(\"topic\", TopicStream.class)\n         .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n\n\n    // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n     streamFactory\n       // streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n         .withFunctionName(\"daemon\", DaemonStream.class)\n         .withFunctionName(\"topic\", TopicStream.class)\n\n\n    // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9a4952b035bd0644022bb7f553db72494001efa","date":1460684366,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      \n      // graph streams\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n     streamFactory\n       // streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n         .withFunctionName(\"daemon\", DaemonStream.class)\n         .withFunctionName(\"topic\", TopicStream.class)\n         .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n\n\n    // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0dda1b9fb25c3d83e46750bb07d6ebf073cc4a5d","date":1460703694,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      \n      // graph streams\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n     streamFactory\n       // streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n         .withFunctionName(\"daemon\", DaemonStream.class)\n         .withFunctionName(\"topic\", TopicStream.class)\n         .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n\n\n    // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"afdf6ff5b1319d8ae254212f1203a6233ed3e1dc","date":1461010196,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n       .withFunctionName(\"sort\", SortStream.class)\n         .withFunctionName(\"daemon\", DaemonStream.class)\n         .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n         .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      \n      // graph streams\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e15955b4980562a0c1c81d08654904f3fadb83b","date":1461068916,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n       .withFunctionName(\"sort\", SortStream.class)\n         .withFunctionName(\"daemon\", DaemonStream.class)\n         .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n         .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      \n      // graph streams\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a48c6e9de96682300afe9c20157f05ea08805c1","date":1461113025,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n       .withFunctionName(\"sort\", SortStream.class)\n         .withFunctionName(\"daemon\", DaemonStream.class)\n         .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n         .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9b701e0fcef214f86bab1daf107adce0b0131212","date":1461241874,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n       .withFunctionName(\"sort\", SortStream.class)\n         .withFunctionName(\"daemon\", DaemonStream.class)\n         .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n         .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8b92f86e90a95b8fc860ddecd9470ffb89a9fa7d","date":1467828398,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n         .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f6b1e64caa933f6fb3c0494afd6ca2597f55cc91","date":1470238980,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n         .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n         .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n         .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n         .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4ddf965cea25006a6e621cc031c3bc69863ff4d","date":1474564021,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n         .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"126d6ad24eed13163ba0959435d5a80e5672837c","date":1474567302,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n         .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b5fa1c8367f821057f943ece929329485ec708ba","date":1475186606,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n         .withFunctionName(\"model\", ModelStream.class)\n         .withFunctionName(\"classify\", ClassifyStream.class)\n\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":["d7ced979f39d7651addfc7d805e1d9bfac215822"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n         .withFunctionName(\"model\", ModelStream.class)\n         .withFunctionName(\"classify\", ClassifyStream.class)\n\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n         .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c0dbd11ae1d6533e7454d66bfb1d5ea898dfa8e5","date":1475846642,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n         .withFunctionName(\"model\", ModelStream.class)\n         .withFunctionName(\"classify\", ClassifyStream.class)\n\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<? extends Expressible> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n         .withFunctionName(\"model\", ModelStream.class)\n         .withFunctionName(\"classify\", ClassifyStream.class)\n\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f21dc022708e502f89f154bdcf6dc53b9409aec","date":1476123629,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n         .withFunctionName(\"model\", ModelStream.class)\n         .withFunctionName(\"classify\", ClassifyStream.class)\n             .withFunctionName(\"fetch\", FetchStream.class)\n\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<? extends Expressible> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n         .withFunctionName(\"model\", ModelStream.class)\n         .withFunctionName(\"classify\", ClassifyStream.class)\n\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<? extends Expressible> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b85485ed18e996d4e2490e5bc158e59c12acb75","date":1476232226,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getResourceLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n         .withFunctionName(\"model\", ModelStream.class)\n         .withFunctionName(\"classify\", ClassifyStream.class)\n             .withFunctionName(\"fetch\", FetchStream.class)\n\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<? extends Expressible> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getResourceLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection = null;\n    String defaultZkhost     = null;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n    // This pulls all the overrides and additions from the config\n    Object functionMappingsObj = initArgs.get(\"streamFunctions\");\n    if(null != functionMappingsObj){\n      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;\n      for(Entry<String,?> functionMapping : functionMappings){\n        Class<?> clazz = core.getResourceLoader().findClass((String)functionMapping.getValue(), Expressible.class);\n        streamFactory.withFunctionName(functionMapping.getKey(), clazz);\n      }\n    }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c9480bf8e52feb02af9b7fa13bf50929da7900b","date":1477527580,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getResourceLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getResourceLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getResourceLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getResourceLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e196615f77a3277b22dbf33f9b4a9f086943dfe","date":1481905676,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      .withFunctionName(\"and\", AndOperation.class)\n      .withFunctionName(\"or\", OrOperation.class)\n      .withFunctionName(\"not\", NotOperation.class)\n      .withFunctionName(\"gt\", GreaterThanOperation.class)\n      .withFunctionName(\"lt\", LessThanOperation.class)\n      .withFunctionName(\"eq\", EqualsOperation.class)\n      .withFunctionName(\"lteq\", LessThanEqualToOperation.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToOperation.class);\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getResourceLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getResourceLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df05c92db04724e97f8298302f2aaf06f927589f","date":1483040356,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getResourceLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getResourceLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"de0b5d8cac74be1676bcc2f805bc0d0630176659","date":1483048659,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getResourceLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getResourceLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8815a2fe9bb8a141732b2059eb62f4ac94ed826e","date":1483126456,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"schedule\", SchedulerStream.class)\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getResourceLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getResourceLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"21a4bfa236e53d4457f5b62019d7285f42214f13","date":1483373324,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getResourceLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"schedule\", SchedulerStream.class)\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getResourceLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b4062c48c67245d14e4c4d776cb7b290822ddbcb","date":1483428214,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getResourceLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"schedule\", SchedulerStream.class)\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getResourceLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      .withFunctionName(\"and\", AndOperation.class)\n      .withFunctionName(\"or\", OrOperation.class)\n      .withFunctionName(\"not\", NotOperation.class)\n      .withFunctionName(\"gt\", GreaterThanOperation.class)\n      .withFunctionName(\"lt\", LessThanOperation.class)\n      .withFunctionName(\"eq\", EqualsOperation.class)\n      .withFunctionName(\"lteq\", LessThanEqualToOperation.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToOperation.class);\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getResourceLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      .withFunctionName(\"and\", AndOperation.class)\n      .withFunctionName(\"or\", OrOperation.class)\n      .withFunctionName(\"not\", NotOperation.class)\n      .withFunctionName(\"gt\", GreaterThanOperation.class)\n      .withFunctionName(\"lt\", LessThanOperation.class)\n      .withFunctionName(\"eq\", EqualsOperation.class)\n      .withFunctionName(\"lteq\", LessThanEqualToOperation.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToOperation.class);\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getResourceLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb018b067d19fee3a9fe23997786b4f69e50e38e","date":1483473928,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      .withFunctionName(\"and\", AndOperation.class)\n      .withFunctionName(\"or\", OrOperation.class)\n      .withFunctionName(\"not\", NotOperation.class)\n      .withFunctionName(\"gt\", GreaterThanOperation.class)\n      .withFunctionName(\"lt\", LessThanOperation.class)\n      .withFunctionName(\"eq\", EqualsOperation.class)\n      .withFunctionName(\"lteq\", LessThanEqualToOperation.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToOperation.class);\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getResourceLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class);\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getResourceLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"02a5a00236471b1e5f3c75017adb632328e120c3","date":1483544009,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      .withFunctionName(\"and\", AndOperation.class)\n      .withFunctionName(\"or\", OrOperation.class)\n      .withFunctionName(\"not\", NotOperation.class)\n      .withFunctionName(\"gt\", GreaterThanOperation.class)\n      .withFunctionName(\"lt\", LessThanOperation.class)\n      .withFunctionName(\"eq\", EqualsOperation.class)\n      .withFunctionName(\"lteq\", LessThanEqualToOperation.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToOperation.class);\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getResourceLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      .withFunctionName(\"and\", AndOperation.class)\n      .withFunctionName(\"or\", OrOperation.class)\n      .withFunctionName(\"not\", NotOperation.class)\n      .withFunctionName(\"gt\", GreaterThanOperation.class)\n      .withFunctionName(\"lt\", LessThanOperation.class)\n      .withFunctionName(\"eq\", EqualsOperation.class)\n      .withFunctionName(\"lteq\", LessThanEqualToOperation.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToOperation.class);\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getResourceLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"491c9672ec42582fe43960452dbd37f1c80fe0f0","date":1483739222,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      .withFunctionName(\"and\", AndOperation.class)\n      .withFunctionName(\"or\", OrOperation.class)\n      .withFunctionName(\"not\", NotOperation.class)\n      .withFunctionName(\"gt\", GreaterThanOperation.class)\n      .withFunctionName(\"lt\", LessThanOperation.class)\n      .withFunctionName(\"eq\", EqualsOperation.class)\n      .withFunctionName(\"lteq\", LessThanEqualToOperation.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToOperation.class);\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getResourceLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      .withFunctionName(\"and\", AndOperation.class)\n      .withFunctionName(\"or\", OrOperation.class)\n      .withFunctionName(\"not\", NotOperation.class)\n      .withFunctionName(\"gt\", GreaterThanOperation.class)\n      .withFunctionName(\"lt\", LessThanOperation.class)\n      .withFunctionName(\"eq\", EqualsOperation.class)\n      .withFunctionName(\"lteq\", LessThanEqualToOperation.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToOperation.class);\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getResourceLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bd3ba64594a889f0e0224b3a1627b038cced5cf","date":1483845464,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      .withFunctionName(\"and\", AndOperation.class)\n      .withFunctionName(\"or\", OrOperation.class)\n      .withFunctionName(\"not\", NotOperation.class)\n      .withFunctionName(\"gt\", GreaterThanOperation.class)\n      .withFunctionName(\"lt\", LessThanOperation.class)\n      .withFunctionName(\"eq\", EqualsOperation.class)\n      .withFunctionName(\"lteq\", LessThanEqualToOperation.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToOperation.class);\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getResourceLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      .withFunctionName(\"and\", AndOperation.class)\n      .withFunctionName(\"or\", OrOperation.class)\n      .withFunctionName(\"not\", NotOperation.class)\n      .withFunctionName(\"gt\", GreaterThanOperation.class)\n      .withFunctionName(\"lt\", LessThanOperation.class)\n      .withFunctionName(\"eq\", EqualsOperation.class)\n      .withFunctionName(\"lteq\", LessThanEqualToOperation.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToOperation.class);\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getResourceLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      .withFunctionName(\"and\", AndOperation.class)\n      .withFunctionName(\"or\", OrOperation.class)\n      .withFunctionName(\"not\", NotOperation.class)\n      .withFunctionName(\"gt\", GreaterThanOperation.class)\n      .withFunctionName(\"lt\", LessThanOperation.class)\n      .withFunctionName(\"eq\", EqualsOperation.class)\n      .withFunctionName(\"lteq\", LessThanEqualToOperation.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToOperation.class);\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getResourceLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      .withFunctionName(\"and\", AndOperation.class)\n      .withFunctionName(\"or\", OrOperation.class)\n      .withFunctionName(\"not\", NotOperation.class)\n      .withFunctionName(\"gt\", GreaterThanOperation.class)\n      .withFunctionName(\"lt\", LessThanOperation.class)\n      .withFunctionName(\"eq\", EqualsOperation.class)\n      .withFunctionName(\"lteq\", LessThanEqualToOperation.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToOperation.class);\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getResourceLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca2e21c037a55de2a838e082af13eae994f5c5a7","date":1486047682,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      .withFunctionName(\"and\", AndOperation.class)\n      .withFunctionName(\"or\", OrOperation.class)\n      .withFunctionName(\"not\", NotOperation.class)\n      .withFunctionName(\"gt\", GreaterThanOperation.class)\n      .withFunctionName(\"lt\", LessThanOperation.class)\n      .withFunctionName(\"eq\", EqualsOperation.class)\n      .withFunctionName(\"lteq\", LessThanEqualToOperation.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToOperation.class);\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      .withFunctionName(\"and\", AndOperation.class)\n      .withFunctionName(\"or\", OrOperation.class)\n      .withFunctionName(\"not\", NotOperation.class)\n      .withFunctionName(\"gt\", GreaterThanOperation.class)\n      .withFunctionName(\"lt\", LessThanOperation.class)\n      .withFunctionName(\"eq\", EqualsOperation.class)\n      .withFunctionName(\"lteq\", LessThanEqualToOperation.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToOperation.class);\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getResourceLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"88073e8783f450d4c0218decc2f001a1ac2c7e7c","date":1486705191,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n      .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n      .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n      .withFunctionName(\"or\", OrEvaluator.class)\n      \n      // Number Stream Evaluators\n      .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      \n      // Conditional Stream Evaluators\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      .withFunctionName(\"and\", AndOperation.class)\n      .withFunctionName(\"or\", OrOperation.class)\n      .withFunctionName(\"not\", NotOperation.class)\n      .withFunctionName(\"gt\", GreaterThanOperation.class)\n      .withFunctionName(\"lt\", LessThanOperation.class)\n      .withFunctionName(\"eq\", EqualsOperation.class)\n      .withFunctionName(\"lteq\", LessThanEqualToOperation.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToOperation.class);\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f67c3a1123a063e580a2e6ec51b9eb7c273666ce","date":1487877483,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n      .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n      .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n      .withFunctionName(\"or\", OrEvaluator.class)\n      \n      // Number Stream Evaluators\n      .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      \n      // Conditional Stream Evaluators\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n      .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n      .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n      .withFunctionName(\"or\", OrEvaluator.class)\n      \n      // Number Stream Evaluators\n      .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      \n      // Conditional Stream Evaluators\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a0a52a7556a729452c9506796bbba9b339298b4","date":1489111284,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n      .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n      .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n      .withFunctionName(\"or\", OrEvaluator.class)\n      \n      // Number Stream Evaluators\n      .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      // Conditional Stream Evaluators\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n      .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n      .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n      .withFunctionName(\"or\", OrEvaluator.class)\n      \n      // Number Stream Evaluators\n      .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      \n      // Conditional Stream Evaluators\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d492b24eb91b29b3fb6bca5b158bec326fbc12df","date":1490042446,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n      \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n      .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n      .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n      .withFunctionName(\"or\", OrEvaluator.class)\n      \n      // Number Stream Evaluators\n      .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      // Conditional Stream Evaluators\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n      .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n      .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n      .withFunctionName(\"or\", OrEvaluator.class)\n      \n      // Number Stream Evaluators\n      .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      // Conditional Stream Evaluators\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"01624b85de12fb02335810bdf325124e59040772","date":1490254940,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n      \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n      .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n      .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n      .withFunctionName(\"or\", OrEvaluator.class)\n      \n      // Number Stream Evaluators\n      .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      // Conditional Stream Evaluators\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n      \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n      .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n      .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n      .withFunctionName(\"or\", OrEvaluator.class)\n      \n      // Number Stream Evaluators\n      .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      // Conditional Stream Evaluators\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"869bbd0c59fee20268facd5a2e0d3c77e34500ed","date":1490280012,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n      \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n      .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n      .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n      .withFunctionName(\"or\", OrEvaluator.class)\n      \n      // Number Stream Evaluators\n      .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      // Conditional Stream Evaluators\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n      .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n      .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n      .withFunctionName(\"or\", OrEvaluator.class)\n      \n      // Number Stream Evaluators\n      .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      // Conditional Stream Evaluators\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f4c5d3859373c3a74734e85efa122b17514e3e8","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n      \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n      .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n      .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n      .withFunctionName(\"or\", OrEvaluator.class)\n      \n      // Number Stream Evaluators\n      .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      // Conditional Stream Evaluators\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(\"sort\", SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n      \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n      .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n      .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n      .withFunctionName(\"or\", OrEvaluator.class)\n      \n      // Number Stream Evaluators\n      .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      // Conditional Stream Evaluators\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b28ad83652f81775fa37359636d0bfe523590199","date":1490892787,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n      \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n      .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n      .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n      .withFunctionName(\"or\", OrEvaluator.class)\n      \n      // Number Stream Evaluators\n      .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      // Conditional Stream Evaluators\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n      \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n      .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n      .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n      .withFunctionName(\"or\", OrEvaluator.class)\n      \n      // Number Stream Evaluators\n      .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      // Conditional Stream Evaluators\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6c3f4197ce8687fa9dc92965c98136ebbc430430","date":1490968656,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n      \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n      .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n      .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n      .withFunctionName(\"or\", OrEvaluator.class)\n      \n      // Number Stream Evaluators\n      .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      // Conditional Stream Evaluators\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n      \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n      .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n      .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n      .withFunctionName(\"or\", OrEvaluator.class)\n      \n      // Number Stream Evaluators\n      .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      // Conditional Stream Evaluators\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c73f5c06ecda4281a8efee68d5fb9dafb92c1c4","date":1491098284,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n      \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n      .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n      .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n      .withFunctionName(\"or\", OrEvaluator.class)\n      \n      // Number Stream Evaluators\n      .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n      .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n      .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      \n      // Conditional Stream Evaluators\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n      \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n      .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n      .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n      .withFunctionName(\"or\", OrEvaluator.class)\n      \n      // Number Stream Evaluators\n      .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      // Conditional Stream Evaluators\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2e185d25be61374920453beaa1d97ab8e39b20f9","date":1491102943,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n      \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n      .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n      .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n      .withFunctionName(\"or\", OrEvaluator.class)\n      \n      // Number Stream Evaluators\n      .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n      .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n      .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      \n      // Conditional Stream Evaluators\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n      \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n      .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n      .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n      .withFunctionName(\"or\", OrEvaluator.class)\n      \n      // Number Stream Evaluators\n      .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n      .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n      .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      \n      // Conditional Stream Evaluators\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d97e737ece4381771c200f1c5030a5a167c09977","date":1491219821,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n      \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n      .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n      .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n      .withFunctionName(\"or\", OrEvaluator.class)\n      \n      // Number Stream Evaluators\n      .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n      .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n      .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      \n      // Conditional Stream Evaluators\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n      \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n      .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n      .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n      .withFunctionName(\"or\", OrEvaluator.class)\n      \n      // Number Stream Evaluators\n      .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      // Conditional Stream Evaluators\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b868bc7317f42f38ddb1b56b9b4a5dcc2e22a12d","date":1491219821,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n      \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n      .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n      .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n      .withFunctionName(\"or\", OrEvaluator.class)\n      \n      // Number Stream Evaluators\n      .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n      .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n      .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      \n      // Conditional Stream Evaluators\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n      \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n      .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n      .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n      .withFunctionName(\"or\", OrEvaluator.class)\n      \n      // Number Stream Evaluators\n      .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n      .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n      .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      \n      // Conditional Stream Evaluators\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3510ce0f14712dae98c9909e07f0bf63b5d5a208","date":1491296429,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n      \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n      .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n      .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n      .withFunctionName(\"or\", OrEvaluator.class)\n      \n      // Number Stream Evaluators\n      .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n      .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n      .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n      // Conditional Stream Evaluators\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n      \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n      .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n      .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n      .withFunctionName(\"or\", OrEvaluator.class)\n      \n      // Number Stream Evaluators\n      .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n      .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n      .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      \n      // Conditional Stream Evaluators\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11e5446472f245825b6f1cc220252acaab5990cf","date":1491429444,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n      .withFunctionName(\"shuffle\", ShuffleStream.class)\n      \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n      .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n      .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n      .withFunctionName(\"or\", OrEvaluator.class)\n      \n      // Number Stream Evaluators\n      .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n      .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n      .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      \n      // Conditional Stream Evaluators\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n      \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n      .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n      .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n      .withFunctionName(\"or\", OrEvaluator.class)\n      \n      // Number Stream Evaluators\n      .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n      .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n      .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      \n      // Conditional Stream Evaluators\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"431fcaec9cce0a765cb0d341b8e4e51f133e6519","date":1492023302,"type":3,"author":"Gethin James","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n      .withFunctionName(\"shuffle\", ShuffleStream.class)\n      \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n      .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n      .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n      .withFunctionName(\"or\", OrEvaluator.class)\n      \n      // Number Stream Evaluators\n      .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n      .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n      .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n      // Conditional Stream Evaluators\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n      ;\n\n      // Date evaluators\n      for (DateEvaluator.FUNCTION function:DateEvaluator.FUNCTION.values()) {\n        streamFactory.withFunctionName(function.toString(), DateEvaluator.class);\n      }\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n      .withFunctionName(\"shuffle\", ShuffleStream.class)\n      \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n      .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n      .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n      .withFunctionName(\"or\", OrEvaluator.class)\n      \n      // Number Stream Evaluators\n      .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n      .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n      .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      \n      // Conditional Stream Evaluators\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"40b789607c421011dabf36a935528a74fb8b2032","date":1492023606,"type":3,"author":"Gethin James","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n      .withFunctionName(\"shuffle\", ShuffleStream.class)\n      \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n      .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n      .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n      .withFunctionName(\"or\", OrEvaluator.class)\n      \n      // Number Stream Evaluators\n      .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n      .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n      .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n      // Conditional Stream Evaluators\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n      ;\n\n      // Date evaluators\n      for (DatePartEvaluator.FUNCTION function: DatePartEvaluator.FUNCTION.values()) {\n        streamFactory.withFunctionName(function.toString(), DatePartEvaluator.class);\n      }\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n      .withFunctionName(\"shuffle\", ShuffleStream.class)\n      \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n      .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n      .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n      .withFunctionName(\"or\", OrEvaluator.class)\n      \n      // Number Stream Evaluators\n      .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n      .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n      .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n      // Conditional Stream Evaluators\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n      ;\n\n      // Date evaluators\n      for (DateEvaluator.FUNCTION function:DateEvaluator.FUNCTION.values()) {\n        streamFactory.withFunctionName(function.toString(), DateEvaluator.class);\n      }\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"64ff6b743fd4051da7ebb3d397d1ef80833a741a","date":1492023891,"type":3,"author":"Gethin James","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n      .withFunctionName(\"shuffle\", ShuffleStream.class)\n      \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n      .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n      .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n      .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n      .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n      .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n      .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n      .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n      .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n      .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n      .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n      .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n      .withFunctionName(\"shuffle\", ShuffleStream.class)\n      \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n      .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n      .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n      .withFunctionName(\"or\", OrEvaluator.class)\n      \n      // Number Stream Evaluators\n      .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n      .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n      .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n      // Conditional Stream Evaluators\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n      ;\n\n      // Date evaluators\n      for (DatePartEvaluator.FUNCTION function: DatePartEvaluator.FUNCTION.values()) {\n        streamFactory.withFunctionName(function.toString(), DatePartEvaluator.class);\n      }\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56ebde9c21d35a39c07989c178372e901ad377da","date":1492023892,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n         .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n         .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n\n             // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n      .withFunctionName(\"shuffle\", ShuffleStream.class)\n      \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n      .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n      .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n      .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n      .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n      .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n      .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n      .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n      .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n      .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n      .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n      .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"39e68504a385449bfdc498cfda2909b581df36f1","date":1492032414,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n         .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n         .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n\n             // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n         .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n         .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n\n             // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"34eb3bf8ada71f6afb6bcdd968899b648efdfe29","date":1492032414,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n         .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n         .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"eval\", CalculatorStream.class)\n\n             // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n         .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n         .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n\n             // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n         .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n         .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"eval\", CalculatorStream.class)\n\n             // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n         .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n         .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"eval\", CalculatorStream.class)\n\n             // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c84219732de95c058a8de66ece93c70ad1b1051c","date":1492441745,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n         .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n         .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"eval\", CalculatorStream.class)\n\n             // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n         .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n         .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"eval\", CalculatorStream.class)\n\n             // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"02ea5e7557bd3b8122b9b4b0888a49ad82d49288","date":1492528894,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n         .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n         .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"eval\", CalculatorStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n\n             // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n         .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n         .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"eval\", CalculatorStream.class)\n\n             // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"07fea5b5bf158068276d360734dfc547c12af28e","date":1492563396,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n\n             // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n         .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n         .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"eval\", CalculatorStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n\n             // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n\n             // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n      .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n      \n      // metrics\n      .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n      .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n      .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n      .withFunctionName(\"or\", OrEvaluator.class)\n      \n      // Number Stream Evaluators\n      .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n      .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n      .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n      // Conditional Stream Evaluators\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"014c3fc2ef9621f91a3786f1055913d8fa10d0df","date":1492893542,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n\n             // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fea36811326410bd8200ab06f9067dcea141d903","date":1493079557,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c35d3c01114129fff707f0777080210fa9deb2a7","date":1493219863,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7","date":1493327009,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"20062baf87e01a6477547383269fb3d7488411fd","date":1493409286,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"493580e5de476ed58276704923abef78ca0c07a0","date":1494185061,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c149f345c46f0fa905442bb227054fd828833611","date":1494204159,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7464a997c27c4f49635170fc6bebdc9b7076ee64","date":1494251633,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"807005c99d2f1db14e67f84c60b9a5be2ce93974","date":1494295491,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e0d52d245d8b98e69545a7712a607adee18d6ff2","date":1494471557,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n      .withFunctionName(\"rev\", ReverseEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b31ebc7a867ddea79d438a8fca876a94e644d11a","date":1494496172,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n      .withFunctionName(\"rev\", ReverseEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"360b3962efc30aa8b2c39c3087aa36069674bbe7","date":1494557674,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n      .withFunctionName(\"rev\", ReverseEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"604747d0b7df2eee9c650f4db434dae392fabbfa","date":1494861964,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n      .withFunctionName(\"rev\", ReverseEvaluator.class)\n      .withFunctionName(\"length\", LengthEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n      .withFunctionName(\"rev\", ReverseEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dd6a53b9ba9722b0f89d0f554e8ee0ca56ccd807","date":1494861965,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n      .withFunctionName(\"rev\", ReverseEvaluator.class)\n      .withFunctionName(\"length\", LengthEvaluator.class)\n      .withFunctionName(\"rank\", RankEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n      .withFunctionName(\"rev\", ReverseEvaluator.class)\n      .withFunctionName(\"length\", LengthEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2e9906d88442b60ca781f22a5a2889f5b55405ab","date":1494861965,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n      .withFunctionName(\"rev\", ReverseEvaluator.class)\n      .withFunctionName(\"length\", LengthEvaluator.class)\n      .withFunctionName(\"rank\", RankEvaluator.class)\n      .withFunctionName(\"scale\", ScaleEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n      .withFunctionName(\"rev\", ReverseEvaluator.class)\n      .withFunctionName(\"length\", LengthEvaluator.class)\n      .withFunctionName(\"rank\", RankEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5968426c5e8ed6fc30566c0b1ef0d99e4bbfa89d","date":1494861965,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n      .withFunctionName(\"rev\", ReverseEvaluator.class)\n      .withFunctionName(\"length\", LengthEvaluator.class)\n      .withFunctionName(\"rank\", RankEvaluator.class)\n      .withFunctionName(\"scale\", ScaleEvaluator.class)\n      .withFunctionName(\"distance\", DistanceEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n      .withFunctionName(\"rev\", ReverseEvaluator.class)\n      .withFunctionName(\"length\", LengthEvaluator.class)\n      .withFunctionName(\"rank\", RankEvaluator.class)\n      .withFunctionName(\"scale\", ScaleEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c0f69522aa66ecee0518b3ea6d49afa08d03f588","date":1494874995,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n      .withFunctionName(\"rev\", ReverseEvaluator.class)\n      .withFunctionName(\"length\", LengthEvaluator.class)\n      .withFunctionName(\"rank\", RankEvaluator.class)\n      .withFunctionName(\"scale\", ScaleEvaluator.class)\n      .withFunctionName(\"distance\", DistanceEvaluator.class)\n      .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n      .withFunctionName(\"rev\", ReverseEvaluator.class)\n      .withFunctionName(\"length\", LengthEvaluator.class)\n      .withFunctionName(\"rank\", RankEvaluator.class)\n      .withFunctionName(\"scale\", ScaleEvaluator.class)\n      .withFunctionName(\"distance\", DistanceEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8b4d567cfa76681fe80b621fd74a673d7db7937b","date":1494979945,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n      .withFunctionName(\"rev\", ReverseEvaluator.class)\n      .withFunctionName(\"length\", LengthEvaluator.class)\n      .withFunctionName(\"rank\", RankEvaluator.class)\n      .withFunctionName(\"scale\", ScaleEvaluator.class)\n      .withFunctionName(\"distance\", DistanceEvaluator.class)\n      .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n      .withFunctionName(\"percentile\", PercentileEvaluator.class)\n      .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n      .withFunctionName(\"rev\", ReverseEvaluator.class)\n      .withFunctionName(\"length\", LengthEvaluator.class)\n      .withFunctionName(\"rank\", RankEvaluator.class)\n      .withFunctionName(\"scale\", ScaleEvaluator.class)\n      .withFunctionName(\"distance\", DistanceEvaluator.class)\n      .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f","date":1495081498,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n      .withFunctionName(\"rev\", ReverseEvaluator.class)\n      .withFunctionName(\"length\", LengthEvaluator.class)\n      .withFunctionName(\"rank\", RankEvaluator.class)\n      .withFunctionName(\"scale\", ScaleEvaluator.class)\n      .withFunctionName(\"distance\", DistanceEvaluator.class)\n      .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n      .withFunctionName(\"percentile\", PercentileEvaluator.class)\n      .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n      .withFunctionName(\"rev\", ReverseEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37ba6c2d18fe05b92cb264c3d67e4cae76f75136","date":1495126259,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"sql\", SqlStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n      .withFunctionName(\"rev\", ReverseEvaluator.class)\n      .withFunctionName(\"length\", LengthEvaluator.class)\n      .withFunctionName(\"rank\", RankEvaluator.class)\n      .withFunctionName(\"scale\", ScaleEvaluator.class)\n      .withFunctionName(\"distance\", DistanceEvaluator.class)\n      .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n      .withFunctionName(\"percentile\", PercentileEvaluator.class)\n      .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n      .withFunctionName(\"rev\", ReverseEvaluator.class)\n      .withFunctionName(\"length\", LengthEvaluator.class)\n      .withFunctionName(\"rank\", RankEvaluator.class)\n      .withFunctionName(\"scale\", ScaleEvaluator.class)\n      .withFunctionName(\"distance\", DistanceEvaluator.class)\n      .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n      .withFunctionName(\"percentile\", PercentileEvaluator.class)\n      .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cfa3201cec3c57a0e58cfcf72cb47d21180d5c5","date":1495492928,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"sql\", SqlStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n      .withFunctionName(\"rev\", ReverseEvaluator.class)\n      .withFunctionName(\"length\", LengthEvaluator.class)\n      .withFunctionName(\"rank\", RankEvaluator.class)\n      .withFunctionName(\"scale\", ScaleEvaluator.class)\n      .withFunctionName(\"distance\", DistanceEvaluator.class)\n      .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n      .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n      .withFunctionName(\"percentile\", PercentileEvaluator.class)\n      .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"sql\", SqlStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n      .withFunctionName(\"rev\", ReverseEvaluator.class)\n      .withFunctionName(\"length\", LengthEvaluator.class)\n      .withFunctionName(\"rank\", RankEvaluator.class)\n      .withFunctionName(\"scale\", ScaleEvaluator.class)\n      .withFunctionName(\"distance\", DistanceEvaluator.class)\n      .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n      .withFunctionName(\"percentile\", PercentileEvaluator.class)\n      .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ea18ed1e4681b4ce672ca80f943642f049c2b140","date":1495492929,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"sql\", SqlStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n      .withFunctionName(\"rev\", ReverseEvaluator.class)\n      .withFunctionName(\"length\", LengthEvaluator.class)\n      .withFunctionName(\"rank\", RankEvaluator.class)\n      .withFunctionName(\"scale\", ScaleEvaluator.class)\n      .withFunctionName(\"distance\", DistanceEvaluator.class)\n      .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n      .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n      .withFunctionName(\"percentile\", PercentileEvaluator.class)\n      .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n      .withFunctionName(\"describe\", DescribeEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"sql\", SqlStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n      .withFunctionName(\"rev\", ReverseEvaluator.class)\n      .withFunctionName(\"length\", LengthEvaluator.class)\n      .withFunctionName(\"rank\", RankEvaluator.class)\n      .withFunctionName(\"scale\", ScaleEvaluator.class)\n      .withFunctionName(\"distance\", DistanceEvaluator.class)\n      .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n      .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n      .withFunctionName(\"percentile\", PercentileEvaluator.class)\n      .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"876a7de1b2da8fe9fa734ac0aba2c979a1c3daab","date":1495627141,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      .withFunctionName(\"knn\", KnnStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"sql\", SqlStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n      .withFunctionName(\"rev\", ReverseEvaluator.class)\n      .withFunctionName(\"length\", LengthEvaluator.class)\n      .withFunctionName(\"rank\", RankEvaluator.class)\n      .withFunctionName(\"scale\", ScaleEvaluator.class)\n      .withFunctionName(\"distance\", DistanceEvaluator.class)\n      .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n      .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n      .withFunctionName(\"percentile\", PercentileEvaluator.class)\n      .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n      .withFunctionName(\"describe\", DescribeEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"sql\", SqlStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n      .withFunctionName(\"rev\", ReverseEvaluator.class)\n      .withFunctionName(\"length\", LengthEvaluator.class)\n      .withFunctionName(\"rank\", RankEvaluator.class)\n      .withFunctionName(\"scale\", ScaleEvaluator.class)\n      .withFunctionName(\"distance\", DistanceEvaluator.class)\n      .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n      .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n      .withFunctionName(\"percentile\", PercentileEvaluator.class)\n      .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n      .withFunctionName(\"describe\", DescribeEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d5af4cf979f31a72154bab227890da4561b327a3","date":1495645850,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      .withFunctionName(\"knn\", KnnStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"sql\", SqlStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n      .withFunctionName(\"rev\", ReverseEvaluator.class)\n      .withFunctionName(\"length\", LengthEvaluator.class)\n      .withFunctionName(\"rank\", RankEvaluator.class)\n      .withFunctionName(\"scale\", ScaleEvaluator.class)\n      .withFunctionName(\"distance\", DistanceEvaluator.class)\n      .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n      .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n      .withFunctionName(\"percentile\", PercentileEvaluator.class)\n      .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n      .withFunctionName(\"describe\", DescribeEvaluator.class)\n      .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      .withFunctionName(\"knn\", KnnStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"sql\", SqlStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n      .withFunctionName(\"rev\", ReverseEvaluator.class)\n      .withFunctionName(\"length\", LengthEvaluator.class)\n      .withFunctionName(\"rank\", RankEvaluator.class)\n      .withFunctionName(\"scale\", ScaleEvaluator.class)\n      .withFunctionName(\"distance\", DistanceEvaluator.class)\n      .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n      .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n      .withFunctionName(\"percentile\", PercentileEvaluator.class)\n      .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n      .withFunctionName(\"describe\", DescribeEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54be12ea07016c62a5bea4176bb1049699734509","date":1495725615,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      .withFunctionName(\"knn\", KnnStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"sql\", SqlStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n      .withFunctionName(\"rev\", ReverseEvaluator.class)\n      .withFunctionName(\"length\", LengthEvaluator.class)\n      .withFunctionName(\"rank\", RankEvaluator.class)\n      .withFunctionName(\"scale\", ScaleEvaluator.class)\n      .withFunctionName(\"distance\", DistanceEvaluator.class)\n      .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n      .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n      .withFunctionName(\"percentile\", PercentileEvaluator.class)\n      .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n      .withFunctionName(\"describe\", DescribeEvaluator.class)\n      .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n      .withFunctionName(\"sequence\", SequenceEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      .withFunctionName(\"knn\", KnnStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"sql\", SqlStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n      .withFunctionName(\"rev\", ReverseEvaluator.class)\n      .withFunctionName(\"length\", LengthEvaluator.class)\n      .withFunctionName(\"rank\", RankEvaluator.class)\n      .withFunctionName(\"scale\", ScaleEvaluator.class)\n      .withFunctionName(\"distance\", DistanceEvaluator.class)\n      .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n      .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n      .withFunctionName(\"percentile\", PercentileEvaluator.class)\n      .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n      .withFunctionName(\"describe\", DescribeEvaluator.class)\n      .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"68cfd3a389f231b8fe23dae4d0ddb2463e79b525","date":1495808626,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      .withFunctionName(\"knn\", KnnStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"sql\", SqlStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n      .withFunctionName(\"rev\", ReverseEvaluator.class)\n      .withFunctionName(\"length\", LengthEvaluator.class)\n      .withFunctionName(\"rank\", RankEvaluator.class)\n      .withFunctionName(\"scale\", ScaleEvaluator.class)\n      .withFunctionName(\"distance\", DistanceEvaluator.class)\n      .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n      .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n      .withFunctionName(\"percentile\", PercentileEvaluator.class)\n      .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n      .withFunctionName(\"describe\", DescribeEvaluator.class)\n      .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n      .withFunctionName(\"sequence\", SequenceEvaluator.class)\n      .withFunctionName(\"array\", ArrayEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      .withFunctionName(\"knn\", KnnStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"sql\", SqlStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n      .withFunctionName(\"rev\", ReverseEvaluator.class)\n      .withFunctionName(\"length\", LengthEvaluator.class)\n      .withFunctionName(\"rank\", RankEvaluator.class)\n      .withFunctionName(\"scale\", ScaleEvaluator.class)\n      .withFunctionName(\"distance\", DistanceEvaluator.class)\n      .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n      .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n      .withFunctionName(\"percentile\", PercentileEvaluator.class)\n      .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n      .withFunctionName(\"describe\", DescribeEvaluator.class)\n      .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n      .withFunctionName(\"sequence\", SequenceEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e658df03b60f618dc6303e3d124a212cd449e2a","date":1495820495,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      .withFunctionName(\"knn\", KnnStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"sql\", SqlStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n      .withFunctionName(\"rev\", ReverseEvaluator.class)\n      .withFunctionName(\"length\", LengthEvaluator.class)\n      .withFunctionName(\"rank\", RankEvaluator.class)\n      .withFunctionName(\"scale\", ScaleEvaluator.class)\n      .withFunctionName(\"distance\", DistanceEvaluator.class)\n      .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n      .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n      .withFunctionName(\"percentile\", PercentileEvaluator.class)\n      .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n      .withFunctionName(\"describe\", DescribeEvaluator.class)\n      .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n      .withFunctionName(\"sequence\", SequenceEvaluator.class)\n      .withFunctionName(\"array\", ArrayEvaluator.class)\n      .withFunctionName(\"hist\", HistogramEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      .withFunctionName(\"knn\", KnnStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"sql\", SqlStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n      .withFunctionName(\"rev\", ReverseEvaluator.class)\n      .withFunctionName(\"length\", LengthEvaluator.class)\n      .withFunctionName(\"rank\", RankEvaluator.class)\n      .withFunctionName(\"scale\", ScaleEvaluator.class)\n      .withFunctionName(\"distance\", DistanceEvaluator.class)\n      .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n      .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n      .withFunctionName(\"percentile\", PercentileEvaluator.class)\n      .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n      .withFunctionName(\"describe\", DescribeEvaluator.class)\n      .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n      .withFunctionName(\"sequence\", SequenceEvaluator.class)\n      .withFunctionName(\"array\", ArrayEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7d81c8cf020ec9c6cead8805f9ad276d24d9373b","date":1496105305,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      .withFunctionName(\"knn\", KnnStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"sql\", SqlStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n      .withFunctionName(\"rev\", ReverseEvaluator.class)\n      .withFunctionName(\"length\", LengthEvaluator.class)\n      .withFunctionName(\"rank\", RankEvaluator.class)\n      .withFunctionName(\"scale\", ScaleEvaluator.class)\n      .withFunctionName(\"distance\", DistanceEvaluator.class)\n      .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n      .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n      .withFunctionName(\"percentile\", PercentileEvaluator.class)\n      .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n      .withFunctionName(\"describe\", DescribeEvaluator.class)\n      .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n      .withFunctionName(\"sequence\", SequenceEvaluator.class)\n      .withFunctionName(\"array\", ArrayEvaluator.class)\n      .withFunctionName(\"hist\", HistogramEvaluator.class)\n      .withFunctionName(\"anova\", AnovaEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      .withFunctionName(\"knn\", KnnStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"sql\", SqlStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n      .withFunctionName(\"rev\", ReverseEvaluator.class)\n      .withFunctionName(\"length\", LengthEvaluator.class)\n      .withFunctionName(\"rank\", RankEvaluator.class)\n      .withFunctionName(\"scale\", ScaleEvaluator.class)\n      .withFunctionName(\"distance\", DistanceEvaluator.class)\n      .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n      .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n      .withFunctionName(\"percentile\", PercentileEvaluator.class)\n      .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n      .withFunctionName(\"describe\", DescribeEvaluator.class)\n      .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n      .withFunctionName(\"sequence\", SequenceEvaluator.class)\n      .withFunctionName(\"array\", ArrayEvaluator.class)\n      .withFunctionName(\"hist\", HistogramEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8d72016dc7cdd30c37b9ce97b62fd3cc30f5c9e8","date":1496157043,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      .withFunctionName(\"knn\", KnnStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"sql\", SqlStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n      .withFunctionName(\"rev\", ReverseEvaluator.class)\n      .withFunctionName(\"length\", LengthEvaluator.class)\n      .withFunctionName(\"rank\", RankEvaluator.class)\n      .withFunctionName(\"scale\", ScaleEvaluator.class)\n      .withFunctionName(\"distance\", DistanceEvaluator.class)\n      .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n      .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n      .withFunctionName(\"percentile\", PercentileEvaluator.class)\n      .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n      .withFunctionName(\"describe\", DescribeEvaluator.class)\n      .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n      .withFunctionName(\"sequence\", SequenceEvaluator.class)\n      .withFunctionName(\"array\", ArrayEvaluator.class)\n      .withFunctionName(\"hist\", HistogramEvaluator.class)\n      .withFunctionName(\"anova\", AnovaEvaluator.class)\n      .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      .withFunctionName(\"knn\", KnnStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"sql\", SqlStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n      .withFunctionName(\"rev\", ReverseEvaluator.class)\n      .withFunctionName(\"length\", LengthEvaluator.class)\n      .withFunctionName(\"rank\", RankEvaluator.class)\n      .withFunctionName(\"scale\", ScaleEvaluator.class)\n      .withFunctionName(\"distance\", DistanceEvaluator.class)\n      .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n      .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n      .withFunctionName(\"percentile\", PercentileEvaluator.class)\n      .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n      .withFunctionName(\"describe\", DescribeEvaluator.class)\n      .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n      .withFunctionName(\"sequence\", SequenceEvaluator.class)\n      .withFunctionName(\"array\", ArrayEvaluator.class)\n      .withFunctionName(\"hist\", HistogramEvaluator.class)\n      .withFunctionName(\"anova\", AnovaEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      .withFunctionName(\"knn\", KnnStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"sql\", SqlStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n      .withFunctionName(\"rev\", ReverseEvaluator.class)\n      .withFunctionName(\"length\", LengthEvaluator.class)\n      .withFunctionName(\"rank\", RankEvaluator.class)\n      .withFunctionName(\"scale\", ScaleEvaluator.class)\n      .withFunctionName(\"distance\", DistanceEvaluator.class)\n      .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n      .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n      .withFunctionName(\"percentile\", PercentileEvaluator.class)\n      .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n      .withFunctionName(\"describe\", DescribeEvaluator.class)\n      .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n      .withFunctionName(\"sequence\", SequenceEvaluator.class)\n      .withFunctionName(\"array\", ArrayEvaluator.class)\n      .withFunctionName(\"hist\", HistogramEvaluator.class)\n      .withFunctionName(\"anova\", AnovaEvaluator.class)\n      .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      .withFunctionName(\"knn\", KnnStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"sql\", SqlStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n      .withFunctionName(\"rev\", ReverseEvaluator.class)\n      .withFunctionName(\"length\", LengthEvaluator.class)\n      .withFunctionName(\"rank\", RankEvaluator.class)\n      .withFunctionName(\"scale\", ScaleEvaluator.class)\n      .withFunctionName(\"distance\", DistanceEvaluator.class)\n      .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n      .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n      .withFunctionName(\"percentile\", PercentileEvaluator.class)\n      .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n      .withFunctionName(\"describe\", DescribeEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c5156e47b791bd464473781bacfd0f1a03130a6b","date":1496675957,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      .withFunctionName(\"knn\", KnnStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"sql\", SqlStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n      .withFunctionName(\"rev\", ReverseEvaluator.class)\n      .withFunctionName(\"length\", LengthEvaluator.class)\n      .withFunctionName(\"rank\", RankEvaluator.class)\n      .withFunctionName(\"scale\", ScaleEvaluator.class)\n      .withFunctionName(\"distance\", DistanceEvaluator.class)\n      .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n      .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n      .withFunctionName(\"percentile\", PercentileEvaluator.class)\n      .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n      .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n      .withFunctionName(\"describe\", DescribeEvaluator.class)\n      .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n      .withFunctionName(\"sequence\", SequenceEvaluator.class)\n      .withFunctionName(\"array\", ArrayEvaluator.class)\n      .withFunctionName(\"hist\", HistogramEvaluator.class)\n      .withFunctionName(\"anova\", AnovaEvaluator.class)\n      .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      .withFunctionName(\"knn\", KnnStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"sql\", SqlStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n      .withFunctionName(\"rev\", ReverseEvaluator.class)\n      .withFunctionName(\"length\", LengthEvaluator.class)\n      .withFunctionName(\"rank\", RankEvaluator.class)\n      .withFunctionName(\"scale\", ScaleEvaluator.class)\n      .withFunctionName(\"distance\", DistanceEvaluator.class)\n      .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n      .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n      .withFunctionName(\"percentile\", PercentileEvaluator.class)\n      .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n      .withFunctionName(\"describe\", DescribeEvaluator.class)\n      .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n      .withFunctionName(\"sequence\", SequenceEvaluator.class)\n      .withFunctionName(\"array\", ArrayEvaluator.class)\n      .withFunctionName(\"hist\", HistogramEvaluator.class)\n      .withFunctionName(\"anova\", AnovaEvaluator.class)\n      .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"53532a40300123386304e8ffd97c1df9cf57ab94","date":1496675957,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      .withFunctionName(\"knn\", KnnStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"sql\", SqlStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n      .withFunctionName(\"rev\", ReverseEvaluator.class)\n      .withFunctionName(\"length\", LengthEvaluator.class)\n      .withFunctionName(\"rank\", RankEvaluator.class)\n      .withFunctionName(\"scale\", ScaleEvaluator.class)\n      .withFunctionName(\"distance\", DistanceEvaluator.class)\n      .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n      .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n      .withFunctionName(\"percentile\", PercentileEvaluator.class)\n      .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n      .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n      .withFunctionName(\"describe\", DescribeEvaluator.class)\n      .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n      .withFunctionName(\"sequence\", SequenceEvaluator.class)\n      .withFunctionName(\"array\", ArrayEvaluator.class)\n      .withFunctionName(\"hist\", HistogramEvaluator.class)\n      .withFunctionName(\"anova\", AnovaEvaluator.class)\n      .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n      .withFunctionName(\"arraySort\", ArraySortEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      .withFunctionName(\"knn\", KnnStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"sql\", SqlStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n      .withFunctionName(\"rev\", ReverseEvaluator.class)\n      .withFunctionName(\"length\", LengthEvaluator.class)\n      .withFunctionName(\"rank\", RankEvaluator.class)\n      .withFunctionName(\"scale\", ScaleEvaluator.class)\n      .withFunctionName(\"distance\", DistanceEvaluator.class)\n      .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n      .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n      .withFunctionName(\"percentile\", PercentileEvaluator.class)\n      .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n      .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n      .withFunctionName(\"describe\", DescribeEvaluator.class)\n      .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n      .withFunctionName(\"sequence\", SequenceEvaluator.class)\n      .withFunctionName(\"array\", ArrayEvaluator.class)\n      .withFunctionName(\"hist\", HistogramEvaluator.class)\n      .withFunctionName(\"anova\", AnovaEvaluator.class)\n      .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      .withFunctionName(\"knn\", KnnStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"sql\", SqlStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n      .withFunctionName(\"rev\", ReverseEvaluator.class)\n      .withFunctionName(\"length\", LengthEvaluator.class)\n      .withFunctionName(\"rank\", RankEvaluator.class)\n      .withFunctionName(\"scale\", ScaleEvaluator.class)\n      .withFunctionName(\"distance\", DistanceEvaluator.class)\n      .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n      .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n      .withFunctionName(\"percentile\", PercentileEvaluator.class)\n      .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n      .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n      .withFunctionName(\"describe\", DescribeEvaluator.class)\n      .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n      .withFunctionName(\"sequence\", SequenceEvaluator.class)\n      .withFunctionName(\"array\", ArrayEvaluator.class)\n      .withFunctionName(\"hist\", HistogramEvaluator.class)\n      .withFunctionName(\"anova\", AnovaEvaluator.class)\n      .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n      .withFunctionName(\"arraySort\", ArraySortEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n\n             // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2ca4206e5497c29b07a997ea7fc47d3bac0a352","date":1497801058,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n\n        \n        // Boolean Stream Evaluators\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualsEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      .withFunctionName(\"knn\", KnnStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"sql\", SqlStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n      .withFunctionName(\"rev\", ReverseEvaluator.class)\n      .withFunctionName(\"length\", LengthEvaluator.class)\n      .withFunctionName(\"rank\", RankEvaluator.class)\n      .withFunctionName(\"scale\", ScaleEvaluator.class)\n      .withFunctionName(\"distance\", DistanceEvaluator.class)\n      .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n      .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n      .withFunctionName(\"percentile\", PercentileEvaluator.class)\n      .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n      .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n      .withFunctionName(\"describe\", DescribeEvaluator.class)\n      .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n      .withFunctionName(\"sequence\", SequenceEvaluator.class)\n      .withFunctionName(\"array\", ArrayEvaluator.class)\n      .withFunctionName(\"hist\", HistogramEvaluator.class)\n      .withFunctionName(\"anova\", AnovaEvaluator.class)\n      .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n      .withFunctionName(\"arraySort\", ArraySortEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":["d7ced979f39d7651addfc7d805e1d9bfac215822"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n\n        \n        // Boolean Stream Evaluators\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualsEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      .withFunctionName(\"knn\", KnnStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"sql\", SqlStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n      .withFunctionName(\"rev\", ReverseEvaluator.class)\n      .withFunctionName(\"length\", LengthEvaluator.class)\n      .withFunctionName(\"rank\", RankEvaluator.class)\n      .withFunctionName(\"scale\", ScaleEvaluator.class)\n      .withFunctionName(\"distance\", DistanceEvaluator.class)\n      .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n      .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n      .withFunctionName(\"percentile\", PercentileEvaluator.class)\n      .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n      .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n      .withFunctionName(\"describe\", DescribeEvaluator.class)\n      .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n      .withFunctionName(\"sequence\", SequenceEvaluator.class)\n      .withFunctionName(\"array\", ArrayEvaluator.class)\n      .withFunctionName(\"hist\", HistogramEvaluator.class)\n      .withFunctionName(\"anova\", AnovaEvaluator.class)\n      .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n      .withFunctionName(\"arraySort\", ArraySortEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n\n        \n        // Boolean Stream Evaluators\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualsEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    \n    /* The stream factory will always contain the zkUrl for the given collection\n     * Adds default streams with their corresponding function names. These \n     * defaults can be overridden or added to in the solrConfig in the stream \n     * RequestHandler def. Example config override\n     *  <lst name=\"streamFunctions\">\n     *    <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *    <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     *  </lst>\n     * */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if(coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n                                  defaultZkhost,\n                                  clientCache);\n    }\n\n     streamFactory\n       // source streams\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"facet\", FacetStream.class)\n      .withFunctionName(\"update\", UpdateStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class)\n      .withFunctionName(\"topic\", TopicStream.class)\n      .withFunctionName(\"commit\", CommitStream.class)\n      .withFunctionName(\"random\", RandomStream.class)\n      .withFunctionName(\"knn\", KnnStream.class)\n      \n      // decorator streams\n      .withFunctionName(\"merge\", MergeStream.class)\n      .withFunctionName(\"unique\", UniqueStream.class)\n      .withFunctionName(\"top\", RankStream.class)\n      .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"reduce\", ReducerStream.class)\n      .withFunctionName(\"parallel\", ParallelStream.class)\n      .withFunctionName(\"rollup\", RollupStream.class)\n      .withFunctionName(\"stats\", StatsStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class) \n      .withFunctionName(\"hashJoin\", HashJoinStream.class)\n      .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n      .withFunctionName(\"intersect\", IntersectStream.class)\n      .withFunctionName(\"complement\", ComplementStream.class)\n      .withFunctionName(SORT, SortStream.class)\n      .withFunctionName(\"train\", TextLogitStream.class)\n      .withFunctionName(\"features\", FeaturesSelectionStream.class)\n      .withFunctionName(\"daemon\", DaemonStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n      .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n      .withFunctionName(\"nodes\", GatherNodesStream.class)\n      .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n      .withFunctionName(\"model\", ModelStream.class)\n      .withFunctionName(\"classify\", ClassifyStream.class)\n      .withFunctionName(\"fetch\", FetchStream.class)\n      .withFunctionName(\"executor\", ExecutorStream.class)\n      .withFunctionName(\"null\", NullStream.class)\n      .withFunctionName(\"priority\", PriorityStream.class)\n         .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n      .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n         .withFunctionName(\"shuffle\", ShuffleStream.class)\n         .withFunctionName(\"calc\", CalculatorStream.class)\n      .withFunctionName(\"eval\",EvalStream.class)\n      .withFunctionName(\"echo\", EchoStream.class)\n      .withFunctionName(\"cell\", CellStream.class)\n      .withFunctionName(\"list\", ListStream.class)\n      .withFunctionName(\"let\", LetStream.class)\n      .withFunctionName(\"get\", GetStream.class)\n      .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n      .withFunctionName(\"tuple\", TupStream.class)\n      .withFunctionName(\"sql\", SqlStream.class)\n      .withFunctionName(\"col\", ColumnEvaluator.class)\n      .withFunctionName(\"predict\", PredictEvaluator.class)\n      .withFunctionName(\"regress\", RegressionEvaluator.class)\n      .withFunctionName(\"cov\", CovarianceEvaluator.class)\n      .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n      .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n      .withFunctionName(\"rev\", ReverseEvaluator.class)\n      .withFunctionName(\"length\", LengthEvaluator.class)\n      .withFunctionName(\"rank\", RankEvaluator.class)\n      .withFunctionName(\"scale\", ScaleEvaluator.class)\n      .withFunctionName(\"distance\", DistanceEvaluator.class)\n      .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n      .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n      .withFunctionName(\"percentile\", PercentileEvaluator.class)\n      .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n      .withFunctionName(\"describe\", DescribeEvaluator.class)\n      .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n      .withFunctionName(\"sequence\", SequenceEvaluator.class)\n      .withFunctionName(\"array\", ArrayEvaluator.class)\n      .withFunctionName(\"hist\", HistogramEvaluator.class)\n      .withFunctionName(\"anova\", AnovaEvaluator.class)\n      .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n\n      // metrics\n         .withFunctionName(\"min\", MinMetric.class)\n      .withFunctionName(\"max\", MaxMetric.class)\n      .withFunctionName(\"avg\", MeanMetric.class)\n      .withFunctionName(\"sum\", SumMetric.class)\n      .withFunctionName(\"count\", CountMetric.class)\n      \n      // tuple manipulation operations\n         .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      \n      // stream reduction operations\n         .withFunctionName(\"group\", GroupOperation.class)\n      .withFunctionName(\"distinct\", DistinctOperation.class)\n      .withFunctionName(\"having\", HavingStream.class)\n      \n      // Stream Evaluators\n         .withFunctionName(\"val\", RawValueEvaluator.class)\n      \n      // Boolean Stream Evaluators\n         .withFunctionName(\"and\", AndEvaluator.class)\n      .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n      .withFunctionName(\"eq\", EqualsEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n      .withFunctionName(\"lt\", LessThanEvaluator.class)\n      .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n      .withFunctionName(\"not\", NotEvaluator.class)\n         .withFunctionName(\"or\", OrEvaluator.class)\n\n      // Date Time Evaluators\n         .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n      .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n      .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n      .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n         .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n      .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n         .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n      .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n      .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n         .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n         .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n      // Number Stream Evaluators\n         .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"div\", DivideEvaluator.class)\n      .withFunctionName(\"mult\", MultiplyEvaluator.class)\n      .withFunctionName(\"sub\", SubtractEvaluator.class)\n      .withFunctionName(\"log\", NaturalLogEvaluator.class)\n      .withFunctionName(\"pow\", PowerEvaluator.class)\n      .withFunctionName(\"mod\", ModuloEvaluator.class)\n         .withFunctionName(\"ceil\", CeilingEvaluator.class)\n      .withFunctionName(\"floor\", FloorEvaluator.class)\n      .withFunctionName(\"sin\", SineEvaluator.class)\n      .withFunctionName(\"asin\", ArcSineEvaluator.class)\n      .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n      .withFunctionName(\"cos\", CosineEvaluator.class)\n      .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n      .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n      .withFunctionName(\"tan\", TangentEvaluator.class)\n      .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n      .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n         .withFunctionName(\"round\", RoundEvaluator.class)\n      .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n      .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n      .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n      .withFunctionName(\"uuid\", UuidEvaluator.class)\n      .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n\n      // Conditional Stream Evaluators\n         .withFunctionName(\"if\", IfThenElseEvaluator.class)\n         .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n         .withFunctionName(\"convert\", ConversionEvaluator.class)\n      ;\n\n     // This pulls all the overrides and additions from the config\n     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n     for (PluginInfo pluginInfo : pluginInfos) {\n       Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n       streamFactory.withFunctionName(pluginInfo.name, clazz);\n     }\n        \n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        //To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3e4eeaf7f7ec614137572a5645be1b62b86a5eec","date":1499368967,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AddAllEvaluator.class)\n\n        \n        // Boolean Stream Evaluators\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualsEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n\n        \n        // Boolean Stream Evaluators\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualsEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e73d8d559120669b47658108d818b637df5456ea","date":1499401413,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AddAllEvaluator.class)\n\n        \n        // Boolean Stream Evaluators\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualsEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n\n        \n        // Boolean Stream Evaluators\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualsEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc405367d926fb8fe1f87ec54aaca7403c5aa358","date":1499869732,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AddAllEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n\n        // Boolean Stream Evaluators\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualsEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AddAllEvaluator.class)\n\n        \n        // Boolean Stream Evaluators\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualsEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f9a989a32a073c55e3aef6f807a3474184bbcf49","date":1499930209,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AddAllEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n\n        // Boolean Stream Evaluators\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualsEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AddAllEvaluator.class)\n\n        \n        // Boolean Stream Evaluators\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualsEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb569fd721c41eafc2a2d788499a7df490c7f1a5","date":1499930871,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AddAllEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n\n        // Boolean Stream Evaluators\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualsEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AddAllEvaluator.class)\n\n        \n        // Boolean Stream Evaluators\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualsEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d635d99fef6495f949f7bbac12fd269db070ee5","date":1499965547,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AddAllEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n\n        // Boolean Stream Evaluators\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualsEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AddAllEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n\n        // Boolean Stream Evaluators\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualsEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aaf90fc29510e72665ac7934f34c3d1c25efad64","date":1500354819,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AddAllEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n\n        // Boolean Stream Evaluators\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualsEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AddAllEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n\n        // Boolean Stream Evaluators\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualsEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"40f06aec8ac912d126c71c7e9d6065ed70aa9c65","date":1501530021,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AddAllEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n\n        // Boolean Stream Evaluators\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualsEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AddAllEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n\n        // Boolean Stream Evaluators\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualsEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AddAllEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n\n        // Boolean Stream Evaluators\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualsEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AddAllEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n\n        // Boolean Stream Evaluators\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualsEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fbc80749c85efd1895219216ee31ee422dbb0a2","date":1502416545,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AddAllEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n\n        // Boolean Stream Evaluators\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualsEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AddAllEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n\n        // Boolean Stream Evaluators\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualsEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19e8eb794082b9cc37b6562c76814ec4a26b9b8b","date":1502501868,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AddAllEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n\n        // Boolean Stream Evaluators\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualsEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AddAllEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n\n        // Boolean Stream Evaluators\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualsEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AddAllEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n\n        // Boolean Stream Evaluators\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualsEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AddAllEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n\n        // Boolean Stream Evaluators\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualsEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1e7de64990e3928b90142a52fb92eeff556475","date":1503713257,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n\n        // Boolean Stream Evaluators\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AddAllEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n\n        // Boolean Stream Evaluators\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualsEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"45c28dbb559366e1f4ef8077346552bfb3f7ecf6","date":1503738439,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n\n        // Boolean Stream Evaluators\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AddAllEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n\n        // Boolean Stream Evaluators\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualsEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n\n        // Boolean Stream Evaluators\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AddAllEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n\n        // Boolean Stream Evaluators\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualsEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9850a2db59025ba8cb15c4fd7ab3bb1faa151f1","date":1504564803,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n\n        // Boolean Stream Evaluators\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n\n        // Boolean Stream Evaluators\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b21283ed01203901a7257aa4b7f0a0899c86e56e","date":1504689720,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n\n        // Boolean Stream Evaluators\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n\n        // Boolean Stream Evaluators\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9e0b0bd2390447c6bd25cf9e62be59a117394eab","date":1504711924,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n\n\n                .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n\n        // Boolean Stream Evaluators\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","date":1504848000,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n\n\n                .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n\n        // Boolean Stream Evaluators\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9d09e70d62d23dab1693c77552c0276763fdd6ca","date":1504890076,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n\n\n                .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n\n\n                .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fdb6ca63bec9ca0f6ef05ec63b2893110ac2f861","date":1504899868,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n\n\n                .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n\n\n                .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d1fe2d12f66f09580b2d3b3834ea4ece50eeab4","date":1504919309,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n\n\n                .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n\n\n                .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"08e30330b33aca2e2864d648a9e1ed2d2f4086f3","date":1504933371,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n\n\n                .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n\n\n                .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"622570bec8d96987f78529ba2e6f12b331709d15","date":1505156419,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n\n\n                .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n\n\n                .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ffb85feece8645a035c02443a625f5af15e1106b","date":1505219692,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n\n\n                .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n\n\n                .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n\n\n                .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n\n        // Boolean Stream Evaluators\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a531253046f0e43934c21488b61a23f0875e143","date":1505870793,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"sphere\", SphereEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n\n\n                .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n\n\n                .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e5327c5d3c341d91eaf95bc92b2db346e2cf1ac","date":1505871092,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n\n\n                .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"sphere\", SphereEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n\n\n                .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a88ab669a0dfc238c5cdbd5bac2dd6ea147db95e","date":1506186198,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n\n\n                .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n\n\n                .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b8557552f7ab8e381c4d1a941a269e14f11e779d","date":1506320429,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n\n\n                .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n\n\n                .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7ca50d1c356fbe15a0179afa80057a096b11753","date":1506390115,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n\n\n                .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9efa9c0fcd87863d1a86eed29d4304c11bc7d50a","date":1506410441,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n\n\n                .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7052a30e794b71229411425f0b5c985a1d49d4d","date":1506534783,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7ae55370ade9bd2ca2fbb91a7cb68a1cbc9f525c","date":1506563263,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e66b7e53b1b8958fb91f9d199b7520fe429ecdfc","date":1506622118,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ac48e00c2b85d168dcc8dbd361d109418ee01724","date":1506693465,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n\n\n                .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"88db5ca967adae8f7da7df4fd8480da635bbf01a","date":1507140133,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"polyfitDerivative\", PolyFitDerivativeEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d7859b8e6a469429413db808a609e8468be14c03","date":1507222263,"type":3,"author":"tballison","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"polyfitDerivative\", PolyFitDerivativeEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"715fcd52ecb1ab1dea2443888f11e0cbf2c96713","date":1507511027,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"polyfitDerivative\", PolyFitDerivativeEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"polyfitDerivative\", PolyFitDerivativeEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7afec973c6531fa1faec7ab6e5eb7bf22917fd7a","date":1507511027,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"polyfitDerivative\", PolyFitDerivativeEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"polyfitDerivative\", PolyFitDerivativeEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8f62c89eb2bbdac3c9fd626638325a6117e115b0","date":1508784310,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"polyfitDerivative\", PolyFitDerivativeEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"polyfitDerivative\", PolyFitDerivativeEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"12cbb60ff5c08b2405e2cd399e4de97375ebe669","date":1509325197,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"polyfitDerivative\", PolyFitDerivativeEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"polyfitDerivative\", PolyFitDerivativeEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"144ca7fb3ae89fdca80610b02273885f1e43dba0","date":1509382753,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"polyfitDerivative\", PolyFitDerivativeEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"polyfitDerivative\", PolyFitDerivativeEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d8245af9f5e5ba8fa10735f962abe1f63eee5519","date":1509409042,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"polyfitDerivative\", PolyFitDerivativeEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unit\", UnitEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"polyfitDerivative\", PolyFitDerivativeEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c843f65abea63c05a03e40d712d391fe65183b2b","date":1509493927,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"polyfitDerivative\", PolyFitDerivativeEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unit\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"polyfitDerivative\", PolyFitDerivativeEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unit\", UnitEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93f1e2e97b1cdca850c22c24102ab066aa1cdede","date":1509557735,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"polyfitDerivative\", PolyFitDerivativeEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unit\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"polyfitDerivative\", PolyFitDerivativeEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unit\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9e0bd6ad39d1eae4e5330fcf7f2a59cf8936d3e7","date":1509644682,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"polyfitDerivative\", PolyFitDerivativeEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unit\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"polyfitDerivative\", PolyFitDerivativeEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unit\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e33001cc090cf359296602fc5b76486f1eff2553","date":1509673049,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"polyfitDerivative\", PolyFitDerivativeEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"polyfitDerivative\", PolyFitDerivativeEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unit\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"46bf3bdc31412342491895b3209b5dd622aeb489","date":1509735643,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"polyfitDerivative\", PolyFitDerivativeEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"polyfitDerivative\", PolyFitDerivativeEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a8c5e58e88072db16e2a636f1738f87c1df207bd","date":1510101986,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"polyfitDerivative\", PolyFitDerivativeEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"polyfitDerivative\", PolyFitDerivativeEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"polyfitDerivative\", PolyFitDerivativeEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"normalize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"polyfitDerivative\", PolyFitDerivativeEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unit\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c263c97cbb80b4388128937ff5a5659f1abaccd8","date":1510337741,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"polyfitDerivative\", PolyFitDerivativeEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"polyfitDerivative\", PolyFitDerivativeEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a2efb7373cfceb83cf0a7f6e38a1d4ac1833806","date":1510620286,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"polyfitDerivative\", PolyFitDerivativeEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"kendallsCorr\", KendallsCorrelationEvaluator.class)\n        .withFunctionName(\"spearmansCorr\", SpearmansCorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"polyfitDerivative\", PolyFitDerivativeEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2f033e640613edeb07d8952279368806db4ab299","date":1511393468,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"polyfitDerivative\", PolyFitDerivativeEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", EuclideanDistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"polyfitDerivative\", PolyFitDerivativeEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa42cc88a5c002d8c12e06a4b93ffa4705478f40","date":1511393944,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"polyfitDerivative\", PolyFitDerivativeEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"manhattanDistance\", ManhattanDistanceEvaluator.class)\n        .withFunctionName(\"earthMoversDistance\", EarthMoversDistanceEvaluator.class)\n        .withFunctionName(\"canberraDistance\", CanberraDistanceEvaluator.class)\n        .withFunctionName(\"chebyshevDistance\", ChebyshevDistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"polyfitDerivative\", PolyFitDerivativeEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"300ececaee7f8a08752bcba8e497264491a1853e","date":1511807923,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"polyfitDerivative\", PolyFitDerivativeEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"polyfitDerivative\", PolyFitDerivativeEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f0e53d133180083c87dcb8114b087cfe6bfc7bce","date":1511856078,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"polyfitDerivative\", PolyFitDerivativeEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"polyfitDerivative\", PolyFitDerivativeEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1109ff1da44592836ee4182346d4451f1690f9d8","date":1511922195,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"polyfitDerivative\", PolyFitDerivativeEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n        .withFunctionName(\"geometricDistribution\", GeometricDistributionEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"polyfitDerivative\", PolyFitDerivativeEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"polyfitDerivative\", PolyFitDerivativeEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n        .withFunctionName(\"geometricDistribution\", GeometricDistributionEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"polyfitDerivative\", PolyFitDerivativeEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54","date":1512439781,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n        .withFunctionName(\"geometricDistribution\", GeometricDistributionEvaluator.class)\n        .withFunctionName(\"olsRegress\", OLSRegressionEvaluator.class)\n        .withFunctionName(\"derivative\", DerivativeEvaluator.class)\n        .withFunctionName(\"spline\", SplineEvaluator.class)\n\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"residuals\", ResidualsEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"polyfitDerivative\", PolyFitDerivativeEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n        .withFunctionName(\"geometricDistribution\", GeometricDistributionEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"24d1271894d49e4719d0270f561298462ec278d2","date":1513625507,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n        .withFunctionName(\"geometricDistribution\", GeometricDistributionEvaluator.class)\n        .withFunctionName(\"olsRegress\", OLSRegressionEvaluator.class)\n        .withFunctionName(\"derivative\", DerivativeEvaluator.class)\n        .withFunctionName(\"spline\", SplineEvaluator.class)\n        .withFunctionName(\"ttest\", TTestEvaluator.class)\n        .withFunctionName(\"pairedTtest\", PairedTTestEvaluator.class)\n\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n        .withFunctionName(\"geometricDistribution\", GeometricDistributionEvaluator.class)\n        .withFunctionName(\"olsRegress\", OLSRegressionEvaluator.class)\n        .withFunctionName(\"derivative\", DerivativeEvaluator.class)\n        .withFunctionName(\"spline\", SplineEvaluator.class)\n\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8a3a0090dc960985448654a5dd4c117c71c3f7a5","date":1513795907,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n        .withFunctionName(\"geometricDistribution\", GeometricDistributionEvaluator.class)\n        .withFunctionName(\"olsRegress\", OLSRegressionEvaluator.class)\n        .withFunctionName(\"derivative\", DerivativeEvaluator.class)\n        .withFunctionName(\"spline\", SplineEvaluator.class)\n        .withFunctionName(\"ttest\", TTestEvaluator.class)\n        .withFunctionName(\"pairedTtest\", PairedTTestEvaluator.class)\n        .withFunctionName(\"multiVariateNormalDistribution\", MultiVariateNormalDistributionEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n            .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n        .withFunctionName(\"geometricDistribution\", GeometricDistributionEvaluator.class)\n        .withFunctionName(\"olsRegress\", OLSRegressionEvaluator.class)\n        .withFunctionName(\"derivative\", DerivativeEvaluator.class)\n        .withFunctionName(\"spline\", SplineEvaluator.class)\n        .withFunctionName(\"ttest\", TTestEvaluator.class)\n        .withFunctionName(\"pairedTtest\", PairedTTestEvaluator.class)\n\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8857e97c9165df294ead035e9c708f0c038d29a4","date":1513947461,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n        .withFunctionName(\"geometricDistribution\", GeometricDistributionEvaluator.class)\n        .withFunctionName(\"olsRegress\", OLSRegressionEvaluator.class)\n        .withFunctionName(\"derivative\", DerivativeEvaluator.class)\n        .withFunctionName(\"spline\", SplineEvaluator.class)\n        .withFunctionName(\"ttest\", TTestEvaluator.class)\n        .withFunctionName(\"pairedTtest\", PairedTTestEvaluator.class)\n        .withFunctionName(\"multiVariateNormalDistribution\", MultiVariateNormalDistributionEvaluator.class)\n        .withFunctionName(\"integrate\", IntegrateEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n            .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n        .withFunctionName(\"geometricDistribution\", GeometricDistributionEvaluator.class)\n        .withFunctionName(\"olsRegress\", OLSRegressionEvaluator.class)\n        .withFunctionName(\"derivative\", DerivativeEvaluator.class)\n        .withFunctionName(\"spline\", SplineEvaluator.class)\n        .withFunctionName(\"ttest\", TTestEvaluator.class)\n        .withFunctionName(\"pairedTtest\", PairedTTestEvaluator.class)\n        .withFunctionName(\"multiVariateNormalDistribution\", MultiVariateNormalDistributionEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n            .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"667b4a609c6416604e0f47843deceb73807cee4e","date":1513957302,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n        .withFunctionName(\"geometricDistribution\", GeometricDistributionEvaluator.class)\n        .withFunctionName(\"olsRegress\", OLSRegressionEvaluator.class)\n        .withFunctionName(\"derivative\", DerivativeEvaluator.class)\n        .withFunctionName(\"spline\", SplineEvaluator.class)\n        .withFunctionName(\"ttest\", TTestEvaluator.class)\n        .withFunctionName(\"pairedTtest\", PairedTTestEvaluator.class)\n        .withFunctionName(\"multiVariateNormalDistribution\", MultiVariateNormalDistributionEvaluator.class)\n        .withFunctionName(\"integrate\", IntegrateEvaluator.class)\n        .withFunctionName(\"density\", DensityEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n            .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n        .withFunctionName(\"geometricDistribution\", GeometricDistributionEvaluator.class)\n        .withFunctionName(\"olsRegress\", OLSRegressionEvaluator.class)\n        .withFunctionName(\"derivative\", DerivativeEvaluator.class)\n        .withFunctionName(\"spline\", SplineEvaluator.class)\n        .withFunctionName(\"ttest\", TTestEvaluator.class)\n        .withFunctionName(\"pairedTtest\", PairedTTestEvaluator.class)\n        .withFunctionName(\"multiVariateNormalDistribution\", MultiVariateNormalDistributionEvaluator.class)\n        .withFunctionName(\"integrate\", IntegrateEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n            .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a38c901cd0538c91e3e523c24487e70a9fe74d1f","date":1514488466,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n        .withFunctionName(\"geometricDistribution\", GeometricDistributionEvaluator.class)\n        .withFunctionName(\"olsRegress\", OLSRegressionEvaluator.class)\n        .withFunctionName(\"derivative\", DerivativeEvaluator.class)\n        .withFunctionName(\"spline\", SplineEvaluator.class)\n        .withFunctionName(\"ttest\", TTestEvaluator.class)\n        .withFunctionName(\"pairedTtest\", PairedTTestEvaluator.class)\n        .withFunctionName(\"multiVariateNormalDistribution\", MultiVariateNormalDistributionEvaluator.class)\n        .withFunctionName(\"integrate\", IntegrateEvaluator.class)\n        .withFunctionName(\"density\", DensityEvaluator.class)\n        .withFunctionName(\"mannWhitney\", MannWhitneyUEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n            .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n        .withFunctionName(\"geometricDistribution\", GeometricDistributionEvaluator.class)\n        .withFunctionName(\"olsRegress\", OLSRegressionEvaluator.class)\n        .withFunctionName(\"derivative\", DerivativeEvaluator.class)\n        .withFunctionName(\"spline\", SplineEvaluator.class)\n        .withFunctionName(\"ttest\", TTestEvaluator.class)\n        .withFunctionName(\"pairedTtest\", PairedTTestEvaluator.class)\n        .withFunctionName(\"multiVariateNormalDistribution\", MultiVariateNormalDistributionEvaluator.class)\n        .withFunctionName(\"integrate\", IntegrateEvaluator.class)\n        .withFunctionName(\"density\", DensityEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n            .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e1a9c0ee6e175f37dff63298be6b952d786db982","date":1514746103,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n        .withFunctionName(\"geometricDistribution\", GeometricDistributionEvaluator.class)\n        .withFunctionName(\"olsRegress\", OLSRegressionEvaluator.class)\n        .withFunctionName(\"derivative\", DerivativeEvaluator.class)\n        .withFunctionName(\"spline\", SplineEvaluator.class)\n        .withFunctionName(\"ttest\", TTestEvaluator.class)\n        .withFunctionName(\"pairedTtest\", PairedTTestEvaluator.class)\n        .withFunctionName(\"multiVariateNormalDistribution\", MultiVariateNormalDistributionEvaluator.class)\n        .withFunctionName(\"integrate\", IntegrateEvaluator.class)\n        .withFunctionName(\"density\", DensityEvaluator.class)\n        .withFunctionName(\"mannWhitney\", MannWhitneyUEvaluator.class)\n        .withFunctionName(\"sumSq\", SumSqEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n            .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n        .withFunctionName(\"geometricDistribution\", GeometricDistributionEvaluator.class)\n        .withFunctionName(\"olsRegress\", OLSRegressionEvaluator.class)\n        .withFunctionName(\"derivative\", DerivativeEvaluator.class)\n        .withFunctionName(\"spline\", SplineEvaluator.class)\n        .withFunctionName(\"ttest\", TTestEvaluator.class)\n        .withFunctionName(\"pairedTtest\", PairedTTestEvaluator.class)\n        .withFunctionName(\"multiVariateNormalDistribution\", MultiVariateNormalDistributionEvaluator.class)\n        .withFunctionName(\"integrate\", IntegrateEvaluator.class)\n        .withFunctionName(\"density\", DensityEvaluator.class)\n        .withFunctionName(\"mannWhitney\", MannWhitneyUEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n            .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"61db97cb62a391687536358baddd3dbdedb040c7","date":1514906646,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n        .withFunctionName(\"geometricDistribution\", GeometricDistributionEvaluator.class)\n        .withFunctionName(\"olsRegress\", OLSRegressionEvaluator.class)\n        .withFunctionName(\"derivative\", DerivativeEvaluator.class)\n        .withFunctionName(\"spline\", SplineEvaluator.class)\n        .withFunctionName(\"ttest\", TTestEvaluator.class)\n        .withFunctionName(\"pairedTtest\", PairedTTestEvaluator.class)\n        .withFunctionName(\"multiVariateNormalDistribution\", MultiVariateNormalDistributionEvaluator.class)\n        .withFunctionName(\"integrate\", IntegrateEvaluator.class)\n        .withFunctionName(\"density\", DensityEvaluator.class)\n        .withFunctionName(\"mannWhitney\", MannWhitneyUEvaluator.class)\n        .withFunctionName(\"sumSq\", SumSqEvaluator.class)\n        .withFunctionName(\"akima\", AkimaEvaluator.class)\n        .withFunctionName(\"lerp\", LerpEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n            .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n        .withFunctionName(\"geometricDistribution\", GeometricDistributionEvaluator.class)\n        .withFunctionName(\"olsRegress\", OLSRegressionEvaluator.class)\n        .withFunctionName(\"derivative\", DerivativeEvaluator.class)\n        .withFunctionName(\"spline\", SplineEvaluator.class)\n        .withFunctionName(\"ttest\", TTestEvaluator.class)\n        .withFunctionName(\"pairedTtest\", PairedTTestEvaluator.class)\n        .withFunctionName(\"multiVariateNormalDistribution\", MultiVariateNormalDistributionEvaluator.class)\n        .withFunctionName(\"integrate\", IntegrateEvaluator.class)\n        .withFunctionName(\"density\", DensityEvaluator.class)\n        .withFunctionName(\"mannWhitney\", MannWhitneyUEvaluator.class)\n        .withFunctionName(\"sumSq\", SumSqEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n            .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b6a0843d30a33fb71399dba42d8c833f35fe9343","date":1515005831,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n        .withFunctionName(\"geometricDistribution\", GeometricDistributionEvaluator.class)\n        .withFunctionName(\"olsRegress\", OLSRegressionEvaluator.class)\n        .withFunctionName(\"derivative\", DerivativeEvaluator.class)\n        .withFunctionName(\"spline\", SplineEvaluator.class)\n        .withFunctionName(\"ttest\", TTestEvaluator.class)\n        .withFunctionName(\"pairedTtest\", PairedTTestEvaluator.class)\n        .withFunctionName(\"multiVariateNormalDistribution\", MultiVariateNormalDistributionEvaluator.class)\n        .withFunctionName(\"integrate\", IntegrateEvaluator.class)\n        .withFunctionName(\"density\", DensityEvaluator.class)\n        .withFunctionName(\"mannWhitney\", MannWhitneyUEvaluator.class)\n        .withFunctionName(\"sumSq\", SumSqEvaluator.class)\n        .withFunctionName(\"akima\", AkimaEvaluator.class)\n        .withFunctionName(\"lerp\", LerpEvaluator.class)\n        .withFunctionName(\"chiSquareDataSet\", ChiSquareDataSetEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n        .withFunctionName(\"geometricDistribution\", GeometricDistributionEvaluator.class)\n        .withFunctionName(\"olsRegress\", OLSRegressionEvaluator.class)\n        .withFunctionName(\"derivative\", DerivativeEvaluator.class)\n        .withFunctionName(\"spline\", SplineEvaluator.class)\n        .withFunctionName(\"ttest\", TTestEvaluator.class)\n        .withFunctionName(\"pairedTtest\", PairedTTestEvaluator.class)\n        .withFunctionName(\"multiVariateNormalDistribution\", MultiVariateNormalDistributionEvaluator.class)\n        .withFunctionName(\"integrate\", IntegrateEvaluator.class)\n        .withFunctionName(\"density\", DensityEvaluator.class)\n        .withFunctionName(\"mannWhitney\", MannWhitneyUEvaluator.class)\n        .withFunctionName(\"sumSq\", SumSqEvaluator.class)\n        .withFunctionName(\"akima\", AkimaEvaluator.class)\n        .withFunctionName(\"lerp\", LerpEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n            .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8d7d88a10b8b3fb9de31a38cbcdc2015432739b9","date":1515033099,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n        .withFunctionName(\"geometricDistribution\", GeometricDistributionEvaluator.class)\n        .withFunctionName(\"olsRegress\", OLSRegressionEvaluator.class)\n        .withFunctionName(\"derivative\", DerivativeEvaluator.class)\n        .withFunctionName(\"spline\", SplineEvaluator.class)\n        .withFunctionName(\"ttest\", TTestEvaluator.class)\n        .withFunctionName(\"pairedTtest\", PairedTTestEvaluator.class)\n        .withFunctionName(\"multiVariateNormalDistribution\", MultiVariateNormalDistributionEvaluator.class)\n        .withFunctionName(\"integrate\", IntegrateEvaluator.class)\n        .withFunctionName(\"density\", DensityEvaluator.class)\n        .withFunctionName(\"mannWhitney\", MannWhitneyUEvaluator.class)\n        .withFunctionName(\"sumSq\", SumSqEvaluator.class)\n        .withFunctionName(\"akima\", AkimaEvaluator.class)\n        .withFunctionName(\"lerp\", LerpEvaluator.class)\n        .withFunctionName(\"chiSquareDataSet\", ChiSquareDataSetEvaluator.class)\n        .withFunctionName(\"gtestDataSet\", GTestDataSetEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n        .withFunctionName(\"geometricDistribution\", GeometricDistributionEvaluator.class)\n        .withFunctionName(\"olsRegress\", OLSRegressionEvaluator.class)\n        .withFunctionName(\"derivative\", DerivativeEvaluator.class)\n        .withFunctionName(\"spline\", SplineEvaluator.class)\n        .withFunctionName(\"ttest\", TTestEvaluator.class)\n        .withFunctionName(\"pairedTtest\", PairedTTestEvaluator.class)\n        .withFunctionName(\"multiVariateNormalDistribution\", MultiVariateNormalDistributionEvaluator.class)\n        .withFunctionName(\"integrate\", IntegrateEvaluator.class)\n        .withFunctionName(\"density\", DensityEvaluator.class)\n        .withFunctionName(\"mannWhitney\", MannWhitneyUEvaluator.class)\n        .withFunctionName(\"sumSq\", SumSqEvaluator.class)\n        .withFunctionName(\"akima\", AkimaEvaluator.class)\n        .withFunctionName(\"lerp\", LerpEvaluator.class)\n        .withFunctionName(\"chiSquareDataSet\", ChiSquareDataSetEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"21cc21dac328d94dbc79c104b8e626fca70b3f79","date":1515458383,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n        .withFunctionName(\"geometricDistribution\", GeometricDistributionEvaluator.class)\n        .withFunctionName(\"olsRegress\", OLSRegressionEvaluator.class)\n        .withFunctionName(\"derivative\", DerivativeEvaluator.class)\n        .withFunctionName(\"spline\", SplineEvaluator.class)\n        .withFunctionName(\"ttest\", TTestEvaluator.class)\n        .withFunctionName(\"pairedTtest\", PairedTTestEvaluator.class)\n        .withFunctionName(\"multiVariateNormalDistribution\", MultiVariateNormalDistributionEvaluator.class)\n        .withFunctionName(\"integrate\", IntegrateEvaluator.class)\n        .withFunctionName(\"density\", DensityEvaluator.class)\n        .withFunctionName(\"mannWhitney\", MannWhitneyUEvaluator.class)\n        .withFunctionName(\"sumSq\", SumSqEvaluator.class)\n        .withFunctionName(\"akima\", AkimaEvaluator.class)\n        .withFunctionName(\"lerp\", LerpEvaluator.class)\n        .withFunctionName(\"chiSquareDataSet\", ChiSquareDataSetEvaluator.class)\n        .withFunctionName(\"gtestDataSet\", GTestDataSetEvaluator.class)\n        .withFunctionName(\"termVectors\", TermVectorsEvaluator.class)\n        .withFunctionName(\"getColumnLabels\", GetColumnLabelsEvaluator.class)\n        .withFunctionName(\"getRowLabels\", GetRowLabelsEvaluator.class)\n        .withFunctionName(\"getAttribute\", GetAttributeEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n        .withFunctionName(\"geometricDistribution\", GeometricDistributionEvaluator.class)\n        .withFunctionName(\"olsRegress\", OLSRegressionEvaluator.class)\n        .withFunctionName(\"derivative\", DerivativeEvaluator.class)\n        .withFunctionName(\"spline\", SplineEvaluator.class)\n        .withFunctionName(\"ttest\", TTestEvaluator.class)\n        .withFunctionName(\"pairedTtest\", PairedTTestEvaluator.class)\n        .withFunctionName(\"multiVariateNormalDistribution\", MultiVariateNormalDistributionEvaluator.class)\n        .withFunctionName(\"integrate\", IntegrateEvaluator.class)\n        .withFunctionName(\"density\", DensityEvaluator.class)\n        .withFunctionName(\"mannWhitney\", MannWhitneyUEvaluator.class)\n        .withFunctionName(\"sumSq\", SumSqEvaluator.class)\n        .withFunctionName(\"akima\", AkimaEvaluator.class)\n        .withFunctionName(\"lerp\", LerpEvaluator.class)\n        .withFunctionName(\"chiSquareDataSet\", ChiSquareDataSetEvaluator.class)\n        .withFunctionName(\"gtestDataSet\", GTestDataSetEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f0ec25ba9bff9e87e402c4fe0afe87f877bccd6","date":1516045834,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n        .withFunctionName(\"geometricDistribution\", GeometricDistributionEvaluator.class)\n        .withFunctionName(\"olsRegress\", OLSRegressionEvaluator.class)\n        .withFunctionName(\"derivative\", DerivativeEvaluator.class)\n        .withFunctionName(\"spline\", SplineEvaluator.class)\n        .withFunctionName(\"ttest\", TTestEvaluator.class)\n        .withFunctionName(\"pairedTtest\", PairedTTestEvaluator.class)\n        .withFunctionName(\"multiVariateNormalDistribution\", MultiVariateNormalDistributionEvaluator.class)\n        .withFunctionName(\"integrate\", IntegrateEvaluator.class)\n        .withFunctionName(\"density\", DensityEvaluator.class)\n        .withFunctionName(\"mannWhitney\", MannWhitneyUEvaluator.class)\n        .withFunctionName(\"sumSq\", SumSqEvaluator.class)\n        .withFunctionName(\"akima\", AkimaEvaluator.class)\n        .withFunctionName(\"lerp\", LerpEvaluator.class)\n        .withFunctionName(\"chiSquareDataSet\", ChiSquareDataSetEvaluator.class)\n        .withFunctionName(\"gtestDataSet\", GTestDataSetEvaluator.class)\n        .withFunctionName(\"termVectors\", TermVectorsEvaluator.class)\n        .withFunctionName(\"getColumnLabels\", GetColumnLabelsEvaluator.class)\n        .withFunctionName(\"getRowLabels\", GetRowLabelsEvaluator.class)\n        .withFunctionName(\"getAttribute\", GetAttributeEvaluator.class)\n        .withFunctionName(\"kmeans\", KmeansEvaluator.class)\n        .withFunctionName(\"getCentroids\", GetCentroidsEvaluator.class)\n        .withFunctionName(\"getCluster\", GetClusterEvaluator.class)\n        .withFunctionName(\"topFeatures\", TopFeaturesEvaluator.class)\n        .withFunctionName(\"featureSelect\", FeatureSelectEvaluator.class)\n        .withFunctionName(\"rowAt\", RowAtEvaluator.class)\n        .withFunctionName(\"colAt\", ColumnAtEvaluator.class)\n        .withFunctionName(\"setColumnLabels\", SetColumnLabelsEvaluator.class)\n        .withFunctionName(\"setRowLabels\", SetRowLabelsEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n        .withFunctionName(\"geometricDistribution\", GeometricDistributionEvaluator.class)\n        .withFunctionName(\"olsRegress\", OLSRegressionEvaluator.class)\n        .withFunctionName(\"derivative\", DerivativeEvaluator.class)\n        .withFunctionName(\"spline\", SplineEvaluator.class)\n        .withFunctionName(\"ttest\", TTestEvaluator.class)\n        .withFunctionName(\"pairedTtest\", PairedTTestEvaluator.class)\n        .withFunctionName(\"multiVariateNormalDistribution\", MultiVariateNormalDistributionEvaluator.class)\n        .withFunctionName(\"integrate\", IntegrateEvaluator.class)\n        .withFunctionName(\"density\", DensityEvaluator.class)\n        .withFunctionName(\"mannWhitney\", MannWhitneyUEvaluator.class)\n        .withFunctionName(\"sumSq\", SumSqEvaluator.class)\n        .withFunctionName(\"akima\", AkimaEvaluator.class)\n        .withFunctionName(\"lerp\", LerpEvaluator.class)\n        .withFunctionName(\"chiSquareDataSet\", ChiSquareDataSetEvaluator.class)\n        .withFunctionName(\"gtestDataSet\", GTestDataSetEvaluator.class)\n        .withFunctionName(\"termVectors\", TermVectorsEvaluator.class)\n        .withFunctionName(\"getColumnLabels\", GetColumnLabelsEvaluator.class)\n        .withFunctionName(\"getRowLabels\", GetRowLabelsEvaluator.class)\n        .withFunctionName(\"getAttribute\", GetAttributeEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6fe6699bcc60bb2640032c2682f07a108b1f757","date":1516148439,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knnSearch\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n        .withFunctionName(\"geometricDistribution\", GeometricDistributionEvaluator.class)\n        .withFunctionName(\"olsRegress\", OLSRegressionEvaluator.class)\n        .withFunctionName(\"derivative\", DerivativeEvaluator.class)\n        .withFunctionName(\"spline\", SplineEvaluator.class)\n        .withFunctionName(\"ttest\", TTestEvaluator.class)\n        .withFunctionName(\"pairedTtest\", PairedTTestEvaluator.class)\n        .withFunctionName(\"multiVariateNormalDistribution\", MultiVariateNormalDistributionEvaluator.class)\n        .withFunctionName(\"integrate\", IntegrateEvaluator.class)\n        .withFunctionName(\"density\", DensityEvaluator.class)\n        .withFunctionName(\"mannWhitney\", MannWhitneyUEvaluator.class)\n        .withFunctionName(\"sumSq\", SumSqEvaluator.class)\n        .withFunctionName(\"akima\", AkimaEvaluator.class)\n        .withFunctionName(\"lerp\", LerpEvaluator.class)\n        .withFunctionName(\"chiSquareDataSet\", ChiSquareDataSetEvaluator.class)\n        .withFunctionName(\"gtestDataSet\", GTestDataSetEvaluator.class)\n        .withFunctionName(\"termVectors\", TermVectorsEvaluator.class)\n        .withFunctionName(\"getColumnLabels\", GetColumnLabelsEvaluator.class)\n        .withFunctionName(\"getRowLabels\", GetRowLabelsEvaluator.class)\n        .withFunctionName(\"getAttribute\", GetAttributeEvaluator.class)\n        .withFunctionName(\"kmeans\", KmeansEvaluator.class)\n        .withFunctionName(\"getCentroids\", GetCentroidsEvaluator.class)\n        .withFunctionName(\"getCluster\", GetClusterEvaluator.class)\n        .withFunctionName(\"topFeatures\", TopFeaturesEvaluator.class)\n        .withFunctionName(\"featureSelect\", FeatureSelectEvaluator.class)\n        .withFunctionName(\"rowAt\", RowAtEvaluator.class)\n        .withFunctionName(\"colAt\", ColumnAtEvaluator.class)\n        .withFunctionName(\"setColumnLabels\", SetColumnLabelsEvaluator.class)\n        .withFunctionName(\"setRowLabels\", SetRowLabelsEvaluator.class)\n        .withFunctionName(\"knn\", KnnEvaluator.class)\n        .withFunctionName(\"getAttributes\", GetAttributesEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n        .withFunctionName(\"geometricDistribution\", GeometricDistributionEvaluator.class)\n        .withFunctionName(\"olsRegress\", OLSRegressionEvaluator.class)\n        .withFunctionName(\"derivative\", DerivativeEvaluator.class)\n        .withFunctionName(\"spline\", SplineEvaluator.class)\n        .withFunctionName(\"ttest\", TTestEvaluator.class)\n        .withFunctionName(\"pairedTtest\", PairedTTestEvaluator.class)\n        .withFunctionName(\"multiVariateNormalDistribution\", MultiVariateNormalDistributionEvaluator.class)\n        .withFunctionName(\"integrate\", IntegrateEvaluator.class)\n        .withFunctionName(\"density\", DensityEvaluator.class)\n        .withFunctionName(\"mannWhitney\", MannWhitneyUEvaluator.class)\n        .withFunctionName(\"sumSq\", SumSqEvaluator.class)\n        .withFunctionName(\"akima\", AkimaEvaluator.class)\n        .withFunctionName(\"lerp\", LerpEvaluator.class)\n        .withFunctionName(\"chiSquareDataSet\", ChiSquareDataSetEvaluator.class)\n        .withFunctionName(\"gtestDataSet\", GTestDataSetEvaluator.class)\n        .withFunctionName(\"termVectors\", TermVectorsEvaluator.class)\n        .withFunctionName(\"getColumnLabels\", GetColumnLabelsEvaluator.class)\n        .withFunctionName(\"getRowLabels\", GetRowLabelsEvaluator.class)\n        .withFunctionName(\"getAttribute\", GetAttributeEvaluator.class)\n        .withFunctionName(\"kmeans\", KmeansEvaluator.class)\n        .withFunctionName(\"getCentroids\", GetCentroidsEvaluator.class)\n        .withFunctionName(\"getCluster\", GetClusterEvaluator.class)\n        .withFunctionName(\"topFeatures\", TopFeaturesEvaluator.class)\n        .withFunctionName(\"featureSelect\", FeatureSelectEvaluator.class)\n        .withFunctionName(\"rowAt\", RowAtEvaluator.class)\n        .withFunctionName(\"colAt\", ColumnAtEvaluator.class)\n        .withFunctionName(\"setColumnLabels\", SetColumnLabelsEvaluator.class)\n        .withFunctionName(\"setRowLabels\", SetRowLabelsEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17131c75d55e6aebac087f57f6e99f937386ebe9","date":1516221785,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knnSearch\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n        .withFunctionName(\"geometricDistribution\", GeometricDistributionEvaluator.class)\n        .withFunctionName(\"olsRegress\", OLSRegressionEvaluator.class)\n        .withFunctionName(\"derivative\", DerivativeEvaluator.class)\n        .withFunctionName(\"spline\", SplineEvaluator.class)\n        .withFunctionName(\"ttest\", TTestEvaluator.class)\n        .withFunctionName(\"pairedTtest\", PairedTTestEvaluator.class)\n        .withFunctionName(\"multiVariateNormalDistribution\", MultiVariateNormalDistributionEvaluator.class)\n        .withFunctionName(\"integrate\", IntegrateEvaluator.class)\n        .withFunctionName(\"density\", DensityEvaluator.class)\n        .withFunctionName(\"mannWhitney\", MannWhitneyUEvaluator.class)\n        .withFunctionName(\"sumSq\", SumSqEvaluator.class)\n        .withFunctionName(\"akima\", AkimaEvaluator.class)\n        .withFunctionName(\"lerp\", LerpEvaluator.class)\n        .withFunctionName(\"chiSquareDataSet\", ChiSquareDataSetEvaluator.class)\n        .withFunctionName(\"gtestDataSet\", GTestDataSetEvaluator.class)\n        .withFunctionName(\"termVectors\", TermVectorsEvaluator.class)\n        .withFunctionName(\"getColumnLabels\", GetColumnLabelsEvaluator.class)\n        .withFunctionName(\"getRowLabels\", GetRowLabelsEvaluator.class)\n        .withFunctionName(\"getAttribute\", GetAttributeEvaluator.class)\n        .withFunctionName(\"kmeans\", KmeansEvaluator.class)\n        .withFunctionName(\"getCentroids\", GetCentroidsEvaluator.class)\n        .withFunctionName(\"getCluster\", GetClusterEvaluator.class)\n        .withFunctionName(\"topFeatures\", TopFeaturesEvaluator.class)\n        .withFunctionName(\"featureSelect\", FeatureSelectEvaluator.class)\n        .withFunctionName(\"rowAt\", RowAtEvaluator.class)\n        .withFunctionName(\"colAt\", ColumnAtEvaluator.class)\n        .withFunctionName(\"setColumnLabels\", SetColumnLabelsEvaluator.class)\n        .withFunctionName(\"setRowLabels\", SetRowLabelsEvaluator.class)\n        .withFunctionName(\"knn\", KnnEvaluator.class)\n        .withFunctionName(\"getAttributes\", GetAttributesEvaluator.class)\n        .withFunctionName(\"indexOf\", IndexOfEvaluator.class)\n        .withFunctionName(\"columnCount\", ColumnCountEvaluator.class)\n        .withFunctionName(\"rowCount\", RowCountEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knnSearch\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n        .withFunctionName(\"geometricDistribution\", GeometricDistributionEvaluator.class)\n        .withFunctionName(\"olsRegress\", OLSRegressionEvaluator.class)\n        .withFunctionName(\"derivative\", DerivativeEvaluator.class)\n        .withFunctionName(\"spline\", SplineEvaluator.class)\n        .withFunctionName(\"ttest\", TTestEvaluator.class)\n        .withFunctionName(\"pairedTtest\", PairedTTestEvaluator.class)\n        .withFunctionName(\"multiVariateNormalDistribution\", MultiVariateNormalDistributionEvaluator.class)\n        .withFunctionName(\"integrate\", IntegrateEvaluator.class)\n        .withFunctionName(\"density\", DensityEvaluator.class)\n        .withFunctionName(\"mannWhitney\", MannWhitneyUEvaluator.class)\n        .withFunctionName(\"sumSq\", SumSqEvaluator.class)\n        .withFunctionName(\"akima\", AkimaEvaluator.class)\n        .withFunctionName(\"lerp\", LerpEvaluator.class)\n        .withFunctionName(\"chiSquareDataSet\", ChiSquareDataSetEvaluator.class)\n        .withFunctionName(\"gtestDataSet\", GTestDataSetEvaluator.class)\n        .withFunctionName(\"termVectors\", TermVectorsEvaluator.class)\n        .withFunctionName(\"getColumnLabels\", GetColumnLabelsEvaluator.class)\n        .withFunctionName(\"getRowLabels\", GetRowLabelsEvaluator.class)\n        .withFunctionName(\"getAttribute\", GetAttributeEvaluator.class)\n        .withFunctionName(\"kmeans\", KmeansEvaluator.class)\n        .withFunctionName(\"getCentroids\", GetCentroidsEvaluator.class)\n        .withFunctionName(\"getCluster\", GetClusterEvaluator.class)\n        .withFunctionName(\"topFeatures\", TopFeaturesEvaluator.class)\n        .withFunctionName(\"featureSelect\", FeatureSelectEvaluator.class)\n        .withFunctionName(\"rowAt\", RowAtEvaluator.class)\n        .withFunctionName(\"colAt\", ColumnAtEvaluator.class)\n        .withFunctionName(\"setColumnLabels\", SetColumnLabelsEvaluator.class)\n        .withFunctionName(\"setRowLabels\", SetRowLabelsEvaluator.class)\n        .withFunctionName(\"knn\", KnnEvaluator.class)\n        .withFunctionName(\"getAttributes\", GetAttributesEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knnSearch\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n        .withFunctionName(\"geometricDistribution\", GeometricDistributionEvaluator.class)\n        .withFunctionName(\"olsRegress\", OLSRegressionEvaluator.class)\n        .withFunctionName(\"derivative\", DerivativeEvaluator.class)\n        .withFunctionName(\"spline\", SplineEvaluator.class)\n        .withFunctionName(\"ttest\", TTestEvaluator.class)\n        .withFunctionName(\"pairedTtest\", PairedTTestEvaluator.class)\n        .withFunctionName(\"multiVariateNormalDistribution\", MultiVariateNormalDistributionEvaluator.class)\n        .withFunctionName(\"integrate\", IntegrateEvaluator.class)\n        .withFunctionName(\"density\", DensityEvaluator.class)\n        .withFunctionName(\"mannWhitney\", MannWhitneyUEvaluator.class)\n        .withFunctionName(\"sumSq\", SumSqEvaluator.class)\n        .withFunctionName(\"akima\", AkimaEvaluator.class)\n        .withFunctionName(\"lerp\", LerpEvaluator.class)\n        .withFunctionName(\"chiSquareDataSet\", ChiSquareDataSetEvaluator.class)\n        .withFunctionName(\"gtestDataSet\", GTestDataSetEvaluator.class)\n        .withFunctionName(\"termVectors\", TermVectorsEvaluator.class)\n        .withFunctionName(\"getColumnLabels\", GetColumnLabelsEvaluator.class)\n        .withFunctionName(\"getRowLabels\", GetRowLabelsEvaluator.class)\n        .withFunctionName(\"getAttribute\", GetAttributeEvaluator.class)\n        .withFunctionName(\"kmeans\", KmeansEvaluator.class)\n        .withFunctionName(\"getCentroids\", GetCentroidsEvaluator.class)\n        .withFunctionName(\"getCluster\", GetClusterEvaluator.class)\n        .withFunctionName(\"topFeatures\", TopFeaturesEvaluator.class)\n        .withFunctionName(\"featureSelect\", FeatureSelectEvaluator.class)\n        .withFunctionName(\"rowAt\", RowAtEvaluator.class)\n        .withFunctionName(\"colAt\", ColumnAtEvaluator.class)\n        .withFunctionName(\"setColumnLabels\", SetColumnLabelsEvaluator.class)\n        .withFunctionName(\"setRowLabels\", SetRowLabelsEvaluator.class)\n        .withFunctionName(\"knn\", KnnEvaluator.class)\n        .withFunctionName(\"getAttributes\", GetAttributesEvaluator.class)\n        .withFunctionName(\"indexOf\", IndexOfEvaluator.class)\n        .withFunctionName(\"columnCount\", ColumnCountEvaluator.class)\n        .withFunctionName(\"rowCount\", RowCountEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knn\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n        .withFunctionName(\"geometricDistribution\", GeometricDistributionEvaluator.class)\n        .withFunctionName(\"olsRegress\", OLSRegressionEvaluator.class)\n        .withFunctionName(\"derivative\", DerivativeEvaluator.class)\n        .withFunctionName(\"spline\", SplineEvaluator.class)\n        .withFunctionName(\"ttest\", TTestEvaluator.class)\n        .withFunctionName(\"pairedTtest\", PairedTTestEvaluator.class)\n        .withFunctionName(\"multiVariateNormalDistribution\", MultiVariateNormalDistributionEvaluator.class)\n        .withFunctionName(\"integrate\", IntegrateEvaluator.class)\n        .withFunctionName(\"density\", DensityEvaluator.class)\n        .withFunctionName(\"mannWhitney\", MannWhitneyUEvaluator.class)\n        .withFunctionName(\"sumSq\", SumSqEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n            .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c1d0ba687e34a329efbeaa5dd3993568f15a91ed","date":1516728571,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knnSearch\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n        .withFunctionName(\"geometricDistribution\", GeometricDistributionEvaluator.class)\n        .withFunctionName(\"olsRegress\", OLSRegressionEvaluator.class)\n        .withFunctionName(\"derivative\", DerivativeEvaluator.class)\n        .withFunctionName(\"spline\", SplineEvaluator.class)\n        .withFunctionName(\"ttest\", TTestEvaluator.class)\n        .withFunctionName(\"pairedTtest\", PairedTTestEvaluator.class)\n        .withFunctionName(\"multiVariateNormalDistribution\", MultiVariateNormalDistributionEvaluator.class)\n        .withFunctionName(\"integrate\", IntegrateEvaluator.class)\n        .withFunctionName(\"density\", DensityEvaluator.class)\n        .withFunctionName(\"mannWhitney\", MannWhitneyUEvaluator.class)\n        .withFunctionName(\"sumSq\", SumSqEvaluator.class)\n        .withFunctionName(\"akima\", AkimaEvaluator.class)\n        .withFunctionName(\"lerp\", LerpEvaluator.class)\n        .withFunctionName(\"chiSquareDataSet\", ChiSquareDataSetEvaluator.class)\n        .withFunctionName(\"gtestDataSet\", GTestDataSetEvaluator.class)\n        .withFunctionName(\"termVectors\", TermVectorsEvaluator.class)\n        .withFunctionName(\"getColumnLabels\", GetColumnLabelsEvaluator.class)\n        .withFunctionName(\"getRowLabels\", GetRowLabelsEvaluator.class)\n        .withFunctionName(\"getAttribute\", GetAttributeEvaluator.class)\n        .withFunctionName(\"kmeans\", KmeansEvaluator.class)\n        .withFunctionName(\"getCentroids\", GetCentroidsEvaluator.class)\n        .withFunctionName(\"getCluster\", GetClusterEvaluator.class)\n        .withFunctionName(\"topFeatures\", TopFeaturesEvaluator.class)\n        .withFunctionName(\"featureSelect\", FeatureSelectEvaluator.class)\n        .withFunctionName(\"rowAt\", RowAtEvaluator.class)\n        .withFunctionName(\"colAt\", ColumnAtEvaluator.class)\n        .withFunctionName(\"setColumnLabels\", SetColumnLabelsEvaluator.class)\n        .withFunctionName(\"setRowLabels\", SetRowLabelsEvaluator.class)\n        .withFunctionName(\"knn\", KnnEvaluator.class)\n        .withFunctionName(\"getAttributes\", GetAttributesEvaluator.class)\n        .withFunctionName(\"indexOf\", IndexOfEvaluator.class)\n        .withFunctionName(\"columnCount\", ColumnCountEvaluator.class)\n        .withFunctionName(\"rowCount\", RowCountEvaluator.class)\n        .withFunctionName(\"fuzzyKmeans\", FuzzyKmeansEvaluator.class)\n        .withFunctionName(\"getMembershipMatrix\", GetMembershipMatrixEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knnSearch\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n        .withFunctionName(\"geometricDistribution\", GeometricDistributionEvaluator.class)\n        .withFunctionName(\"olsRegress\", OLSRegressionEvaluator.class)\n        .withFunctionName(\"derivative\", DerivativeEvaluator.class)\n        .withFunctionName(\"spline\", SplineEvaluator.class)\n        .withFunctionName(\"ttest\", TTestEvaluator.class)\n        .withFunctionName(\"pairedTtest\", PairedTTestEvaluator.class)\n        .withFunctionName(\"multiVariateNormalDistribution\", MultiVariateNormalDistributionEvaluator.class)\n        .withFunctionName(\"integrate\", IntegrateEvaluator.class)\n        .withFunctionName(\"density\", DensityEvaluator.class)\n        .withFunctionName(\"mannWhitney\", MannWhitneyUEvaluator.class)\n        .withFunctionName(\"sumSq\", SumSqEvaluator.class)\n        .withFunctionName(\"akima\", AkimaEvaluator.class)\n        .withFunctionName(\"lerp\", LerpEvaluator.class)\n        .withFunctionName(\"chiSquareDataSet\", ChiSquareDataSetEvaluator.class)\n        .withFunctionName(\"gtestDataSet\", GTestDataSetEvaluator.class)\n        .withFunctionName(\"termVectors\", TermVectorsEvaluator.class)\n        .withFunctionName(\"getColumnLabels\", GetColumnLabelsEvaluator.class)\n        .withFunctionName(\"getRowLabels\", GetRowLabelsEvaluator.class)\n        .withFunctionName(\"getAttribute\", GetAttributeEvaluator.class)\n        .withFunctionName(\"kmeans\", KmeansEvaluator.class)\n        .withFunctionName(\"getCentroids\", GetCentroidsEvaluator.class)\n        .withFunctionName(\"getCluster\", GetClusterEvaluator.class)\n        .withFunctionName(\"topFeatures\", TopFeaturesEvaluator.class)\n        .withFunctionName(\"featureSelect\", FeatureSelectEvaluator.class)\n        .withFunctionName(\"rowAt\", RowAtEvaluator.class)\n        .withFunctionName(\"colAt\", ColumnAtEvaluator.class)\n        .withFunctionName(\"setColumnLabels\", SetColumnLabelsEvaluator.class)\n        .withFunctionName(\"setRowLabels\", SetRowLabelsEvaluator.class)\n        .withFunctionName(\"knn\", KnnEvaluator.class)\n        .withFunctionName(\"getAttributes\", GetAttributesEvaluator.class)\n        .withFunctionName(\"indexOf\", IndexOfEvaluator.class)\n        .withFunctionName(\"columnCount\", ColumnCountEvaluator.class)\n        .withFunctionName(\"rowCount\", RowCountEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"09b9e1f390acfc30c7a60da79f64bab7244c6313","date":1516740877,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knnSearch\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n        .withFunctionName(\"geometricDistribution\", GeometricDistributionEvaluator.class)\n        .withFunctionName(\"olsRegress\", OLSRegressionEvaluator.class)\n        .withFunctionName(\"derivative\", DerivativeEvaluator.class)\n        .withFunctionName(\"spline\", SplineEvaluator.class)\n        .withFunctionName(\"ttest\", TTestEvaluator.class)\n        .withFunctionName(\"pairedTtest\", PairedTTestEvaluator.class)\n        .withFunctionName(\"multiVariateNormalDistribution\", MultiVariateNormalDistributionEvaluator.class)\n        .withFunctionName(\"integrate\", IntegrateEvaluator.class)\n        .withFunctionName(\"density\", DensityEvaluator.class)\n        .withFunctionName(\"mannWhitney\", MannWhitneyUEvaluator.class)\n        .withFunctionName(\"sumSq\", SumSqEvaluator.class)\n        .withFunctionName(\"akima\", AkimaEvaluator.class)\n        .withFunctionName(\"lerp\", LerpEvaluator.class)\n        .withFunctionName(\"chiSquareDataSet\", ChiSquareDataSetEvaluator.class)\n        .withFunctionName(\"gtestDataSet\", GTestDataSetEvaluator.class)\n        .withFunctionName(\"termVectors\", TermVectorsEvaluator.class)\n        .withFunctionName(\"getColumnLabels\", GetColumnLabelsEvaluator.class)\n        .withFunctionName(\"getRowLabels\", GetRowLabelsEvaluator.class)\n        .withFunctionName(\"getAttribute\", GetAttributeEvaluator.class)\n        .withFunctionName(\"kmeans\", KmeansEvaluator.class)\n        .withFunctionName(\"getCentroids\", GetCentroidsEvaluator.class)\n        .withFunctionName(\"getCluster\", GetClusterEvaluator.class)\n        .withFunctionName(\"topFeatures\", TopFeaturesEvaluator.class)\n        .withFunctionName(\"featureSelect\", FeatureSelectEvaluator.class)\n        .withFunctionName(\"rowAt\", RowAtEvaluator.class)\n        .withFunctionName(\"colAt\", ColumnAtEvaluator.class)\n        .withFunctionName(\"setColumnLabels\", SetColumnLabelsEvaluator.class)\n        .withFunctionName(\"setRowLabels\", SetRowLabelsEvaluator.class)\n        .withFunctionName(\"knn\", KnnEvaluator.class)\n        .withFunctionName(\"getAttributes\", GetAttributesEvaluator.class)\n        .withFunctionName(\"indexOf\", IndexOfEvaluator.class)\n        .withFunctionName(\"columnCount\", ColumnCountEvaluator.class)\n        .withFunctionName(\"rowCount\", RowCountEvaluator.class)\n        .withFunctionName(\"fuzzyKmeans\", FuzzyKmeansEvaluator.class)\n        .withFunctionName(\"getMembershipMatrix\", GetMembershipMatrixEvaluator.class)\n        .withFunctionName(\"multiKmeans\", MultiKmeansEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knnSearch\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n        .withFunctionName(\"geometricDistribution\", GeometricDistributionEvaluator.class)\n        .withFunctionName(\"olsRegress\", OLSRegressionEvaluator.class)\n        .withFunctionName(\"derivative\", DerivativeEvaluator.class)\n        .withFunctionName(\"spline\", SplineEvaluator.class)\n        .withFunctionName(\"ttest\", TTestEvaluator.class)\n        .withFunctionName(\"pairedTtest\", PairedTTestEvaluator.class)\n        .withFunctionName(\"multiVariateNormalDistribution\", MultiVariateNormalDistributionEvaluator.class)\n        .withFunctionName(\"integrate\", IntegrateEvaluator.class)\n        .withFunctionName(\"density\", DensityEvaluator.class)\n        .withFunctionName(\"mannWhitney\", MannWhitneyUEvaluator.class)\n        .withFunctionName(\"sumSq\", SumSqEvaluator.class)\n        .withFunctionName(\"akima\", AkimaEvaluator.class)\n        .withFunctionName(\"lerp\", LerpEvaluator.class)\n        .withFunctionName(\"chiSquareDataSet\", ChiSquareDataSetEvaluator.class)\n        .withFunctionName(\"gtestDataSet\", GTestDataSetEvaluator.class)\n        .withFunctionName(\"termVectors\", TermVectorsEvaluator.class)\n        .withFunctionName(\"getColumnLabels\", GetColumnLabelsEvaluator.class)\n        .withFunctionName(\"getRowLabels\", GetRowLabelsEvaluator.class)\n        .withFunctionName(\"getAttribute\", GetAttributeEvaluator.class)\n        .withFunctionName(\"kmeans\", KmeansEvaluator.class)\n        .withFunctionName(\"getCentroids\", GetCentroidsEvaluator.class)\n        .withFunctionName(\"getCluster\", GetClusterEvaluator.class)\n        .withFunctionName(\"topFeatures\", TopFeaturesEvaluator.class)\n        .withFunctionName(\"featureSelect\", FeatureSelectEvaluator.class)\n        .withFunctionName(\"rowAt\", RowAtEvaluator.class)\n        .withFunctionName(\"colAt\", ColumnAtEvaluator.class)\n        .withFunctionName(\"setColumnLabels\", SetColumnLabelsEvaluator.class)\n        .withFunctionName(\"setRowLabels\", SetRowLabelsEvaluator.class)\n        .withFunctionName(\"knn\", KnnEvaluator.class)\n        .withFunctionName(\"getAttributes\", GetAttributesEvaluator.class)\n        .withFunctionName(\"indexOf\", IndexOfEvaluator.class)\n        .withFunctionName(\"columnCount\", ColumnCountEvaluator.class)\n        .withFunctionName(\"rowCount\", RowCountEvaluator.class)\n        .withFunctionName(\"fuzzyKmeans\", FuzzyKmeansEvaluator.class)\n        .withFunctionName(\"getMembershipMatrix\", GetMembershipMatrixEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441","date":1516881857,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knnSearch\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n        .withFunctionName(\"geometricDistribution\", GeometricDistributionEvaluator.class)\n        .withFunctionName(\"olsRegress\", OLSRegressionEvaluator.class)\n        .withFunctionName(\"derivative\", DerivativeEvaluator.class)\n        .withFunctionName(\"spline\", SplineEvaluator.class)\n        .withFunctionName(\"ttest\", TTestEvaluator.class)\n        .withFunctionName(\"pairedTtest\", PairedTTestEvaluator.class)\n        .withFunctionName(\"multiVariateNormalDistribution\", MultiVariateNormalDistributionEvaluator.class)\n        .withFunctionName(\"integrate\", IntegrateEvaluator.class)\n        .withFunctionName(\"density\", DensityEvaluator.class)\n        .withFunctionName(\"mannWhitney\", MannWhitneyUEvaluator.class)\n        .withFunctionName(\"sumSq\", SumSqEvaluator.class)\n        .withFunctionName(\"akima\", AkimaEvaluator.class)\n        .withFunctionName(\"lerp\", LerpEvaluator.class)\n        .withFunctionName(\"chiSquareDataSet\", ChiSquareDataSetEvaluator.class)\n        .withFunctionName(\"gtestDataSet\", GTestDataSetEvaluator.class)\n        .withFunctionName(\"termVectors\", TermVectorsEvaluator.class)\n        .withFunctionName(\"getColumnLabels\", GetColumnLabelsEvaluator.class)\n        .withFunctionName(\"getRowLabels\", GetRowLabelsEvaluator.class)\n        .withFunctionName(\"getAttribute\", GetAttributeEvaluator.class)\n        .withFunctionName(\"kmeans\", KmeansEvaluator.class)\n        .withFunctionName(\"getCentroids\", GetCentroidsEvaluator.class)\n        .withFunctionName(\"getCluster\", GetClusterEvaluator.class)\n        .withFunctionName(\"topFeatures\", TopFeaturesEvaluator.class)\n        .withFunctionName(\"featureSelect\", FeatureSelectEvaluator.class)\n        .withFunctionName(\"rowAt\", RowAtEvaluator.class)\n        .withFunctionName(\"colAt\", ColumnAtEvaluator.class)\n        .withFunctionName(\"setColumnLabels\", SetColumnLabelsEvaluator.class)\n        .withFunctionName(\"setRowLabels\", SetRowLabelsEvaluator.class)\n        .withFunctionName(\"knn\", KnnEvaluator.class)\n        .withFunctionName(\"getAttributes\", GetAttributesEvaluator.class)\n        .withFunctionName(\"indexOf\", IndexOfEvaluator.class)\n        .withFunctionName(\"columnCount\", ColumnCountEvaluator.class)\n        .withFunctionName(\"rowCount\", RowCountEvaluator.class)\n        .withFunctionName(\"fuzzyKmeans\", FuzzyKmeansEvaluator.class)\n        .withFunctionName(\"getMembershipMatrix\", GetMembershipMatrixEvaluator.class)\n        .withFunctionName(\"multiKmeans\", MultiKmeansEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knnSearch\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n        .withFunctionName(\"geometricDistribution\", GeometricDistributionEvaluator.class)\n        .withFunctionName(\"olsRegress\", OLSRegressionEvaluator.class)\n        .withFunctionName(\"derivative\", DerivativeEvaluator.class)\n        .withFunctionName(\"spline\", SplineEvaluator.class)\n        .withFunctionName(\"ttest\", TTestEvaluator.class)\n        .withFunctionName(\"pairedTtest\", PairedTTestEvaluator.class)\n        .withFunctionName(\"multiVariateNormalDistribution\", MultiVariateNormalDistributionEvaluator.class)\n        .withFunctionName(\"integrate\", IntegrateEvaluator.class)\n        .withFunctionName(\"density\", DensityEvaluator.class)\n        .withFunctionName(\"mannWhitney\", MannWhitneyUEvaluator.class)\n        .withFunctionName(\"sumSq\", SumSqEvaluator.class)\n        .withFunctionName(\"akima\", AkimaEvaluator.class)\n        .withFunctionName(\"lerp\", LerpEvaluator.class)\n        .withFunctionName(\"chiSquareDataSet\", ChiSquareDataSetEvaluator.class)\n        .withFunctionName(\"gtestDataSet\", GTestDataSetEvaluator.class)\n        .withFunctionName(\"termVectors\", TermVectorsEvaluator.class)\n        .withFunctionName(\"getColumnLabels\", GetColumnLabelsEvaluator.class)\n        .withFunctionName(\"getRowLabels\", GetRowLabelsEvaluator.class)\n        .withFunctionName(\"getAttribute\", GetAttributeEvaluator.class)\n        .withFunctionName(\"kmeans\", KmeansEvaluator.class)\n        .withFunctionName(\"getCentroids\", GetCentroidsEvaluator.class)\n        .withFunctionName(\"getCluster\", GetClusterEvaluator.class)\n        .withFunctionName(\"topFeatures\", TopFeaturesEvaluator.class)\n        .withFunctionName(\"featureSelect\", FeatureSelectEvaluator.class)\n        .withFunctionName(\"rowAt\", RowAtEvaluator.class)\n        .withFunctionName(\"colAt\", ColumnAtEvaluator.class)\n        .withFunctionName(\"setColumnLabels\", SetColumnLabelsEvaluator.class)\n        .withFunctionName(\"setRowLabels\", SetRowLabelsEvaluator.class)\n        .withFunctionName(\"knn\", KnnEvaluator.class)\n        .withFunctionName(\"getAttributes\", GetAttributesEvaluator.class)\n        .withFunctionName(\"indexOf\", IndexOfEvaluator.class)\n        .withFunctionName(\"columnCount\", ColumnCountEvaluator.class)\n        .withFunctionName(\"rowCount\", RowCountEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9762899335811430bb7c7864b00b3da95888510c","date":1518826057,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knnSearch\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n        .withFunctionName(\"geometricDistribution\", GeometricDistributionEvaluator.class)\n        .withFunctionName(\"olsRegress\", OLSRegressionEvaluator.class)\n        .withFunctionName(\"derivative\", DerivativeEvaluator.class)\n        .withFunctionName(\"spline\", SplineEvaluator.class)\n        .withFunctionName(\"ttest\", TTestEvaluator.class)\n        .withFunctionName(\"pairedTtest\", PairedTTestEvaluator.class)\n        .withFunctionName(\"multiVariateNormalDistribution\", MultiVariateNormalDistributionEvaluator.class)\n        .withFunctionName(\"integrate\", IntegrateEvaluator.class)\n        .withFunctionName(\"density\", DensityEvaluator.class)\n        .withFunctionName(\"mannWhitney\", MannWhitneyUEvaluator.class)\n        .withFunctionName(\"sumSq\", SumSqEvaluator.class)\n        .withFunctionName(\"akima\", AkimaEvaluator.class)\n        .withFunctionName(\"lerp\", LerpEvaluator.class)\n        .withFunctionName(\"chiSquareDataSet\", ChiSquareDataSetEvaluator.class)\n        .withFunctionName(\"gtestDataSet\", GTestDataSetEvaluator.class)\n        .withFunctionName(\"termVectors\", TermVectorsEvaluator.class)\n        .withFunctionName(\"getColumnLabels\", GetColumnLabelsEvaluator.class)\n        .withFunctionName(\"getRowLabels\", GetRowLabelsEvaluator.class)\n        .withFunctionName(\"getAttribute\", GetAttributeEvaluator.class)\n        .withFunctionName(\"kmeans\", KmeansEvaluator.class)\n        .withFunctionName(\"getCentroids\", GetCentroidsEvaluator.class)\n        .withFunctionName(\"getCluster\", GetClusterEvaluator.class)\n        .withFunctionName(\"topFeatures\", TopFeaturesEvaluator.class)\n        .withFunctionName(\"featureSelect\", FeatureSelectEvaluator.class)\n        .withFunctionName(\"rowAt\", RowAtEvaluator.class)\n        .withFunctionName(\"colAt\", ColumnAtEvaluator.class)\n        .withFunctionName(\"setColumnLabels\", SetColumnLabelsEvaluator.class)\n        .withFunctionName(\"setRowLabels\", SetRowLabelsEvaluator.class)\n        .withFunctionName(\"knn\", KnnEvaluator.class)\n        .withFunctionName(\"getAttributes\", GetAttributesEvaluator.class)\n        .withFunctionName(\"indexOf\", IndexOfEvaluator.class)\n        .withFunctionName(\"columnCount\", ColumnCountEvaluator.class)\n        .withFunctionName(\"rowCount\", RowCountEvaluator.class)\n        .withFunctionName(\"fuzzyKmeans\", FuzzyKmeansEvaluator.class)\n        .withFunctionName(\"getMembershipMatrix\", GetMembershipMatrixEvaluator.class)\n        .withFunctionName(\"multiKmeans\", MultiKmeansEvaluator.class)\n        .withFunctionName(\"l2norm\", NormEvaluator.class)\n        .withFunctionName(\"l1norm\", L1NormEvaluator.class)\n        .withFunctionName(\"linfnorm\", LInfNormEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knnSearch\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n        .withFunctionName(\"geometricDistribution\", GeometricDistributionEvaluator.class)\n        .withFunctionName(\"olsRegress\", OLSRegressionEvaluator.class)\n        .withFunctionName(\"derivative\", DerivativeEvaluator.class)\n        .withFunctionName(\"spline\", SplineEvaluator.class)\n        .withFunctionName(\"ttest\", TTestEvaluator.class)\n        .withFunctionName(\"pairedTtest\", PairedTTestEvaluator.class)\n        .withFunctionName(\"multiVariateNormalDistribution\", MultiVariateNormalDistributionEvaluator.class)\n        .withFunctionName(\"integrate\", IntegrateEvaluator.class)\n        .withFunctionName(\"density\", DensityEvaluator.class)\n        .withFunctionName(\"mannWhitney\", MannWhitneyUEvaluator.class)\n        .withFunctionName(\"sumSq\", SumSqEvaluator.class)\n        .withFunctionName(\"akima\", AkimaEvaluator.class)\n        .withFunctionName(\"lerp\", LerpEvaluator.class)\n        .withFunctionName(\"chiSquareDataSet\", ChiSquareDataSetEvaluator.class)\n        .withFunctionName(\"gtestDataSet\", GTestDataSetEvaluator.class)\n        .withFunctionName(\"termVectors\", TermVectorsEvaluator.class)\n        .withFunctionName(\"getColumnLabels\", GetColumnLabelsEvaluator.class)\n        .withFunctionName(\"getRowLabels\", GetRowLabelsEvaluator.class)\n        .withFunctionName(\"getAttribute\", GetAttributeEvaluator.class)\n        .withFunctionName(\"kmeans\", KmeansEvaluator.class)\n        .withFunctionName(\"getCentroids\", GetCentroidsEvaluator.class)\n        .withFunctionName(\"getCluster\", GetClusterEvaluator.class)\n        .withFunctionName(\"topFeatures\", TopFeaturesEvaluator.class)\n        .withFunctionName(\"featureSelect\", FeatureSelectEvaluator.class)\n        .withFunctionName(\"rowAt\", RowAtEvaluator.class)\n        .withFunctionName(\"colAt\", ColumnAtEvaluator.class)\n        .withFunctionName(\"setColumnLabels\", SetColumnLabelsEvaluator.class)\n        .withFunctionName(\"setRowLabels\", SetRowLabelsEvaluator.class)\n        .withFunctionName(\"knn\", KnnEvaluator.class)\n        .withFunctionName(\"getAttributes\", GetAttributesEvaluator.class)\n        .withFunctionName(\"indexOf\", IndexOfEvaluator.class)\n        .withFunctionName(\"columnCount\", ColumnCountEvaluator.class)\n        .withFunctionName(\"rowCount\", RowCountEvaluator.class)\n        .withFunctionName(\"fuzzyKmeans\", FuzzyKmeansEvaluator.class)\n        .withFunctionName(\"getMembershipMatrix\", GetMembershipMatrixEvaluator.class)\n        .withFunctionName(\"multiKmeans\", MultiKmeansEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6c06c8eea352c1a2545792116e5f91fa3476e2a7","date":1519086445,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knnSearch\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n        .withFunctionName(\"geometricDistribution\", GeometricDistributionEvaluator.class)\n        .withFunctionName(\"olsRegress\", OLSRegressionEvaluator.class)\n        .withFunctionName(\"derivative\", DerivativeEvaluator.class)\n        .withFunctionName(\"spline\", SplineEvaluator.class)\n        .withFunctionName(\"ttest\", TTestEvaluator.class)\n        .withFunctionName(\"pairedTtest\", PairedTTestEvaluator.class)\n        .withFunctionName(\"multiVariateNormalDistribution\", MultiVariateNormalDistributionEvaluator.class)\n        .withFunctionName(\"integrate\", IntegrateEvaluator.class)\n        .withFunctionName(\"density\", DensityEvaluator.class)\n        .withFunctionName(\"mannWhitney\", MannWhitneyUEvaluator.class)\n        .withFunctionName(\"sumSq\", SumSqEvaluator.class)\n        .withFunctionName(\"akima\", AkimaEvaluator.class)\n        .withFunctionName(\"lerp\", LerpEvaluator.class)\n        .withFunctionName(\"chiSquareDataSet\", ChiSquareDataSetEvaluator.class)\n        .withFunctionName(\"gtestDataSet\", GTestDataSetEvaluator.class)\n        .withFunctionName(\"termVectors\", TermVectorsEvaluator.class)\n        .withFunctionName(\"getColumnLabels\", GetColumnLabelsEvaluator.class)\n        .withFunctionName(\"getRowLabels\", GetRowLabelsEvaluator.class)\n        .withFunctionName(\"getAttribute\", GetAttributeEvaluator.class)\n        .withFunctionName(\"kmeans\", KmeansEvaluator.class)\n        .withFunctionName(\"getCentroids\", GetCentroidsEvaluator.class)\n        .withFunctionName(\"getCluster\", GetClusterEvaluator.class)\n        .withFunctionName(\"topFeatures\", TopFeaturesEvaluator.class)\n        .withFunctionName(\"featureSelect\", FeatureSelectEvaluator.class)\n        .withFunctionName(\"rowAt\", RowAtEvaluator.class)\n        .withFunctionName(\"colAt\", ColumnAtEvaluator.class)\n        .withFunctionName(\"setColumnLabels\", SetColumnLabelsEvaluator.class)\n        .withFunctionName(\"setRowLabels\", SetRowLabelsEvaluator.class)\n        .withFunctionName(\"knn\", KnnEvaluator.class)\n        .withFunctionName(\"getAttributes\", GetAttributesEvaluator.class)\n        .withFunctionName(\"indexOf\", IndexOfEvaluator.class)\n        .withFunctionName(\"columnCount\", ColumnCountEvaluator.class)\n        .withFunctionName(\"rowCount\", RowCountEvaluator.class)\n        .withFunctionName(\"fuzzyKmeans\", FuzzyKmeansEvaluator.class)\n        .withFunctionName(\"getMembershipMatrix\", GetMembershipMatrixEvaluator.class)\n        .withFunctionName(\"multiKmeans\", MultiKmeansEvaluator.class)\n        .withFunctionName(\"l2norm\", NormEvaluator.class)\n        .withFunctionName(\"l1norm\", L1NormEvaluator.class)\n        .withFunctionName(\"linfnorm\", LInfNormEvaluator.class)\n        .withFunctionName(\"matrixMult\", MatrixMultiplyEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knnSearch\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n        .withFunctionName(\"geometricDistribution\", GeometricDistributionEvaluator.class)\n        .withFunctionName(\"olsRegress\", OLSRegressionEvaluator.class)\n        .withFunctionName(\"derivative\", DerivativeEvaluator.class)\n        .withFunctionName(\"spline\", SplineEvaluator.class)\n        .withFunctionName(\"ttest\", TTestEvaluator.class)\n        .withFunctionName(\"pairedTtest\", PairedTTestEvaluator.class)\n        .withFunctionName(\"multiVariateNormalDistribution\", MultiVariateNormalDistributionEvaluator.class)\n        .withFunctionName(\"integrate\", IntegrateEvaluator.class)\n        .withFunctionName(\"density\", DensityEvaluator.class)\n        .withFunctionName(\"mannWhitney\", MannWhitneyUEvaluator.class)\n        .withFunctionName(\"sumSq\", SumSqEvaluator.class)\n        .withFunctionName(\"akima\", AkimaEvaluator.class)\n        .withFunctionName(\"lerp\", LerpEvaluator.class)\n        .withFunctionName(\"chiSquareDataSet\", ChiSquareDataSetEvaluator.class)\n        .withFunctionName(\"gtestDataSet\", GTestDataSetEvaluator.class)\n        .withFunctionName(\"termVectors\", TermVectorsEvaluator.class)\n        .withFunctionName(\"getColumnLabels\", GetColumnLabelsEvaluator.class)\n        .withFunctionName(\"getRowLabels\", GetRowLabelsEvaluator.class)\n        .withFunctionName(\"getAttribute\", GetAttributeEvaluator.class)\n        .withFunctionName(\"kmeans\", KmeansEvaluator.class)\n        .withFunctionName(\"getCentroids\", GetCentroidsEvaluator.class)\n        .withFunctionName(\"getCluster\", GetClusterEvaluator.class)\n        .withFunctionName(\"topFeatures\", TopFeaturesEvaluator.class)\n        .withFunctionName(\"featureSelect\", FeatureSelectEvaluator.class)\n        .withFunctionName(\"rowAt\", RowAtEvaluator.class)\n        .withFunctionName(\"colAt\", ColumnAtEvaluator.class)\n        .withFunctionName(\"setColumnLabels\", SetColumnLabelsEvaluator.class)\n        .withFunctionName(\"setRowLabels\", SetRowLabelsEvaluator.class)\n        .withFunctionName(\"knn\", KnnEvaluator.class)\n        .withFunctionName(\"getAttributes\", GetAttributesEvaluator.class)\n        .withFunctionName(\"indexOf\", IndexOfEvaluator.class)\n        .withFunctionName(\"columnCount\", ColumnCountEvaluator.class)\n        .withFunctionName(\"rowCount\", RowCountEvaluator.class)\n        .withFunctionName(\"fuzzyKmeans\", FuzzyKmeansEvaluator.class)\n        .withFunctionName(\"getMembershipMatrix\", GetMembershipMatrixEvaluator.class)\n        .withFunctionName(\"multiKmeans\", MultiKmeansEvaluator.class)\n        .withFunctionName(\"l2norm\", NormEvaluator.class)\n        .withFunctionName(\"l1norm\", L1NormEvaluator.class)\n        .withFunctionName(\"linfnorm\", LInfNormEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4169fa0e078ff638eaa62cb2c54034a999129766","date":1519676291,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knnSearch\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n        .withFunctionName(\"geometricDistribution\", GeometricDistributionEvaluator.class)\n        .withFunctionName(\"olsRegress\", OLSRegressionEvaluator.class)\n        .withFunctionName(\"derivative\", DerivativeEvaluator.class)\n        .withFunctionName(\"spline\", SplineEvaluator.class)\n        .withFunctionName(\"ttest\", TTestEvaluator.class)\n        .withFunctionName(\"pairedTtest\", PairedTTestEvaluator.class)\n        .withFunctionName(\"multiVariateNormalDistribution\", MultiVariateNormalDistributionEvaluator.class)\n        .withFunctionName(\"integrate\", IntegrateEvaluator.class)\n        .withFunctionName(\"density\", DensityEvaluator.class)\n        .withFunctionName(\"mannWhitney\", MannWhitneyUEvaluator.class)\n        .withFunctionName(\"sumSq\", SumSqEvaluator.class)\n        .withFunctionName(\"akima\", AkimaEvaluator.class)\n        .withFunctionName(\"lerp\", LerpEvaluator.class)\n        .withFunctionName(\"chiSquareDataSet\", ChiSquareDataSetEvaluator.class)\n        .withFunctionName(\"gtestDataSet\", GTestDataSetEvaluator.class)\n        .withFunctionName(\"termVectors\", TermVectorsEvaluator.class)\n        .withFunctionName(\"getColumnLabels\", GetColumnLabelsEvaluator.class)\n        .withFunctionName(\"getRowLabels\", GetRowLabelsEvaluator.class)\n        .withFunctionName(\"getAttribute\", GetAttributeEvaluator.class)\n        .withFunctionName(\"kmeans\", KmeansEvaluator.class)\n        .withFunctionName(\"getCentroids\", GetCentroidsEvaluator.class)\n        .withFunctionName(\"getCluster\", GetClusterEvaluator.class)\n        .withFunctionName(\"topFeatures\", TopFeaturesEvaluator.class)\n        .withFunctionName(\"featureSelect\", FeatureSelectEvaluator.class)\n        .withFunctionName(\"rowAt\", RowAtEvaluator.class)\n        .withFunctionName(\"colAt\", ColumnAtEvaluator.class)\n        .withFunctionName(\"setColumnLabels\", SetColumnLabelsEvaluator.class)\n        .withFunctionName(\"setRowLabels\", SetRowLabelsEvaluator.class)\n        .withFunctionName(\"knn\", KnnEvaluator.class)\n        .withFunctionName(\"getAttributes\", GetAttributesEvaluator.class)\n        .withFunctionName(\"indexOf\", IndexOfEvaluator.class)\n        .withFunctionName(\"columnCount\", ColumnCountEvaluator.class)\n        .withFunctionName(\"rowCount\", RowCountEvaluator.class)\n        .withFunctionName(\"fuzzyKmeans\", FuzzyKmeansEvaluator.class)\n        .withFunctionName(\"getMembershipMatrix\", GetMembershipMatrixEvaluator.class)\n        .withFunctionName(\"multiKmeans\", MultiKmeansEvaluator.class)\n        .withFunctionName(\"l2norm\", NormEvaluator.class)\n        .withFunctionName(\"l1norm\", L1NormEvaluator.class)\n        .withFunctionName(\"linfnorm\", LInfNormEvaluator.class)\n        .withFunctionName(\"matrixMult\", MatrixMultiplyEvaluator.class)\n        .withFunctionName(\"bicubicSpline\", BicubicSplineEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knnSearch\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n        .withFunctionName(\"geometricDistribution\", GeometricDistributionEvaluator.class)\n        .withFunctionName(\"olsRegress\", OLSRegressionEvaluator.class)\n        .withFunctionName(\"derivative\", DerivativeEvaluator.class)\n        .withFunctionName(\"spline\", SplineEvaluator.class)\n        .withFunctionName(\"ttest\", TTestEvaluator.class)\n        .withFunctionName(\"pairedTtest\", PairedTTestEvaluator.class)\n        .withFunctionName(\"multiVariateNormalDistribution\", MultiVariateNormalDistributionEvaluator.class)\n        .withFunctionName(\"integrate\", IntegrateEvaluator.class)\n        .withFunctionName(\"density\", DensityEvaluator.class)\n        .withFunctionName(\"mannWhitney\", MannWhitneyUEvaluator.class)\n        .withFunctionName(\"sumSq\", SumSqEvaluator.class)\n        .withFunctionName(\"akima\", AkimaEvaluator.class)\n        .withFunctionName(\"lerp\", LerpEvaluator.class)\n        .withFunctionName(\"chiSquareDataSet\", ChiSquareDataSetEvaluator.class)\n        .withFunctionName(\"gtestDataSet\", GTestDataSetEvaluator.class)\n        .withFunctionName(\"termVectors\", TermVectorsEvaluator.class)\n        .withFunctionName(\"getColumnLabels\", GetColumnLabelsEvaluator.class)\n        .withFunctionName(\"getRowLabels\", GetRowLabelsEvaluator.class)\n        .withFunctionName(\"getAttribute\", GetAttributeEvaluator.class)\n        .withFunctionName(\"kmeans\", KmeansEvaluator.class)\n        .withFunctionName(\"getCentroids\", GetCentroidsEvaluator.class)\n        .withFunctionName(\"getCluster\", GetClusterEvaluator.class)\n        .withFunctionName(\"topFeatures\", TopFeaturesEvaluator.class)\n        .withFunctionName(\"featureSelect\", FeatureSelectEvaluator.class)\n        .withFunctionName(\"rowAt\", RowAtEvaluator.class)\n        .withFunctionName(\"colAt\", ColumnAtEvaluator.class)\n        .withFunctionName(\"setColumnLabels\", SetColumnLabelsEvaluator.class)\n        .withFunctionName(\"setRowLabels\", SetRowLabelsEvaluator.class)\n        .withFunctionName(\"knn\", KnnEvaluator.class)\n        .withFunctionName(\"getAttributes\", GetAttributesEvaluator.class)\n        .withFunctionName(\"indexOf\", IndexOfEvaluator.class)\n        .withFunctionName(\"columnCount\", ColumnCountEvaluator.class)\n        .withFunctionName(\"rowCount\", RowCountEvaluator.class)\n        .withFunctionName(\"fuzzyKmeans\", FuzzyKmeansEvaluator.class)\n        .withFunctionName(\"getMembershipMatrix\", GetMembershipMatrixEvaluator.class)\n        .withFunctionName(\"multiKmeans\", MultiKmeansEvaluator.class)\n        .withFunctionName(\"l2norm\", NormEvaluator.class)\n        .withFunctionName(\"l1norm\", L1NormEvaluator.class)\n        .withFunctionName(\"linfnorm\", LInfNormEvaluator.class)\n        .withFunctionName(\"matrixMult\", MatrixMultiplyEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"61ee8f1fa567e6cea780b707334c8b330b66662e","date":1522686751,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    Lang.register(streamFactory);\n\n    /*\n    * Add the core functions. These are functions that rely directly on either Lucene or Solr\n    * capabilities that are not part of Lang.\n    */\n    streamFactory.withFunctionName(\"analyze\",  AnalyzeEvaluator.class);\n    streamFactory.withFunctionName(\"classify\", ClassifyStream.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    streamFactory\n        // source streams\n        .withFunctionName(\"search\", CloudSolrStream.class)\n        .withFunctionName(\"facet\", FacetStream.class)\n        .withFunctionName(\"update\", UpdateStream.class)\n        .withFunctionName(\"jdbc\", JDBCStream.class)\n        .withFunctionName(\"topic\", TopicStream.class)\n        .withFunctionName(\"commit\", CommitStream.class)\n        .withFunctionName(\"random\", RandomStream.class)\n        .withFunctionName(\"knnSearch\", KnnStream.class)\n\n        // decorator streams\n        .withFunctionName(\"merge\", MergeStream.class)\n        .withFunctionName(\"unique\", UniqueStream.class)\n        .withFunctionName(\"top\", RankStream.class)\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"reduce\", ReducerStream.class)\n        .withFunctionName(\"parallel\", ParallelStream.class)\n        .withFunctionName(\"rollup\", RollupStream.class)\n        .withFunctionName(\"stats\", StatsStream.class)\n        .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n        .withFunctionName(\"leftOuterJoin\", LeftOuterJoinStream.class)\n        .withFunctionName(\"hashJoin\", HashJoinStream.class)\n        .withFunctionName(\"outerHashJoin\", OuterHashJoinStream.class)\n        .withFunctionName(\"intersect\", IntersectStream.class)\n        .withFunctionName(\"complement\", ComplementStream.class)\n        .withFunctionName(SORT, SortStream.class)\n        .withFunctionName(\"train\", TextLogitStream.class)\n        .withFunctionName(\"features\", FeaturesSelectionStream.class)\n        .withFunctionName(\"daemon\", DaemonStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"select\", SelectStream.class)\n        .withFunctionName(\"shortestPath\", ShortestPathStream.class)\n        .withFunctionName(\"gatherNodes\", GatherNodesStream.class)\n        .withFunctionName(\"nodes\", GatherNodesStream.class)\n        .withFunctionName(\"scoreNodes\", ScoreNodesStream.class)\n        .withFunctionName(\"model\", ModelStream.class)\n        .withFunctionName(\"classify\", ClassifyStream.class)\n        .withFunctionName(\"fetch\", FetchStream.class)\n        .withFunctionName(\"executor\", ExecutorStream.class)\n        .withFunctionName(\"null\", NullStream.class)\n        .withFunctionName(\"priority\", PriorityStream.class)\n        .withFunctionName(\"significantTerms\", SignificantTermsStream.class)\n        .withFunctionName(\"cartesianProduct\", CartesianProductStream.class)\n        .withFunctionName(\"shuffle\", ShuffleStream.class)\n        .withFunctionName(\"calc\", CalculatorStream.class)\n        .withFunctionName(\"eval\", EvalStream.class)\n        .withFunctionName(\"echo\", EchoStream.class)\n        .withFunctionName(\"cell\", CellStream.class)\n        .withFunctionName(\"list\", ListStream.class)\n        .withFunctionName(\"let\", LetStream.class)\n        .withFunctionName(\"get\", GetStream.class)\n        .withFunctionName(\"timeseries\", TimeSeriesStream.class)\n        .withFunctionName(\"tuple\", TupStream.class)\n        .withFunctionName(\"sql\", SqlStream.class)\n\n        // metrics\n        .withFunctionName(\"min\", MinMetric.class)\n        .withFunctionName(\"max\", MaxMetric.class)\n        .withFunctionName(\"avg\", MeanMetric.class)\n        .withFunctionName(\"sum\", SumMetric.class)\n        .withFunctionName(\"count\", CountMetric.class)\n\n        // tuple manipulation operations\n        .withFunctionName(\"replace\", ReplaceOperation.class)\n        .withFunctionName(\"concat\", ConcatOperation.class)\n\n        // stream reduction operations\n        .withFunctionName(\"group\", GroupOperation.class)\n        .withFunctionName(\"distinct\", DistinctOperation.class)\n        .withFunctionName(\"having\", HavingStream.class)\n\n        // Stream Evaluators\n        .withFunctionName(\"val\", RawValueEvaluator.class)\n\n        // New Evaluators\n        .withFunctionName(\"anova\", AnovaEvaluator.class)\n        .withFunctionName(\"array\", ArrayEvaluator.class)\n        .withFunctionName(\"col\", ColumnEvaluator.class)\n        .withFunctionName(\"conv\", ConvolutionEvaluator.class)\n        .withFunctionName(\"copyOfRange\", CopyOfRangeEvaluator.class)\n        .withFunctionName(\"copyOf\", CopyOfEvaluator.class)\n        .withFunctionName(\"cov\", CovarianceEvaluator.class)\n        .withFunctionName(\"corr\", CorrelationEvaluator.class)\n        .withFunctionName(\"describe\", DescribeEvaluator.class)\n        .withFunctionName(\"distance\", DistanceEvaluator.class)\n        .withFunctionName(\"empiricalDistribution\", EmpiricalDistributionEvaluator.class)\n        .withFunctionName(\"finddelay\", FindDelayEvaluator.class)\n        .withFunctionName(\"hist\", HistogramEvaluator.class)\n        .withFunctionName(\"length\", LengthEvaluator.class)\n        .withFunctionName(\"movingAvg\", MovingAverageEvaluator.class)\n        .withFunctionName(\"standardize\", NormalizeEvaluator.class)\n        .withFunctionName(\"percentile\", PercentileEvaluator.class)\n        .withFunctionName(\"predict\", PredictEvaluator.class)\n        .withFunctionName(\"rank\", RankEvaluator.class)\n        .withFunctionName(\"regress\", RegressionEvaluator.class)\n        .withFunctionName(\"rev\", ReverseEvaluator.class)\n        .withFunctionName(\"scale\", ScaleEvaluator.class)\n        .withFunctionName(\"sequence\", SequenceEvaluator.class)\n        .withFunctionName(\"addAll\", AppendEvaluator.class)\n        .withFunctionName(\"append\", AppendEvaluator.class)\n        .withFunctionName(\"plot\", PlotStream.class)\n        .withFunctionName(\"normalDistribution\", NormalDistributionEvaluator.class)\n        .withFunctionName(\"uniformDistribution\", UniformDistributionEvaluator.class)\n        .withFunctionName(\"sample\", SampleEvaluator.class)\n        .withFunctionName(\"kolmogorovSmirnov\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"ks\", KolmogorovSmirnovEvaluator.class)\n        .withFunctionName(\"asc\", AscEvaluator.class)\n        .withFunctionName(\"cumulativeProbability\", CumulativeProbabilityEvaluator.class)\n        .withFunctionName(\"ebeAdd\", EBEAddEvaluator.class)\n        .withFunctionName(\"ebeSubtract\", EBESubtractEvaluator.class)\n        .withFunctionName(\"ebeMultiply\", EBEMultiplyEvaluator.class)\n        .withFunctionName(\"ebeDivide\", EBEDivideEvaluator.class)\n        .withFunctionName(\"dotProduct\", DotProductEvaluator.class)\n        .withFunctionName(\"cosineSimilarity\", CosineSimilarityEvaluator.class)\n        .withFunctionName(\"freqTable\", FrequencyTableEvaluator.class)\n        .withFunctionName(\"uniformIntegerDistribution\", UniformIntegerDistributionEvaluator.class)\n        .withFunctionName(\"binomialDistribution\", BinomialDistributionEvaluator.class)\n        .withFunctionName(\"poissonDistribution\", PoissonDistributionEvaluator.class)\n        .withFunctionName(\"enumeratedDistribution\", EnumeratedDistributionEvaluator.class)\n        .withFunctionName(\"probability\", ProbabilityEvaluator.class)\n        .withFunctionName(\"sumDifference\", SumDifferenceEvaluator.class)\n        .withFunctionName(\"meanDifference\", MeanDifferenceEvaluator.class)\n        .withFunctionName(\"primes\", PrimesEvaluator.class)\n        .withFunctionName(\"factorial\", FactorialEvaluator.class)\n        .withFunctionName(\"movingMedian\", MovingMedianEvaluator.class)\n        .withFunctionName(\"binomialCoefficient\", BinomialCoefficientEvaluator.class)\n        .withFunctionName(\"expMovingAvg\", ExponentialMovingAverageEvaluator.class)\n        .withFunctionName(\"monteCarlo\", MonteCarloEvaluator.class)\n        .withFunctionName(\"constantDistribution\", ConstantDistributionEvaluator.class)\n        .withFunctionName(\"weibullDistribution\", WeibullDistributionEvaluator.class)\n        .withFunctionName(\"mean\", MeanEvaluator.class)\n        .withFunctionName(\"mode\", ModeEvaluator.class)\n        .withFunctionName(\"logNormalDistribution\", LogNormalDistributionEvaluator.class)\n        .withFunctionName(\"zipFDistribution\", ZipFDistributionEvaluator.class)\n        .withFunctionName(\"gammaDistribution\", GammaDistributionEvaluator.class)\n        .withFunctionName(\"betaDistribution\", BetaDistributionEvaluator.class)\n        .withFunctionName(\"polyfit\", PolyFitEvaluator.class)\n        .withFunctionName(\"harmonicFit\", HarmonicFitEvaluator.class)\n        .withFunctionName(\"loess\", LoessEvaluator.class)\n        .withFunctionName(\"matrix\", MatrixEvaluator.class)\n        .withFunctionName(\"transpose\", TransposeEvaluator.class)\n        .withFunctionName(\"unitize\", UnitEvaluator.class)\n        .withFunctionName(\"triangularDistribution\", TriangularDistributionEvaluator.class)\n        .withFunctionName(\"precision\", PrecisionEvaluator.class)\n        .withFunctionName(\"minMaxScale\", MinMaxScaleEvaluator.class)\n        .withFunctionName(\"markovChain\", MarkovChainEvaluator.class)\n        .withFunctionName(\"grandSum\", GrandSumEvaluator.class)\n        .withFunctionName(\"scalarAdd\", ScalarAddEvaluator.class)\n        .withFunctionName(\"scalarSubtract\", ScalarSubtractEvaluator.class)\n        .withFunctionName(\"scalarMultiply\", ScalarMultiplyEvaluator.class)\n        .withFunctionName(\"scalarDivide\", ScalarDivideEvaluator.class)\n        .withFunctionName(\"sumRows\", SumRowsEvaluator.class)\n        .withFunctionName(\"sumColumns\", SumColumnsEvaluator.class)\n        .withFunctionName(\"diff\", TimeDifferencingEvaluator.class)\n        .withFunctionName(\"corrPValues\", CorrelationSignificanceEvaluator.class)\n        .withFunctionName(\"normalizeSum\", NormalizeSumEvaluator.class)\n        .withFunctionName(\"geometricDistribution\", GeometricDistributionEvaluator.class)\n        .withFunctionName(\"olsRegress\", OLSRegressionEvaluator.class)\n        .withFunctionName(\"derivative\", DerivativeEvaluator.class)\n        .withFunctionName(\"spline\", SplineEvaluator.class)\n        .withFunctionName(\"ttest\", TTestEvaluator.class)\n        .withFunctionName(\"pairedTtest\", PairedTTestEvaluator.class)\n        .withFunctionName(\"multiVariateNormalDistribution\", MultiVariateNormalDistributionEvaluator.class)\n        .withFunctionName(\"integrate\", IntegrateEvaluator.class)\n        .withFunctionName(\"density\", DensityEvaluator.class)\n        .withFunctionName(\"mannWhitney\", MannWhitneyUEvaluator.class)\n        .withFunctionName(\"sumSq\", SumSqEvaluator.class)\n        .withFunctionName(\"akima\", AkimaEvaluator.class)\n        .withFunctionName(\"lerp\", LerpEvaluator.class)\n        .withFunctionName(\"chiSquareDataSet\", ChiSquareDataSetEvaluator.class)\n        .withFunctionName(\"gtestDataSet\", GTestDataSetEvaluator.class)\n        .withFunctionName(\"termVectors\", TermVectorsEvaluator.class)\n        .withFunctionName(\"getColumnLabels\", GetColumnLabelsEvaluator.class)\n        .withFunctionName(\"getRowLabels\", GetRowLabelsEvaluator.class)\n        .withFunctionName(\"getAttribute\", GetAttributeEvaluator.class)\n        .withFunctionName(\"kmeans\", KmeansEvaluator.class)\n        .withFunctionName(\"getCentroids\", GetCentroidsEvaluator.class)\n        .withFunctionName(\"getCluster\", GetClusterEvaluator.class)\n        .withFunctionName(\"topFeatures\", TopFeaturesEvaluator.class)\n        .withFunctionName(\"featureSelect\", FeatureSelectEvaluator.class)\n        .withFunctionName(\"rowAt\", RowAtEvaluator.class)\n        .withFunctionName(\"colAt\", ColumnAtEvaluator.class)\n        .withFunctionName(\"setColumnLabels\", SetColumnLabelsEvaluator.class)\n        .withFunctionName(\"setRowLabels\", SetRowLabelsEvaluator.class)\n        .withFunctionName(\"knn\", KnnEvaluator.class)\n        .withFunctionName(\"getAttributes\", GetAttributesEvaluator.class)\n        .withFunctionName(\"indexOf\", IndexOfEvaluator.class)\n        .withFunctionName(\"columnCount\", ColumnCountEvaluator.class)\n        .withFunctionName(\"rowCount\", RowCountEvaluator.class)\n        .withFunctionName(\"fuzzyKmeans\", FuzzyKmeansEvaluator.class)\n        .withFunctionName(\"getMembershipMatrix\", GetMembershipMatrixEvaluator.class)\n        .withFunctionName(\"multiKmeans\", MultiKmeansEvaluator.class)\n        .withFunctionName(\"l2norm\", NormEvaluator.class)\n        .withFunctionName(\"l1norm\", L1NormEvaluator.class)\n        .withFunctionName(\"linfnorm\", LInfNormEvaluator.class)\n        .withFunctionName(\"matrixMult\", MatrixMultiplyEvaluator.class)\n        .withFunctionName(\"bicubicSpline\", BicubicSplineEvaluator.class)\n\n        // Boolean Stream Evaluators\n\n        .withFunctionName(\"and\", AndEvaluator.class)\n        .withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n        .withFunctionName(\"eq\", EqualToEvaluator.class)\n        .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n        .withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n        .withFunctionName(\"lt\", LessThanEvaluator.class)\n        .withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n        .withFunctionName(\"not\", NotEvaluator.class)\n        .withFunctionName(\"or\", OrEvaluator.class)\n\n        // Date Time Evaluators\n        .withFunctionName(TemporalEvaluatorYear.FUNCTION_NAME, TemporalEvaluatorYear.class)\n        .withFunctionName(TemporalEvaluatorMonth.FUNCTION_NAME, TemporalEvaluatorMonth.class)\n        .withFunctionName(TemporalEvaluatorDay.FUNCTION_NAME, TemporalEvaluatorDay.class)\n        .withFunctionName(TemporalEvaluatorDayOfYear.FUNCTION_NAME, TemporalEvaluatorDayOfYear.class)\n        .withFunctionName(TemporalEvaluatorHour.FUNCTION_NAME, TemporalEvaluatorHour.class)\n        .withFunctionName(TemporalEvaluatorMinute.FUNCTION_NAME, TemporalEvaluatorMinute.class)\n        .withFunctionName(TemporalEvaluatorSecond.FUNCTION_NAME, TemporalEvaluatorSecond.class)\n        .withFunctionName(TemporalEvaluatorEpoch.FUNCTION_NAME, TemporalEvaluatorEpoch.class)\n        .withFunctionName(TemporalEvaluatorWeek.FUNCTION_NAME, TemporalEvaluatorWeek.class)\n        .withFunctionName(TemporalEvaluatorQuarter.FUNCTION_NAME, TemporalEvaluatorQuarter.class)\n        .withFunctionName(TemporalEvaluatorDayOfQuarter.FUNCTION_NAME, TemporalEvaluatorDayOfQuarter.class)\n\n        // Number Stream Evaluators\n        .withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n        .withFunctionName(\"add\", AddEvaluator.class)\n        .withFunctionName(\"div\", DivideEvaluator.class)\n        .withFunctionName(\"mult\", MultiplyEvaluator.class)\n        .withFunctionName(\"sub\", SubtractEvaluator.class)\n        .withFunctionName(\"log\", NaturalLogEvaluator.class)\n        .withFunctionName(\"pow\", PowerEvaluator.class)\n        .withFunctionName(\"mod\", ModuloEvaluator.class)\n        .withFunctionName(\"ceil\", CeilingEvaluator.class)\n        .withFunctionName(\"floor\", FloorEvaluator.class)\n        .withFunctionName(\"sin\", SineEvaluator.class)\n        .withFunctionName(\"asin\", ArcSineEvaluator.class)\n        .withFunctionName(\"sinh\", HyperbolicSineEvaluator.class)\n        .withFunctionName(\"cos\", CosineEvaluator.class)\n        .withFunctionName(\"acos\", ArcCosineEvaluator.class)\n        .withFunctionName(\"cosh\", HyperbolicCosineEvaluator.class)\n        .withFunctionName(\"tan\", TangentEvaluator.class)\n        .withFunctionName(\"atan\", ArcTangentEvaluator.class)\n        .withFunctionName(\"tanh\", HyperbolicTangentEvaluator.class)\n        .withFunctionName(\"round\", RoundEvaluator.class)\n        .withFunctionName(\"sqrt\", SquareRootEvaluator.class)\n        .withFunctionName(\"cbrt\", CubedRootEvaluator.class)\n        .withFunctionName(\"coalesce\", CoalesceEvaluator.class)\n        .withFunctionName(\"uuid\", UuidEvaluator.class)\n\n        // Conditional Stream Evaluators\n        .withFunctionName(\"if\", IfThenElseEvaluator.class)\n        .withFunctionName(\"analyze\", AnalyzeEvaluator.class)\n        .withFunctionName(\"convert\", ConversionEvaluator.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2c554c4c5f1ed5b36bdbccf803f7cab34ed8f593","date":1523389558,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    /*\n    * Add the core functions. These are functions that rely directly on either Lucene or Solr\n    * capabilities that are not part of Lang.\n    */\n    streamFactory.withFunctionName(\"analyze\",  AnalyzeEvaluator.class);\n    streamFactory.withFunctionName(\"classify\", ClassifyStream.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    Lang.register(streamFactory);\n\n    /*\n    * Add the core functions. These are functions that rely directly on either Lucene or Solr\n    * capabilities that are not part of Lang.\n    */\n    streamFactory.withFunctionName(\"analyze\",  AnalyzeEvaluator.class);\n    streamFactory.withFunctionName(\"classify\", ClassifyStream.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ca87eac0e5ebea409559829e2d1608b83ba1a3a2","date":1533061783,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n    streamFactory.withSolrResourceLoader(core.getResourceLoader());\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n\n    /*\n    * Add the core functions. These are functions that rely directly on either Lucene or Solr\n    * capabilities that are not part of Lang.\n    */\n    streamFactory.withFunctionName(\"analyze\",  AnalyzeEvaluator.class);\n    streamFactory.withFunctionName(\"classify\", ClassifyStream.class);\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70d9c44f68e848648da304352cf7c045c33148f4","date":1557331987,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override\n     * <lst name=\"streamFunctions\">\n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n    streamFactory.withSolrResourceLoader(core.getResourceLoader());\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override \n     * <lst name=\"streamFunctions\"> \n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str> \n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str> \n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n    streamFactory.withSolrResourceLoader(core.getResourceLoader());\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8c9c12e48e338e77f20673caa19fda85e5f94193","date":1574450217,"type":3,"author":"Eric Pugh","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n    streamFactory.withSolrResourceLoader(core.getResourceLoader());\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n\n    /*\n     * The stream factory will always contain the zkUrl for the given collection Adds default streams with their\n     * corresponding function names. These defaults can be overridden or added to in the solrConfig in the stream\n     * RequestHandler def. Example config override\n     * <lst name=\"streamFunctions\">\n     *  <str name=\"group\">org.apache.solr.client.solrj.io.stream.ReducerStream</str>\n     *  <str name=\"count\">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>\n     * </lst>\n     */\n\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n    streamFactory.withSolrResourceLoader(core.getResourceLoader());\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"60c716cf818aff6857d8490cd0fb8b5aa432408f","date":1577074826,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n    streamFactory.withSolrResourceLoader(core.getResourceLoader());\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      if (pluginInfo.pkgName != null) {\n        ExpressibleHolder holder = new ExpressibleHolder(pluginInfo, core, SolrConfig.classVsSolrPluginInfo.get(Expressible.class));\n        streamFactory.withFunctionName(pluginInfo.name,\n            () -> holder.getClazz());\n      } else {\n        Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n        streamFactory.withFunctionName(pluginInfo.name, clazz);\n      }\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n    streamFactory.withSolrResourceLoader(core.getResourceLoader());\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","date":1577276097,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n    streamFactory.withSolrResourceLoader(core.getResourceLoader());\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      if (pluginInfo.pkgName != null) {\n        ExpressibleHolder holder = new ExpressibleHolder(pluginInfo, core, SolrConfig.classVsSolrPluginInfo.get(Expressible.class));\n        streamFactory.withFunctionName(pluginInfo.name,\n            () -> holder.getClazz());\n      } else {\n        Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n        streamFactory.withFunctionName(pluginInfo.name, clazz);\n      }\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n    streamFactory.withSolrResourceLoader(core.getResourceLoader());\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n      streamFactory.withFunctionName(pluginInfo.name, clazz);\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8d9cf2465512475832769aaccf03847a7847463","date":1579631606,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n    streamFactory.withSolrResourceLoader(core.getResourceLoader());\n\n    // This pulls all the overrides and additions from the config\n    addExpressiblePlugins(streamFactory, core);\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n    streamFactory.withSolrResourceLoader(core.getResourceLoader());\n\n    // This pulls all the overrides and additions from the config\n    List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());\n    for (PluginInfo pluginInfo : pluginInfos) {\n      if (pluginInfo.pkgName != null) {\n        ExpressibleHolder holder = new ExpressibleHolder(pluginInfo, core, SolrConfig.classVsSolrPluginInfo.get(Expressible.class));\n        streamFactory.withFunctionName(pluginInfo.name,\n            () -> holder.getClazz());\n      } else {\n        Class<? extends Expressible> clazz = core.getMemClassLoader().findClass(pluginInfo.className, Expressible.class);\n        streamFactory.withFunctionName(pluginInfo.name, clazz);\n      }\n    }\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa","date":1589312640,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.solrClientCache = coreContainer.getSolrClientCache();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          solrClientCache);\n    }\n    streamFactory.withSolrResourceLoader(core.getResourceLoader());\n\n    // This pulls all the overrides and additions from the config\n    addExpressiblePlugins(streamFactory, core);\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          clientCache);\n    }\n    streamFactory.withSolrResourceLoader(core.getResourceLoader());\n\n    // This pulls all the overrides and additions from the config\n    addExpressiblePlugins(streamFactory, core);\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        // To change body of implemented methods use File | Settings | File Templates.\n      }\n\n      @Override\n      public void postClose(SolrCore core) {\n        clientCache.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":["d7ced979f39d7651addfc7d805e1d9bfac215822"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d7ced979f39d7651addfc7d805e1d9bfac215822","date":1589391432,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  public void inform(SolrCore core) {\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.solrClientCache = coreContainer.getSolrClientCache();\n    this.coreName = core.getName();\n    String cacheKey = this.getClass().getName() + \"_\" + coreName + \"_\";\n    this.objectCache = coreContainer.getObjectCache().computeIfAbsent(cacheKey + \"objectCache\",\n        ConcurrentHashMap.class, k-> new ConcurrentHashMap());\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = coreContainer.getObjectCache().computeIfAbsent(cacheKey + \"modelCache\",\n          ModelCache.class,\n          k -> new ModelCache(250, defaultZkhost, solrClientCache));\n    }\n    streamFactory.withSolrResourceLoader(core.getResourceLoader());\n\n    // This pulls all the overrides and additions from the config\n    addExpressiblePlugins(streamFactory, core);\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.solrClientCache = coreContainer.getSolrClientCache();\n    this.coreName = core.getName();\n\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = new ModelCache(250,\n          defaultZkhost,\n          solrClientCache);\n    }\n    streamFactory.withSolrResourceLoader(core.getResourceLoader());\n\n    // This pulls all the overrides and additions from the config\n    addExpressiblePlugins(streamFactory, core);\n  }\n\n","bugFix":["e2ca4206e5497c29b07a997ea7fc47d3bac0a352","f00f1c5fad501b66705121feb623f8cfbb6712f9","2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa","b5fa1c8367f821057f943ece929329485ec708ba"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5","date":1591384964,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#inform(SolrCore).mjava","sourceNew":"  @SuppressWarnings({\"rawtypes\"})\n  public void inform(SolrCore core) {\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.solrClientCache = coreContainer.getSolrClientCache();\n    this.coreName = core.getName();\n    String cacheKey = this.getClass().getName() + \"_\" + coreName + \"_\";\n    this.objectCache = coreContainer.getObjectCache().computeIfAbsent(cacheKey + \"objectCache\",\n        ConcurrentHashMap.class, k-> new ConcurrentHashMap());\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = coreContainer.getObjectCache().computeIfAbsent(cacheKey + \"modelCache\",\n          ModelCache.class,\n          k -> new ModelCache(250, defaultZkhost, solrClientCache));\n    }\n    streamFactory.withSolrResourceLoader(core.getResourceLoader());\n\n    // This pulls all the overrides and additions from the config\n    addExpressiblePlugins(streamFactory, core);\n  }\n\n","sourceOld":"  public void inform(SolrCore core) {\n    String defaultCollection;\n    String defaultZkhost;\n    CoreContainer coreContainer = core.getCoreContainer();\n    this.solrClientCache = coreContainer.getSolrClientCache();\n    this.coreName = core.getName();\n    String cacheKey = this.getClass().getName() + \"_\" + coreName + \"_\";\n    this.objectCache = coreContainer.getObjectCache().computeIfAbsent(cacheKey + \"objectCache\",\n        ConcurrentHashMap.class, k-> new ConcurrentHashMap());\n    if (coreContainer.isZooKeeperAware()) {\n      defaultCollection = core.getCoreDescriptor().getCollectionName();\n      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();\n      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);\n      streamFactory.withDefaultZkHost(defaultZkhost);\n      modelCache = coreContainer.getObjectCache().computeIfAbsent(cacheKey + \"modelCache\",\n          ModelCache.class,\n          k -> new ModelCache(250, defaultZkhost, solrClientCache));\n    }\n    streamFactory.withSolrResourceLoader(core.getResourceLoader());\n\n    // This pulls all the overrides and additions from the config\n    addExpressiblePlugins(streamFactory, core);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7ae55370ade9bd2ca2fbb91a7cb68a1cbc9f525c":["f7052a30e794b71229411425f0b5c985a1d49d4d"],"8a531253046f0e43934c21488b61a23f0875e143":["ffb85feece8645a035c02443a625f5af15e1106b"],"c35d3c01114129fff707f0777080210fa9deb2a7":["fea36811326410bd8200ab06f9067dcea141d903"],"c1d0ba687e34a329efbeaa5dd3993568f15a91ed":["b94236357aaa22b76c10629851fe4e376e0cea82"],"d492b24eb91b29b3fb6bca5b158bec326fbc12df":["5a0a52a7556a729452c9506796bbba9b339298b4"],"91814ce09be68efd0626969632e79ae47d8876d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1e658df03b60f618dc6303e3d124a212cd449e2a":["68cfd3a389f231b8fe23dae4d0ddb2463e79b525"],"c84219732de95c058a8de66ece93c70ad1b1051c":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a":["8c9c12e48e338e77f20673caa19fda85e5f94193","60c716cf818aff6857d8490cd0fb8b5aa432408f"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","53532a40300123386304e8ffd97c1df9cf57ab94"],"d8245af9f5e5ba8fa10735f962abe1f63eee5519":["144ca7fb3ae89fdca80610b02273885f1e43dba0"],"c0f69522aa66ecee0518b3ea6d49afa08d03f588":["5968426c5e8ed6fc30566c0b1ef0d99e4bbfa89d"],"b868bc7317f42f38ddb1b56b9b4a5dcc2e22a12d":["d97e737ece4381771c200f1c5030a5a167c09977"],"8d72016dc7cdd30c37b9ce97b62fd3cc30f5c9e8":["7d81c8cf020ec9c6cead8805f9ad276d24d9373b"],"39e68504a385449bfdc498cfda2909b581df36f1":["56ebde9c21d35a39c07989c178372e901ad377da"],"014c3fc2ef9621f91a3786f1055913d8fa10d0df":["07fea5b5bf158068276d360734dfc547c12af28e"],"4d1fe2d12f66f09580b2d3b3834ea4ece50eeab4":["fdb6ca63bec9ca0f6ef05ec63b2893110ac2f861"],"a38c901cd0538c91e3e523c24487e70a9fe74d1f":["667b4a609c6416604e0f47843deceb73807cee4e"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["34eb3bf8ada71f6afb6bcdd968899b648efdfe29"],"c5156e47b791bd464473781bacfd0f1a03130a6b":["8d72016dc7cdd30c37b9ce97b62fd3cc30f5c9e8"],"e1a9c0ee6e175f37dff63298be6b952d786db982":["a38c901cd0538c91e3e523c24487e70a9fe74d1f"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["aaf90fc29510e72665ac7934f34c3d1c25efad64","40f06aec8ac912d126c71c7e9d6065ed70aa9c65"],"9e0b0bd2390447c6bd25cf9e62be59a117394eab":["b21283ed01203901a7257aa4b7f0a0899c86e56e"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","5c9480bf8e52feb02af9b7fa13bf50929da7900b"],"f0e53d133180083c87dcb8114b087cfe6bfc7bce":["fa42cc88a5c002d8c12e06a4b93ffa4705478f40","300ececaee7f8a08752bcba8e497264491a1853e"],"d4ddf965cea25006a6e621cc031c3bc69863ff4d":["f6b1e64caa933f6fb3c0494afd6ca2597f55cc91"],"b28ad83652f81775fa37359636d0bfe523590199":["01624b85de12fb02335810bdf325124e59040772"],"5f0ec25ba9bff9e87e402c4fe0afe87f877bccd6":["21cc21dac328d94dbc79c104b8e626fca70b3f79"],"ea18ed1e4681b4ce672ca80f943642f049c2b140":["1cfa3201cec3c57a0e58cfcf72cb47d21180d5c5"],"2f033e640613edeb07d8952279368806db4ab299":["2a2efb7373cfceb83cf0a7f6e38a1d4ac1833806"],"c533b201163bd7b15aa8881f922f9289a7668187":["a027750b86452a8dcd054ac993d54b203dae9102"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68cfd3a389f231b8fe23dae4d0ddb2463e79b525":["54be12ea07016c62a5bea4176bb1049699734509"],"17131c75d55e6aebac087f57f6e99f937386ebe9":["a6fe6699bcc60bb2640032c2682f07a108b1f757"],"f00f1c5fad501b66705121feb623f8cfbb6712f9":["91814ce09be68efd0626969632e79ae47d8876d4"],"10b9c6c42133576daaccbd79bd04c88511b9caca":["e81698e1493f01874d99b769bc4d9fc9f07555d6"],"d9a4952b035bd0644022bb7f553db72494001efa":["9a7edeee192980cdc45735957606fc0dbf22d437"],"2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa":["c8d9cf2465512475832769aaccf03847a7847463"],"d7859b8e6a469429413db808a609e8468be14c03":["ac48e00c2b85d168dcc8dbd361d109418ee01724","88db5ca967adae8f7da7df4fd8480da635bbf01a"],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":["e73d8d559120669b47658108d818b637df5456ea","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"8b4d567cfa76681fe80b621fd74a673d7db7937b":["c0f69522aa66ecee0518b3ea6d49afa08d03f588"],"24d1271894d49e4719d0270f561298462ec278d2":["bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54"],"6f4c5d3859373c3a74734e85efa122b17514e3e8":["869bbd0c59fee20268facd5a2e0d3c77e34500ed"],"28288370235ed02234a64753cdbf0c6ec096304a":["d1f5728f32a4a256b36cfabd7a2636452f599bb9","e2ca4206e5497c29b07a997ea7fc47d3bac0a352"],"7d81c8cf020ec9c6cead8805f9ad276d24d9373b":["1e658df03b60f618dc6303e3d124a212cd449e2a"],"d5af4cf979f31a72154bab227890da4561b327a3":["876a7de1b2da8fe9fa734ac0aba2c979a1c3daab"],"9a7edeee192980cdc45735957606fc0dbf22d437":["10b9c6c42133576daaccbd79bd04c88511b9caca"],"c263c97cbb80b4388128937ff5a5659f1abaccd8":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"ca87eac0e5ebea409559829e2d1608b83ba1a3a2":["2c554c4c5f1ed5b36bdbccf803f7cab34ed8f593"],"e0d52d245d8b98e69545a7712a607adee18d6ff2":["807005c99d2f1db14e67f84c60b9a5be2ce93974"],"c0dbd11ae1d6533e7454d66bfb1d5ea898dfa8e5":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"9efa9c0fcd87863d1a86eed29d4304c11bc7d50a":["b8557552f7ab8e381c4d1a941a269e14f11e779d","f7ca50d1c356fbe15a0179afa80057a096b11753"],"74a180a9264fddbaf4727f75ded3b11d6b8f2bf7":["926350ae128ddfe1eb7570ed50a036f6bd5c66a6"],"f6b1e64caa933f6fb3c0494afd6ca2597f55cc91":["8b92f86e90a95b8fc860ddecd9470ffb89a9fa7d"],"93f1e2e97b1cdca850c22c24102ab066aa1cdede":["c843f65abea63c05a03e40d712d391fe65183b2b"],"fef6c45a8c2e0c4a323c0edc246d5d27fb3da298":["c533b201163bd7b15aa8881f922f9289a7668187"],"88db5ca967adae8f7da7df4fd8480da635bbf01a":["ac48e00c2b85d168dcc8dbd361d109418ee01724"],"e431b0806b8db369da896b66a74e304a49953c7b":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["e73d8d559120669b47658108d818b637df5456ea","dc405367d926fb8fe1f87ec54aaca7403c5aa358"],"88073e8783f450d4c0218decc2f001a1ac2c7e7c":["ca2e21c037a55de2a838e082af13eae994f5c5a7"],"c843f65abea63c05a03e40d712d391fe65183b2b":["d8245af9f5e5ba8fa10735f962abe1f63eee5519"],"b8557552f7ab8e381c4d1a941a269e14f11e779d":["0e5327c5d3c341d91eaf95bc92b2db346e2cf1ac","a88ab669a0dfc238c5cdbd5bac2dd6ea147db95e"],"df05c92db04724e97f8298302f2aaf06f927589f":["5c9480bf8e52feb02af9b7fa13bf50929da7900b"],"1b85485ed18e996d4e2490e5bc158e59c12acb75":["5f21dc022708e502f89f154bdcf6dc53b9409aec"],"60c716cf818aff6857d8490cd0fb8b5aa432408f":["8c9c12e48e338e77f20673caa19fda85e5f94193"],"b21283ed01203901a7257aa4b7f0a0899c86e56e":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6","a9850a2db59025ba8cb15c4fd7ab3bb1faa151f1"],"a6fe6699bcc60bb2640032c2682f07a108b1f757":["5f0ec25ba9bff9e87e402c4fe0afe87f877bccd6"],"4169fa0e078ff638eaa62cb2c54034a999129766":["6c06c8eea352c1a2545792116e5f91fa3476e2a7"],"f7052a30e794b71229411425f0b5c985a1d49d4d":["9efa9c0fcd87863d1a86eed29d4304c11bc7d50a"],"493580e5de476ed58276704923abef78ca0c07a0":["20062baf87e01a6477547383269fb3d7488411fd"],"19e8eb794082b9cc37b6562c76814ec4a26b9b8b":["40f06aec8ac912d126c71c7e9d6065ed70aa9c65","8fbc80749c85efd1895219216ee31ee422dbb0a2"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["2e196615f77a3277b22dbf33f9b4a9f086943dfe","b4062c48c67245d14e4c4d776cb7b290822ddbcb"],"c149f345c46f0fa905442bb227054fd828833611":["493580e5de476ed58276704923abef78ca0c07a0"],"cb018b067d19fee3a9fe23997786b4f69e50e38e":["b4062c48c67245d14e4c4d776cb7b290822ddbcb"],"9d09e70d62d23dab1693c77552c0276763fdd6ca":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"8fbc80749c85efd1895219216ee31ee422dbb0a2":["40f06aec8ac912d126c71c7e9d6065ed70aa9c65"],"0ac446a120a3c5f1ac22f9a866256ad428c1821b":["3078cad1008b796c6d573b743c586fdf9ef5660a"],"fdb6ca63bec9ca0f6ef05ec63b2893110ac2f861":["9d09e70d62d23dab1693c77552c0276763fdd6ca"],"e2ca4206e5497c29b07a997ea7fc47d3bac0a352":["53532a40300123386304e8ffd97c1df9cf57ab94"],"2e196615f77a3277b22dbf33f9b4a9f086943dfe":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"34eb3bf8ada71f6afb6bcdd968899b648efdfe29":["39e68504a385449bfdc498cfda2909b581df36f1"],"54be12ea07016c62a5bea4176bb1049699734509":["d5af4cf979f31a72154bab227890da4561b327a3"],"7464a997c27c4f49635170fc6bebdc9b7076ee64":["c149f345c46f0fa905442bb227054fd828833611"],"491c9672ec42582fe43960452dbd37f1c80fe0f0":["f03e4bed5023ec3ef93a771b8888cae991cf448d","02a5a00236471b1e5f3c75017adb632328e120c3"],"ffb85feece8645a035c02443a625f5af15e1106b":["08e30330b33aca2e2864d648a9e1ed2d2f4086f3","622570bec8d96987f78529ba2e6f12b331709d15"],"12cbb60ff5c08b2405e2cd399e4de97375ebe669":["8f62c89eb2bbdac3c9fd626638325a6117e115b0"],"807005c99d2f1db14e67f84c60b9a5be2ce93974":["7464a997c27c4f49635170fc6bebdc9b7076ee64"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["491c9672ec42582fe43960452dbd37f1c80fe0f0","5bd3ba64594a889f0e0224b3a1627b038cced5cf"],"0dda1b9fb25c3d83e46750bb07d6ebf073cc4a5d":["9a7edeee192980cdc45735957606fc0dbf22d437","d9a4952b035bd0644022bb7f553db72494001efa"],"5bd3ba64594a889f0e0224b3a1627b038cced5cf":["02a5a00236471b1e5f3c75017adb632328e120c3"],"685bd38810c206c93e9058f3c2cfa9827c086c27":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","ffb85feece8645a035c02443a625f5af15e1106b"],"02ea5e7557bd3b8122b9b4b0888a49ad82d49288":["c84219732de95c058a8de66ece93c70ad1b1051c"],"3e4eeaf7f7ec614137572a5645be1b62b86a5eec":["28288370235ed02234a64753cdbf0c6ec096304a"],"c8d9cf2465512475832769aaccf03847a7847463":["60c716cf818aff6857d8490cd0fb8b5aa432408f"],"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"fea36811326410bd8200ab06f9067dcea141d903":["014c3fc2ef9621f91a3786f1055913d8fa10d0df"],"e73d8d559120669b47658108d818b637df5456ea":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","3e4eeaf7f7ec614137572a5645be1b62b86a5eec"],"431fcaec9cce0a765cb0d341b8e4e51f133e6519":["11e5446472f245825b6f1cc220252acaab5990cf"],"b94236357aaa22b76c10629851fe4e376e0cea82":["e1a9c0ee6e175f37dff63298be6b952d786db982","17131c75d55e6aebac087f57f6e99f937386ebe9"],"de0b5d8cac74be1676bcc2f805bc0d0630176659":["5c9480bf8e52feb02af9b7fa13bf50929da7900b","df05c92db04724e97f8298302f2aaf06f927589f"],"b31ebc7a867ddea79d438a8fca876a94e644d11a":["807005c99d2f1db14e67f84c60b9a5be2ce93974","e0d52d245d8b98e69545a7712a607adee18d6ff2"],"622570bec8d96987f78529ba2e6f12b331709d15":["08e30330b33aca2e2864d648a9e1ed2d2f4086f3"],"3510ce0f14712dae98c9909e07f0bf63b5d5a208":["b868bc7317f42f38ddb1b56b9b4a5dcc2e22a12d"],"01624b85de12fb02335810bdf325124e59040772":["d492b24eb91b29b3fb6bca5b158bec326fbc12df"],"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441":["b94236357aaa22b76c10629851fe4e376e0cea82","09b9e1f390acfc30c7a60da79f64bab7244c6313"],"360b3962efc30aa8b2c39c3087aa36069674bbe7":["807005c99d2f1db14e67f84c60b9a5be2ce93974","b31ebc7a867ddea79d438a8fca876a94e644d11a"],"20062baf87e01a6477547383269fb3d7488411fd":["ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7"],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["19e8eb794082b9cc37b6562c76814ec4a26b9b8b","ba1e7de64990e3928b90142a52fb92eeff556475"],"ba1e7de64990e3928b90142a52fb92eeff556475":["19e8eb794082b9cc37b6562c76814ec4a26b9b8b"],"37ba6c2d18fe05b92cb264c3d67e4cae76f75136":["c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"],"5f21dc022708e502f89f154bdcf6dc53b9409aec":["c0dbd11ae1d6533e7454d66bfb1d5ea898dfa8e5"],"a027750b86452a8dcd054ac993d54b203dae9102":["5287d62ad5da27d35a88ada646ae7d9adfb76826"],"0e5327c5d3c341d91eaf95bc92b2db346e2cf1ac":["8a531253046f0e43934c21488b61a23f0875e143"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["876a7de1b2da8fe9fa734ac0aba2c979a1c3daab","8d72016dc7cdd30c37b9ce97b62fd3cc30f5c9e8"],"6c3f4197ce8687fa9dc92965c98136ebbc430430":["6f4c5d3859373c3a74734e85efa122b17514e3e8"],"64ff6b743fd4051da7ebb3d397d1ef80833a741a":["40b789607c421011dabf36a935528a74fb8b2032"],"333d804f5abfaf34c57493306a4cb2e01e55662d":["0ac446a120a3c5f1ac22f9a866256ad428c1821b"],"07fea5b5bf158068276d360734dfc547c12af28e":["02ea5e7557bd3b8122b9b4b0888a49ad82d49288"],"5a0a52a7556a729452c9506796bbba9b339298b4":["f67c3a1123a063e580a2e6ec51b9eb7c273666ce"],"46bf3bdc31412342491895b3209b5dd622aeb489":["e33001cc090cf359296602fc5b76486f1eff2553"],"126d6ad24eed13163ba0959435d5a80e5672837c":["f6b1e64caa933f6fb3c0494afd6ca2597f55cc91","d4ddf965cea25006a6e621cc031c3bc69863ff4d"],"8c9c12e48e338e77f20673caa19fda85e5f94193":["70d9c44f68e848648da304352cf7c045c33148f4"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":["fb569fd721c41eafc2a2d788499a7df490c7f1a5","3d635d99fef6495f949f7bbac12fd269db070ee5"],"a88ab669a0dfc238c5cdbd5bac2dd6ea147db95e":["0e5327c5d3c341d91eaf95bc92b2db346e2cf1ac"],"d97e737ece4381771c200f1c5030a5a167c09977":["6c3f4197ce8687fa9dc92965c98136ebbc430430"],"e66b7e53b1b8958fb91f9d199b7520fe429ecdfc":["7ae55370ade9bd2ca2fbb91a7cb68a1cbc9f525c"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["e9017cf144952056066919f1ebc7897ff9bd71b1","e2ca4206e5497c29b07a997ea7fc47d3bac0a352"],"876a7de1b2da8fe9fa734ac0aba2c979a1c3daab":["ea18ed1e4681b4ce672ca80f943642f049c2b140"],"b671049b6133b72a11a8b48321607e9623b41923":["fef6c45a8c2e0c4a323c0edc246d5d27fb3da298"],"e81698e1493f01874d99b769bc4d9fc9f07555d6":["b671049b6133b72a11a8b48321607e9623b41923"],"8857e97c9165df294ead035e9c708f0c038d29a4":["8a3a0090dc960985448654a5dd4c117c71c3f7a5"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","91814ce09be68efd0626969632e79ae47d8876d4"],"5287d62ad5da27d35a88ada646ae7d9adfb76826":["74a180a9264fddbaf4727f75ded3b11d6b8f2bf7"],"d7ced979f39d7651addfc7d805e1d9bfac215822":["2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa"],"70d9c44f68e848648da304352cf7c045c33148f4":["ca87eac0e5ebea409559829e2d1608b83ba1a3a2"],"dc405367d926fb8fe1f87ec54aaca7403c5aa358":["3e4eeaf7f7ec614137572a5645be1b62b86a5eec"],"56ebde9c21d35a39c07989c178372e901ad377da":["64ff6b743fd4051da7ebb3d397d1ef80833a741a"],"b4062c48c67245d14e4c4d776cb7b290822ddbcb":["8815a2fe9bb8a141732b2059eb62f4ac94ed826e","21a4bfa236e53d4457f5b62019d7285f42214f13"],"e33001cc090cf359296602fc5b76486f1eff2553":["9e0bd6ad39d1eae4e5330fcf7f2a59cf8936d3e7"],"6c06c8eea352c1a2545792116e5f91fa3476e2a7":["9762899335811430bb7c7864b00b3da95888510c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9b701e0fcef214f86bab1daf107adce0b0131212","1b85485ed18e996d4e2490e5bc158e59c12acb75"],"715fcd52ecb1ab1dea2443888f11e0cbf2c96713":["88db5ca967adae8f7da7df4fd8480da635bbf01a"],"ac48e00c2b85d168dcc8dbd361d109418ee01724":["e66b7e53b1b8958fb91f9d199b7520fe429ecdfc"],"2e185d25be61374920453beaa1d97ab8e39b20f9":["6c73f5c06ecda4281a8efee68d5fb9dafb92c1c4"],"2e9906d88442b60ca781f22a5a2889f5b55405ab":["dd6a53b9ba9722b0f89d0f554e8ee0ca56ccd807"],"6c73f5c06ecda4281a8efee68d5fb9dafb92c1c4":["b28ad83652f81775fa37359636d0bfe523590199"],"0e15955b4980562a0c1c81d08654904f3fadb83b":["0dda1b9fb25c3d83e46750bb07d6ebf073cc4a5d","afdf6ff5b1319d8ae254212f1203a6233ed3e1dc"],"f7ca50d1c356fbe15a0179afa80057a096b11753":["b8557552f7ab8e381c4d1a941a269e14f11e779d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"3d635d99fef6495f949f7bbac12fd269db070ee5":["dc405367d926fb8fe1f87ec54aaca7403c5aa358"],"3a48c6e9de96682300afe9c20157f05ea08805c1":["0e15955b4980562a0c1c81d08654904f3fadb83b"],"8d7d88a10b8b3fb9de31a38cbcdc2015432739b9":["b6a0843d30a33fb71399dba42d8c833f35fe9343"],"9e0bd6ad39d1eae4e5330fcf7f2a59cf8936d3e7":["93f1e2e97b1cdca850c22c24102ab066aa1cdede"],"11e5446472f245825b6f1cc220252acaab5990cf":["2e185d25be61374920453beaa1d97ab8e39b20f9"],"a8c5e58e88072db16e2a636f1738f87c1df207bd":["46bf3bdc31412342491895b3209b5dd622aeb489"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6","9e0b0bd2390447c6bd25cf9e62be59a117394eab"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"8a3a0090dc960985448654a5dd4c117c71c3f7a5":["24d1271894d49e4719d0270f561298462ec278d2"],"40f06aec8ac912d126c71c7e9d6065ed70aa9c65":["3d635d99fef6495f949f7bbac12fd269db070ee5"],"144ca7fb3ae89fdca80610b02273885f1e43dba0":["12cbb60ff5c08b2405e2cd399e4de97375ebe669"],"7afec973c6531fa1faec7ab6e5eb7bf22917fd7a":["715fcd52ecb1ab1dea2443888f11e0cbf2c96713"],"02a5a00236471b1e5f3c75017adb632328e120c3":["cb018b067d19fee3a9fe23997786b4f69e50e38e"],"300ececaee7f8a08752bcba8e497264491a1853e":["fa42cc88a5c002d8c12e06a4b93ffa4705478f40"],"b5fa1c8367f821057f943ece929329485ec708ba":["126d6ad24eed13163ba0959435d5a80e5672837c"],"53532a40300123386304e8ffd97c1df9cf57ab94":["c5156e47b791bd464473781bacfd0f1a03130a6b"],"09b9e1f390acfc30c7a60da79f64bab7244c6313":["c1d0ba687e34a329efbeaa5dd3993568f15a91ed"],"604747d0b7df2eee9c650f4db434dae392fabbfa":["360b3962efc30aa8b2c39c3087aa36069674bbe7"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["685bd38810c206c93e9058f3c2cfa9827c086c27","ac48e00c2b85d168dcc8dbd361d109418ee01724"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["d7ced979f39d7651addfc7d805e1d9bfac215822"],"21a4bfa236e53d4457f5b62019d7285f42214f13":["8815a2fe9bb8a141732b2059eb62f4ac94ed826e"],"fa42cc88a5c002d8c12e06a4b93ffa4705478f40":["2f033e640613edeb07d8952279368806db4ab299"],"667b4a609c6416604e0f47843deceb73807cee4e":["8857e97c9165df294ead035e9c708f0c038d29a4"],"8b92f86e90a95b8fc860ddecd9470ffb89a9fa7d":["9b701e0fcef214f86bab1daf107adce0b0131212"],"2a2efb7373cfceb83cf0a7f6e38a1d4ac1833806":["c263c97cbb80b4388128937ff5a5659f1abaccd8"],"8f62c89eb2bbdac3c9fd626638325a6117e115b0":["7afec973c6531fa1faec7ab6e5eb7bf22917fd7a"],"afdf6ff5b1319d8ae254212f1203a6233ed3e1dc":["0dda1b9fb25c3d83e46750bb07d6ebf073cc4a5d"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["3510ce0f14712dae98c9909e07f0bf63b5d5a208"],"3078cad1008b796c6d573b743c586fdf9ef5660a":["e431b0806b8db369da896b66a74e304a49953c7b"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["93f1e2e97b1cdca850c22c24102ab066aa1cdede","a8c5e58e88072db16e2a636f1738f87c1df207bd"],"8815a2fe9bb8a141732b2059eb62f4ac94ed826e":["de0b5d8cac74be1676bcc2f805bc0d0630176659"],"40b789607c421011dabf36a935528a74fb8b2032":["431fcaec9cce0a765cb0d341b8e4e51f133e6519"],"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f":["360b3962efc30aa8b2c39c3087aa36069674bbe7","8b4d567cfa76681fe80b621fd74a673d7db7937b"],"dd6a53b9ba9722b0f89d0f554e8ee0ca56ccd807":["604747d0b7df2eee9c650f4db434dae392fabbfa"],"5c9480bf8e52feb02af9b7fa13bf50929da7900b":["1b85485ed18e996d4e2490e5bc158e59c12acb75"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["f0e53d133180083c87dcb8114b087cfe6bfc7bce","1109ff1da44592836ee4182346d4451f1690f9d8"],"08e30330b33aca2e2864d648a9e1ed2d2f4086f3":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","4d1fe2d12f66f09580b2d3b3834ea4ece50eeab4"],"21cc21dac328d94dbc79c104b8e626fca70b3f79":["8d7d88a10b8b3fb9de31a38cbcdc2015432739b9"],"61db97cb62a391687536358baddd3dbdedb040c7":["e1a9c0ee6e175f37dff63298be6b952d786db982"],"a9850a2db59025ba8cb15c4fd7ab3bb1faa151f1":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f6b1e64caa933f6fb3c0494afd6ca2597f55cc91","b5fa1c8367f821057f943ece929329485ec708ba"],"9762899335811430bb7c7864b00b3da95888510c":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"],"5968426c5e8ed6fc30566c0b1ef0d99e4bbfa89d":["2e9906d88442b60ca781f22a5a2889f5b55405ab"],"ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7":["c35d3c01114129fff707f0777080210fa9deb2a7"],"9b701e0fcef214f86bab1daf107adce0b0131212":["0e15955b4980562a0c1c81d08654904f3fadb83b","3a48c6e9de96682300afe9c20157f05ea08805c1"],"1cfa3201cec3c57a0e58cfcf72cb47d21180d5c5":["37ba6c2d18fe05b92cb264c3d67e4cae76f75136"],"869bbd0c59fee20268facd5a2e0d3c77e34500ed":["5a0a52a7556a729452c9506796bbba9b339298b4"],"b6a0843d30a33fb71399dba42d8c833f35fe9343":["61db97cb62a391687536358baddd3dbdedb040c7"],"1109ff1da44592836ee4182346d4451f1690f9d8":["f0e53d133180083c87dcb8114b087cfe6bfc7bce"],"2c554c4c5f1ed5b36bdbccf803f7cab34ed8f593":["61ee8f1fa567e6cea780b707334c8b330b66662e"],"61ee8f1fa567e6cea780b707334c8b330b66662e":["4169fa0e078ff638eaa62cb2c54034a999129766"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","19e8eb794082b9cc37b6562c76814ec4a26b9b8b"],"ca2e21c037a55de2a838e082af13eae994f5c5a7":["5bd3ba64594a889f0e0224b3a1627b038cced5cf"],"f67c3a1123a063e580a2e6ec51b9eb7c273666ce":["88073e8783f450d4c0218decc2f001a1ac2c7e7c"],"926350ae128ddfe1eb7570ed50a036f6bd5c66a6":["333d804f5abfaf34c57493306a4cb2e01e55662d"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["8b92f86e90a95b8fc860ddecd9470ffb89a9fa7d","f6b1e64caa933f6fb3c0494afd6ca2597f55cc91"]},"commit2Childs":{"7ae55370ade9bd2ca2fbb91a7cb68a1cbc9f525c":["e66b7e53b1b8958fb91f9d199b7520fe429ecdfc"],"8a531253046f0e43934c21488b61a23f0875e143":["0e5327c5d3c341d91eaf95bc92b2db346e2cf1ac"],"c35d3c01114129fff707f0777080210fa9deb2a7":["ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7"],"c1d0ba687e34a329efbeaa5dd3993568f15a91ed":["09b9e1f390acfc30c7a60da79f64bab7244c6313"],"d492b24eb91b29b3fb6bca5b158bec326fbc12df":["01624b85de12fb02335810bdf325124e59040772"],"91814ce09be68efd0626969632e79ae47d8876d4":["f00f1c5fad501b66705121feb623f8cfbb6712f9","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"1e658df03b60f618dc6303e3d124a212cd449e2a":["7d81c8cf020ec9c6cead8805f9ad276d24d9373b"],"c84219732de95c058a8de66ece93c70ad1b1051c":["02ea5e7557bd3b8122b9b4b0888a49ad82d49288"],"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a":[],"e9017cf144952056066919f1ebc7897ff9bd71b1":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"d8245af9f5e5ba8fa10735f962abe1f63eee5519":["c843f65abea63c05a03e40d712d391fe65183b2b"],"c0f69522aa66ecee0518b3ea6d49afa08d03f588":["8b4d567cfa76681fe80b621fd74a673d7db7937b"],"b868bc7317f42f38ddb1b56b9b4a5dcc2e22a12d":["3510ce0f14712dae98c9909e07f0bf63b5d5a208"],"8d72016dc7cdd30c37b9ce97b62fd3cc30f5c9e8":["c5156e47b791bd464473781bacfd0f1a03130a6b","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"39e68504a385449bfdc498cfda2909b581df36f1":["34eb3bf8ada71f6afb6bcdd968899b648efdfe29"],"014c3fc2ef9621f91a3786f1055913d8fa10d0df":["fea36811326410bd8200ab06f9067dcea141d903"],"4d1fe2d12f66f09580b2d3b3834ea4ece50eeab4":["08e30330b33aca2e2864d648a9e1ed2d2f4086f3"],"a38c901cd0538c91e3e523c24487e70a9fe74d1f":["e1a9c0ee6e175f37dff63298be6b952d786db982"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["c84219732de95c058a8de66ece93c70ad1b1051c"],"c5156e47b791bd464473781bacfd0f1a03130a6b":["53532a40300123386304e8ffd97c1df9cf57ab94"],"e1a9c0ee6e175f37dff63298be6b952d786db982":["b94236357aaa22b76c10629851fe4e376e0cea82","61db97cb62a391687536358baddd3dbdedb040c7"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"9e0b0bd2390447c6bd25cf9e62be59a117394eab":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["2e196615f77a3277b22dbf33f9b4a9f086943dfe"],"f0e53d133180083c87dcb8114b087cfe6bfc7bce":["1aad05eeff7818b0833c02ac6b743aa72054963b","1109ff1da44592836ee4182346d4451f1690f9d8"],"d4ddf965cea25006a6e621cc031c3bc69863ff4d":["126d6ad24eed13163ba0959435d5a80e5672837c"],"b28ad83652f81775fa37359636d0bfe523590199":["6c73f5c06ecda4281a8efee68d5fb9dafb92c1c4"],"5f0ec25ba9bff9e87e402c4fe0afe87f877bccd6":["a6fe6699bcc60bb2640032c2682f07a108b1f757"],"ea18ed1e4681b4ce672ca80f943642f049c2b140":["876a7de1b2da8fe9fa734ac0aba2c979a1c3daab"],"2f033e640613edeb07d8952279368806db4ab299":["fa42cc88a5c002d8c12e06a4b93ffa4705478f40"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91814ce09be68efd0626969632e79ae47d8876d4","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"c533b201163bd7b15aa8881f922f9289a7668187":["fef6c45a8c2e0c4a323c0edc246d5d27fb3da298"],"68cfd3a389f231b8fe23dae4d0ddb2463e79b525":["1e658df03b60f618dc6303e3d124a212cd449e2a"],"17131c75d55e6aebac087f57f6e99f937386ebe9":["b94236357aaa22b76c10629851fe4e376e0cea82"],"f00f1c5fad501b66705121feb623f8cfbb6712f9":["e431b0806b8db369da896b66a74e304a49953c7b"],"10b9c6c42133576daaccbd79bd04c88511b9caca":["9a7edeee192980cdc45735957606fc0dbf22d437"],"d9a4952b035bd0644022bb7f553db72494001efa":["0dda1b9fb25c3d83e46750bb07d6ebf073cc4a5d"],"2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa":["d7ced979f39d7651addfc7d805e1d9bfac215822"],"d7859b8e6a469429413db808a609e8468be14c03":[],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":["aaf90fc29510e72665ac7934f34c3d1c25efad64"],"8b4d567cfa76681fe80b621fd74a673d7db7937b":["c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"],"24d1271894d49e4719d0270f561298462ec278d2":["8a3a0090dc960985448654a5dd4c117c71c3f7a5"],"6f4c5d3859373c3a74734e85efa122b17514e3e8":["6c3f4197ce8687fa9dc92965c98136ebbc430430"],"28288370235ed02234a64753cdbf0c6ec096304a":["3e4eeaf7f7ec614137572a5645be1b62b86a5eec"],"7d81c8cf020ec9c6cead8805f9ad276d24d9373b":["8d72016dc7cdd30c37b9ce97b62fd3cc30f5c9e8"],"d5af4cf979f31a72154bab227890da4561b327a3":["54be12ea07016c62a5bea4176bb1049699734509"],"9a7edeee192980cdc45735957606fc0dbf22d437":["d9a4952b035bd0644022bb7f553db72494001efa","0dda1b9fb25c3d83e46750bb07d6ebf073cc4a5d"],"c263c97cbb80b4388128937ff5a5659f1abaccd8":["2a2efb7373cfceb83cf0a7f6e38a1d4ac1833806"],"ca87eac0e5ebea409559829e2d1608b83ba1a3a2":["70d9c44f68e848648da304352cf7c045c33148f4"],"e0d52d245d8b98e69545a7712a607adee18d6ff2":["b31ebc7a867ddea79d438a8fca876a94e644d11a"],"c0dbd11ae1d6533e7454d66bfb1d5ea898dfa8e5":["5f21dc022708e502f89f154bdcf6dc53b9409aec"],"9efa9c0fcd87863d1a86eed29d4304c11bc7d50a":["f7052a30e794b71229411425f0b5c985a1d49d4d"],"74a180a9264fddbaf4727f75ded3b11d6b8f2bf7":["5287d62ad5da27d35a88ada646ae7d9adfb76826"],"f6b1e64caa933f6fb3c0494afd6ca2597f55cc91":["d4ddf965cea25006a6e621cc031c3bc69863ff4d","126d6ad24eed13163ba0959435d5a80e5672837c","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"93f1e2e97b1cdca850c22c24102ab066aa1cdede":["9e0bd6ad39d1eae4e5330fcf7f2a59cf8936d3e7","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"fef6c45a8c2e0c4a323c0edc246d5d27fb3da298":["b671049b6133b72a11a8b48321607e9623b41923"],"88db5ca967adae8f7da7df4fd8480da635bbf01a":["d7859b8e6a469429413db808a609e8468be14c03","715fcd52ecb1ab1dea2443888f11e0cbf2c96713"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["fb569fd721c41eafc2a2d788499a7df490c7f1a5"],"e431b0806b8db369da896b66a74e304a49953c7b":["3078cad1008b796c6d573b743c586fdf9ef5660a"],"88073e8783f450d4c0218decc2f001a1ac2c7e7c":["f67c3a1123a063e580a2e6ec51b9eb7c273666ce"],"b8557552f7ab8e381c4d1a941a269e14f11e779d":["9efa9c0fcd87863d1a86eed29d4304c11bc7d50a","f7ca50d1c356fbe15a0179afa80057a096b11753"],"c843f65abea63c05a03e40d712d391fe65183b2b":["93f1e2e97b1cdca850c22c24102ab066aa1cdede"],"df05c92db04724e97f8298302f2aaf06f927589f":["de0b5d8cac74be1676bcc2f805bc0d0630176659"],"1b85485ed18e996d4e2490e5bc158e59c12acb75":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","5c9480bf8e52feb02af9b7fa13bf50929da7900b"],"60c716cf818aff6857d8490cd0fb8b5aa432408f":["96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","c8d9cf2465512475832769aaccf03847a7847463"],"b21283ed01203901a7257aa4b7f0a0899c86e56e":["9e0b0bd2390447c6bd25cf9e62be59a117394eab"],"a6fe6699bcc60bb2640032c2682f07a108b1f757":["17131c75d55e6aebac087f57f6e99f937386ebe9"],"4169fa0e078ff638eaa62cb2c54034a999129766":["61ee8f1fa567e6cea780b707334c8b330b66662e"],"f7052a30e794b71229411425f0b5c985a1d49d4d":["7ae55370ade9bd2ca2fbb91a7cb68a1cbc9f525c"],"493580e5de476ed58276704923abef78ca0c07a0":["c149f345c46f0fa905442bb227054fd828833611"],"19e8eb794082b9cc37b6562c76814ec4a26b9b8b":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6","ba1e7de64990e3928b90142a52fb92eeff556475","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["491c9672ec42582fe43960452dbd37f1c80fe0f0"],"c149f345c46f0fa905442bb227054fd828833611":["7464a997c27c4f49635170fc6bebdc9b7076ee64"],"cb018b067d19fee3a9fe23997786b4f69e50e38e":["02a5a00236471b1e5f3c75017adb632328e120c3"],"9d09e70d62d23dab1693c77552c0276763fdd6ca":["fdb6ca63bec9ca0f6ef05ec63b2893110ac2f861"],"8fbc80749c85efd1895219216ee31ee422dbb0a2":["19e8eb794082b9cc37b6562c76814ec4a26b9b8b"],"0ac446a120a3c5f1ac22f9a866256ad428c1821b":["333d804f5abfaf34c57493306a4cb2e01e55662d"],"fdb6ca63bec9ca0f6ef05ec63b2893110ac2f861":["4d1fe2d12f66f09580b2d3b3834ea4ece50eeab4"],"e2ca4206e5497c29b07a997ea7fc47d3bac0a352":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"2e196615f77a3277b22dbf33f9b4a9f086943dfe":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"34eb3bf8ada71f6afb6bcdd968899b648efdfe29":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"54be12ea07016c62a5bea4176bb1049699734509":["68cfd3a389f231b8fe23dae4d0ddb2463e79b525"],"7464a997c27c4f49635170fc6bebdc9b7076ee64":["807005c99d2f1db14e67f84c60b9a5be2ce93974"],"491c9672ec42582fe43960452dbd37f1c80fe0f0":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"ffb85feece8645a035c02443a625f5af15e1106b":["8a531253046f0e43934c21488b61a23f0875e143","685bd38810c206c93e9058f3c2cfa9827c086c27"],"12cbb60ff5c08b2405e2cd399e4de97375ebe669":["144ca7fb3ae89fdca80610b02273885f1e43dba0"],"807005c99d2f1db14e67f84c60b9a5be2ce93974":["e0d52d245d8b98e69545a7712a607adee18d6ff2","b31ebc7a867ddea79d438a8fca876a94e644d11a","360b3962efc30aa8b2c39c3087aa36069674bbe7"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"0dda1b9fb25c3d83e46750bb07d6ebf073cc4a5d":["0e15955b4980562a0c1c81d08654904f3fadb83b","afdf6ff5b1319d8ae254212f1203a6233ed3e1dc"],"5bd3ba64594a889f0e0224b3a1627b038cced5cf":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","ca2e21c037a55de2a838e082af13eae994f5c5a7"],"685bd38810c206c93e9058f3c2cfa9827c086c27":["6240b74b884c5587f2a4062dd27d6c32bf228889"],"02ea5e7557bd3b8122b9b4b0888a49ad82d49288":["07fea5b5bf158068276d360734dfc547c12af28e"],"3e4eeaf7f7ec614137572a5645be1b62b86a5eec":["e73d8d559120669b47658108d818b637df5456ea","dc405367d926fb8fe1f87ec54aaca7403c5aa358"],"c8d9cf2465512475832769aaccf03847a7847463":["2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa"],"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54":["24d1271894d49e4719d0270f561298462ec278d2"],"fea36811326410bd8200ab06f9067dcea141d903":["c35d3c01114129fff707f0777080210fa9deb2a7"],"e73d8d559120669b47658108d818b637df5456ea":["fb569fd721c41eafc2a2d788499a7df490c7f1a5","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"431fcaec9cce0a765cb0d341b8e4e51f133e6519":["40b789607c421011dabf36a935528a74fb8b2032"],"b94236357aaa22b76c10629851fe4e376e0cea82":["c1d0ba687e34a329efbeaa5dd3993568f15a91ed","43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"],"622570bec8d96987f78529ba2e6f12b331709d15":["ffb85feece8645a035c02443a625f5af15e1106b"],"de0b5d8cac74be1676bcc2f805bc0d0630176659":["8815a2fe9bb8a141732b2059eb62f4ac94ed826e"],"b31ebc7a867ddea79d438a8fca876a94e644d11a":["360b3962efc30aa8b2c39c3087aa36069674bbe7"],"3510ce0f14712dae98c9909e07f0bf63b5d5a208":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"01624b85de12fb02335810bdf325124e59040772":["b28ad83652f81775fa37359636d0bfe523590199"],"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441":["9762899335811430bb7c7864b00b3da95888510c"],"360b3962efc30aa8b2c39c3087aa36069674bbe7":["604747d0b7df2eee9c650f4db434dae392fabbfa","c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"],"20062baf87e01a6477547383269fb3d7488411fd":["493580e5de476ed58276704923abef78ca0c07a0"],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["b21283ed01203901a7257aa4b7f0a0899c86e56e","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","3a7809d1d753b67f48b1a706e17034bf8b624ea3","a9850a2db59025ba8cb15c4fd7ab3bb1faa151f1"],"ba1e7de64990e3928b90142a52fb92eeff556475":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"37ba6c2d18fe05b92cb264c3d67e4cae76f75136":["1cfa3201cec3c57a0e58cfcf72cb47d21180d5c5"],"5f21dc022708e502f89f154bdcf6dc53b9409aec":["1b85485ed18e996d4e2490e5bc158e59c12acb75"],"a027750b86452a8dcd054ac993d54b203dae9102":["c533b201163bd7b15aa8881f922f9289a7668187"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["28288370235ed02234a64753cdbf0c6ec096304a"],"0e5327c5d3c341d91eaf95bc92b2db346e2cf1ac":["b8557552f7ab8e381c4d1a941a269e14f11e779d","a88ab669a0dfc238c5cdbd5bac2dd6ea147db95e"],"6c3f4197ce8687fa9dc92965c98136ebbc430430":["d97e737ece4381771c200f1c5030a5a167c09977"],"64ff6b743fd4051da7ebb3d397d1ef80833a741a":["56ebde9c21d35a39c07989c178372e901ad377da"],"333d804f5abfaf34c57493306a4cb2e01e55662d":["926350ae128ddfe1eb7570ed50a036f6bd5c66a6"],"5a0a52a7556a729452c9506796bbba9b339298b4":["d492b24eb91b29b3fb6bca5b158bec326fbc12df","869bbd0c59fee20268facd5a2e0d3c77e34500ed"],"07fea5b5bf158068276d360734dfc547c12af28e":["014c3fc2ef9621f91a3786f1055913d8fa10d0df"],"46bf3bdc31412342491895b3209b5dd622aeb489":["a8c5e58e88072db16e2a636f1738f87c1df207bd"],"126d6ad24eed13163ba0959435d5a80e5672837c":["b5fa1c8367f821057f943ece929329485ec708ba"],"8c9c12e48e338e77f20673caa19fda85e5f94193":["96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","60c716cf818aff6857d8490cd0fb8b5aa432408f"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"a88ab669a0dfc238c5cdbd5bac2dd6ea147db95e":["b8557552f7ab8e381c4d1a941a269e14f11e779d"],"d97e737ece4381771c200f1c5030a5a167c09977":["b868bc7317f42f38ddb1b56b9b4a5dcc2e22a12d"],"e66b7e53b1b8958fb91f9d199b7520fe429ecdfc":["ac48e00c2b85d168dcc8dbd361d109418ee01724"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["e73d8d559120669b47658108d818b637df5456ea"],"876a7de1b2da8fe9fa734ac0aba2c979a1c3daab":["d5af4cf979f31a72154bab227890da4561b327a3","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"b671049b6133b72a11a8b48321607e9623b41923":["e81698e1493f01874d99b769bc4d9fc9f07555d6"],"e81698e1493f01874d99b769bc4d9fc9f07555d6":["10b9c6c42133576daaccbd79bd04c88511b9caca"],"8857e97c9165df294ead035e9c708f0c038d29a4":["667b4a609c6416604e0f47843deceb73807cee4e"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"5287d62ad5da27d35a88ada646ae7d9adfb76826":["a027750b86452a8dcd054ac993d54b203dae9102"],"d7ced979f39d7651addfc7d805e1d9bfac215822":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"70d9c44f68e848648da304352cf7c045c33148f4":["8c9c12e48e338e77f20673caa19fda85e5f94193"],"dc405367d926fb8fe1f87ec54aaca7403c5aa358":["f9a989a32a073c55e3aef6f807a3474184bbcf49","3d635d99fef6495f949f7bbac12fd269db070ee5"],"56ebde9c21d35a39c07989c178372e901ad377da":["39e68504a385449bfdc498cfda2909b581df36f1"],"b4062c48c67245d14e4c4d776cb7b290822ddbcb":["f03e4bed5023ec3ef93a771b8888cae991cf448d","cb018b067d19fee3a9fe23997786b4f69e50e38e"],"e33001cc090cf359296602fc5b76486f1eff2553":["46bf3bdc31412342491895b3209b5dd622aeb489"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"6c06c8eea352c1a2545792116e5f91fa3476e2a7":["4169fa0e078ff638eaa62cb2c54034a999129766"],"715fcd52ecb1ab1dea2443888f11e0cbf2c96713":["7afec973c6531fa1faec7ab6e5eb7bf22917fd7a"],"ac48e00c2b85d168dcc8dbd361d109418ee01724":["d7859b8e6a469429413db808a609e8468be14c03","88db5ca967adae8f7da7df4fd8480da635bbf01a","6240b74b884c5587f2a4062dd27d6c32bf228889"],"2e185d25be61374920453beaa1d97ab8e39b20f9":["11e5446472f245825b6f1cc220252acaab5990cf"],"2e9906d88442b60ca781f22a5a2889f5b55405ab":["5968426c5e8ed6fc30566c0b1ef0d99e4bbfa89d"],"6c73f5c06ecda4281a8efee68d5fb9dafb92c1c4":["2e185d25be61374920453beaa1d97ab8e39b20f9"],"0e15955b4980562a0c1c81d08654904f3fadb83b":["3a48c6e9de96682300afe9c20157f05ea08805c1","9b701e0fcef214f86bab1daf107adce0b0131212"],"f7ca50d1c356fbe15a0179afa80057a096b11753":["9efa9c0fcd87863d1a86eed29d4304c11bc7d50a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"3d635d99fef6495f949f7bbac12fd269db070ee5":["aaf90fc29510e72665ac7934f34c3d1c25efad64","40f06aec8ac912d126c71c7e9d6065ed70aa9c65"],"3a48c6e9de96682300afe9c20157f05ea08805c1":["9b701e0fcef214f86bab1daf107adce0b0131212"],"8d7d88a10b8b3fb9de31a38cbcdc2015432739b9":["21cc21dac328d94dbc79c104b8e626fca70b3f79"],"9e0bd6ad39d1eae4e5330fcf7f2a59cf8936d3e7":["e33001cc090cf359296602fc5b76486f1eff2553"],"11e5446472f245825b6f1cc220252acaab5990cf":["431fcaec9cce0a765cb0d341b8e4e51f133e6519"],"a8c5e58e88072db16e2a636f1738f87c1df207bd":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["9d09e70d62d23dab1693c77552c0276763fdd6ca","08e30330b33aca2e2864d648a9e1ed2d2f4086f3"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["685bd38810c206c93e9058f3c2cfa9827c086c27"],"8a3a0090dc960985448654a5dd4c117c71c3f7a5":["8857e97c9165df294ead035e9c708f0c038d29a4"],"40f06aec8ac912d126c71c7e9d6065ed70aa9c65":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","19e8eb794082b9cc37b6562c76814ec4a26b9b8b","8fbc80749c85efd1895219216ee31ee422dbb0a2"],"144ca7fb3ae89fdca80610b02273885f1e43dba0":["d8245af9f5e5ba8fa10735f962abe1f63eee5519"],"300ececaee7f8a08752bcba8e497264491a1853e":["f0e53d133180083c87dcb8114b087cfe6bfc7bce"],"02a5a00236471b1e5f3c75017adb632328e120c3":["491c9672ec42582fe43960452dbd37f1c80fe0f0","5bd3ba64594a889f0e0224b3a1627b038cced5cf"],"7afec973c6531fa1faec7ab6e5eb7bf22917fd7a":["8f62c89eb2bbdac3c9fd626638325a6117e115b0"],"b5fa1c8367f821057f943ece929329485ec708ba":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"53532a40300123386304e8ffd97c1df9cf57ab94":["e9017cf144952056066919f1ebc7897ff9bd71b1","e2ca4206e5497c29b07a997ea7fc47d3bac0a352"],"09b9e1f390acfc30c7a60da79f64bab7244c6313":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"],"604747d0b7df2eee9c650f4db434dae392fabbfa":["dd6a53b9ba9722b0f89d0f554e8ee0ca56ccd807"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"21a4bfa236e53d4457f5b62019d7285f42214f13":["b4062c48c67245d14e4c4d776cb7b290822ddbcb"],"fa42cc88a5c002d8c12e06a4b93ffa4705478f40":["f0e53d133180083c87dcb8114b087cfe6bfc7bce","300ececaee7f8a08752bcba8e497264491a1853e"],"667b4a609c6416604e0f47843deceb73807cee4e":["a38c901cd0538c91e3e523c24487e70a9fe74d1f"],"8b92f86e90a95b8fc860ddecd9470ffb89a9fa7d":["f6b1e64caa933f6fb3c0494afd6ca2597f55cc91","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"2a2efb7373cfceb83cf0a7f6e38a1d4ac1833806":["2f033e640613edeb07d8952279368806db4ab299"],"8f62c89eb2bbdac3c9fd626638325a6117e115b0":["12cbb60ff5c08b2405e2cd399e4de97375ebe669"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"afdf6ff5b1319d8ae254212f1203a6233ed3e1dc":["0e15955b4980562a0c1c81d08654904f3fadb83b"],"3078cad1008b796c6d573b743c586fdf9ef5660a":["0ac446a120a3c5f1ac22f9a866256ad428c1821b"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["c263c97cbb80b4388128937ff5a5659f1abaccd8"],"8815a2fe9bb8a141732b2059eb62f4ac94ed826e":["b4062c48c67245d14e4c4d776cb7b290822ddbcb","21a4bfa236e53d4457f5b62019d7285f42214f13"],"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f":["37ba6c2d18fe05b92cb264c3d67e4cae76f75136"],"40b789607c421011dabf36a935528a74fb8b2032":["64ff6b743fd4051da7ebb3d397d1ef80833a741a"],"dd6a53b9ba9722b0f89d0f554e8ee0ca56ccd807":["2e9906d88442b60ca781f22a5a2889f5b55405ab"],"5c9480bf8e52feb02af9b7fa13bf50929da7900b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","df05c92db04724e97f8298302f2aaf06f927589f","de0b5d8cac74be1676bcc2f805bc0d0630176659"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54"],"21cc21dac328d94dbc79c104b8e626fca70b3f79":["5f0ec25ba9bff9e87e402c4fe0afe87f877bccd6"],"08e30330b33aca2e2864d648a9e1ed2d2f4086f3":["ffb85feece8645a035c02443a625f5af15e1106b","622570bec8d96987f78529ba2e6f12b331709d15"],"61db97cb62a391687536358baddd3dbdedb040c7":["b6a0843d30a33fb71399dba42d8c833f35fe9343"],"a9850a2db59025ba8cb15c4fd7ab3bb1faa151f1":["b21283ed01203901a7257aa4b7f0a0899c86e56e"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["c0dbd11ae1d6533e7454d66bfb1d5ea898dfa8e5"],"9762899335811430bb7c7864b00b3da95888510c":["6c06c8eea352c1a2545792116e5f91fa3476e2a7"],"5968426c5e8ed6fc30566c0b1ef0d99e4bbfa89d":["c0f69522aa66ecee0518b3ea6d49afa08d03f588"],"ba0c9792c0fa279d2914d72a5d3d4b3ce0e5fea7":["20062baf87e01a6477547383269fb3d7488411fd"],"9b701e0fcef214f86bab1daf107adce0b0131212":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8b92f86e90a95b8fc860ddecd9470ffb89a9fa7d"],"1cfa3201cec3c57a0e58cfcf72cb47d21180d5c5":["ea18ed1e4681b4ce672ca80f943642f049c2b140"],"869bbd0c59fee20268facd5a2e0d3c77e34500ed":["6f4c5d3859373c3a74734e85efa122b17514e3e8"],"b6a0843d30a33fb71399dba42d8c833f35fe9343":["8d7d88a10b8b3fb9de31a38cbcdc2015432739b9"],"1109ff1da44592836ee4182346d4451f1690f9d8":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"2c554c4c5f1ed5b36bdbccf803f7cab34ed8f593":["ca87eac0e5ebea409559829e2d1608b83ba1a3a2"],"61ee8f1fa567e6cea780b707334c8b330b66662e":["2c554c4c5f1ed5b36bdbccf803f7cab34ed8f593"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"ca2e21c037a55de2a838e082af13eae994f5c5a7":["88073e8783f450d4c0218decc2f001a1ac2c7e7c"],"926350ae128ddfe1eb7570ed50a036f6bd5c66a6":["74a180a9264fddbaf4727f75ded3b11d6b8f2bf7"],"f67c3a1123a063e580a2e6ec51b9eb7c273666ce":["5a0a52a7556a729452c9506796bbba9b339298b4"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[]},"heads":["96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","d7859b8e6a469429413db808a609e8468be14c03","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817","6240b74b884c5587f2a4062dd27d6c32bf228889","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}