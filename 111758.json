{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestBackwardsCompatibility#searchIndex(String,String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestBackwardsCompatibility#searchIndex(String,String).mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestBackwardsCompatibility#searchIndex(String,String).mjava","sourceNew":"  public void searchIndex(String dirName, String oldName) throws IOException {\n    //QueryParser parser = new QueryParser(\"contents\", new WhitespaceAnalyzer());\n    //Query query = parser.parse(\"handle:1\");\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    IndexReader reader = searcher.getIndexReader();\n\n    _TestUtil.checkIndex(dir);\n\n    for(int i=0;i<35;i++) {\n      if (!reader.isDeleted(i)) {\n        Document d = reader.document(i);\n        List fields = d.getFields();\n        if (!oldName.startsWith(\"19.\") &&\n            !oldName.startsWith(\"20.\") &&\n            !oldName.startsWith(\"21.\") &&\n            !oldName.startsWith(\"22.\")) {\n\n          if (d.getField(\"content3\") == null) {\n            final int numFields = oldName.startsWith(\"29.\") ? 7 : 5;\n            assertEquals(numFields, fields.size());\n            Field f = (Field) d.getField(\"id\");\n            assertEquals(\"\"+i, f.stringValue());\n\n            f = (Field) d.getField(\"utf8\");\n            assertEquals(\"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", f.stringValue());\n\n            f = (Field) d.getField(\"autf8\");\n            assertEquals(\"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", f.stringValue());\n        \n            f = (Field) d.getField(\"content2\");\n            assertEquals(\"here is more content with aaa aaa aaa\", f.stringValue());\n\n            f = (Field) d.getField(\"fie\\u2C77ld\");\n            assertEquals(\"field with non-ascii name\", f.stringValue());\n          }\n        }       \n      } else\n        // Only ID 7 is deleted\n        assertEquals(7, i);\n    }\n    \n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n\n    // First document should be #21 since it's norm was\n    // increased:\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"didn't get the right document first\", \"21\", d.get(\"id\"));\n\n    testHits(hits, 34, searcher.getIndexReader());\n\n    if (!oldName.startsWith(\"19.\") &&\n        !oldName.startsWith(\"20.\") &&\n        !oldName.startsWith(\"21.\") &&\n        !oldName.startsWith(\"22.\")) {\n      // Test on indices >= 2.3\n      hits = searcher.search(new TermQuery(new Term(\"utf8\", \"\\u0000\")), null, 1000).scoreDocs;\n      assertEquals(34, hits.length);\n      hits = searcher.search(new TermQuery(new Term(\"utf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne\")), null, 1000).scoreDocs;\n      assertEquals(34, hits.length);\n      hits = searcher.search(new TermQuery(new Term(\"utf8\", \"ab\\ud917\\udc17cd\")), null, 1000).scoreDocs;\n      assertEquals(34, hits.length);\n    }\n\n    searcher.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void searchIndex(String dirName, String oldName) throws IOException {\n    //QueryParser parser = new QueryParser(\"contents\", new WhitespaceAnalyzer());\n    //Query query = parser.parse(\"handle:1\");\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    IndexReader reader = searcher.getIndexReader();\n\n    _TestUtil.checkIndex(dir);\n\n    for(int i=0;i<35;i++) {\n      if (!reader.isDeleted(i)) {\n        Document d = reader.document(i);\n        List fields = d.getFields();\n        if (!oldName.startsWith(\"19.\") &&\n            !oldName.startsWith(\"20.\") &&\n            !oldName.startsWith(\"21.\") &&\n            !oldName.startsWith(\"22.\")) {\n\n          if (d.getField(\"content3\") == null) {\n            final int numFields = oldName.startsWith(\"29.\") ? 7 : 5;\n            assertEquals(numFields, fields.size());\n            Field f = (Field) d.getField(\"id\");\n            assertEquals(\"\"+i, f.stringValue());\n\n            f = (Field) d.getField(\"utf8\");\n            assertEquals(\"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", f.stringValue());\n\n            f = (Field) d.getField(\"autf8\");\n            assertEquals(\"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", f.stringValue());\n        \n            f = (Field) d.getField(\"content2\");\n            assertEquals(\"here is more content with aaa aaa aaa\", f.stringValue());\n\n            f = (Field) d.getField(\"fie\\u2C77ld\");\n            assertEquals(\"field with non-ascii name\", f.stringValue());\n          }\n        }       \n      } else\n        // Only ID 7 is deleted\n        assertEquals(7, i);\n    }\n    \n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n\n    // First document should be #21 since it's norm was\n    // increased:\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"didn't get the right document first\", \"21\", d.get(\"id\"));\n\n    testHits(hits, 34, searcher.getIndexReader());\n\n    if (!oldName.startsWith(\"19.\") &&\n        !oldName.startsWith(\"20.\") &&\n        !oldName.startsWith(\"21.\") &&\n        !oldName.startsWith(\"22.\")) {\n      // Test on indices >= 2.3\n      hits = searcher.search(new TermQuery(new Term(\"utf8\", \"\\u0000\")), null, 1000).scoreDocs;\n      assertEquals(34, hits.length);\n      hits = searcher.search(new TermQuery(new Term(\"utf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne\")), null, 1000).scoreDocs;\n      assertEquals(34, hits.length);\n      hits = searcher.search(new TermQuery(new Term(\"utf8\", \"ab\\ud917\\udc17cd\")), null, 1000).scoreDocs;\n      assertEquals(34, hits.length);\n    }\n\n    searcher.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestBackwardsCompatibility#searchIndex(String,String).mjava","sourceNew":null,"sourceOld":"  public void searchIndex(String dirName, String oldName) throws IOException {\n    //QueryParser parser = new QueryParser(\"contents\", new WhitespaceAnalyzer());\n    //Query query = parser.parse(\"handle:1\");\n\n    dirName = fullDir(dirName);\n\n    Directory dir = FSDirectory.open(new File(dirName));\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    IndexReader reader = searcher.getIndexReader();\n\n    _TestUtil.checkIndex(dir);\n\n    for(int i=0;i<35;i++) {\n      if (!reader.isDeleted(i)) {\n        Document d = reader.document(i);\n        List fields = d.getFields();\n        if (!oldName.startsWith(\"19.\") &&\n            !oldName.startsWith(\"20.\") &&\n            !oldName.startsWith(\"21.\") &&\n            !oldName.startsWith(\"22.\")) {\n\n          if (d.getField(\"content3\") == null) {\n            final int numFields = oldName.startsWith(\"29.\") ? 7 : 5;\n            assertEquals(numFields, fields.size());\n            Field f = (Field) d.getField(\"id\");\n            assertEquals(\"\"+i, f.stringValue());\n\n            f = (Field) d.getField(\"utf8\");\n            assertEquals(\"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", f.stringValue());\n\n            f = (Field) d.getField(\"autf8\");\n            assertEquals(\"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne \\u0000 \\u2620 ab\\ud917\\udc17cd\", f.stringValue());\n        \n            f = (Field) d.getField(\"content2\");\n            assertEquals(\"here is more content with aaa aaa aaa\", f.stringValue());\n\n            f = (Field) d.getField(\"fie\\u2C77ld\");\n            assertEquals(\"field with non-ascii name\", f.stringValue());\n          }\n        }       \n      } else\n        // Only ID 7 is deleted\n        assertEquals(7, i);\n    }\n    \n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n\n    // First document should be #21 since it's norm was\n    // increased:\n    Document d = searcher.doc(hits[0].doc);\n    assertEquals(\"didn't get the right document first\", \"21\", d.get(\"id\"));\n\n    testHits(hits, 34, searcher.getIndexReader());\n\n    if (!oldName.startsWith(\"19.\") &&\n        !oldName.startsWith(\"20.\") &&\n        !oldName.startsWith(\"21.\") &&\n        !oldName.startsWith(\"22.\")) {\n      // Test on indices >= 2.3\n      hits = searcher.search(new TermQuery(new Term(\"utf8\", \"\\u0000\")), null, 1000).scoreDocs;\n      assertEquals(34, hits.length);\n      hits = searcher.search(new TermQuery(new Term(\"utf8\", \"Lu\\uD834\\uDD1Ece\\uD834\\uDD60ne\")), null, 1000).scoreDocs;\n      assertEquals(34, hits.length);\n      hits = searcher.search(new TermQuery(new Term(\"utf8\", \"ab\\ud917\\udc17cd\")), null, 1000).scoreDocs;\n      assertEquals(34, hits.length);\n    }\n\n    searcher.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}