{"path":"contrib/queries/src/java/org/apache/lucene/search/DuplicateFilter#correctBits(IndexReader).mjava","commits":[{"id":"ef08ad6a64004e00b4e02dbe0a553dac1c528bd8","date":1191365806,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/DuplicateFilter#correctBits(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"\tprivate BitSet correctBits(IndexReader reader) throws IOException\r\n\t{\r\n\t\t\r\n\t\tBitSet bits=new BitSet(reader.maxDoc()); //assume all are INvalid\r\n\t\tTerm startTerm=new Term(fieldName,\"\");\r\n\t\tTermEnum te = reader.terms(startTerm);\r\n\t\tif(te!=null)\r\n\t\t{\r\n\t\t\tTerm currTerm=te.term();\r\n\t\t\twhile((currTerm!=null)&&(currTerm.field()==startTerm.field())) //term fieldnames are interned\r\n\t\t\t{\r\n\t\t\t\tint lastDoc=-1;\r\n\t\t\t\t//set non duplicates\r\n\t\t\t\tTermDocs td = reader.termDocs(currTerm);\r\n\t\t\t\tif(td.next())\r\n\t\t\t\t{\r\n\t\t\t\t\tif(keepMode==KM_USE_FIRST_OCCURRENCE)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbits.set(td.doc());\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdo\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlastDoc=td.doc();\r\n\t\t\t\t\t\t}while(td.next());\r\n\t\t\t\t\t\tbits.set(lastDoc);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(!te.next())\r\n\t\t\t\t{\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcurrTerm=te.term();\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn bits;\r\n\t}\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a27a24aac4a53ec0af1f168a3b1ab4a06a042250","date":1211570705,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/DuplicateFilter#correctBits(IndexReader).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/DuplicateFilter#correctBits(IndexReader).mjava","sourceNew":"  private OpenBitSet correctBits(IndexReader reader) throws IOException\r\n\t{\r\n\t\t\r\n    OpenBitSet bits=new OpenBitSet(reader.maxDoc()); //assume all are INvalid\r\n\t\tTerm startTerm=new Term(fieldName,\"\");\r\n\t\tTermEnum te = reader.terms(startTerm);\r\n\t\tif(te!=null)\r\n\t\t{\r\n\t\t\tTerm currTerm=te.term();\r\n\t\t\twhile((currTerm!=null)&&(currTerm.field()==startTerm.field())) //term fieldnames are interned\r\n\t\t\t{\r\n\t\t\t\tint lastDoc=-1;\r\n\t\t\t\t//set non duplicates\r\n\t\t\t\tTermDocs td = reader.termDocs(currTerm);\r\n\t\t\t\tif(td.next())\r\n\t\t\t\t{\r\n\t\t\t\t\tif(keepMode==KM_USE_FIRST_OCCURRENCE)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbits.set(td.doc());\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdo\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlastDoc=td.doc();\r\n\t\t\t\t\t\t}while(td.next());\r\n\t\t\t\t\t\tbits.set(lastDoc);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(!te.next())\r\n\t\t\t\t{\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcurrTerm=te.term();\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn bits;\r\n\t}\r\n\n","sourceOld":"\tprivate BitSet correctBits(IndexReader reader) throws IOException\r\n\t{\r\n\t\t\r\n\t\tBitSet bits=new BitSet(reader.maxDoc()); //assume all are INvalid\r\n\t\tTerm startTerm=new Term(fieldName,\"\");\r\n\t\tTermEnum te = reader.terms(startTerm);\r\n\t\tif(te!=null)\r\n\t\t{\r\n\t\t\tTerm currTerm=te.term();\r\n\t\t\twhile((currTerm!=null)&&(currTerm.field()==startTerm.field())) //term fieldnames are interned\r\n\t\t\t{\r\n\t\t\t\tint lastDoc=-1;\r\n\t\t\t\t//set non duplicates\r\n\t\t\t\tTermDocs td = reader.termDocs(currTerm);\r\n\t\t\t\tif(td.next())\r\n\t\t\t\t{\r\n\t\t\t\t\tif(keepMode==KM_USE_FIRST_OCCURRENCE)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbits.set(td.doc());\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdo\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlastDoc=td.doc();\r\n\t\t\t\t\t\t}while(td.next());\r\n\t\t\t\t\t\tbits.set(lastDoc);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(!te.next())\r\n\t\t\t\t{\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcurrTerm=te.term();\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn bits;\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d73678020862536617f065bb3d28a71d8c4020c","date":1219142439,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/DuplicateFilter#correctBits(IndexReader).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/DuplicateFilter#correctBits(IndexReader).mjava","sourceNew":"  private OpenBitSet correctBits(IndexReader reader) throws IOException\r\n\t{\r\n\t\t\r\n    OpenBitSet bits=new OpenBitSet(reader.maxDoc()); //assume all are INvalid\r\n\t\tTerm startTerm=new Term(fieldName);\r\n\t\tTermEnum te = reader.terms(startTerm);\r\n\t\tif(te!=null)\r\n\t\t{\r\n\t\t\tTerm currTerm=te.term();\r\n\t\t\twhile((currTerm!=null)&&(currTerm.field()==startTerm.field())) //term fieldnames are interned\r\n\t\t\t{\r\n\t\t\t\tint lastDoc=-1;\r\n\t\t\t\t//set non duplicates\r\n\t\t\t\tTermDocs td = reader.termDocs(currTerm);\r\n\t\t\t\tif(td.next())\r\n\t\t\t\t{\r\n\t\t\t\t\tif(keepMode==KM_USE_FIRST_OCCURRENCE)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbits.set(td.doc());\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdo\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlastDoc=td.doc();\r\n\t\t\t\t\t\t}while(td.next());\r\n\t\t\t\t\t\tbits.set(lastDoc);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(!te.next())\r\n\t\t\t\t{\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcurrTerm=te.term();\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn bits;\r\n\t}\r\n\n","sourceOld":"  private OpenBitSet correctBits(IndexReader reader) throws IOException\r\n\t{\r\n\t\t\r\n    OpenBitSet bits=new OpenBitSet(reader.maxDoc()); //assume all are INvalid\r\n\t\tTerm startTerm=new Term(fieldName,\"\");\r\n\t\tTermEnum te = reader.terms(startTerm);\r\n\t\tif(te!=null)\r\n\t\t{\r\n\t\t\tTerm currTerm=te.term();\r\n\t\t\twhile((currTerm!=null)&&(currTerm.field()==startTerm.field())) //term fieldnames are interned\r\n\t\t\t{\r\n\t\t\t\tint lastDoc=-1;\r\n\t\t\t\t//set non duplicates\r\n\t\t\t\tTermDocs td = reader.termDocs(currTerm);\r\n\t\t\t\tif(td.next())\r\n\t\t\t\t{\r\n\t\t\t\t\tif(keepMode==KM_USE_FIRST_OCCURRENCE)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbits.set(td.doc());\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdo\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlastDoc=td.doc();\r\n\t\t\t\t\t\t}while(td.next());\r\n\t\t\t\t\t\tbits.set(lastDoc);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(!te.next())\r\n\t\t\t\t{\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcurrTerm=te.term();\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn bits;\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a361a621b184d9b73c9c9a37323a9845b8f8260","date":1226370946,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/DuplicateFilter#correctBits(IndexReader).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/DuplicateFilter#correctBits(IndexReader).mjava","sourceNew":"  private OpenBitSet correctBits(IndexReader reader) throws IOException\n\t{\n\t\t\n    OpenBitSet bits=new OpenBitSet(reader.maxDoc()); //assume all are INvalid\n\t\tTerm startTerm=new Term(fieldName);\n\t\tTermEnum te = reader.terms(startTerm);\n\t\tif(te!=null)\n\t\t{\n\t\t\tTerm currTerm=te.term();\n\t\t\twhile((currTerm!=null)&&(currTerm.field()==startTerm.field())) //term fieldnames are interned\n\t\t\t{\n\t\t\t\tint lastDoc=-1;\n\t\t\t\t//set non duplicates\n\t\t\t\tTermDocs td = reader.termDocs(currTerm);\n\t\t\t\tif(td.next())\n\t\t\t\t{\n\t\t\t\t\tif(keepMode==KM_USE_FIRST_OCCURRENCE)\n\t\t\t\t\t{\n\t\t\t\t\t\tbits.set(td.doc());\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tdo\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlastDoc=td.doc();\n\t\t\t\t\t\t}while(td.next());\n\t\t\t\t\t\tbits.set(lastDoc);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(!te.next())\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcurrTerm=te.term();\n\t\t\t}\n\t\t}\n\t\treturn bits;\n\t}\n\n","sourceOld":"  private OpenBitSet correctBits(IndexReader reader) throws IOException\r\n\t{\r\n\t\t\r\n    OpenBitSet bits=new OpenBitSet(reader.maxDoc()); //assume all are INvalid\r\n\t\tTerm startTerm=new Term(fieldName);\r\n\t\tTermEnum te = reader.terms(startTerm);\r\n\t\tif(te!=null)\r\n\t\t{\r\n\t\t\tTerm currTerm=te.term();\r\n\t\t\twhile((currTerm!=null)&&(currTerm.field()==startTerm.field())) //term fieldnames are interned\r\n\t\t\t{\r\n\t\t\t\tint lastDoc=-1;\r\n\t\t\t\t//set non duplicates\r\n\t\t\t\tTermDocs td = reader.termDocs(currTerm);\r\n\t\t\t\tif(td.next())\r\n\t\t\t\t{\r\n\t\t\t\t\tif(keepMode==KM_USE_FIRST_OCCURRENCE)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbits.set(td.doc());\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdo\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlastDoc=td.doc();\r\n\t\t\t\t\t\t}while(td.next());\r\n\t\t\t\t\t\tbits.set(lastDoc);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(!te.next())\r\n\t\t\t\t{\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcurrTerm=te.term();\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn bits;\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/DuplicateFilter#correctBits(IndexReader).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/DuplicateFilter#correctBits(IndexReader).mjava","sourceNew":"  private OpenBitSet correctBits(IndexReader reader) throws IOException\n\t{\n\t\t\n    OpenBitSet bits=new OpenBitSet(reader.maxDoc()); //assume all are INvalid\n\t\tTerm startTerm=new Term(fieldName);\n\t\tTermEnum te = reader.terms(startTerm);\n\t\tif(te!=null)\n\t\t{\n\t\t\tTerm currTerm=te.term();\n\t\t\twhile((currTerm!=null)&&(currTerm.field()==startTerm.field())) //term fieldnames are interned\n\t\t\t{\n\t\t\t\tint lastDoc=-1;\n\t\t\t\t//set non duplicates\n\t\t\t\tTermDocs td = reader.termDocs(currTerm);\n\t\t\t\tif(td.next())\n\t\t\t\t{\n\t\t\t\t\tif(keepMode==KM_USE_FIRST_OCCURRENCE)\n\t\t\t\t\t{\n\t\t\t\t\t\tbits.set(td.doc());\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tdo\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlastDoc=td.doc();\n\t\t\t\t\t\t}while(td.next());\n\t\t\t\t\t\tbits.set(lastDoc);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(!te.next())\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcurrTerm=te.term();\n\t\t\t}\n\t\t}\n\t\treturn bits;\n\t}\n\n","sourceOld":"  private OpenBitSet correctBits(IndexReader reader) throws IOException\n\t{\n\t\t\n    OpenBitSet bits=new OpenBitSet(reader.maxDoc()); //assume all are INvalid\n\t\tTerm startTerm=new Term(fieldName);\n\t\tTermEnum te = reader.terms(startTerm);\n\t\tif(te!=null)\n\t\t{\n\t\t\tTerm currTerm=te.term();\n\t\t\twhile((currTerm!=null)&&(currTerm.field()==startTerm.field())) //term fieldnames are interned\n\t\t\t{\n\t\t\t\tint lastDoc=-1;\n\t\t\t\t//set non duplicates\n\t\t\t\tTermDocs td = reader.termDocs(currTerm);\n\t\t\t\tif(td.next())\n\t\t\t\t{\n\t\t\t\t\tif(keepMode==KM_USE_FIRST_OCCURRENCE)\n\t\t\t\t\t{\n\t\t\t\t\t\tbits.set(td.doc());\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tdo\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlastDoc=td.doc();\n\t\t\t\t\t\t}while(td.next());\n\t\t\t\t\t\tbits.set(lastDoc);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(!te.next())\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcurrTerm=te.term();\n\t\t\t}\n\t\t}\n\t\treturn bits;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["9d73678020862536617f065bb3d28a71d8c4020c"],"a27a24aac4a53ec0af1f168a3b1ab4a06a042250":["ef08ad6a64004e00b4e02dbe0a553dac1c528bd8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"9d73678020862536617f065bb3d28a71d8c4020c":["a27a24aac4a53ec0af1f168a3b1ab4a06a042250"],"ef08ad6a64004e00b4e02dbe0a553dac1c528bd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ef08ad6a64004e00b4e02dbe0a553dac1c528bd8"],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a27a24aac4a53ec0af1f168a3b1ab4a06a042250":["9d73678020862536617f065bb3d28a71d8c4020c"],"9d73678020862536617f065bb3d28a71d8c4020c":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"ef08ad6a64004e00b4e02dbe0a553dac1c528bd8":["a27a24aac4a53ec0af1f168a3b1ab4a06a042250"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}