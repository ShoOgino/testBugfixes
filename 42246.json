{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testRECURSION().mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testRECURSION().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testRECURSION().mjava","sourceNew":"  @Test\n  public void testRECURSION() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    File childdir = new File(tmpdir + \"/child\" );\n    childdir.mkdirs();\n    childdir.deleteOnExit();\n    createFile(childdir, \"a.xml\", \"a.xml\".getBytes(), true);\n    createFile(childdir, \"b.xml\", \"b.xml\".getBytes(), true);\n    createFile(childdir, \"c.props\", \"c.props\".getBytes(), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"^.*\\\\.xml$\",\n            FileListEntityProcessor.BASE_DIR, childdir.getAbsolutePath(),\n            FileListEntityProcessor.RECURSIVE, \"true\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n  }\n\n","sourceOld":"  @Test\n  public void testRECURSION() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    File childdir = new File(tmpdir + \"/child\" );\n    childdir.mkdirs();\n    childdir.deleteOnExit();\n    createFile(childdir, \"a.xml\", \"a.xml\".getBytes(), true);\n    createFile(childdir, \"b.xml\", \"b.xml\".getBytes(), true);\n    createFile(childdir, \"c.props\", \"c.props\".getBytes(), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"^.*\\\\.xml$\",\n            FileListEntityProcessor.BASE_DIR, childdir.getAbsolutePath(),\n            FileListEntityProcessor.RECURSIVE, \"true\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testRECURSION().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testRECURSION().mjava","sourceNew":"  @Test\n  public void testRECURSION() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    File childdir = new File(tmpdir + \"/child\" );\n    childdir.mkdirs();\n    childdir.deleteOnExit();\n    createFile(childdir, \"a.xml\", \"a.xml\".getBytes(), true);\n    createFile(childdir, \"b.xml\", \"b.xml\".getBytes(), true);\n    createFile(childdir, \"c.props\", \"c.props\".getBytes(), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"^.*\\\\.xml$\",\n            FileListEntityProcessor.BASE_DIR, childdir.getAbsolutePath(),\n            FileListEntityProcessor.RECURSIVE, \"true\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n  }\n\n","sourceOld":"  @Test\n  public void testRECURSION() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    File childdir = new File(tmpdir + \"/child\" );\n    childdir.mkdirs();\n    childdir.deleteOnExit();\n    createFile(childdir, \"a.xml\", \"a.xml\".getBytes(), true);\n    createFile(childdir, \"b.xml\", \"b.xml\".getBytes(), true);\n    createFile(childdir, \"c.props\", \"c.props\".getBytes(), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"^.*\\\\.xml$\",\n            FileListEntityProcessor.BASE_DIR, childdir.getAbsolutePath(),\n            FileListEntityProcessor.RECURSIVE, \"true\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d85d6f9087bbc2d7d39ee8e3574182d63c54745","date":1353440332,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testRECURSION().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testRECURSION().mjava","sourceNew":"  @Test\n  public void testRECURSION() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    File childdir = new File(tmpdir + \"/child\" );\n    childdir.mkdirs();\n    childdir.deleteOnExit();\n    createFile(childdir, \"a.xml\", \"a.xml\".getBytes(\"UTF-8\"), true);\n    createFile(childdir, \"b.xml\", \"b.xml\".getBytes(\"UTF-8\"), true);\n    createFile(childdir, \"c.props\", \"c.props\".getBytes(\"UTF-8\"), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"^.*\\\\.xml$\",\n            FileListEntityProcessor.BASE_DIR, childdir.getAbsolutePath(),\n            FileListEntityProcessor.RECURSIVE, \"true\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n  }\n\n","sourceOld":"  @Test\n  public void testRECURSION() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    File childdir = new File(tmpdir + \"/child\" );\n    childdir.mkdirs();\n    childdir.deleteOnExit();\n    createFile(childdir, \"a.xml\", \"a.xml\".getBytes(), true);\n    createFile(childdir, \"b.xml\", \"b.xml\".getBytes(), true);\n    createFile(childdir, \"c.props\", \"c.props\".getBytes(), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"^.*\\\\.xml$\",\n            FileListEntityProcessor.BASE_DIR, childdir.getAbsolutePath(),\n            FileListEntityProcessor.RECURSIVE, \"true\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n  }\n\n","bugFix":["d241a0d7846c11e0602e9ade2311edaa6e833c9a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testRECURSION().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testRECURSION().mjava","sourceNew":"  @Test\n  public void testRECURSION() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    File childdir = new File(tmpdir + \"/child\" );\n    childdir.mkdirs();\n    childdir.deleteOnExit();\n    createFile(childdir, \"a.xml\", \"a.xml\".getBytes(\"UTF-8\"), true);\n    createFile(childdir, \"b.xml\", \"b.xml\".getBytes(\"UTF-8\"), true);\n    createFile(childdir, \"c.props\", \"c.props\".getBytes(\"UTF-8\"), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"^.*\\\\.xml$\",\n            FileListEntityProcessor.BASE_DIR, childdir.getAbsolutePath(),\n            FileListEntityProcessor.RECURSIVE, \"true\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n  }\n\n","sourceOld":"  @Test\n  public void testRECURSION() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    File childdir = new File(tmpdir + \"/child\" );\n    childdir.mkdirs();\n    childdir.deleteOnExit();\n    createFile(childdir, \"a.xml\", \"a.xml\".getBytes(), true);\n    createFile(childdir, \"b.xml\", \"b.xml\".getBytes(), true);\n    createFile(childdir, \"c.props\", \"c.props\".getBytes(), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"^.*\\\\.xml$\",\n            FileListEntityProcessor.BASE_DIR, childdir.getAbsolutePath(),\n            FileListEntityProcessor.RECURSIVE, \"true\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testRECURSION().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testRECURSION().mjava","sourceNew":"  @Test\n  public void testRECURSION() throws IOException {\n    File tmpdir = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    File childdir = new File(tmpdir + \"/child\" );\n    createFile(childdir, \"a.xml\", \"a.xml\".getBytes(\"UTF-8\"), true);\n    createFile(childdir, \"b.xml\", \"b.xml\".getBytes(\"UTF-8\"), true);\n    createFile(childdir, \"c.props\", \"c.props\".getBytes(\"UTF-8\"), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"^.*\\\\.xml$\",\n            FileListEntityProcessor.BASE_DIR, childdir.getAbsolutePath(),\n            FileListEntityProcessor.RECURSIVE, \"true\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n  }\n\n","sourceOld":"  @Test\n  public void testRECURSION() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    File childdir = new File(tmpdir + \"/child\" );\n    childdir.mkdirs();\n    childdir.deleteOnExit();\n    createFile(childdir, \"a.xml\", \"a.xml\".getBytes(\"UTF-8\"), true);\n    createFile(childdir, \"b.xml\", \"b.xml\".getBytes(\"UTF-8\"), true);\n    createFile(childdir, \"c.props\", \"c.props\".getBytes(\"UTF-8\"), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"^.*\\\\.xml$\",\n            FileListEntityProcessor.BASE_DIR, childdir.getAbsolutePath(),\n            FileListEntityProcessor.RECURSIVE, \"true\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1416f9d09d016a6894cd17e1caac137dad2bba59","date":1395941020,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testRECURSION().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testRECURSION().mjava","sourceNew":"  @Test\n  public void testRECURSION() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", dataDir);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    File childdir = new File(tmpdir + \"/child\" );\n    childdir.mkdirs();\n    childdir.deleteOnExit();\n    createFile(childdir, \"a.xml\", \"a.xml\".getBytes(\"UTF-8\"), true);\n    createFile(childdir, \"b.xml\", \"b.xml\".getBytes(\"UTF-8\"), true);\n    createFile(childdir, \"c.props\", \"c.props\".getBytes(\"UTF-8\"), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"^.*\\\\.xml$\",\n            FileListEntityProcessor.BASE_DIR, childdir.getAbsolutePath(),\n            FileListEntityProcessor.RECURSIVE, \"true\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n  }\n\n","sourceOld":"  @Test\n  public void testRECURSION() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    File childdir = new File(tmpdir + \"/child\" );\n    childdir.mkdirs();\n    childdir.deleteOnExit();\n    createFile(childdir, \"a.xml\", \"a.xml\".getBytes(\"UTF-8\"), true);\n    createFile(childdir, \"b.xml\", \"b.xml\".getBytes(\"UTF-8\"), true);\n    createFile(childdir, \"c.props\", \"c.props\".getBytes(\"UTF-8\"), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"^.*\\\\.xml$\",\n            FileListEntityProcessor.BASE_DIR, childdir.getAbsolutePath(),\n            FileListEntityProcessor.RECURSIVE, \"true\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testRECURSION().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testRECURSION().mjava","sourceNew":"  @Test\n  public void testRECURSION() throws IOException {\n    File tmpdir = createTempDir();\n    File childdir = new File(tmpdir + \"/child\" );\n    childdir.mkdir();\n    createFile(childdir, \"a.xml\", \"a.xml\".getBytes(\"UTF-8\"), true);\n    createFile(childdir, \"b.xml\", \"b.xml\".getBytes(\"UTF-8\"), true);\n    createFile(childdir, \"c.props\", \"c.props\".getBytes(\"UTF-8\"), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"^.*\\\\.xml$\",\n            FileListEntityProcessor.BASE_DIR, childdir.getAbsolutePath(),\n            FileListEntityProcessor.RECURSIVE, \"true\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n  }\n\n","sourceOld":"  @Test\n  public void testRECURSION() throws IOException {\n    File tmpdir = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    File childdir = new File(tmpdir + \"/child\" );\n    createFile(childdir, \"a.xml\", \"a.xml\".getBytes(\"UTF-8\"), true);\n    createFile(childdir, \"b.xml\", \"b.xml\".getBytes(\"UTF-8\"), true);\n    createFile(childdir, \"c.props\", \"c.props\".getBytes(\"UTF-8\"), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"^.*\\\\.xml$\",\n            FileListEntityProcessor.BASE_DIR, childdir.getAbsolutePath(),\n            FileListEntityProcessor.RECURSIVE, \"true\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d3d365762604952e436b51980101dfc84cc1b3e","date":1396298116,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testRECURSION().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testRECURSION().mjava","sourceNew":"  @Test\n  public void testRECURSION() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", dataDir);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    File childdir = new File(tmpdir + \"/child\" );\n    childdir.mkdirs();\n    childdir.deleteOnExit();\n    createFile(childdir, \"a.xml\", \"a.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(childdir, \"b.xml\", \"b.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(childdir, \"c.props\", \"c.props\".getBytes(StandardCharsets.UTF_8), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"^.*\\\\.xml$\",\n            FileListEntityProcessor.BASE_DIR, childdir.getAbsolutePath(),\n            FileListEntityProcessor.RECURSIVE, \"true\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n  }\n\n","sourceOld":"  @Test\n  public void testRECURSION() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", dataDir);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    File childdir = new File(tmpdir + \"/child\" );\n    childdir.mkdirs();\n    childdir.deleteOnExit();\n    createFile(childdir, \"a.xml\", \"a.xml\".getBytes(\"UTF-8\"), true);\n    createFile(childdir, \"b.xml\", \"b.xml\".getBytes(\"UTF-8\"), true);\n    createFile(childdir, \"c.props\", \"c.props\".getBytes(\"UTF-8\"), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"^.*\\\\.xml$\",\n            FileListEntityProcessor.BASE_DIR, childdir.getAbsolutePath(),\n            FileListEntityProcessor.RECURSIVE, \"true\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testRECURSION().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testRECURSION().mjava","sourceNew":"  @Test\n  public void testRECURSION() throws IOException {\n    File tmpdir = createTempDir();\n    File childdir = new File(tmpdir + \"/child\" );\n    childdir.mkdir();\n    createFile(childdir, \"a.xml\", \"a.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(childdir, \"b.xml\", \"b.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(childdir, \"c.props\", \"c.props\".getBytes(StandardCharsets.UTF_8), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"^.*\\\\.xml$\",\n            FileListEntityProcessor.BASE_DIR, childdir.getAbsolutePath(),\n            FileListEntityProcessor.RECURSIVE, \"true\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n  }\n\n","sourceOld":"  @Test\n  public void testRECURSION() throws IOException {\n    File tmpdir = createTempDir();\n    File childdir = new File(tmpdir + \"/child\" );\n    childdir.mkdir();\n    createFile(childdir, \"a.xml\", \"a.xml\".getBytes(\"UTF-8\"), true);\n    createFile(childdir, \"b.xml\", \"b.xml\".getBytes(\"UTF-8\"), true);\n    createFile(childdir, \"c.props\", \"c.props\".getBytes(\"UTF-8\"), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"^.*\\\\.xml$\",\n            FileListEntityProcessor.BASE_DIR, childdir.getAbsolutePath(),\n            FileListEntityProcessor.RECURSIVE, \"true\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testRECURSION().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testRECURSION().mjava","sourceNew":"  @Test\n  public void testRECURSION() throws IOException {\n    File tmpdir = createTempDir();\n    File childdir = new File(tmpdir + \"/child\" );\n    childdir.mkdir();\n    createFile(childdir, \"a.xml\", \"a.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(childdir, \"b.xml\", \"b.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(childdir, \"c.props\", \"c.props\".getBytes(StandardCharsets.UTF_8), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"^.*\\\\.xml$\",\n            FileListEntityProcessor.BASE_DIR, childdir.getAbsolutePath(),\n            FileListEntityProcessor.RECURSIVE, \"true\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n  }\n\n","sourceOld":"  @Test\n  public void testRECURSION() throws IOException {\n    File tmpdir = File.createTempFile(\"test\", \"tmp\", dataDir);\n    tmpdir.delete();\n    tmpdir.mkdir();\n    tmpdir.deleteOnExit();\n    File childdir = new File(tmpdir + \"/child\" );\n    childdir.mkdirs();\n    childdir.deleteOnExit();\n    createFile(childdir, \"a.xml\", \"a.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(childdir, \"b.xml\", \"b.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(childdir, \"c.props\", \"c.props\".getBytes(StandardCharsets.UTF_8), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"^.*\\\\.xml$\",\n            FileListEntityProcessor.BASE_DIR, childdir.getAbsolutePath(),\n            FileListEntityProcessor.RECURSIVE, \"true\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testRECURSION().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testRECURSION().mjava","sourceNew":"  @Test\n  public void testRECURSION() throws IOException {\n    File tmpdir = createTempDir().toFile();\n    File childdir = new File(tmpdir + \"/child\" );\n    childdir.mkdir();\n    createFile(childdir, \"a.xml\", \"a.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(childdir, \"b.xml\", \"b.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(childdir, \"c.props\", \"c.props\".getBytes(StandardCharsets.UTF_8), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"^.*\\\\.xml$\",\n            FileListEntityProcessor.BASE_DIR, childdir.getAbsolutePath(),\n            FileListEntityProcessor.RECURSIVE, \"true\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n  }\n\n","sourceOld":"  @Test\n  public void testRECURSION() throws IOException {\n    File tmpdir = createTempDir();\n    File childdir = new File(tmpdir + \"/child\" );\n    childdir.mkdir();\n    createFile(childdir, \"a.xml\", \"a.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(childdir, \"b.xml\", \"b.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(childdir, \"c.props\", \"c.props\".getBytes(StandardCharsets.UTF_8), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"^.*\\\\.xml$\",\n            FileListEntityProcessor.BASE_DIR, childdir.getAbsolutePath(),\n            FileListEntityProcessor.RECURSIVE, \"true\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"024e13388acbf5562fcbb77a129620982a5e2d79","date":1591531835,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testRECURSION().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testRECURSION().mjava","sourceNew":"  @Test\n  public void testRECURSION() throws IOException {\n    File tmpdir = createTempDir().toFile();\n    File childdir = new File(tmpdir + \"/child\" );\n    childdir.mkdir();\n    createFile(childdir, \"a.xml\", \"a.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(childdir, \"b.xml\", \"b.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(childdir, \"c.props\", \"c.props\".getBytes(StandardCharsets.UTF_8), true);\n    @SuppressWarnings({\"rawtypes\"})\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"^.*\\\\.xml$\",\n            FileListEntityProcessor.BASE_DIR, childdir.getAbsolutePath(),\n            FileListEntityProcessor.RECURSIVE, \"true\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n  }\n\n","sourceOld":"  @Test\n  public void testRECURSION() throws IOException {\n    File tmpdir = createTempDir().toFile();\n    File childdir = new File(tmpdir + \"/child\" );\n    childdir.mkdir();\n    createFile(childdir, \"a.xml\", \"a.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(childdir, \"b.xml\", \"b.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(childdir, \"c.props\", \"c.props\".getBytes(StandardCharsets.UTF_8), true);\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"^.*\\\\.xml$\",\n            FileListEntityProcessor.BASE_DIR, childdir.getAbsolutePath(),\n            FileListEntityProcessor.RECURSIVE, \"true\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestFileListEntityProcessor#testRECURSION().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testRECURSION() throws IOException {\n    File tmpdir = createTempDir().toFile();\n    File childdir = new File(tmpdir + \"/child\" );\n    childdir.mkdir();\n    createFile(childdir, \"a.xml\", \"a.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(childdir, \"b.xml\", \"b.xml\".getBytes(StandardCharsets.UTF_8), true);\n    createFile(childdir, \"c.props\", \"c.props\".getBytes(StandardCharsets.UTF_8), true);\n    @SuppressWarnings({\"rawtypes\"})\n    Map attrs = createMap(\n            FileListEntityProcessor.FILE_NAME, \"^.*\\\\.xml$\",\n            FileListEntityProcessor.BASE_DIR, childdir.getAbsolutePath(),\n            FileListEntityProcessor.RECURSIVE, \"true\");\n    List<String> fList = getFiles(null, attrs);\n    assertEquals(2, fList.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["bb1f22cfa77230b5f05b7784feae5367f6bbb488","9d3d365762604952e436b51980101dfc84cc1b3e"],"024e13388acbf5562fcbb77a129620982a5e2d79":["f4abec28b874149a7223e32cc7a01704c27790de"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["d0d579490a72f2e6297eaa648940611234c57cf1"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["9d3d365762604952e436b51980101dfc84cc1b3e","5eb2511ababf862ea11e10761c70ee560cd84510"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"6d85d6f9087bbc2d7d39ee8e3574182d63c54745":["c26f00b574427b55127e869b935845554afde1fa"],"407687e67faf6e1f02a211ca078d8e3eed631027":["c26f00b574427b55127e869b935845554afde1fa","6d85d6f9087bbc2d7d39ee8e3574182d63c54745"],"f4abec28b874149a7223e32cc7a01704c27790de":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"d0d579490a72f2e6297eaa648940611234c57cf1":["6d85d6f9087bbc2d7d39ee8e3574182d63c54745"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["024e13388acbf5562fcbb77a129620982a5e2d79"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["6d85d6f9087bbc2d7d39ee8e3574182d63c54745"],"9d3d365762604952e436b51980101dfc84cc1b3e":["1416f9d09d016a6894cd17e1caac137dad2bba59"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["5eb2511ababf862ea11e10761c70ee560cd84510"],"024e13388acbf5562fcbb77a129620982a5e2d79":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["f4abec28b874149a7223e32cc7a01704c27790de"],"c26f00b574427b55127e869b935845554afde1fa":["6d85d6f9087bbc2d7d39ee8e3574182d63c54745","407687e67faf6e1f02a211ca078d8e3eed631027"],"6d85d6f9087bbc2d7d39ee8e3574182d63c54745":["407687e67faf6e1f02a211ca078d8e3eed631027","d0d579490a72f2e6297eaa648940611234c57cf1","1416f9d09d016a6894cd17e1caac137dad2bba59"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"f4abec28b874149a7223e32cc7a01704c27790de":["024e13388acbf5562fcbb77a129620982a5e2d79"],"d0d579490a72f2e6297eaa648940611234c57cf1":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["9d3d365762604952e436b51980101dfc84cc1b3e"],"9d3d365762604952e436b51980101dfc84cc1b3e":["5eb2511ababf862ea11e10761c70ee560cd84510","2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}