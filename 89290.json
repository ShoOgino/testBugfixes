{"path":"solr/core/src/test/org/apache/solr/search/TestQueryTypes#testNumericBadRequests().mjava","commits":[{"id":"92f8ab19a30ff70981e43b8cc78069cb0941476e","date":1497374252,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestQueryTypes#testNumericBadRequests().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNumericBadRequests() {\n    String[] suffixes = new String[50];\n    int fieldNum = 0;\n    for (String type:new String[]{\"i\", \"l\", \"f\", \"d\", \"dt\"}) {\n      for (String s:new String[]{\"\", \"s\"}) {\n        //Trie\n        suffixes[fieldNum++] = \"t\" + type + s;\n        suffixes[fieldNum++] = \"t\" + type + s + \"_dv\";\n        suffixes[fieldNum++] = \"t\" + type + s + \"_ni_dv\";\n        \n        //Points\n        suffixes[fieldNum++] = type + s + \"_p\";\n        suffixes[fieldNum++] = type + s + \"_ni_p\";\n      }\n    }\n    assertEquals(fieldNum,suffixes.length);\n    \n    String badNumber = \"NOT_A_NUMBER\";\n    for (String suffix:suffixes) {\n      // Numeric bad requests\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber, req(\"q\",\"{!term f=foo_\" + suffix + \"}\" + badNumber), SolrException.ErrorCode.BAD_REQUEST);\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber, req(\"q\",\"{!terms f=foo_\" + suffix + \"}1 2 3 4 5 \" + badNumber), SolrException.ErrorCode.BAD_REQUEST);\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber, req(\"q\",\"{!lucene}foo_\" + suffix + \":\" + badNumber), SolrException.ErrorCode.BAD_REQUEST);\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber, req(\"q\",\"{!field f=foo_\" + suffix + \"}\" + badNumber), SolrException.ErrorCode.BAD_REQUEST);\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber, req(\"q\",\"{!maxscore}foo_\" + suffix + \":\" + badNumber), SolrException.ErrorCode.BAD_REQUEST);\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber,\n          req(\"q\",\"{!xmlparser}<PointRangeQuery fieldName=\\\"foo_\"+ suffix  + \"\\\" lowerTerm=\\\"1\\\" upperTerm=\\\"\" + badNumber + \"\\\"/>\"), SolrException.ErrorCode.BAD_REQUEST);\n      if (suffix.contains(\"_p\")) {\n        // prefix queries work in Trie fields\n        assertQEx(\"Expecting exception for suffix: \" + suffix, \"Can't run prefix queries on numeric fields\",\n            req(\"q\",\"{!prefix f=foo_\" + suffix + \"}NOT_A_NUMBER\"), SolrException.ErrorCode.BAD_REQUEST);\n        assertQEx(\"Expecting exception for suffix: \" + suffix, \"Can't run prefix queries on numeric fields\",\n            req(\"q\",\"{!lucene}foo_\" + suffix + \":123*\"), SolrException.ErrorCode.BAD_REQUEST);\n      }\n      \n      // Skipping: func, boost, raw, nested, frange, spatial*, join, surround, switch, parent, child, collapsing, \n      // complexphrase, rerank, export, mlt, hash, graph, graphTerms, igain, tlogit, sigificantTerms, payload*\n      // Maybe add: raw, join, parent, child, collapsing, graphTerms, igain, sigificantTerms, simple\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestQueryTypes#testNumericBadRequests().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNumericBadRequests() {\n    String[] suffixes = new String[50];\n    int fieldNum = 0;\n    for (String type:new String[]{\"i\", \"l\", \"f\", \"d\", \"dt\"}) {\n      for (String s:new String[]{\"\", \"s\"}) {\n        //Trie\n        suffixes[fieldNum++] = \"t\" + type + s;\n        suffixes[fieldNum++] = \"t\" + type + s + \"_dv\";\n        suffixes[fieldNum++] = \"t\" + type + s + \"_ni_dv\";\n        \n        //Points\n        suffixes[fieldNum++] = type + s + \"_p\";\n        suffixes[fieldNum++] = type + s + \"_ni_p\";\n      }\n    }\n    assertEquals(fieldNum,suffixes.length);\n    \n    String badNumber = \"NOT_A_NUMBER\";\n    for (String suffix:suffixes) {\n      // Numeric bad requests\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber, req(\"q\",\"{!term f=foo_\" + suffix + \"}\" + badNumber), SolrException.ErrorCode.BAD_REQUEST);\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber, req(\"q\",\"{!terms f=foo_\" + suffix + \"}1 2 3 4 5 \" + badNumber), SolrException.ErrorCode.BAD_REQUEST);\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber, req(\"q\",\"{!lucene}foo_\" + suffix + \":\" + badNumber), SolrException.ErrorCode.BAD_REQUEST);\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber, req(\"q\",\"{!field f=foo_\" + suffix + \"}\" + badNumber), SolrException.ErrorCode.BAD_REQUEST);\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber, req(\"q\",\"{!maxscore}foo_\" + suffix + \":\" + badNumber), SolrException.ErrorCode.BAD_REQUEST);\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber,\n          req(\"q\",\"{!xmlparser}<PointRangeQuery fieldName=\\\"foo_\"+ suffix  + \"\\\" lowerTerm=\\\"1\\\" upperTerm=\\\"\" + badNumber + \"\\\"/>\"), SolrException.ErrorCode.BAD_REQUEST);\n      if (suffix.contains(\"_p\")) {\n        // prefix queries work in Trie fields\n        assertQEx(\"Expecting exception for suffix: \" + suffix, \"Can't run prefix queries on numeric fields\",\n            req(\"q\",\"{!prefix f=foo_\" + suffix + \"}NOT_A_NUMBER\"), SolrException.ErrorCode.BAD_REQUEST);\n        assertQEx(\"Expecting exception for suffix: \" + suffix, \"Can't run prefix queries on numeric fields\",\n            req(\"q\",\"{!lucene}foo_\" + suffix + \":123*\"), SolrException.ErrorCode.BAD_REQUEST);\n      }\n      \n      // Skipping: func, boost, raw, nested, frange, spatial*, join, surround, switch, parent, child, collapsing, \n      // complexphrase, rerank, export, mlt, hash, graph, graphTerms, igain, tlogit, sigificantTerms, payload*\n      // Maybe add: raw, join, parent, child, collapsing, graphTerms, igain, sigificantTerms, simple\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestQueryTypes#testNumericBadRequests().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNumericBadRequests() {\n    String[] suffixes = new String[50];\n    int fieldNum = 0;\n    for (String type:new String[]{\"i\", \"l\", \"f\", \"d\", \"dt\"}) {\n      for (String s:new String[]{\"\", \"s\"}) {\n        //Trie\n        suffixes[fieldNum++] = \"t\" + type + s;\n        suffixes[fieldNum++] = \"t\" + type + s + \"_dv\";\n        suffixes[fieldNum++] = \"t\" + type + s + \"_ni_dv\";\n        \n        //Points\n        suffixes[fieldNum++] = type + s + \"_p\";\n        suffixes[fieldNum++] = type + s + \"_ni_p\";\n      }\n    }\n    assertEquals(fieldNum,suffixes.length);\n    \n    String badNumber = \"NOT_A_NUMBER\";\n    for (String suffix:suffixes) {\n      // Numeric bad requests\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber, req(\"q\",\"{!term f=foo_\" + suffix + \"}\" + badNumber), SolrException.ErrorCode.BAD_REQUEST);\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber, req(\"q\",\"{!terms f=foo_\" + suffix + \"}1 2 3 4 5 \" + badNumber), SolrException.ErrorCode.BAD_REQUEST);\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber, req(\"q\",\"{!lucene}foo_\" + suffix + \":\" + badNumber), SolrException.ErrorCode.BAD_REQUEST);\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber, req(\"q\",\"{!field f=foo_\" + suffix + \"}\" + badNumber), SolrException.ErrorCode.BAD_REQUEST);\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber, req(\"q\",\"{!maxscore}foo_\" + suffix + \":\" + badNumber), SolrException.ErrorCode.BAD_REQUEST);\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber,\n          req(\"q\",\"{!xmlparser}<PointRangeQuery fieldName=\\\"foo_\"+ suffix  + \"\\\" lowerTerm=\\\"1\\\" upperTerm=\\\"\" + badNumber + \"\\\"/>\"), SolrException.ErrorCode.BAD_REQUEST);\n      if (suffix.contains(\"_p\")) {\n        // prefix queries work in Trie fields\n        assertQEx(\"Expecting exception for suffix: \" + suffix, \"Can't run prefix queries on numeric fields\",\n            req(\"q\",\"{!prefix f=foo_\" + suffix + \"}NOT_A_NUMBER\"), SolrException.ErrorCode.BAD_REQUEST);\n        assertQEx(\"Expecting exception for suffix: \" + suffix, \"Can't run prefix queries on numeric fields\",\n            req(\"q\",\"{!lucene}foo_\" + suffix + \":123*\"), SolrException.ErrorCode.BAD_REQUEST);\n      }\n      \n      // Skipping: func, boost, raw, nested, frange, spatial*, join, surround, switch, parent, child, collapsing, \n      // complexphrase, rerank, export, mlt, hash, graph, graphTerms, igain, tlogit, sigificantTerms, payload*\n      // Maybe add: raw, join, parent, child, collapsing, graphTerms, igain, sigificantTerms, simple\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d46ef4f5628f059a25b616ca1ae764c69dc6741","date":1530637775,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestQueryTypes#testNumericBadRequests().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestQueryTypes#testNumericBadRequests().mjava","sourceNew":"  @Test\n  public void testNumericBadRequests() {\n    String[] suffixes = new String[50];\n    int fieldNum = 0;\n    for (String type:new String[]{\"i\", \"l\", \"f\", \"d\", \"dt\"}) {\n      for (String s:new String[]{\"\", \"s\"}) {\n        //Trie\n        suffixes[fieldNum++] = \"t\" + type + s;\n        suffixes[fieldNum++] = \"t\" + type + s + \"_dv\";\n        suffixes[fieldNum++] = \"t\" + type + s + \"_ni_dv\";\n        \n        //Points\n        suffixes[fieldNum++] = type + s + \"_p\";\n        suffixes[fieldNum++] = type + s + \"_ni_p\";\n      }\n    }\n    assertEquals(fieldNum,suffixes.length);\n    \n    String badNumber = \"NOT_A_NUMBER\";\n    for (String suffix:suffixes) {\n      // Numeric bad requests\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber, req(\"q\",\"{!term f=foo_\" + suffix + \"}\" + badNumber), SolrException.ErrorCode.BAD_REQUEST);\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber, req(\"q\",\"{!terms f=foo_\" + suffix + \"}1 2 3 4 5 \" + badNumber), SolrException.ErrorCode.BAD_REQUEST);\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber, req(\"q\",\"{!lucene}foo_\" + suffix + \":\" + badNumber), SolrException.ErrorCode.BAD_REQUEST);\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber, req(\"q\",\"{!field f=foo_\" + suffix + \"}\" + badNumber), SolrException.ErrorCode.BAD_REQUEST);\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber, req(\"q\",\"{!maxscore}foo_\" + suffix + \":\" + badNumber), SolrException.ErrorCode.BAD_REQUEST);\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber,\n          req(\"q\",\"{!xmlparser}<PointRangeQuery fieldName=\\\"foo_\"+ suffix  + \"\\\" lowerTerm=\\\"1\\\" upperTerm=\\\"\" + badNumber + \"\\\"/>\"), SolrException.ErrorCode.BAD_REQUEST);\n      if (suffix.contains(\"_p\")) {\n        // prefix queries work in Trie fields\n        assertQEx(\"Expecting exception for suffix: \" + suffix, \"Can't run prefix queries on numeric fields\",\n            req(\"q\",\"{!prefix f=foo_\" + suffix + \"}NOT_A_NUMBER\"), SolrException.ErrorCode.BAD_REQUEST);\n        assertQEx(\"Expecting exception for suffix: \" + suffix, \"Can't run prefix queries on numeric fields\",\n            req(\"q\",\"{!lucene}foo_\" + suffix + \":123*\"), SolrException.ErrorCode.BAD_REQUEST);\n      }\n      \n      // Skipping: func, boost, raw, nested, frange, spatial*, join, surround, switch, parent, child, collapsing, \n      // complexphrase, rerank, export, mlt, hash, graph, graphTerms, igain, tlogit, significantTerms, payload*\n      // Maybe add: raw, join, parent, child, collapsing, graphTerms, igain, significantTerms, simple\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testNumericBadRequests() {\n    String[] suffixes = new String[50];\n    int fieldNum = 0;\n    for (String type:new String[]{\"i\", \"l\", \"f\", \"d\", \"dt\"}) {\n      for (String s:new String[]{\"\", \"s\"}) {\n        //Trie\n        suffixes[fieldNum++] = \"t\" + type + s;\n        suffixes[fieldNum++] = \"t\" + type + s + \"_dv\";\n        suffixes[fieldNum++] = \"t\" + type + s + \"_ni_dv\";\n        \n        //Points\n        suffixes[fieldNum++] = type + s + \"_p\";\n        suffixes[fieldNum++] = type + s + \"_ni_p\";\n      }\n    }\n    assertEquals(fieldNum,suffixes.length);\n    \n    String badNumber = \"NOT_A_NUMBER\";\n    for (String suffix:suffixes) {\n      // Numeric bad requests\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber, req(\"q\",\"{!term f=foo_\" + suffix + \"}\" + badNumber), SolrException.ErrorCode.BAD_REQUEST);\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber, req(\"q\",\"{!terms f=foo_\" + suffix + \"}1 2 3 4 5 \" + badNumber), SolrException.ErrorCode.BAD_REQUEST);\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber, req(\"q\",\"{!lucene}foo_\" + suffix + \":\" + badNumber), SolrException.ErrorCode.BAD_REQUEST);\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber, req(\"q\",\"{!field f=foo_\" + suffix + \"}\" + badNumber), SolrException.ErrorCode.BAD_REQUEST);\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber, req(\"q\",\"{!maxscore}foo_\" + suffix + \":\" + badNumber), SolrException.ErrorCode.BAD_REQUEST);\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber,\n          req(\"q\",\"{!xmlparser}<PointRangeQuery fieldName=\\\"foo_\"+ suffix  + \"\\\" lowerTerm=\\\"1\\\" upperTerm=\\\"\" + badNumber + \"\\\"/>\"), SolrException.ErrorCode.BAD_REQUEST);\n      if (suffix.contains(\"_p\")) {\n        // prefix queries work in Trie fields\n        assertQEx(\"Expecting exception for suffix: \" + suffix, \"Can't run prefix queries on numeric fields\",\n            req(\"q\",\"{!prefix f=foo_\" + suffix + \"}NOT_A_NUMBER\"), SolrException.ErrorCode.BAD_REQUEST);\n        assertQEx(\"Expecting exception for suffix: \" + suffix, \"Can't run prefix queries on numeric fields\",\n            req(\"q\",\"{!lucene}foo_\" + suffix + \":123*\"), SolrException.ErrorCode.BAD_REQUEST);\n      }\n      \n      // Skipping: func, boost, raw, nested, frange, spatial*, join, surround, switch, parent, child, collapsing, \n      // complexphrase, rerank, export, mlt, hash, graph, graphTerms, igain, tlogit, sigificantTerms, payload*\n      // Maybe add: raw, join, parent, child, collapsing, graphTerms, igain, sigificantTerms, simple\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestQueryTypes#testNumericBadRequests().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestQueryTypes#testNumericBadRequests().mjava","sourceNew":"  @Test\n  public void testNumericBadRequests() {\n    String[] suffixes = new String[50];\n    int fieldNum = 0;\n    for (String type:new String[]{\"i\", \"l\", \"f\", \"d\", \"dt\"}) {\n      for (String s:new String[]{\"\", \"s\"}) {\n        //Trie\n        suffixes[fieldNum++] = \"t\" + type + s;\n        suffixes[fieldNum++] = \"t\" + type + s + \"_dv\";\n        suffixes[fieldNum++] = \"t\" + type + s + \"_ni_dv\";\n        \n        //Points\n        suffixes[fieldNum++] = type + s + \"_p\";\n        suffixes[fieldNum++] = type + s + \"_ni_p\";\n      }\n    }\n    assertEquals(fieldNum,suffixes.length);\n    \n    String badNumber = \"NOT_A_NUMBER\";\n    for (String suffix:suffixes) {\n      // Numeric bad requests\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber, req(\"q\",\"{!term f=foo_\" + suffix + \"}\" + badNumber), SolrException.ErrorCode.BAD_REQUEST);\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber, req(\"q\",\"{!terms f=foo_\" + suffix + \"}1 2 3 4 5 \" + badNumber), SolrException.ErrorCode.BAD_REQUEST);\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber, req(\"q\",\"{!lucene}foo_\" + suffix + \":\" + badNumber), SolrException.ErrorCode.BAD_REQUEST);\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber, req(\"q\",\"{!field f=foo_\" + suffix + \"}\" + badNumber), SolrException.ErrorCode.BAD_REQUEST);\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber, req(\"q\",\"{!maxscore}foo_\" + suffix + \":\" + badNumber), SolrException.ErrorCode.BAD_REQUEST);\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber,\n          req(\"q\",\"{!xmlparser}<PointRangeQuery fieldName=\\\"foo_\"+ suffix  + \"\\\" lowerTerm=\\\"1\\\" upperTerm=\\\"\" + badNumber + \"\\\"/>\"), SolrException.ErrorCode.BAD_REQUEST);\n      if (suffix.contains(\"_p\")) {\n        // prefix queries work in Trie fields\n        assertQEx(\"Expecting exception for suffix: \" + suffix, \"Can't run prefix queries on numeric fields\",\n            req(\"q\",\"{!prefix f=foo_\" + suffix + \"}NOT_A_NUMBER\"), SolrException.ErrorCode.BAD_REQUEST);\n        assertQEx(\"Expecting exception for suffix: \" + suffix, \"Can't run prefix queries on numeric fields\",\n            req(\"q\",\"{!lucene}foo_\" + suffix + \":123*\"), SolrException.ErrorCode.BAD_REQUEST);\n      }\n      \n      // Skipping: func, boost, raw, nested, frange, spatial*, join, surround, switch, parent, child, collapsing, \n      // complexphrase, rerank, export, mlt, hash, graph, graphTerms, igain, tlogit, significantTerms, payload*\n      // Maybe add: raw, join, parent, child, collapsing, graphTerms, igain, significantTerms, simple\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testNumericBadRequests() {\n    String[] suffixes = new String[50];\n    int fieldNum = 0;\n    for (String type:new String[]{\"i\", \"l\", \"f\", \"d\", \"dt\"}) {\n      for (String s:new String[]{\"\", \"s\"}) {\n        //Trie\n        suffixes[fieldNum++] = \"t\" + type + s;\n        suffixes[fieldNum++] = \"t\" + type + s + \"_dv\";\n        suffixes[fieldNum++] = \"t\" + type + s + \"_ni_dv\";\n        \n        //Points\n        suffixes[fieldNum++] = type + s + \"_p\";\n        suffixes[fieldNum++] = type + s + \"_ni_p\";\n      }\n    }\n    assertEquals(fieldNum,suffixes.length);\n    \n    String badNumber = \"NOT_A_NUMBER\";\n    for (String suffix:suffixes) {\n      // Numeric bad requests\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber, req(\"q\",\"{!term f=foo_\" + suffix + \"}\" + badNumber), SolrException.ErrorCode.BAD_REQUEST);\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber, req(\"q\",\"{!terms f=foo_\" + suffix + \"}1 2 3 4 5 \" + badNumber), SolrException.ErrorCode.BAD_REQUEST);\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber, req(\"q\",\"{!lucene}foo_\" + suffix + \":\" + badNumber), SolrException.ErrorCode.BAD_REQUEST);\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber, req(\"q\",\"{!field f=foo_\" + suffix + \"}\" + badNumber), SolrException.ErrorCode.BAD_REQUEST);\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber, req(\"q\",\"{!maxscore}foo_\" + suffix + \":\" + badNumber), SolrException.ErrorCode.BAD_REQUEST);\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber,\n          req(\"q\",\"{!xmlparser}<PointRangeQuery fieldName=\\\"foo_\"+ suffix  + \"\\\" lowerTerm=\\\"1\\\" upperTerm=\\\"\" + badNumber + \"\\\"/>\"), SolrException.ErrorCode.BAD_REQUEST);\n      if (suffix.contains(\"_p\")) {\n        // prefix queries work in Trie fields\n        assertQEx(\"Expecting exception for suffix: \" + suffix, \"Can't run prefix queries on numeric fields\",\n            req(\"q\",\"{!prefix f=foo_\" + suffix + \"}NOT_A_NUMBER\"), SolrException.ErrorCode.BAD_REQUEST);\n        assertQEx(\"Expecting exception for suffix: \" + suffix, \"Can't run prefix queries on numeric fields\",\n            req(\"q\",\"{!lucene}foo_\" + suffix + \":123*\"), SolrException.ErrorCode.BAD_REQUEST);\n      }\n      \n      // Skipping: func, boost, raw, nested, frange, spatial*, join, surround, switch, parent, child, collapsing, \n      // complexphrase, rerank, export, mlt, hash, graph, graphTerms, igain, tlogit, sigificantTerms, payload*\n      // Maybe add: raw, join, parent, child, collapsing, graphTerms, igain, sigificantTerms, simple\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestQueryTypes#testNumericBadRequests().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestQueryTypes#testNumericBadRequests().mjava","sourceNew":"  @Test\n  public void testNumericBadRequests() {\n    String[] suffixes = new String[50];\n    int fieldNum = 0;\n    for (String type:new String[]{\"i\", \"l\", \"f\", \"d\", \"dt\"}) {\n      for (String s:new String[]{\"\", \"s\"}) {\n        //Trie\n        suffixes[fieldNum++] = \"t\" + type + s;\n        suffixes[fieldNum++] = \"t\" + type + s + \"_dv\";\n        suffixes[fieldNum++] = \"t\" + type + s + \"_ni_dv\";\n        \n        //Points\n        suffixes[fieldNum++] = type + s + \"_p\";\n        suffixes[fieldNum++] = type + s + \"_ni_p\";\n      }\n    }\n    assertEquals(fieldNum,suffixes.length);\n    \n    String badNumber = \"NOT_A_NUMBER\";\n    for (String suffix:suffixes) {\n      // Numeric bad requests\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber, req(\"q\",\"{!term f=foo_\" + suffix + \"}\" + badNumber), SolrException.ErrorCode.BAD_REQUEST);\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber, req(\"q\",\"{!terms f=foo_\" + suffix + \"}1 2 3 4 5 \" + badNumber), SolrException.ErrorCode.BAD_REQUEST);\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber, req(\"q\",\"{!lucene}foo_\" + suffix + \":\" + badNumber), SolrException.ErrorCode.BAD_REQUEST);\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber, req(\"q\",\"{!field f=foo_\" + suffix + \"}\" + badNumber), SolrException.ErrorCode.BAD_REQUEST);\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber, req(\"q\",\"{!maxscore}foo_\" + suffix + \":\" + badNumber), SolrException.ErrorCode.BAD_REQUEST);\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber,\n          req(\"q\",\"{!xmlparser}<PointRangeQuery fieldName=\\\"foo_\"+ suffix  + \"\\\" lowerTerm=\\\"1\\\" upperTerm=\\\"\" + badNumber + \"\\\"/>\"), SolrException.ErrorCode.BAD_REQUEST);\n      if (suffix.contains(\"_p\")) {\n        // prefix queries work in Trie fields\n        assertQEx(\"Expecting exception for suffix: \" + suffix, \"Can't run prefix queries on numeric fields\",\n            req(\"q\",\"{!prefix f=foo_\" + suffix + \"}NOT_A_NUMBER\"), SolrException.ErrorCode.BAD_REQUEST);\n        assertQEx(\"Expecting exception for suffix: \" + suffix, \"Can't run prefix queries on numeric fields\",\n            req(\"q\",\"{!lucene}foo_\" + suffix + \":123*\"), SolrException.ErrorCode.BAD_REQUEST);\n      }\n      \n      // Skipping: func, boost, raw, nested, frange, spatial*, join, surround, switch, parent, child, collapsing, \n      // complexphrase, rerank, export, mlt, hash, graph, graphTerms, igain, tlogit, significantTerms, payload*\n      // Maybe add: raw, join, parent, child, collapsing, graphTerms, igain, significantTerms, simple\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testNumericBadRequests() {\n    String[] suffixes = new String[50];\n    int fieldNum = 0;\n    for (String type:new String[]{\"i\", \"l\", \"f\", \"d\", \"dt\"}) {\n      for (String s:new String[]{\"\", \"s\"}) {\n        //Trie\n        suffixes[fieldNum++] = \"t\" + type + s;\n        suffixes[fieldNum++] = \"t\" + type + s + \"_dv\";\n        suffixes[fieldNum++] = \"t\" + type + s + \"_ni_dv\";\n        \n        //Points\n        suffixes[fieldNum++] = type + s + \"_p\";\n        suffixes[fieldNum++] = type + s + \"_ni_p\";\n      }\n    }\n    assertEquals(fieldNum,suffixes.length);\n    \n    String badNumber = \"NOT_A_NUMBER\";\n    for (String suffix:suffixes) {\n      // Numeric bad requests\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber, req(\"q\",\"{!term f=foo_\" + suffix + \"}\" + badNumber), SolrException.ErrorCode.BAD_REQUEST);\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber, req(\"q\",\"{!terms f=foo_\" + suffix + \"}1 2 3 4 5 \" + badNumber), SolrException.ErrorCode.BAD_REQUEST);\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber, req(\"q\",\"{!lucene}foo_\" + suffix + \":\" + badNumber), SolrException.ErrorCode.BAD_REQUEST);\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber, req(\"q\",\"{!field f=foo_\" + suffix + \"}\" + badNumber), SolrException.ErrorCode.BAD_REQUEST);\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber, req(\"q\",\"{!maxscore}foo_\" + suffix + \":\" + badNumber), SolrException.ErrorCode.BAD_REQUEST);\n      assertQEx(\"Expecting exception for suffix: \" + suffix, badNumber,\n          req(\"q\",\"{!xmlparser}<PointRangeQuery fieldName=\\\"foo_\"+ suffix  + \"\\\" lowerTerm=\\\"1\\\" upperTerm=\\\"\" + badNumber + \"\\\"/>\"), SolrException.ErrorCode.BAD_REQUEST);\n      if (suffix.contains(\"_p\")) {\n        // prefix queries work in Trie fields\n        assertQEx(\"Expecting exception for suffix: \" + suffix, \"Can't run prefix queries on numeric fields\",\n            req(\"q\",\"{!prefix f=foo_\" + suffix + \"}NOT_A_NUMBER\"), SolrException.ErrorCode.BAD_REQUEST);\n        assertQEx(\"Expecting exception for suffix: \" + suffix, \"Can't run prefix queries on numeric fields\",\n            req(\"q\",\"{!lucene}foo_\" + suffix + \":123*\"), SolrException.ErrorCode.BAD_REQUEST);\n      }\n      \n      // Skipping: func, boost, raw, nested, frange, spatial*, join, surround, switch, parent, child, collapsing, \n      // complexphrase, rerank, export, mlt, hash, graph, graphTerms, igain, tlogit, sigificantTerms, payload*\n      // Maybe add: raw, join, parent, child, collapsing, graphTerms, igain, sigificantTerms, simple\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["28288370235ed02234a64753cdbf0c6ec096304a","4d46ef4f5628f059a25b616ca1ae764c69dc6741"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92f8ab19a30ff70981e43b8cc78069cb0941476e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d46ef4f5628f059a25b616ca1ae764c69dc6741":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","92f8ab19a30ff70981e43b8cc78069cb0941476e"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","92f8ab19a30ff70981e43b8cc78069cb0941476e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d46ef4f5628f059a25b616ca1ae764c69dc6741"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["28288370235ed02234a64753cdbf0c6ec096304a","4d46ef4f5628f059a25b616ca1ae764c69dc6741"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["92f8ab19a30ff70981e43b8cc78069cb0941476e","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"92f8ab19a30ff70981e43b8cc78069cb0941476e":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"4d46ef4f5628f059a25b616ca1ae764c69dc6741":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"28288370235ed02234a64753cdbf0c6ec096304a":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","4d46ef4f5628f059a25b616ca1ae764c69dc6741","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}