{"path":"src/test/org/apache/lucene/search/TestFilteredSearch#testFilteredSearch().mjava","commits":[{"id":"340ef609ce3f6fbddf0034adc6977a963f65a075","date":1202424397,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFilteredSearch#testFilteredSearch().mjava","pathOld":"/dev/null","sourceNew":"  public void testFilteredSearch() {\n    RAMDirectory directory = new RAMDirectory();\n    int[] filterBits = {1, 36};\n    Filter filter = new SimpleDocIdSetFilter(filterBits);\n    \n\n    try {\n      IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < 60; i++) {//Simple docs\n        Document doc = new Document();\n        doc.add(new Field(FIELD, Integer.toString(i), Field.Store.YES, Field.Index.UN_TOKENIZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(FIELD, \"36\")), BooleanClause.Occur.SHOULD);\n     \n     \n      IndexSearcher indexSearcher = new IndexSearcher(directory);\n      org.apache.lucene.search.Hits hits = indexSearcher.search(booleanQuery, filter);\n      assertEquals(\"Number of matched documents\", 1, hits.length());\n\n    }\n    catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFilteredSearch#testFilteredSearch().mjava","pathOld":"src/test/org/apache/lucene/search/TestFilteredSearch#testFilteredSearch().mjava","sourceNew":"  public void testFilteredSearch() {\n    RAMDirectory directory = new RAMDirectory();\n    int[] filterBits = {1, 36};\n    Filter filter = new SimpleDocIdSetFilter(filterBits);\n    \n\n    try {\n      IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < 60; i++) {//Simple docs\n        Document doc = new Document();\n        doc.add(new Field(FIELD, Integer.toString(i), Field.Store.YES, Field.Index.UN_TOKENIZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(FIELD, \"36\")), BooleanClause.Occur.SHOULD);\n     \n     \n      IndexSearcher indexSearcher = new IndexSearcher(directory);\n      ScoreDoc[] hits = indexSearcher.search(booleanQuery, filter, 1000).scoreDocs;\n      assertEquals(\"Number of matched documents\", 1, hits.length);\n\n    }\n    catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n  }\n\n","sourceOld":"  public void testFilteredSearch() {\n    RAMDirectory directory = new RAMDirectory();\n    int[] filterBits = {1, 36};\n    Filter filter = new SimpleDocIdSetFilter(filterBits);\n    \n\n    try {\n      IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < 60; i++) {//Simple docs\n        Document doc = new Document();\n        doc.add(new Field(FIELD, Integer.toString(i), Field.Store.YES, Field.Index.UN_TOKENIZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(FIELD, \"36\")), BooleanClause.Occur.SHOULD);\n     \n     \n      IndexSearcher indexSearcher = new IndexSearcher(directory);\n      org.apache.lucene.search.Hits hits = indexSearcher.search(booleanQuery, filter);\n      assertEquals(\"Number of matched documents\", 1, hits.length());\n\n    }\n    catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFilteredSearch#testFilteredSearch().mjava","pathOld":"src/test/org/apache/lucene/search/TestFilteredSearch#testFilteredSearch().mjava","sourceNew":"  public void testFilteredSearch() {\n    RAMDirectory directory = new RAMDirectory();\n    int[] filterBits = {1, 36};\n    Filter filter = new SimpleDocIdSetFilter(filterBits);\n    \n\n    try {\n      IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < 60; i++) {//Simple docs\n        Document doc = new Document();\n        doc.add(new Field(FIELD, Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(FIELD, \"36\")), BooleanClause.Occur.SHOULD);\n     \n     \n      IndexSearcher indexSearcher = new IndexSearcher(directory);\n      ScoreDoc[] hits = indexSearcher.search(booleanQuery, filter, 1000).scoreDocs;\n      assertEquals(\"Number of matched documents\", 1, hits.length);\n\n    }\n    catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n  }\n\n","sourceOld":"  public void testFilteredSearch() {\n    RAMDirectory directory = new RAMDirectory();\n    int[] filterBits = {1, 36};\n    Filter filter = new SimpleDocIdSetFilter(filterBits);\n    \n\n    try {\n      IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < 60; i++) {//Simple docs\n        Document doc = new Document();\n        doc.add(new Field(FIELD, Integer.toString(i), Field.Store.YES, Field.Index.UN_TOKENIZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(FIELD, \"36\")), BooleanClause.Occur.SHOULD);\n     \n     \n      IndexSearcher indexSearcher = new IndexSearcher(directory);\n      ScoreDoc[] hits = indexSearcher.search(booleanQuery, filter, 1000).scoreDocs;\n      assertEquals(\"Number of matched documents\", 1, hits.length);\n\n    }\n    catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFilteredSearch#testFilteredSearch().mjava","pathOld":"src/test/org/apache/lucene/search/TestFilteredSearch#testFilteredSearch().mjava","sourceNew":"  public void testFilteredSearch() {\n    RAMDirectory directory = new RAMDirectory();\n    int[] filterBits = {1, 36};\n    Filter filter = new SimpleDocIdSetFilter(filterBits);\n    \n\n    try {\n      IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < 60; i++) {//Simple docs\n        Document doc = new Document();\n        doc.add(new Field(FIELD, Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(FIELD, \"36\")), BooleanClause.Occur.SHOULD);\n     \n     \n      IndexSearcher indexSearcher = new IndexSearcher(directory, true);\n      ScoreDoc[] hits = indexSearcher.search(booleanQuery, filter, 1000).scoreDocs;\n      assertEquals(\"Number of matched documents\", 1, hits.length);\n\n    }\n    catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n  }\n\n","sourceOld":"  public void testFilteredSearch() {\n    RAMDirectory directory = new RAMDirectory();\n    int[] filterBits = {1, 36};\n    Filter filter = new SimpleDocIdSetFilter(filterBits);\n    \n\n    try {\n      IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < 60; i++) {//Simple docs\n        Document doc = new Document();\n        doc.add(new Field(FIELD, Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(FIELD, \"36\")), BooleanClause.Occur.SHOULD);\n     \n     \n      IndexSearcher indexSearcher = new IndexSearcher(directory);\n      ScoreDoc[] hits = indexSearcher.search(booleanQuery, filter, 1000).scoreDocs;\n      assertEquals(\"Number of matched documents\", 1, hits.length);\n\n    }\n    catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestFilteredSearch#testFilteredSearch().mjava","pathOld":"src/test/org/apache/lucene/search/TestFilteredSearch#testFilteredSearch().mjava","sourceNew":"  public void testFilteredSearch() {\n    RAMDirectory directory = new RAMDirectory();\n    int[] filterBits = {1, 36};\n    Filter filter = new SimpleDocIdSetFilter(filterBits);\n    \n\n    try {\n      IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < 60; i++) {//Simple docs\n        Document doc = new Document();\n        doc.add(new Field(FIELD, Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(FIELD, \"36\")), BooleanClause.Occur.SHOULD);\n     \n     \n      IndexSearcher indexSearcher = new IndexSearcher(directory, true);\n      ScoreDoc[] hits = indexSearcher.search(booleanQuery, filter, 1000).scoreDocs;\n      assertEquals(\"Number of matched documents\", 1, hits.length);\n\n    }\n    catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n  }\n\n","sourceOld":"  public void testFilteredSearch() {\n    RAMDirectory directory = new RAMDirectory();\n    int[] filterBits = {1, 36};\n    Filter filter = new SimpleDocIdSetFilter(filterBits);\n    \n\n    try {\n      IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < 60; i++) {//Simple docs\n        Document doc = new Document();\n        doc.add(new Field(FIELD, Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(FIELD, \"36\")), BooleanClause.Occur.SHOULD);\n     \n     \n      IndexSearcher indexSearcher = new IndexSearcher(directory);\n      ScoreDoc[] hits = indexSearcher.search(booleanQuery, filter, 1000).scoreDocs;\n      assertEquals(\"Number of matched documents\", 1, hits.length);\n\n    }\n    catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f9c6c7abe2f7f9fdd4c838d1601dcd707946566","date":1259958704,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFilteredSearch#testFilteredSearch().mjava","pathOld":"src/test/org/apache/lucene/search/TestFilteredSearch#testFilteredSearch().mjava","sourceNew":"  public void testFilteredSearch() throws CorruptIndexException, LockObtainFailedException, IOException {\n    boolean enforceSingleSegment = true;\n    RAMDirectory directory = new RAMDirectory();\n    int[] filterBits = {1, 36};\n    SimpleDocIdSetFilter filter = new SimpleDocIdSetFilter(filterBits);\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n    // run the test on more than one segment\n    enforceSingleSegment = false;\n    // reset - it is stateful\n    filter.reset();\n    writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    // we index 60 docs - this will create 6 segments\n    writer.setMaxBufferedDocs(10);\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n  }\n\n","sourceOld":"  public void testFilteredSearch() {\n    RAMDirectory directory = new RAMDirectory();\n    int[] filterBits = {1, 36};\n    Filter filter = new SimpleDocIdSetFilter(filterBits);\n    \n\n    try {\n      IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < 60; i++) {//Simple docs\n        Document doc = new Document();\n        doc.add(new Field(FIELD, Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      writer.close();\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(FIELD, \"36\")), BooleanClause.Occur.SHOULD);\n     \n     \n      IndexSearcher indexSearcher = new IndexSearcher(directory, true);\n      ScoreDoc[] hits = indexSearcher.search(booleanQuery, filter, 1000).scoreDocs;\n      assertEquals(\"Number of matched documents\", 1, hits.length);\n\n    }\n    catch (IOException e) {\n      fail(e.getMessage());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFilteredSearch#testFilteredSearch().mjava","pathOld":"src/test/org/apache/lucene/search/TestFilteredSearch#testFilteredSearch().mjava","sourceNew":"  public void testFilteredSearch() throws CorruptIndexException, LockObtainFailedException, IOException {\n    boolean enforceSingleSegment = true;\n    RAMDirectory directory = new RAMDirectory();\n    int[] filterBits = {1, 36};\n    SimpleDocIdSetFilter filter = new SimpleDocIdSetFilter(filterBits);\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n    // run the test on more than one segment\n    enforceSingleSegment = false;\n    // reset - it is stateful\n    filter.reset();\n    writer = new IndexWriter(directory, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    // we index 60 docs - this will create 6 segments\n    writer.setMaxBufferedDocs(10);\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n  }\n\n","sourceOld":"  public void testFilteredSearch() throws CorruptIndexException, LockObtainFailedException, IOException {\n    boolean enforceSingleSegment = true;\n    RAMDirectory directory = new RAMDirectory();\n    int[] filterBits = {1, 36};\n    SimpleDocIdSetFilter filter = new SimpleDocIdSetFilter(filterBits);\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n    // run the test on more than one segment\n    enforceSingleSegment = false;\n    // reset - it is stateful\n    filter.reset();\n    writer = new IndexWriter(directory, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    // we index 60 docs - this will create 6 segments\n    writer.setMaxBufferedDocs(10);\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFilteredSearch#testFilteredSearch().mjava","pathOld":"src/test/org/apache/lucene/search/TestFilteredSearch#testFilteredSearch().mjava","sourceNew":"  public void testFilteredSearch() throws CorruptIndexException, LockObtainFailedException, IOException {\n    boolean enforceSingleSegment = true;\n    RAMDirectory directory = new RAMDirectory();\n    int[] filterBits = {1, 36};\n    SimpleDocIdSetFilter filter = new SimpleDocIdSetFilter(filterBits);\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n    // run the test on more than one segment\n    enforceSingleSegment = false;\n    // reset - it is stateful\n    filter.reset();\n    writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    // we index 60 docs - this will create 6 segments\n    writer.setMaxBufferedDocs(10);\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n  }\n\n","sourceOld":"  public void testFilteredSearch() throws CorruptIndexException, LockObtainFailedException, IOException {\n    boolean enforceSingleSegment = true;\n    RAMDirectory directory = new RAMDirectory();\n    int[] filterBits = {1, 36};\n    SimpleDocIdSetFilter filter = new SimpleDocIdSetFilter(filterBits);\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n    // run the test on more than one segment\n    enforceSingleSegment = false;\n    // reset - it is stateful\n    filter.reset();\n    writer = new IndexWriter(directory, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    // we index 60 docs - this will create 6 segments\n    writer.setMaxBufferedDocs(10);\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFilteredSearch#testFilteredSearch().mjava","pathOld":"src/test/org/apache/lucene/search/TestFilteredSearch#testFilteredSearch().mjava","sourceNew":"  public void testFilteredSearch() throws CorruptIndexException, LockObtainFailedException, IOException {\n    boolean enforceSingleSegment = true;\n    RAMDirectory directory = new RAMDirectory();\n    int[] filterBits = {1, 36};\n    SimpleDocIdSetFilter filter = new SimpleDocIdSetFilter(filterBits);\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n    // run the test on more than one segment\n    enforceSingleSegment = false;\n    // reset - it is stateful\n    filter.reset();\n    writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n    // we index 60 docs - this will create 6 segments\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n  }\n\n","sourceOld":"  public void testFilteredSearch() throws CorruptIndexException, LockObtainFailedException, IOException {\n    boolean enforceSingleSegment = true;\n    RAMDirectory directory = new RAMDirectory();\n    int[] filterBits = {1, 36};\n    SimpleDocIdSetFilter filter = new SimpleDocIdSetFilter(filterBits);\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n    // run the test on more than one segment\n    enforceSingleSegment = false;\n    // reset - it is stateful\n    filter.reset();\n    writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    // we index 60 docs - this will create 6 segments\n    writer.setMaxBufferedDocs(10);\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFilteredSearch#testFilteredSearch().mjava","pathOld":"src/test/org/apache/lucene/search/TestFilteredSearch#testFilteredSearch().mjava","sourceNew":"  public void testFilteredSearch() throws CorruptIndexException, LockObtainFailedException, IOException {\n    boolean enforceSingleSegment = true;\n    RAMDirectory directory = new RAMDirectory();\n    int[] filterBits = {1, 36};\n    SimpleDocIdSetFilter filter = new SimpleDocIdSetFilter(filterBits);\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n    // run the test on more than one segment\n    enforceSingleSegment = false;\n    // reset - it is stateful\n    filter.reset();\n    writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    // we index 60 docs - this will create 6 segments\n    writer.setMaxBufferedDocs(10);\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n  }\n\n","sourceOld":"  public void testFilteredSearch() throws CorruptIndexException, LockObtainFailedException, IOException {\n    boolean enforceSingleSegment = true;\n    RAMDirectory directory = new RAMDirectory();\n    int[] filterBits = {1, 36};\n    SimpleDocIdSetFilter filter = new SimpleDocIdSetFilter(filterBits);\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n    // run the test on more than one segment\n    enforceSingleSegment = false;\n    // reset - it is stateful\n    filter.reset();\n    writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n    // we index 60 docs - this will create 6 segments\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFilteredSearch#testFilteredSearch().mjava","pathOld":"src/test/org/apache/lucene/search/TestFilteredSearch#testFilteredSearch().mjava","sourceNew":"  public void testFilteredSearch() throws CorruptIndexException, LockObtainFailedException, IOException {\n    boolean enforceSingleSegment = true;\n    RAMDirectory directory = new RAMDirectory();\n    int[] filterBits = {1, 36};\n    SimpleDocIdSetFilter filter = new SimpleDocIdSetFilter(filterBits);\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n    // run the test on more than one segment\n    enforceSingleSegment = false;\n    // reset - it is stateful\n    filter.reset();\n    writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n    // we index 60 docs - this will create 6 segments\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n  }\n\n","sourceOld":"  public void testFilteredSearch() throws CorruptIndexException, LockObtainFailedException, IOException {\n    boolean enforceSingleSegment = true;\n    RAMDirectory directory = new RAMDirectory();\n    int[] filterBits = {1, 36};\n    SimpleDocIdSetFilter filter = new SimpleDocIdSetFilter(filterBits);\n    IndexWriter writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n    // run the test on more than one segment\n    enforceSingleSegment = false;\n    // reset - it is stateful\n    filter.reset();\n    writer = new IndexWriter(directory, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    // we index 60 docs - this will create 6 segments\n    writer.setMaxBufferedDocs(10);\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch#testFilteredSearch().mjava","pathOld":"src/test/org/apache/lucene/search/TestFilteredSearch#testFilteredSearch().mjava","sourceNew":"  public void testFilteredSearch() throws CorruptIndexException, LockObtainFailedException, IOException {\n    boolean enforceSingleSegment = true;\n    RAMDirectory directory = new RAMDirectory();\n    int[] filterBits = {1, 36};\n    SimpleDocIdSetFilter filter = new SimpleDocIdSetFilter(filterBits);\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n    // run the test on more than one segment\n    enforceSingleSegment = false;\n    // reset - it is stateful\n    filter.reset();\n    writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n    // we index 60 docs - this will create 6 segments\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n  }\n\n","sourceOld":"  public void testFilteredSearch() throws CorruptIndexException, LockObtainFailedException, IOException {\n    boolean enforceSingleSegment = true;\n    RAMDirectory directory = new RAMDirectory();\n    int[] filterBits = {1, 36};\n    SimpleDocIdSetFilter filter = new SimpleDocIdSetFilter(filterBits);\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n    // run the test on more than one segment\n    enforceSingleSegment = false;\n    // reset - it is stateful\n    filter.reset();\n    writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10));\n    // we index 60 docs - this will create 6 segments\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"340ef609ce3f6fbddf0034adc6977a963f65a075":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["2f9c6c7abe2f7f9fdd4c838d1601dcd707946566"],"2f9c6c7abe2f7f9fdd4c838d1601dcd707946566":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["340ef609ce3f6fbddf0034adc6977a963f65a075"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"340ef609ce3f6fbddf0034adc6977a963f65a075":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["2f9c6c7abe2f7f9fdd4c838d1601dcd707946566"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["340ef609ce3f6fbddf0034adc6977a963f65a075"],"2f9c6c7abe2f7f9fdd4c838d1601dcd707946566":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}