{"path":"solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory#createBlockCache(int,int,int,boolean,int,int,int).mjava","commits":[{"id":"19389fe47925b510b2811e2b385a75f7ad19dcca","date":1393903127,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory#createBlockCache(int,int,int,boolean,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private BlockCache createBlockCache(int numberOfBlocksPerBank, int blockSize,\n      int bankCount, boolean directAllocation, int slabSize, int bufferSize,\n      int bufferCount) {\n    BufferStore.initNewBuffer(bufferSize, bufferCount);\n    long totalMemory = (long) bankCount * (long) numberOfBlocksPerBank\n        * (long) blockSize;\n    \n    BlockCache blockCache;\n    try {\n      blockCache = new BlockCache(metrics, directAllocation, totalMemory, slabSize, blockSize);\n    } catch (OutOfMemoryError e) {\n      throw new RuntimeException(\n          \"The max direct memory is likely too low.  Either increase it (by adding -XX:MaxDirectMemorySize=<size>g -XX:+UseLargePages to your containers startup args)\"\n              + \" or disable direct allocation using solr.hdfs.blockcache.direct.memory.allocation=false in solrconfig.xml. If you are putting the block cache on the heap,\"\n              + \" your java heap size might not be large enough.\"\n              + \" Failed allocating ~\" + totalMemory / 1000000.0 + \" MB.\",\n          e);\n    }\n    return blockCache;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["adc1a805943f03a49f6d5cdc1b010526dab1cfc9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory#createBlockCache(int,int,int,boolean,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private BlockCache createBlockCache(int numberOfBlocksPerBank, int blockSize,\n      int bankCount, boolean directAllocation, int slabSize, int bufferSize,\n      int bufferCount) {\n    BufferStore.initNewBuffer(bufferSize, bufferCount);\n    long totalMemory = (long) bankCount * (long) numberOfBlocksPerBank\n        * (long) blockSize;\n    \n    BlockCache blockCache;\n    try {\n      blockCache = new BlockCache(metrics, directAllocation, totalMemory, slabSize, blockSize);\n    } catch (OutOfMemoryError e) {\n      throw new RuntimeException(\n          \"The max direct memory is likely too low.  Either increase it (by adding -XX:MaxDirectMemorySize=<size>g -XX:+UseLargePages to your containers startup args)\"\n              + \" or disable direct allocation using solr.hdfs.blockcache.direct.memory.allocation=false in solrconfig.xml. If you are putting the block cache on the heap,\"\n              + \" your java heap size might not be large enough.\"\n              + \" Failed allocating ~\" + totalMemory / 1000000.0 + \" MB.\",\n          e);\n    }\n    return blockCache;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"adc1a805943f03a49f6d5cdc1b010526dab1cfc9","date":1417444169,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory#createBlockCache(int,int,int,boolean,int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/HdfsDirectoryFactory#createBlockCache(int,int,int,boolean,int,int,int).mjava","sourceNew":"  private BlockCache createBlockCache(int numberOfBlocksPerBank, int blockSize,\n      int bankCount, boolean directAllocation, int slabSize, int bufferSize,\n      int bufferCount) {\n    BufferStore.initNewBuffer(bufferSize, bufferCount, metrics);\n    long totalMemory = (long) bankCount * (long) numberOfBlocksPerBank\n        * (long) blockSize;\n    \n    BlockCache blockCache;\n    try {\n      blockCache = new BlockCache(metrics, directAllocation, totalMemory, slabSize, blockSize);\n    } catch (OutOfMemoryError e) {\n      throw new RuntimeException(\n          \"The max direct memory is likely too low.  Either increase it (by adding -XX:MaxDirectMemorySize=<size>g -XX:+UseLargePages to your containers startup args)\"\n              + \" or disable direct allocation using solr.hdfs.blockcache.direct.memory.allocation=false in solrconfig.xml. If you are putting the block cache on the heap,\"\n              + \" your java heap size might not be large enough.\"\n              + \" Failed allocating ~\" + totalMemory / 1000000.0 + \" MB.\",\n          e);\n    }\n    return blockCache;\n  }\n\n","sourceOld":"  private BlockCache createBlockCache(int numberOfBlocksPerBank, int blockSize,\n      int bankCount, boolean directAllocation, int slabSize, int bufferSize,\n      int bufferCount) {\n    BufferStore.initNewBuffer(bufferSize, bufferCount);\n    long totalMemory = (long) bankCount * (long) numberOfBlocksPerBank\n        * (long) blockSize;\n    \n    BlockCache blockCache;\n    try {\n      blockCache = new BlockCache(metrics, directAllocation, totalMemory, slabSize, blockSize);\n    } catch (OutOfMemoryError e) {\n      throw new RuntimeException(\n          \"The max direct memory is likely too low.  Either increase it (by adding -XX:MaxDirectMemorySize=<size>g -XX:+UseLargePages to your containers startup args)\"\n              + \" or disable direct allocation using solr.hdfs.blockcache.direct.memory.allocation=false in solrconfig.xml. If you are putting the block cache on the heap,\"\n              + \" your java heap size might not be large enough.\"\n              + \" Failed allocating ~\" + totalMemory / 1000000.0 + \" MB.\",\n          e);\n    }\n    return blockCache;\n  }\n\n","bugFix":["19389fe47925b510b2811e2b385a75f7ad19dcca"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"19389fe47925b510b2811e2b385a75f7ad19dcca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","19389fe47925b510b2811e2b385a75f7ad19dcca"],"adc1a805943f03a49f6d5cdc1b010526dab1cfc9":["19389fe47925b510b2811e2b385a75f7ad19dcca"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["adc1a805943f03a49f6d5cdc1b010526dab1cfc9"]},"commit2Childs":{"19389fe47925b510b2811e2b385a75f7ad19dcca":["96ea64d994d340044e0d57aeb6a5871539d10ca5","adc1a805943f03a49f6d5cdc1b010526dab1cfc9"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"adc1a805943f03a49f6d5cdc1b010526dab1cfc9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["19389fe47925b510b2811e2b385a75f7ad19dcca","96ea64d994d340044e0d57aeb6a5871539d10ca5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}