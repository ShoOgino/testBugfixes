{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#build(List[String],String,boolean,boolean).mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#build(List[String],String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"    public void build(List<String> paths, String fieldName,\n                      boolean multiValued, boolean record) {\n      String name = paths.remove(0);\n      if (paths.isEmpty() && name.startsWith(\"@\")) {\n        if (attributes == null) {\n          attributes = new ArrayList<Node>();\n        }\n        name = name.substring(1);\n        attributes.add(new Node(name, fieldName, multiValued));\n\n      } else {\n        if (childNodes == null)\n          childNodes = new ArrayList<Node>();\n        Node n = getOrAddChildNode(name);\n        if (paths.isEmpty()) {\n          if (record) {\n            n.isRecord = true;\n            n.forEachPath = fieldName;\n          } else {\n            n.hasText = true;\n            n.fieldName = fieldName;\n            n.multiValued = multiValued;\n          }\n        } else {\n          n.build(paths, fieldName, multiValued, record);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6a43d4d79c846f6b9308b9adc72dd8de0ab6bdb","date":1233863590,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#build(List[String],String,boolean,boolean,int).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#build(List[String],String,boolean,boolean).mjava","sourceNew":"    public void build(List<String> paths, String fieldName,\n                      boolean multiValued, boolean record, int flags) {\n      String name = paths.remove(0);\n      if (paths.isEmpty() && name.startsWith(\"@\")) {\n        if (attributes == null) {\n          attributes = new ArrayList<Node>();\n        }\n        name = name.substring(1);\n        attributes.add(new Node(name, fieldName, multiValued));\n\n      } else {\n        if (childNodes == null)\n          childNodes = new ArrayList<Node>();\n        Node n = getOrAddChildNode(name);\n        if (paths.isEmpty()) {\n          if (record) {\n            n.isRecord = true;\n            n.forEachPath = fieldName;\n          } else {\n            n.hasText = true;\n            n.fieldName = fieldName;\n            n.multiValued = multiValued;\n            n.flatten = flags == FLATTEN;\n          }\n        } else {\n          n.build(paths, fieldName, multiValued, record, flags);\n        }\n      }\n    }\n\n","sourceOld":"    public void build(List<String> paths, String fieldName,\n                      boolean multiValued, boolean record) {\n      String name = paths.remove(0);\n      if (paths.isEmpty() && name.startsWith(\"@\")) {\n        if (attributes == null) {\n          attributes = new ArrayList<Node>();\n        }\n        name = name.substring(1);\n        attributes.add(new Node(name, fieldName, multiValued));\n\n      } else {\n        if (childNodes == null)\n          childNodes = new ArrayList<Node>();\n        Node n = getOrAddChildNode(name);\n        if (paths.isEmpty()) {\n          if (record) {\n            n.isRecord = true;\n            n.forEachPath = fieldName;\n          } else {\n            n.hasText = true;\n            n.fieldName = fieldName;\n            n.multiValued = multiValued;\n          }\n        } else {\n          n.build(paths, fieldName, multiValued, record);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d6a43d4d79c846f6b9308b9adc72dd8de0ab6bdb":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"]},"commit2Childs":{"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["d6a43d4d79c846f6b9308b9adc72dd8de0ab6bdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d6a43d4d79c846f6b9308b9adc72dd8de0ab6bdb":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","d6a43d4d79c846f6b9308b9adc72dd8de0ab6bdb"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}