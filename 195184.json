{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumericValues(NumericEntry).mjava","commits":[{"id":"23e44daeaa8b89694d10df5999956c8e14a7dd09","date":1476689300,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumericValues(NumericEntry).mjava","pathOld":"/dev/null","sourceNew":"  private LongValues getNumericValues(NumericEntry entry) throws IOException {\n    if (entry.bitsPerValue == 0) {\n      return new LongValues() {\n        @Override\n        public long get(long index) {\n          return entry.minValue;\n        }\n      };\n    } else {\n      final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n      LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n      if (entry.gcd != 1) {\n        values = applyGcd(values, entry.gcd);\n      }\n      if (entry.minValue != 0) {\n        values = applyDelta(values, entry.minValue);\n      }\n      if (entry.table != null) {\n        values = applyTable(values, entry.table);\n      }\n      return values;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b0e5e197ada9468ae70e471a00b93929c7558e5","date":1476799709,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumericValues(NumericEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumericValues(NumericEntry).mjava","sourceNew":"  private LongValues getNumericValues(NumericEntry entry) throws IOException {\n    if (entry.bitsPerValue == 0) {\n      return new LongValues() {\n        @Override\n        public long get(long index) {\n          return entry.minValue;\n        }\n      };\n    } else {\n      final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n      final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n      if (entry.table != null) {\n        final long[] table = entry.table;\n        return new LongValues() {\n          @Override\n          public long get(long index) {\n            return table[(int) values.get(index)];\n          }\n        };\n      } else if (entry.gcd != 1) {\n        final long gcd = entry.gcd;\n        final long minValue = entry.minValue;\n        return new LongValues() {\n          @Override\n          public long get(long index) {\n            return values.get(index) * gcd + minValue;\n          }\n        };\n      } else if (entry.minValue != 0) {\n        final long minValue = entry.minValue;\n        return new LongValues() {\n          @Override\n          public long get(long index) {\n            return values.get(index) + minValue;\n          }\n        };\n      } else {\n        return values;\n      }\n    }\n  }\n\n","sourceOld":"  private LongValues getNumericValues(NumericEntry entry) throws IOException {\n    if (entry.bitsPerValue == 0) {\n      return new LongValues() {\n        @Override\n        public long get(long index) {\n          return entry.minValue;\n        }\n      };\n    } else {\n      final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n      LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n      if (entry.gcd != 1) {\n        values = applyGcd(values, entry.gcd);\n      }\n      if (entry.minValue != 0) {\n        values = applyDelta(values, entry.minValue);\n      }\n      if (entry.table != null) {\n        values = applyTable(values, entry.table);\n      }\n      return values;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f177ec0246f5d1788b56d8f5d5c66cb38d66bcef","date":1476800106,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumericValues(NumericEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumericValues(NumericEntry).mjava","sourceNew":"  private LongValues getNumericValues(NumericEntry entry) throws IOException {\n    if (entry.bitsPerValue == 0) {\n      return new LongValues() {\n        @Override\n        public long get(long index) {\n          return entry.minValue;\n        }\n      };\n    } else {\n      final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n      final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n      if (entry.table != null) {\n        final long[] table = entry.table;\n        return new LongValues() {\n          @Override\n          public long get(long index) {\n            return table[(int) values.get(index)];\n          }\n        };\n      } else if (entry.gcd != 1) {\n        final long gcd = entry.gcd;\n        final long minValue = entry.minValue;\n        return new LongValues() {\n          @Override\n          public long get(long index) {\n            return values.get(index) * gcd + minValue;\n          }\n        };\n      } else if (entry.minValue != 0) {\n        final long minValue = entry.minValue;\n        return new LongValues() {\n          @Override\n          public long get(long index) {\n            return values.get(index) + minValue;\n          }\n        };\n      } else {\n        return values;\n      }\n    }\n  }\n\n","sourceOld":"  private LongValues getNumericValues(NumericEntry entry) throws IOException {\n    if (entry.bitsPerValue == 0) {\n      return new LongValues() {\n        @Override\n        public long get(long index) {\n          return entry.minValue;\n        }\n      };\n    } else {\n      final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n      LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n      if (entry.gcd != 1) {\n        values = applyGcd(values, entry.gcd);\n      }\n      if (entry.minValue != 0) {\n        values = applyDelta(values, entry.minValue);\n      }\n      if (entry.table != null) {\n        values = applyTable(values, entry.table);\n      }\n      return values;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumericValues(NumericEntry).mjava","pathOld":"/dev/null","sourceNew":"  private LongValues getNumericValues(NumericEntry entry) throws IOException {\n    if (entry.bitsPerValue == 0) {\n      return new LongValues() {\n        @Override\n        public long get(long index) {\n          return entry.minValue;\n        }\n      };\n    } else {\n      final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n      final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n      if (entry.table != null) {\n        final long[] table = entry.table;\n        return new LongValues() {\n          @Override\n          public long get(long index) {\n            return table[(int) values.get(index)];\n          }\n        };\n      } else if (entry.gcd != 1) {\n        final long gcd = entry.gcd;\n        final long minValue = entry.minValue;\n        return new LongValues() {\n          @Override\n          public long get(long index) {\n            return values.get(index) * gcd + minValue;\n          }\n        };\n      } else if (entry.minValue != 0) {\n        final long minValue = entry.minValue;\n        return new LongValues() {\n          @Override\n          public long get(long index) {\n            return values.get(index) + minValue;\n          }\n        };\n      } else {\n        return values;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"740ee098a9980924f1de3e712c61e1bdd3869b9c","date":1481818674,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumericValues(NumericEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumericValues(NumericEntry).mjava","sourceNew":"  private LongValues getNumericValues(NumericEntry entry) throws IOException {\n    if (entry.bitsPerValue == 0) {\n      return new LongValues() {\n        @Override\n        public long get(long index) {\n          return entry.minValue;\n        }\n      };\n    } else {\n      final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n      if (entry.blockShift >= 0) {\n        final int shift = entry.blockShift;\n        final long mul = entry.gcd;\n        final long mask = (1L << shift) - 1;\n        return new LongValues() {\n          long block = -1;\n          long delta;\n          long offset;\n          long blockEndOffset;\n          LongValues values;\n\n          public long get(long index) {\n            final long block = index >>> shift;\n            if (this.block != block) {\n              assert block > this.block : \"Reading backwards is illegal: \" + this.block + \" < \" + block;\n              int bitsPerValue;\n              do {\n                offset = blockEndOffset;\n                try {\n                  bitsPerValue = slice.readByte(offset++);\n                  delta = slice.readLong(offset);\n                  offset += Long.BYTES;\n                  if (bitsPerValue == 0) {\n                    blockEndOffset = offset;\n                  } else {\n                    final int length = slice.readInt(offset);\n                    offset += Integer.BYTES;\n                    blockEndOffset = offset + length;\n                  }\n                } catch (IOException e) {\n                  throw new RuntimeException(e);\n                }\n                this.block ++;\n              } while (this.block != block);\n              values = bitsPerValue == 0 ? LongValues.ZEROES : DirectReader.getInstance(slice, bitsPerValue, offset);\n            }\n            return mul * values.get(index & mask) + delta;\n          }\n        };\n      } else {\n        final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n        if (entry.table != null) {\n          final long[] table = entry.table;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return table[(int) values.get(index)];\n            }\n          };\n        } else if (entry.gcd != 1) {\n          final long gcd = entry.gcd;\n          final long minValue = entry.minValue;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return values.get(index) * gcd + minValue;\n            }\n          };\n        } else if (entry.minValue != 0) {\n          final long minValue = entry.minValue;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return values.get(index) + minValue;\n            }\n          };\n        } else {\n          return values;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private LongValues getNumericValues(NumericEntry entry) throws IOException {\n    if (entry.bitsPerValue == 0) {\n      return new LongValues() {\n        @Override\n        public long get(long index) {\n          return entry.minValue;\n        }\n      };\n    } else {\n      final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n      final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n      if (entry.table != null) {\n        final long[] table = entry.table;\n        return new LongValues() {\n          @Override\n          public long get(long index) {\n            return table[(int) values.get(index)];\n          }\n        };\n      } else if (entry.gcd != 1) {\n        final long gcd = entry.gcd;\n        final long minValue = entry.minValue;\n        return new LongValues() {\n          @Override\n          public long get(long index) {\n            return values.get(index) * gcd + minValue;\n          }\n        };\n      } else if (entry.minValue != 0) {\n        final long minValue = entry.minValue;\n        return new LongValues() {\n          @Override\n          public long get(long index) {\n            return values.get(index) + minValue;\n          }\n        };\n      } else {\n        return values;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumericValues(NumericEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumericValues(NumericEntry).mjava","sourceNew":"  private LongValues getNumericValues(NumericEntry entry) throws IOException {\n    if (entry.bitsPerValue == 0) {\n      return new LongValues() {\n        @Override\n        public long get(long index) {\n          return entry.minValue;\n        }\n      };\n    } else {\n      final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n      if (entry.blockShift >= 0) {\n        final int shift = entry.blockShift;\n        final long mul = entry.gcd;\n        final long mask = (1L << shift) - 1;\n        return new LongValues() {\n          long block = -1;\n          long delta;\n          long offset;\n          long blockEndOffset;\n          LongValues values;\n\n          public long get(long index) {\n            final long block = index >>> shift;\n            if (this.block != block) {\n              assert block > this.block : \"Reading backwards is illegal: \" + this.block + \" < \" + block;\n              int bitsPerValue;\n              do {\n                offset = blockEndOffset;\n                try {\n                  bitsPerValue = slice.readByte(offset++);\n                  delta = slice.readLong(offset);\n                  offset += Long.BYTES;\n                  if (bitsPerValue == 0) {\n                    blockEndOffset = offset;\n                  } else {\n                    final int length = slice.readInt(offset);\n                    offset += Integer.BYTES;\n                    blockEndOffset = offset + length;\n                  }\n                } catch (IOException e) {\n                  throw new RuntimeException(e);\n                }\n                this.block ++;\n              } while (this.block != block);\n              values = bitsPerValue == 0 ? LongValues.ZEROES : DirectReader.getInstance(slice, bitsPerValue, offset);\n            }\n            return mul * values.get(index & mask) + delta;\n          }\n        };\n      } else {\n        final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n        if (entry.table != null) {\n          final long[] table = entry.table;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return table[(int) values.get(index)];\n            }\n          };\n        } else if (entry.gcd != 1) {\n          final long gcd = entry.gcd;\n          final long minValue = entry.minValue;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return values.get(index) * gcd + minValue;\n            }\n          };\n        } else if (entry.minValue != 0) {\n          final long minValue = entry.minValue;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return values.get(index) + minValue;\n            }\n          };\n        } else {\n          return values;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private LongValues getNumericValues(NumericEntry entry) throws IOException {\n    if (entry.bitsPerValue == 0) {\n      return new LongValues() {\n        @Override\n        public long get(long index) {\n          return entry.minValue;\n        }\n      };\n    } else {\n      final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n      final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n      if (entry.table != null) {\n        final long[] table = entry.table;\n        return new LongValues() {\n          @Override\n          public long get(long index) {\n            return table[(int) values.get(index)];\n          }\n        };\n      } else if (entry.gcd != 1) {\n        final long gcd = entry.gcd;\n        final long minValue = entry.minValue;\n        return new LongValues() {\n          @Override\n          public long get(long index) {\n            return values.get(index) * gcd + minValue;\n          }\n        };\n      } else if (entry.minValue != 0) {\n        final long minValue = entry.minValue;\n        return new LongValues() {\n          @Override\n          public long get(long index) {\n            return values.get(index) + minValue;\n          }\n        };\n      } else {\n        return values;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02d47321ea7c7780a0e0cb7a3676d109d9d62542","date":1543843794,"type":3,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumericValues(NumericEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumericValues(NumericEntry).mjava","sourceNew":"  private LongValues getNumericValues(NumericEntry entry) throws IOException {\n    if (entry.bitsPerValue == 0) {\n      return new LongValues() {\n        @Override\n        public long get(long index) {\n          return entry.minValue;\n        }\n      };\n    } else {\n      if (entry.blockShift >= 0) {\n        return new LongValues() {\n          final VaryingBPVReader vBPVReader = new VaryingBPVReader(entry);\n          @Override\n          public long get(long index) {\n            try {\n              return vBPVReader.getLongValue(index);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      } else {\n        final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n        final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n        if (entry.table != null) {\n          final long[] table = entry.table;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return table[(int) values.get(index)];\n            }\n          };\n        } else if (entry.gcd != 1) {\n          final long gcd = entry.gcd;\n          final long minValue = entry.minValue;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return values.get(index) * gcd + minValue;\n            }\n          };\n        } else if (entry.minValue != 0) {\n          final long minValue = entry.minValue;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return values.get(index) + minValue;\n            }\n          };\n        } else {\n          return values;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private LongValues getNumericValues(NumericEntry entry) throws IOException {\n    if (entry.bitsPerValue == 0) {\n      return new LongValues() {\n        @Override\n        public long get(long index) {\n          return entry.minValue;\n        }\n      };\n    } else {\n      final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n      if (entry.blockShift >= 0) {\n        final int shift = entry.blockShift;\n        final long mul = entry.gcd;\n        final long mask = (1L << shift) - 1;\n        return new LongValues() {\n          long block = -1;\n          long delta;\n          long offset;\n          long blockEndOffset;\n          LongValues values;\n\n          public long get(long index) {\n            final long block = index >>> shift;\n            if (this.block != block) {\n              assert block > this.block : \"Reading backwards is illegal: \" + this.block + \" < \" + block;\n              int bitsPerValue;\n              do {\n                offset = blockEndOffset;\n                try {\n                  bitsPerValue = slice.readByte(offset++);\n                  delta = slice.readLong(offset);\n                  offset += Long.BYTES;\n                  if (bitsPerValue == 0) {\n                    blockEndOffset = offset;\n                  } else {\n                    final int length = slice.readInt(offset);\n                    offset += Integer.BYTES;\n                    blockEndOffset = offset + length;\n                  }\n                } catch (IOException e) {\n                  throw new RuntimeException(e);\n                }\n                this.block ++;\n              } while (this.block != block);\n              values = bitsPerValue == 0 ? LongValues.ZEROES : DirectReader.getInstance(slice, bitsPerValue, offset);\n            }\n            return mul * values.get(index & mask) + delta;\n          }\n        };\n      } else {\n        final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n        if (entry.table != null) {\n          final long[] table = entry.table;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return table[(int) values.get(index)];\n            }\n          };\n        } else if (entry.gcd != 1) {\n          final long gcd = entry.gcd;\n          final long minValue = entry.minValue;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return values.get(index) * gcd + minValue;\n            }\n          };\n        } else if (entry.minValue != 0) {\n          final long minValue = entry.minValue;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return values.get(index) + minValue;\n            }\n          };\n        } else {\n          return values;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e86b9927b3acb1937be9daf7b71fe0733edc2206","date":1544534047,"type":3,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumericValues(NumericEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumericValues(NumericEntry).mjava","sourceNew":"  private LongValues getNumericValues(NumericEntry entry) throws IOException {\n    if (entry.bitsPerValue == 0) {\n      return new LongValues() {\n        @Override\n        public long get(long index) {\n          return entry.minValue;\n        }\n      };\n    } else {\n      final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n      if (entry.blockShift >= 0) {\n        final int shift = entry.blockShift;\n        final long mul = entry.gcd;\n        final long mask = (1L << shift) - 1;\n        return new LongValues() {\n          long block = -1;\n          long delta;\n          long offset;\n          long blockEndOffset;\n          LongValues values;\n\n          public long get(long index) {\n            final long block = index >>> shift;\n            if (this.block != block) {\n              assert block > this.block : \"Reading backwards is illegal: \" + this.block + \" < \" + block;\n              int bitsPerValue;\n              do {\n                offset = blockEndOffset;\n                try {\n                  bitsPerValue = slice.readByte(offset++);\n                  delta = slice.readLong(offset);\n                  offset += Long.BYTES;\n                  if (bitsPerValue == 0) {\n                    blockEndOffset = offset;\n                  } else {\n                    final int length = slice.readInt(offset);\n                    offset += Integer.BYTES;\n                    blockEndOffset = offset + length;\n                  }\n                } catch (IOException e) {\n                  throw new RuntimeException(e);\n                }\n                this.block ++;\n              } while (this.block != block);\n              values = bitsPerValue == 0 ? LongValues.ZEROES : DirectReader.getInstance(slice, bitsPerValue, offset);\n            }\n            return mul * values.get(index & mask) + delta;\n          }\n        };\n      } else {\n        final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n        if (entry.table != null) {\n          final long[] table = entry.table;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return table[(int) values.get(index)];\n            }\n          };\n        } else if (entry.gcd != 1) {\n          final long gcd = entry.gcd;\n          final long minValue = entry.minValue;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return values.get(index) * gcd + minValue;\n            }\n          };\n        } else if (entry.minValue != 0) {\n          final long minValue = entry.minValue;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return values.get(index) + minValue;\n            }\n          };\n        } else {\n          return values;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private LongValues getNumericValues(NumericEntry entry) throws IOException {\n    if (entry.bitsPerValue == 0) {\n      return new LongValues() {\n        @Override\n        public long get(long index) {\n          return entry.minValue;\n        }\n      };\n    } else {\n      if (entry.blockShift >= 0) {\n        return new LongValues() {\n          final VaryingBPVReader vBPVReader = new VaryingBPVReader(entry);\n          @Override\n          public long get(long index) {\n            try {\n              return vBPVReader.getLongValue(index);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      } else {\n        final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n        final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n        if (entry.table != null) {\n          final long[] table = entry.table;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return table[(int) values.get(index)];\n            }\n          };\n        } else if (entry.gcd != 1) {\n          final long gcd = entry.gcd;\n          final long minValue = entry.minValue;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return values.get(index) * gcd + minValue;\n            }\n          };\n        } else if (entry.minValue != 0) {\n          final long minValue = entry.minValue;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return values.get(index) + minValue;\n            }\n          };\n        } else {\n          return values;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd70c9571310639a77f0123aea0db41077d9bb6","date":1544538617,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumericValues(NumericEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumericValues(NumericEntry).mjava","sourceNew":"  private LongValues getNumericValues(NumericEntry entry) throws IOException {\n    if (entry.bitsPerValue == 0) {\n      return new LongValues() {\n        @Override\n        public long get(long index) {\n          return entry.minValue;\n        }\n      };\n    } else {\n      final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n      if (entry.blockShift >= 0) {\n        final int shift = entry.blockShift;\n        final long mul = entry.gcd;\n        final long mask = (1L << shift) - 1;\n        return new LongValues() {\n          long block = -1;\n          long delta;\n          long offset;\n          long blockEndOffset;\n          LongValues values;\n\n          public long get(long index) {\n            final long block = index >>> shift;\n            if (this.block != block) {\n              assert block > this.block : \"Reading backwards is illegal: \" + this.block + \" < \" + block;\n              int bitsPerValue;\n              do {\n                offset = blockEndOffset;\n                try {\n                  bitsPerValue = slice.readByte(offset++);\n                  delta = slice.readLong(offset);\n                  offset += Long.BYTES;\n                  if (bitsPerValue == 0) {\n                    blockEndOffset = offset;\n                  } else {\n                    final int length = slice.readInt(offset);\n                    offset += Integer.BYTES;\n                    blockEndOffset = offset + length;\n                  }\n                } catch (IOException e) {\n                  throw new RuntimeException(e);\n                }\n                this.block ++;\n              } while (this.block != block);\n              values = bitsPerValue == 0 ? LongValues.ZEROES : DirectReader.getInstance(slice, bitsPerValue, offset);\n            }\n            return mul * values.get(index & mask) + delta;\n          }\n        };\n      } else {\n        final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n        if (entry.table != null) {\n          final long[] table = entry.table;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return table[(int) values.get(index)];\n            }\n          };\n        } else if (entry.gcd != 1) {\n          final long gcd = entry.gcd;\n          final long minValue = entry.minValue;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return values.get(index) * gcd + minValue;\n            }\n          };\n        } else if (entry.minValue != 0) {\n          final long minValue = entry.minValue;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return values.get(index) + minValue;\n            }\n          };\n        } else {\n          return values;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private LongValues getNumericValues(NumericEntry entry) throws IOException {\n    if (entry.bitsPerValue == 0) {\n      return new LongValues() {\n        @Override\n        public long get(long index) {\n          return entry.minValue;\n        }\n      };\n    } else {\n      if (entry.blockShift >= 0) {\n        return new LongValues() {\n          final VaryingBPVReader vBPVReader = new VaryingBPVReader(entry);\n          @Override\n          public long get(long index) {\n            try {\n              return vBPVReader.getLongValue(index);\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      } else {\n        final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n        final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n        if (entry.table != null) {\n          final long[] table = entry.table;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return table[(int) values.get(index)];\n            }\n          };\n        } else if (entry.gcd != 1) {\n          final long gcd = entry.gcd;\n          final long minValue = entry.minValue;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return values.get(index) * gcd + minValue;\n            }\n          };\n        } else if (entry.minValue != 0) {\n          final long minValue = entry.minValue;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return values.get(index) + minValue;\n            }\n          };\n        } else {\n          return values;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":5,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumericValues(NumericEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumericValues(NumericEntry).mjava","sourceNew":"  private LongValues getNumericValues(NumericEntry entry) throws IOException {\n    if (entry.bitsPerValue == 0) {\n      return new LongValues() {\n        @Override\n        public long get(long index) {\n          return entry.minValue;\n        }\n      };\n    } else {\n      final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n      if (entry.blockShift >= 0) {\n        final int shift = entry.blockShift;\n        final long mul = entry.gcd;\n        final long mask = (1L << shift) - 1;\n        return new LongValues() {\n          long block = -1;\n          long delta;\n          long offset;\n          long blockEndOffset;\n          LongValues values;\n\n          public long get(long index) {\n            final long block = index >>> shift;\n            if (this.block != block) {\n              assert block > this.block : \"Reading backwards is illegal: \" + this.block + \" < \" + block;\n              int bitsPerValue;\n              do {\n                offset = blockEndOffset;\n                try {\n                  bitsPerValue = slice.readByte(offset++);\n                  delta = slice.readLong(offset);\n                  offset += Long.BYTES;\n                  if (bitsPerValue == 0) {\n                    blockEndOffset = offset;\n                  } else {\n                    final int length = slice.readInt(offset);\n                    offset += Integer.BYTES;\n                    blockEndOffset = offset + length;\n                  }\n                } catch (IOException e) {\n                  throw new RuntimeException(e);\n                }\n                this.block ++;\n              } while (this.block != block);\n              values = bitsPerValue == 0 ? LongValues.ZEROES : DirectReader.getInstance(slice, bitsPerValue, offset);\n            }\n            return mul * values.get(index & mask) + delta;\n          }\n        };\n      } else {\n        final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n        if (entry.table != null) {\n          final long[] table = entry.table;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return table[(int) values.get(index)];\n            }\n          };\n        } else if (entry.gcd != 1) {\n          final long gcd = entry.gcd;\n          final long minValue = entry.minValue;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return values.get(index) * gcd + minValue;\n            }\n          };\n        } else if (entry.minValue != 0) {\n          final long minValue = entry.minValue;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return values.get(index) + minValue;\n            }\n          };\n        } else {\n          return values;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private LongValues getNumericValues(NumericEntry entry) throws IOException {\n    if (entry.bitsPerValue == 0) {\n      return new LongValues() {\n        @Override\n        public long get(long index) {\n          return entry.minValue;\n        }\n      };\n    } else {\n      final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n      if (entry.blockShift >= 0) {\n        final int shift = entry.blockShift;\n        final long mul = entry.gcd;\n        final long mask = (1L << shift) - 1;\n        return new LongValues() {\n          long block = -1;\n          long delta;\n          long offset;\n          long blockEndOffset;\n          LongValues values;\n\n          public long get(long index) {\n            final long block = index >>> shift;\n            if (this.block != block) {\n              assert block > this.block : \"Reading backwards is illegal: \" + this.block + \" < \" + block;\n              int bitsPerValue;\n              do {\n                offset = blockEndOffset;\n                try {\n                  bitsPerValue = slice.readByte(offset++);\n                  delta = slice.readLong(offset);\n                  offset += Long.BYTES;\n                  if (bitsPerValue == 0) {\n                    blockEndOffset = offset;\n                  } else {\n                    final int length = slice.readInt(offset);\n                    offset += Integer.BYTES;\n                    blockEndOffset = offset + length;\n                  }\n                } catch (IOException e) {\n                  throw new RuntimeException(e);\n                }\n                this.block ++;\n              } while (this.block != block);\n              values = bitsPerValue == 0 ? LongValues.ZEROES : DirectReader.getInstance(slice, bitsPerValue, offset);\n            }\n            return mul * values.get(index & mask) + delta;\n          }\n        };\n      } else {\n        final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n        if (entry.table != null) {\n          final long[] table = entry.table;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return table[(int) values.get(index)];\n            }\n          };\n        } else if (entry.gcd != 1) {\n          final long gcd = entry.gcd;\n          final long minValue = entry.minValue;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return values.get(index) * gcd + minValue;\n            }\n          };\n        } else if (entry.minValue != 0) {\n          final long minValue = entry.minValue;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return values.get(index) + minValue;\n            }\n          };\n        } else {\n          return values;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":5,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumericValues(NumericEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumericValues(NumericEntry).mjava","sourceNew":"  private LongValues getNumericValues(NumericEntry entry) throws IOException {\n    if (entry.bitsPerValue == 0) {\n      return new LongValues() {\n        @Override\n        public long get(long index) {\n          return entry.minValue;\n        }\n      };\n    } else {\n      final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n      if (entry.blockShift >= 0) {\n        final int shift = entry.blockShift;\n        final long mul = entry.gcd;\n        final long mask = (1L << shift) - 1;\n        return new LongValues() {\n          long block = -1;\n          long delta;\n          long offset;\n          long blockEndOffset;\n          LongValues values;\n\n          public long get(long index) {\n            final long block = index >>> shift;\n            if (this.block != block) {\n              assert block > this.block : \"Reading backwards is illegal: \" + this.block + \" < \" + block;\n              int bitsPerValue;\n              do {\n                offset = blockEndOffset;\n                try {\n                  bitsPerValue = slice.readByte(offset++);\n                  delta = slice.readLong(offset);\n                  offset += Long.BYTES;\n                  if (bitsPerValue == 0) {\n                    blockEndOffset = offset;\n                  } else {\n                    final int length = slice.readInt(offset);\n                    offset += Integer.BYTES;\n                    blockEndOffset = offset + length;\n                  }\n                } catch (IOException e) {\n                  throw new RuntimeException(e);\n                }\n                this.block ++;\n              } while (this.block != block);\n              values = bitsPerValue == 0 ? LongValues.ZEROES : DirectReader.getInstance(slice, bitsPerValue, offset);\n            }\n            return mul * values.get(index & mask) + delta;\n          }\n        };\n      } else {\n        final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n        if (entry.table != null) {\n          final long[] table = entry.table;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return table[(int) values.get(index)];\n            }\n          };\n        } else if (entry.gcd != 1) {\n          final long gcd = entry.gcd;\n          final long minValue = entry.minValue;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return values.get(index) * gcd + minValue;\n            }\n          };\n        } else if (entry.minValue != 0) {\n          final long minValue = entry.minValue;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return values.get(index) + minValue;\n            }\n          };\n        } else {\n          return values;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private LongValues getNumericValues(NumericEntry entry) throws IOException {\n    if (entry.bitsPerValue == 0) {\n      return new LongValues() {\n        @Override\n        public long get(long index) {\n          return entry.minValue;\n        }\n      };\n    } else {\n      final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n      if (entry.blockShift >= 0) {\n        final int shift = entry.blockShift;\n        final long mul = entry.gcd;\n        final long mask = (1L << shift) - 1;\n        return new LongValues() {\n          long block = -1;\n          long delta;\n          long offset;\n          long blockEndOffset;\n          LongValues values;\n\n          public long get(long index) {\n            final long block = index >>> shift;\n            if (this.block != block) {\n              assert block > this.block : \"Reading backwards is illegal: \" + this.block + \" < \" + block;\n              int bitsPerValue;\n              do {\n                offset = blockEndOffset;\n                try {\n                  bitsPerValue = slice.readByte(offset++);\n                  delta = slice.readLong(offset);\n                  offset += Long.BYTES;\n                  if (bitsPerValue == 0) {\n                    blockEndOffset = offset;\n                  } else {\n                    final int length = slice.readInt(offset);\n                    offset += Integer.BYTES;\n                    blockEndOffset = offset + length;\n                  }\n                } catch (IOException e) {\n                  throw new RuntimeException(e);\n                }\n                this.block ++;\n              } while (this.block != block);\n              values = bitsPerValue == 0 ? LongValues.ZEROES : DirectReader.getInstance(slice, bitsPerValue, offset);\n            }\n            return mul * values.get(index & mask) + delta;\n          }\n        };\n      } else {\n        final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n        if (entry.table != null) {\n          final long[] table = entry.table;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return table[(int) values.get(index)];\n            }\n          };\n        } else if (entry.gcd != 1) {\n          final long gcd = entry.gcd;\n          final long minValue = entry.minValue;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return values.get(index) * gcd + minValue;\n            }\n          };\n        } else if (entry.minValue != 0) {\n          final long minValue = entry.minValue;\n          return new LongValues() {\n            @Override\n            public long get(long index) {\n              return values.get(index) + minValue;\n            }\n          };\n        } else {\n          return values;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["cfd70c9571310639a77f0123aea0db41077d9bb6"],"23e44daeaa8b89694d10df5999956c8e14a7dd09":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cfd70c9571310639a77f0123aea0db41077d9bb6":["02d47321ea7c7780a0e0cb7a3676d109d9d62542","e86b9927b3acb1937be9daf7b71fe0733edc2206"],"6b0e5e197ada9468ae70e471a00b93929c7558e5":["23e44daeaa8b89694d10df5999956c8e14a7dd09"],"740ee098a9980924f1de3e712c61e1bdd3869b9c":["f177ec0246f5d1788b56d8f5d5c66cb38d66bcef"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f177ec0246f5d1788b56d8f5d5c66cb38d66bcef"],"e86b9927b3acb1937be9daf7b71fe0733edc2206":["02d47321ea7c7780a0e0cb7a3676d109d9d62542"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["cfd70c9571310639a77f0123aea0db41077d9bb6","03e17b020972a0d6e8d6823f545571a66646a167"],"02d47321ea7c7780a0e0cb7a3676d109d9d62542":["740ee098a9980924f1de3e712c61e1bdd3869b9c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","740ee098a9980924f1de3e712c61e1bdd3869b9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03e17b020972a0d6e8d6823f545571a66646a167"],"f177ec0246f5d1788b56d8f5d5c66cb38d66bcef":["23e44daeaa8b89694d10df5999956c8e14a7dd09","6b0e5e197ada9468ae70e471a00b93929c7558e5"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"23e44daeaa8b89694d10df5999956c8e14a7dd09":["6b0e5e197ada9468ae70e471a00b93929c7558e5","f177ec0246f5d1788b56d8f5d5c66cb38d66bcef"],"cfd70c9571310639a77f0123aea0db41077d9bb6":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836"],"6b0e5e197ada9468ae70e471a00b93929c7558e5":["f177ec0246f5d1788b56d8f5d5c66cb38d66bcef"],"740ee098a9980924f1de3e712c61e1bdd3869b9c":["02d47321ea7c7780a0e0cb7a3676d109d9d62542","9856095f7afb5a607bf5e65077615ed91273508c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9856095f7afb5a607bf5e65077615ed91273508c"],"e86b9927b3acb1937be9daf7b71fe0733edc2206":["cfd70c9571310639a77f0123aea0db41077d9bb6"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["23e44daeaa8b89694d10df5999956c8e14a7dd09","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"02d47321ea7c7780a0e0cb7a3676d109d9d62542":["cfd70c9571310639a77f0123aea0db41077d9bb6","e86b9927b3acb1937be9daf7b71fe0733edc2206"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"f177ec0246f5d1788b56d8f5d5c66cb38d66bcef":["740ee098a9980924f1de3e712c61e1bdd3869b9c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}