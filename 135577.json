{"path":"backwards/src/test/org/apache/lucene/search/TestTermRangeQuery#testInclusiveLowerNull().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/TestTermRangeQuery#testInclusiveLowerNull().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-38\n  public void testInclusiveLowerNull() throws Exception {\n    //http://issues.apache.org/jira/browse/LUCENE-38\n    Analyzer analyzer = new SingleCharAnalyzer();\n    Query query = new TermRangeQuery(\"content\", null, \"C\", true, true);\n    initializeIndex(new String[]{\"A\", \"B\", \"\",\"C\", \"D\"}, analyzer);\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    int numHits = searcher.search(query, null, 1000).totalHits;\n    // When Lucene-38 is fixed, use the assert on the next line:\n    assertEquals(\"A,B,<empty string>,C,D => A,B,<empty string>,C in range\", 4, numHits);\n    // until Lucene-38 is fixed, use this assert\n    //assertEquals(\"A,B,<empty string>,C,D => A,B,<empty string>,C in range\", 3, hits.length());\n    searcher.close();\n    initializeIndex(new String[]{\"A\", \"B\", \"\", \"D\"}, analyzer);\n    searcher = new IndexSearcher(dir, true);\n    numHits = searcher.search(query, null, 1000).totalHits;\n    // When Lucene-38 is fixed, use the assert on the next line:\n    assertEquals(\"A,B,<empty string>,D - A, B and <empty string> in range\", 3, numHits);\n    // until Lucene-38 is fixed, use this assert\n    //assertEquals(\"A,B,<empty string>,D => A, B and <empty string> in range\", 2, hits.length());\n    searcher.close();\n    addDoc(\"C\");\n    searcher = new IndexSearcher(dir, true);\n    numHits = searcher.search(query, null, 1000).totalHits;\n    // When Lucene-38 is fixed, use the assert on the next line:\n    assertEquals(\"C added => A,B,<empty string>,C in range\", 4, numHits);\n    // until Lucene-38 is fixed, use this assert\n    //assertEquals(\"C added => A,B,<empty string>,C in range\", 3, hits.length());\n     searcher.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestTermRangeQuery#testInclusiveLowerNull().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestTermRangeQuery#testInclusiveLowerNull().mjava","sourceNew":"  // LUCENE-38\n  public void testInclusiveLowerNull() throws Exception {\n    //http://issues.apache.org/jira/browse/LUCENE-38\n    Analyzer analyzer = new SingleCharAnalyzer();\n    Query query = new TermRangeQuery(\"content\", null, \"C\", true, true);\n    initializeIndex(new String[]{\"A\", \"B\", \"\",\"C\", \"D\"}, analyzer);\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    int numHits = searcher.search(query, null, 1000).totalHits;\n    // When Lucene-38 is fixed, use the assert on the next line:\n    assertEquals(\"A,B,<empty string>,C,D => A,B,<empty string>,C in range\", 4, numHits);\n    // until Lucene-38 is fixed, use this assert\n    //assertEquals(\"A,B,<empty string>,C,D => A,B,<empty string>,C in range\", 3, hits.length());\n    searcher.close();\n    initializeIndex(new String[]{\"A\", \"B\", \"\", \"D\"}, analyzer);\n    searcher = new IndexSearcher(dir, true);\n    numHits = searcher.search(query, null, 1000).totalHits;\n    // When Lucene-38 is fixed, use the assert on the next line:\n    assertEquals(\"A,B,<empty string>,D - A, B and <empty string> in range\", 3, numHits);\n    // until Lucene-38 is fixed, use this assert\n    //assertEquals(\"A,B,<empty string>,D => A, B and <empty string> in range\", 2, hits.length());\n    searcher.close();\n    addDoc(\"C\");\n    searcher = new IndexSearcher(dir, true);\n    numHits = searcher.search(query, null, 1000).totalHits;\n    // When Lucene-38 is fixed, use the assert on the next line:\n    assertEquals(\"C added => A,B,<empty string>,C in range\", 4, numHits);\n    // until Lucene-38 is fixed, use this assert\n    //assertEquals(\"C added => A,B,<empty string>,C in range\", 3, hits.length());\n     searcher.close();\n  }\n\n","sourceOld":"  // LUCENE-38\n  public void testInclusiveLowerNull() throws Exception {\n    //http://issues.apache.org/jira/browse/LUCENE-38\n    Analyzer analyzer = new SingleCharAnalyzer();\n    Query query = new TermRangeQuery(\"content\", null, \"C\", true, true);\n    initializeIndex(new String[]{\"A\", \"B\", \"\",\"C\", \"D\"}, analyzer);\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    int numHits = searcher.search(query, null, 1000).totalHits;\n    // When Lucene-38 is fixed, use the assert on the next line:\n    assertEquals(\"A,B,<empty string>,C,D => A,B,<empty string>,C in range\", 4, numHits);\n    // until Lucene-38 is fixed, use this assert\n    //assertEquals(\"A,B,<empty string>,C,D => A,B,<empty string>,C in range\", 3, hits.length());\n    searcher.close();\n    initializeIndex(new String[]{\"A\", \"B\", \"\", \"D\"}, analyzer);\n    searcher = new IndexSearcher(dir, true);\n    numHits = searcher.search(query, null, 1000).totalHits;\n    // When Lucene-38 is fixed, use the assert on the next line:\n    assertEquals(\"A,B,<empty string>,D - A, B and <empty string> in range\", 3, numHits);\n    // until Lucene-38 is fixed, use this assert\n    //assertEquals(\"A,B,<empty string>,D => A, B and <empty string> in range\", 2, hits.length());\n    searcher.close();\n    addDoc(\"C\");\n    searcher = new IndexSearcher(dir, true);\n    numHits = searcher.search(query, null, 1000).totalHits;\n    // When Lucene-38 is fixed, use the assert on the next line:\n    assertEquals(\"C added => A,B,<empty string>,C in range\", 4, numHits);\n    // until Lucene-38 is fixed, use this assert\n    //assertEquals(\"C added => A,B,<empty string>,C in range\", 3, hits.length());\n     searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}