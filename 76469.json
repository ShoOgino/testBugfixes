{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene80/TestIndexedDISI#testEmptyBlocks().mjava","commits":[{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":0,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene80/TestIndexedDISI#testEmptyBlocks().mjava","pathOld":"/dev/null","sourceNew":"  // EMPTY blocks are special with regard to jumps as they have size 0\n  public void testEmptyBlocks() throws IOException {\n    final int B = 65536;\n    int maxDoc = B*11;\n    FixedBitSet set = new FixedBitSet(maxDoc);\n    // block 0: EMPTY\n    set.set(B+5); // block 1: SPARSE\n    // block 2: EMPTY\n    // block 3: EMPTY\n    set.set(B*4+5); // block 4: SPARSE\n\n    for (int i = 0 ; i < B ; i++) {\n      set.set(B*6+i); // block 6: ALL\n    }\n    for (int i = 0 ; i < B ; i+=3) {\n      set.set(B*7+i); // block 7: DENSE\n    }\n    for (int i = 0 ; i < B ; i++) {\n      if (i != 32768) {\n        set.set(B*8 + i); // block 8: DENSE (all-1)\n      }\n    }\n    // block 9-11: EMPTY\n  \n    try (Directory dir = newDirectory()) {\n      doTestAllSingleJump(set, dir);\n    }\n\n    // Change the first block to DENSE to see if jump-tables sets to position 0\n    set.set(0);\n    try (Directory dir = newDirectory()) {\n      doTestAllSingleJump(set, dir);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene80/TestIndexedDISI#testEmptyBlocks().mjava","pathOld":"/dev/null","sourceNew":"  // EMPTY blocks are special with regard to jumps as they have size 0\n  public void testEmptyBlocks() throws IOException {\n    final int B = 65536;\n    int maxDoc = B*11;\n    FixedBitSet set = new FixedBitSet(maxDoc);\n    // block 0: EMPTY\n    set.set(B+5); // block 1: SPARSE\n    // block 2: EMPTY\n    // block 3: EMPTY\n    set.set(B*4+5); // block 4: SPARSE\n\n    for (int i = 0 ; i < B ; i++) {\n      set.set(B*6+i); // block 6: ALL\n    }\n    for (int i = 0 ; i < B ; i+=3) {\n      set.set(B*7+i); // block 7: DENSE\n    }\n    for (int i = 0 ; i < B ; i++) {\n      if (i != 32768) {\n        set.set(B*8 + i); // block 8: DENSE (all-1)\n      }\n    }\n    // block 9-11: EMPTY\n  \n    try (Directory dir = newDirectory()) {\n      doTestAllSingleJump(set, dir);\n    }\n\n    // Change the first block to DENSE to see if jump-tables sets to position 0\n    set.set(0);\n    try (Directory dir = newDirectory()) {\n      doTestAllSingleJump(set, dir);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","date":1579652839,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene80/TestIndexedDISI#testEmptyBlocks().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene80/TestIndexedDISI#testEmptyBlocks().mjava","sourceNew":"  // EMPTY blocks are special with regard to jumps as they have size 0\n  @Nightly\n  public void testEmptyBlocks() throws IOException {\n    final int B = 65536;\n    int maxDoc = B*11;\n    FixedBitSet set = new FixedBitSet(maxDoc);\n    // block 0: EMPTY\n    set.set(B+5); // block 1: SPARSE\n    // block 2: EMPTY\n    // block 3: EMPTY\n    set.set(B*4+5); // block 4: SPARSE\n\n    for (int i = 0 ; i < B ; i++) {\n      set.set(B*6+i); // block 6: ALL\n    }\n    for (int i = 0 ; i < B ; i+=3) {\n      set.set(B*7+i); // block 7: DENSE\n    }\n    for (int i = 0 ; i < B ; i++) {\n      if (i != 32768) {\n        set.set(B*8 + i); // block 8: DENSE (all-1)\n      }\n    }\n    // block 9-11: EMPTY\n  \n    try (Directory dir = newDirectory()) {\n      doTestAllSingleJump(set, dir);\n    }\n\n    // Change the first block to DENSE to see if jump-tables sets to position 0\n    set.set(0);\n    try (Directory dir = newDirectory()) {\n      doTestAllSingleJump(set, dir);\n    }\n  }\n\n","sourceOld":"  // EMPTY blocks are special with regard to jumps as they have size 0\n  public void testEmptyBlocks() throws IOException {\n    final int B = 65536;\n    int maxDoc = B*11;\n    FixedBitSet set = new FixedBitSet(maxDoc);\n    // block 0: EMPTY\n    set.set(B+5); // block 1: SPARSE\n    // block 2: EMPTY\n    // block 3: EMPTY\n    set.set(B*4+5); // block 4: SPARSE\n\n    for (int i = 0 ; i < B ; i++) {\n      set.set(B*6+i); // block 6: ALL\n    }\n    for (int i = 0 ; i < B ; i+=3) {\n      set.set(B*7+i); // block 7: DENSE\n    }\n    for (int i = 0 ; i < B ; i++) {\n      if (i != 32768) {\n        set.set(B*8 + i); // block 8: DENSE (all-1)\n      }\n    }\n    // block 9-11: EMPTY\n  \n    try (Directory dir = newDirectory()) {\n      doTestAllSingleJump(set, dir);\n    }\n\n    // Change the first block to DENSE to see if jump-tables sets to position 0\n    set.set(0);\n    try (Directory dir = newDirectory()) {\n      doTestAllSingleJump(set, dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b","date":1583461779,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene80/TestIndexedDISI#testEmptyBlocks().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene80/TestIndexedDISI#testEmptyBlocks().mjava","sourceNew":"  // EMPTY blocks are special with regard to jumps as they have size 0\n  @Nightly\n  public void testEmptyBlocks() throws IOException {\n    final int B = 65536;\n    int maxDoc = B*11;\n    BitSet set = new SparseFixedBitSet(maxDoc);\n    // block 0: EMPTY\n    set.set(B+5); // block 1: SPARSE\n    // block 2: EMPTY\n    // block 3: EMPTY\n    set.set(B*4+5); // block 4: SPARSE\n\n    for (int i = 0 ; i < B ; i++) {\n      set.set(B*6+i); // block 6: ALL\n    }\n    for (int i = 0 ; i < B ; i+=3) {\n      set.set(B*7+i); // block 7: DENSE\n    }\n    for (int i = 0 ; i < B ; i++) {\n      if (i != 32768) {\n        set.set(B*8 + i); // block 8: DENSE (all-1)\n      }\n    }\n    // block 9-11: EMPTY\n  \n    try (Directory dir = newDirectory()) {\n      doTestAllSingleJump(set, dir);\n    }\n\n    // Change the first block to DENSE to see if jump-tables sets to position 0\n    set.set(0);\n    try (Directory dir = newDirectory()) {\n      doTestAllSingleJump(set, dir);\n    }\n  }\n\n","sourceOld":"  // EMPTY blocks are special with regard to jumps as they have size 0\n  @Nightly\n  public void testEmptyBlocks() throws IOException {\n    final int B = 65536;\n    int maxDoc = B*11;\n    FixedBitSet set = new FixedBitSet(maxDoc);\n    // block 0: EMPTY\n    set.set(B+5); // block 1: SPARSE\n    // block 2: EMPTY\n    // block 3: EMPTY\n    set.set(B*4+5); // block 4: SPARSE\n\n    for (int i = 0 ; i < B ; i++) {\n      set.set(B*6+i); // block 6: ALL\n    }\n    for (int i = 0 ; i < B ; i+=3) {\n      set.set(B*7+i); // block 7: DENSE\n    }\n    for (int i = 0 ; i < B ; i++) {\n      if (i != 32768) {\n        set.set(B*8 + i); // block 8: DENSE (all-1)\n      }\n    }\n    // block 9-11: EMPTY\n  \n    try (Directory dir = newDirectory()) {\n      doTestAllSingleJump(set, dir);\n    }\n\n    // Change the first block to DENSE to see if jump-tables sets to position 0\n    set.set(0);\n    try (Directory dir = newDirectory()) {\n      doTestAllSingleJump(set, dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["03e17b020972a0d6e8d6823f545571a66646a167"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","03e17b020972a0d6e8d6823f545571a66646a167"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5acb8730dbbbb0f88bb8db80769aa6e9b29d817b"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","c89f1ef80a9432f4eabaeda9a1e135cd72e60836"],"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["5acb8730dbbbb0f88bb8db80769aa6e9b29d817b"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836"],"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}