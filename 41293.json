{"path":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#matches(LeafReaderContext,int).mjava","commits":[{"id":"657704b225b01c6ff4bada5b6667f1f60aaaad0f","date":1523436207,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#matches(LeafReaderContext,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Matches matches(LeafReaderContext context, int doc) throws IOException {\n      TermsEnum te = getTermsEnum(context);\n      if (te == null) {\n        return null;\n      }\n      if (context.reader().terms(term.field()).hasPositions() == false) {\n        return super.matches(context, doc);\n      }\n      return Matches.forField(term.field(), () -> {\n        PostingsEnum pe = te.postings(null, PostingsEnum.OFFSETS);\n        if (pe.advance(doc) != doc) {\n          return null;\n        }\n        return new TermMatchesIterator(term.bytes(), pe);\n      });\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#matches(LeafReaderContext,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Matches matches(LeafReaderContext context, int doc) throws IOException {\n      TermsEnum te = getTermsEnum(context);\n      if (te == null) {\n        return null;\n      }\n      if (context.reader().terms(term.field()).hasPositions() == false) {\n        return super.matches(context, doc);\n      }\n      return Matches.forField(term.field(), () -> {\n        PostingsEnum pe = te.postings(null, PostingsEnum.OFFSETS);\n        if (pe.advance(doc) != doc) {\n          return null;\n        }\n        return new TermMatchesIterator(term.bytes(), pe);\n      });\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ffb7b0a1201e65140f72d01a08b2bc34b0cfc364","date":1524498677,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#matches(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#matches(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Matches matches(LeafReaderContext context, int doc) throws IOException {\n      TermsEnum te = getTermsEnum(context);\n      if (te == null) {\n        return null;\n      }\n      if (context.reader().terms(term.field()).hasPositions() == false) {\n        return super.matches(context, doc);\n      }\n      return Matches.forField(term.field(), () -> {\n        PostingsEnum pe = te.postings(null, PostingsEnum.OFFSETS);\n        if (pe.advance(doc) != doc) {\n          return null;\n        }\n        return new TermMatchesIterator(pe);\n      });\n    }\n\n","sourceOld":"    @Override\n    public Matches matches(LeafReaderContext context, int doc) throws IOException {\n      TermsEnum te = getTermsEnum(context);\n      if (te == null) {\n        return null;\n      }\n      if (context.reader().terms(term.field()).hasPositions() == false) {\n        return super.matches(context, doc);\n      }\n      return Matches.forField(term.field(), () -> {\n        PostingsEnum pe = te.postings(null, PostingsEnum.OFFSETS);\n        if (pe.advance(doc) != doc) {\n          return null;\n        }\n        return new TermMatchesIterator(term.bytes(), pe);\n      });\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41ebc07bccf12a902ca6a0077910d18ee38b695f","date":1532336521,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#matches(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#matches(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Matches matches(LeafReaderContext context, int doc) throws IOException {\n      TermsEnum te = getTermsEnum(context);\n      if (te == null) {\n        return null;\n      }\n      if (context.reader().terms(term.field()).hasPositions() == false) {\n        return super.matches(context, doc);\n      }\n      return Matches.forField(term.field(), () -> {\n        PostingsEnum pe = te.postings(null, PostingsEnum.OFFSETS);\n        if (pe.advance(doc) != doc) {\n          return null;\n        }\n        return new TermMatchesIterator(getQuery(), pe);\n      });\n    }\n\n","sourceOld":"    @Override\n    public Matches matches(LeafReaderContext context, int doc) throws IOException {\n      TermsEnum te = getTermsEnum(context);\n      if (te == null) {\n        return null;\n      }\n      if (context.reader().terms(term.field()).hasPositions() == false) {\n        return super.matches(context, doc);\n      }\n      return Matches.forField(term.field(), () -> {\n        PostingsEnum pe = te.postings(null, PostingsEnum.OFFSETS);\n        if (pe.advance(doc) != doc) {\n          return null;\n        }\n        return new TermMatchesIterator(pe);\n      });\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2375622520a4e480775e3104a2f9a423536755b4","date":1536005521,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#matches(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#matches(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Matches matches(LeafReaderContext context, int doc) throws IOException {\n      TermsEnum te = getTermsEnum(context);\n      if (te == null) {\n        return null;\n      }\n      if (context.reader().terms(term.field()).hasPositions() == false) {\n        return super.matches(context, doc);\n      }\n      return MatchesUtils.forField(term.field(), () -> {\n        PostingsEnum pe = te.postings(null, PostingsEnum.OFFSETS);\n        if (pe.advance(doc) != doc) {\n          return null;\n        }\n        return new TermMatchesIterator(getQuery(), pe);\n      });\n    }\n\n","sourceOld":"    @Override\n    public Matches matches(LeafReaderContext context, int doc) throws IOException {\n      TermsEnum te = getTermsEnum(context);\n      if (te == null) {\n        return null;\n      }\n      if (context.reader().terms(term.field()).hasPositions() == false) {\n        return super.matches(context, doc);\n      }\n      return Matches.forField(term.field(), () -> {\n        PostingsEnum pe = te.postings(null, PostingsEnum.OFFSETS);\n        if (pe.advance(doc) != doc) {\n          return null;\n        }\n        return new TermMatchesIterator(getQuery(), pe);\n      });\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3760938294331a3fa865f76b09abc9de951da271","date":1597398332,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#matches(LeafReaderContext,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#matches(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Matches matches(LeafReaderContext context, int doc) throws IOException {\n      TermsEnum te = getTermsEnum(context);\n      if (te == null) {\n        return null;\n      }\n      return MatchesUtils.forField(term.field(), () -> {\n        PostingsEnum pe = te.postings(null, PostingsEnum.OFFSETS);\n        if (pe.advance(doc) != doc) {\n          return null;\n        }\n        return new TermMatchesIterator(getQuery(), pe);\n      });\n    }\n\n","sourceOld":"    @Override\n    public Matches matches(LeafReaderContext context, int doc) throws IOException {\n      TermsEnum te = getTermsEnum(context);\n      if (te == null) {\n        return null;\n      }\n      if (context.reader().terms(term.field()).hasPositions() == false) {\n        return super.matches(context, doc);\n      }\n      return MatchesUtils.forField(term.field(), () -> {\n        PostingsEnum pe = te.postings(null, PostingsEnum.OFFSETS);\n        if (pe.advance(doc) != doc) {\n          return null;\n        }\n        return new TermMatchesIterator(getQuery(), pe);\n      });\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ffb7b0a1201e65140f72d01a08b2bc34b0cfc364":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"657704b225b01c6ff4bada5b6667f1f60aaaad0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3760938294331a3fa865f76b09abc9de951da271":["2375622520a4e480775e3104a2f9a423536755b4"],"2375622520a4e480775e3104a2f9a423536755b4":["41ebc07bccf12a902ca6a0077910d18ee38b695f"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","657704b225b01c6ff4bada5b6667f1f60aaaad0f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3760938294331a3fa865f76b09abc9de951da271"],"41ebc07bccf12a902ca6a0077910d18ee38b695f":["ffb7b0a1201e65140f72d01a08b2bc34b0cfc364"]},"commit2Childs":{"ffb7b0a1201e65140f72d01a08b2bc34b0cfc364":["41ebc07bccf12a902ca6a0077910d18ee38b695f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["657704b225b01c6ff4bada5b6667f1f60aaaad0f","43345f1452f9510f8aaadae6156fe0c834e7d957"],"657704b225b01c6ff4bada5b6667f1f60aaaad0f":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"3760938294331a3fa865f76b09abc9de951da271":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2375622520a4e480775e3104a2f9a423536755b4":["3760938294331a3fa865f76b09abc9de951da271"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["ffb7b0a1201e65140f72d01a08b2bc34b0cfc364"],"41ebc07bccf12a902ca6a0077910d18ee38b695f":["2375622520a4e480775e3104a2f9a423536755b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}