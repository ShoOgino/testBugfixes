{"path":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#assertLongRangeSplit(long,long,int,boolean,Iterable[Long],Iterable[Integer]).mjava","commits":[{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#assertLongRangeSplit(long,long,int,boolean,Iterable[Long],Iterable[Integer]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#assertLongRangeSplit(long,long,int,boolean,Iterable[Long],Iterable[Integer]).mjava","sourceNew":"  /** Note: The neededBounds Iterable must be unsigned (easier understanding what's happening) */\n  private void assertLongRangeSplit(final long lower, final long upper, int precisionStep,\n    final boolean useBitSet, final Iterable<Long> expectedBounds, final Iterable<Integer> expectedShifts\n  ) {\n    // Cannot use FixedBitSet since the range could be long:\n    final LongBitSet bits=useBitSet ? new LongBitSet(upper-lower+1) : null;\n    final Iterator<Long> neededBounds = (expectedBounds == null) ? null : expectedBounds.iterator();\n    final Iterator<Integer> neededShifts = (expectedShifts == null) ? null : expectedShifts.iterator();\n\n    LegacyNumericUtils.splitLongRange(new LegacyNumericUtils.LongRangeBuilder() {\n      @Override\n      public void addRange(long min, long max, int shift) {\n        assertTrue(\"min, max should be inside bounds\", min >= lower && min <= upper && max >= lower && max <= upper);\n        if (useBitSet) for (long l = min; l <= max; l++) {\n          assertFalse(\"ranges should not overlap\", bits.getAndSet(l - lower));\n          // extra exit condition to prevent overflow on MAX_VALUE\n          if (l == max) break;\n        }\n        if (neededBounds == null || neededShifts == null)\n          return;\n        // make unsigned longs for easier display and understanding\n        min ^= 0x8000000000000000L;\n        max ^= 0x8000000000000000L;\n        //System.out.println(\"0x\"+Long.toHexString(min>>>shift)+\"L,0x\"+Long.toHexString(max>>>shift)+\"L)/*shift=\"+shift+\"*/,\");\n        assertEquals(\"shift\", neededShifts.next().intValue(), shift);\n        assertEquals(\"inner min bound\", neededBounds.next().longValue(), min >>> shift);\n        assertEquals(\"inner max bound\", neededBounds.next().longValue(), max >>> shift);\n      }\n    }, precisionStep, lower, upper);\n    \n    if (useBitSet) {\n      // after flipping all bits in the range, the cardinality should be zero\n      bits.flip(0,upper-lower+1);\n      assertEquals(\"The sub-range concenated should match the whole range\", 0, bits.cardinality());\n    }\n  }\n\n","sourceOld":"  /** Note: The neededBounds Iterable must be unsigned (easier understanding what's happening) */\n  private void assertLongRangeSplit(final long lower, final long upper, int precisionStep,\n    final boolean useBitSet, final Iterable<Long> expectedBounds, final Iterable<Integer> expectedShifts\n  ) {\n    // Cannot use FixedBitSet since the range could be long:\n    final LongBitSet bits=useBitSet ? new LongBitSet(upper-lower+1) : null;\n    final Iterator<Long> neededBounds = (expectedBounds == null) ? null : expectedBounds.iterator();\n    final Iterator<Integer> neededShifts = (expectedShifts == null) ? null : expectedShifts.iterator();\n\n    NumericUtils.splitLongRange(new NumericUtils.LongRangeBuilder() {\n      @Override\n      public void addRange(long min, long max, int shift) {\n        assertTrue(\"min, max should be inside bounds\", min>=lower && min<=upper && max>=lower && max<=upper);\n        if (useBitSet) for (long l=min; l<=max; l++) {\n          assertFalse(\"ranges should not overlap\", bits.getAndSet(l-lower) );\n          // extra exit condition to prevent overflow on MAX_VALUE\n          if (l == max) break;\n        }\n        if (neededBounds == null || neededShifts == null)\n          return;\n        // make unsigned longs for easier display and understanding\n        min ^= 0x8000000000000000L;\n        max ^= 0x8000000000000000L;\n        //System.out.println(\"0x\"+Long.toHexString(min>>>shift)+\"L,0x\"+Long.toHexString(max>>>shift)+\"L)/*shift=\"+shift+\"*/,\");\n        assertEquals( \"shift\", neededShifts.next().intValue(), shift);\n        assertEquals( \"inner min bound\", neededBounds.next().longValue(), min>>>shift);\n        assertEquals( \"inner max bound\", neededBounds.next().longValue(), max>>>shift);\n      }\n    }, precisionStep, lower, upper);\n    \n    if (useBitSet) {\n      // after flipping all bits in the range, the cardinality should be zero\n      bits.flip(0,upper-lower+1);\n      assertEquals(\"The sub-range concenated should match the whole range\", 0, bits.cardinality());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af5ba0166322092193d4c29880b0f7670fc7ca0","date":1471440525,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyNumericUtils#assertLongRangeSplit(long,long,int,boolean,Iterable[Long],Iterable[Integer]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#assertLongRangeSplit(long,long,int,boolean,Iterable[Long],Iterable[Integer]).mjava","sourceNew":"  /** Note: The neededBounds Iterable must be unsigned (easier understanding what's happening) */\n  private void assertLongRangeSplit(final long lower, final long upper, int precisionStep,\n    final boolean useBitSet, final Iterable<Long> expectedBounds, final Iterable<Integer> expectedShifts\n  ) {\n    // Cannot use FixedBitSet since the range could be long:\n    final LongBitSet bits=useBitSet ? new LongBitSet(upper-lower+1) : null;\n    final Iterator<Long> neededBounds = (expectedBounds == null) ? null : expectedBounds.iterator();\n    final Iterator<Integer> neededShifts = (expectedShifts == null) ? null : expectedShifts.iterator();\n\n    LegacyNumericUtils.splitLongRange(new LegacyNumericUtils.LongRangeBuilder() {\n      @Override\n      public void addRange(long min, long max, int shift) {\n        assertTrue(\"min, max should be inside bounds\", min >= lower && min <= upper && max >= lower && max <= upper);\n        if (useBitSet) for (long l = min; l <= max; l++) {\n          assertFalse(\"ranges should not overlap\", bits.getAndSet(l - lower));\n          // extra exit condition to prevent overflow on MAX_VALUE\n          if (l == max) break;\n        }\n        if (neededBounds == null || neededShifts == null)\n          return;\n        // make unsigned longs for easier display and understanding\n        min ^= 0x8000000000000000L;\n        max ^= 0x8000000000000000L;\n        //System.out.println(\"0x\"+Long.toHexString(min>>>shift)+\"L,0x\"+Long.toHexString(max>>>shift)+\"L)/*shift=\"+shift+\"*/,\");\n        assertEquals(\"shift\", neededShifts.next().intValue(), shift);\n        assertEquals(\"inner min bound\", neededBounds.next().longValue(), min >>> shift);\n        assertEquals(\"inner max bound\", neededBounds.next().longValue(), max >>> shift);\n      }\n    }, precisionStep, lower, upper);\n    \n    if (useBitSet) {\n      // after flipping all bits in the range, the cardinality should be zero\n      bits.flip(0,upper-lower+1);\n      assertEquals(\"The sub-range concenated should match the whole range\", 0, bits.cardinality());\n    }\n  }\n\n","sourceOld":"  /** Note: The neededBounds Iterable must be unsigned (easier understanding what's happening) */\n  private void assertLongRangeSplit(final long lower, final long upper, int precisionStep,\n    final boolean useBitSet, final Iterable<Long> expectedBounds, final Iterable<Integer> expectedShifts\n  ) {\n    // Cannot use FixedBitSet since the range could be long:\n    final LongBitSet bits=useBitSet ? new LongBitSet(upper-lower+1) : null;\n    final Iterator<Long> neededBounds = (expectedBounds == null) ? null : expectedBounds.iterator();\n    final Iterator<Integer> neededShifts = (expectedShifts == null) ? null : expectedShifts.iterator();\n\n    LegacyNumericUtils.splitLongRange(new LegacyNumericUtils.LongRangeBuilder() {\n      @Override\n      public void addRange(long min, long max, int shift) {\n        assertTrue(\"min, max should be inside bounds\", min >= lower && min <= upper && max >= lower && max <= upper);\n        if (useBitSet) for (long l = min; l <= max; l++) {\n          assertFalse(\"ranges should not overlap\", bits.getAndSet(l - lower));\n          // extra exit condition to prevent overflow on MAX_VALUE\n          if (l == max) break;\n        }\n        if (neededBounds == null || neededShifts == null)\n          return;\n        // make unsigned longs for easier display and understanding\n        min ^= 0x8000000000000000L;\n        max ^= 0x8000000000000000L;\n        //System.out.println(\"0x\"+Long.toHexString(min>>>shift)+\"L,0x\"+Long.toHexString(max>>>shift)+\"L)/*shift=\"+shift+\"*/,\");\n        assertEquals(\"shift\", neededShifts.next().intValue(), shift);\n        assertEquals(\"inner min bound\", neededBounds.next().longValue(), min >>> shift);\n        assertEquals(\"inner max bound\", neededBounds.next().longValue(), max >>> shift);\n      }\n    }, precisionStep, lower, upper);\n    \n    if (useBitSet) {\n      // after flipping all bits in the range, the cardinality should be zero\n      bits.flip(0,upper-lower+1);\n      assertEquals(\"The sub-range concenated should match the whole range\", 0, bits.cardinality());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyNumericUtils#assertLongRangeSplit(long,long,int,boolean,Iterable[Long],Iterable[Integer]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#assertLongRangeSplit(long,long,int,boolean,Iterable[Long],Iterable[Integer]).mjava","sourceNew":"  /** Note: The neededBounds Iterable must be unsigned (easier understanding what's happening) */\n  private void assertLongRangeSplit(final long lower, final long upper, int precisionStep,\n    final boolean useBitSet, final Iterable<Long> expectedBounds, final Iterable<Integer> expectedShifts\n  ) {\n    // Cannot use FixedBitSet since the range could be long:\n    final LongBitSet bits=useBitSet ? new LongBitSet(upper-lower+1) : null;\n    final Iterator<Long> neededBounds = (expectedBounds == null) ? null : expectedBounds.iterator();\n    final Iterator<Integer> neededShifts = (expectedShifts == null) ? null : expectedShifts.iterator();\n\n    LegacyNumericUtils.splitLongRange(new LegacyNumericUtils.LongRangeBuilder() {\n      @Override\n      public void addRange(long min, long max, int shift) {\n        assertTrue(\"min, max should be inside bounds\", min >= lower && min <= upper && max >= lower && max <= upper);\n        if (useBitSet) for (long l = min; l <= max; l++) {\n          assertFalse(\"ranges should not overlap\", bits.getAndSet(l - lower));\n          // extra exit condition to prevent overflow on MAX_VALUE\n          if (l == max) break;\n        }\n        if (neededBounds == null || neededShifts == null)\n          return;\n        // make unsigned longs for easier display and understanding\n        min ^= 0x8000000000000000L;\n        max ^= 0x8000000000000000L;\n        //System.out.println(\"0x\"+Long.toHexString(min>>>shift)+\"L,0x\"+Long.toHexString(max>>>shift)+\"L)/*shift=\"+shift+\"*/,\");\n        assertEquals(\"shift\", neededShifts.next().intValue(), shift);\n        assertEquals(\"inner min bound\", neededBounds.next().longValue(), min >>> shift);\n        assertEquals(\"inner max bound\", neededBounds.next().longValue(), max >>> shift);\n      }\n    }, precisionStep, lower, upper);\n    \n    if (useBitSet) {\n      // after flipping all bits in the range, the cardinality should be zero\n      bits.flip(0,upper-lower+1);\n      assertEquals(\"The sub-range concenated should match the whole range\", 0, bits.cardinality());\n    }\n  }\n\n","sourceOld":"  /** Note: The neededBounds Iterable must be unsigned (easier understanding what's happening) */\n  private void assertLongRangeSplit(final long lower, final long upper, int precisionStep,\n    final boolean useBitSet, final Iterable<Long> expectedBounds, final Iterable<Integer> expectedShifts\n  ) {\n    // Cannot use FixedBitSet since the range could be long:\n    final LongBitSet bits=useBitSet ? new LongBitSet(upper-lower+1) : null;\n    final Iterator<Long> neededBounds = (expectedBounds == null) ? null : expectedBounds.iterator();\n    final Iterator<Integer> neededShifts = (expectedShifts == null) ? null : expectedShifts.iterator();\n\n    LegacyNumericUtils.splitLongRange(new LegacyNumericUtils.LongRangeBuilder() {\n      @Override\n      public void addRange(long min, long max, int shift) {\n        assertTrue(\"min, max should be inside bounds\", min >= lower && min <= upper && max >= lower && max <= upper);\n        if (useBitSet) for (long l = min; l <= max; l++) {\n          assertFalse(\"ranges should not overlap\", bits.getAndSet(l - lower));\n          // extra exit condition to prevent overflow on MAX_VALUE\n          if (l == max) break;\n        }\n        if (neededBounds == null || neededShifts == null)\n          return;\n        // make unsigned longs for easier display and understanding\n        min ^= 0x8000000000000000L;\n        max ^= 0x8000000000000000L;\n        //System.out.println(\"0x\"+Long.toHexString(min>>>shift)+\"L,0x\"+Long.toHexString(max>>>shift)+\"L)/*shift=\"+shift+\"*/,\");\n        assertEquals(\"shift\", neededShifts.next().intValue(), shift);\n        assertEquals(\"inner min bound\", neededBounds.next().longValue(), min >>> shift);\n        assertEquals(\"inner max bound\", neededBounds.next().longValue(), max >>> shift);\n      }\n    }, precisionStep, lower, upper);\n    \n    if (useBitSet) {\n      // after flipping all bits in the range, the cardinality should be zero\n      bits.flip(0,upper-lower+1);\n      assertEquals(\"The sub-range concenated should match the whole range\", 0, bits.cardinality());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyNumericUtils#assertLongRangeSplit(long,long,int,boolean,Iterable[Long],Iterable[Integer]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#assertLongRangeSplit(long,long,int,boolean,Iterable[Long],Iterable[Integer]).mjava","sourceNew":"  /** Note: The neededBounds Iterable must be unsigned (easier understanding what's happening) */\n  private void assertLongRangeSplit(final long lower, final long upper, int precisionStep,\n    final boolean useBitSet, final Iterable<Long> expectedBounds, final Iterable<Integer> expectedShifts\n  ) {\n    // Cannot use FixedBitSet since the range could be long:\n    final LongBitSet bits=useBitSet ? new LongBitSet(upper-lower+1) : null;\n    final Iterator<Long> neededBounds = (expectedBounds == null) ? null : expectedBounds.iterator();\n    final Iterator<Integer> neededShifts = (expectedShifts == null) ? null : expectedShifts.iterator();\n\n    LegacyNumericUtils.splitLongRange(new LegacyNumericUtils.LongRangeBuilder() {\n      @Override\n      public void addRange(long min, long max, int shift) {\n        assertTrue(\"min, max should be inside bounds\", min >= lower && min <= upper && max >= lower && max <= upper);\n        if (useBitSet) for (long l = min; l <= max; l++) {\n          assertFalse(\"ranges should not overlap\", bits.getAndSet(l - lower));\n          // extra exit condition to prevent overflow on MAX_VALUE\n          if (l == max) break;\n        }\n        if (neededBounds == null || neededShifts == null)\n          return;\n        // make unsigned longs for easier display and understanding\n        min ^= 0x8000000000000000L;\n        max ^= 0x8000000000000000L;\n        //System.out.println(\"0x\"+Long.toHexString(min>>>shift)+\"L,0x\"+Long.toHexString(max>>>shift)+\"L)/*shift=\"+shift+\"*/,\");\n        assertEquals(\"shift\", neededShifts.next().intValue(), shift);\n        assertEquals(\"inner min bound\", neededBounds.next().longValue(), min >>> shift);\n        assertEquals(\"inner max bound\", neededBounds.next().longValue(), max >>> shift);\n      }\n    }, precisionStep, lower, upper);\n    \n    if (useBitSet) {\n      // after flipping all bits in the range, the cardinality should be zero\n      bits.flip(0,upper-lower+1);\n      assertEquals(\"The sub-range concenated should match the whole range\", 0, bits.cardinality());\n    }\n  }\n\n","sourceOld":"  /** Note: The neededBounds Iterable must be unsigned (easier understanding what's happening) */\n  private void assertLongRangeSplit(final long lower, final long upper, int precisionStep,\n    final boolean useBitSet, final Iterable<Long> expectedBounds, final Iterable<Integer> expectedShifts\n  ) {\n    // Cannot use FixedBitSet since the range could be long:\n    final LongBitSet bits=useBitSet ? new LongBitSet(upper-lower+1) : null;\n    final Iterator<Long> neededBounds = (expectedBounds == null) ? null : expectedBounds.iterator();\n    final Iterator<Integer> neededShifts = (expectedShifts == null) ? null : expectedShifts.iterator();\n\n    LegacyNumericUtils.splitLongRange(new LegacyNumericUtils.LongRangeBuilder() {\n      @Override\n      public void addRange(long min, long max, int shift) {\n        assertTrue(\"min, max should be inside bounds\", min >= lower && min <= upper && max >= lower && max <= upper);\n        if (useBitSet) for (long l = min; l <= max; l++) {\n          assertFalse(\"ranges should not overlap\", bits.getAndSet(l - lower));\n          // extra exit condition to prevent overflow on MAX_VALUE\n          if (l == max) break;\n        }\n        if (neededBounds == null || neededShifts == null)\n          return;\n        // make unsigned longs for easier display and understanding\n        min ^= 0x8000000000000000L;\n        max ^= 0x8000000000000000L;\n        //System.out.println(\"0x\"+Long.toHexString(min>>>shift)+\"L,0x\"+Long.toHexString(max>>>shift)+\"L)/*shift=\"+shift+\"*/,\");\n        assertEquals(\"shift\", neededShifts.next().intValue(), shift);\n        assertEquals(\"inner min bound\", neededBounds.next().longValue(), min >>> shift);\n        assertEquals(\"inner max bound\", neededBounds.next().longValue(), max >>> shift);\n      }\n    }, precisionStep, lower, upper);\n    \n    if (useBitSet) {\n      // after flipping all bits in the range, the cardinality should be zero\n      bits.flip(0,upper-lower+1);\n      assertEquals(\"The sub-range concenated should match the whole range\", 0, bits.cardinality());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyNumericUtils#assertLongRangeSplit(long,long,int,boolean,Iterable[Long],Iterable[Integer]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#assertLongRangeSplit(long,long,int,boolean,Iterable[Long],Iterable[Integer]).mjava","sourceNew":"  /** Note: The neededBounds Iterable must be unsigned (easier understanding what's happening) */\n  private void assertLongRangeSplit(final long lower, final long upper, int precisionStep,\n    final boolean useBitSet, final Iterable<Long> expectedBounds, final Iterable<Integer> expectedShifts\n  ) {\n    // Cannot use FixedBitSet since the range could be long:\n    final LongBitSet bits=useBitSet ? new LongBitSet(upper-lower+1) : null;\n    final Iterator<Long> neededBounds = (expectedBounds == null) ? null : expectedBounds.iterator();\n    final Iterator<Integer> neededShifts = (expectedShifts == null) ? null : expectedShifts.iterator();\n\n    LegacyNumericUtils.splitLongRange(new LegacyNumericUtils.LongRangeBuilder() {\n      @Override\n      public void addRange(long min, long max, int shift) {\n        assertTrue(\"min, max should be inside bounds\", min >= lower && min <= upper && max >= lower && max <= upper);\n        if (useBitSet) for (long l = min; l <= max; l++) {\n          assertFalse(\"ranges should not overlap\", bits.getAndSet(l - lower));\n          // extra exit condition to prevent overflow on MAX_VALUE\n          if (l == max) break;\n        }\n        if (neededBounds == null || neededShifts == null)\n          return;\n        // make unsigned longs for easier display and understanding\n        min ^= 0x8000000000000000L;\n        max ^= 0x8000000000000000L;\n        //System.out.println(\"0x\"+Long.toHexString(min>>>shift)+\"L,0x\"+Long.toHexString(max>>>shift)+\"L)/*shift=\"+shift+\"*/,\");\n        assertEquals(\"shift\", neededShifts.next().intValue(), shift);\n        assertEquals(\"inner min bound\", neededBounds.next().longValue(), min >>> shift);\n        assertEquals(\"inner max bound\", neededBounds.next().longValue(), max >>> shift);\n      }\n    }, precisionStep, lower, upper);\n    \n    if (useBitSet) {\n      // after flipping all bits in the range, the cardinality should be zero\n      bits.flip(0,upper-lower+1);\n      assertEquals(\"The sub-range concenated should match the whole range\", 0, bits.cardinality());\n    }\n  }\n\n","sourceOld":"  /** Note: The neededBounds Iterable must be unsigned (easier understanding what's happening) */\n  private void assertLongRangeSplit(final long lower, final long upper, int precisionStep,\n    final boolean useBitSet, final Iterable<Long> expectedBounds, final Iterable<Integer> expectedShifts\n  ) {\n    // Cannot use FixedBitSet since the range could be long:\n    final LongBitSet bits=useBitSet ? new LongBitSet(upper-lower+1) : null;\n    final Iterator<Long> neededBounds = (expectedBounds == null) ? null : expectedBounds.iterator();\n    final Iterator<Integer> neededShifts = (expectedShifts == null) ? null : expectedShifts.iterator();\n\n    LegacyNumericUtils.splitLongRange(new LegacyNumericUtils.LongRangeBuilder() {\n      @Override\n      public void addRange(long min, long max, int shift) {\n        assertTrue(\"min, max should be inside bounds\", min >= lower && min <= upper && max >= lower && max <= upper);\n        if (useBitSet) for (long l = min; l <= max; l++) {\n          assertFalse(\"ranges should not overlap\", bits.getAndSet(l - lower));\n          // extra exit condition to prevent overflow on MAX_VALUE\n          if (l == max) break;\n        }\n        if (neededBounds == null || neededShifts == null)\n          return;\n        // make unsigned longs for easier display and understanding\n        min ^= 0x8000000000000000L;\n        max ^= 0x8000000000000000L;\n        //System.out.println(\"0x\"+Long.toHexString(min>>>shift)+\"L,0x\"+Long.toHexString(max>>>shift)+\"L)/*shift=\"+shift+\"*/,\");\n        assertEquals(\"shift\", neededShifts.next().intValue(), shift);\n        assertEquals(\"inner min bound\", neededBounds.next().longValue(), min >>> shift);\n        assertEquals(\"inner max bound\", neededBounds.next().longValue(), max >>> shift);\n      }\n    }, precisionStep, lower, upper);\n    \n    if (useBitSet) {\n      // after flipping all bits in the range, the cardinality should be zero\n      bits.flip(0,upper-lower+1);\n      assertEquals(\"The sub-range concenated should match the whole range\", 0, bits.cardinality());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["770342641f7b505eaa8dccdc666158bff2419109","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["770342641f7b505eaa8dccdc666158bff2419109"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["770342641f7b505eaa8dccdc666158bff2419109","5af5ba0166322092193d4c29880b0f7670fc7ca0"],"770342641f7b505eaa8dccdc666158bff2419109":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["770342641f7b505eaa8dccdc666158bff2419109","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"]},"commit2Childs":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["770342641f7b505eaa8dccdc666158bff2419109"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"770342641f7b505eaa8dccdc666158bff2419109":["403d05f7f8d69b65659157eff1bc1d2717f04c66","5af5ba0166322092193d4c29880b0f7670fc7ca0","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}