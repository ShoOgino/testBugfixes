{"path":"contrib/WordNet/src/java/org/apache/lucene/wordnet/Syns2Index#index(Map,Map,String,Document).mjava","commits":[{"id":"043c298cb215f13ba7b9b81d20760704e8f93d66","date":1107566743,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/WordNet/src/java/org/apache/lucene/wordnet/Syns2Index#index(Map,Map,String,Document).mjava","pathOld":"sandbox/contributions/WordNet/src/java/org/apache/lucene/wordnet/Syns2Index#index(Map,Map,String,Document).mjava","sourceNew":"    /**\n     * Given the 2 maps fills a document for 1 word.\n     */\n    private static int index(Map word2Nums, Map num2Words, String g, Document doc)\n        throws Throwable\n    {\n        List keys = (List) word2Nums.get(g); // get list of key#'s\n        Iterator i2 = keys.iterator();\n\n        Set already = new TreeSet(); // keep them sorted\n\n        // pass 1: fill up 'already' with all words\n        while (i2.hasNext()) // for each key#\n        {\n            already.addAll((List) num2Words.get(i2.next())); // get list of words\n        }\n        int num = 0;\n        already.remove(g); // of course a word is it's own syn\n        Iterator it = already.iterator();\n        while (it.hasNext())\n        {\n            String cur = (String) it.next();\n            // don't store things like 'pit bull' -> 'american pit bull'\n            if (!isDecent(cur))\n            {\n                continue;\n            }\n            num++;\n\t\t\tdoc.add( new Field( F_SYN, cur, Field.Store.YES, Field.Index.NO));\n        }\n        return num;\n    }\n\n","sourceOld":"    /**\n     * Given the 2 maps fills a document for 1 word.\n     */\n    private static int index(Map word2Nums, Map num2Words, String g, Document doc)\n        throws Throwable\n    {\n        List keys = (List) word2Nums.get(g); // get list of key#'s\n        Iterator i2 = keys.iterator();\n\n        Set already = new TreeSet(); // keep them sorted\n\n        // pass 1: fill up 'already' with all words\n        while (i2.hasNext()) // for each key#\n        {\n            already.addAll((List) num2Words.get(i2.next())); // get list of words\n        }\n        int num = 0;\n        already.remove(g); // of course a word is it's own syn\n        Iterator it = already.iterator();\n        while (it.hasNext())\n        {\n            String cur = (String) it.next();\n            // don't store things like 'pit bull' -> 'american pit bull'\n            if (!isDecent(cur))\n            {\n                continue;\n            }\n            num++;\n\t\t\tdoc.add( new Field( F_SYN, cur, Field.Store.YES, Field.Index.NO));\n        }\n        return num;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4d1f544536b6c6ad3f1d34803c651c019795f51","date":1115339471,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/wordnetlc/src/java/org/apache/lucene/wordnet/Syns2Index#index(Map,Map,String,Document).mjava","pathOld":"contrib/WordNet/src/java/org/apache/lucene/wordnet/Syns2Index#index(Map,Map,String,Document).mjava","sourceNew":"    /**\n     * Given the 2 maps fills a document for 1 word.\n     */\n    private static int index(Map word2Nums, Map num2Words, String g, Document doc)\n        throws Throwable\n    {\n        List keys = (List) word2Nums.get(g); // get list of key#'s\n        Iterator i2 = keys.iterator();\n\n        Set already = new TreeSet(); // keep them sorted\n\n        // pass 1: fill up 'already' with all words\n        while (i2.hasNext()) // for each key#\n        {\n            already.addAll((List) num2Words.get(i2.next())); // get list of words\n        }\n        int num = 0;\n        already.remove(g); // of course a word is it's own syn\n        Iterator it = already.iterator();\n        while (it.hasNext())\n        {\n            String cur = (String) it.next();\n            // don't store things like 'pit bull' -> 'american pit bull'\n            if (!isDecent(cur))\n            {\n                continue;\n            }\n            num++;\n\t\t\tdoc.add( new Field( F_SYN, cur, Field.Store.YES, Field.Index.NO));\n        }\n        return num;\n    }\n\n","sourceOld":"    /**\n     * Given the 2 maps fills a document for 1 word.\n     */\n    private static int index(Map word2Nums, Map num2Words, String g, Document doc)\n        throws Throwable\n    {\n        List keys = (List) word2Nums.get(g); // get list of key#'s\n        Iterator i2 = keys.iterator();\n\n        Set already = new TreeSet(); // keep them sorted\n\n        // pass 1: fill up 'already' with all words\n        while (i2.hasNext()) // for each key#\n        {\n            already.addAll((List) num2Words.get(i2.next())); // get list of words\n        }\n        int num = 0;\n        already.remove(g); // of course a word is it's own syn\n        Iterator it = already.iterator();\n        while (it.hasNext())\n        {\n            String cur = (String) it.next();\n            // don't store things like 'pit bull' -> 'american pit bull'\n            if (!isDecent(cur))\n            {\n                continue;\n            }\n            num++;\n\t\t\tdoc.add( new Field( F_SYN, cur, Field.Store.YES, Field.Index.NO));\n        }\n        return num;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b4d1f544536b6c6ad3f1d34803c651c019795f51":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4d1f544536b6c6ad3f1d34803c651c019795f51"]},"commit2Childs":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["b4d1f544536b6c6ad3f1d34803c651c019795f51"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"b4d1f544536b6c6ad3f1d34803c651c019795f51":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}