{"path":"solr/core/src/test/org/apache/solr/cloud/CreateCollectionCleanupTest#testAsyncCreateCollectionCleanup().mjava","commits":[{"id":"ab6131420a270c49b653c969cc1dbbaf7d1b36e7","date":1550697886,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CreateCollectionCleanupTest#testAsyncCreateCollectionCleanup().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAsyncCreateCollectionCleanup() throws Exception {\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n    String collectionName = \"foo2\";\n    assertThat(CollectionAdminRequest.listCollections(cloudClient), not(hasItem(collectionName)));\n    \n    // Create a collection that would fail\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\"conf1\",1,1);\n\n    Properties properties = new Properties();\n    properties.put(CoreAdminParams.DATA_DIR, \"/some_invalid_dir/foo2\");\n    create.setProperties(properties);\n    create.setAsyncId(\"testAsyncCreateCollectionCleanup\");\n    create.process(cloudClient);\n    RequestStatusState state = AbstractFullDistribZkTestBase.getRequestStateAfterCompletion(\"testAsyncCreateCollectionCleanup\", 30, cloudClient);\n    assertThat(state.getKey(), is(\"failed\"));\n\n    // Confirm using LIST that the collection does not exist\n    assertThat(\"Failed collection is still in the clusterstate: \" + cluster.getSolrClient().getClusterStateProvider().getClusterState().getCollectionOrNull(collectionName), \n        CollectionAdminRequest.listCollections(cloudClient), not(hasItem(collectionName)));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0de300d75881f685bcd80755aacb04f1b216a1bd","date":1575651593,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CreateCollectionCleanupTest#testAsyncCreateCollectionCleanup().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CreateCollectionCleanupTest#testAsyncCreateCollectionCleanup().mjava","sourceNew":"  @Test\n  public void testAsyncCreateCollectionCleanup() throws Exception {\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n    String collectionName = \"foo2\";\n    assertThat(CollectionAdminRequest.listCollections(cloudClient), not(hasItem(collectionName)));\n    \n    // Create a collection that would fail\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\"conf1\",1,1);\n\n    Properties properties = new Properties();\n    Path tmpDir = createTempDir();\n    tmpDir.toFile().setWritable(false);\n    properties.put(CoreAdminParams.DATA_DIR, tmpDir.toString());\n    create.setProperties(properties);\n    create.setAsyncId(\"testAsyncCreateCollectionCleanup\");\n    create.process(cloudClient);\n    RequestStatusState state = AbstractFullDistribZkTestBase.getRequestStateAfterCompletion(\"testAsyncCreateCollectionCleanup\", 30, cloudClient);\n    assertThat(state.getKey(), is(\"failed\"));\n\n    // Confirm using LIST that the collection does not exist\n    assertThat(\"Failed collection is still in the clusterstate: \" + cluster.getSolrClient().getClusterStateProvider().getClusterState().getCollectionOrNull(collectionName), \n        CollectionAdminRequest.listCollections(cloudClient), not(hasItem(collectionName)));\n\n  }\n\n","sourceOld":"  @Test\n  public void testAsyncCreateCollectionCleanup() throws Exception {\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n    String collectionName = \"foo2\";\n    assertThat(CollectionAdminRequest.listCollections(cloudClient), not(hasItem(collectionName)));\n    \n    // Create a collection that would fail\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\"conf1\",1,1);\n\n    Properties properties = new Properties();\n    properties.put(CoreAdminParams.DATA_DIR, \"/some_invalid_dir/foo2\");\n    create.setProperties(properties);\n    create.setAsyncId(\"testAsyncCreateCollectionCleanup\");\n    create.process(cloudClient);\n    RequestStatusState state = AbstractFullDistribZkTestBase.getRequestStateAfterCompletion(\"testAsyncCreateCollectionCleanup\", 30, cloudClient);\n    assertThat(state.getKey(), is(\"failed\"));\n\n    // Confirm using LIST that the collection does not exist\n    assertThat(\"Failed collection is still in the clusterstate: \" + cluster.getSolrClient().getClusterStateProvider().getClusterState().getCollectionOrNull(collectionName), \n        CollectionAdminRequest.listCollections(cloudClient), not(hasItem(collectionName)));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca7f8987e211341154aa73c7f5a88e8f025be64f","date":1575655346,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CreateCollectionCleanupTest#testAsyncCreateCollectionCleanup().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CreateCollectionCleanupTest#testAsyncCreateCollectionCleanup().mjava","sourceNew":"  @Test\n  public void testAsyncCreateCollectionCleanup() throws Exception {\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n    String collectionName = \"foo2\";\n    assertThat(CollectionAdminRequest.listCollections(cloudClient), not(hasItem(collectionName)));\n    \n    // Create a collection that would fail\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\"conf1\",1,1);\n\n    Properties properties = new Properties();\n    Path tmpDir = createTempDir();\n    tmpDir.toFile().setWritable(false);\n    properties.put(CoreAdminParams.DATA_DIR, tmpDir.toString());\n    create.setProperties(properties);\n    create.setAsyncId(\"testAsyncCreateCollectionCleanup\");\n    create.process(cloudClient);\n    RequestStatusState state = AbstractFullDistribZkTestBase.getRequestStateAfterCompletion(\"testAsyncCreateCollectionCleanup\", 30, cloudClient);\n    assertThat(state.getKey(), is(\"failed\"));\n\n    // Confirm using LIST that the collection does not exist\n    assertThat(\"Failed collection is still in the clusterstate: \" + cluster.getSolrClient().getClusterStateProvider().getClusterState().getCollectionOrNull(collectionName), \n        CollectionAdminRequest.listCollections(cloudClient), not(hasItem(collectionName)));\n\n  }\n\n","sourceOld":"  @Test\n  public void testAsyncCreateCollectionCleanup() throws Exception {\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n    String collectionName = \"foo2\";\n    assertThat(CollectionAdminRequest.listCollections(cloudClient), not(hasItem(collectionName)));\n    \n    // Create a collection that would fail\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\"conf1\",1,1);\n\n    Properties properties = new Properties();\n    properties.put(CoreAdminParams.DATA_DIR, \"/some_invalid_dir/foo2\");\n    create.setProperties(properties);\n    create.setAsyncId(\"testAsyncCreateCollectionCleanup\");\n    create.process(cloudClient);\n    RequestStatusState state = AbstractFullDistribZkTestBase.getRequestStateAfterCompletion(\"testAsyncCreateCollectionCleanup\", 30, cloudClient);\n    assertThat(state.getKey(), is(\"failed\"));\n\n    // Confirm using LIST that the collection does not exist\n    assertThat(\"Failed collection is still in the clusterstate: \" + cluster.getSolrClient().getClusterStateProvider().getClusterState().getCollectionOrNull(collectionName), \n        CollectionAdminRequest.listCollections(cloudClient), not(hasItem(collectionName)));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"49890b53173e01177d3e8b563c23071ee6806d5d","date":1575677427,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CreateCollectionCleanupTest#testAsyncCreateCollectionCleanup().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CreateCollectionCleanupTest#testAsyncCreateCollectionCleanup().mjava","sourceNew":"  @Test\n  public void testAsyncCreateCollectionCleanup() throws Exception {\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n    String collectionName = \"foo2\";\n    assertThat(CollectionAdminRequest.listCollections(cloudClient), not(hasItem(collectionName)));\n    \n    // Create a collection that would fail\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\"conf1\",1,1);\n\n    Properties properties = new Properties();\n    Path tmpDir = createTempDir();\n    tmpDir = tmpDir.resolve(\"foo\");\n    Files.createFile(tmpDir);\n    properties.put(CoreAdminParams.DATA_DIR, tmpDir.toString());\n    create.setProperties(properties);\n    create.setAsyncId(\"testAsyncCreateCollectionCleanup\");\n    create.process(cloudClient);\n    RequestStatusState state = AbstractFullDistribZkTestBase.getRequestStateAfterCompletion(\"testAsyncCreateCollectionCleanup\", 30, cloudClient);\n    assertThat(state.getKey(), is(\"failed\"));\n\n    // Confirm using LIST that the collection does not exist\n    assertThat(\"Failed collection is still in the clusterstate: \" + cluster.getSolrClient().getClusterStateProvider().getClusterState().getCollectionOrNull(collectionName), \n        CollectionAdminRequest.listCollections(cloudClient), not(hasItem(collectionName)));\n\n  }\n\n","sourceOld":"  @Test\n  public void testAsyncCreateCollectionCleanup() throws Exception {\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n    String collectionName = \"foo2\";\n    assertThat(CollectionAdminRequest.listCollections(cloudClient), not(hasItem(collectionName)));\n    \n    // Create a collection that would fail\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\"conf1\",1,1);\n\n    Properties properties = new Properties();\n    Path tmpDir = createTempDir();\n    tmpDir.toFile().setWritable(false);\n    properties.put(CoreAdminParams.DATA_DIR, tmpDir.toString());\n    create.setProperties(properties);\n    create.setAsyncId(\"testAsyncCreateCollectionCleanup\");\n    create.process(cloudClient);\n    RequestStatusState state = AbstractFullDistribZkTestBase.getRequestStateAfterCompletion(\"testAsyncCreateCollectionCleanup\", 30, cloudClient);\n    assertThat(state.getKey(), is(\"failed\"));\n\n    // Confirm using LIST that the collection does not exist\n    assertThat(\"Failed collection is still in the clusterstate: \" + cluster.getSolrClient().getClusterStateProvider().getClusterState().getCollectionOrNull(collectionName), \n        CollectionAdminRequest.listCollections(cloudClient), not(hasItem(collectionName)));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0567b33b869e4ae37f2f50ba7827c01d001555e","date":1575712414,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CreateCollectionCleanupTest#testAsyncCreateCollectionCleanup().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CreateCollectionCleanupTest#testAsyncCreateCollectionCleanup().mjava","sourceNew":"  @Test\n  public void testAsyncCreateCollectionCleanup() throws Exception {\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n    String collectionName = \"foo2\";\n    assertThat(CollectionAdminRequest.listCollections(cloudClient), not(hasItem(collectionName)));\n    \n    // Create a collection that would fail\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\"conf1\",1,1);\n\n    Properties properties = new Properties();\n    Path tmpDir = createTempDir();\n    tmpDir = tmpDir.resolve(\"foo\");\n    Files.createFile(tmpDir);\n    properties.put(CoreAdminParams.DATA_DIR, tmpDir.toString());\n    create.setProperties(properties);\n    create.setAsyncId(\"testAsyncCreateCollectionCleanup\");\n    create.process(cloudClient);\n    RequestStatusState state = AbstractFullDistribZkTestBase.getRequestStateAfterCompletion(\"testAsyncCreateCollectionCleanup\", 30, cloudClient);\n    assertThat(state.getKey(), is(\"failed\"));\n\n    // Confirm using LIST that the collection does not exist\n    assertThat(\"Failed collection is still in the clusterstate: \" + cluster.getSolrClient().getClusterStateProvider().getClusterState().getCollectionOrNull(collectionName), \n        CollectionAdminRequest.listCollections(cloudClient), not(hasItem(collectionName)));\n\n  }\n\n","sourceOld":"  @Test\n  public void testAsyncCreateCollectionCleanup() throws Exception {\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n    String collectionName = \"foo2\";\n    assertThat(CollectionAdminRequest.listCollections(cloudClient), not(hasItem(collectionName)));\n    \n    // Create a collection that would fail\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,\"conf1\",1,1);\n\n    Properties properties = new Properties();\n    Path tmpDir = createTempDir();\n    tmpDir.toFile().setWritable(false);\n    properties.put(CoreAdminParams.DATA_DIR, tmpDir.toString());\n    create.setProperties(properties);\n    create.setAsyncId(\"testAsyncCreateCollectionCleanup\");\n    create.process(cloudClient);\n    RequestStatusState state = AbstractFullDistribZkTestBase.getRequestStateAfterCompletion(\"testAsyncCreateCollectionCleanup\", 30, cloudClient);\n    assertThat(state.getKey(), is(\"failed\"));\n\n    // Confirm using LIST that the collection does not exist\n    assertThat(\"Failed collection is still in the clusterstate: \" + cluster.getSolrClient().getClusterStateProvider().getClusterState().getCollectionOrNull(collectionName), \n        CollectionAdminRequest.listCollections(cloudClient), not(hasItem(collectionName)));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab6131420a270c49b653c969cc1dbbaf7d1b36e7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0de300d75881f685bcd80755aacb04f1b216a1bd":["ab6131420a270c49b653c969cc1dbbaf7d1b36e7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0567b33b869e4ae37f2f50ba7827c01d001555e":["ca7f8987e211341154aa73c7f5a88e8f025be64f","49890b53173e01177d3e8b563c23071ee6806d5d"],"49890b53173e01177d3e8b563c23071ee6806d5d":["0de300d75881f685bcd80755aacb04f1b216a1bd"],"ca7f8987e211341154aa73c7f5a88e8f025be64f":["ab6131420a270c49b653c969cc1dbbaf7d1b36e7","0de300d75881f685bcd80755aacb04f1b216a1bd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["49890b53173e01177d3e8b563c23071ee6806d5d"]},"commit2Childs":{"ab6131420a270c49b653c969cc1dbbaf7d1b36e7":["0de300d75881f685bcd80755aacb04f1b216a1bd","ca7f8987e211341154aa73c7f5a88e8f025be64f"],"0de300d75881f685bcd80755aacb04f1b216a1bd":["49890b53173e01177d3e8b563c23071ee6806d5d","ca7f8987e211341154aa73c7f5a88e8f025be64f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ab6131420a270c49b653c969cc1dbbaf7d1b36e7"],"d0567b33b869e4ae37f2f50ba7827c01d001555e":[],"49890b53173e01177d3e8b563c23071ee6806d5d":["d0567b33b869e4ae37f2f50ba7827c01d001555e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ca7f8987e211341154aa73c7f5a88e8f025be64f":["d0567b33b869e4ae37f2f50ba7827c01d001555e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d0567b33b869e4ae37f2f50ba7827c01d001555e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}