{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/ScoredDocIdCollector.ScoringDocIdCollector#scoredDocIdsIterator().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/ScoredDocIdCollector.ScoringDocIdCollector#scoredDocIdsIterator().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/ScoredDocIdCollector.ScoringDocIdCollector#scoredDocIdsIterator().mjava","sourceNew":"    @Override\n    public ScoredDocIDsIterator scoredDocIdsIterator() throws IOException {\n      return new ScoredDocIDsIterator() {\n\n        private DocIdSetIterator docIdsIter = docIds.iterator();\n        private int nextDoc;\n        private int scoresIdx = -1;\n\n        public int getDocID() { return nextDoc; }\n        public float getScore() { return scores[scoresIdx]; }\n\n        public boolean next() {\n          try {\n            nextDoc = docIdsIter.nextDoc();\n            if (nextDoc == DocIdSetIterator.NO_MORE_DOCS) {\n              return false;\n            }\n            ++scoresIdx;\n            return true;\n          } catch (IOException e) {\n            // This should not happen as we're iterating over an OpenBitSet. For\n            // completeness, terminate iteration\n            nextDoc = DocIdSetIterator.NO_MORE_DOCS;\n            return false;\n          }\n        }\n\n      };\n    }\n\n","sourceOld":"    @Override\n    public ScoredDocIDsIterator scoredDocIdsIterator() throws IOException {\n      return new ScoredDocIDsIterator() {\n\n        private DocIdSetIterator docIdsIter = docIds.iterator();\n        private int nextDoc;\n        private int scoresIdx = -1;\n\n        public int getDocID() { return nextDoc; }\n        public float getScore() { return scores[scoresIdx]; }\n\n        public boolean next() {\n          try {\n            nextDoc = docIdsIter.nextDoc();\n            if (nextDoc == DocIdSetIterator.NO_MORE_DOCS) {\n              return false;\n            }\n            ++scoresIdx;\n            return true;\n          } catch (IOException e) {\n            // This should not happen as we're iterating over an OpenBitSet. For\n            // completeness, terminate iteration\n            nextDoc = DocIdSetIterator.NO_MORE_DOCS;\n            return false;\n          }\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/ScoredDocIdCollector.ScoringDocIdCollector#scoredDocIdsIterator().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/ScoredDocIdCollector.ScoringDocIdCollector#scoredDocIdsIterator().mjava","sourceNew":"    @Override\n    public ScoredDocIDsIterator scoredDocIdsIterator() {\n      return new ScoredDocIDsIterator() {\n\n        private DocIdSetIterator docIdsIter = docIds.iterator();\n        private int nextDoc;\n        private int scoresIdx = -1;\n\n        public int getDocID() { return nextDoc; }\n        public float getScore() { return scores[scoresIdx]; }\n\n        public boolean next() {\n          try {\n            nextDoc = docIdsIter.nextDoc();\n            if (nextDoc == DocIdSetIterator.NO_MORE_DOCS) {\n              return false;\n            }\n            ++scoresIdx;\n            return true;\n          } catch (IOException e) {\n            // This should not happen as we're iterating over an OpenBitSet. For\n            // completeness, terminate iteration\n            nextDoc = DocIdSetIterator.NO_MORE_DOCS;\n            return false;\n          }\n        }\n\n      };\n    }\n\n","sourceOld":"    @Override\n    public ScoredDocIDsIterator scoredDocIdsIterator() throws IOException {\n      return new ScoredDocIDsIterator() {\n\n        private DocIdSetIterator docIdsIter = docIds.iterator();\n        private int nextDoc;\n        private int scoresIdx = -1;\n\n        public int getDocID() { return nextDoc; }\n        public float getScore() { return scores[scoresIdx]; }\n\n        public boolean next() {\n          try {\n            nextDoc = docIdsIter.nextDoc();\n            if (nextDoc == DocIdSetIterator.NO_MORE_DOCS) {\n              return false;\n            }\n            ++scoresIdx;\n            return true;\n          } catch (IOException e) {\n            // This should not happen as we're iterating over an OpenBitSet. For\n            // completeness, terminate iteration\n            nextDoc = DocIdSetIterator.NO_MORE_DOCS;\n            return false;\n          }\n        }\n\n      };\n    }\n\n","bugFix":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/ScoredDocIdCollector.ScoringDocIdCollector#scoredDocIdsIterator().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/ScoredDocIdCollector.ScoringDocIdCollector#scoredDocIdsIterator().mjava","sourceNew":"    @Override\n    public ScoredDocIDsIterator scoredDocIdsIterator() {\n      return new ScoredDocIDsIterator() {\n\n        private DocIdSetIterator docIdsIter = docIds.iterator();\n        private int nextDoc;\n        private int scoresIdx = -1;\n\n        public int getDocID() { return nextDoc; }\n        public float getScore() { return scores[scoresIdx]; }\n\n        public boolean next() {\n          try {\n            nextDoc = docIdsIter.nextDoc();\n            if (nextDoc == DocIdSetIterator.NO_MORE_DOCS) {\n              return false;\n            }\n            ++scoresIdx;\n            return true;\n          } catch (IOException e) {\n            // This should not happen as we're iterating over an OpenBitSet. For\n            // completeness, terminate iteration\n            nextDoc = DocIdSetIterator.NO_MORE_DOCS;\n            return false;\n          }\n        }\n\n      };\n    }\n\n","sourceOld":"    @Override\n    public ScoredDocIDsIterator scoredDocIdsIterator() throws IOException {\n      return new ScoredDocIDsIterator() {\n\n        private DocIdSetIterator docIdsIter = docIds.iterator();\n        private int nextDoc;\n        private int scoresIdx = -1;\n\n        public int getDocID() { return nextDoc; }\n        public float getScore() { return scores[scoresIdx]; }\n\n        public boolean next() {\n          try {\n            nextDoc = docIdsIter.nextDoc();\n            if (nextDoc == DocIdSetIterator.NO_MORE_DOCS) {\n              return false;\n            }\n            ++scoresIdx;\n            return true;\n          } catch (IOException e) {\n            // This should not happen as we're iterating over an OpenBitSet. For\n            // completeness, terminate iteration\n            nextDoc = DocIdSetIterator.NO_MORE_DOCS;\n            return false;\n          }\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/ScoredDocIdCollector.ScoringDocIdCollector#scoredDocIdsIterator().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/ScoredDocIdCollector.ScoringDocIdCollector#scoredDocIdsIterator().mjava","sourceNew":"    @Override\n    public ScoredDocIDsIterator scoredDocIdsIterator() {\n      return new ScoredDocIDsIterator() {\n\n        private DocIdSetIterator docIdsIter = docIds.iterator();\n        private int nextDoc;\n        private int scoresIdx = -1;\n\n        @Override\n        public int getDocID() { return nextDoc; }\n        @Override\n        public float getScore() { return scores[scoresIdx]; }\n\n        @Override\n        public boolean next() {\n          try {\n            nextDoc = docIdsIter.nextDoc();\n            if (nextDoc == DocIdSetIterator.NO_MORE_DOCS) {\n              return false;\n            }\n            ++scoresIdx;\n            return true;\n          } catch (IOException e) {\n            // This should not happen as we're iterating over an OpenBitSet. For\n            // completeness, terminate iteration\n            nextDoc = DocIdSetIterator.NO_MORE_DOCS;\n            return false;\n          }\n        }\n\n      };\n    }\n\n","sourceOld":"    @Override\n    public ScoredDocIDsIterator scoredDocIdsIterator() {\n      return new ScoredDocIDsIterator() {\n\n        private DocIdSetIterator docIdsIter = docIds.iterator();\n        private int nextDoc;\n        private int scoresIdx = -1;\n\n        public int getDocID() { return nextDoc; }\n        public float getScore() { return scores[scoresIdx]; }\n\n        public boolean next() {\n          try {\n            nextDoc = docIdsIter.nextDoc();\n            if (nextDoc == DocIdSetIterator.NO_MORE_DOCS) {\n              return false;\n            }\n            ++scoresIdx;\n            return true;\n          } catch (IOException e) {\n            // This should not happen as we're iterating over an OpenBitSet. For\n            // completeness, terminate iteration\n            nextDoc = DocIdSetIterator.NO_MORE_DOCS;\n            return false;\n          }\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/ScoredDocIdCollector.ScoringDocIdCollector#scoredDocIdsIterator().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/ScoredDocIdCollector.ScoringDocIdCollector#scoredDocIdsIterator().mjava","sourceNew":"    @Override\n    public ScoredDocIDsIterator scoredDocIdsIterator() {\n      return new ScoredDocIDsIterator() {\n\n        private DocIdSetIterator docIdsIter = docIds.iterator();\n        private int nextDoc;\n        private int scoresIdx = -1;\n\n        @Override\n        public int getDocID() { return nextDoc; }\n        @Override\n        public float getScore() { return scores[scoresIdx]; }\n\n        @Override\n        public boolean next() {\n          try {\n            nextDoc = docIdsIter.nextDoc();\n            if (nextDoc == DocIdSetIterator.NO_MORE_DOCS) {\n              return false;\n            }\n            ++scoresIdx;\n            return true;\n          } catch (IOException e) {\n            // This should not happen as we're iterating over an OpenBitSet. For\n            // completeness, terminate iteration\n            nextDoc = DocIdSetIterator.NO_MORE_DOCS;\n            return false;\n          }\n        }\n\n      };\n    }\n\n","sourceOld":"    @Override\n    public ScoredDocIDsIterator scoredDocIdsIterator() {\n      return new ScoredDocIDsIterator() {\n\n        private DocIdSetIterator docIdsIter = docIds.iterator();\n        private int nextDoc;\n        private int scoresIdx = -1;\n\n        public int getDocID() { return nextDoc; }\n        public float getScore() { return scores[scoresIdx]; }\n\n        public boolean next() {\n          try {\n            nextDoc = docIdsIter.nextDoc();\n            if (nextDoc == DocIdSetIterator.NO_MORE_DOCS) {\n              return false;\n            }\n            ++scoresIdx;\n            return true;\n          } catch (IOException e) {\n            // This should not happen as we're iterating over an OpenBitSet. For\n            // completeness, terminate iteration\n            nextDoc = DocIdSetIterator.NO_MORE_DOCS;\n            return false;\n          }\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42f51b3ab4258ff4623227b0db011b8bb83db5c7","date":1358164991,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/ScoredDocIdCollector.ScoringDocIdCollector#scoredDocIdsIterator().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/ScoredDocIdCollector.ScoringDocIdCollector#scoredDocIdsIterator().mjava","sourceNew":"    @Override\n    protected ScoredDocIDsIterator scoredDocIdsIterator() {\n      return new ScoredDocIDsIterator() {\n\n        private DocIdSetIterator docIdsIter = docIds.iterator();\n        private int nextDoc;\n        private int scoresIdx = -1;\n\n        @Override\n        public int getDocID() { return nextDoc; }\n        @Override\n        public float getScore() { return scores[scoresIdx]; }\n\n        @Override\n        public boolean next() {\n          try {\n            nextDoc = docIdsIter.nextDoc();\n            if (nextDoc == DocIdSetIterator.NO_MORE_DOCS) {\n              return false;\n            }\n            ++scoresIdx;\n            return true;\n          } catch (IOException e) {\n            // This should not happen as we're iterating over an OpenBitSet. For\n            // completeness, terminate iteration\n            nextDoc = DocIdSetIterator.NO_MORE_DOCS;\n            return false;\n          }\n        }\n\n      };\n    }\n\n","sourceOld":"    @Override\n    public ScoredDocIDsIterator scoredDocIdsIterator() {\n      return new ScoredDocIDsIterator() {\n\n        private DocIdSetIterator docIdsIter = docIds.iterator();\n        private int nextDoc;\n        private int scoresIdx = -1;\n\n        @Override\n        public int getDocID() { return nextDoc; }\n        @Override\n        public float getScore() { return scores[scoresIdx]; }\n\n        @Override\n        public boolean next() {\n          try {\n            nextDoc = docIdsIter.nextDoc();\n            if (nextDoc == DocIdSetIterator.NO_MORE_DOCS) {\n              return false;\n            }\n            ++scoresIdx;\n            return true;\n          } catch (IOException e) {\n            // This should not happen as we're iterating over an OpenBitSet. For\n            // completeness, terminate iteration\n            nextDoc = DocIdSetIterator.NO_MORE_DOCS;\n            return false;\n          }\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/ScoredDocIdCollector.ScoringDocIdCollector#scoredDocIdsIterator().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/ScoredDocIdCollector.ScoringDocIdCollector#scoredDocIdsIterator().mjava","sourceNew":"    @Override\n    protected ScoredDocIDsIterator scoredDocIdsIterator() {\n      return new ScoredDocIDsIterator() {\n\n        private DocIdSetIterator docIdsIter = docIds.iterator();\n        private int nextDoc;\n        private int scoresIdx = -1;\n\n        @Override\n        public int getDocID() { return nextDoc; }\n        @Override\n        public float getScore() { return scores[scoresIdx]; }\n\n        @Override\n        public boolean next() {\n          try {\n            nextDoc = docIdsIter.nextDoc();\n            if (nextDoc == DocIdSetIterator.NO_MORE_DOCS) {\n              return false;\n            }\n            ++scoresIdx;\n            return true;\n          } catch (IOException e) {\n            // This should not happen as we're iterating over an OpenBitSet. For\n            // completeness, terminate iteration\n            nextDoc = DocIdSetIterator.NO_MORE_DOCS;\n            return false;\n          }\n        }\n\n      };\n    }\n\n","sourceOld":"    @Override\n    public ScoredDocIDsIterator scoredDocIdsIterator() {\n      return new ScoredDocIDsIterator() {\n\n        private DocIdSetIterator docIdsIter = docIds.iterator();\n        private int nextDoc;\n        private int scoresIdx = -1;\n\n        @Override\n        public int getDocID() { return nextDoc; }\n        @Override\n        public float getScore() { return scores[scoresIdx]; }\n\n        @Override\n        public boolean next() {\n          try {\n            nextDoc = docIdsIter.nextDoc();\n            if (nextDoc == DocIdSetIterator.NO_MORE_DOCS) {\n              return false;\n            }\n            ++scoresIdx;\n            return true;\n          } catch (IOException e) {\n            // This should not happen as we're iterating over an OpenBitSet. For\n            // completeness, terminate iteration\n            nextDoc = DocIdSetIterator.NO_MORE_DOCS;\n            return false;\n          }\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/ScoredDocIdCollector.ScoringDocIdCollector#scoredDocIdsIterator().mjava","sourceNew":null,"sourceOld":"    @Override\n    protected ScoredDocIDsIterator scoredDocIdsIterator() {\n      return new ScoredDocIDsIterator() {\n\n        private DocIdSetIterator docIdsIter = docIds.iterator();\n        private int nextDoc;\n        private int scoresIdx = -1;\n\n        @Override\n        public int getDocID() { return nextDoc; }\n        @Override\n        public float getScore() { return scores[scoresIdx]; }\n\n        @Override\n        public boolean next() {\n          try {\n            nextDoc = docIdsIter.nextDoc();\n            if (nextDoc == DocIdSetIterator.NO_MORE_DOCS) {\n              return false;\n            }\n            ++scoresIdx;\n            return true;\n          } catch (IOException e) {\n            // This should not happen as we're iterating over an OpenBitSet. For\n            // completeness, terminate iteration\n            nextDoc = DocIdSetIterator.NO_MORE_DOCS;\n            return false;\n          }\n        }\n\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","7530de27b87b961b51f01bd1299b7004d46e8823"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"42f51b3ab4258ff4623227b0db011b8bb83db5c7":["7530de27b87b961b51f01bd1299b7004d46e8823"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"7530de27b87b961b51f01bd1299b7004d46e8823":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["571abba77e55fea386a38c0024f72ffa5b37a9ad"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["8917bfede3b4ca30f4305c1e391e9218959cd723"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"42f51b3ab4258ff4623227b0db011b8bb83db5c7":["8917bfede3b4ca30f4305c1e391e9218959cd723","571abba77e55fea386a38c0024f72ffa5b37a9ad"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fe33227f6805edab2036cbb80645cc4e2d1fa424","7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8917bfede3b4ca30f4305c1e391e9218959cd723","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}