{"path":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#OneMerge(List[SegmentCommitInfo]).mjava","commits":[{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#OneMerge(List[SegmentCommitInfo]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#OneMerge(List[SegmentInfoPerCommit]).mjava","sourceNew":"    /** Sole constructor.\n     * @param segments List of {@link SegmentCommitInfo}s\n     *        to be merged. */\n    public OneMerge(List<SegmentCommitInfo> segments) {\n      if (0 == segments.size())\n        throw new RuntimeException(\"segments must include at least one segment\");\n      // clone the list, as the in list may be based off original SegmentInfos and may be modified\n      this.segments = new ArrayList<SegmentCommitInfo>(segments);\n      int count = 0;\n      for(SegmentCommitInfo info : segments) {\n        count += info.info.getDocCount();\n      }\n      totalDocCount = count;\n    }\n\n","sourceOld":"    /** Sole constructor.\n     * @param segments List of {@link SegmentInfoPerCommit}s\n     *        to be merged. */\n    public OneMerge(List<SegmentInfoPerCommit> segments) {\n      if (0 == segments.size())\n        throw new RuntimeException(\"segments must include at least one segment\");\n      // clone the list, as the in list may be based off original SegmentInfos and may be modified\n      this.segments = new ArrayList<SegmentInfoPerCommit>(segments);\n      int count = 0;\n      for(SegmentInfoPerCommit info : segments) {\n        count += info.info.getDocCount();\n      }\n      totalDocCount = count;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#OneMerge(List[SegmentCommitInfo]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#OneMerge(List[SegmentCommitInfo]).mjava","sourceNew":"    /** Sole constructor.\n     * @param segments List of {@link SegmentCommitInfo}s\n     *        to be merged. */\n    public OneMerge(List<SegmentCommitInfo> segments) {\n      if (0 == segments.size())\n        throw new RuntimeException(\"segments must include at least one segment\");\n      // clone the list, as the in list may be based off original SegmentInfos and may be modified\n      this.segments = new ArrayList<>(segments);\n      int count = 0;\n      for(SegmentCommitInfo info : segments) {\n        count += info.info.getDocCount();\n      }\n      totalDocCount = count;\n    }\n\n","sourceOld":"    /** Sole constructor.\n     * @param segments List of {@link SegmentCommitInfo}s\n     *        to be merged. */\n    public OneMerge(List<SegmentCommitInfo> segments) {\n      if (0 == segments.size())\n        throw new RuntimeException(\"segments must include at least one segment\");\n      // clone the list, as the in list may be based off original SegmentInfos and may be modified\n      this.segments = new ArrayList<SegmentCommitInfo>(segments);\n      int count = 0;\n      for(SegmentCommitInfo info : segments) {\n        count += info.info.getDocCount();\n      }\n      totalDocCount = count;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39cc7fae4e4c6be7c74434527ee9852592db649f","date":1412761164,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#OneMerge(List[SegmentCommitInfo]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#OneMerge(List[SegmentCommitInfo]).mjava","sourceNew":"    /** Sole constructor.\n     * @param segments List of {@link SegmentCommitInfo}s\n     *        to be merged. */\n    public OneMerge(List<SegmentCommitInfo> segments) {\n      if (0 == segments.size()) {\n        throw new RuntimeException(\"segments must include at least one segment\");\n      }\n      // clone the list, as the in list may be based off original SegmentInfos and may be modified\n      this.segments = new ArrayList<>(segments);\n      int count = 0;\n      for(SegmentCommitInfo info : segments) {\n        count += info.info.getDocCount();\n      }\n      totalDocCount = count;\n    }\n\n","sourceOld":"    /** Sole constructor.\n     * @param segments List of {@link SegmentCommitInfo}s\n     *        to be merged. */\n    public OneMerge(List<SegmentCommitInfo> segments) {\n      if (0 == segments.size())\n        throw new RuntimeException(\"segments must include at least one segment\");\n      // clone the list, as the in list may be based off original SegmentInfos and may be modified\n      this.segments = new ArrayList<>(segments);\n      int count = 0;\n      for(SegmentCommitInfo info : segments) {\n        count += info.info.getDocCount();\n      }\n      totalDocCount = count;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#OneMerge(List[SegmentCommitInfo]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#OneMerge(List[SegmentCommitInfo]).mjava","sourceNew":"    /** Sole constructor.\n     * @param segments List of {@link SegmentCommitInfo}s\n     *        to be merged. */\n    public OneMerge(List<SegmentCommitInfo> segments) {\n      if (0 == segments.size()) {\n        throw new RuntimeException(\"segments must include at least one segment\");\n      }\n      // clone the list, as the in list may be based off original SegmentInfos and may be modified\n      this.segments = new ArrayList<>(segments);\n      int count = 0;\n      for(SegmentCommitInfo info : segments) {\n        count += info.info.getDocCount();\n      }\n      totalDocCount = count;\n    }\n\n","sourceOld":"    /** Sole constructor.\n     * @param segments List of {@link SegmentCommitInfo}s\n     *        to be merged. */\n    public OneMerge(List<SegmentCommitInfo> segments) {\n      if (0 == segments.size())\n        throw new RuntimeException(\"segments must include at least one segment\");\n      // clone the list, as the in list may be based off original SegmentInfos and may be modified\n      this.segments = new ArrayList<>(segments);\n      int count = 0;\n      for(SegmentCommitInfo info : segments) {\n        count += info.info.getDocCount();\n      }\n      totalDocCount = count;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5faf65b6692f15cca0f87bf8666c87899afc619f","date":1420468108,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#OneMerge(List[SegmentCommitInfo]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#OneMerge(List[SegmentCommitInfo]).mjava","sourceNew":"    /** Sole constructor.\n     * @param segments List of {@link SegmentCommitInfo}s\n     *        to be merged. */\n    public OneMerge(List<SegmentCommitInfo> segments) {\n      if (0 == segments.size()) {\n        throw new RuntimeException(\"segments must include at least one segment\");\n      }\n      // clone the list, as the in list may be based off original SegmentInfos and may be modified\n      this.segments = new ArrayList<>(segments);\n      int count = 0;\n      for(SegmentCommitInfo info : segments) {\n        count += info.info.getDocCount();\n      }\n      totalDocCount = count;\n\n      rateLimiter = new MergeRateLimiter(this);\n    }\n\n","sourceOld":"    /** Sole constructor.\n     * @param segments List of {@link SegmentCommitInfo}s\n     *        to be merged. */\n    public OneMerge(List<SegmentCommitInfo> segments) {\n      if (0 == segments.size()) {\n        throw new RuntimeException(\"segments must include at least one segment\");\n      }\n      // clone the list, as the in list may be based off original SegmentInfos and may be modified\n      this.segments = new ArrayList<>(segments);\n      int count = 0;\n      for(SegmentCommitInfo info : segments) {\n        count += info.info.getDocCount();\n      }\n      totalDocCount = count;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0267c69e2456a3477a1ad785723f2135da3117e","date":1425317087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#OneMerge(List[SegmentCommitInfo]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#OneMerge(List[SegmentCommitInfo]).mjava","sourceNew":"    /** Sole constructor.\n     * @param segments List of {@link SegmentCommitInfo}s\n     *        to be merged. */\n    public OneMerge(List<SegmentCommitInfo> segments) {\n      if (0 == segments.size()) {\n        throw new RuntimeException(\"segments must include at least one segment\");\n      }\n      // clone the list, as the in list may be based off original SegmentInfos and may be modified\n      this.segments = new ArrayList<>(segments);\n      int count = 0;\n      for(SegmentCommitInfo info : segments) {\n        count += info.info.maxDoc();\n      }\n      totalMaxDoc = count;\n\n      rateLimiter = new MergeRateLimiter(this);\n    }\n\n","sourceOld":"    /** Sole constructor.\n     * @param segments List of {@link SegmentCommitInfo}s\n     *        to be merged. */\n    public OneMerge(List<SegmentCommitInfo> segments) {\n      if (0 == segments.size()) {\n        throw new RuntimeException(\"segments must include at least one segment\");\n      }\n      // clone the list, as the in list may be based off original SegmentInfos and may be modified\n      this.segments = new ArrayList<>(segments);\n      int count = 0;\n      for(SegmentCommitInfo info : segments) {\n        count += info.info.getDocCount();\n      }\n      totalDocCount = count;\n\n      rateLimiter = new MergeRateLimiter(this);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b06445ae1731e049327712db0454e5643ca9b7fe","date":1425329139,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#OneMerge(List[SegmentCommitInfo]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#OneMerge(List[SegmentCommitInfo]).mjava","sourceNew":"    /** Sole constructor.\n     * @param segments List of {@link SegmentCommitInfo}s\n     *        to be merged. */\n    public OneMerge(List<SegmentCommitInfo> segments) {\n      if (0 == segments.size()) {\n        throw new RuntimeException(\"segments must include at least one segment\");\n      }\n      // clone the list, as the in list may be based off original SegmentInfos and may be modified\n      this.segments = new ArrayList<>(segments);\n      int count = 0;\n      for(SegmentCommitInfo info : segments) {\n        count += info.info.maxDoc();\n      }\n      totalMaxDoc = count;\n\n      rateLimiter = new MergeRateLimiter(this);\n    }\n\n","sourceOld":"    /** Sole constructor.\n     * @param segments List of {@link SegmentCommitInfo}s\n     *        to be merged. */\n    public OneMerge(List<SegmentCommitInfo> segments) {\n      if (0 == segments.size()) {\n        throw new RuntimeException(\"segments must include at least one segment\");\n      }\n      // clone the list, as the in list may be based off original SegmentInfos and may be modified\n      this.segments = new ArrayList<>(segments);\n      int count = 0;\n      for(SegmentCommitInfo info : segments) {\n        count += info.info.getDocCount();\n      }\n      totalDocCount = count;\n\n      rateLimiter = new MergeRateLimiter(this);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#OneMerge(List[SegmentCommitInfo]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#OneMerge(List[SegmentCommitInfo]).mjava","sourceNew":"    /** Sole constructor.\n     * @param segments List of {@link SegmentCommitInfo}s\n     *        to be merged. */\n    public OneMerge(List<SegmentCommitInfo> segments) {\n      if (0 == segments.size()) {\n        throw new RuntimeException(\"segments must include at least one segment\");\n      }\n      // clone the list, as the in list may be based off original SegmentInfos and may be modified\n      this.segments = new ArrayList<>(segments);\n      int count = 0;\n      for(SegmentCommitInfo info : segments) {\n        count += info.info.maxDoc();\n      }\n      totalMaxDoc = count;\n\n      rateLimiter = new MergeRateLimiter(this);\n    }\n\n","sourceOld":"    /** Sole constructor.\n     * @param segments List of {@link SegmentCommitInfo}s\n     *        to be merged. */\n    public OneMerge(List<SegmentCommitInfo> segments) {\n      if (0 == segments.size()) {\n        throw new RuntimeException(\"segments must include at least one segment\");\n      }\n      // clone the list, as the in list may be based off original SegmentInfos and may be modified\n      this.segments = new ArrayList<>(segments);\n      int count = 0;\n      for(SegmentCommitInfo info : segments) {\n        count += info.info.getDocCount();\n      }\n      totalDocCount = count;\n\n      rateLimiter = new MergeRateLimiter(this);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1ee9437ba5a8297220428d48a6bb823d1fcd57b","date":1489137809,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#OneMerge(List[SegmentCommitInfo]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#OneMerge(List[SegmentCommitInfo]).mjava","sourceNew":"    /** Sole constructor.\n     * @param segments List of {@link SegmentCommitInfo}s\n     *        to be merged. */\n    public OneMerge(List<SegmentCommitInfo> segments) {\n      if (0 == segments.size()) {\n        throw new RuntimeException(\"segments must include at least one segment\");\n      }\n      // clone the list, as the in list may be based off original SegmentInfos and may be modified\n      this.segments = new ArrayList<>(segments);\n      int count = 0;\n      for(SegmentCommitInfo info : segments) {\n        count += info.info.maxDoc();\n      }\n      totalMaxDoc = count;\n\n      mergeProgress = new OneMergeProgress();\n    }\n\n","sourceOld":"    /** Sole constructor.\n     * @param segments List of {@link SegmentCommitInfo}s\n     *        to be merged. */\n    public OneMerge(List<SegmentCommitInfo> segments) {\n      if (0 == segments.size()) {\n        throw new RuntimeException(\"segments must include at least one segment\");\n      }\n      // clone the list, as the in list may be based off original SegmentInfos and may be modified\n      this.segments = new ArrayList<>(segments);\n      int count = 0;\n      for(SegmentCommitInfo info : segments) {\n        count += info.info.maxDoc();\n      }\n      totalMaxDoc = count;\n\n      rateLimiter = new MergeRateLimiter(this);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af4f318fc7955d8e4e40cdf4a8a93931004fe7c0","date":1592426892,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#OneMerge(List[SegmentCommitInfo]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#OneMerge(List[SegmentCommitInfo]).mjava","sourceNew":"    /** Sole constructor.\n     * @param segments List of {@link SegmentCommitInfo}s\n     *        to be merged. */\n    public OneMerge(List<SegmentCommitInfo> segments) {\n      if (0 == segments.size()) {\n        throw new RuntimeException(\"segments must include at least one segment\");\n      }\n      // clone the list, as the in list may be based off original SegmentInfos and may be modified\n      this.segments = List.copyOf(segments);\n      totalMaxDoc = segments.stream().mapToInt(i -> i.info.maxDoc()).sum();\n      mergeProgress = new OneMergeProgress();\n    }\n\n","sourceOld":"    /** Sole constructor.\n     * @param segments List of {@link SegmentCommitInfo}s\n     *        to be merged. */\n    public OneMerge(List<SegmentCommitInfo> segments) {\n      if (0 == segments.size()) {\n        throw new RuntimeException(\"segments must include at least one segment\");\n      }\n      // clone the list, as the in list may be based off original SegmentInfos and may be modified\n      this.segments = new ArrayList<>(segments);\n      int count = 0;\n      for(SegmentCommitInfo info : segments) {\n        count += info.info.maxDoc();\n      }\n      totalMaxDoc = count;\n\n      mergeProgress = new OneMergeProgress();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2a23476693f2bd9a4b44cc3187c429a2e21dac2","date":1593289545,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#OneMerge(List[SegmentCommitInfo]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergePolicy.OneMerge#OneMerge(List[SegmentCommitInfo]).mjava","sourceNew":"    /** Sole constructor.\n     * @param segments List of {@link SegmentCommitInfo}s\n     *        to be merged. */\n    public OneMerge(List<SegmentCommitInfo> segments) {\n      if (0 == segments.size()) {\n        throw new RuntimeException(\"segments must include at least one segment\");\n      }\n      // clone the list, as the in list may be based off original SegmentInfos and may be modified\n      this.segments = List.copyOf(segments);\n      totalMaxDoc = segments.stream().mapToInt(i -> i.info.maxDoc()).sum();\n      mergeProgress = new OneMergeProgress();\n      mergeReaders = List.of();\n    }\n\n","sourceOld":"    /** Sole constructor.\n     * @param segments List of {@link SegmentCommitInfo}s\n     *        to be merged. */\n    public OneMerge(List<SegmentCommitInfo> segments) {\n      if (0 == segments.size()) {\n        throw new RuntimeException(\"segments must include at least one segment\");\n      }\n      // clone the list, as the in list may be based off original SegmentInfos and may be modified\n      this.segments = List.copyOf(segments);\n      totalMaxDoc = segments.stream().mapToInt(i -> i.info.maxDoc()).sum();\n      mergeProgress = new OneMergeProgress();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55980207f1977bd1463465de1659b821347e2fa8":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","39cc7fae4e4c6be7c74434527ee9852592db649f"],"b0267c69e2456a3477a1ad785723f2135da3117e":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"c1ee9437ba5a8297220428d48a6bb823d1fcd57b":["b0267c69e2456a3477a1ad785723f2135da3117e"],"af4f318fc7955d8e4e40cdf4a8a93931004fe7c0":["c1ee9437ba5a8297220428d48a6bb823d1fcd57b"],"c2a23476693f2bd9a4b44cc3187c429a2e21dac2":["af4f318fc7955d8e4e40cdf4a8a93931004fe7c0"],"39cc7fae4e4c6be7c74434527ee9852592db649f":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["5faf65b6692f15cca0f87bf8666c87899afc619f","b0267c69e2456a3477a1ad785723f2135da3117e"],"b06445ae1731e049327712db0454e5643ca9b7fe":["5faf65b6692f15cca0f87bf8666c87899afc619f","b0267c69e2456a3477a1ad785723f2135da3117e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5faf65b6692f15cca0f87bf8666c87899afc619f":["39cc7fae4e4c6be7c74434527ee9852592db649f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c2a23476693f2bd9a4b44cc3187c429a2e21dac2"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["55980207f1977bd1463465de1659b821347e2fa8","39cc7fae4e4c6be7c74434527ee9852592db649f"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"55980207f1977bd1463465de1659b821347e2fa8":[],"b0267c69e2456a3477a1ad785723f2135da3117e":["c1ee9437ba5a8297220428d48a6bb823d1fcd57b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe"],"c1ee9437ba5a8297220428d48a6bb823d1fcd57b":["af4f318fc7955d8e4e40cdf4a8a93931004fe7c0"],"af4f318fc7955d8e4e40cdf4a8a93931004fe7c0":["c2a23476693f2bd9a4b44cc3187c429a2e21dac2"],"39cc7fae4e4c6be7c74434527ee9852592db649f":["55980207f1977bd1463465de1659b821347e2fa8","5faf65b6692f15cca0f87bf8666c87899afc619f"],"c2a23476693f2bd9a4b44cc3187c429a2e21dac2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b06445ae1731e049327712db0454e5643ca9b7fe":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["b0267c69e2456a3477a1ad785723f2135da3117e","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}