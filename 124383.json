{"path":"lucene/core/src/java/org/apache/lucene/index/MultiPointValues#get(IndexReader).mjava","commits":[{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiPointValues#get(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiDimensionalValues#get(IndexReader).mjava","sourceNew":"  public static PointValues get(IndexReader r) {\n    final List<LeafReaderContext> leaves = r.leaves();\n    final int size = leaves.size();\n    if (size == 0) {\n      return null;\n    } else if (size == 1) {\n      return leaves.get(0).reader().getPointValues();\n    }\n\n    List<PointValues> values = new ArrayList<>();\n    List<Integer> docBases = new ArrayList<>();\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = leaves.get(i);\n      PointValues v = context.reader().getPointValues();\n      if (v != null) {\n        values.add(v);\n        docBases.add(context.docBase);\n      }\n    }\n\n    if (values.isEmpty()) {\n      return null;\n    }\n\n    return new MultiPointValues(values, docBases);\n  }\n\n","sourceOld":"  public static DimensionalValues get(IndexReader r) {\n    final List<LeafReaderContext> leaves = r.leaves();\n    final int size = leaves.size();\n    if (size == 0) {\n      return null;\n    } else if (size == 1) {\n      return leaves.get(0).reader().getDimensionalValues();\n    }\n\n    List<DimensionalValues> values = new ArrayList<>();\n    List<Integer> docBases = new ArrayList<>();\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = leaves.get(i);\n      DimensionalValues v = context.reader().getDimensionalValues();\n      if (v != null) {\n        values.add(v);\n        docBases.add(context.docBase);\n      }\n    }\n\n    if (values.isEmpty()) {\n      return null;\n    }\n\n    return new MultiDimensionalValues(values, docBases);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"270881512f74569f7bc71bfe95534b337d53a60b","date":1454112544,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiPointValues#get(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiPointValues#get(IndexReader).mjava","sourceNew":"  /** Returns a {@link PointValues} merging all point values from the provided reader. */\n  public static PointValues get(IndexReader r) {\n    final List<LeafReaderContext> leaves = r.leaves();\n    final int size = leaves.size();\n    if (size == 0) {\n      return null;\n    } else if (size == 1) {\n      return leaves.get(0).reader().getPointValues();\n    }\n\n    List<PointValues> values = new ArrayList<>();\n    List<Integer> docBases = new ArrayList<>();\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = leaves.get(i);\n      PointValues v = context.reader().getPointValues();\n      if (v != null) {\n        values.add(v);\n        docBases.add(context.docBase);\n      }\n    }\n\n    if (values.isEmpty()) {\n      return null;\n    }\n\n    return new MultiPointValues(values, docBases);\n  }\n\n","sourceOld":"  public static PointValues get(IndexReader r) {\n    final List<LeafReaderContext> leaves = r.leaves();\n    final int size = leaves.size();\n    if (size == 0) {\n      return null;\n    } else if (size == 1) {\n      return leaves.get(0).reader().getPointValues();\n    }\n\n    List<PointValues> values = new ArrayList<>();\n    List<Integer> docBases = new ArrayList<>();\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = leaves.get(i);\n      PointValues v = context.reader().getPointValues();\n      if (v != null) {\n        values.add(v);\n        docBases.add(context.docBase);\n      }\n    }\n\n    if (values.isEmpty()) {\n      return null;\n    }\n\n    return new MultiPointValues(values, docBases);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d15e34266d75e4e8b95da046cd0afc812367b38","date":1454246129,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiPointValues#get(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiPointValues#get(IndexReader).mjava","sourceNew":"  /** Returns a {@link PointValues} merging all point values from the provided reader. */\n  public static PointValues get(IndexReader r) {\n    final List<LeafReaderContext> leaves = r.leaves();\n    final int size = leaves.size();\n    if (size == 0) {\n      return null;\n    } else if (size == 1) {\n      return leaves.get(0).reader().getPointValues();\n    }\n\n    List<PointValues> values = new ArrayList<>();\n    List<Integer> docBases = new ArrayList<>();\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = leaves.get(i);\n      PointValues v = context.reader().getPointValues();\n      if (v != null) {\n        values.add(v);\n        docBases.add(context.docBase);\n      }\n    }\n\n    if (values.isEmpty()) {\n      return null;\n    }\n\n    return new MultiPointValues(values, docBases);\n  }\n\n","sourceOld":"  public static PointValues get(IndexReader r) {\n    final List<LeafReaderContext> leaves = r.leaves();\n    final int size = leaves.size();\n    if (size == 0) {\n      return null;\n    } else if (size == 1) {\n      return leaves.get(0).reader().getPointValues();\n    }\n\n    List<PointValues> values = new ArrayList<>();\n    List<Integer> docBases = new ArrayList<>();\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = leaves.get(i);\n      PointValues v = context.reader().getPointValues();\n      if (v != null) {\n        values.add(v);\n        docBases.add(context.docBase);\n      }\n    }\n\n    if (values.isEmpty()) {\n      return null;\n    }\n\n    return new MultiPointValues(values, docBases);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiPointValues#get(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiPointValues#get(IndexReader).mjava","sourceNew":"  /** Returns a {@link PointValues} merging all point values from the provided reader. */\n  public static PointValues get(IndexReader r) {\n    final List<LeafReaderContext> leaves = r.leaves();\n    final int size = leaves.size();\n    if (size == 0) {\n      return null;\n    } else if (size == 1) {\n      return leaves.get(0).reader().getPointValues();\n    }\n\n    List<PointValues> values = new ArrayList<>();\n    List<Integer> docBases = new ArrayList<>();\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = leaves.get(i);\n      PointValues v = context.reader().getPointValues();\n      if (v != null) {\n        values.add(v);\n        docBases.add(context.docBase);\n      }\n    }\n\n    if (values.isEmpty()) {\n      return null;\n    }\n\n    return new MultiPointValues(values, docBases);\n  }\n\n","sourceOld":"  public static PointValues get(IndexReader r) {\n    final List<LeafReaderContext> leaves = r.leaves();\n    final int size = leaves.size();\n    if (size == 0) {\n      return null;\n    } else if (size == 1) {\n      return leaves.get(0).reader().getPointValues();\n    }\n\n    List<PointValues> values = new ArrayList<>();\n    List<Integer> docBases = new ArrayList<>();\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = leaves.get(i);\n      PointValues v = context.reader().getPointValues();\n      if (v != null) {\n        values.add(v);\n        docBases.add(context.docBase);\n      }\n    }\n\n    if (values.isEmpty()) {\n      return null;\n    }\n\n    return new MultiPointValues(values, docBases);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ace65b8212d5d9bbe03dcb2d29f44afd2b405bec","date":1456957206,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiPointValues#get(IndexReader).mjava","sourceNew":null,"sourceOld":"  /** Returns a {@link PointValues} merging all point values from the provided reader. */\n  public static PointValues get(IndexReader r) {\n    final List<LeafReaderContext> leaves = r.leaves();\n    final int size = leaves.size();\n    if (size == 0) {\n      return null;\n    } else if (size == 1) {\n      return leaves.get(0).reader().getPointValues();\n    }\n\n    List<PointValues> values = new ArrayList<>();\n    List<Integer> docBases = new ArrayList<>();\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = leaves.get(i);\n      PointValues v = context.reader().getPointValues();\n      if (v != null) {\n        values.add(v);\n        docBases.add(context.docBase);\n      }\n    }\n\n    if (values.isEmpty()) {\n      return null;\n    }\n\n    return new MultiPointValues(values, docBases);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"879e8cf5ab626b9bf29f1ef603e3a28601fcb1a7","date":1456959208,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiPointValues#get(IndexReader).mjava","sourceNew":null,"sourceOld":"  /** Returns a {@link PointValues} merging all point values from the provided reader. */\n  public static PointValues get(IndexReader r) {\n    final List<LeafReaderContext> leaves = r.leaves();\n    final int size = leaves.size();\n    if (size == 0) {\n      return null;\n    } else if (size == 1) {\n      return leaves.get(0).reader().getPointValues();\n    }\n\n    List<PointValues> values = new ArrayList<>();\n    List<Integer> docBases = new ArrayList<>();\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = leaves.get(i);\n      PointValues v = context.reader().getPointValues();\n      if (v != null) {\n        values.add(v);\n        docBases.add(context.docBase);\n      }\n    }\n\n    if (values.isEmpty()) {\n      return null;\n    }\n\n    return new MultiPointValues(values, docBases);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiPointValues#get(IndexReader).mjava","sourceNew":null,"sourceOld":"  /** Returns a {@link PointValues} merging all point values from the provided reader. */\n  public static PointValues get(IndexReader r) {\n    final List<LeafReaderContext> leaves = r.leaves();\n    final int size = leaves.size();\n    if (size == 0) {\n      return null;\n    } else if (size == 1) {\n      return leaves.get(0).reader().getPointValues();\n    }\n\n    List<PointValues> values = new ArrayList<>();\n    List<Integer> docBases = new ArrayList<>();\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = leaves.get(i);\n      PointValues v = context.reader().getPointValues();\n      if (v != null) {\n        values.add(v);\n        docBases.add(context.docBase);\n      }\n    }\n\n    if (values.isEmpty()) {\n      return null;\n    }\n\n    return new MultiPointValues(values, docBases);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"270881512f74569f7bc71bfe95534b337d53a60b":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","8d15e34266d75e4e8b95da046cd0afc812367b38"],"879e8cf5ab626b9bf29f1ef603e3a28601fcb1a7":["8d15e34266d75e4e8b95da046cd0afc812367b38"],"ace65b8212d5d9bbe03dcb2d29f44afd2b405bec":["8d15e34266d75e4e8b95da046cd0afc812367b38"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["8d15e34266d75e4e8b95da046cd0afc812367b38","879e8cf5ab626b9bf29f1ef603e3a28601fcb1a7"],"8d15e34266d75e4e8b95da046cd0afc812367b38":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","270881512f74569f7bc71bfe95534b337d53a60b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["270881512f74569f7bc71bfe95534b337d53a60b","1e6acbaae7af722f17204ceccf0f7db5753eccf3","8d15e34266d75e4e8b95da046cd0afc812367b38"],"270881512f74569f7bc71bfe95534b337d53a60b":["8d15e34266d75e4e8b95da046cd0afc812367b38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"879e8cf5ab626b9bf29f1ef603e3a28601fcb1a7":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"ace65b8212d5d9bbe03dcb2d29f44afd2b405bec":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8d15e34266d75e4e8b95da046cd0afc812367b38":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","879e8cf5ab626b9bf29f1ef603e3a28601fcb1a7","ace65b8212d5d9bbe03dcb2d29f44afd2b405bec","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","ace65b8212d5d9bbe03dcb2d29f44afd2b405bec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}