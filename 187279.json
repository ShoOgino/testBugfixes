{"path":"solr/core/src/java/org/apache/solr/schema/SimplePreAnalyzedParser#toFormattedString(Field).mjava","commits":[{"id":"232d48b2fd10ac5189a0ac4480ace7421be9de93","date":1334848212,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SimplePreAnalyzedParser#toFormattedString(Field).mjava","pathOld":"/dev/null","sourceNew":"  public String toFormattedString(Field f) throws IOException {\n    StringBuilder sb = new StringBuilder();\n    sb.append(VERSION + \" \");\n    if (f.fieldType().stored()) {\n      String s = f.stringValue();\n      if (s != null) {\n        // encode the equals sign\n        s = s.replaceAll(\"=\", \"\\\\=\");\n        sb.append('=');\n        sb.append(s);\n        sb.append('=');\n      }\n    }\n    TokenStream ts = f.tokenStreamValue();\n    if (ts != null) {\n      StringBuilder tok = new StringBuilder();\n      boolean next = false;\n      while (ts.incrementToken()) {\n        if (next) {\n          sb.append(' ');\n        } else {\n          next = true;\n        }\n        tok.setLength(0);\n        Iterator<Class<? extends Attribute>> it = ts.getAttributeClassesIterator();\n        String cTerm = null;\n        String tTerm = null;\n        while (it.hasNext()) {\n          Class<? extends Attribute> cl = it.next();\n          if (!ts.hasAttribute(cl)) {\n            continue;\n          }\n          Attribute att = ts.getAttribute(cl);\n          if (cl.isAssignableFrom(CharTermAttribute.class)) {\n            CharTermAttribute catt = (CharTermAttribute)att;\n            cTerm = escape(catt.buffer(), catt.length());\n          } else if (cl.isAssignableFrom(TermToBytesRefAttribute.class)) {\n            TermToBytesRefAttribute tatt = (TermToBytesRefAttribute)att;\n            char[] tTermChars = tatt.getBytesRef().utf8ToString().toCharArray();\n            tTerm = escape(tTermChars, tTermChars.length);\n          } else {\n            if (tok.length() > 0) tok.append(',');\n            if (cl.isAssignableFrom(FlagsAttribute.class)) {\n              tok.append(\"f=\" + Integer.toHexString(((FlagsAttribute)att).getFlags()));\n            } else if (cl.isAssignableFrom(OffsetAttribute.class)) {\n              tok.append(\"s=\" + ((OffsetAttribute)att).startOffset() + \",e=\" + ((OffsetAttribute)att).endOffset());\n            } else if (cl.isAssignableFrom(PayloadAttribute.class)) {\n              Payload p = ((PayloadAttribute)att).getPayload();\n              if (p != null && p.length() > 0) {\n                tok.append(\"p=\" + bytesToHex(p.getData(), p.getOffset(), p.length()));\n              } else if (tok.length() > 0) {\n                tok.setLength(tok.length() - 1); // remove the last comma\n              }\n            } else if (cl.isAssignableFrom(PositionIncrementAttribute.class)) {\n              tok.append(\"i=\" + ((PositionIncrementAttribute)att).getPositionIncrement());\n            } else if (cl.isAssignableFrom(TypeAttribute.class)) {\n              tok.append(\"y=\" + escape(((TypeAttribute)att).type()));\n            } else {\n              \n              tok.append(cl.getName() + \"=\" + escape(att.toString()));\n            }\n          }\n        }\n        String term = null;\n        if (cTerm != null) {\n          term = cTerm;\n        } else {\n          term = tTerm;\n        }\n        if (term != null && term.length() > 0) {\n          if (tok.length() > 0) {\n            tok.insert(0, term + \",\");\n          } else {\n            tok.insert(0, term);\n          }\n        }\n        sb.append(tok);\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76fa9933adb0556e752e8af9734c4d0ae14622ff","date":1339178321,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SimplePreAnalyzedParser#toFormattedString(Field).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SimplePreAnalyzedParser#toFormattedString(Field).mjava","sourceNew":"  public String toFormattedString(Field f) throws IOException {\n    StringBuilder sb = new StringBuilder();\n    sb.append(VERSION + \" \");\n    if (f.fieldType().stored()) {\n      String s = f.stringValue();\n      if (s != null) {\n        // encode the equals sign\n        s = s.replaceAll(\"=\", \"\\\\=\");\n        sb.append('=');\n        sb.append(s);\n        sb.append('=');\n      }\n    }\n    TokenStream ts = f.tokenStreamValue();\n    if (ts != null) {\n      StringBuilder tok = new StringBuilder();\n      boolean next = false;\n      while (ts.incrementToken()) {\n        if (next) {\n          sb.append(' ');\n        } else {\n          next = true;\n        }\n        tok.setLength(0);\n        Iterator<Class<? extends Attribute>> it = ts.getAttributeClassesIterator();\n        String cTerm = null;\n        String tTerm = null;\n        while (it.hasNext()) {\n          Class<? extends Attribute> cl = it.next();\n          if (!ts.hasAttribute(cl)) {\n            continue;\n          }\n          Attribute att = ts.getAttribute(cl);\n          if (cl.isAssignableFrom(CharTermAttribute.class)) {\n            CharTermAttribute catt = (CharTermAttribute)att;\n            cTerm = escape(catt.buffer(), catt.length());\n          } else if (cl.isAssignableFrom(TermToBytesRefAttribute.class)) {\n            TermToBytesRefAttribute tatt = (TermToBytesRefAttribute)att;\n            char[] tTermChars = tatt.getBytesRef().utf8ToString().toCharArray();\n            tTerm = escape(tTermChars, tTermChars.length);\n          } else {\n            if (tok.length() > 0) tok.append(',');\n            if (cl.isAssignableFrom(FlagsAttribute.class)) {\n              tok.append(\"f=\" + Integer.toHexString(((FlagsAttribute)att).getFlags()));\n            } else if (cl.isAssignableFrom(OffsetAttribute.class)) {\n              tok.append(\"s=\" + ((OffsetAttribute)att).startOffset() + \",e=\" + ((OffsetAttribute)att).endOffset());\n            } else if (cl.isAssignableFrom(PayloadAttribute.class)) {\n              BytesRef p = ((PayloadAttribute)att).getPayload();\n              if (p != null && p.length > 0) {\n                tok.append(\"p=\" + bytesToHex(p.bytes, p.offset, p.length));\n              } else if (tok.length() > 0) {\n                tok.setLength(tok.length() - 1); // remove the last comma\n              }\n            } else if (cl.isAssignableFrom(PositionIncrementAttribute.class)) {\n              tok.append(\"i=\" + ((PositionIncrementAttribute)att).getPositionIncrement());\n            } else if (cl.isAssignableFrom(TypeAttribute.class)) {\n              tok.append(\"y=\" + escape(((TypeAttribute)att).type()));\n            } else {\n              \n              tok.append(cl.getName() + \"=\" + escape(att.toString()));\n            }\n          }\n        }\n        String term = null;\n        if (cTerm != null) {\n          term = cTerm;\n        } else {\n          term = tTerm;\n        }\n        if (term != null && term.length() > 0) {\n          if (tok.length() > 0) {\n            tok.insert(0, term + \",\");\n          } else {\n            tok.insert(0, term);\n          }\n        }\n        sb.append(tok);\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  public String toFormattedString(Field f) throws IOException {\n    StringBuilder sb = new StringBuilder();\n    sb.append(VERSION + \" \");\n    if (f.fieldType().stored()) {\n      String s = f.stringValue();\n      if (s != null) {\n        // encode the equals sign\n        s = s.replaceAll(\"=\", \"\\\\=\");\n        sb.append('=');\n        sb.append(s);\n        sb.append('=');\n      }\n    }\n    TokenStream ts = f.tokenStreamValue();\n    if (ts != null) {\n      StringBuilder tok = new StringBuilder();\n      boolean next = false;\n      while (ts.incrementToken()) {\n        if (next) {\n          sb.append(' ');\n        } else {\n          next = true;\n        }\n        tok.setLength(0);\n        Iterator<Class<? extends Attribute>> it = ts.getAttributeClassesIterator();\n        String cTerm = null;\n        String tTerm = null;\n        while (it.hasNext()) {\n          Class<? extends Attribute> cl = it.next();\n          if (!ts.hasAttribute(cl)) {\n            continue;\n          }\n          Attribute att = ts.getAttribute(cl);\n          if (cl.isAssignableFrom(CharTermAttribute.class)) {\n            CharTermAttribute catt = (CharTermAttribute)att;\n            cTerm = escape(catt.buffer(), catt.length());\n          } else if (cl.isAssignableFrom(TermToBytesRefAttribute.class)) {\n            TermToBytesRefAttribute tatt = (TermToBytesRefAttribute)att;\n            char[] tTermChars = tatt.getBytesRef().utf8ToString().toCharArray();\n            tTerm = escape(tTermChars, tTermChars.length);\n          } else {\n            if (tok.length() > 0) tok.append(',');\n            if (cl.isAssignableFrom(FlagsAttribute.class)) {\n              tok.append(\"f=\" + Integer.toHexString(((FlagsAttribute)att).getFlags()));\n            } else if (cl.isAssignableFrom(OffsetAttribute.class)) {\n              tok.append(\"s=\" + ((OffsetAttribute)att).startOffset() + \",e=\" + ((OffsetAttribute)att).endOffset());\n            } else if (cl.isAssignableFrom(PayloadAttribute.class)) {\n              Payload p = ((PayloadAttribute)att).getPayload();\n              if (p != null && p.length() > 0) {\n                tok.append(\"p=\" + bytesToHex(p.getData(), p.getOffset(), p.length()));\n              } else if (tok.length() > 0) {\n                tok.setLength(tok.length() - 1); // remove the last comma\n              }\n            } else if (cl.isAssignableFrom(PositionIncrementAttribute.class)) {\n              tok.append(\"i=\" + ((PositionIncrementAttribute)att).getPositionIncrement());\n            } else if (cl.isAssignableFrom(TypeAttribute.class)) {\n              tok.append(\"y=\" + escape(((TypeAttribute)att).type()));\n            } else {\n              \n              tok.append(cl.getName() + \"=\" + escape(att.toString()));\n            }\n          }\n        }\n        String term = null;\n        if (cTerm != null) {\n          term = cTerm;\n        } else {\n          term = tTerm;\n        }\n        if (term != null && term.length() > 0) {\n          if (tok.length() > 0) {\n            tok.insert(0, term + \",\");\n          } else {\n            tok.insert(0, term);\n          }\n        }\n        sb.append(tok);\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SimplePreAnalyzedParser#toFormattedString(Field).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SimplePreAnalyzedParser#toFormattedString(Field).mjava","sourceNew":"  @Override\n  public String toFormattedString(Field f) throws IOException {\n    StringBuilder sb = new StringBuilder();\n    sb.append(VERSION + \" \");\n    if (f.fieldType().stored()) {\n      String s = f.stringValue();\n      if (s != null) {\n        // encode the equals sign\n        s = s.replaceAll(\"=\", \"\\\\=\");\n        sb.append('=');\n        sb.append(s);\n        sb.append('=');\n      }\n    }\n    TokenStream ts = f.tokenStreamValue();\n    if (ts != null) {\n      StringBuilder tok = new StringBuilder();\n      boolean next = false;\n      while (ts.incrementToken()) {\n        if (next) {\n          sb.append(' ');\n        } else {\n          next = true;\n        }\n        tok.setLength(0);\n        Iterator<Class<? extends Attribute>> it = ts.getAttributeClassesIterator();\n        String cTerm = null;\n        String tTerm = null;\n        while (it.hasNext()) {\n          Class<? extends Attribute> cl = it.next();\n          if (!ts.hasAttribute(cl)) {\n            continue;\n          }\n          Attribute att = ts.getAttribute(cl);\n          if (cl.isAssignableFrom(CharTermAttribute.class)) {\n            CharTermAttribute catt = (CharTermAttribute)att;\n            cTerm = escape(catt.buffer(), catt.length());\n          } else if (cl.isAssignableFrom(TermToBytesRefAttribute.class)) {\n            TermToBytesRefAttribute tatt = (TermToBytesRefAttribute)att;\n            char[] tTermChars = tatt.getBytesRef().utf8ToString().toCharArray();\n            tTerm = escape(tTermChars, tTermChars.length);\n          } else {\n            if (tok.length() > 0) tok.append(',');\n            if (cl.isAssignableFrom(FlagsAttribute.class)) {\n              tok.append(\"f=\" + Integer.toHexString(((FlagsAttribute)att).getFlags()));\n            } else if (cl.isAssignableFrom(OffsetAttribute.class)) {\n              tok.append(\"s=\" + ((OffsetAttribute)att).startOffset() + \",e=\" + ((OffsetAttribute)att).endOffset());\n            } else if (cl.isAssignableFrom(PayloadAttribute.class)) {\n              BytesRef p = ((PayloadAttribute)att).getPayload();\n              if (p != null && p.length > 0) {\n                tok.append(\"p=\" + bytesToHex(p.bytes, p.offset, p.length));\n              } else if (tok.length() > 0) {\n                tok.setLength(tok.length() - 1); // remove the last comma\n              }\n            } else if (cl.isAssignableFrom(PositionIncrementAttribute.class)) {\n              tok.append(\"i=\" + ((PositionIncrementAttribute)att).getPositionIncrement());\n            } else if (cl.isAssignableFrom(TypeAttribute.class)) {\n              tok.append(\"y=\" + escape(((TypeAttribute)att).type()));\n            } else {\n              \n              tok.append(cl.getName() + \"=\" + escape(att.toString()));\n            }\n          }\n        }\n        String term = null;\n        if (cTerm != null) {\n          term = cTerm;\n        } else {\n          term = tTerm;\n        }\n        if (term != null && term.length() > 0) {\n          if (tok.length() > 0) {\n            tok.insert(0, term + \",\");\n          } else {\n            tok.insert(0, term);\n          }\n        }\n        sb.append(tok);\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  public String toFormattedString(Field f) throws IOException {\n    StringBuilder sb = new StringBuilder();\n    sb.append(VERSION + \" \");\n    if (f.fieldType().stored()) {\n      String s = f.stringValue();\n      if (s != null) {\n        // encode the equals sign\n        s = s.replaceAll(\"=\", \"\\\\=\");\n        sb.append('=');\n        sb.append(s);\n        sb.append('=');\n      }\n    }\n    TokenStream ts = f.tokenStreamValue();\n    if (ts != null) {\n      StringBuilder tok = new StringBuilder();\n      boolean next = false;\n      while (ts.incrementToken()) {\n        if (next) {\n          sb.append(' ');\n        } else {\n          next = true;\n        }\n        tok.setLength(0);\n        Iterator<Class<? extends Attribute>> it = ts.getAttributeClassesIterator();\n        String cTerm = null;\n        String tTerm = null;\n        while (it.hasNext()) {\n          Class<? extends Attribute> cl = it.next();\n          if (!ts.hasAttribute(cl)) {\n            continue;\n          }\n          Attribute att = ts.getAttribute(cl);\n          if (cl.isAssignableFrom(CharTermAttribute.class)) {\n            CharTermAttribute catt = (CharTermAttribute)att;\n            cTerm = escape(catt.buffer(), catt.length());\n          } else if (cl.isAssignableFrom(TermToBytesRefAttribute.class)) {\n            TermToBytesRefAttribute tatt = (TermToBytesRefAttribute)att;\n            char[] tTermChars = tatt.getBytesRef().utf8ToString().toCharArray();\n            tTerm = escape(tTermChars, tTermChars.length);\n          } else {\n            if (tok.length() > 0) tok.append(',');\n            if (cl.isAssignableFrom(FlagsAttribute.class)) {\n              tok.append(\"f=\" + Integer.toHexString(((FlagsAttribute)att).getFlags()));\n            } else if (cl.isAssignableFrom(OffsetAttribute.class)) {\n              tok.append(\"s=\" + ((OffsetAttribute)att).startOffset() + \",e=\" + ((OffsetAttribute)att).endOffset());\n            } else if (cl.isAssignableFrom(PayloadAttribute.class)) {\n              BytesRef p = ((PayloadAttribute)att).getPayload();\n              if (p != null && p.length > 0) {\n                tok.append(\"p=\" + bytesToHex(p.bytes, p.offset, p.length));\n              } else if (tok.length() > 0) {\n                tok.setLength(tok.length() - 1); // remove the last comma\n              }\n            } else if (cl.isAssignableFrom(PositionIncrementAttribute.class)) {\n              tok.append(\"i=\" + ((PositionIncrementAttribute)att).getPositionIncrement());\n            } else if (cl.isAssignableFrom(TypeAttribute.class)) {\n              tok.append(\"y=\" + escape(((TypeAttribute)att).type()));\n            } else {\n              \n              tok.append(cl.getName() + \"=\" + escape(att.toString()));\n            }\n          }\n        }\n        String term = null;\n        if (cTerm != null) {\n          term = cTerm;\n        } else {\n          term = tTerm;\n        }\n        if (term != null && term.length() > 0) {\n          if (tok.length() > 0) {\n            tok.insert(0, term + \",\");\n          } else {\n            tok.insert(0, term);\n          }\n        }\n        sb.append(tok);\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/SimplePreAnalyzedParser#toFormattedString(Field).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SimplePreAnalyzedParser#toFormattedString(Field).mjava","sourceNew":"  @Override\n  public String toFormattedString(Field f) throws IOException {\n    StringBuilder sb = new StringBuilder();\n    sb.append(VERSION + \" \");\n    if (f.fieldType().stored()) {\n      String s = f.stringValue();\n      if (s != null) {\n        // encode the equals sign\n        s = s.replaceAll(\"=\", \"\\\\=\");\n        sb.append('=');\n        sb.append(s);\n        sb.append('=');\n      }\n    }\n    TokenStream ts = f.tokenStreamValue();\n    if (ts != null) {\n      StringBuilder tok = new StringBuilder();\n      boolean next = false;\n      while (ts.incrementToken()) {\n        if (next) {\n          sb.append(' ');\n        } else {\n          next = true;\n        }\n        tok.setLength(0);\n        Iterator<Class<? extends Attribute>> it = ts.getAttributeClassesIterator();\n        String cTerm = null;\n        String tTerm = null;\n        while (it.hasNext()) {\n          Class<? extends Attribute> cl = it.next();\n          if (!ts.hasAttribute(cl)) {\n            continue;\n          }\n          Attribute att = ts.getAttribute(cl);\n          if (cl.isAssignableFrom(CharTermAttribute.class)) {\n            CharTermAttribute catt = (CharTermAttribute)att;\n            cTerm = escape(catt.buffer(), catt.length());\n          } else if (cl.isAssignableFrom(TermToBytesRefAttribute.class)) {\n            TermToBytesRefAttribute tatt = (TermToBytesRefAttribute)att;\n            char[] tTermChars = tatt.getBytesRef().utf8ToString().toCharArray();\n            tTerm = escape(tTermChars, tTermChars.length);\n          } else {\n            if (tok.length() > 0) tok.append(',');\n            if (cl.isAssignableFrom(FlagsAttribute.class)) {\n              tok.append(\"f=\" + Integer.toHexString(((FlagsAttribute)att).getFlags()));\n            } else if (cl.isAssignableFrom(OffsetAttribute.class)) {\n              tok.append(\"s=\" + ((OffsetAttribute)att).startOffset() + \",e=\" + ((OffsetAttribute)att).endOffset());\n            } else if (cl.isAssignableFrom(PayloadAttribute.class)) {\n              BytesRef p = ((PayloadAttribute)att).getPayload();\n              if (p != null && p.length > 0) {\n                tok.append(\"p=\" + bytesToHex(p.bytes, p.offset, p.length));\n              } else if (tok.length() > 0) {\n                tok.setLength(tok.length() - 1); // remove the last comma\n              }\n            } else if (cl.isAssignableFrom(PositionIncrementAttribute.class)) {\n              tok.append(\"i=\" + ((PositionIncrementAttribute)att).getPositionIncrement());\n            } else if (cl.isAssignableFrom(TypeAttribute.class)) {\n              tok.append(\"y=\" + escape(((TypeAttribute)att).type()));\n            } else {\n              \n              tok.append(cl.getName() + \"=\" + escape(att.toString()));\n            }\n          }\n        }\n        String term = null;\n        if (cTerm != null) {\n          term = cTerm;\n        } else {\n          term = tTerm;\n        }\n        if (term != null && term.length() > 0) {\n          if (tok.length() > 0) {\n            tok.insert(0, term + \",\");\n          } else {\n            tok.insert(0, term);\n          }\n        }\n        sb.append(tok);\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  public String toFormattedString(Field f) throws IOException {\n    StringBuilder sb = new StringBuilder();\n    sb.append(VERSION + \" \");\n    if (f.fieldType().stored()) {\n      String s = f.stringValue();\n      if (s != null) {\n        // encode the equals sign\n        s = s.replaceAll(\"=\", \"\\\\=\");\n        sb.append('=');\n        sb.append(s);\n        sb.append('=');\n      }\n    }\n    TokenStream ts = f.tokenStreamValue();\n    if (ts != null) {\n      StringBuilder tok = new StringBuilder();\n      boolean next = false;\n      while (ts.incrementToken()) {\n        if (next) {\n          sb.append(' ');\n        } else {\n          next = true;\n        }\n        tok.setLength(0);\n        Iterator<Class<? extends Attribute>> it = ts.getAttributeClassesIterator();\n        String cTerm = null;\n        String tTerm = null;\n        while (it.hasNext()) {\n          Class<? extends Attribute> cl = it.next();\n          if (!ts.hasAttribute(cl)) {\n            continue;\n          }\n          Attribute att = ts.getAttribute(cl);\n          if (cl.isAssignableFrom(CharTermAttribute.class)) {\n            CharTermAttribute catt = (CharTermAttribute)att;\n            cTerm = escape(catt.buffer(), catt.length());\n          } else if (cl.isAssignableFrom(TermToBytesRefAttribute.class)) {\n            TermToBytesRefAttribute tatt = (TermToBytesRefAttribute)att;\n            char[] tTermChars = tatt.getBytesRef().utf8ToString().toCharArray();\n            tTerm = escape(tTermChars, tTermChars.length);\n          } else {\n            if (tok.length() > 0) tok.append(',');\n            if (cl.isAssignableFrom(FlagsAttribute.class)) {\n              tok.append(\"f=\" + Integer.toHexString(((FlagsAttribute)att).getFlags()));\n            } else if (cl.isAssignableFrom(OffsetAttribute.class)) {\n              tok.append(\"s=\" + ((OffsetAttribute)att).startOffset() + \",e=\" + ((OffsetAttribute)att).endOffset());\n            } else if (cl.isAssignableFrom(PayloadAttribute.class)) {\n              BytesRef p = ((PayloadAttribute)att).getPayload();\n              if (p != null && p.length > 0) {\n                tok.append(\"p=\" + bytesToHex(p.bytes, p.offset, p.length));\n              } else if (tok.length() > 0) {\n                tok.setLength(tok.length() - 1); // remove the last comma\n              }\n            } else if (cl.isAssignableFrom(PositionIncrementAttribute.class)) {\n              tok.append(\"i=\" + ((PositionIncrementAttribute)att).getPositionIncrement());\n            } else if (cl.isAssignableFrom(TypeAttribute.class)) {\n              tok.append(\"y=\" + escape(((TypeAttribute)att).type()));\n            } else {\n              \n              tok.append(cl.getName() + \"=\" + escape(att.toString()));\n            }\n          }\n        }\n        String term = null;\n        if (cTerm != null) {\n          term = cTerm;\n        } else {\n          term = tTerm;\n        }\n        if (term != null && term.length() > 0) {\n          if (tok.length() > 0) {\n            tok.insert(0, term + \",\");\n          } else {\n            tok.insert(0, term);\n          }\n        }\n        sb.append(tok);\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63241596de245e96a0a3c36c7b03eb92130b81db","date":1398708795,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SimplePreAnalyzedParser#toFormattedString(Field).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SimplePreAnalyzedParser#toFormattedString(Field).mjava","sourceNew":"  @Override\n  public String toFormattedString(Field f) throws IOException {\n    StringBuilder sb = new StringBuilder();\n    sb.append(VERSION + \" \");\n    if (f.fieldType().stored()) {\n      String s = f.stringValue();\n      if (s != null) {\n        // encode the equals sign\n        s = s.replaceAll(\"=\", \"\\\\=\");\n        sb.append('=');\n        sb.append(s);\n        sb.append('=');\n      }\n    }\n    TokenStream ts = f.tokenStreamValue();\n    if (ts != null) {\n      StringBuilder tok = new StringBuilder();\n      boolean next = false;\n      while (ts.incrementToken()) {\n        if (next) {\n          sb.append(' ');\n        } else {\n          next = true;\n        }\n        tok.setLength(0);\n        Iterator<Class<? extends Attribute>> it = ts.getAttributeClassesIterator();\n        String cTerm = null;\n        String tTerm = null;\n        while (it.hasNext()) {\n          Class<? extends Attribute> cl = it.next();\n          Attribute att = ts.getAttribute(cl);\n          if (att == null) {\n            continue;\n          }\n          if (cl.isAssignableFrom(CharTermAttribute.class)) {\n            CharTermAttribute catt = (CharTermAttribute)att;\n            cTerm = escape(catt.buffer(), catt.length());\n          } else if (cl.isAssignableFrom(TermToBytesRefAttribute.class)) {\n            TermToBytesRefAttribute tatt = (TermToBytesRefAttribute)att;\n            char[] tTermChars = tatt.getBytesRef().utf8ToString().toCharArray();\n            tTerm = escape(tTermChars, tTermChars.length);\n          } else {\n            if (tok.length() > 0) tok.append(',');\n            if (cl.isAssignableFrom(FlagsAttribute.class)) {\n              tok.append(\"f=\" + Integer.toHexString(((FlagsAttribute)att).getFlags()));\n            } else if (cl.isAssignableFrom(OffsetAttribute.class)) {\n              tok.append(\"s=\" + ((OffsetAttribute)att).startOffset() + \",e=\" + ((OffsetAttribute)att).endOffset());\n            } else if (cl.isAssignableFrom(PayloadAttribute.class)) {\n              BytesRef p = ((PayloadAttribute)att).getPayload();\n              if (p != null && p.length > 0) {\n                tok.append(\"p=\" + bytesToHex(p.bytes, p.offset, p.length));\n              } else if (tok.length() > 0) {\n                tok.setLength(tok.length() - 1); // remove the last comma\n              }\n            } else if (cl.isAssignableFrom(PositionIncrementAttribute.class)) {\n              tok.append(\"i=\" + ((PositionIncrementAttribute)att).getPositionIncrement());\n            } else if (cl.isAssignableFrom(TypeAttribute.class)) {\n              tok.append(\"y=\" + escape(((TypeAttribute)att).type()));\n            } else {\n              \n              tok.append(cl.getName() + \"=\" + escape(att.toString()));\n            }\n          }\n        }\n        String term = null;\n        if (cTerm != null) {\n          term = cTerm;\n        } else {\n          term = tTerm;\n        }\n        if (term != null && term.length() > 0) {\n          if (tok.length() > 0) {\n            tok.insert(0, term + \",\");\n          } else {\n            tok.insert(0, term);\n          }\n        }\n        sb.append(tok);\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toFormattedString(Field f) throws IOException {\n    StringBuilder sb = new StringBuilder();\n    sb.append(VERSION + \" \");\n    if (f.fieldType().stored()) {\n      String s = f.stringValue();\n      if (s != null) {\n        // encode the equals sign\n        s = s.replaceAll(\"=\", \"\\\\=\");\n        sb.append('=');\n        sb.append(s);\n        sb.append('=');\n      }\n    }\n    TokenStream ts = f.tokenStreamValue();\n    if (ts != null) {\n      StringBuilder tok = new StringBuilder();\n      boolean next = false;\n      while (ts.incrementToken()) {\n        if (next) {\n          sb.append(' ');\n        } else {\n          next = true;\n        }\n        tok.setLength(0);\n        Iterator<Class<? extends Attribute>> it = ts.getAttributeClassesIterator();\n        String cTerm = null;\n        String tTerm = null;\n        while (it.hasNext()) {\n          Class<? extends Attribute> cl = it.next();\n          if (!ts.hasAttribute(cl)) {\n            continue;\n          }\n          Attribute att = ts.getAttribute(cl);\n          if (cl.isAssignableFrom(CharTermAttribute.class)) {\n            CharTermAttribute catt = (CharTermAttribute)att;\n            cTerm = escape(catt.buffer(), catt.length());\n          } else if (cl.isAssignableFrom(TermToBytesRefAttribute.class)) {\n            TermToBytesRefAttribute tatt = (TermToBytesRefAttribute)att;\n            char[] tTermChars = tatt.getBytesRef().utf8ToString().toCharArray();\n            tTerm = escape(tTermChars, tTermChars.length);\n          } else {\n            if (tok.length() > 0) tok.append(',');\n            if (cl.isAssignableFrom(FlagsAttribute.class)) {\n              tok.append(\"f=\" + Integer.toHexString(((FlagsAttribute)att).getFlags()));\n            } else if (cl.isAssignableFrom(OffsetAttribute.class)) {\n              tok.append(\"s=\" + ((OffsetAttribute)att).startOffset() + \",e=\" + ((OffsetAttribute)att).endOffset());\n            } else if (cl.isAssignableFrom(PayloadAttribute.class)) {\n              BytesRef p = ((PayloadAttribute)att).getPayload();\n              if (p != null && p.length > 0) {\n                tok.append(\"p=\" + bytesToHex(p.bytes, p.offset, p.length));\n              } else if (tok.length() > 0) {\n                tok.setLength(tok.length() - 1); // remove the last comma\n              }\n            } else if (cl.isAssignableFrom(PositionIncrementAttribute.class)) {\n              tok.append(\"i=\" + ((PositionIncrementAttribute)att).getPositionIncrement());\n            } else if (cl.isAssignableFrom(TypeAttribute.class)) {\n              tok.append(\"y=\" + escape(((TypeAttribute)att).type()));\n            } else {\n              \n              tok.append(cl.getName() + \"=\" + escape(att.toString()));\n            }\n          }\n        }\n        String term = null;\n        if (cTerm != null) {\n          term = cTerm;\n        } else {\n          term = tTerm;\n        }\n        if (term != null && term.length() > 0) {\n          if (tok.length() > 0) {\n            tok.insert(0, term + \",\");\n          } else {\n            tok.insert(0, term);\n          }\n        }\n        sb.append(tok);\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3394716f52b34ab259ad5247e7595d9f9db6e935","date":1398791921,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/SimplePreAnalyzedParser#toFormattedString(Field).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SimplePreAnalyzedParser#toFormattedString(Field).mjava","sourceNew":"  @Override\n  public String toFormattedString(Field f) throws IOException {\n    StringBuilder sb = new StringBuilder();\n    sb.append(VERSION + \" \");\n    if (f.fieldType().stored()) {\n      String s = f.stringValue();\n      if (s != null) {\n        // encode the equals sign\n        s = s.replaceAll(\"=\", \"\\\\=\");\n        sb.append('=');\n        sb.append(s);\n        sb.append('=');\n      }\n    }\n    TokenStream ts = f.tokenStreamValue();\n    if (ts != null) {\n      StringBuilder tok = new StringBuilder();\n      boolean next = false;\n      while (ts.incrementToken()) {\n        if (next) {\n          sb.append(' ');\n        } else {\n          next = true;\n        }\n        tok.setLength(0);\n        Iterator<Class<? extends Attribute>> it = ts.getAttributeClassesIterator();\n        String cTerm = null;\n        String tTerm = null;\n        while (it.hasNext()) {\n          Class<? extends Attribute> cl = it.next();\n          Attribute att = ts.getAttribute(cl);\n          if (att == null) {\n            continue;\n          }\n          if (cl.isAssignableFrom(CharTermAttribute.class)) {\n            CharTermAttribute catt = (CharTermAttribute)att;\n            cTerm = escape(catt.buffer(), catt.length());\n          } else if (cl.isAssignableFrom(TermToBytesRefAttribute.class)) {\n            TermToBytesRefAttribute tatt = (TermToBytesRefAttribute)att;\n            char[] tTermChars = tatt.getBytesRef().utf8ToString().toCharArray();\n            tTerm = escape(tTermChars, tTermChars.length);\n          } else {\n            if (tok.length() > 0) tok.append(',');\n            if (cl.isAssignableFrom(FlagsAttribute.class)) {\n              tok.append(\"f=\" + Integer.toHexString(((FlagsAttribute)att).getFlags()));\n            } else if (cl.isAssignableFrom(OffsetAttribute.class)) {\n              tok.append(\"s=\" + ((OffsetAttribute)att).startOffset() + \",e=\" + ((OffsetAttribute)att).endOffset());\n            } else if (cl.isAssignableFrom(PayloadAttribute.class)) {\n              BytesRef p = ((PayloadAttribute)att).getPayload();\n              if (p != null && p.length > 0) {\n                tok.append(\"p=\" + bytesToHex(p.bytes, p.offset, p.length));\n              } else if (tok.length() > 0) {\n                tok.setLength(tok.length() - 1); // remove the last comma\n              }\n            } else if (cl.isAssignableFrom(PositionIncrementAttribute.class)) {\n              tok.append(\"i=\" + ((PositionIncrementAttribute)att).getPositionIncrement());\n            } else if (cl.isAssignableFrom(TypeAttribute.class)) {\n              tok.append(\"y=\" + escape(((TypeAttribute)att).type()));\n            } else {\n              \n              tok.append(cl.getName() + \"=\" + escape(att.toString()));\n            }\n          }\n        }\n        String term = null;\n        if (cTerm != null) {\n          term = cTerm;\n        } else {\n          term = tTerm;\n        }\n        if (term != null && term.length() > 0) {\n          if (tok.length() > 0) {\n            tok.insert(0, term + \",\");\n          } else {\n            tok.insert(0, term);\n          }\n        }\n        sb.append(tok);\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toFormattedString(Field f) throws IOException {\n    StringBuilder sb = new StringBuilder();\n    sb.append(VERSION + \" \");\n    if (f.fieldType().stored()) {\n      String s = f.stringValue();\n      if (s != null) {\n        // encode the equals sign\n        s = s.replaceAll(\"=\", \"\\\\=\");\n        sb.append('=');\n        sb.append(s);\n        sb.append('=');\n      }\n    }\n    TokenStream ts = f.tokenStreamValue();\n    if (ts != null) {\n      StringBuilder tok = new StringBuilder();\n      boolean next = false;\n      while (ts.incrementToken()) {\n        if (next) {\n          sb.append(' ');\n        } else {\n          next = true;\n        }\n        tok.setLength(0);\n        Iterator<Class<? extends Attribute>> it = ts.getAttributeClassesIterator();\n        String cTerm = null;\n        String tTerm = null;\n        while (it.hasNext()) {\n          Class<? extends Attribute> cl = it.next();\n          if (!ts.hasAttribute(cl)) {\n            continue;\n          }\n          Attribute att = ts.getAttribute(cl);\n          if (cl.isAssignableFrom(CharTermAttribute.class)) {\n            CharTermAttribute catt = (CharTermAttribute)att;\n            cTerm = escape(catt.buffer(), catt.length());\n          } else if (cl.isAssignableFrom(TermToBytesRefAttribute.class)) {\n            TermToBytesRefAttribute tatt = (TermToBytesRefAttribute)att;\n            char[] tTermChars = tatt.getBytesRef().utf8ToString().toCharArray();\n            tTerm = escape(tTermChars, tTermChars.length);\n          } else {\n            if (tok.length() > 0) tok.append(',');\n            if (cl.isAssignableFrom(FlagsAttribute.class)) {\n              tok.append(\"f=\" + Integer.toHexString(((FlagsAttribute)att).getFlags()));\n            } else if (cl.isAssignableFrom(OffsetAttribute.class)) {\n              tok.append(\"s=\" + ((OffsetAttribute)att).startOffset() + \",e=\" + ((OffsetAttribute)att).endOffset());\n            } else if (cl.isAssignableFrom(PayloadAttribute.class)) {\n              BytesRef p = ((PayloadAttribute)att).getPayload();\n              if (p != null && p.length > 0) {\n                tok.append(\"p=\" + bytesToHex(p.bytes, p.offset, p.length));\n              } else if (tok.length() > 0) {\n                tok.setLength(tok.length() - 1); // remove the last comma\n              }\n            } else if (cl.isAssignableFrom(PositionIncrementAttribute.class)) {\n              tok.append(\"i=\" + ((PositionIncrementAttribute)att).getPositionIncrement());\n            } else if (cl.isAssignableFrom(TypeAttribute.class)) {\n              tok.append(\"y=\" + escape(((TypeAttribute)att).type()));\n            } else {\n              \n              tok.append(cl.getName() + \"=\" + escape(att.toString()));\n            }\n          }\n        }\n        String term = null;\n        if (cTerm != null) {\n          term = cTerm;\n        } else {\n          term = tTerm;\n        }\n        if (term != null && term.length() > 0) {\n          if (tok.length() > 0) {\n            tok.insert(0, term + \",\");\n          } else {\n            tok.insert(0, term);\n          }\n        }\n        sb.append(tok);\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/SimplePreAnalyzedParser#toFormattedString(Field).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SimplePreAnalyzedParser#toFormattedString(Field).mjava","sourceNew":"  @Override\n  public String toFormattedString(Field f) throws IOException {\n    StringBuilder sb = new StringBuilder();\n    sb.append(VERSION + \" \");\n    if (f.fieldType().stored()) {\n      String s = f.stringValue();\n      if (s != null) {\n        // encode the equals sign\n        s = s.replaceAll(\"=\", \"\\\\=\");\n        sb.append('=');\n        sb.append(s);\n        sb.append('=');\n      }\n    }\n    TokenStream ts = f.tokenStreamValue();\n    if (ts != null) {\n      StringBuilder tok = new StringBuilder();\n      boolean next = false;\n      while (ts.incrementToken()) {\n        if (next) {\n          sb.append(' ');\n        } else {\n          next = true;\n        }\n        tok.setLength(0);\n        Iterator<Class<? extends Attribute>> it = ts.getAttributeClassesIterator();\n        String cTerm = null;\n        String tTerm = null;\n        while (it.hasNext()) {\n          Class<? extends Attribute> cl = it.next();\n          Attribute att = ts.getAttribute(cl);\n          if (att == null) {\n            continue;\n          }\n          if (cl.isAssignableFrom(CharTermAttribute.class)) {\n            CharTermAttribute catt = (CharTermAttribute)att;\n            cTerm = escape(catt.buffer(), catt.length());\n          } else if (cl.isAssignableFrom(TermToBytesRefAttribute.class)) {\n            TermToBytesRefAttribute tatt = (TermToBytesRefAttribute)att;\n            char[] tTermChars = tatt.getBytesRef().utf8ToString().toCharArray();\n            tTerm = escape(tTermChars, tTermChars.length);\n          } else {\n            if (tok.length() > 0) tok.append(',');\n            if (cl.isAssignableFrom(FlagsAttribute.class)) {\n              tok.append(\"f=\" + Integer.toHexString(((FlagsAttribute)att).getFlags()));\n            } else if (cl.isAssignableFrom(OffsetAttribute.class)) {\n              tok.append(\"s=\" + ((OffsetAttribute)att).startOffset() + \",e=\" + ((OffsetAttribute)att).endOffset());\n            } else if (cl.isAssignableFrom(PayloadAttribute.class)) {\n              BytesRef p = ((PayloadAttribute)att).getPayload();\n              if (p != null && p.length > 0) {\n                tok.append(\"p=\" + bytesToHex(p.bytes, p.offset, p.length));\n              } else if (tok.length() > 0) {\n                tok.setLength(tok.length() - 1); // remove the last comma\n              }\n            } else if (cl.isAssignableFrom(PositionIncrementAttribute.class)) {\n              tok.append(\"i=\" + ((PositionIncrementAttribute)att).getPositionIncrement());\n            } else if (cl.isAssignableFrom(TypeAttribute.class)) {\n              tok.append(\"y=\" + escape(((TypeAttribute)att).type()));\n            } else {\n              \n              tok.append(cl.getName() + \"=\" + escape(att.toString()));\n            }\n          }\n        }\n        String term = null;\n        if (cTerm != null) {\n          term = cTerm;\n        } else {\n          term = tTerm;\n        }\n        if (term != null && term.length() > 0) {\n          if (tok.length() > 0) {\n            tok.insert(0, term + \",\");\n          } else {\n            tok.insert(0, term);\n          }\n        }\n        sb.append(tok);\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toFormattedString(Field f) throws IOException {\n    StringBuilder sb = new StringBuilder();\n    sb.append(VERSION + \" \");\n    if (f.fieldType().stored()) {\n      String s = f.stringValue();\n      if (s != null) {\n        // encode the equals sign\n        s = s.replaceAll(\"=\", \"\\\\=\");\n        sb.append('=');\n        sb.append(s);\n        sb.append('=');\n      }\n    }\n    TokenStream ts = f.tokenStreamValue();\n    if (ts != null) {\n      StringBuilder tok = new StringBuilder();\n      boolean next = false;\n      while (ts.incrementToken()) {\n        if (next) {\n          sb.append(' ');\n        } else {\n          next = true;\n        }\n        tok.setLength(0);\n        Iterator<Class<? extends Attribute>> it = ts.getAttributeClassesIterator();\n        String cTerm = null;\n        String tTerm = null;\n        while (it.hasNext()) {\n          Class<? extends Attribute> cl = it.next();\n          if (!ts.hasAttribute(cl)) {\n            continue;\n          }\n          Attribute att = ts.getAttribute(cl);\n          if (cl.isAssignableFrom(CharTermAttribute.class)) {\n            CharTermAttribute catt = (CharTermAttribute)att;\n            cTerm = escape(catt.buffer(), catt.length());\n          } else if (cl.isAssignableFrom(TermToBytesRefAttribute.class)) {\n            TermToBytesRefAttribute tatt = (TermToBytesRefAttribute)att;\n            char[] tTermChars = tatt.getBytesRef().utf8ToString().toCharArray();\n            tTerm = escape(tTermChars, tTermChars.length);\n          } else {\n            if (tok.length() > 0) tok.append(',');\n            if (cl.isAssignableFrom(FlagsAttribute.class)) {\n              tok.append(\"f=\" + Integer.toHexString(((FlagsAttribute)att).getFlags()));\n            } else if (cl.isAssignableFrom(OffsetAttribute.class)) {\n              tok.append(\"s=\" + ((OffsetAttribute)att).startOffset() + \",e=\" + ((OffsetAttribute)att).endOffset());\n            } else if (cl.isAssignableFrom(PayloadAttribute.class)) {\n              BytesRef p = ((PayloadAttribute)att).getPayload();\n              if (p != null && p.length > 0) {\n                tok.append(\"p=\" + bytesToHex(p.bytes, p.offset, p.length));\n              } else if (tok.length() > 0) {\n                tok.setLength(tok.length() - 1); // remove the last comma\n              }\n            } else if (cl.isAssignableFrom(PositionIncrementAttribute.class)) {\n              tok.append(\"i=\" + ((PositionIncrementAttribute)att).getPositionIncrement());\n            } else if (cl.isAssignableFrom(TypeAttribute.class)) {\n              tok.append(\"y=\" + escape(((TypeAttribute)att).type()));\n            } else {\n              \n              tok.append(cl.getName() + \"=\" + escape(att.toString()));\n            }\n          }\n        }\n        String term = null;\n        if (cTerm != null) {\n          term = cTerm;\n        } else {\n          term = tTerm;\n        }\n        if (term != null && term.length() > 0) {\n          if (tok.length() > 0) {\n            tok.insert(0, term + \",\");\n          } else {\n            tok.insert(0, term);\n          }\n        }\n        sb.append(tok);\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ffe681f212e5073c69955b4ad22946794c84940","date":1560182863,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SimplePreAnalyzedParser#toFormattedString(Field).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SimplePreAnalyzedParser#toFormattedString(Field).mjava","sourceNew":"  @Override\n  public String toFormattedString(Field f) throws IOException {\n    StringBuilder sb = new StringBuilder();\n    sb.append(VERSION + \" \");\n    if (f.fieldType().stored()) {\n      String s = f.stringValue();\n      if (s != null) {\n        // encode the equals sign\n        s = s.replaceAll(\"=\", \"\\\\=\");\n        sb.append('=');\n        sb.append(s);\n        sb.append('=');\n      }\n    }\n    TokenStream ts = f.tokenStreamValue();\n    if (ts != null) {\n      StringBuilder tok = new StringBuilder();\n      boolean next = false;\n      while (ts.incrementToken()) {\n        if (next) {\n          sb.append(' ');\n        } else {\n          next = true;\n        }\n        tok.setLength(0);\n        Iterator<Class<? extends Attribute>> it = ts.getAttributeClassesIterator();\n        String cTerm = null;\n        String tTerm = null;\n        while (it.hasNext()) {\n          Class<? extends Attribute> cl = it.next();\n          Attribute att = ts.getAttribute(cl);\n          if (att == null) {\n            continue;\n          }\n          if (cl.isAssignableFrom(CharTermAttribute.class)) {\n            CharTermAttribute catt = (CharTermAttribute)att;\n            cTerm = escape(catt.buffer(), catt.length());\n          } else if (cl.isAssignableFrom(TermToBytesRefAttribute.class)) {\n            TermToBytesRefAttribute tatt = (TermToBytesRefAttribute)att;\n            char[] tTermChars = tatt.getBytesRef().utf8ToString().toCharArray();\n            tTerm = escape(tTermChars, tTermChars.length);\n          } else {\n            if (tok.length() > 0) tok.append(',');\n            if (cl.isAssignableFrom(FlagsAttribute.class)) {\n              tok.append(\"f=\").append(Integer.toHexString(((FlagsAttribute) att).getFlags()));\n            } else if (cl.isAssignableFrom(OffsetAttribute.class)) {\n              tok.append(\"s=\").append(((OffsetAttribute) att).startOffset()).append(\",e=\").append(((OffsetAttribute) att).endOffset());\n            } else if (cl.isAssignableFrom(PayloadAttribute.class)) {\n              BytesRef p = ((PayloadAttribute)att).getPayload();\n              if (p != null && p.length > 0) {\n                tok.append(\"p=\").append(bytesToHex(p.bytes, p.offset, p.length));\n              } else if (tok.length() > 0) {\n                tok.setLength(tok.length() - 1); // remove the last comma\n              }\n            } else if (cl.isAssignableFrom(PositionIncrementAttribute.class)) {\n              tok.append(\"i=\").append(((PositionIncrementAttribute) att).getPositionIncrement());\n            } else if (cl.isAssignableFrom(TypeAttribute.class)) {\n              tok.append(\"y=\").append(escape(((TypeAttribute) att).type()));\n            } else {\n              \n              tok.append(cl.getName()).append('=').append(escape(att.toString()));\n            }\n          }\n        }\n        String term = null;\n        if (cTerm != null) {\n          term = cTerm;\n        } else {\n          term = tTerm;\n        }\n        if (term != null && term.length() > 0) {\n          if (tok.length() > 0) {\n            tok.insert(0, term + \",\");\n          } else {\n            tok.insert(0, term);\n          }\n        }\n        sb.append(tok);\n      }\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toFormattedString(Field f) throws IOException {\n    StringBuilder sb = new StringBuilder();\n    sb.append(VERSION + \" \");\n    if (f.fieldType().stored()) {\n      String s = f.stringValue();\n      if (s != null) {\n        // encode the equals sign\n        s = s.replaceAll(\"=\", \"\\\\=\");\n        sb.append('=');\n        sb.append(s);\n        sb.append('=');\n      }\n    }\n    TokenStream ts = f.tokenStreamValue();\n    if (ts != null) {\n      StringBuilder tok = new StringBuilder();\n      boolean next = false;\n      while (ts.incrementToken()) {\n        if (next) {\n          sb.append(' ');\n        } else {\n          next = true;\n        }\n        tok.setLength(0);\n        Iterator<Class<? extends Attribute>> it = ts.getAttributeClassesIterator();\n        String cTerm = null;\n        String tTerm = null;\n        while (it.hasNext()) {\n          Class<? extends Attribute> cl = it.next();\n          Attribute att = ts.getAttribute(cl);\n          if (att == null) {\n            continue;\n          }\n          if (cl.isAssignableFrom(CharTermAttribute.class)) {\n            CharTermAttribute catt = (CharTermAttribute)att;\n            cTerm = escape(catt.buffer(), catt.length());\n          } else if (cl.isAssignableFrom(TermToBytesRefAttribute.class)) {\n            TermToBytesRefAttribute tatt = (TermToBytesRefAttribute)att;\n            char[] tTermChars = tatt.getBytesRef().utf8ToString().toCharArray();\n            tTerm = escape(tTermChars, tTermChars.length);\n          } else {\n            if (tok.length() > 0) tok.append(',');\n            if (cl.isAssignableFrom(FlagsAttribute.class)) {\n              tok.append(\"f=\" + Integer.toHexString(((FlagsAttribute)att).getFlags()));\n            } else if (cl.isAssignableFrom(OffsetAttribute.class)) {\n              tok.append(\"s=\" + ((OffsetAttribute)att).startOffset() + \",e=\" + ((OffsetAttribute)att).endOffset());\n            } else if (cl.isAssignableFrom(PayloadAttribute.class)) {\n              BytesRef p = ((PayloadAttribute)att).getPayload();\n              if (p != null && p.length > 0) {\n                tok.append(\"p=\" + bytesToHex(p.bytes, p.offset, p.length));\n              } else if (tok.length() > 0) {\n                tok.setLength(tok.length() - 1); // remove the last comma\n              }\n            } else if (cl.isAssignableFrom(PositionIncrementAttribute.class)) {\n              tok.append(\"i=\" + ((PositionIncrementAttribute)att).getPositionIncrement());\n            } else if (cl.isAssignableFrom(TypeAttribute.class)) {\n              tok.append(\"y=\" + escape(((TypeAttribute)att).type()));\n            } else {\n              \n              tok.append(cl.getName() + \"=\" + escape(att.toString()));\n            }\n          }\n        }\n        String term = null;\n        if (cTerm != null) {\n          term = cTerm;\n        } else {\n          term = tTerm;\n        }\n        if (term != null && term.length() > 0) {\n          if (tok.length() > 0) {\n            tok.insert(0, term + \",\");\n          } else {\n            tok.insert(0, term);\n          }\n        }\n        sb.append(tok);\n      }\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["7530de27b87b961b51f01bd1299b7004d46e8823","63241596de245e96a0a3c36c7b03eb92130b81db"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["76fa9933adb0556e752e8af9734c4d0ae14622ff","7530de27b87b961b51f01bd1299b7004d46e8823"],"2ffe681f212e5073c69955b4ad22946794c84940":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["7530de27b87b961b51f01bd1299b7004d46e8823","3394716f52b34ab259ad5247e7595d9f9db6e935"],"63241596de245e96a0a3c36c7b03eb92130b81db":["7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"76fa9933adb0556e752e8af9734c4d0ae14622ff":["232d48b2fd10ac5189a0ac4480ace7421be9de93"],"232d48b2fd10ac5189a0ac4480ace7421be9de93":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7530de27b87b961b51f01bd1299b7004d46e8823":["76fa9933adb0556e752e8af9734c4d0ae14622ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2ffe681f212e5073c69955b4ad22946794c84940"]},"commit2Childs":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["2ffe681f212e5073c69955b4ad22946794c84940","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"2ffe681f212e5073c69955b4ad22946794c84940":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"63241596de245e96a0a3c36c7b03eb92130b81db":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["232d48b2fd10ac5189a0ac4480ace7421be9de93"],"76fa9933adb0556e752e8af9734c4d0ae14622ff":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"232d48b2fd10ac5189a0ac4480ace7421be9de93":["76fa9933adb0556e752e8af9734c4d0ae14622ff"],"7530de27b87b961b51f01bd1299b7004d46e8823":["3394716f52b34ab259ad5247e7595d9f9db6e935","d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","63241596de245e96a0a3c36c7b03eb92130b81db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}