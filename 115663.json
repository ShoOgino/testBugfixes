{"path":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.IntersectTermsEnum#next().mjava","commits":[{"id":"050ba1ba249733cac50c2612418b7179591d2df9","date":1374633633,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.IntersectTermsEnum#next().mjava","pathOld":"/dev/null","sourceNew":"      // nocommit: make use of extra info, like commonSuffixRef\n      @Override\n      public BytesRef next() throws IOException {\n        //if (DEBUG) System.out.println(\"Enum next()\");\n        if (pending) {\n          pending = false;\n          return term;\n        }\n        decoded = false;\n      DFS:\n        while (stack.size() > 1) {\n          Frame frame = newFrame();\n          if (loadExpandFrame(topFrame(), frame) != null) {  // has valid target\n            pushFrame(frame);\n            if (isAccept(frame)) {  // gotcha\n              return term;\n            }\n            continue;  // check next target\n          } \n          frame = popFrame();\n          while(stack.size() > 1) {\n            if (loadNextFrame(topFrame(), frame) != null) {  // has valid sibling \n              pushFrame(frame);\n              if (isAccept(frame)) {  // gotcha\n                return term;\n              }\n              continue DFS;   // check next target \n            }\n            frame = popFrame();\n          }\n          return null;\n        }\n        return null;\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d7b1c6dfde5c14fc13ffb78626073d55020636fe","date":1374636171,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.IntersectTermsEnum#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.IntersectTermsEnum#next().mjava","sourceNew":"      @Override\n      public BytesRef next() throws IOException {\n        //if (DEBUG) System.out.println(\"Enum next()\");\n        if (pending) {\n          pending = false;\n          return term;\n        }\n        decoded = false;\n      DFS:\n        while (stack.size() > 1) {\n          Frame frame = newFrame();\n          if (loadExpandFrame(topFrame(), frame) != null) {  // has valid target\n            pushFrame(frame);\n            if (isAccept(frame)) {  // gotcha\n              return term;\n            }\n            continue;  // check next target\n          } \n          frame = popFrame();\n          while(stack.size() > 1) {\n            if (loadNextFrame(topFrame(), frame) != null) {  // has valid sibling \n              pushFrame(frame);\n              if (isAccept(frame)) {  // gotcha\n                return term;\n              }\n              continue DFS;   // check next target \n            }\n            frame = popFrame();\n          }\n          return null;\n        }\n        return null;\n      }\n\n","sourceOld":"      // nocommit: make use of extra info, like commonSuffixRef\n      @Override\n      public BytesRef next() throws IOException {\n        //if (DEBUG) System.out.println(\"Enum next()\");\n        if (pending) {\n          pending = false;\n          return term;\n        }\n        decoded = false;\n      DFS:\n        while (stack.size() > 1) {\n          Frame frame = newFrame();\n          if (loadExpandFrame(topFrame(), frame) != null) {  // has valid target\n            pushFrame(frame);\n            if (isAccept(frame)) {  // gotcha\n              return term;\n            }\n            continue;  // check next target\n          } \n          frame = popFrame();\n          while(stack.size() > 1) {\n            if (loadNextFrame(topFrame(), frame) != null) {  // has valid sibling \n              pushFrame(frame);\n              if (isAccept(frame)) {  // gotcha\n                return term;\n              }\n              continue DFS;   // check next target \n            }\n            frame = popFrame();\n          }\n          return null;\n        }\n        return null;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b955911cf637357102623569adc4d9332fc4650","date":1374653945,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.IntersectTermsEnum#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.IntersectTermsEnum#next().mjava","sourceNew":"      @Override\n      public BytesRef next() throws IOException {\n        //if (DEBUG) System.out.println(\"Enum next()\");\n        if (pending) {\n          pending = false;\n          return term;\n        }\n        decoded = false;\n      DFS:\n        while (level > 0) {\n          Frame frame = newFrame();\n          if (loadExpandFrame(topFrame(), frame) != null) {  // has valid target\n            pushFrame(frame);\n            if (isAccept(frame)) {  // gotcha\n              return term;\n            }\n            continue;  // check next target\n          } \n          frame = popFrame();\n          while(level > 0) {\n            if (loadNextFrame(topFrame(), frame) != null) {  // has valid sibling \n              pushFrame(frame);\n              if (isAccept(frame)) {  // gotcha\n                return term;\n              }\n              continue DFS;   // check next target \n            }\n            frame = popFrame();\n          }\n          return null;\n        }\n        return null;\n      }\n\n","sourceOld":"      @Override\n      public BytesRef next() throws IOException {\n        //if (DEBUG) System.out.println(\"Enum next()\");\n        if (pending) {\n          pending = false;\n          return term;\n        }\n        decoded = false;\n      DFS:\n        while (stack.size() > 1) {\n          Frame frame = newFrame();\n          if (loadExpandFrame(topFrame(), frame) != null) {  // has valid target\n            pushFrame(frame);\n            if (isAccept(frame)) {  // gotcha\n              return term;\n            }\n            continue;  // check next target\n          } \n          frame = popFrame();\n          while(stack.size() > 1) {\n            if (loadNextFrame(topFrame(), frame) != null) {  // has valid sibling \n              pushFrame(frame);\n              if (isAccept(frame)) {  // gotcha\n                return term;\n              }\n              continue DFS;   // check next target \n            }\n            frame = popFrame();\n          }\n          return null;\n        }\n        return null;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5b0be9ff420e4c2fc29e99f1ee50cc5cdab0089a","date":1374682501,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.IntersectTermsEnum#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.IntersectTermsEnum#next().mjava","sourceNew":"      @Override\n      public BytesRef next() throws IOException {\n        //if (DEBUG) System.out.println(\"Enum next()\");\n        if (pending) {\n          pending = false;\n          loadMetaData();\n          return term;\n        }\n        decoded = false;\n      DFS:\n        while (level > 0) {\n          Frame frame = newFrame();\n          if (loadExpandFrame(topFrame(), frame) != null) {  // has valid target\n            pushFrame(frame);\n            if (isAccept(frame)) {  // gotcha\n              break;\n            }\n            continue;  // check next target\n          } \n          frame = popFrame();\n          while(level > 0) {\n            if (loadNextFrame(topFrame(), frame) != null) {  // has valid sibling \n              pushFrame(frame);\n              if (isAccept(frame)) {  // gotcha\n                break DFS;\n              }\n              continue DFS;   // check next target \n            }\n            frame = popFrame();\n          }\n          return null;\n        }\n        loadMetaData();\n        return term;\n      }\n\n","sourceOld":"      @Override\n      public BytesRef next() throws IOException {\n        //if (DEBUG) System.out.println(\"Enum next()\");\n        if (pending) {\n          pending = false;\n          return term;\n        }\n        decoded = false;\n      DFS:\n        while (level > 0) {\n          Frame frame = newFrame();\n          if (loadExpandFrame(topFrame(), frame) != null) {  // has valid target\n            pushFrame(frame);\n            if (isAccept(frame)) {  // gotcha\n              return term;\n            }\n            continue;  // check next target\n          } \n          frame = popFrame();\n          while(level > 0) {\n            if (loadNextFrame(topFrame(), frame) != null) {  // has valid sibling \n              pushFrame(frame);\n              if (isAccept(frame)) {  // gotcha\n                return term;\n              }\n              continue DFS;   // check next target \n            }\n            frame = popFrame();\n          }\n          return null;\n        }\n        return null;\n      }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.IntersectTermsEnum#next().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader.TermsReader.IntersectTermsEnum#next().mjava","sourceNew":"      @Override\n      public BytesRef next() throws IOException {\n        //if (DEBUG) System.out.println(\"Enum next()\");\n        if (pending) {\n          pending = false;\n          loadMetaData();\n          return term;\n        }\n        decoded = false;\n      DFS:\n        while (level > 0) {\n          Frame frame = newFrame();\n          if (loadExpandFrame(topFrame(), frame) != null) {  // has valid target\n            pushFrame(frame);\n            if (isAccept(frame)) {  // gotcha\n              break;\n            }\n            continue;  // check next target\n          } \n          frame = popFrame();\n          while(level > 0) {\n            if (loadNextFrame(topFrame(), frame) != null) {  // has valid sibling \n              pushFrame(frame);\n              if (isAccept(frame)) {  // gotcha\n                break DFS;\n              }\n              continue DFS;   // check next target \n            }\n            frame = popFrame();\n          }\n          return null;\n        }\n        loadMetaData();\n        return term;\n      }\n\n","sourceOld":"      @Override\n      public BytesRef next() throws IOException {\n        //if (DEBUG) System.out.println(\"Enum next()\");\n        if (pending) {\n          pending = false;\n          loadMetaData();\n          return term;\n        }\n        decoded = false;\n      DFS:\n        while (level > 0) {\n          Frame frame = newFrame();\n          if (loadExpandFrame(topFrame(), frame) != null) {  // has valid target\n            pushFrame(frame);\n            if (isAccept(frame)) {  // gotcha\n              break;\n            }\n            continue;  // check next target\n          } \n          frame = popFrame();\n          while(level > 0) {\n            if (loadNextFrame(topFrame(), frame) != null) {  // has valid sibling \n              pushFrame(frame);\n              if (isAccept(frame)) {  // gotcha\n                break DFS;\n              }\n              continue DFS;   // check next target \n            }\n            frame = popFrame();\n          }\n          return null;\n        }\n        loadMetaData();\n        return term;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["5b0be9ff420e4c2fc29e99f1ee50cc5cdab0089a"],"d7b1c6dfde5c14fc13ffb78626073d55020636fe":["050ba1ba249733cac50c2612418b7179591d2df9"],"5b0be9ff420e4c2fc29e99f1ee50cc5cdab0089a":["3b955911cf637357102623569adc4d9332fc4650"],"3b955911cf637357102623569adc4d9332fc4650":["d7b1c6dfde5c14fc13ffb78626073d55020636fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"050ba1ba249733cac50c2612418b7179591d2df9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","050ba1ba249733cac50c2612418b7179591d2df9"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":[],"d7b1c6dfde5c14fc13ffb78626073d55020636fe":["3b955911cf637357102623569adc4d9332fc4650"],"5b0be9ff420e4c2fc29e99f1ee50cc5cdab0089a":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"3b955911cf637357102623569adc4d9332fc4650":["5b0be9ff420e4c2fc29e99f1ee50cc5cdab0089a"],"050ba1ba249733cac50c2612418b7179591d2df9":["d7b1c6dfde5c14fc13ffb78626073d55020636fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}