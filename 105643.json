{"path":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterStallControl#awaitState(long,Thread.State,Thread...).mjava","commits":[{"id":"f31d1f3a9bc5a99a8d7f3110bab36210e7d967c6","date":1337196931,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterStallControl#awaitState(long,Thread.State,Thread...).mjava","pathOld":"/dev/null","sourceNew":"  public static void awaitState(long timeout, Thread.State state,\n      Thread... threads) throws InterruptedException {\n    long t = System.currentTimeMillis();\n    while (System.currentTimeMillis() - t <= timeout) {\n      boolean done = true;\n      for (Thread thread : threads) {\n        if (thread.getState() != state) {\n          done = false;\n        }\n      }\n      if (done) {\n        return;\n      }\n      if (random().nextBoolean()) {\n        Thread.yield();\n      } else {\n        Thread.sleep(1);\n      }\n    }\n    fail(\"timed out waiting for state: \" + state + \" timeout: \" + timeout\n        + \" ms\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterStallControl#awaitState(long,Thread.State,Thread...).mjava","pathOld":"/dev/null","sourceNew":"  public static void awaitState(long timeout, Thread.State state,\n      Thread... threads) throws InterruptedException {\n    long t = System.currentTimeMillis();\n    while (System.currentTimeMillis() - t <= timeout) {\n      boolean done = true;\n      for (Thread thread : threads) {\n        if (thread.getState() != state) {\n          done = false;\n        }\n      }\n      if (done) {\n        return;\n      }\n      if (random().nextBoolean()) {\n        Thread.yield();\n      } else {\n        Thread.sleep(1);\n      }\n    }\n    fail(\"timed out waiting for state: \" + state + \" timeout: \" + timeout\n        + \" ms\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61a1004502370815d01bf1b70296c08d563033fe","date":1349367697,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterStallControl#awaitState(Thread.State,Thread...).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterStallControl#awaitState(long,Thread.State,Thread...).mjava","sourceNew":"  /** Waits for all incoming threads to be in wait()\n   *  methods. */\n  public static void awaitState(Thread.State state,\n      Thread... threads) throws InterruptedException {\n    while (true) {\n      boolean done = true;\n      for (Thread thread : threads) {\n        if (thread.getState() != state) {\n          done = false;\n        }\n      }\n      if (done) {\n        return;\n      }\n      if (random().nextBoolean()) {\n        Thread.yield();\n      } else {\n        Thread.sleep(1);\n      }\n    }\n  }\n\n","sourceOld":"  public static void awaitState(long timeout, Thread.State state,\n      Thread... threads) throws InterruptedException {\n    long t = System.currentTimeMillis();\n    while (System.currentTimeMillis() - t <= timeout) {\n      boolean done = true;\n      for (Thread thread : threads) {\n        if (thread.getState() != state) {\n          done = false;\n        }\n      }\n      if (done) {\n        return;\n      }\n      if (random().nextBoolean()) {\n        Thread.yield();\n      } else {\n        Thread.sleep(1);\n      }\n    }\n    fail(\"timed out waiting for state: \" + state + \" timeout: \" + timeout\n        + \" ms\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f31d1f3a9bc5a99a8d7f3110bab36210e7d967c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"61a1004502370815d01bf1b70296c08d563033fe":["f31d1f3a9bc5a99a8d7f3110bab36210e7d967c6"],"ef0d8a69209261514c5739c770bba706c2308450":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f31d1f3a9bc5a99a8d7f3110bab36210e7d967c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["61a1004502370815d01bf1b70296c08d563033fe"]},"commit2Childs":{"f31d1f3a9bc5a99a8d7f3110bab36210e7d967c6":["61a1004502370815d01bf1b70296c08d563033fe","ef0d8a69209261514c5739c770bba706c2308450"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f31d1f3a9bc5a99a8d7f3110bab36210e7d967c6","ef0d8a69209261514c5739c770bba706c2308450"],"61a1004502370815d01bf1b70296c08d563033fe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef0d8a69209261514c5739c770bba706c2308450":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}